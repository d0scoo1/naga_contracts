{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/common/BaseReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./IVirtualBalanceWrapper.sol\\\";\\nimport \\\"./IBaseReward.sol\\\";\\n\\ncontract BaseReward is ReentrancyGuard, IBaseReward {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public rewardToken;\\n    uint256 public constant duration = 7 days;\\n\\n    // address public owner;\\n    mapping(address => bool) private owners;\\n    address public virtualBalance;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user);\\n    event Withdrawn(address indexed user);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event NewOwner(address indexed sender, address operator);\\n    event RemoveOwner(address indexed sender, address operator);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwners() {\\n        require(isOwner(msg.sender), \\\"BaseReward: caller is not an owner\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _reward,\\n        address _virtualBalance,\\n        address _owner\\n    ) public {\\n        rewardToken = _reward;\\n        virtualBalance = _virtualBalance;\\n        owners[_owner] = true;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return IVirtualBalanceWrapper(virtualBalance).totalSupply();\\n    }\\n\\n    function balanceOf(address _for) public view returns (uint256) {\\n        return IVirtualBalanceWrapper(virtualBalance).balanceOf(_for);\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view override returns (uint256) {\\n        return\\n            balanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function addOwner(address _newOwner) public override onlyOwners {\\n        require(!isOwner(_newOwner), \\\"BaseReward: address is already owner\\\");\\n\\n        owners[_newOwner] = true;\\n\\n        emit NewOwner(msg.sender, _newOwner);\\n    }\\n\\n    function addOwners(address[] calldata _newOwners) external override onlyOwners {\\n        for (uint256 i = 0; i < _newOwners.length; i++) {\\n            addOwner(_newOwners[i]);\\n        }\\n    }\\n\\n    function removeOwner(address _owner) external override onlyOwners {\\n        require(isOwner(_owner), \\\"BaseReward: address is not owner\\\");\\n\\n        owners[_owner] = false;\\n\\n        emit RemoveOwner(msg.sender, _owner);\\n    }\\n\\n    function isOwner(address _owner) public view override returns (bool) {\\n        return owners[_owner];\\n    }\\n\\n    function stake(address _for) public override updateReward(_for) onlyOwners {\\n        emit Staked(_for);\\n    }\\n\\n    function withdraw(address _for)\\n        public\\n        override\\n        updateReward(_for)\\n        onlyOwners\\n    {\\n        emit Withdrawn(_for);\\n    }\\n\\n    function getReward(address _for)\\n        public\\n        override\\n        nonReentrant\\n        updateReward(_for)\\n    {\\n        uint256 reward = earned(_for);\\n\\n        if (reward > 0) {\\n            rewards[_for] = 0;\\n\\n            if (rewardToken != address(0)) {\\n                IERC20(rewardToken).safeTransfer(_for, reward);\\n            } else {\\n                require(\\n                    address(this).balance >= reward,\\n                    \\\"BaseReward: !address(this).balance\\\"\\n                );\\n\\n                payable(_for).sendValue(reward);\\n            }\\n\\n            emit RewardPaid(_for, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        updateReward(address(0))\\n        onlyOwners\\n    {\\n        // overflow fix according to https://sips.synthetix.io/sips/sip-77\\n        require(\\n            reward < uint256(-1) / 1e18,\\n            \\\"the notified reward cannot invoke multiplication overflow\\\"\\n        );\\n\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(duration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(duration);\\n        }\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(duration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/IVirtualBalanceWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IVirtualBalanceWrapperFactory {\\n    function createWrapper(address _op) external returns (address);\\n}\\n\\ninterface IVirtualBalanceWrapper {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _account) external view returns (uint256);\\n    function stakeFor(address _for, uint256 _amount) external returns (bool);\\n    function withdrawFor(address _for, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/common/IBaseReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IBaseReward {\\n    function earned(address account) external view returns (uint256);\\n    function stake(address _for) external;\\n    function withdraw(address _for) external;\\n    function getReward(address _for) external;\\n    function notifyRewardAmount(uint256 reward) external;\\n    function addOwner(address _newOwner) external;\\n    function addOwners(address[] calldata _newOwners) external;\\n    function removeOwner(address _owner) external;\\n    function isOwner(address _owner) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supply/SupplyRewardFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../common/IVirtualBalanceWrapper.sol\\\";\\nimport \\\"../common/BaseReward.sol\\\";\\n\\ncontract SupplyRewardFactory {\\n    event NewOwner(address indexed sender, address operator);\\n    event RemoveOwner(address indexed sender, address operator);\\n    event CreateReward(address pool, address rewardToken);\\n\\n    mapping(address => bool) private owners;\\n\\n    modifier onlyOwners() {\\n        require(\\n            isOwner(msg.sender),\\n            \\\"SupplyRewardFactory: caller is not an owner\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() public {\\n        owners[msg.sender] = true;\\n    }\\n\\n    function addOwner(address _newOwner) public onlyOwners {\\n        require(\\n            !isOwner(_newOwner),\\n            \\\"SupplyRewardFactory: address is already owner\\\"\\n        );\\n\\n        owners[_newOwner] = true;\\n\\n        emit NewOwner(msg.sender, _newOwner);\\n    }\\n\\n    function addOwners(address[] calldata _newOwners) external onlyOwners {\\n        for (uint256 i = 0; i < _newOwners.length; i++) {\\n            addOwner(_newOwners[i]);\\n        }\\n    }\\n\\n    function removeOwner(address _owner) external onlyOwners {\\n        require(isOwner(_owner), \\\"SupplyRewardFactory: address is not owner\\\");\\n\\n        owners[_owner] = false;\\n\\n        emit RemoveOwner(msg.sender, _owner);\\n    }\\n\\n    function isOwner(address _owner) public view returns (bool) {\\n        return owners[_owner];\\n    }\\n\\n    function createReward(\\n        address _rewardToken,\\n        address _virtualBalance,\\n        address _owner\\n    ) public onlyOwners returns (address) {\\n        BaseReward pool = new BaseReward(\\n            _rewardToken,\\n            _virtualBalance,\\n            _owner\\n        );\\n\\n        emit CreateReward(address(pool), _rewardToken);\\n\\n        return address(pool);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SupplyBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"./common/IVirtualBalanceWrapper.sol\\\";\\nimport \\\"./supply/SupplyInterfaces.sol\\\";\\n\\ncontract SupplyBooster is Initializable, ReentrancyGuard, ISupplyBooster {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public supplyRewardFactory;\\n    address public virtualBalanceWrapperFactory;\\n    address public extraReward;\\n    uint256 public launchTime;\\n    uint256 public version;\\n\\n    address payable public teamFeeAddress;\\n    address public lendingMarket;\\n\\n    address public owner;\\n    address public governance;\\n\\n    struct PoolInfo {\\n        address underlyToken;\\n        address rewardInterestPool;\\n        address supplyTreasuryFund;\\n        address virtualBalance;\\n        bool isErc20;\\n        bool shutdown;\\n    }\\n\\n    enum LendingInfoState {\\n        NONE,\\n        LOCK,\\n        UNLOCK,\\n        LIQUIDATE\\n    }\\n\\n    struct LendingInfo {\\n        uint256 pid;\\n        address user;\\n        address underlyToken;\\n        uint256 lendingAmount;\\n        uint256 borrowNumbers;\\n        uint256 startedBlock;\\n        LendingInfoState state;\\n    }\\n\\n    address public constant ZERO_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 public constant MIN_INTEREST_PERCENT = 0;\\n    uint256 public constant MAX_INTEREST_PERCENT = 100;\\n    uint256 public constant FEE_PERCENT = 10;\\n    uint256 public constant PERCENT_DENOMINATOR = 100;\\n\\n    PoolInfo[] public override poolInfo;\\n\\n    uint256 public interestPercent;\\n\\n    mapping(uint256 => uint256) public frozenTokens; /* pool id => amount */\\n    mapping(bytes32 => LendingInfo) public lendingInfos;\\n    mapping(uint256 => uint256) public interestTotal;\\n\\n    event Deposited(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Borrow(\\n        address indexed user,\\n        uint256 indexed pid,\\n        bytes32 indexed lendingId,\\n        uint256 lendingAmount,\\n        uint256 lendingInterest,\\n        uint256 borrowNumbers\\n    );\\n    event RepayBorrow(\\n        bytes32 indexed lendingId,\\n        address indexed user,\\n        uint256 lendingAmount,\\n        uint256 lendingInterest,\\n        bool isErc20\\n    );\\n    event Liquidate(\\n        bytes32 indexed lendingId,\\n        uint256 lendingAmount,\\n        uint256 lendingInterest\\n    );\\n    event Initialized(address indexed thisAddress);\\n    event ToggleShutdownPool(uint256 pid, bool shutdown);\\n    event SetOwner(address owner);\\n    event SetGovernance(address governance);\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"SupplyBooster: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governance == msg.sender,\\n            \\\"SupplyBooster: caller is not the governance\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLendingMarket() {\\n        require(\\n            lendingMarket == msg.sender,\\n            \\\" SupplyBooster: caller is not the lendingMarket\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    /* \\n    The default governance user is GenerateLendingPools contract.\\n    It will be set to DAO in the future \\n    */\\n    function setGovernance(address _governance) public onlyOwner {\\n        governance = _governance;\\n\\n        emit SetGovernance(_governance);\\n    }\\n\\n    function setLendingMarket(address _v) public onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        lendingMarket = _v;\\n    }\\n\\n    function setExtraReward(address _v) public onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        extraReward = _v;\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        address _virtualBalanceWrapperFactory,\\n        address _supplyRewardFactory,\\n        address payable _teamFeeAddress\\n    ) public initializer {\\n        owner = _owner;\\n        governance = _owner;\\n        virtualBalanceWrapperFactory = _virtualBalanceWrapperFactory;\\n        supplyRewardFactory = _supplyRewardFactory;\\n        teamFeeAddress = _teamFeeAddress;\\n        launchTime = block.timestamp;\\n        version = 1;\\n        interestPercent = 50;\\n\\n        emit Initialized(address(this));\\n    }\\n\\n    function addSupplyPool(address _underlyToken, address _supplyTreasuryFund)\\n        public\\n        override\\n        onlyGovernance\\n        returns (bool)\\n    {\\n        bool isErc20 = _underlyToken == ZERO_ADDRESS ? false : true;\\n        address virtualBalance = IVirtualBalanceWrapperFactory(\\n            virtualBalanceWrapperFactory\\n        ).createWrapper(address(this));\\n\\n        ISupplyTreasuryFund(_supplyTreasuryFund).initialize(\\n            virtualBalance,\\n            _underlyToken,\\n            isErc20\\n        );\\n\\n        address rewardInterestPool;\\n\\n        if (isErc20) {\\n            rewardInterestPool = ISupplyRewardFactory(supplyRewardFactory)\\n                .createReward(_underlyToken, virtualBalance, address(this));\\n        } else {\\n            rewardInterestPool = ISupplyRewardFactory(supplyRewardFactory)\\n                .createReward(address(0), virtualBalance, address(this));\\n        }\\n\\n        if (extraReward != address(0)) {\\n            ISupplyPoolExtraReward(extraReward).addExtraReward(\\n                poolInfo.length,\\n                _underlyToken,\\n                virtualBalance,\\n                isErc20\\n            );\\n        }\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                underlyToken: _underlyToken,\\n                rewardInterestPool: rewardInterestPool,\\n                supplyTreasuryFund: _supplyTreasuryFund,\\n                virtualBalance: virtualBalance,\\n                isErc20: isErc20,\\n                shutdown: false\\n            })\\n        );\\n\\n        return true;\\n    }\\n\\n    function updateSupplyTreasuryFund(\\n        uint256 _pid,\\n        address _supplyTreasuryFund,\\n        bool _setReward\\n    ) public onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        uint256 bal = ISupplyTreasuryFund(pool.supplyTreasuryFund).migrate(\\n            _supplyTreasuryFund,\\n            _setReward\\n        );\\n\\n        ISupplyTreasuryFund(_supplyTreasuryFund).initialize(\\n            pool.virtualBalance,\\n            pool.underlyToken,\\n            pool.isErc20\\n        );\\n\\n        pool.supplyTreasuryFund = _supplyTreasuryFund;\\n\\n        if (pool.isErc20) {\\n            sendToken(pool.underlyToken, pool.supplyTreasuryFund, bal);\\n\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).depositFor(\\n                address(0),\\n                bal\\n            );\\n        } else {\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).depositFor{value: bal}(\\n                address(0)\\n            );\\n        }\\n    }\\n\\n    function toggleShutdownPool(uint256 _pid) public onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.shutdown = !pool.shutdown;\\n\\n        if (extraReward != address(0)) {\\n            ISupplyPoolExtraReward(extraReward).toggleShutdownPool(\\n                _pid,\\n                pool.shutdown\\n            );\\n        }\\n\\n        emit ToggleShutdownPool(_pid, pool.shutdown);\\n    }\\n\\n    function _deposit(uint256 _pid, uint256 _amount) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        require(!pool.shutdown, \\\"SupplyBooster: !shutdown\\\");\\n        require(_amount > 0, \\\"SupplyBooster: !_amount\\\");\\n\\n        if (!pool.isErc20) {\\n            require(\\n                msg.value == _amount,\\n                \\\"SupplyBooster: !msg.value == _amount\\\"\\n            );\\n        }\\n\\n        if (pool.isErc20) {\\n            IERC20(pool.underlyToken).safeTransferFrom(\\n                msg.sender,\\n                pool.supplyTreasuryFund,\\n                _amount\\n            );\\n\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).depositFor(\\n                msg.sender,\\n                _amount\\n            );\\n        } else {\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).depositFor{\\n                value: _amount\\n            }(msg.sender);\\n        }\\n\\n        IBaseReward(pool.rewardInterestPool).stake(msg.sender);\\n\\n        if (extraReward != address(0)) {\\n            ISupplyPoolExtraReward(extraReward).beforeStake(_pid, msg.sender);\\n        }\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).stakeFor(\\n            msg.sender,\\n            _amount\\n        );\\n\\n        if (extraReward != address(0)) {\\n            ISupplyPoolExtraReward(extraReward).afterStake(_pid, msg.sender);\\n        }\\n\\n        emit Deposited(msg.sender, _pid, _amount);\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    function deposit(uint256 _pid) public payable {\\n        _deposit(_pid, msg.value);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        returns (bool)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        uint256 depositAmount = IVirtualBalanceWrapper(pool.virtualBalance)\\n            .balanceOf(msg.sender);\\n\\n        require(_amount <= depositAmount, \\\"SupplyBooster: !depositAmount\\\");\\n\\n        IBaseReward(pool.rewardInterestPool).withdraw(msg.sender);\\n\\n        ISupplyTreasuryFund(pool.supplyTreasuryFund).withdrawFor(\\n            msg.sender,\\n            _amount\\n        );\\n\\n        if (extraReward != address(0)) {\\n            ISupplyPoolExtraReward(extraReward).beforeWithdraw(\\n                _pid,\\n                msg.sender\\n            );\\n        }\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(\\n            msg.sender,\\n            _amount\\n        );\\n\\n        if (extraReward != address(0)) {\\n            ISupplyPoolExtraReward(extraReward).afterWithdraw(_pid, msg.sender);\\n        }\\n\\n        emit Withdrawn(msg.sender, _pid, _amount);\\n\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function claimTreasuryFunds() public nonReentrant {\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            if (poolInfo[i].shutdown) {\\n                continue;\\n            }\\n\\n            uint256 interest = ISupplyTreasuryFund(\\n                poolInfo[i].supplyTreasuryFund\\n            ).claim();\\n\\n            if (interest > 0) {\\n                if (poolInfo[i].isErc20) {\\n                    sendToken(\\n                        poolInfo[i].underlyToken,\\n                        poolInfo[i].rewardInterestPool,\\n                        interest\\n                    );\\n                } else {\\n                    sendToken(\\n                        address(0),\\n                        poolInfo[i].rewardInterestPool,\\n                        interest\\n                    );\\n                }\\n\\n                IBaseReward(poolInfo[i].rewardInterestPool).notifyRewardAmount(\\n                    interest\\n                );\\n            }\\n        }\\n    }\\n\\n    function getRewards(uint256[] memory _pids) public nonReentrant {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            PoolInfo storage pool = poolInfo[_pids[i]];\\n\\n            if (pool.shutdown) continue;\\n\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).getReward(msg.sender);\\n\\n            if (IBaseReward(pool.rewardInterestPool).earned(msg.sender) > 0) {\\n                IBaseReward(pool.rewardInterestPool).getReward(msg.sender);\\n            }\\n\\n            if (extraReward != address(0)) {\\n                ISupplyPoolExtraReward(extraReward).getRewards(\\n                    _pids[i],\\n                    msg.sender\\n                );\\n            }\\n        }\\n    }\\n\\n    function setInterestPercent(uint256 _v) public onlyGovernance {\\n        require(\\n            _v >= MIN_INTEREST_PERCENT && _v <= MAX_INTEREST_PERCENT,\\n            \\\"!_v\\\"\\n        );\\n\\n        interestPercent = _v;\\n    }\\n\\n    function setTeamFeeAddress(address _v) public {\\n        require(msg.sender == teamFeeAddress, \\\"!teamAddress\\\");\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        teamFeeAddress = payable(_v);\\n    }\\n\\n    function calculateAmount(\\n        uint256 _bal,\\n        bool _fee,\\n        bool _interest,\\n        bool _extra\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 fee = _fee ? _bal.mul(FEE_PERCENT).div(PERCENT_DENOMINATOR) : 0;\\n        uint256 interest = _bal.sub(fee).mul(interestPercent).div(\\n            PERCENT_DENOMINATOR\\n        );\\n        uint256 extra = _bal.sub(fee).sub(interest);\\n\\n        if (!_extra) extra = 0;\\n        if (!_interest) interest = 0;\\n\\n        return (fee, interest, extra);\\n    }\\n\\n    function sendToken(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (_token == address(0) || _token == ZERO_ADDRESS) {\\n            payable(_receiver).sendValue(_amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n\\n    function sendBalanceEther(\\n        uint256 _pid,\\n        uint256 _bal,\\n        bool _fee,\\n        bool _interest,\\n        bool _extra\\n    ) internal {\\n        if (_bal == 0) return;\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        (uint256 fee, uint256 interest, uint256 extra) = calculateAmount(\\n            _bal,\\n            _fee,\\n            _interest,\\n            _extra\\n        );\\n\\n        if (fee > 0) {\\n            sendToken(pool.underlyToken, teamFeeAddress, fee);\\n        }\\n\\n        if (extraReward == address(0)) {\\n            interest = interest.add(extra);\\n        } else {\\n            ISupplyPoolExtraReward(extraReward).notifyRewardAmount{\\n                value: extra\\n            }(_pid, address(0), extra);\\n        }\\n\\n        if (interest > 0) {\\n            sendToken(pool.underlyToken, pool.rewardInterestPool, interest);\\n\\n            IBaseReward(pool.rewardInterestPool).notifyRewardAmount(interest);\\n        }\\n    }\\n\\n    function sendBalanceErc20(\\n        uint256 _pid,\\n        uint256 _bal,\\n        bool _fee,\\n        bool _interest,\\n        bool _extra\\n    ) internal {\\n        if (_bal == 0) return;\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        (uint256 fee, uint256 interest, uint256 extra) = calculateAmount(\\n            _bal,\\n            _fee,\\n            _interest,\\n            _extra\\n        );\\n\\n        if (fee > 0) {\\n            sendToken(pool.underlyToken, teamFeeAddress, fee);\\n        }\\n\\n        if (extraReward == address(0)) {\\n            interest = interest.add(extra);\\n        } else {\\n            sendToken(pool.underlyToken, extraReward, extra);\\n\\n            ISupplyPoolExtraReward(extraReward).notifyRewardAmount(\\n                _pid,\\n                pool.underlyToken,\\n                extra\\n            );\\n        }\\n\\n        if (interest > 0) {\\n            sendToken(pool.underlyToken, pool.rewardInterestPool, interest);\\n\\n            IBaseReward(pool.rewardInterestPool).notifyRewardAmount(interest);\\n        }\\n    }\\n\\n    function _borrow(\\n        uint256 _pid,\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest,\\n        uint256 _borrowNumbers\\n    ) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        require(!pool.shutdown, \\\"SupplyBooster: !shutdown\\\");\\n\\n        ISupplyTreasuryFund(pool.supplyTreasuryFund).borrow(\\n            _user,\\n            _lendingAmount,\\n            _lendingInterest\\n        );\\n\\n        frozenTokens[_pid] = frozenTokens[_pid].add(_lendingAmount);\\n        interestTotal[_pid] = interestTotal[_pid].add(_lendingInterest);\\n\\n        LendingInfo memory lendingInfo;\\n\\n        lendingInfo.pid = _pid;\\n        lendingInfo.user = _user;\\n        lendingInfo.underlyToken = pool.underlyToken;\\n        lendingInfo.lendingAmount = _lendingAmount;\\n        lendingInfo.borrowNumbers = _borrowNumbers;\\n        lendingInfo.startedBlock = block.number;\\n        lendingInfo.state = LendingInfoState.LOCK;\\n\\n        lendingInfos[_lendingId] = lendingInfo;\\n\\n        if (pool.isErc20) {\\n            sendBalanceErc20(\\n                lendingInfo.pid,\\n                _lendingInterest,\\n                true,\\n                true,\\n                true\\n            );\\n        } else {\\n            sendBalanceEther(\\n                lendingInfo.pid,\\n                _lendingInterest,\\n                true,\\n                true,\\n                true\\n            );\\n        }\\n\\n        emit Borrow(\\n            _user,\\n            _pid,\\n            _lendingId,\\n            _lendingAmount,\\n            _lendingInterest,\\n            _borrowNumbers\\n        );\\n    }\\n\\n    function borrow(\\n        uint256 _pid,\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest,\\n        uint256 _borrowNumbers\\n    ) public override onlyLendingMarket nonReentrant {\\n        _borrow(\\n            _pid,\\n            _lendingId,\\n            _user,\\n            _lendingAmount,\\n            _lendingInterest,\\n            _borrowNumbers\\n        );\\n    }\\n\\n    function _repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest\\n    ) internal nonReentrant {\\n        LendingInfo storage lendingInfo = lendingInfos[_lendingId];\\n        PoolInfo storage pool = poolInfo[lendingInfo.pid];\\n\\n        require(\\n            lendingInfo.state == LendingInfoState.LOCK,\\n            \\\"SupplyBooster: !LOCK\\\"\\n        );\\n        require(\\n            _lendingAmount >= lendingInfo.lendingAmount,\\n            \\\"SupplyBooster: !_lendingAmount\\\"\\n        );\\n\\n        frozenTokens[lendingInfo.pid] = frozenTokens[lendingInfo.pid].sub(\\n            lendingInfo.lendingAmount\\n        );\\n        interestTotal[lendingInfo.pid] = interestTotal[lendingInfo.pid].sub(\\n            _lendingInterest\\n        );\\n\\n        if (pool.isErc20) {\\n            sendToken(\\n                pool.underlyToken,\\n                pool.supplyTreasuryFund,\\n                lendingInfo.lendingAmount\\n            );\\n\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).repayBorrow(\\n                lendingInfo.lendingAmount\\n            );\\n        } else {\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).repayBorrow{\\n                value: lendingInfo.lendingAmount\\n            }();\\n        }\\n\\n        lendingInfo.state = LendingInfoState.UNLOCK;\\n\\n        emit RepayBorrow(\\n            _lendingId,\\n            _user,\\n            _lendingAmount,\\n            _lendingInterest,\\n            pool.isErc20\\n        );\\n    }\\n\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingInterest\\n    ) external payable override onlyLendingMarket {\\n        _repayBorrow(_lendingId, _user, msg.value, _lendingInterest);\\n    }\\n\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest\\n    ) external override onlyLendingMarket {\\n        _repayBorrow(_lendingId, _user, _lendingAmount, _lendingInterest);\\n    }\\n\\n    function _liquidate(bytes32 _lendingId, uint256 _lendingInterest)\\n        internal\\n        returns (address)\\n    {\\n        LendingInfo storage lendingInfo = lendingInfos[_lendingId];\\n        PoolInfo storage pool = poolInfo[lendingInfo.pid];\\n\\n        if (!pool.isErc20) {\\n            require(\\n                msg.value > 0,\\n                \\\"SupplyBooster: msg.value must be greater than 0\\\"\\n            );\\n        }\\n\\n        require(\\n            lendingInfo.state == LendingInfoState.LOCK,\\n            \\\"SupplyBooster: !LOCK\\\"\\n        );\\n\\n        frozenTokens[lendingInfo.pid] = frozenTokens[lendingInfo.pid].sub(\\n            lendingInfo.lendingAmount\\n        );\\n        interestTotal[lendingInfo.pid] = interestTotal[lendingInfo.pid].sub(\\n            _lendingInterest\\n        );\\n\\n        if (pool.isErc20) {\\n            sendToken(\\n                pool.underlyToken,\\n                pool.supplyTreasuryFund,\\n                lendingInfo.lendingAmount\\n            );\\n\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).repayBorrow(\\n                lendingInfo.lendingAmount\\n            );\\n\\n            uint256 bal = IERC20(pool.underlyToken).balanceOf(address(this));\\n\\n            sendBalanceErc20(lendingInfo.pid, bal, true, true, true);\\n        } else {\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund).repayBorrow{\\n                value: lendingInfo.lendingAmount\\n            }();\\n\\n            uint256 bal = address(this).balance;\\n\\n            sendBalanceEther(lendingInfo.pid, bal, true, true, true);\\n        }\\n\\n        lendingInfo.state = LendingInfoState.LIQUIDATE;\\n\\n        emit Liquidate(_lendingId, lendingInfo.lendingAmount, _lendingInterest);\\n    }\\n\\n    function liquidate(bytes32 _lendingId, uint256 _lendingInterest)\\n        public\\n        payable\\n        override\\n        onlyLendingMarket\\n        nonReentrant\\n        returns (address)\\n    {\\n        return _liquidate(_lendingId, _lendingInterest);\\n    }\\n\\n    /* view functions */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getUtilizationRate(uint256 _pid)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        uint256 currentBal = ISupplyTreasuryFund(pool.supplyTreasuryFund)\\n            .getBalance();\\n\\n        if (currentBal.add(frozenTokens[_pid]) == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            frozenTokens[_pid].mul(1e18).div(\\n                currentBal.add(frozenTokens[_pid])\\n            );\\n    }\\n\\n    function getBorrowRatePerBlock(uint256 _pid)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return\\n            ISupplyTreasuryFund(pool.supplyTreasuryFund)\\n                .getBorrowRatePerBlock();\\n    }\\n\\n    function getLendingUnderlyToken(bytes32 _lendingId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        LendingInfo storage lendingInfo = lendingInfos[_lendingId];\\n\\n        return (lendingInfo.underlyToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supply/SupplyInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/IBaseReward.sol\\\";\\nimport \\\"./ISupplyBooster.sol\\\";\\n\\ninterface ISupplyPoolExtraReward {\\n    function addExtraReward( uint256 _pid, address _lpToken, address _virtualBalance, bool _isErc20) external;\\n    function toggleShutdownPool(uint256 _pid, bool _state) external;\\n    function getRewards(uint256 _pid,address _for) external;\\n    function beforeStake(uint256 _pid, address _for) external;\\n    function afterStake(uint256 _pid, address _for) external;\\n    function beforeWithdraw(uint256 _pid, address _for) external;\\n    function afterWithdraw(uint256 _pid, address _for) external;\\n    function notifyRewardAmount( uint256 _pid, address _underlyToken, uint256 _amount) external payable;\\n}\\n\\ninterface ISupplyTreasuryFund {\\n    function initialize(address _virtualBalance, address _underlyToken, bool _isErc20) external;\\n    function depositFor(address _for) external payable;\\n    function depositFor(address _for, uint256 _amount) external;\\n    function withdrawFor(address _to, uint256 _amount) external  returns (uint256);\\n    function borrow(address _to, uint256 _lendingAmount,uint256 _lendingInterest) external returns (uint256);\\n    function repayBorrow() external payable;\\n    function repayBorrow(uint256 _lendingAmount) external;\\n    function claimComp(address _comp, address _comptroller, address _to) external returns (uint256, bool);\\n    function getBalance() external view returns (uint256);\\n    function getBorrowRatePerBlock() external view returns (uint256);\\n    function claim() external returns(uint256);\\n    function migrate(address _newTreasuryFund, bool _setReward) external returns(uint256);\\n    function getReward(address _for) external;\\n}\\n\\ninterface ISupplyRewardFactory {\\n    function createReward(\\n        address _rewardToken,\\n        address _virtualBalance,\\n        address _owner\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/supply/ISupplyBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface ISupplyBooster {\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address underlyToken,\\n            address rewardInterestPool,\\n            address supplyTreasuryFund,\\n            address virtualBalance,\\n            bool isErc20,\\n            bool shutdown\\n        );\\n\\n    function liquidate(bytes32 _lendingId, uint256 _lendingInterest)\\n        external\\n        payable\\n        returns (address);\\n\\n    function getLendingUnderlyToken(bytes32 _lendingId)\\n        external\\n        view\\n        returns (address);\\n\\n    function borrow(\\n        uint256 _pid,\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest,\\n        uint256 _borrowNumbers\\n    ) external;\\n\\n    // ether\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingInterest\\n    ) external payable;\\n\\n    // erc20\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest\\n    ) external;\\n\\n    function addSupplyPool(address _underlyToken, address _supplyTreasuryFund)\\n        external\\n        returns (bool);\\n\\n    function getBorrowRatePerBlock(uint256 _pid)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUtilizationRate(uint256 _pid) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/supply/SupplyPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./SupplyTreasuryFundForCompound.sol\\\";\\nimport \\\"./ISupplyBooster.sol\\\";\\n\\ninterface ISupplyRewardFactoryExtra is ISupplyRewardFactory {\\n    function addOwner(address _newOwner) external;\\n}\\n\\ncontract SupplyPoolManager {\\n    address public supplyBooster;\\n    address public supplyRewardFactory;\\n    address public compoundComptroller;\\n\\n    address public owner;\\n    address public governance;\\n\\n    event SetOwner(address owner);\\n    event SetGovernance(address governance);\\n\\n    modifier onlyOwner() {\\n        require(\\n            owner == msg.sender,\\n            \\\"SupplyPoolManager: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governance == msg.sender,\\n            \\\"SupplyPoolManager: caller is not the governance\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        address _supplyBooster,\\n        address _supplyRewardFactory,\\n        address _compoundComptroller\\n    ) public {\\n        owner = _owner;\\n        governance = _owner;\\n        supplyBooster = _supplyBooster;\\n        supplyRewardFactory = _supplyRewardFactory;\\n        compoundComptroller = _compoundComptroller;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    function setGovernance(address _governance) public onlyOwner {\\n        governance = _governance;\\n\\n        emit SetGovernance(_governance);\\n    }\\n\\n    function addSupplyPool(address _compoundCToken) public onlyGovernance {\\n        SupplyTreasuryFundForCompound supplyTreasuryFund = new SupplyTreasuryFundForCompound(\\n                supplyBooster,\\n                _compoundCToken,\\n                compoundComptroller,\\n                supplyRewardFactory\\n            );\\n\\n        address underlyToken;\\n\\n        // 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5 = cEther\\n        if (_compoundCToken == 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5) {\\n            underlyToken = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n        } else {\\n            underlyToken = ICompoundCErc20(_compoundCToken).underlying();\\n        }\\n\\n        ISupplyRewardFactoryExtra(supplyRewardFactory).addOwner(\\n            address(supplyTreasuryFund)\\n        );\\n\\n        ISupplyBooster(supplyBooster).addSupplyPool(\\n            underlyToken,\\n            address(supplyTreasuryFund)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supply/SupplyTreasuryFundForCompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../common/IBaseReward.sol\\\";\\n\\ninterface ICompoundComptroller {\\n    /*** Assets You Are In ***/\\n    function enterMarkets(address[] calldata cTokens)\\n        external\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function checkMembership(address account, address cToken)\\n        external\\n        view\\n        returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function accountAssets(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function markets(address _cToken)\\n        external\\n        view\\n        returns (bool isListed, uint256 collateralFactorMantissa);\\n}\\n\\ninterface ICompound {\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function isCToken(address) external view returns (bool);\\n\\n    function comptroller() external view returns (ICompoundComptroller);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function borrowBalanceStored(address user) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function interestRateModel() external view returns (address);\\n}\\n\\ninterface ICompoundCEther is ICompound {\\n    function repayBorrow() external payable;\\n\\n    function mint() external payable;\\n}\\n\\ninterface ICompoundCErc20 is ICompound {\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function underlying() external returns (address); // like usdc usdt\\n}\\n\\ninterface ISupplyRewardFactory {\\n    function createReward(\\n        address _rewardToken,\\n        address _virtualBalance,\\n        address _owner\\n    ) external returns (address);\\n}\\n\\ncontract SupplyTreasuryFundForCompound is ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public rewardCompPool;\\n    address public supplyRewardFactory;\\n    address public virtualBalance;\\n    address public compAddress;\\n    address public compoundComptroller;\\n    address public underlyToken;\\n    address public lpToken;\\n    address public owner;\\n    uint256 public totalUnderlyToken;\\n    uint256 public frozenUnderlyToken;\\n    bool public isErc20;\\n    bool private initialized;\\n\\n    modifier onlyInitialized() {\\n        require(initialized, \\\"!initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"SupplyTreasuryFundForCompound: !authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        address _lpToken,\\n        address _compoundComptroller,\\n        address _supplyRewardFactory\\n    ) public {\\n        owner = _owner;\\n        compoundComptroller = _compoundComptroller;\\n        lpToken = _lpToken;\\n        supplyRewardFactory = _supplyRewardFactory;\\n    }\\n\\n    // call by Owner (SupplyBooster)\\n    function initialize(\\n        address _virtualBalance,\\n        address _underlyToken,\\n        bool _isErc20\\n    ) public onlyOwner {\\n        require(!initialized, \\\"initialized\\\");\\n\\n        compAddress = ICompoundComptroller(compoundComptroller).getCompAddress();\\n\\n        underlyToken = _underlyToken;\\n\\n        virtualBalance = _virtualBalance;\\n        isErc20 = _isErc20;\\n\\n        rewardCompPool = ISupplyRewardFactory(supplyRewardFactory).createReward(\\n                compAddress,\\n                virtualBalance,\\n                address(this)\\n            );\\n\\n        initialized = true;\\n    }\\n\\n    function _mintEther(uint256 _amount) internal {\\n        ICompoundCEther(lpToken).mint{value: _amount}();\\n    }\\n\\n    function _mintErc20(uint256 _amount) internal {\\n        ICompoundCErc20(lpToken).mint(_amount);\\n    }\\n\\n    receive() external payable {}\\n\\n    function migrate(address _newTreasuryFund, bool _setReward)\\n        external\\n        onlyOwner\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 cTokens = IERC20(lpToken).balanceOf(address(this));\\n\\n        uint256 redeemState = ICompound(lpToken).redeem(cTokens);\\n\\n        require(\\n            redeemState == 0,\\n            \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n        );\\n\\n        uint256 bal;\\n\\n        if (isErc20) {\\n            bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n            IERC20(underlyToken).safeTransfer(owner, bal);\\n        } else {\\n            bal = address(this).balance;\\n\\n            if (bal > 0) {\\n                payable(owner).sendValue(bal);\\n            }\\n        }\\n\\n        if (_setReward) {\\n            IBaseReward(rewardCompPool).addOwner(_newTreasuryFund);\\n            IBaseReward(rewardCompPool).removeOwner(address(this));\\n        }\\n\\n        return bal;\\n    }\\n\\n    function _depositFor(address _for, uint256 _amount) internal {\\n        totalUnderlyToken = totalUnderlyToken.add(_amount);\\n\\n        if (isErc20) {\\n            IERC20(underlyToken).safeApprove(lpToken, 0);\\n            IERC20(underlyToken).safeApprove(lpToken, _amount);\\n\\n            _mintErc20(_amount);\\n        } else {\\n            _mintEther(_amount);\\n        }\\n\\n        if (_for != address(0)) {\\n            IBaseReward(rewardCompPool).stake(_for);\\n        }\\n    }\\n\\n    function depositFor(address _for)\\n        public\\n        payable\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n    {\\n        _depositFor(_for, msg.value);\\n    }\\n\\n    function depositFor(address _for, uint256 _amount)\\n        public\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n    {\\n        _depositFor(_for, _amount);\\n    }\\n\\n    function withdrawFor(address _to, uint256 _amount)\\n        public\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        IBaseReward(rewardCompPool).withdraw(_to);\\n\\n        require(\\n            totalUnderlyToken >= _amount,\\n            \\\"SupplyTreasuryFundForCompound: !insufficient balance\\\"\\n        );\\n\\n        totalUnderlyToken = totalUnderlyToken.sub(_amount);\\n\\n        uint256 redeemState = ICompound(lpToken).redeemUnderlying(_amount);\\n\\n        require(\\n            redeemState == 0,\\n            \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n        );\\n\\n        uint256 bal;\\n\\n        if (isErc20) {\\n            bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n            IERC20(underlyToken).safeTransfer(_to, bal);\\n        } else {\\n            bal = address(this).balance;\\n\\n            if (bal > 0) {\\n                payable(_to).sendValue(bal);\\n            }\\n        }\\n\\n        return bal;\\n    }\\n\\n    function borrow(\\n        address _to,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest\\n    ) public onlyInitialized nonReentrant onlyOwner returns (uint256) {\\n        totalUnderlyToken = totalUnderlyToken.sub(_lendingAmount);\\n        frozenUnderlyToken = frozenUnderlyToken.add(_lendingAmount);\\n\\n        uint256 redeemState = ICompound(lpToken).redeemUnderlying(\\n            _lendingAmount\\n        );\\n\\n        require(\\n            redeemState == 0,\\n            \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n        );\\n\\n        if (isErc20) {\\n            IERC20(underlyToken).safeTransfer(\\n                _to,\\n                _lendingAmount.sub(_lendingInterest)\\n            );\\n\\n            if (_lendingInterest > 0) {\\n                IERC20(underlyToken).safeTransfer(owner, _lendingInterest);\\n            }\\n        } else {\\n            payable(_to).sendValue(_lendingAmount.sub(_lendingInterest));\\n            if (_lendingInterest > 0) {\\n                payable(owner).sendValue(_lendingInterest);\\n            }\\n        }\\n\\n        return _lendingInterest;\\n    }\\n\\n    function repayBorrow()\\n        public\\n        payable\\n        onlyInitialized\\n        nonReentrant\\n        onlyOwner\\n    {\\n        _mintEther(msg.value);\\n\\n        totalUnderlyToken = totalUnderlyToken.add(msg.value);\\n        frozenUnderlyToken = frozenUnderlyToken.sub(msg.value);\\n    }\\n\\n    function repayBorrow(uint256 _lendingAmount)\\n        public\\n        onlyInitialized\\n        nonReentrant\\n        onlyOwner\\n    {\\n        IERC20(underlyToken).safeApprove(lpToken, 0);\\n        IERC20(underlyToken).safeApprove(lpToken, _lendingAmount);\\n\\n        _mintErc20(_lendingAmount);\\n\\n        totalUnderlyToken = totalUnderlyToken.add(_lendingAmount);\\n        frozenUnderlyToken = frozenUnderlyToken.sub(_lendingAmount);\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        uint256 exchangeRateStored = ICompound(lpToken).exchangeRateStored();\\n        uint256 cTokens = IERC20(lpToken).balanceOf(address(this));\\n\\n        return exchangeRateStored.mul(cTokens).div(1e18);\\n    }\\n\\n    function claim()\\n        public\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        ICompoundComptroller(compoundComptroller).claimComp(address(this));\\n\\n        uint256 balanceOfComp = IERC20(compAddress).balanceOf(address(this));\\n\\n        if (balanceOfComp > 0) {\\n            IERC20(compAddress).safeTransfer(rewardCompPool, balanceOfComp);\\n\\n            IBaseReward(rewardCompPool).notifyRewardAmount(balanceOfComp);\\n        }\\n\\n        uint256 bal;\\n        uint256 cTokens = IERC20(lpToken).balanceOf(address(this));\\n\\n        // If Uses withdraws all the money, the remaining ctoken is profit.\\n        if (totalUnderlyToken == 0 && frozenUnderlyToken == 0) {\\n            if (cTokens > 0) {\\n                uint256 redeemState = ICompound(lpToken).redeem(cTokens);\\n\\n                require(\\n                    redeemState == 0,\\n                    \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n                );\\n\\n                if (isErc20) {\\n                    bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n                    IERC20(underlyToken).safeTransfer(owner, bal);\\n                } else {\\n                    bal = address(this).balance;\\n\\n                    if (bal > 0) {\\n                        payable(owner).sendValue(bal);\\n                    }\\n                }\\n\\n                return bal;\\n            }\\n        }\\n\\n        uint256 exchangeRateStored = ICompound(lpToken).exchangeRateCurrent();\\n\\n        // ctoken price\\n        uint256 cTokenPrice = cTokens.mul(exchangeRateStored).div(1e18);\\n\\n        if (cTokenPrice > totalUnderlyToken.add(frozenUnderlyToken)) {\\n            uint256 interestCToken = cTokenPrice\\n                .sub(totalUnderlyToken.add(frozenUnderlyToken))\\n                .mul(1e18)\\n                .div(exchangeRateStored);\\n\\n            uint256 redeemState = ICompound(lpToken).redeem(interestCToken);\\n\\n            require(\\n                redeemState == 0,\\n                \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n            );\\n\\n            if (isErc20) {\\n                bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n                IERC20(underlyToken).safeTransfer(owner, bal);\\n            } else {\\n                bal = address(this).balance;\\n\\n                if (bal > 0) {\\n                    payable(owner).sendValue(bal);\\n                }\\n            }\\n        }\\n\\n        return bal;\\n    }\\n\\n    function getReward(address _for) public onlyOwner nonReentrant {\\n        if (IBaseReward(rewardCompPool).earned(_for) > 0) {\\n            IBaseReward(rewardCompPool).getReward(_for);\\n        }\\n    }\\n\\n    function getBorrowRatePerBlock() public view returns (uint256) {\\n        return ICompound(lpToken).borrowRatePerBlock();\\n    }\\n\\n    /* function getCollateralFactorMantissa() public view returns (uint256) {\\n        ICompoundComptroller comptroller = ICompound(lpToken).comptroller();\\n        (bool isListed, uint256 collateralFactorMantissa) = comptroller.markets(\\n            lpToken\\n        );\\n\\n        return isListed ? collateralFactorMantissa : 800000000000000000;\\n    } */\\n}\\n\"\r\n    },\r\n    \"contracts/GenerateLendingPoolsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./supply/SupplyTreasuryFundForCompound.sol\\\";\\nimport \\\"./convex/IConvexBoosterV2.sol\\\";\\nimport \\\"./supply/ISupplyBooster.sol\\\";\\n\\ninterface ILendingMarket {\\n    function addMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold\\n    ) external;\\n}\\n\\ninterface ISupplyRewardFactoryExtra is ISupplyRewardFactory {\\n    function addOwner(address _newOwner) external;\\n}\\n\\ncontract GenerateLendingPoolsV2 {\\n    address public convexBooster;\\n    address public lendingMarket;\\n\\n    address public supplyBooster;\\n    address public supplyRewardFactory;\\n\\n    address public compoundComptroller;\\n\\n    address public deployer;\\n\\n    constructor(address _deployer) public {\\n        deployer = _deployer;\\n    }\\n\\n    function setLendingContract(\\n        address _supplyBooster,\\n        address _convexBooster,\\n        address _lendingMarket,\\n        address _supplyRewardFactory,\\n        address _compoundComptroller\\n    ) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        supplyBooster = _supplyBooster;\\n        convexBooster = _convexBooster;\\n        lendingMarket = _lendingMarket;\\n        supplyRewardFactory = _supplyRewardFactory;\\n        compoundComptroller = _compoundComptroller;\\n    }\\n\\n    function addConvexBoosterPool(uint256 _originConvexPid) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        IConvexBoosterV2(convexBooster).addConvexPool(_originConvexPid);\\n    }\\n\\n    function addConvexBoosterPool(\\n        uint256 _originConvexPid,\\n        address _curveSwapAddress,\\n        address _curveZapAddress,\\n        address _basePoolAddress,\\n        bool _isMeta,\\n        bool _isMetaFactory\\n    ) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        IConvexBoosterV2(convexBooster).addConvexPool(\\n            _originConvexPid,\\n            _curveSwapAddress,\\n            _curveZapAddress,\\n            _basePoolAddress,\\n            _isMeta,\\n            _isMetaFactory\\n        );\\n    }\\n\\n    function addLendingMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds\\n    ) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        ILendingMarket(lendingMarket).addMarketPool(\\n            _convexBoosterPid,\\n            _supplyBoosterPids,\\n            _curveCoinIds,\\n            100,\\n            50\\n        );\\n    }\\n\\n    function addSupplyPoolForCEther(address _compoundCToken) public {\\n        _addSupplyPool(_compoundCToken, false);\\n    }\\n\\n    function addSupplyPoolForCToken(address _compoundCToken) public {\\n        _addSupplyPool(_compoundCToken, true);\\n    }\\n\\n    function _addSupplyPool(address _compoundCToken, bool _isErc20) internal {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        SupplyTreasuryFundForCompound supplyTreasuryFund = new SupplyTreasuryFundForCompound(\\n                supplyBooster,\\n                _compoundCToken,\\n                compoundComptroller,\\n                supplyRewardFactory\\n            );\\n\\n        address underlyToken;\\n\\n        // 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5 = cEther\\n        if (_isErc20) {\\n            underlyToken = ICompoundCErc20(_compoundCToken).underlying();\\n        } else {\\n            underlyToken = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n        }\\n\\n        ISupplyRewardFactoryExtra(supplyRewardFactory).addOwner(\\n            address(supplyTreasuryFund)\\n        );\\n\\n        ISupplyBooster(supplyBooster).addSupplyPool(\\n            underlyToken,\\n            address(supplyTreasuryFund)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/convex/IConvexBoosterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./IConvexBooster.sol\\\";\\n\\ninterface IConvexBoosterV2 is IConvexBooster {\\n    function liquidate(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        address _user,\\n        uint256 _amount\\n    ) external override returns (address, uint256);\\n\\n    function depositFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user\\n    ) external override returns (bool);\\n\\n    function withdrawFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user,\\n        bool _freezeTokens\\n    ) external override returns (bool);\\n\\n    function poolInfo(uint256 _convexPid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 originConvexPid,\\n            address curveSwapAddress,\\n            address lpToken,\\n            address originCrvRewards,\\n            address originStash,\\n            address virtualBalance,\\n            address rewardCrvPool,\\n            address rewardCvxPool,\\n            bool shutdown\\n        );\\n\\n    function addConvexPool(uint256 _originConvexPid) external override;\\n\\n    function addConvexPool(uint256 _originConvexPid, address _curveSwapAddress, address _curveZapAddress, address _basePoolAddress, bool _isMeta, bool _isMetaFactory)\\n        external;\\n\\n    function getPoolZapAddress(address _lpToken)\\n        external\\n        view\\n        returns (address);\\n\\n    function getPoolToken(uint256 _pid) external view returns (address);\\n\\n    function calculateTokenAmount(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/convex/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IConvexBooster {\\n    function liquidate(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        address _user,\\n        uint256 _amount\\n    ) external returns (address, uint256);\\n\\n    function depositFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user\\n    ) external returns (bool);\\n\\n    function withdrawFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user,\\n        bool _freezeTokens\\n    ) external returns (bool);\\n\\n    function poolInfo(uint256 _convexPid)\\n        external\\n        view\\n        returns (\\n            uint256 originConvexPid,\\n            address curveSwapAddress,\\n            address lpToken,\\n            address originCrvRewards,\\n            address originStash,\\n            address virtualBalance,\\n            address rewardCrvPool,\\n            address rewardCvxPool,\\n            bool shutdown\\n        );\\n\\n    function addConvexPool(uint256 _originConvexPid) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LendingMarketV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./convex/IConvexBoosterV2.sol\\\";\\nimport \\\"./supply/ISupplyBooster.sol\\\";\\n\\ninterface ILendingSponsor {\\n    function addSponsor(bytes32 _lendingId, address _user) external payable;\\n\\n    function payFee(bytes32 _lendingId, address payable _user) external;\\n}\\n\\ncontract LendingMarketV2 is Initializable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public convexBooster;\\n    address public supplyBooster;\\n    address public lendingSponsor;\\n\\n    uint256 public liquidateThresholdBlockNumbers;\\n    uint256 public version;\\n\\n    address public owner;\\n    address public governance;\\n\\n    enum UserLendingState {\\n        LENDING,\\n        EXPIRED,\\n        LIQUIDATED\\n    }\\n\\n    struct PoolInfo {\\n        uint256 convexPid;\\n        uint256[] supportPids;\\n        int128[] curveCoinIds;\\n        uint256 lendingThreshold;\\n        uint256 liquidateThreshold;\\n        uint256 borrowIndex;\\n    }\\n\\n    struct UserLending {\\n        bytes32 lendingId;\\n        uint256 token0;\\n        uint256 token0Price;\\n        uint256 lendingAmount;\\n        uint256 borrowAmount;\\n        uint256 borrowInterest;\\n        uint256 supportPid;\\n        int128 curveCoinId;\\n        uint256 borrowNumbers;\\n    }\\n\\n    struct LendingInfo {\\n        address user;\\n        uint256 pid;\\n        uint256 userLendingIndex;\\n        uint256 borrowIndex;\\n        uint256 startedBlock;\\n        uint256 utilizationRate;\\n        uint256 supplyRatePerBlock;\\n        UserLendingState state;\\n    }\\n\\n    struct BorrowInfo {\\n        uint256 borrowAmount;\\n        uint256 supplyAmount;\\n    }\\n\\n    struct Statistic {\\n        uint256 totalCollateral;\\n        uint256 totalBorrow;\\n        uint256 recentRepayAt;\\n    }\\n\\n    struct LendingParams {\\n        uint256 lendingAmount;\\n        uint256 borrowAmount;\\n        uint256 borrowInterest;\\n        uint256 lendingRate;\\n        uint256 utilizationRate;\\n        uint256 supplyRatePerBlock;\\n        address lpToken;\\n        uint256 token0Price;\\n    }\\n\\n    PoolInfo[] public poolInfo;\\n\\n    address public constant ZERO_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 public constant MIN_LIQUIDATE_BLOCK_NUMBERS = 50;\\n    uint256 public constant MIN_LENDING_THRESHOLD = 100;\\n    uint256 public constant MIN_LIQUIDATE_THRESHOLD = 50;\\n    uint256 public constant MAX_LIQUIDATE_BLOCK_NUMBERS = 100;\\n    uint256 public constant MAX_LENDING_THRESHOLD = 300;\\n    uint256 public constant MAX_LIQUIDATE_THRESHOLD = 300;\\n    uint256 public constant SUPPLY_RATE_DENOMINATOR = 1e18;\\n    uint256 public constant MAX_LENDFLARE_TOTAL_RATE = 0.5 * 1e18;\\n    uint256 public constant THRESHOLD_DENOMINATOR = 1000;\\n    uint256 public constant BLOCKS_PER_YEAR = 2102400; // Reference Compound WhitePaperInterestRateModel contract\\n    uint256 public constant BLOCKS_PER_DAY = 5760;\\n    // user address => container\\n    mapping(address => UserLending[]) public userLendings;\\n    // lending id => user address\\n    mapping(bytes32 => LendingInfo) public lendings;\\n    // pool id => (borrowIndex => user lendingId)\\n    mapping(uint256 => mapping(uint256 => bytes32)) public poolLending;\\n    mapping(bytes32 => BorrowInfo) public borrowInfos;\\n    mapping(bytes32 => Statistic) public myStatistics;\\n    // number => bool\\n    mapping(uint256 => bool) public borrowBlocks;\\n    // pid => (user => amount)\\n    mapping(uint256 => mapping(address => uint256)) public deposits;\\n\\n    event LendingBase(\\n        bytes32 indexed lendingId,\\n        uint256 marketPid,\\n        uint256 supplyPid,\\n        int128 curveCoinId,\\n        uint256 borrowBlocks\\n    );\\n\\n    event Borrow(\\n        bytes32 indexed lendingId,\\n        address indexed user,\\n        uint256 pid,\\n        uint256 token0,\\n        uint256 token0Price,\\n        uint256 lendingAmount,\\n        uint256 borrowNumber\\n    );\\n    event Initialized(address indexed thisAddress);\\n    event RepayBorrow(\\n        bytes32 indexed lendingId,\\n        address user,\\n        UserLendingState state\\n    );\\n\\n    event Liquidate(\\n        bytes32 indexed lendingId,\\n        address user,\\n        uint256 liquidateAmount,\\n        uint256 gasSpent,\\n        UserLendingState state\\n    );\\n\\n    event SetOwner(address owner);\\n    event SetGovernance(address governance);\\n    event SetBorrowBlock(uint256 borrowBlock, bool state);\\n    event TogglePausedPool(uint256 pid, bool pause);\\n    event PreStored();\\n    event Deposit(address user, uint256 pid, uint256 token0);\\n    event Withdraw(address user, uint256 pid, uint256 token0);\\n    event SetLiquidateThresholdBlockNumbers(uint256 blockNumbers);\\n    event SetLendingThreshold(uint256 pid, uint256 threshold);\\n    event SetLiquidateThreshold(uint256 pid, uint256 threshold);\\n    event AddMarketPool(\\n        uint256 convexBoosterPid,\\n        uint256[] supplyBoosterPids,\\n        int128[] curveCoinIds,\\n        uint256 lendingThreshold,\\n        uint256 liquidateThreshold\\n    );\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"LendingMarket: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governance == msg.sender,\\n            \\\"LendingMarket: caller is not the governance\\\"\\n        );\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    /* \\n    The default governance user is GenerateLendingPools contract.\\n    It will be set to DAO in the future \\n    */\\n    function setGovernance(address _governance) public onlyOwner {\\n        governance = _governance;\\n\\n        emit SetGovernance(_governance);\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        address _lendingSponsor,\\n        address _convexBooster,\\n        address _supplyBooster\\n    ) public initializer {\\n        owner = _owner;\\n        governance = _owner;\\n        lendingSponsor = _lendingSponsor;\\n        convexBooster = _convexBooster;\\n        supplyBooster = _supplyBooster;\\n\\n        setBorrowBlock(BLOCKS_PER_DAY * 90, true);\\n        setBorrowBlock(BLOCKS_PER_DAY * 180, true);\\n        setBorrowBlock(BLOCKS_PER_YEAR, true);\\n\\n        liquidateThresholdBlockNumbers = 50;\\n        version = 1;\\n\\n        emit Initialized(address(this));\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _token0) public {\\n        require(_pid < poolInfo.length, \\\"!_pid\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        address lpToken = IConvexBoosterV2(convexBooster).getPoolToken(\\n            pool.convexPid\\n        );\\n\\n        IERC20(lpToken).safeTransferFrom(msg.sender, address(this), _token0);\\n\\n        IERC20(lpToken).safeApprove(convexBooster, 0);\\n        IERC20(lpToken).safeApprove(convexBooster, _token0);\\n\\n        IConvexBooster(convexBooster).depositFor(\\n            pool.convexPid,\\n            _token0,\\n            msg.sender\\n        );\\n\\n        deposits[_pid][msg.sender] = deposits[_pid][msg.sender].add(_token0);\\n\\n        emit Deposit(msg.sender, _pid, _token0);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _token0) public nonReentrant {\\n        require(_pid < poolInfo.length, \\\"!_pid\\\");\\n        \\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        require(deposits[_pid][msg.sender] >= _token0, \\\"!deposits\\\");\\n\\n        deposits[_pid][msg.sender] = deposits[_pid][msg.sender].sub(_token0);\\n\\n        IConvexBooster(convexBooster).withdrawFor(\\n            pool.convexPid,\\n            _token0,\\n            msg.sender,\\n            false\\n        );\\n\\n        emit Withdraw(msg.sender, _pid, _token0);\\n    }\\n\\n    function borrowForDeposit(\\n        uint256 _pid,\\n        uint256 _token0,\\n        uint256 _borrowBlock,\\n        uint256 _supportPid\\n    ) public payable nonReentrant {\\n        require(borrowBlocks[_borrowBlock], \\\"!borrowBlocks\\\");\\n        require(msg.value == 0.1 ether, \\\"!lendingSponsor\\\");\\n\\n        deposits[_pid][msg.sender] = deposits[_pid][msg.sender].sub(_token0);\\n\\n        _borrow(_pid, _supportPid, _borrowBlock, _token0, true);\\n    }\\n\\n    function borrow(\\n        uint256 _pid,\\n        uint256 _token0,\\n        uint256 _borrowBlock,\\n        uint256 _supportPid\\n    ) public payable nonReentrant {\\n        require(borrowBlocks[_borrowBlock], \\\"!borrowBlocks\\\");\\n        require(msg.value == 0.1 ether, \\\"!lendingSponsor\\\");\\n\\n        _borrow(_pid, _supportPid, _borrowBlock, _token0, false);\\n    }\\n\\n    function getBorrowInfo(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        uint256 _token0\\n    ) internal view returns (address, uint256) {\\n        address lpToken = IConvexBoosterV2(convexBooster).getPoolToken(\\n            _convexPid\\n        );\\n\\n        uint256 token0Price = IConvexBoosterV2(convexBooster)\\n            .calculateTokenAmount(_convexPid, _token0, _curveCoinId);\\n\\n        return (lpToken, token0Price);\\n    }\\n\\n    function _borrow(\\n        uint256 _pid,\\n        uint256 _supportPid,\\n        uint256 _borrowBlocks,\\n        uint256 _token0,\\n        bool _preStored\\n    ) internal returns (LendingParams memory) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.borrowIndex++;\\n\\n        bytes32 lendingId = generateId(\\n            msg.sender,\\n            _pid,\\n            pool.borrowIndex + block.number\\n        );\\n\\n        LendingParams memory lendingParams = getLendingInfo(\\n            _token0,\\n            pool.convexPid,\\n            pool.curveCoinIds[_supportPid],\\n            pool.supportPids[_supportPid],\\n            pool.lendingThreshold,\\n            pool.liquidateThreshold,\\n            _borrowBlocks\\n        );\\n\\n        if (!_preStored) {\\n            IERC20(lendingParams.lpToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _token0\\n            );\\n\\n            IERC20(lendingParams.lpToken).safeApprove(convexBooster, 0);\\n            IERC20(lendingParams.lpToken).safeApprove(convexBooster, _token0);\\n\\n            IConvexBooster(convexBooster).depositFor(\\n                pool.convexPid,\\n                _token0,\\n                msg.sender\\n            );\\n        }\\n\\n        ISupplyBooster(supplyBooster).borrow(\\n            pool.supportPids[_supportPid],\\n            lendingId,\\n            msg.sender,\\n            lendingParams.lendingAmount,\\n            lendingParams.borrowInterest,\\n            _borrowBlocks\\n        );\\n\\n        BorrowInfo storage borrowInfo = borrowInfos[\\n            generateId(address(0), _pid, pool.supportPids[_supportPid])\\n        ];\\n\\n        borrowInfo.borrowAmount = borrowInfo.borrowAmount.add(\\n            lendingParams.token0Price\\n        );\\n        borrowInfo.supplyAmount = borrowInfo.supplyAmount.add(\\n            lendingParams.lendingAmount\\n        );\\n\\n        Statistic storage statistic = myStatistics[\\n            generateId(msg.sender, _pid, pool.supportPids[_supportPid])\\n        ];\\n\\n        statistic.totalCollateral = statistic.totalCollateral.add(_token0);\\n        statistic.totalBorrow = statistic.totalBorrow.add(\\n            lendingParams.lendingAmount\\n        );\\n\\n        userLendings[msg.sender].push(\\n            UserLending({\\n                lendingId: lendingId,\\n                token0: _token0,\\n                token0Price: lendingParams.token0Price,\\n                lendingAmount: lendingParams.lendingAmount,\\n                borrowAmount: lendingParams.borrowAmount,\\n                borrowInterest: lendingParams.borrowInterest,\\n                supportPid: pool.supportPids[_supportPid],\\n                curveCoinId: pool.curveCoinIds[_supportPid],\\n                borrowNumbers: _borrowBlocks\\n            })\\n        );\\n\\n        lendings[lendingId] = LendingInfo({\\n            user: msg.sender,\\n            pid: _pid,\\n            borrowIndex: pool.borrowIndex,\\n            userLendingIndex: userLendings[msg.sender].length - 1,\\n            startedBlock: block.number,\\n            utilizationRate: lendingParams.utilizationRate,\\n            supplyRatePerBlock: lendingParams.supplyRatePerBlock,\\n            state: UserLendingState.LENDING\\n        });\\n\\n        poolLending[_pid][pool.borrowIndex] = lendingId;\\n\\n        ILendingSponsor(lendingSponsor).addSponsor{value: msg.value}(\\n            lendingId,\\n            msg.sender\\n        );\\n\\n        emit LendingBase(\\n            lendingId,\\n            _pid,\\n            pool.supportPids[_supportPid],\\n            pool.curveCoinIds[_supportPid],\\n            _borrowBlocks\\n        );\\n\\n        emit Borrow(\\n            lendingId,\\n            msg.sender,\\n            _pid,\\n            _token0,\\n            lendingParams.token0Price,\\n            lendingParams.lendingAmount,\\n            _borrowBlocks\\n        );\\n    }\\n\\n    function _repayBorrow(\\n        bytes32 _lendingId,\\n        uint256 _amount,\\n        bool _freezeTokens\\n    ) internal nonReentrant {\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n\\n        require(lendingInfo.startedBlock > 0, \\\"!invalid lendingId\\\");\\n\\n        UserLending storage userLending = userLendings[lendingInfo.user][\\n            lendingInfo.userLendingIndex\\n        ];\\n        address underlyToken = ISupplyBooster(supplyBooster)\\n            .getLendingUnderlyToken(userLending.lendingId);\\n        PoolInfo storage pool = poolInfo[lendingInfo.pid];\\n\\n        require(\\n            lendingInfo.state == UserLendingState.LENDING,\\n            \\\"!UserLendingState\\\"\\n        );\\n\\n        require(\\n            block.number <=\\n                lendingInfo.startedBlock.add(userLending.borrowNumbers),\\n            \\\"Expired\\\"\\n        );\\n\\n        if (underlyToken == ZERO_ADDRESS) {\\n            require(\\n                msg.value == _amount && _amount == userLending.lendingAmount,\\n                \\\"!_amount\\\"\\n            );\\n\\n            ISupplyBooster(supplyBooster).repayBorrow{\\n                value: userLending.lendingAmount\\n            }(\\n                userLending.lendingId,\\n                lendingInfo.user,\\n                userLending.borrowInterest\\n            );\\n        } else {\\n            require(\\n                msg.value == 0 && _amount == userLending.lendingAmount,\\n                \\\"!_amount\\\"\\n            );\\n\\n            IERC20(underlyToken).safeTransferFrom(\\n                msg.sender,\\n                supplyBooster,\\n                userLending.lendingAmount\\n            );\\n\\n            ISupplyBooster(supplyBooster).repayBorrow(\\n                userLending.lendingId,\\n                lendingInfo.user,\\n                userLending.lendingAmount,\\n                userLending.borrowInterest\\n            );\\n        }\\n\\n        IConvexBooster(convexBooster).withdrawFor(\\n            pool.convexPid,\\n            userLending.token0,\\n            lendingInfo.user,\\n            _freezeTokens\\n        );\\n\\n        BorrowInfo storage borrowInfo = borrowInfos[\\n            generateId(address(0), lendingInfo.pid, userLending.supportPid)\\n        ];\\n\\n        borrowInfo.borrowAmount = borrowInfo.borrowAmount.sub(\\n            userLending.token0Price\\n        );\\n        borrowInfo.supplyAmount = borrowInfo.supplyAmount.sub(\\n            userLending.lendingAmount\\n        );\\n\\n        Statistic storage statistic = myStatistics[\\n            generateId(\\n                lendingInfo.user,\\n                lendingInfo.pid,\\n                userLending.supportPid\\n            )\\n        ];\\n\\n        statistic.totalCollateral = statistic.totalCollateral.sub(\\n            userLending.token0\\n        );\\n        statistic.totalBorrow = statistic.totalBorrow.sub(\\n            userLending.lendingAmount\\n        );\\n        statistic.recentRepayAt = block.timestamp;\\n\\n        ILendingSponsor(lendingSponsor).payFee(\\n            userLending.lendingId,\\n            payable(lendingInfo.user)\\n        );\\n\\n        lendingInfo.state = UserLendingState.EXPIRED;\\n\\n        emit RepayBorrow(\\n            userLending.lendingId,\\n            lendingInfo.user,\\n            lendingInfo.state\\n        );\\n    }\\n\\n    function repayBorrow(bytes32 _lendingId) public payable {\\n        _repayBorrow(_lendingId, msg.value, false);\\n    }\\n\\n    function repayBorrowERC20(bytes32 _lendingId, uint256 _amount) public {\\n        _repayBorrow(_lendingId, _amount, false);\\n    }\\n\\n    function repayBorrowAndFreezeTokens(bytes32 _lendingId) public payable {\\n        _repayBorrow(_lendingId, msg.value, true);\\n    }\\n\\n    function repayBorrowERC20AndFreezeTokens(\\n        bytes32 _lendingId,\\n        uint256 _amount\\n    ) public {\\n        _repayBorrow(_lendingId, _amount, true);\\n    }\\n\\n    /**\\n    @notice Used to liquidate asset\\n    @dev If repayment is overdue, it is used to liquidate asset. If valued LP is not enough, can use msg.value or _extraErc20Amount force liquidation\\n    @param _lendingId Lending ID\\n    @param _extraErc20Amount If liquidate erc-20 asset, fill in extra amount. If native asset, send msg.value\\n     */\\n    function liquidate(bytes32 _lendingId, uint256 _extraErc20Amount)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        uint256 gasStart = gasleft();\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n\\n        require(lendingInfo.startedBlock > 0, \\\"!invalid lendingId\\\");\\n\\n        UserLending storage userLending = userLendings[lendingInfo.user][\\n            lendingInfo.userLendingIndex\\n        ];\\n\\n        require(\\n            lendingInfo.state == UserLendingState.LENDING,\\n            \\\"!UserLendingState\\\"\\n        );\\n\\n        require(\\n            lendingInfo.startedBlock.add(userLending.borrowNumbers).sub(\\n                liquidateThresholdBlockNumbers\\n            ) < block.number,\\n            \\\"!borrowNumbers\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[lendingInfo.pid];\\n\\n        lendingInfo.state = UserLendingState.LIQUIDATED;\\n\\n        BorrowInfo storage borrowInfo = borrowInfos[\\n            generateId(address(0), lendingInfo.pid, userLending.supportPid)\\n        ];\\n\\n        borrowInfo.borrowAmount = borrowInfo.borrowAmount.sub(\\n            userLending.token0Price\\n        );\\n        borrowInfo.supplyAmount = borrowInfo.supplyAmount.sub(\\n            userLending.lendingAmount\\n        );\\n\\n        Statistic storage statistic = myStatistics[\\n            generateId(\\n                lendingInfo.user,\\n                lendingInfo.pid,\\n                userLending.supportPid\\n            )\\n        ];\\n\\n        statistic.totalCollateral = statistic.totalCollateral.sub(\\n            userLending.token0\\n        );\\n        statistic.totalBorrow = statistic.totalBorrow.sub(\\n            userLending.lendingAmount\\n        );\\n\\n        (address underlyToken, uint256 liquidateAmount) = IConvexBooster(\\n            convexBooster\\n        ).liquidate(\\n                pool.convexPid,\\n                userLending.curveCoinId,\\n                lendingInfo.user,\\n                userLending.token0\\n            );\\n\\n        if (underlyToken == ZERO_ADDRESS) {\\n            liquidateAmount = liquidateAmount.add(msg.value);\\n\\n            ISupplyBooster(supplyBooster).liquidate{value: liquidateAmount}(\\n                userLending.lendingId,\\n                userLending.borrowInterest\\n            );\\n        } else {\\n            IERC20(underlyToken).safeTransfer(supplyBooster, liquidateAmount);\\n\\n            if (_extraErc20Amount > 0) {\\n                // Failure without authorization\\n                IERC20(underlyToken).safeTransferFrom(\\n                    msg.sender,\\n                    supplyBooster,\\n                    _extraErc20Amount\\n                );\\n            }\\n\\n            ISupplyBooster(supplyBooster).liquidate(\\n                userLending.lendingId,\\n                userLending.borrowInterest\\n            );\\n        }\\n\\n        ILendingSponsor(lendingSponsor).payFee(\\n            userLending.lendingId,\\n            msg.sender\\n        );\\n\\n        uint256 gasSpent = (21000 + gasStart - gasleft()).mul(tx.gasprice);\\n\\n        emit Liquidate(\\n            userLending.lendingId,\\n            lendingInfo.user,\\n            liquidateAmount,\\n            gasSpent,\\n            lendingInfo.state\\n        );\\n    }\\n\\n    function setLiquidateThresholdBlockNumbers(uint256 _v)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _v >= MIN_LIQUIDATE_BLOCK_NUMBERS &&\\n                _v <= MAX_LIQUIDATE_BLOCK_NUMBERS,\\n            \\\"!_v\\\"\\n        );\\n\\n        liquidateThresholdBlockNumbers = _v;\\n\\n        emit SetLiquidateThresholdBlockNumbers(liquidateThresholdBlockNumbers);\\n    }\\n\\n    function setBorrowBlock(uint256 _number, bool _state)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _number.sub(liquidateThresholdBlockNumbers) >\\n                liquidateThresholdBlockNumbers,\\n            \\\"!_number\\\"\\n        );\\n\\n        borrowBlocks[_number] = _state;\\n\\n        emit SetBorrowBlock(_number, borrowBlocks[_number]);\\n    }\\n\\n    function setLendingThreshold(uint256 _pid, uint256 _v)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _v >= MIN_LENDING_THRESHOLD && _v <= MAX_LENDING_THRESHOLD,\\n            \\\"!_v\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.lendingThreshold = _v;\\n\\n        emit SetLendingThreshold(_pid, pool.lendingThreshold);\\n    }\\n\\n    function setLiquidateThreshold(uint256 _pid, uint256 _v)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _v >= MIN_LIQUIDATE_THRESHOLD && _v <= MAX_LIQUIDATE_THRESHOLD,\\n            \\\"!_v\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.liquidateThreshold = _v;\\n\\n        emit SetLiquidateThreshold(_pid, pool.lendingThreshold);\\n    }\\n\\n    receive() external payable {}\\n\\n    /* \\n    @param _convexBoosterPid convexBooster contract\\n    @param _supplyBoosterPids supply contract\\n    @param _curveCoinIds curve coin id of curve COINS\\n     */\\n    function addMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold\\n    ) public onlyGovernance {\\n        require(\\n            _lendingThreshold >= MIN_LENDING_THRESHOLD &&\\n                _lendingThreshold <= MAX_LENDING_THRESHOLD,\\n            \\\"!_lendingThreshold\\\"\\n        );\\n        require(\\n            _liquidateThreshold >= MIN_LIQUIDATE_THRESHOLD &&\\n                _liquidateThreshold <= MAX_LIQUIDATE_THRESHOLD,\\n            \\\"!_liquidateThreshold\\\"\\n        );\\n        require(\\n            _supplyBoosterPids.length == _curveCoinIds.length,\\n            \\\"!_supportPids && _curveCoinIds\\\"\\n        );\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                convexPid: _convexBoosterPid,\\n                supportPids: _supplyBoosterPids,\\n                curveCoinIds: _curveCoinIds,\\n                lendingThreshold: _lendingThreshold,\\n                liquidateThreshold: _liquidateThreshold,\\n                borrowIndex: 0\\n            })\\n        );\\n\\n        emit AddMarketPool(\\n            _convexBoosterPid,\\n            _supplyBoosterPids,\\n            _curveCoinIds,\\n            _lendingThreshold,\\n            _liquidateThreshold\\n        );\\n    }\\n\\n    /* function toBytes16(uint256 x) internal pure returns (bytes16 b) {\\n        return bytes16(bytes32(x));\\n    } */\\n\\n    function generateId(\\n        address x,\\n        uint256 y,\\n        uint256 z\\n    ) public pure returns (bytes32) {\\n        /* return toBytes16(uint256(keccak256(abi.encodePacked(x, y, z)))); */\\n        return keccak256(abi.encodePacked(x, y, z));\\n    }\\n\\n    function poolLength() public view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function cursor(\\n        uint256 _pid,\\n        uint256 _offset,\\n        uint256 _size\\n    ) public view returns (bytes32[] memory, uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        uint256 size = _offset.add(_size) > pool.borrowIndex\\n            ? pool.borrowIndex.sub(_offset)\\n            : _size;\\n\\n        bytes32[] memory userLendingIds = new bytes32[](size);\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            bytes32 userLendingId = poolLending[_pid][_offset.add(i)];\\n\\n            userLendingIds[i] = userLendingId;\\n        }\\n\\n        return (userLendingIds, pool.borrowIndex);\\n    }\\n\\n    function calculateRepayAmount(bytes32 _lendingId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n        UserLending storage userLending = userLendings[lendingInfo.user][\\n            lendingInfo.userLendingIndex\\n        ];\\n\\n        if (lendingInfo.state == UserLendingState.LIQUIDATED) return 0;\\n\\n        return userLending.lendingAmount;\\n    }\\n\\n    function getPoolSupportPids(uint256 _pid)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return pool.supportPids;\\n    }\\n\\n    function getCurveCoinId(uint256 _pid, uint256 _supportPid)\\n        public\\n        view\\n        returns (int128)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return pool.curveCoinIds[_supportPid];\\n    }\\n\\n    function getUserLendingState(bytes32 _lendingId)\\n        public\\n        view\\n        returns (UserLendingState)\\n    {\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n\\n        return lendingInfo.state;\\n    }\\n\\n    function getLendingInfo(\\n        uint256 _token0,\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        uint256 _supplyPid,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold,\\n        uint256 _borrowBlocks\\n    ) public view returns (LendingParams memory) {\\n        (address lpToken, uint256 token0Price) = getBorrowInfo(\\n            _convexPid,\\n            _curveCoinId,\\n            _token0\\n        );\\n\\n        uint256 utilizationRate = ISupplyBooster(supplyBooster)\\n            .getUtilizationRate(_supplyPid);\\n        uint256 supplyRatePerBlock = ISupplyBooster(supplyBooster)\\n            .getBorrowRatePerBlock(_supplyPid);\\n        uint256 supplyRate = getSupplyRate(supplyRatePerBlock, _borrowBlocks);\\n        uint256 lendflareTotalRate;\\n\\n        if (utilizationRate > 0) {\\n            lendflareTotalRate = getLendingRate(\\n                supplyRate,\\n                getAmplificationFactor(utilizationRate)\\n            );\\n        } else {\\n            lendflareTotalRate = supplyRate.sub(SUPPLY_RATE_DENOMINATOR);\\n        }\\n\\n        uint256 lendingAmount = token0Price.mul(SUPPLY_RATE_DENOMINATOR);\\n\\n        lendingAmount = lendingAmount.mul(\\n            THRESHOLD_DENOMINATOR.sub(_lendingThreshold).sub(\\n                _liquidateThreshold\\n            )\\n        );\\n\\n        lendingAmount = lendingAmount.div(THRESHOLD_DENOMINATOR);\\n\\n        uint256 repayBorrowAmount = lendingAmount.div(SUPPLY_RATE_DENOMINATOR);\\n        uint256 borrowAmount = lendingAmount.div(\\n            SUPPLY_RATE_DENOMINATOR.add(lendflareTotalRate)\\n        );\\n\\n        uint256 borrowInterest = repayBorrowAmount.sub(borrowAmount);\\n\\n        return\\n            LendingParams({\\n                lendingAmount: repayBorrowAmount,\\n                borrowAmount: borrowAmount,\\n                borrowInterest: borrowInterest,\\n                lendingRate: lendflareTotalRate,\\n                utilizationRate: utilizationRate,\\n                supplyRatePerBlock: supplyRatePerBlock,\\n                lpToken: lpToken,\\n                token0Price: token0Price\\n            });\\n    }\\n\\n    function getUserLendingsLength(address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return userLendings[_user].length;\\n    }\\n\\n    function getSupplyRate(uint256 _supplyBlockRate, uint256 n)\\n        public\\n        pure\\n        returns (\\n            uint256 total // _supplyBlockRate and the result are scaled to 1e18\\n        )\\n    {\\n        uint256 term = 1e18; // term0 = xn, term1 = n(n-1)/2! * x^2, term2 = term1 * (n - 2) / (i + 1) * x\\n        uint256 result = 1e18; // partial sum of terms\\n        uint256 MAX_TERMS = 10; // up to MAX_TERMS are calculated, the error is negligible\\n\\n        for (uint256 i = 0; i < MAX_TERMS && i < n; ++i) {\\n            term = term.mul(n - i).div(i + 1).mul(_supplyBlockRate).div(1e18);\\n\\n            total = total.add(term);\\n        }\\n\\n        total = total.add(result);\\n    }\\n\\n    function getAmplificationFactor(uint256 _utilizationRate)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (_utilizationRate <= 0.9 * 1e18) {\\n            return uint256(10).mul(_utilizationRate).div(9).add(1e18);\\n        }\\n\\n        return uint256(20).mul(_utilizationRate).sub(16 * 1e18);\\n    }\\n\\n    // lendflare total rate\\n    function getLendingRate(uint256 _supplyRate, uint256 _amplificationFactor)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _supplyRate.sub(1e18).mul(_amplificationFactor).div(1e18);\\n    }\\n}\"\r\n    },\r\n    \"contracts/supply/SupplyPoolGaugeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../common/IVirtualBalanceWrapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface ILendFlareToken {\\n    function futureEpochTimeWrite() external returns (uint256);\\n\\n    function rate() external view returns (uint256);\\n}\\n\\ninterface IMinter {\\n    function minted(address addr, address self) external view returns (uint256);\\n}\\n\\ninterface ILendFlareGaugeModel {\\n    function getGaugeWeightShare(address addr) external view returns (uint256);\\n}\\n\\ncontract LendFlareGauge is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant TOKENLESS_PRODUCTION = 40;\\n    uint256 constant BOOST_WARMUP = 2 weeks;\\n    uint256 constant WEEK = 1 weeks;\\n\\n    address public virtualBalance;\\n    uint256 public working_supply;\\n    uint256 public period;\\n    uint256 public inflation_rate;\\n    uint256 public future_epoch_time;\\n\\n    address public lendFlareVotingEscrow;\\n    address public lendFlareToken;\\n    address public lendFlareTokenMinter;\\n    address public lendFlareGaugeModel;\\n\\n    mapping(uint256 => uint256) public period_timestamp;\\n    mapping(uint256 => uint256) public integrate_inv_supply;\\n\\n    mapping(address => uint256) public integrate_inv_supply_of;\\n    mapping(address => uint256) public integrate_checkpoint_of;\\n    mapping(address => uint256) public totalAccrued;\\n    mapping(address => uint256) public rewardLiquidityLimits;\\n\\n    event UpdateLiquidityLimit(\\n        address user,\\n        uint256 original_balance,\\n        uint256 original_supply,\\n        uint256 reward_liquidity_limits,\\n        uint256 working_supply\\n    );\\n\\n    constructor(\\n        address _virtualBalance,\\n        address _lendFlareToken,\\n        address _lendFlareVotingEscrow,\\n        address _lendFlareGaugeModel,\\n        address _lendFlareTokenMinter\\n    ) public {\\n        virtualBalance = _virtualBalance;\\n        lendFlareVotingEscrow = _lendFlareVotingEscrow;\\n        lendFlareToken = _lendFlareToken;\\n        lendFlareTokenMinter = _lendFlareTokenMinter;\\n        lendFlareGaugeModel = _lendFlareGaugeModel;\\n    }\\n\\n    function _updateLiquidityLimit(\\n        address addr,\\n        uint256 l,\\n        uint256 L\\n    ) internal {\\n        uint256 voting_balance = IERC20(lendFlareVotingEscrow).balanceOf(addr);\\n        uint256 voting_total = IERC20(lendFlareVotingEscrow).totalSupply();\\n        uint256 lim = (l * TOKENLESS_PRODUCTION) / 100;\\n\\n        if (\\n            voting_total > 0 &&\\n            block.timestamp > period_timestamp[0] + BOOST_WARMUP\\n        ) {\\n            lim +=\\n                (((L * voting_balance) / voting_total) *\\n                    (100 - TOKENLESS_PRODUCTION)) /\\n                100;\\n        }\\n\\n        lim = min(l, lim);\\n\\n        uint256 old_bal = rewardLiquidityLimits[addr];\\n\\n        rewardLiquidityLimits[addr] = lim;\\n\\n        uint256 _working_supply = working_supply + lim - old_bal;\\n        working_supply = _working_supply;\\n\\n        emit UpdateLiquidityLimit(addr, l, L, lim, _working_supply);\\n    }\\n\\n    function _checkpoint(address addr) internal {\\n        uint256 _period_time = period_timestamp[period];\\n        uint256 _integrate_inv_supply = integrate_inv_supply[period];\\n        uint256 rate = inflation_rate;\\n        uint256 new_rate = rate;\\n        uint256 prev_future_epoch = future_epoch_time;\\n\\n        if (prev_future_epoch >= _period_time) {\\n            future_epoch_time = ILendFlareToken(lendFlareToken)\\n                .futureEpochTimeWrite();\\n            new_rate = ILendFlareToken(lendFlareToken).rate();\\n\\n            require(new_rate > 0, \\\"!new_rate\\\");\\n\\n            inflation_rate = new_rate;\\n        }\\n\\n        uint256 _reward_liquidity_limits = rewardLiquidityLimits[addr];\\n        uint256 _working_supply = working_supply;\\n\\n        if (block.timestamp > _period_time) {\\n            uint256 prev_week_time = _period_time;\\n            uint256 week_time = min(\\n                ((_period_time + WEEK) / WEEK) * WEEK,\\n                block.timestamp\\n            );\\n\\n            for (uint256 i = 0; i < 500; i++) {\\n                uint256 dt = week_time - prev_week_time;\\n                uint256 w = ILendFlareGaugeModel(lendFlareGaugeModel)\\n                    .getGaugeWeightShare(address(this));\\n\\n                if (_working_supply > 0) {\\n                    if (\\n                        prev_future_epoch >= prev_week_time &&\\n                        prev_future_epoch < week_time\\n                    ) {\\n                        _integrate_inv_supply +=\\n                            (rate * w * (prev_future_epoch - prev_week_time)) /\\n                            _working_supply;\\n                        rate = new_rate;\\n                        _integrate_inv_supply +=\\n                            (rate * w * (week_time - prev_future_epoch)) /\\n                            _working_supply;\\n                    } else {\\n                        _integrate_inv_supply +=\\n                            (rate * w * dt) /\\n                            _working_supply;\\n                    }\\n\\n                    if (week_time == block.timestamp) break;\\n\\n                    prev_week_time = week_time;\\n                    week_time = min(week_time + WEEK, block.timestamp);\\n                }\\n            }\\n        }\\n\\n        period += 1;\\n        period_timestamp[period] = block.timestamp;\\n        integrate_inv_supply[period] = _integrate_inv_supply;\\n\\n        totalAccrued[addr] +=\\n            (_reward_liquidity_limits *\\n                (_integrate_inv_supply - integrate_inv_supply_of[addr])) /\\n            10**18;\\n        integrate_inv_supply_of[addr] = _integrate_inv_supply;\\n        integrate_checkpoint_of[addr] = block.timestamp;\\n    }\\n\\n    function updateReward(address addr) public nonReentrant returns (bool) {\\n        _checkpoint(addr);\\n        _updateLiquidityLimit(\\n            addr,\\n            IVirtualBalanceWrapper(virtualBalance).balanceOf(addr),\\n            IVirtualBalanceWrapper(virtualBalance).totalSupply()\\n        );\\n\\n        return true;\\n    }\\n\\n    function claimableTokens(address addr)\\n        public\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        _checkpoint(addr);\\n\\n        return\\n            totalAccrued[addr] -\\n            IMinter(lendFlareTokenMinter).minted(addr, address(this));\\n    }\\n\\n    function lastCheckpointTimestamp() public view returns (uint256) {\\n        return period_timestamp[period];\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\\ncontract SupplyPoolGaugeFactory {\\n    address public owner;\\n\\n    event CreateGauge(address gauge);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function setOwner(address _owner) external {\\n        require(\\n            msg.sender == owner,\\n            \\\"SupplyPoolGaugeFactory: !authorized setOwner\\\"\\n        );\\n\\n        owner = _owner;\\n    }\\n\\n    function createGauge(\\n        address _virtualBalance,\\n        address _lendflareToken,\\n        address _lendflareVotingEscrow,\\n        address _lendflareGaugeModel,\\n        address _lendflareTokenMinter\\n    ) public returns (address) {\\n        require(\\n            msg.sender == owner,\\n            \\\"SupplyPoolGaugeFactory: !authorized createGauge\\\"\\n        );\\n\\n        LendFlareGauge gauge = new LendFlareGauge(\\n            _virtualBalance,\\n            _lendflareToken,\\n            _lendflareVotingEscrow,\\n            _lendflareGaugeModel,\\n            _lendflareTokenMinter\\n        );\\n\\n        emit CreateGauge(address(gauge));\\n\\n        return address(gauge);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supply/SupplyPoolExtraRewardFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../common/IVirtualBalanceWrapper.sol\\\";\\nimport \\\"../common/IBaseReward.sol\\\";\\nimport \\\"./ISupplyBooster.sol\\\";\\n\\ninterface ILendFlareGauge {\\n    function updateReward(address addr) external returns (bool);\\n}\\n\\ninterface ILendFlareMinter {\\n    function mintFor(address gauge_addr, address _for) external;\\n}\\n\\ninterface ILendflareToken {\\n    function minter() external view returns (address);\\n}\\n\\ninterface ILendFlareVotingEscrow {\\n    function addRewardPool(address _v) external returns (bool);\\n}\\n\\ninterface ISupplyPoolGaugeFactory {\\n    function createGauge(\\n        address _virtualBalance,\\n        address _lendflareToken,\\n        address _lendflareVotingEscrow,\\n        address _lendflareGaugeModel,\\n        address _lendflareTokenMinter\\n    ) external returns (address);\\n}\\n\\ninterface ILendflareGaugeModel {\\n    function addGauge(address _gauge, uint256 _weight) external;\\n\\n    function toggleGauge(address _gauge, bool _state) external;\\n}\\n\\ninterface ISupplyRewardFactory {\\n    function createReward(\\n        address _rewardToken,\\n        address _virtualBalance,\\n        address _owner\\n    ) external returns (address);\\n}\\n\\ncontract SupplyPoolExtraRewardFactory is ReentrancyGuard, Initializable {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    address public owner;\\n\\n    address public supplyBooster;\\n    address public supplyRewardFactory;\\n    address public supplyPoolGaugeFactory;\\n    address public lendflareVotingEscrow;\\n    address public lendflareToken;\\n    address public lendflareGaugeModel;\\n\\n    mapping(uint256 => address) public veLendFlarePool; // pid => extra rewards\\n    mapping(uint256 => address) public gaugePool; // pid => extra rewards\\n\\n    // @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() public initializer {}\\n\\n    function initialize(\\n        address _supplyBooster,\\n        address _supplyRewardFactory,\\n        address _supplyPoolGaugeFactory,\\n        address _lendflareGaugeModel,\\n        address _lendflareVotingEscrow,\\n        address _lendflareToken,\\n        address _owner\\n    ) public initializer {\\n        owner = _owner;\\n        supplyBooster = _supplyBooster;\\n        supplyRewardFactory = _supplyRewardFactory;\\n        supplyPoolGaugeFactory = _supplyPoolGaugeFactory;\\n        lendflareVotingEscrow = _lendflareVotingEscrow;\\n        lendflareToken = _lendflareToken;\\n        lendflareGaugeModel = _lendflareGaugeModel;\\n    }\\n\\n    function setOwner(address _owner) external {\\n        require(\\n            msg.sender == owner,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized setOwner\\\"\\n        );\\n\\n        owner = _owner;\\n    }\\n\\n    function createPool(\\n        uint256 _pid,\\n        address _underlyToken,\\n        address _virtualBalance,\\n        bool _isErc20\\n    ) internal {\\n        address lendflareMinter = ILendflareToken(lendflareToken).minter();\\n        require(lendflareMinter != address(0), \\\"!lendflareMinter\\\");\\n\\n        address poolGauge = ISupplyPoolGaugeFactory(supplyPoolGaugeFactory)\\n            .createGauge(\\n                _virtualBalance,\\n                lendflareToken,\\n                lendflareVotingEscrow,\\n                lendflareGaugeModel,\\n                lendflareMinter\\n            );\\n\\n        // default weight = 100 * 1e18\\n        ILendflareGaugeModel(lendflareGaugeModel).addGauge(poolGauge, 100e18);\\n\\n        address rewardVeLendFlarePool;\\n\\n        if (_isErc20) {\\n            rewardVeLendFlarePool = ISupplyRewardFactory(supplyRewardFactory)\\n                .createReward(\\n                    _underlyToken,\\n                    lendflareVotingEscrow,\\n                    address(this)\\n                );\\n        } else {\\n            rewardVeLendFlarePool = ISupplyRewardFactory(supplyRewardFactory)\\n                .createReward(address(0), lendflareVotingEscrow, address(this));\\n        }\\n\\n        ILendFlareVotingEscrow(lendflareVotingEscrow).addRewardPool(\\n            rewardVeLendFlarePool\\n        );\\n        IBaseReward(rewardVeLendFlarePool).addOwner(lendflareVotingEscrow);\\n\\n        veLendFlarePool[_pid] = rewardVeLendFlarePool;\\n        gaugePool[_pid] = poolGauge;\\n    }\\n\\n    function updateOldPool(uint256 _pid) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized updateOldPool\\\"\\n        );\\n        require(veLendFlarePool[_pid] == address(0), \\\"!veLendFlarePool\\\");\\n        require(gaugePool[_pid] == address(0), \\\"!gaugePool\\\");\\n\\n        (\\n            address underlyToken,\\n            ,\\n            ,\\n            address virtualBalance,\\n            bool isErc20,\\n\\n        ) = ISupplyBooster(supplyBooster).poolInfo(_pid);\\n\\n        createPool(_pid, underlyToken, virtualBalance, isErc20);\\n    }\\n\\n    function addExtraReward(\\n        uint256 _pid,\\n        address _lpToken,\\n        address _virtualBalance,\\n        bool _isErc20\\n    ) public {\\n        require(\\n            msg.sender == supplyBooster,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized addExtraReward\\\"\\n        );\\n\\n        createPool(_pid, _lpToken, _virtualBalance, _isErc20);\\n    }\\n\\n    function toggleShutdownPool(uint256 _pid, bool _state) public {\\n        require(\\n            msg.sender == supplyBooster,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized toggleShutdownPool\\\"\\n        );\\n\\n        ILendflareGaugeModel(lendflareGaugeModel).toggleGauge(\\n            gaugePool[_pid],\\n            _state\\n        );\\n    }\\n\\n    function getRewards(uint256 _pid, address _for) public nonReentrant {\\n        require(\\n            msg.sender == supplyBooster,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized getRewards\\\"\\n        );\\n\\n        address lendflareMinter = ILendflareToken(lendflareToken).minter();\\n\\n        if (lendflareMinter != address(0)) {\\n            ILendFlareMinter(lendflareMinter).mintFor(gaugePool[_pid], _for);\\n        }\\n    }\\n\\n    function beforeStake(uint256 _pid, address _for) public nonReentrant {}\\n\\n    function afterStake(uint256 _pid, address _for) public nonReentrant {\\n        require(\\n            msg.sender == supplyBooster,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized afterStake\\\"\\n        );\\n\\n        ILendFlareGauge(gaugePool[_pid]).updateReward(_for);\\n    }\\n\\n    function beforeWithdraw(uint256 _pid, address _for) public nonReentrant {}\\n\\n    function afterWithdraw(uint256 _pid, address _for) public nonReentrant {\\n        require(\\n            msg.sender == supplyBooster,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized afterWithdraw\\\"\\n        );\\n\\n        ILendFlareGauge(gaugePool[_pid]).updateReward(_for);\\n    }\\n\\n    function getVeLFTUserRewards(uint256[] memory _pids) public nonReentrant {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            if (IBaseReward(veLendFlarePool[_pids[i]]).earned(msg.sender) > 0) {\\n                IBaseReward(veLendFlarePool[_pids[i]]).getReward(msg.sender);\\n            }\\n        }\\n    }\\n\\n    function notifyRewardAmount(\\n        uint256 _pid,\\n        address _underlyToken,\\n        uint256 _amount\\n    ) public payable nonReentrant {\\n        require(\\n            msg.sender == supplyBooster,\\n            \\\"SupplyPoolExtraRewardFactory: !authorized notifyRewardAmount\\\"\\n        );\\n\\n        if (_underlyToken == address(0)) {\\n            payable(veLendFlarePool[_pid]).sendValue(_amount);\\n        } else {\\n            IERC20(_underlyToken).safeTransfer(veLendFlarePool[_pid], _amount);\\n        }\\n\\n        IBaseReward(veLendFlarePool[_pid]).notifyRewardAmount(_amount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/LendFlareVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"./common/IBaseReward.sol\\\";\\n\\n// Reference @openzeppelin/contracts/token/ERC20/IERC20.sol\\ninterface ILendFlareVotingEscrow {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract LendFlareVotingEscrow is\\n    Initializable,\\n    ReentrancyGuard,\\n    ILendFlareVotingEscrow\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 constant WEEK = 1 weeks; // all future times are rounded by week\\n    uint256 constant MAXTIME = 4 * 365 * 86400; // 4 years\\n    string constant NAME = \\\"Vote-escrowed LFT\\\";\\n    string constant SYMBOL = \\\"VeLFT\\\";\\n    uint8 constant DECIMALS = 18;\\n\\n    address public token;\\n    address public rewardManager;\\n\\n    uint256 public override totalSupply;\\n\\n    enum DepositTypes {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    struct Point {\\n        uint256 bias;\\n        uint256 slope; // dweight / dt\\n        uint256 ts; // timestamp\\n    }\\n\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 end;\\n    }\\n\\n    IBaseReward[] public rewardPools;\\n\\n    mapping(address => LockedBalance) public lockedBalances;\\n    mapping(address => mapping(uint256 => Point)) public userPointHistory; // user => ( user epoch => point )\\n    mapping(address => uint256) public userPointEpoch; // user => user epoch\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 value,\\n        uint256 indexed locktime,\\n        DepositTypes depositTypes,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n    event TotalSupply(uint256 prevSupply, uint256 supply);\\n\\n    // @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() public initializer {}\\n\\n    function initialize(address _token, address _rewardManager)\\n        public\\n        initializer\\n    {\\n        token = _token;\\n        rewardManager = _rewardManager;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(\\n            rewardManager == msg.sender,\\n            \\\"LendFlareVotingEscrow: caller is not the rewardManager\\\"\\n        );\\n        _;\\n    }\\n\\n    function rewardPoolsLength() external view returns (uint256) {\\n        return rewardPools.length;\\n    }\\n\\n    function addRewardPool(address _v)\\n        external\\n        onlyRewardManager\\n        returns (bool)\\n    {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        rewardPools.push(IBaseReward(_v));\\n\\n        return true;\\n    }\\n\\n    function clearRewardPools() external onlyRewardManager {\\n        delete rewardPools;\\n    }\\n\\n    function _checkpoint(address _sender, LockedBalance storage _newLocked)\\n        internal\\n    {\\n        Point storage point = userPointHistory[_sender][\\n            ++userPointEpoch[_sender]\\n        ];\\n\\n        point.ts = block.timestamp;\\n\\n        if (_newLocked.end > block.timestamp) {\\n            point.slope = _newLocked.amount.div(MAXTIME);\\n            point.bias = point.slope.mul(_newLocked.end.sub(block.timestamp));\\n        }\\n    }\\n\\n    function _depositFor(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _unlockTime,\\n        LockedBalance storage _locked,\\n        DepositTypes _depositTypes\\n    ) internal {\\n        uint256 oldTotalSupply = totalSupply;\\n\\n        if (_amount > 0) {\\n            IERC20(token).safeTransferFrom(_sender, address(this), _amount);\\n        }\\n\\n        _locked.amount = _locked.amount.add(_amount);\\n        totalSupply = totalSupply.add(_amount);\\n\\n        if (_unlockTime > 0) {\\n            _locked.end = _unlockTime;\\n        }\\n\\n        for (uint256 i = 0; i < rewardPools.length; i++) {\\n            rewardPools[i].stake(_sender);\\n        }\\n\\n        _checkpoint(_sender, _locked);\\n\\n        emit Deposit(\\n            _sender,\\n            _amount,\\n            _locked.end,\\n            _depositTypes,\\n            block.timestamp\\n        );\\n        emit TotalSupply(oldTotalSupply, totalSupply);\\n    }\\n\\n    function deposit(uint256 _amount) external nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n\\n        require(_amount > 0, \\\"need non-zero value\\\");\\n        require(locked.amount > 0, \\\"no existing lock found\\\");\\n        require(\\n            locked.end > block.timestamp,\\n            \\\"cannot add to expired lock. Withdraw\\\"\\n        );\\n\\n        _depositFor(\\n            msg.sender,\\n            _amount,\\n            0,\\n            locked,\\n            DepositTypes.DEPOSIT_FOR_TYPE\\n        );\\n    }\\n\\n    function createLock(uint256 _amount, uint256 _unlockTime)\\n        external\\n        nonReentrant\\n    {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n        uint256 availableTime = formatWeekTs(_unlockTime);\\n\\n        require(_amount > 0, \\\"need non-zero value\\\");\\n        require(locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n        require(\\n            availableTime > block.timestamp,\\n            \\\"can only lock until time in the future\\\"\\n        );\\n        require(\\n            availableTime <= block.timestamp + MAXTIME,\\n            \\\"voting lock can be 4 years max\\\"\\n        );\\n\\n        _depositFor(\\n            msg.sender,\\n            _amount,\\n            availableTime,\\n            locked,\\n            DepositTypes.CREATE_LOCK_TYPE\\n        );\\n    }\\n\\n    function increaseAmount(uint256 _amount) external nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n        require(_amount > 0, \\\"need non-zero value\\\");\\n        require(locked.amount > 0, \\\"No existing lock found\\\");\\n        require(\\n            locked.end > block.timestamp,\\n            \\\"Cannot add to expired lock. Withdraw\\\"\\n        );\\n\\n        _depositFor(\\n            msg.sender,\\n            _amount,\\n            0,\\n            locked,\\n            DepositTypes.INCREASE_LOCK_AMOUNT\\n        );\\n    }\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n        uint256 availableTime = formatWeekTs(_unlockTime);\\n\\n        require(locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(locked.amount > 0, \\\"Nothing is locked\\\");\\n        require(availableTime > locked.end, \\\"Can only increase lock duration\\\");\\n        require(\\n            availableTime <= block.timestamp + MAXTIME,\\n            \\\"Voting lock can be 4 years max\\\"\\n        );\\n\\n        _depositFor(\\n            msg.sender,\\n            0,\\n            availableTime,\\n            locked,\\n            DepositTypes.INCREASE_UNLOCK_TIME\\n        );\\n    }\\n\\n    function withdraw() public nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n\\n        require(block.timestamp >= locked.end, \\\"The lock didn't expire\\\");\\n\\n        uint256 oldTotalSupply = totalSupply;\\n        uint256 lockedAmount = locked.amount;\\n\\n        totalSupply = totalSupply.sub(lockedAmount);\\n\\n        locked.amount = 0;\\n        locked.end = 0;\\n\\n        _checkpoint(msg.sender, locked);\\n\\n        IERC20(token).safeTransfer(msg.sender, lockedAmount);\\n\\n        for (uint256 i = 0; i < rewardPools.length; i++) {\\n            rewardPools[i].withdraw(msg.sender);\\n        }\\n\\n        emit Withdraw(msg.sender, lockedAmount, block.timestamp);\\n        emit TotalSupply(oldTotalSupply, totalSupply);\\n    }\\n\\n    function formatWeekTs(uint256 _unixTime) public pure returns (uint256) {\\n        return _unixTime.div(WEEK).mul(WEEK);\\n    }\\n\\n    function balanceOf(address _sender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 userEpoch = userPointEpoch[_sender];\\n\\n        if (userEpoch == 0) return 0;\\n\\n        Point storage point = userPointHistory[_sender][userEpoch];\\n\\n        return point.bias.sub(point.slope.mul(block.timestamp.sub(point.ts)));\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return NAME;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendingMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./convex/IConvexBooster.sol\\\";\\nimport \\\"./supply/ISupplyBooster.sol\\\";\\n\\ninterface ICurveSwap {\\n    function calc_withdraw_one_coin(uint256 _tokenAmount, int128 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface ILendingSponsor {\\n    function addSponsor(bytes32 _lendingId, address _user) external payable;\\n\\n    function payFee(bytes32 _lendingId, address payable _user) external;\\n}\\n\\ncontract LendingMarket is Initializable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public convexBooster;\\n    address public supplyBooster;\\n    address public lendingSponsor;\\n\\n    uint256 public liquidateThresholdBlockNumbers;\\n    uint256 public version;\\n\\n    address public owner;\\n    address public governance;\\n\\n    enum UserLendingState {\\n        LENDING,\\n        EXPIRED,\\n        LIQUIDATED\\n    }\\n\\n    struct PoolInfo {\\n        uint256 convexPid;\\n        uint256[] supportPids;\\n        int128[] curveCoinIds;\\n        uint256 lendingThreshold;\\n        uint256 liquidateThreshold;\\n        uint256 borrowIndex;\\n    }\\n\\n    struct UserLending {\\n        bytes32 lendingId;\\n        uint256 token0;\\n        uint256 token0Price;\\n        uint256 lendingAmount;\\n        uint256 borrowAmount;\\n        uint256 borrowInterest;\\n        uint256 supportPid;\\n        int128 curveCoinId;\\n        uint256 borrowNumbers;\\n    }\\n\\n    struct LendingInfo {\\n        address user;\\n        uint256 pid;\\n        uint256 userLendingIndex;\\n        uint256 borrowIndex;\\n        uint256 startedBlock;\\n        uint256 utilizationRate;\\n        uint256 supplyRatePerBlock;\\n        UserLendingState state;\\n    }\\n\\n    struct BorrowInfo {\\n        uint256 borrowAmount;\\n        uint256 supplyAmount;\\n    }\\n\\n    struct Statistic {\\n        uint256 totalCollateral;\\n        uint256 totalBorrow;\\n        uint256 recentRepayAt;\\n    }\\n\\n    struct LendingParams {\\n        uint256 lendingAmount;\\n        uint256 borrowAmount;\\n        uint256 borrowInterest;\\n        uint256 lendingRate;\\n        uint256 utilizationRate;\\n        uint256 supplyRatePerBlock;\\n        address lpToken;\\n        uint256 token0Price;\\n    }\\n\\n    PoolInfo[] public poolInfo;\\n\\n    address public constant ZERO_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 public constant MIN_LIQUIDATE_BLOCK_NUMBERS = 50;\\n    uint256 public constant MIN_LENDING_THRESHOLD = 100;\\n    uint256 public constant MIN_LIQUIDATE_THRESHOLD = 50;\\n    uint256 public constant MAX_LIQUIDATE_BLOCK_NUMBERS = 100;\\n    uint256 public constant MAX_LENDING_THRESHOLD = 300;\\n    uint256 public constant MAX_LIQUIDATE_THRESHOLD = 300;\\n    uint256 public constant SUPPLY_RATE_DENOMINATOR = 1e18;\\n    uint256 public constant MAX_LENDFLARE_TOTAL_RATE = 0.5 * 1e18;\\n    uint256 public constant THRESHOLD_DENOMINATOR = 1000;\\n    uint256 public constant BLOCKS_PER_YEAR = 2102400; // Reference Compound WhitePaperInterestRateModel contract\\n    uint256 public constant BLOCKS_PER_DAY = 5760;\\n    // user address => container\\n    mapping(address => UserLending[]) public userLendings;\\n    // lending id => user address\\n    mapping(bytes32 => LendingInfo) public lendings;\\n    // pool id => (borrowIndex => user lendingId)\\n    mapping(uint256 => mapping(uint256 => bytes32)) public poolLending;\\n    mapping(bytes32 => BorrowInfo) public borrowInfos;\\n    mapping(bytes32 => Statistic) public myStatistics;\\n    // number => bool\\n    mapping(uint256 => bool) public borrowBlocks;\\n\\n    event LendingBase(\\n        bytes32 indexed lendingId,\\n        uint256 marketPid,\\n        uint256 supplyPid,\\n        int128 curveCoinId,\\n        uint256 borrowBlocks\\n    );\\n\\n    event Borrow(\\n        bytes32 indexed lendingId,\\n        address indexed user,\\n        uint256 pid,\\n        uint256 token0,\\n        uint256 token0Price,\\n        uint256 lendingAmount,\\n        uint256 borrowNumber\\n    );\\n    event Initialized(address indexed thisAddress);\\n    event RepayBorrow(\\n        bytes32 indexed lendingId,\\n        address user,\\n        UserLendingState state\\n    );\\n\\n    event Liquidate(\\n        bytes32 indexed lendingId,\\n        address user,\\n        uint256 liquidateAmount,\\n        uint256 gasSpent,\\n        UserLendingState state\\n    );\\n\\n    event SetOwner(address owner);\\n    event SetGovernance(address governance);\\n    event SetBorrowBlock(uint256 borrowBlock, bool state);\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"LendingMarket: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governance == msg.sender,\\n            \\\"LendingMarket: caller is not the governance\\\"\\n        );\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    /* \\n    The default governance user is GenerateLendingPools contract.\\n    It will be set to DAO in the future \\n    */\\n    function setGovernance(address _governance) public onlyOwner {\\n        governance = _governance;\\n\\n        emit SetGovernance(_governance);\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        address _lendingSponsor,\\n        address _convexBooster,\\n        address _supplyBooster\\n    ) public initializer {\\n        owner = _owner;\\n        governance = _owner;\\n        lendingSponsor = _lendingSponsor;\\n        convexBooster = _convexBooster;\\n        supplyBooster = _supplyBooster;\\n\\n        \\n\\n        setBorrowBlock(BLOCKS_PER_DAY * 90, true);\\n        setBorrowBlock(BLOCKS_PER_DAY * 180, true);\\n        setBorrowBlock(BLOCKS_PER_YEAR, true);\\n\\n        liquidateThresholdBlockNumbers = 50;\\n        version = 1;\\n\\n        emit Initialized(address(this));\\n    }\\n\\n    function borrow(\\n        uint256 _pid,\\n        uint256 _token0,\\n        uint256 _borrowBlock,\\n        uint256 _supportPid\\n    ) public payable nonReentrant {\\n        require(borrowBlocks[_borrowBlock], \\\"!borrowBlocks\\\");\\n        require(msg.value == 0.1 ether, \\\"!lendingSponsor\\\");\\n\\n        _borrow(_pid, _supportPid, _borrowBlock, _token0);\\n    }\\n\\n    function _getCurveInfo(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        uint256 _token0\\n    ) internal view returns (address lpToken, uint256 token0Price) {\\n        address curveSwapAddress;\\n\\n        (, curveSwapAddress, lpToken, , , , , , ) = IConvexBooster(\\n            convexBooster\\n        ).poolInfo(_convexPid);\\n\\n        token0Price = ICurveSwap(curveSwapAddress).calc_withdraw_one_coin(\\n            _token0,\\n            _curveCoinId\\n        );\\n    }\\n\\n    function _borrow(\\n        uint256 _pid,\\n        uint256 _supportPid,\\n        uint256 _borrowBlocks,\\n        uint256 _token0\\n    ) internal returns (LendingParams memory) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.borrowIndex++;\\n\\n        bytes32 lendingId = generateId(\\n            msg.sender,\\n            _pid,\\n            pool.borrowIndex + block.number\\n        );\\n\\n        LendingParams memory lendingParams = getLendingInfo(\\n            _token0,\\n            pool.convexPid,\\n            pool.curveCoinIds[_supportPid],\\n            pool.supportPids[_supportPid],\\n            pool.lendingThreshold,\\n            pool.liquidateThreshold,\\n            _borrowBlocks\\n        );\\n\\n        IERC20(lendingParams.lpToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _token0\\n        );\\n\\n        IERC20(lendingParams.lpToken).safeApprove(convexBooster, 0);\\n        IERC20(lendingParams.lpToken).safeApprove(convexBooster, _token0);\\n\\n        ISupplyBooster(supplyBooster).borrow(\\n            pool.supportPids[_supportPid],\\n            lendingId,\\n            msg.sender,\\n            lendingParams.lendingAmount,\\n            lendingParams.borrowInterest,\\n            _borrowBlocks\\n        );\\n\\n        IConvexBooster(convexBooster).depositFor(\\n            pool.convexPid,\\n            _token0,\\n            msg.sender\\n        );\\n\\n        BorrowInfo storage borrowInfo = borrowInfos[\\n            generateId(address(0), _pid, pool.supportPids[_supportPid])\\n        ];\\n\\n        borrowInfo.borrowAmount = borrowInfo.borrowAmount.add(\\n            lendingParams.token0Price\\n        );\\n        borrowInfo.supplyAmount = borrowInfo.supplyAmount.add(\\n            lendingParams.lendingAmount\\n        );\\n\\n        Statistic storage statistic = myStatistics[\\n            generateId(msg.sender, _pid, pool.supportPids[_supportPid])\\n        ];\\n\\n        statistic.totalCollateral = statistic.totalCollateral.add(_token0);\\n        statistic.totalBorrow = statistic.totalBorrow.add(\\n            lendingParams.lendingAmount\\n        );\\n\\n        userLendings[msg.sender].push(\\n            UserLending({\\n                lendingId: lendingId,\\n                token0: _token0,\\n                token0Price: lendingParams.token0Price,\\n                lendingAmount: lendingParams.lendingAmount,\\n                borrowAmount: lendingParams.borrowAmount,\\n                borrowInterest: lendingParams.borrowInterest,\\n                supportPid: pool.supportPids[_supportPid],\\n                curveCoinId: pool.curveCoinIds[_supportPid],\\n                borrowNumbers: _borrowBlocks\\n            })\\n        );\\n\\n        lendings[lendingId] = LendingInfo({\\n            user: msg.sender,\\n            pid: _pid,\\n            borrowIndex: pool.borrowIndex,\\n            userLendingIndex: userLendings[msg.sender].length - 1,\\n            startedBlock: block.number,\\n            utilizationRate: lendingParams.utilizationRate,\\n            supplyRatePerBlock: lendingParams.supplyRatePerBlock,\\n            state: UserLendingState.LENDING\\n        });\\n\\n        poolLending[_pid][pool.borrowIndex] = lendingId;\\n\\n        ILendingSponsor(lendingSponsor).addSponsor{value: msg.value}(\\n            lendingId,\\n            msg.sender\\n        );\\n\\n        emit LendingBase(\\n            lendingId,\\n            _pid,\\n            pool.supportPids[_supportPid],\\n            pool.curveCoinIds[_supportPid],\\n            _borrowBlocks\\n        );\\n\\n        emit Borrow(\\n            lendingId,\\n            msg.sender,\\n            _pid,\\n            _token0,\\n            lendingParams.token0Price,\\n            lendingParams.lendingAmount,\\n            _borrowBlocks\\n        );\\n    }\\n\\n    function _repayBorrow(\\n        bytes32 _lendingId,\\n        uint256 _amount,\\n        bool _freezeTokens\\n    ) internal nonReentrant {\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n\\n        require(lendingInfo.startedBlock > 0, \\\"!invalid lendingId\\\");\\n\\n        UserLending storage userLending = userLendings[lendingInfo.user][\\n            lendingInfo.userLendingIndex\\n        ];\\n        address underlyToken = ISupplyBooster(supplyBooster)\\n            .getLendingUnderlyToken(userLending.lendingId);\\n        PoolInfo storage pool = poolInfo[lendingInfo.pid];\\n\\n        require(\\n            lendingInfo.state == UserLendingState.LENDING,\\n            \\\"!UserLendingState\\\"\\n        );\\n\\n        require(\\n            block.number <=\\n                lendingInfo.startedBlock.add(userLending.borrowNumbers),\\n            \\\"Expired\\\"\\n        );\\n\\n        if (underlyToken == ZERO_ADDRESS) {\\n            require(\\n                msg.value == _amount && _amount == userLending.lendingAmount,\\n                \\\"!_amount\\\"\\n            );\\n\\n            ISupplyBooster(supplyBooster).repayBorrow{\\n                value: userLending.lendingAmount\\n            }(\\n                userLending.lendingId,\\n                lendingInfo.user,\\n                userLending.borrowInterest\\n            );\\n        } else {\\n            require(\\n                msg.value == 0 && _amount == userLending.lendingAmount,\\n                \\\"!_amount\\\"\\n            );\\n\\n            IERC20(underlyToken).safeTransferFrom(\\n                msg.sender,\\n                supplyBooster,\\n                userLending.lendingAmount\\n            );\\n\\n            ISupplyBooster(supplyBooster).repayBorrow(\\n                userLending.lendingId,\\n                lendingInfo.user,\\n                userLending.lendingAmount,\\n                userLending.borrowInterest\\n            );\\n        }\\n\\n        IConvexBooster(convexBooster).withdrawFor(\\n            pool.convexPid,\\n            userLending.token0,\\n            lendingInfo.user,\\n            _freezeTokens\\n        );\\n\\n        BorrowInfo storage borrowInfo = borrowInfos[\\n            generateId(address(0), lendingInfo.pid, userLending.supportPid)\\n        ];\\n\\n        borrowInfo.borrowAmount = borrowInfo.borrowAmount.sub(\\n            userLending.token0Price\\n        );\\n        borrowInfo.supplyAmount = borrowInfo.supplyAmount.sub(\\n            userLending.lendingAmount\\n        );\\n\\n        Statistic storage statistic = myStatistics[\\n            generateId(\\n                lendingInfo.user,\\n                lendingInfo.pid,\\n                userLending.supportPid\\n            )\\n        ];\\n\\n        statistic.totalCollateral = statistic.totalCollateral.sub(\\n            userLending.token0\\n        );\\n        statistic.totalBorrow = statistic.totalBorrow.sub(\\n            userLending.lendingAmount\\n        );\\n        statistic.recentRepayAt = block.timestamp;\\n\\n        ILendingSponsor(lendingSponsor).payFee(\\n            userLending.lendingId,\\n            payable(lendingInfo.user)\\n        );\\n\\n        lendingInfo.state = UserLendingState.EXPIRED;\\n\\n        emit RepayBorrow(\\n            userLending.lendingId,\\n            lendingInfo.user,\\n            lendingInfo.state\\n        );\\n    }\\n\\n    function repayBorrow(bytes32 _lendingId) public payable {\\n        _repayBorrow(_lendingId, msg.value, false);\\n    }\\n\\n    function repayBorrowERC20(bytes32 _lendingId, uint256 _amount) public {\\n        _repayBorrow(_lendingId, _amount, false);\\n    }\\n\\n    function repayBorrowAndFreezeTokens(bytes32 _lendingId) public payable {\\n        _repayBorrow(_lendingId, msg.value, true);\\n    }\\n\\n    function repayBorrowERC20AndFreezeTokens(\\n        bytes32 _lendingId,\\n        uint256 _amount\\n    ) public {\\n        _repayBorrow(_lendingId, _amount, true);\\n    }\\n\\n    /**\\n    @notice Used to liquidate asset\\n    @dev If repayment is overdue, it is used to liquidate asset. If valued LP is not enough, can use msg.value or _extraErc20Amount force liquidation\\n    @param _lendingId Lending ID\\n    @param _extraErc20Amount If liquidate erc-20 asset, fill in extra amount. If native asset, send msg.value\\n     */\\n    function liquidate(bytes32 _lendingId, uint256 _extraErc20Amount)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        uint256 gasStart = gasleft();\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n\\n        require(lendingInfo.startedBlock > 0, \\\"!invalid lendingId\\\");\\n\\n        UserLending storage userLending = userLendings[lendingInfo.user][\\n            lendingInfo.userLendingIndex\\n        ];\\n\\n        require(\\n            lendingInfo.state == UserLendingState.LENDING,\\n            \\\"!UserLendingState\\\"\\n        );\\n\\n        require(\\n            lendingInfo.startedBlock.add(userLending.borrowNumbers).sub(\\n                liquidateThresholdBlockNumbers\\n            ) < block.number,\\n            \\\"!borrowNumbers\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[lendingInfo.pid];\\n\\n        lendingInfo.state = UserLendingState.LIQUIDATED;\\n\\n        BorrowInfo storage borrowInfo = borrowInfos[\\n            generateId(address(0), lendingInfo.pid, userLending.supportPid)\\n        ];\\n\\n        borrowInfo.borrowAmount = borrowInfo.borrowAmount.sub(\\n            userLending.token0Price\\n        );\\n        borrowInfo.supplyAmount = borrowInfo.supplyAmount.sub(\\n            userLending.lendingAmount\\n        );\\n\\n        Statistic storage statistic = myStatistics[\\n            generateId(\\n                lendingInfo.user,\\n                lendingInfo.pid,\\n                userLending.supportPid\\n            )\\n        ];\\n\\n        statistic.totalCollateral = statistic.totalCollateral.sub(\\n            userLending.token0\\n        );\\n        statistic.totalBorrow = statistic.totalBorrow.sub(\\n            userLending.lendingAmount\\n        );\\n\\n        (address underlyToken, uint256 liquidateAmount) = IConvexBooster(\\n            convexBooster\\n        ).liquidate(\\n                pool.convexPid,\\n                userLending.curveCoinId,\\n                lendingInfo.user,\\n                userLending.token0\\n            );\\n\\n        if (underlyToken == ZERO_ADDRESS) {\\n            liquidateAmount = liquidateAmount.add(msg.value);\\n\\n            ISupplyBooster(supplyBooster).liquidate{value: liquidateAmount}(\\n                userLending.lendingId,\\n                userLending.borrowInterest\\n            );\\n        } else {\\n            IERC20(underlyToken).safeTransfer(supplyBooster, liquidateAmount);\\n\\n            if (_extraErc20Amount > 0) {\\n                // Failure without authorization\\n                IERC20(underlyToken).safeTransferFrom(\\n                    msg.sender,\\n                    supplyBooster,\\n                    _extraErc20Amount\\n                );\\n            }\\n\\n            ISupplyBooster(supplyBooster).liquidate(\\n                userLending.lendingId,\\n                userLending.borrowInterest\\n            );\\n        }\\n\\n        ILendingSponsor(lendingSponsor).payFee(\\n            userLending.lendingId,\\n            msg.sender\\n        );\\n\\n        uint256 gasSpent = (21000 + gasStart - gasleft()).mul(tx.gasprice);\\n\\n        emit Liquidate(\\n            userLending.lendingId,\\n            lendingInfo.user,\\n            liquidateAmount,\\n            gasSpent,\\n            lendingInfo.state\\n        );\\n    }\\n\\n    function setLiquidateThresholdBlockNumbers(uint256 _v)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _v >= MIN_LIQUIDATE_BLOCK_NUMBERS &&\\n                _v <= MAX_LIQUIDATE_BLOCK_NUMBERS,\\n            \\\"!_v\\\"\\n        );\\n\\n        liquidateThresholdBlockNumbers = _v;\\n    }\\n\\n    function setBorrowBlock(uint256 _number, bool _state)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _number.sub(liquidateThresholdBlockNumbers) >\\n                liquidateThresholdBlockNumbers,\\n            \\\"!_number\\\"\\n        );\\n\\n        borrowBlocks[_number] = _state;\\n\\n        emit SetBorrowBlock(_number, borrowBlocks[_number]);\\n    }\\n\\n    function setLendingThreshold(uint256 _pid, uint256 _v)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _v >= MIN_LENDING_THRESHOLD && _v <= MAX_LENDING_THRESHOLD,\\n            \\\"!_v\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.lendingThreshold = _v;\\n    }\\n\\n    function setLiquidateThreshold(uint256 _pid, uint256 _v)\\n        public\\n        onlyGovernance\\n    {\\n        require(\\n            _v >= MIN_LIQUIDATE_THRESHOLD && _v <= MAX_LIQUIDATE_THRESHOLD,\\n            \\\"!_v\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.liquidateThreshold = _v;\\n    }\\n\\n    receive() external payable {}\\n\\n    /* \\n    @param _convexBoosterPid convexBooster contract\\n    @param _supplyBoosterPids supply contract\\n    @param _curveCoinIds curve coin id of curve COINS\\n     */\\n    function addMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold\\n    ) public onlyGovernance {\\n        require(\\n            _lendingThreshold >= MIN_LENDING_THRESHOLD &&\\n                _lendingThreshold <= MAX_LENDING_THRESHOLD,\\n            \\\"!_lendingThreshold\\\"\\n        );\\n        require(\\n            _liquidateThreshold >= MIN_LIQUIDATE_THRESHOLD &&\\n                _liquidateThreshold <= MAX_LIQUIDATE_THRESHOLD,\\n            \\\"!_liquidateThreshold\\\"\\n        );\\n        require(\\n            _supplyBoosterPids.length == _curveCoinIds.length,\\n            \\\"!_supportPids && _curveCoinIds\\\"\\n        );\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                convexPid: _convexBoosterPid,\\n                supportPids: _supplyBoosterPids,\\n                curveCoinIds: _curveCoinIds,\\n                lendingThreshold: _lendingThreshold,\\n                liquidateThreshold: _liquidateThreshold,\\n                borrowIndex: 0\\n            })\\n        );\\n    }\\n\\n    /* function toBytes16(uint256 x) internal pure returns (bytes16 b) {\\n        return bytes16(bytes32(x));\\n    } */\\n\\n    function generateId(\\n        address x,\\n        uint256 y,\\n        uint256 z\\n    ) public pure returns (bytes32) {\\n        /* return toBytes16(uint256(keccak256(abi.encodePacked(x, y, z)))); */\\n        return keccak256(abi.encodePacked(x, y, z));\\n    }\\n\\n    function poolLength() public view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function cursor(\\n        uint256 _pid,\\n        uint256 _offset,\\n        uint256 _size\\n    ) public view returns (bytes32[] memory, uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        uint256 size = _offset.add(_size) > pool.borrowIndex\\n            ? pool.borrowIndex.sub(_offset)\\n            : _size;\\n\\n        bytes32[] memory userLendingIds = new bytes32[](size);\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            bytes32 userLendingId = poolLending[_pid][_offset.add(i)];\\n\\n            userLendingIds[i] = userLendingId;\\n        }\\n\\n        return (userLendingIds, pool.borrowIndex);\\n    }\\n\\n    function calculateRepayAmount(bytes32 _lendingId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n        UserLending storage userLending = userLendings[lendingInfo.user][\\n            lendingInfo.userLendingIndex\\n        ];\\n\\n        if (lendingInfo.state == UserLendingState.LIQUIDATED) return 0;\\n\\n        return userLending.lendingAmount;\\n    }\\n\\n    function getPoolSupportPids(uint256 _pid)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return pool.supportPids;\\n    }\\n\\n    function getCurveCoinId(uint256 _pid, uint256 _supportPid)\\n        public\\n        view\\n        returns (int128)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return pool.curveCoinIds[_supportPid];\\n    }\\n\\n    function getUserLendingState(bytes32 _lendingId)\\n        public\\n        view\\n        returns (UserLendingState)\\n    {\\n        LendingInfo storage lendingInfo = lendings[_lendingId];\\n\\n        return lendingInfo.state;\\n    }\\n\\n    function getLendingInfo(\\n        uint256 _token0,\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        uint256 _supplyPid,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold,\\n        uint256 _borrowBlocks\\n    ) public view returns (LendingParams memory) {\\n        (address lpToken, uint256 token0Price) = _getCurveInfo(\\n            _convexPid,\\n            _curveCoinId,\\n            _token0\\n        );\\n\\n        uint256 utilizationRate = ISupplyBooster(supplyBooster)\\n            .getUtilizationRate(_supplyPid);\\n        uint256 supplyRatePerBlock = ISupplyBooster(supplyBooster)\\n            .getBorrowRatePerBlock(_supplyPid);\\n        uint256 supplyRate = getSupplyRate(supplyRatePerBlock, _borrowBlocks);\\n        uint256 lendflareTotalRate;\\n\\n        if (utilizationRate > 0) {\\n            lendflareTotalRate = getLendingRate(\\n                supplyRate,\\n                getAmplificationFactor(utilizationRate)\\n            );\\n        } else {\\n            lendflareTotalRate = supplyRate.sub(SUPPLY_RATE_DENOMINATOR);\\n        }\\n\\n        uint256 lendingAmount = token0Price.mul(SUPPLY_RATE_DENOMINATOR);\\n\\n        lendingAmount = lendingAmount.mul(\\n            THRESHOLD_DENOMINATOR.sub(_lendingThreshold).sub(\\n                _liquidateThreshold\\n            )\\n        );\\n\\n        lendingAmount = lendingAmount.div(THRESHOLD_DENOMINATOR);\\n\\n        uint256 repayBorrowAmount = lendingAmount.div(SUPPLY_RATE_DENOMINATOR);\\n        uint256 borrowAmount = lendingAmount.div(\\n            SUPPLY_RATE_DENOMINATOR.add(lendflareTotalRate)\\n        );\\n\\n        uint256 borrowInterest = repayBorrowAmount.sub(borrowAmount);\\n\\n        return\\n            LendingParams({\\n                lendingAmount: repayBorrowAmount,\\n                borrowAmount: borrowAmount,\\n                borrowInterest: borrowInterest,\\n                lendingRate: lendflareTotalRate,\\n                utilizationRate: utilizationRate,\\n                supplyRatePerBlock: supplyRatePerBlock,\\n                lpToken: lpToken,\\n                token0Price: token0Price\\n            });\\n    }\\n\\n    function getUserLendingsLength(address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return userLendings[_user].length;\\n    }\\n\\n    function getSupplyRate(uint256 _supplyBlockRate, uint256 n)\\n        public\\n        pure\\n        returns (\\n            uint256 total // _supplyBlockRate and the result are scaled to 1e18\\n        )\\n    {\\n        uint256 term = 1e18; // term0 = xn, term1 = n(n-1)/2! * x^2, term2 = term1 * (n - 2) / (i + 1) * x\\n        uint256 result = 1e18; // partial sum of terms\\n        uint256 MAX_TERMS = 10; // up to MAX_TERMS are calculated, the error is negligible\\n\\n        for (uint256 i = 0; i < MAX_TERMS && i < n; ++i) {\\n            term = term.mul(n - i).div(i + 1).mul(_supplyBlockRate).div(1e18);\\n\\n            total = total.add(term);\\n        }\\n\\n        total = total.add(result);\\n    }\\n\\n    function getAmplificationFactor(uint256 _utilizationRate)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (_utilizationRate <= 0.9 * 1e18) {\\n            return uint256(10).mul(_utilizationRate).div(9).add(1e18);\\n        }\\n\\n        return uint256(20).mul(_utilizationRate).sub(16 * 1e18);\\n    }\\n\\n    // lendflare total rate\\n    function getLendingRate(uint256 _supplyRate, uint256 _amplificationFactor)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _supplyRate.sub(1e18).mul(_amplificationFactor).div(1e18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GenerateLendingPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./supply/SupplyTreasuryFundForCompound.sol\\\";\\nimport \\\"./convex/IConvexBooster.sol\\\";\\nimport \\\"./supply/ISupplyBooster.sol\\\";\\n\\n/* \\nThis contract will be executed after the lending contracts is created and will become invalid in the future.\\n */\\n\\ninterface ILendingMarket {\\n    function addMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold\\n    ) external;\\n}\\n\\ninterface ISupplyRewardFactoryExtra is ISupplyRewardFactory {\\n    function addOwner(address _newOwner) external;\\n}\\n\\ncontract GenerateLendingPools {\\n    address public convexBooster;\\n    address public lendingMarket;\\n\\n    address public supplyBooster;\\n    address public supplyRewardFactory;\\n\\n    bool public completed;\\n    address public deployer;\\n\\n    struct ConvexPool {\\n        address target;\\n        uint256 pid;\\n    }\\n\\n    struct LendingMarketMapping {\\n        uint256 convexBoosterPid;\\n        uint256[] supplyBoosterPids;\\n        int128[] curveCoinIds;\\n    }\\n\\n    address[] public supplyPools;\\n    address[] public compoundPools;\\n    ConvexPool[] public convexPools;\\n    LendingMarketMapping[] public lendingMarketMappings;\\n\\n    constructor(address _deployer) public {\\n        deployer = _deployer;\\n    }\\n\\n    function setLendingContract(\\n        address _supplyBooster,\\n        address _convexBooster,\\n        address _lendingMarket,\\n        address _supplyRewardFactory\\n    ) public {\\n        require(\\n            deployer == msg.sender,\\n            \\\"GenerateLendingPools: !authorized auth\\\"\\n        );\\n\\n        supplyBooster = _supplyBooster;\\n        convexBooster = _convexBooster;\\n        lendingMarket = _lendingMarket;\\n        supplyRewardFactory = _supplyRewardFactory;\\n    }\\n\\n    function createMapping(\\n        uint256 _convexBoosterPid,\\n        uint256 _param1,\\n        uint256 _param2,\\n        int128 _param3,\\n        int128 _param4\\n    ) internal pure returns (LendingMarketMapping memory lendingMarketMapping) {\\n        uint256[] memory supplyBoosterPids = new uint256[](2);\\n        int128[] memory curveCoinIds = new int128[](2);\\n\\n        supplyBoosterPids[0] = _param1;\\n        supplyBoosterPids[1] = _param2;\\n\\n        curveCoinIds[0] = _param3;\\n        curveCoinIds[1] = _param4;\\n\\n        lendingMarketMapping.convexBoosterPid = _convexBoosterPid;\\n        lendingMarketMapping.supplyBoosterPids = supplyBoosterPids;\\n        lendingMarketMapping.curveCoinIds = curveCoinIds;\\n    }\\n\\n    function createMapping(\\n        uint256 _convexBoosterPid,\\n        uint256 _param1,\\n        int128 _param2\\n    ) internal pure returns (LendingMarketMapping memory lendingMarketMapping) {\\n        uint256[] memory supplyBoosterPids = new uint256[](1);\\n        int128[] memory curveCoinIds = new int128[](1);\\n\\n        supplyBoosterPids[0] = _param1;\\n        curveCoinIds[0] = _param2;\\n\\n        lendingMarketMapping.convexBoosterPid = _convexBoosterPid;\\n        lendingMarketMapping.supplyBoosterPids = supplyBoosterPids;\\n        lendingMarketMapping.curveCoinIds = curveCoinIds;\\n    }\\n\\n    function generateSupplyPools() internal {\\n        address compoundComptroller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\\n        (address USDC,address cUSDC) = (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 0x39AA39c021dfbaE8faC545936693aC917d5E7563);\\n        (address DAI,address cDAI) = (0x6B175474E89094C44Da98b954EedeAC495271d0F, 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\\n        (address TUSD,address cTUSD) = (0x0000000000085d4780B73119b644AE5ecd22b376, 0x12392F67bdf24faE0AF363c24aC620a2f67DAd86);\\n        (address WBTC,address cWBTC) = (0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4);\\n        (address Ether,address cEther) = (0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\\n\\n\\n        supplyPools.push(USDC);\\n        supplyPools.push(DAI);\\n        supplyPools.push(TUSD);\\n        supplyPools.push(WBTC);\\n        supplyPools.push(Ether);\\n\\n        compoundPools.push(cUSDC);\\n        compoundPools.push(cDAI);\\n        compoundPools.push(cTUSD);\\n        compoundPools.push(cWBTC);\\n        compoundPools.push(cEther);\\n\\n        for (uint256 i = 0; i < supplyPools.length; i++) {\\n            SupplyTreasuryFundForCompound supplyTreasuryFund = new SupplyTreasuryFundForCompound(\\n                    supplyBooster,\\n                    compoundPools[i],\\n                    compoundComptroller,\\n                    supplyRewardFactory\\n                );\\n\\n            ISupplyRewardFactoryExtra(supplyRewardFactory).addOwner(address(supplyTreasuryFund));\\n\\n            ISupplyBooster(supplyBooster).addSupplyPool(\\n                supplyPools[i],\\n                address(supplyTreasuryFund)\\n            );\\n        }\\n    }\\n\\n    function generateConvexPools() internal {\\n        // USDC,DAI , supplyBoosterPids, curveCoinIds  =  [cUSDC, cDAI], [USDC, DAI]\\n        convexPools.push( ConvexPool(0xC25a3A3b969415c80451098fa907EC722572917F, 4) ); // DAI USDC USDT sUSD               [1, 0] [0, 1] sUSD\\n        convexPools.push( ConvexPool(0x5a6A4D54456819380173272A5E8E9B9904BdF41B, 40) ); // MIM DAI USDC USDT               [1, 0] [1, 2] mim\\n        convexPools.push( ConvexPool(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490, 9) ); // DAI USDC USDT                    [1, 0] [0, 1] 3Pool\\n        convexPools.push( ConvexPool(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B, 32) ); // FRAX DAI USDC USDT              [1, 0] [1, 2] frax\\n        convexPools.push( ConvexPool(0x1AEf73d49Dedc4b1778d0706583995958Dc862e6, 14) ); // mUSD + 3Crv                     [1, 0] [1, 2] musd\\n        convexPools.push( ConvexPool(0x94e131324b6054c0D789b190b2dAC504e4361b53, 21) ); // UST + 3Crv                      [1, 0] [1, 2] ust\\n        convexPools.push( ConvexPool(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA, 33) ); // LUSD + 3Crv                     [1, 0] [1, 2] lusd\\n        convexPools.push( ConvexPool(0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c, 36) ); // alUSD + 3Crv                    [1, 0] [1, 2] alusd\\n        convexPools.push( ConvexPool(0xD2967f45c4f384DEEa880F807Be904762a3DeA07, 10) ); // GUSD + 3Crv                     [1, 0] [1, 2] gusd\\n        convexPools.push( ConvexPool(0x4f3E8F405CF5aFC05D68142F3783bDfE13811522, 13) ); // USDN + 3Crv                     [1, 0] [1, 2] usdn\\n        convexPools.push( ConvexPool(0x97E2768e8E73511cA874545DC5Ff8067eB19B787, 12) ); // USDK + 3Crv                     [1, 0] [1, 2] usdk\\n        convexPools.push( ConvexPool(0x4807862AA8b2bF68830e4C8dc86D0e9A998e085a, 34) ); // BUSD + 3Crv                     [1, 0] [1, 2] busdv2\\n        convexPools.push( ConvexPool(0x5B5CFE992AdAC0C9D48E05854B2d91C73a003858, 11) ); // HUSD + 3Crv                     [1, 0] [1, 2] husd\\n        convexPools.push( ConvexPool(0xC2Ee6b0334C261ED60C72f6054450b61B8f18E35, 15) ); // RSV + 3Crv                      [1, 0] [1, 2] rsv\\n        convexPools.push( ConvexPool(0x3a664Ab939FD8482048609f652f9a0B0677337B9, 17) ); // DUSD + 3Crv                     [1, 0] [1, 2] dusd\\n        convexPools.push( ConvexPool(0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6, 28) ); // USDP + 3Crv                     [1, 0] [1, 2] usdp\\n\\n        // TUSD\\n        convexPools.push( ConvexPool(0xEcd5e75AFb02eFa118AF914515D6521aaBd189F1, 31) ); // TUSD + 3Crv                     [2] [0] tusd\\n\\n        // WBTC\\n        convexPools.push( ConvexPool(0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3, 7) ); // renBTC + wBTC + sBTC            [3] [1] sbtc\\n        convexPools.push( ConvexPool(0x2fE94ea3d5d4a175184081439753DE15AeF9d614, 20) ); // oBTC + renBTC + wBTC + sBTC     [3] [2] obtc\\n        convexPools.push( ConvexPool(0x49849C98ae39Fff122806C06791Fa73784FB3675, 6) ); // renBTC + wBTC                   [3] [1] ren\\n        convexPools.push( ConvexPool(0xb19059ebb43466C323583928285a49f558E572Fd, 8) ); // HBTC + wBTC                     [3] [1] hbtc\\n        convexPools.push( ConvexPool(0x410e3E86ef427e30B9235497143881f717d93c2A, 19) ); // BBTC + renBTC + wBTC + sBTC     [3] [2] bbtc\\n        convexPools.push( ConvexPool(0x64eda51d3Ad40D56b9dFc5554E06F94e1Dd786Fd, 16) ); // tBTC + renBTC + wBTC + sBTC     [3] [2] tbtc\\n        convexPools.push( ConvexPool(0xDE5331AC4B3630f94853Ff322B66407e0D6331E8, 18) ); // pBTC + renBTC + wBTC + sBTC     [3] [2] pbtc\\n\\n        // ETH\\n        convexPools.push( ConvexPool(0xA3D87FffcE63B53E0d54fAa1cc983B7eB0b74A9c, 23) ); // ETH + sETH                      [4] [0] seth\\n        convexPools.push( ConvexPool(0x06325440D014e39736583c165C2963BA99fAf14E, 25) ); // ETH + stETH                     [4] [0] steth\\n        convexPools.push( ConvexPool(0xaA17A236F2bAdc98DDc0Cf999AbB47D47Fc0A6Cf, 27) ); // ETH + ankrETH                   [4] [0] ankreth\\n        convexPools.push( ConvexPool(0x53a901d48795C58f485cBB38df08FA96a24669D5, 35) ); // ETH + rETH                      [4] [0] reth\\n\\n        for (uint256 i = 0; i < convexPools.length; i++) {\\n            IConvexBooster(convexBooster).addConvexPool(convexPools[i].pid);\\n        }\\n    }\\n\\n    function generateMappingPools() internal {\\n        lendingMarketMappings.push(createMapping(0, 1, 0, 0, 1)); // [1, 0] [0, 1]\\n        lendingMarketMappings.push(createMapping(1, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(2, 1, 0, 0, 1)); // [1, 0] [0, 1]\\n        lendingMarketMappings.push(createMapping(3, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(4, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(5, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(6, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(7, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(8, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(9, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(10, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(11, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(12, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(13, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(14, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(15, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n\\n        lendingMarketMappings.push(createMapping(16, 2, 0)); // [2] [0]\\n\\n        lendingMarketMappings.push(createMapping(17, 3, 1)); // [3] [1]\\n        lendingMarketMappings.push(createMapping(18, 3, 2)); // [3] [2]\\n        lendingMarketMappings.push(createMapping(19, 3, 1)); // [3] [1]\\n        lendingMarketMappings.push(createMapping(20, 3, 1)); // [3] [1]\\n        lendingMarketMappings.push(createMapping(21, 3, 2)); // [3] [2]\\n        lendingMarketMappings.push(createMapping(22, 3, 2)); // [3] [2]\\n        lendingMarketMappings.push(createMapping(23, 3, 2)); // [3] [2]\\n\\n        lendingMarketMappings.push(createMapping(24, 4, 0)); // [4] [0]\\n        lendingMarketMappings.push(createMapping(25, 4, 0)); // [4] [0]\\n        lendingMarketMappings.push(createMapping(26, 4, 0)); // [4] [0]\\n        lendingMarketMappings.push(createMapping(27, 4, 0)); // [4] [0]\\n\\n        for (uint256 i = 0; i < lendingMarketMappings.length; i++) {\\n            ILendingMarket(lendingMarket).addMarketPool(\\n                lendingMarketMappings[i].convexBoosterPid,\\n                lendingMarketMappings[i].supplyBoosterPids,\\n                lendingMarketMappings[i].curveCoinIds,\\n                100,\\n                50\\n            );\\n        }\\n    }\\n\\n    function run() public {\\n        require(deployer == msg.sender, \\\"GenerateLendingPools: !authorized auth\\\");\\n        require(!completed, \\\"GenerateLendingPools: !completed\\\");\\n\\n        require(supplyBooster != address(0),\\\"!supplyBooster\\\");\\n        require(convexBooster != address(0),\\\"!convexBooster\\\");\\n        require(lendingMarket != address(0),\\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0),\\\"!supplyRewardFactory\\\");\\n\\n        generateSupplyPools();\\n        generateConvexPools();\\n        generateMappingPools();\\n\\n        completed = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/convex/ConvexInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./IConvexBooster.sol\\\";\\n\\ninterface IOriginConvexBooster {\\n    function deposit( uint256 _pid, uint256 _amount, bool _stake ) external returns (bool);\\n    function withdraw(uint256 _pid, uint256 _amount) external returns(bool);\\n    function claimStashToken(address _token, address _rewardAddress, address _lfRewardAddress, uint256 _rewards) external;\\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\\n    function isShutdown() external view returns(bool);\\n    function minter() external view returns(address);\\n    function earmarkRewards(uint256) external returns(bool);\\n}\\n\\ninterface IOriginConvexRewardPool {\\n    function getReward() external returns(bool);\\n    function getReward(address _account, bool _claimExtras) external returns(bool);\\n    function withdrawAllAndUnwrap(bool claim) external;\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\\n    function withdrawAll(bool claim) external;\\n    function withdraw(uint256 amount, bool claim) external returns(bool);\\n    function stakeFor(address _for, uint256 _amount) external returns(bool);\\n    function stakeAll() external returns(bool);\\n    function stake(uint256 _amount) external returns(bool);\\n    function earned(address account) external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n    function rewardToken() external returns(address);\\n    function extraRewards(uint256 _idx) external view returns (address);\\n    function extraRewardsLength() external view returns (uint256);\\n}\\n\\ninterface IOriginConvexVirtualBalanceRewardPool {\\n    function getReward(address _account) external;\\n    function getReward() external;\\n    function rewardToken() external returns(address);\\n}\\n\\ninterface IConvexRewardPool {\\n    function earned(address account) external view returns (uint256);\\n    function stake(address _for) external;\\n    function withdraw(address _for) external;\\n    function getReward(address _for) external;\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function extraRewards(uint256 _idx) external view returns (address);\\n    function extraRewardsLength() external view returns (uint256);\\n    function addExtraReward(address _reward) external returns(bool);\\n}\\n\\ninterface IConvexRewardFactory {\\n    function createReward(address _reward, address _virtualBalance, address _operator) external returns (address);\\n}\\n\\ninterface ICurveSwap {\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\\n    /* function remove_liquidity(uint256 _token_amount, uint256[] memory min_amounts) external; */\\n    function coins(uint256 _coinId) external view returns(address);\\n    function balances(uint256 _coinId) external view returns(uint256);\\n}\\n\\ninterface ICurveAddressProvider{\\n    function get_registry() external view returns(address);\\n    function get_address(uint256 _id) external view returns(address);\\n}\\n\\ninterface ICurveRegistry{\\n    function gauge_controller() external view returns(address);\\n    function get_lp_token(address) external view returns(address);\\n    function get_pool_from_lp_token(address) external view returns(address);\\n    function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\\n}\"\r\n    },\r\n    \"contracts/ConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./convex/ConvexInterfaces.sol\\\";\\nimport \\\"./common/IVirtualBalanceWrapper.sol\\\";\\n\\ncontract ConvexBooster is Initializable, ReentrancyGuard, IConvexBooster {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // https://curve.readthedocs.io/registry-address-provider.html\\n    ICurveAddressProvider public curveAddressProvider;\\n\\n    address public constant ZERO_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address public convexRewardFactory;\\n    address public virtualBalanceWrapperFactory;\\n    address public originConvexBooster;\\n    address public rewardCrvToken;\\n    address public rewardCvxToken;\\n    uint256 public version;\\n\\n    address public lendingMarket;\\n    address public owner;\\n    address public governance;\\n\\n    struct PoolInfo {\\n        uint256 originConvexPid;\\n        address curveSwapAddress; /* like 3pool https://github.com/curvefi/curve-js/blob/master/src/constants/abis/abis-ethereum.ts */\\n        address lpToken;\\n        address originCrvRewards;\\n        address originStash;\\n        address virtualBalance;\\n        address rewardCrvPool;\\n        address rewardCvxPool;\\n        bool shutdown;\\n    }\\n\\n    PoolInfo[] public override poolInfo;\\n\\n    mapping(uint256 => mapping(address => uint256)) public frozenTokens; // pid => (user => amount)\\n\\n    event Deposited(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdateExtraRewards(uint256 pid, uint256 index, address extraReward);\\n    event Initialized(address indexed thisAddress);\\n    event ToggleShutdownPool(uint256 pid, bool shutdown);\\n    event SetOwner(address owner);\\n    event SetGovernance(address governance);\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"ConvexBooster: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governance == msg.sender,\\n            \\\"ConvexBooster: caller is not the governance\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLendingMarket() {\\n        require(\\n            lendingMarket == msg.sender,\\n            \\\"ConvexBooster: caller is not the lendingMarket\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    /* \\n    The default governance user is GenerateLendingPools contract.\\n    It will be set to DAO in the future \\n    */\\n    function setGovernance(address _governance) public onlyOwner {\\n        governance = _governance;\\n\\n        emit SetGovernance(_governance);\\n    }\\n\\n    function setLendingMarket(address _v) public onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        lendingMarket = _v;\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        address _originConvexBooster,\\n        address _convexRewardFactory,\\n        address _virtualBalanceWrapperFactory,\\n        address _rewardCrvToken,\\n        address _rewardCvxToken\\n    ) public initializer {\\n        owner = _owner;\\n        governance = _owner;\\n        convexRewardFactory = _convexRewardFactory;\\n        originConvexBooster = _originConvexBooster;\\n        virtualBalanceWrapperFactory = _virtualBalanceWrapperFactory;\\n        rewardCrvToken = _rewardCrvToken;\\n        rewardCvxToken = _rewardCvxToken;\\n        version = 1;\\n\\n        curveAddressProvider = ICurveAddressProvider(\\n            0x0000000022D53366457F9d5E68Ec105046FC4383\\n        );\\n\\n        emit Initialized(address(this));\\n    }\\n\\n    function addConvexPool(uint256 _originConvexPid)\\n        public\\n        override\\n        onlyGovernance\\n    {\\n        (\\n            address lpToken,\\n            ,\\n            ,\\n            address originCrvRewards,\\n            address originStash,\\n            bool shutdown\\n        ) = IOriginConvexBooster(originConvexBooster).poolInfo(\\n                _originConvexPid\\n            );\\n\\n        require(!shutdown, \\\"!shutdown\\\");\\n        require(lpToken != address(0), \\\"!lpToken\\\");\\n\\n        ICurveRegistry registry = ICurveRegistry(\\n            ICurveAddressProvider(curveAddressProvider).get_registry()\\n        );\\n\\n        address curveSwapAddress = registry.get_pool_from_lp_token(lpToken);\\n\\n        address virtualBalance = IVirtualBalanceWrapperFactory(\\n            virtualBalanceWrapperFactory\\n        ).createWrapper(address(this));\\n\\n        address rewardCrvPool = IConvexRewardFactory(convexRewardFactory)\\n            .createReward(rewardCrvToken, virtualBalance, address(this));\\n\\n        address rewardCvxPool = IConvexRewardFactory(convexRewardFactory)\\n            .createReward(rewardCvxToken, virtualBalance, address(this));\\n\\n        uint256 extraRewardsLength = IOriginConvexRewardPool(originCrvRewards)\\n            .extraRewardsLength();\\n\\n        if (extraRewardsLength > 0) {\\n            for (uint256 i = 0; i < extraRewardsLength; i++) {\\n                address extraRewardToken = IOriginConvexRewardPool(\\n                    originCrvRewards\\n                ).extraRewards(i);\\n\\n                address extraRewardPool = IConvexRewardFactory(\\n                    convexRewardFactory\\n                ).createReward(\\n                        IOriginConvexRewardPool(extraRewardToken).rewardToken(),\\n                        virtualBalance,\\n                        address(this)\\n                    );\\n\\n                IConvexRewardPool(rewardCrvPool).addExtraReward(\\n                    extraRewardPool\\n                );\\n            }\\n        }\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                originConvexPid: _originConvexPid,\\n                curveSwapAddress: curveSwapAddress,\\n                lpToken: lpToken,\\n                originCrvRewards: originCrvRewards,\\n                originStash: originStash,\\n                virtualBalance: virtualBalance,\\n                rewardCrvPool: rewardCrvPool,\\n                rewardCvxPool: rewardCvxPool,\\n                shutdown: false\\n            })\\n        );\\n    }\\n\\n    function updateExtraRewards(uint256 _pid) public onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        (\\n            ,\\n            ,\\n            ,\\n            address originCrvRewards,\\n            ,\\n            bool shutdown\\n        ) = IOriginConvexBooster(originConvexBooster).poolInfo(\\n                pool.originConvexPid\\n            );\\n\\n        require(!shutdown, \\\"!shutdown\\\");\\n\\n        uint256 originExtraRewardsLength = IOriginConvexRewardPool(\\n            originCrvRewards\\n        ).extraRewardsLength();\\n\\n        uint256 currentExtraRewardsLength = IConvexRewardPool(\\n            pool.rewardCrvPool\\n        ).extraRewardsLength();\\n\\n        for (\\n            uint256 i = currentExtraRewardsLength;\\n            i < originExtraRewardsLength;\\n            i++\\n        ) {\\n            address extraRewardToken = IOriginConvexRewardPool(originCrvRewards)\\n                .extraRewards(i);\\n\\n            address extraRewardPool = IConvexRewardFactory(convexRewardFactory)\\n                .createReward(\\n                    IOriginConvexRewardPool(extraRewardToken).rewardToken(),\\n                    pool.virtualBalance,\\n                    address(this)\\n                );\\n\\n            IConvexRewardPool(pool.rewardCrvPool).addExtraReward(\\n                extraRewardPool\\n            );\\n\\n            emit UpdateExtraRewards(_pid, i, extraRewardPool);\\n        }\\n    }\\n\\n    function toggleShutdownPool(uint256 _pid) public onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.shutdown = !pool.shutdown;\\n\\n        emit ToggleShutdownPool(_pid, pool.shutdown);\\n    }\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) public override onlyLendingMarket nonReentrant returns (bool) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        IERC20(pool.lpToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // (\\n        //     address lpToken,\\n        //     address token,\\n        //     address gauge,\\n        //     address crvRewards,\\n        //     address stash,\\n        //     bool shutdown\\n        // ) = IOriginConvexBooster(convexBooster).poolInfo(pool.convexPid);\\n        (, , , , , bool shutdown) = IOriginConvexBooster(originConvexBooster)\\n            .poolInfo(pool.originConvexPid);\\n\\n        require(!shutdown, \\\"!convex shutdown\\\");\\n        require(!pool.shutdown, \\\"!shutdown\\\");\\n\\n        IERC20(pool.lpToken).safeApprove(originConvexBooster, 0);\\n        IERC20(pool.lpToken).safeApprove(originConvexBooster, _amount);\\n\\n        IOriginConvexBooster(originConvexBooster).deposit(\\n            pool.originConvexPid,\\n            _amount,\\n            true\\n        );\\n\\n        IConvexRewardPool(pool.rewardCrvPool).stake(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).stake(_user);\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).stakeFor(_user, _amount);\\n\\n        emit Deposited(_user, _pid, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawMyTokens(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n    {\\n        require(_amount > 0, \\\"!_amount\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        frozenTokens[_pid][msg.sender] = frozenTokens[_pid][msg.sender].sub(\\n            _amount\\n        );\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(\\n            _amount,\\n            true\\n        );\\n\\n        IERC20(pool.lpToken).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function withdrawFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user,\\n        bool _frozenTokens\\n    ) public override onlyLendingMarket nonReentrant returns (bool) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (_frozenTokens) {\\n            frozenTokens[_pid][_user] = frozenTokens[_pid][_user].add(_amount);\\n        } else {\\n            IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(\\n                _amount,\\n                true\\n            );\\n\\n            IERC20(pool.lpToken).safeTransfer(_user, _amount);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(_user);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(_user);\\n        }\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(_user, _amount);\\n\\n        IConvexRewardPool(pool.rewardCrvPool).withdraw(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).withdraw(_user);\\n\\n        emit Withdrawn(_user, _pid, _amount);\\n\\n        return true;\\n    }\\n\\n    function liquidate(\\n        uint256 _pid,\\n        int128 _coinId,\\n        address _user,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyLendingMarket\\n        nonReentrant\\n        returns (address, uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(\\n            _amount,\\n            true\\n        );\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(_user, _amount);\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(_user);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(_user);\\n        }\\n\\n        IConvexRewardPool(pool.rewardCrvPool).withdraw(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).withdraw(_user);\\n\\n        IERC20(pool.lpToken).safeApprove(pool.curveSwapAddress, 0);\\n        IERC20(pool.lpToken).safeApprove(pool.curveSwapAddress, _amount);\\n\\n        address underlyToken = ICurveSwap(pool.curveSwapAddress).coins(\\n            uint256(_coinId)\\n        );\\n\\n        ICurveSwap(pool.curveSwapAddress).remove_liquidity_one_coin(\\n            _amount,\\n            _coinId,\\n            0\\n        );\\n\\n        if (underlyToken == ZERO_ADDRESS) {\\n            uint256 totalAmount = address(this).balance;\\n\\n            msg.sender.sendValue(totalAmount);\\n\\n            return (ZERO_ADDRESS, totalAmount);\\n        } else {\\n            uint256 totalAmount = IERC20(underlyToken).balanceOf(address(this));\\n\\n            IERC20(underlyToken).safeTransfer(msg.sender, totalAmount);\\n\\n            return (underlyToken, totalAmount);\\n        }\\n    }\\n\\n    function getRewards(uint256 _pid) public nonReentrant {\\n        PoolInfo memory pool = poolInfo[_pid];\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(msg.sender) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(msg.sender);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(msg.sender) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(msg.sender);\\n        }\\n    }\\n\\n    function claimRewardToken(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).getReward(\\n            address(this),\\n            true\\n        );\\n\\n        address rewardUnderlyToken = IOriginConvexRewardPool(\\n            pool.originCrvRewards\\n        ).rewardToken();\\n        uint256 crvBalance = IERC20(rewardUnderlyToken).balanceOf(\\n            address(this)\\n        );\\n\\n        if (crvBalance > 0) {\\n            IERC20(rewardUnderlyToken).safeTransfer(\\n                pool.rewardCrvPool,\\n                crvBalance\\n            );\\n\\n            IConvexRewardPool(pool.rewardCrvPool).notifyRewardAmount(\\n                crvBalance\\n            );\\n        }\\n\\n        uint256 extraRewardsLength = IConvexRewardPool(pool.rewardCrvPool)\\n            .extraRewardsLength();\\n\\n        for (uint256 i = 0; i < extraRewardsLength; i++) {\\n            address currentExtraReward = IConvexRewardPool(pool.rewardCrvPool)\\n                .extraRewards(i);\\n            address originExtraRewardToken = IOriginConvexRewardPool(\\n                pool.originCrvRewards\\n            ).extraRewards(i);\\n            address extraRewardUnderlyToken = IOriginConvexVirtualBalanceRewardPool(\\n                    originExtraRewardToken\\n                ).rewardToken();\\n            IOriginConvexVirtualBalanceRewardPool(originExtraRewardToken)\\n                .getReward(address(this));\\n            uint256 extraBalance = IERC20(extraRewardUnderlyToken).balanceOf(\\n                address(this)\\n            );\\n            if (extraBalance > 0) {\\n                IERC20(extraRewardUnderlyToken).safeTransfer(\\n                    currentExtraReward,\\n                    extraBalance\\n                );\\n                IConvexRewardPool(currentExtraReward).notifyRewardAmount(\\n                    extraBalance\\n                );\\n            }\\n        }\\n\\n        /* cvx */\\n        uint256 cvxBal = IERC20(rewardCvxToken).balanceOf(address(this));\\n\\n        if (cvxBal > 0) {\\n            IERC20(rewardCvxToken).safeTransfer(pool.rewardCvxPool, cvxBal);\\n\\n            IConvexRewardPool(pool.rewardCvxPool).notifyRewardAmount(cvxBal);\\n        }\\n    }\\n\\n    function claimAllRewardToken() public {\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            claimRewardToken(i);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    /* view functions */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/convex/ConvexRewardFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./ConvexInterfaces.sol\\\";\\nimport \\\"../common/IVirtualBalanceWrapper.sol\\\";\\n\\ncontract ConvexRewardPool is ReentrancyGuard, IConvexRewardPool {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public rewardToken;\\n    uint256 public constant duration = 7 days;\\n\\n    address public owner;\\n    address public virtualBalance;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    address[] public override extraRewards;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user);\\n    event Withdrawn(address indexed user);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address _reward,\\n        address _virtualBalance,\\n        address _owner\\n    ) public {\\n        rewardToken = _reward;\\n        virtualBalance = _virtualBalance;\\n        owner = _owner;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return IVirtualBalanceWrapper(virtualBalance).totalSupply();\\n    }\\n\\n    function balanceOf(address _for) public view returns (uint256) {\\n        return IVirtualBalanceWrapper(virtualBalance).balanceOf(_for);\\n    }\\n\\n    function extraRewardsLength() external view override returns (uint256) {\\n        return extraRewards.length;\\n    }\\n\\n    function addExtraReward(address _reward) external override returns (bool) {\\n        require(\\n            msg.sender == owner,\\n            \\\"ConvexRewardPool: !authorized addExtraReward\\\"\\n        );\\n        require(_reward != address(0), \\\"!reward setting\\\");\\n\\n        extraRewards.push(_reward);\\n        return true;\\n    }\\n\\n    function clearExtraRewards() external {\\n        require(\\n            msg.sender == owner,\\n            \\\"ConvexRewardPool: !authorized clearExtraRewards\\\"\\n        );\\n\\n        delete extraRewards;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address _for) public view override returns (uint256) {\\n        uint256 total = balanceOf(_for)\\n            .mul(rewardPerToken().sub(userRewardPerTokenPaid[_for]))\\n            .div(1e18)\\n            .add(rewards[_for]);\\n\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            total = total.add(IConvexRewardPool(extraRewards[i]).earned(_for));\\n        }\\n\\n        return total;\\n    }\\n\\n    function stake(address _for)\\n        public\\n        override\\n        nonReentrant\\n        updateReward(_for)\\n    {\\n        require(msg.sender == owner, \\\"ConvexRewardPool: !authorized stake\\\");\\n\\n        emit Staked(_for);\\n    }\\n\\n    function withdraw(address _for)\\n        public\\n        override\\n        nonReentrant\\n        updateReward(_for)\\n    {\\n        require(msg.sender == owner, \\\"ConvexRewardPool: !authorized withdraw\\\");\\n\\n        emit Withdrawn(_for);\\n    }\\n\\n    function getReward(address _for)\\n        public\\n        override\\n        nonReentrant\\n        updateReward(_for)\\n    {\\n        uint256 reward = earned(_for);\\n\\n        if (reward > 0) {\\n            rewards[_for] = 0;\\n\\n            if (rewardToken != address(0)) {\\n                IERC20(rewardToken).safeTransfer(_for, reward);\\n            } else {\\n                require(\\n                    address(this).balance >= reward,\\n                    \\\"!address(this).balance\\\"\\n                );\\n\\n                payable(_for).sendValue(reward);\\n            }\\n\\n            emit RewardPaid(_for, reward);\\n        }\\n\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IConvexRewardPool(extraRewards[i]).getReward(_for);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        updateReward(address(0))\\n    {\\n        require(\\n            msg.sender == owner,\\n            \\\"ConvexRewardPool: !authorized notifyRewardAmount\\\"\\n        );\\n        // overflow fix according to https://sips.synthetix.io/sips/sip-77\\n        require(\\n            reward < uint256(-1) / 1e18,\\n            \\\"the notified reward cannot invoke multiplication overflow\\\"\\n        );\\n\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(duration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(duration);\\n        }\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(duration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    receive() external payable {}\\n}\\n\\ncontract ConvexRewardFactory {\\n    address public owner;\\n\\n    event CreateReward(IConvexRewardPool rewardPool, address rewardToken);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function setOwner(address _owner) external {\\n        require(\\n            msg.sender == owner,\\n            \\\"ConvexRewardFactory: !authorized setOwner\\\"\\n        );\\n\\n        owner = _owner;\\n    }\\n\\n    function createReward(\\n        address _rewardToken,\\n        address _virtualBalance,\\n        address _owner\\n    ) external returns (address) {\\n        require(\\n            msg.sender == owner,\\n            \\\"ConvexRewardFactory: !authorized createReward\\\"\\n        );\\n\\n        IConvexRewardPool rewardPool = IConvexRewardPool(\\n            address(new ConvexRewardPool(_rewardToken, _virtualBalance, _owner))\\n        );\\n\\n        emit CreateReward(rewardPool, _rewardToken);\\n\\n        return address(rewardPool);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/convex/ConvexInterfacesV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./ConvexInterfaces.sol\\\";\\nimport \\\"./IConvexBoosterV2.sol\\\";\\n\\ninterface ICurveSwapV2 is ICurveSwap {\\n    // function remove_liquidity_one_coin(\\n    //     uint256 _token_amount,\\n    //     int128 _i,\\n    //     uint256 _min_amount\\n    // ) external override;\\n\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _burn_amount,\\n        int128 _i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    // function coins(uint256 _coinId) external view returns(address); in ICurveSwap\\n    function coins(int128 _coinId) external view returns (address);\\n\\n    function balances(uint256 _coinId) external view override returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _tokenAmount, int128 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /* factory */\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _tokenAmount,\\n        int128 _tokenId\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexBoosterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./convex/ConvexInterfacesV2.sol\\\";\\nimport \\\"./common/IVirtualBalanceWrapper.sol\\\";\\n\\ncontract ConvexBoosterV2 is Initializable, ReentrancyGuard, IConvexBoosterV2 {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // https://curve.readthedocs.io/registry-address-provider.html\\n    ICurveAddressProvider public curveAddressProvider;\\n\\n    address public constant ZERO_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address public convexRewardFactory;\\n    address public virtualBalanceWrapperFactory;\\n    address public originConvexBooster;\\n    address public rewardCrvToken;\\n    address public rewardCvxToken;\\n    uint256 public version;\\n\\n    address public lendingMarket;\\n    address public owner;\\n    address public governance;\\n\\n    struct PoolInfo {\\n        uint256 originConvexPid;\\n        address curveSwapAddress; /* like 3pool https://github.com/curvefi/curve-js/blob/master/src/constants/abis/abis-ethereum.ts */\\n        address lpToken;\\n        address originCrvRewards;\\n        address originStash;\\n        address virtualBalance;\\n        address rewardCrvPool;\\n        address rewardCvxPool;\\n        bool shutdown;\\n    }\\n\\n    struct MetaPoolInfo {\\n        address swapAddress;\\n        address zapAddress;\\n        address basePoolAddress;\\n        bool isMeta;\\n        bool isMetaFactory;\\n    }\\n\\n    PoolInfo[] public override poolInfo;\\n\\n    mapping(uint256 => mapping(address => uint256)) public frozenTokens; // pid => (user => amount)\\n    mapping(address => MetaPoolInfo) public metaPoolInfo;\\n\\n    event Deposited(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdateExtraRewards(uint256 pid, uint256 index, address extraReward);\\n    event Initialized(address indexed thisAddress);\\n    event ToggleShutdownPool(uint256 pid, bool shutdown);\\n    event SetOwner(address owner);\\n    event SetGovernance(address governance);\\n    event CurveZap(address lpToken, address curveZapAddress);\\n    event SetLendingMarket(address lendingMarket);\\n    event AddConvexPool(\\n        uint256 originConvexPid,\\n        address lpToken,\\n        address curveSwapAddress\\n    );\\n    event RemoveLiquidity(\\n        address lpToken,\\n        address curveSwapAddress,\\n        uint256 amount,\\n        int128 coinId\\n    );\\n    event ClaimRewardToken(uint256 pid);\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"ConvexBooster: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governance == msg.sender,\\n            \\\"ConvexBooster: caller is not the governance\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLendingMarket() {\\n        require(\\n            lendingMarket == msg.sender,\\n            \\\"ConvexBooster: caller is not the lendingMarket\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    /* \\n    The default governance user is GenerateLendingPools contract.\\n    It will be set to DAO in the future \\n    */\\n    function setGovernance(address _governance) public onlyOwner {\\n        governance = _governance;\\n\\n        emit SetGovernance(_governance);\\n    }\\n\\n    function setLendingMarket(address _v) public onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        lendingMarket = _v;\\n\\n        emit SetLendingMarket(lendingMarket);\\n    }\\n\\n    // @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() public initializer {}\\n\\n    function initialize(\\n        address _owner,\\n        address _originConvexBooster,\\n        address _convexRewardFactory,\\n        address _virtualBalanceWrapperFactory,\\n        address _rewardCrvToken,\\n        address _rewardCvxToken\\n    ) public initializer {\\n        owner = _owner;\\n        governance = _owner;\\n        convexRewardFactory = _convexRewardFactory;\\n        originConvexBooster = _originConvexBooster;\\n        virtualBalanceWrapperFactory = _virtualBalanceWrapperFactory;\\n        rewardCrvToken = _rewardCrvToken;\\n        rewardCvxToken = _rewardCvxToken;\\n        version = 1;\\n\\n        curveAddressProvider = ICurveAddressProvider(\\n            0x0000000022D53366457F9d5E68Ec105046FC4383\\n        );\\n\\n        emit Initialized(address(this));\\n    }\\n\\n    function _addConvexPool(\\n        uint256 _originConvexPid,\\n        address _lpToken,\\n        address _originCrvRewards,\\n        address _originStash,\\n        address _curveSwapAddress\\n    ) internal {\\n        address virtualBalance = IVirtualBalanceWrapperFactory(\\n            virtualBalanceWrapperFactory\\n        ).createWrapper(address(this));\\n\\n        address rewardCrvPool = IConvexRewardFactory(convexRewardFactory)\\n            .createReward(rewardCrvToken, virtualBalance, address(this));\\n\\n        address rewardCvxPool = IConvexRewardFactory(convexRewardFactory)\\n            .createReward(rewardCvxToken, virtualBalance, address(this));\\n\\n        uint256 extraRewardsLength = IOriginConvexRewardPool(_originCrvRewards)\\n            .extraRewardsLength();\\n\\n        if (extraRewardsLength > 0) {\\n            for (uint256 i = 0; i < extraRewardsLength; i++) {\\n                address extraRewardToken = IOriginConvexRewardPool(\\n                    _originCrvRewards\\n                ).extraRewards(i);\\n\\n                address extraRewardPool = IConvexRewardFactory(\\n                    convexRewardFactory\\n                ).createReward(\\n                        IOriginConvexRewardPool(extraRewardToken).rewardToken(),\\n                        virtualBalance,\\n                        address(this)\\n                    );\\n\\n                IConvexRewardPool(rewardCrvPool).addExtraReward(\\n                    extraRewardPool\\n                );\\n            }\\n        }\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                originConvexPid: _originConvexPid,\\n                curveSwapAddress: _curveSwapAddress,\\n                lpToken: _lpToken,\\n                originCrvRewards: _originCrvRewards,\\n                originStash: _originStash,\\n                virtualBalance: virtualBalance,\\n                rewardCrvPool: rewardCrvPool,\\n                rewardCvxPool: rewardCvxPool,\\n                shutdown: false\\n            })\\n        );\\n\\n        emit AddConvexPool(_originConvexPid, _lpToken, _curveSwapAddress);\\n    }\\n\\n    function addConvexPool(uint256 _originConvexPid)\\n        public\\n        override\\n        onlyGovernance\\n    {\\n        (\\n            address lpToken,\\n            ,\\n            ,\\n            address originCrvRewards,\\n            address originStash,\\n            bool shutdown\\n        ) = IOriginConvexBooster(originConvexBooster).poolInfo(\\n                _originConvexPid\\n            );\\n\\n        require(!shutdown, \\\"!shutdown\\\");\\n        require(lpToken != address(0), \\\"!lpToken\\\");\\n\\n        ICurveRegistry registry = ICurveRegistry(\\n            ICurveAddressProvider(curveAddressProvider).get_registry()\\n        );\\n\\n        address curveSwapAddress = registry.get_pool_from_lp_token(lpToken);\\n\\n        _addConvexPool(\\n            _originConvexPid,\\n            lpToken,\\n            originCrvRewards,\\n            originStash,\\n            curveSwapAddress\\n        );\\n    }\\n\\n    // Reference https://curve.readthedocs.io/ref-addresses.html?highlight=zap#deposit-zaps\\n    function addConvexPool(\\n        uint256 _originConvexPid,\\n        address _curveSwapAddress,\\n        address _curveZapAddress,\\n        address _basePoolAddress,\\n        bool _isMeta,\\n        bool _isMetaFactory\\n    ) public override onlyGovernance {\\n        require(_curveSwapAddress != address(0), \\\"!_curveSwapAddress\\\");\\n        require(_curveZapAddress != address(0), \\\"!_curveZapAddress\\\");\\n        require(_basePoolAddress != address(0), \\\"!_basePoolAddress\\\");\\n\\n        (\\n            address lpToken,\\n            ,\\n            ,\\n            address originCrvRewards,\\n            address originStash,\\n            bool shutdown\\n        ) = IOriginConvexBooster(originConvexBooster).poolInfo(\\n                _originConvexPid\\n            );\\n\\n        require(!shutdown, \\\"!shutdown\\\");\\n        require(lpToken != address(0), \\\"!lpToken\\\");\\n\\n        metaPoolInfo[lpToken] = MetaPoolInfo(\\n            _curveSwapAddress,\\n            _curveZapAddress,\\n            _basePoolAddress,\\n            _isMeta,\\n            _isMetaFactory\\n        );\\n\\n        _addConvexPool(\\n            _originConvexPid,\\n            lpToken,\\n            originCrvRewards,\\n            originStash,\\n            _curveSwapAddress\\n        );\\n\\n        emit CurveZap(lpToken, _curveZapAddress);\\n    }\\n\\n    function updateExtraRewards(uint256 _pid) public onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        (\\n            ,\\n            ,\\n            ,\\n            address originCrvRewards,\\n            ,\\n            bool shutdown\\n        ) = IOriginConvexBooster(originConvexBooster).poolInfo(\\n                pool.originConvexPid\\n            );\\n\\n        require(!shutdown, \\\"!shutdown\\\");\\n\\n        uint256 originExtraRewardsLength = IOriginConvexRewardPool(\\n            originCrvRewards\\n        ).extraRewardsLength();\\n\\n        uint256 currentExtraRewardsLength = IConvexRewardPool(\\n            pool.rewardCrvPool\\n        ).extraRewardsLength();\\n\\n        for (\\n            uint256 i = currentExtraRewardsLength;\\n            i < originExtraRewardsLength;\\n            i++\\n        ) {\\n            address extraRewardToken = IOriginConvexRewardPool(originCrvRewards)\\n                .extraRewards(i);\\n\\n            address extraRewardPool = IConvexRewardFactory(convexRewardFactory)\\n                .createReward(\\n                    IOriginConvexRewardPool(extraRewardToken).rewardToken(),\\n                    pool.virtualBalance,\\n                    address(this)\\n                );\\n\\n            IConvexRewardPool(pool.rewardCrvPool).addExtraReward(\\n                extraRewardPool\\n            );\\n\\n            emit UpdateExtraRewards(_pid, i, extraRewardPool);\\n        }\\n    }\\n\\n    function toggleShutdownPool(uint256 _pid) public onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.shutdown = !pool.shutdown;\\n\\n        emit ToggleShutdownPool(_pid, pool.shutdown);\\n    }\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) public override onlyLendingMarket nonReentrant returns (bool) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        IERC20(pool.lpToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        /* (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        ) */\\n        (, , , , , bool shutdown) = IOriginConvexBooster(originConvexBooster)\\n            .poolInfo(pool.originConvexPid);\\n\\n        require(!shutdown, \\\"!convex shutdown\\\");\\n        require(!pool.shutdown, \\\"!shutdown\\\");\\n\\n        IERC20(pool.lpToken).safeApprove(originConvexBooster, 0);\\n        IERC20(pool.lpToken).safeApprove(originConvexBooster, _amount);\\n\\n        IOriginConvexBooster(originConvexBooster).deposit(\\n            pool.originConvexPid,\\n            _amount,\\n            true\\n        );\\n\\n        IConvexRewardPool(pool.rewardCrvPool).stake(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).stake(_user);\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).stakeFor(_user, _amount);\\n\\n        emit Deposited(_user, _pid, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawFrozenTokens(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n    {\\n        require(_amount > 0, \\\"!_amount\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        frozenTokens[_pid][msg.sender] = frozenTokens[_pid][msg.sender].sub(\\n            _amount\\n        );\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(\\n            _amount,\\n            true\\n        );\\n\\n        IERC20(pool.lpToken).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function withdrawFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user,\\n        bool _frozenTokens\\n    ) public override onlyLendingMarket nonReentrant returns (bool) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (_frozenTokens) {\\n            frozenTokens[_pid][_user] = frozenTokens[_pid][_user].add(_amount);\\n        } else {\\n            IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(\\n                _amount,\\n                true\\n            );\\n\\n            IERC20(pool.lpToken).safeTransfer(_user, _amount);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(_user);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(_user);\\n        }\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(_user, _amount);\\n\\n        IConvexRewardPool(pool.rewardCrvPool).withdraw(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).withdraw(_user);\\n\\n        emit Withdrawn(_user, _pid, _amount);\\n\\n        return true;\\n    }\\n\\n    function _removeLiquidity(\\n        address _lpToken,\\n        address _curveSwapAddress,\\n        uint256 _amount,\\n        int128 _coinId\\n    ) internal {\\n        if (metaPoolInfo[_lpToken].zapAddress != address(0)) {\\n            if (metaPoolInfo[_lpToken].isMetaFactory) {\\n                ICurveSwapV2(metaPoolInfo[_lpToken].zapAddress)\\n                    .remove_liquidity_one_coin(_lpToken, _amount, _coinId, 0);\\n\\n                emit RemoveLiquidity(\\n                    _lpToken,\\n                    _curveSwapAddress,\\n                    _amount,\\n                    _coinId\\n                );\\n\\n                return;\\n            }\\n        }\\n\\n        ICurveSwapV2(_curveSwapAddress).remove_liquidity_one_coin(\\n            _amount,\\n            _coinId,\\n            0\\n        );\\n\\n        emit RemoveLiquidity(_lpToken, _curveSwapAddress, _amount, _coinId);\\n    }\\n\\n    function liquidate(\\n        uint256 _pid,\\n        int128 _coinId,\\n        address _user,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyLendingMarket\\n        nonReentrant\\n        returns (address, uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(\\n            _amount,\\n            true\\n        );\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(_user, _amount);\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(_user);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(_user);\\n        }\\n\\n        IConvexRewardPool(pool.rewardCrvPool).withdraw(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).withdraw(_user);\\n\\n        IERC20(pool.lpToken).safeApprove(pool.curveSwapAddress, 0);\\n        IERC20(pool.lpToken).safeApprove(pool.curveSwapAddress, _amount);\\n\\n        address underlyToken;\\n\\n        if (metaPoolInfo[pool.lpToken].zapAddress != address(0)) {\\n            if (\\n                metaPoolInfo[pool.lpToken].swapAddress ==\\n                metaPoolInfo[pool.lpToken].basePoolAddress ||\\n                (!metaPoolInfo[pool.lpToken].isMeta &&\\n                    !metaPoolInfo[pool.lpToken].isMetaFactory) ||\\n                _coinId == 0\\n            ) {\\n                underlyToken = _coins(pool.curveSwapAddress, _coinId);\\n            } else {\\n                underlyToken = _coins(\\n                    metaPoolInfo[pool.lpToken].basePoolAddress,\\n                    _coinId - 1\\n                );\\n            }\\n        } else {\\n            underlyToken = _coins(pool.curveSwapAddress, _coinId);\\n        }\\n\\n        _removeLiquidity(pool.lpToken, pool.curveSwapAddress, _amount, _coinId);\\n\\n        if (underlyToken == ZERO_ADDRESS) {\\n            uint256 totalAmount = address(this).balance;\\n\\n            msg.sender.sendValue(totalAmount);\\n\\n            return (ZERO_ADDRESS, totalAmount);\\n        } else {\\n            uint256 totalAmount = IERC20(underlyToken).balanceOf(address(this));\\n\\n            IERC20(underlyToken).safeTransfer(msg.sender, totalAmount);\\n\\n            return (underlyToken, totalAmount);\\n        }\\n    }\\n\\n    function getRewards(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(msg.sender) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(msg.sender);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(msg.sender) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(msg.sender);\\n        }\\n    }\\n\\n    function claimRewardToken(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).getReward(\\n            address(this),\\n            true\\n        );\\n\\n        address rewardUnderlyToken = IOriginConvexRewardPool(\\n            pool.originCrvRewards\\n        ).rewardToken();\\n        uint256 crvBalance = IERC20(rewardUnderlyToken).balanceOf(\\n            address(this)\\n        );\\n\\n        if (crvBalance > 0) {\\n            IERC20(rewardUnderlyToken).safeTransfer(\\n                pool.rewardCrvPool,\\n                crvBalance\\n            );\\n\\n            IConvexRewardPool(pool.rewardCrvPool).notifyRewardAmount(\\n                crvBalance\\n            );\\n        }\\n\\n        uint256 extraRewardsLength = IConvexRewardPool(pool.rewardCrvPool)\\n            .extraRewardsLength();\\n\\n        for (uint256 i = 0; i < extraRewardsLength; i++) {\\n            address currentExtraReward = IConvexRewardPool(pool.rewardCrvPool)\\n                .extraRewards(i);\\n            address originExtraRewardToken = IOriginConvexRewardPool(\\n                pool.originCrvRewards\\n            ).extraRewards(i);\\n            address extraRewardUnderlyToken = IOriginConvexVirtualBalanceRewardPool(\\n                    originExtraRewardToken\\n                ).rewardToken();\\n            IOriginConvexVirtualBalanceRewardPool(originExtraRewardToken)\\n                .getReward(address(this));\\n            uint256 extraBalance = IERC20(extraRewardUnderlyToken).balanceOf(\\n                address(this)\\n            );\\n            if (extraBalance > 0) {\\n                IERC20(extraRewardUnderlyToken).safeTransfer(\\n                    currentExtraReward,\\n                    extraBalance\\n                );\\n                IConvexRewardPool(currentExtraReward).notifyRewardAmount(\\n                    extraBalance\\n                );\\n            }\\n        }\\n\\n        /* cvx */\\n        uint256 cvxBal = IERC20(rewardCvxToken).balanceOf(address(this));\\n\\n        if (cvxBal > 0) {\\n            IERC20(rewardCvxToken).safeTransfer(pool.rewardCvxPool, cvxBal);\\n\\n            IConvexRewardPool(pool.rewardCvxPool).notifyRewardAmount(cvxBal);\\n        }\\n\\n        emit ClaimRewardToken(_pid);\\n    }\\n\\n    function claimAllRewardToken() public {\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            claimRewardToken(i);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    /* view functions */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getPoolToken(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return pool.lpToken;\\n    }\\n\\n    function getPoolZapAddress(address _lpToken)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return metaPoolInfo[_lpToken].zapAddress;\\n    }\\n\\n    function _coins(address _swapAddress, int128 _coinId)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        // curve v1 base pool\\n        address susd = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\\n        address sbtc = 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;\\n        address ren = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\\n\\n        if (\\n            _swapAddress == susd || _swapAddress == sbtc || _swapAddress == ren\\n        ) {\\n            return ICurveSwapV2(_swapAddress).coins(_coinId);\\n        }\\n\\n        return ICurveSwapV2(_swapAddress).coins(uint256(_coinId));\\n    }\\n\\n    function calculateTokenAmount(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) external view override returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (metaPoolInfo[pool.lpToken].zapAddress != address(0)) {\\n            if (metaPoolInfo[pool.lpToken].isMetaFactory) {\\n                return\\n                    ICurveSwapV2(metaPoolInfo[pool.lpToken].zapAddress)\\n                        .calc_withdraw_one_coin(\\n                            pool.curveSwapAddress,\\n                            _tokens,\\n                            _curveCoinId\\n                        );\\n            }\\n\\n            return\\n                ICurveSwapV2(metaPoolInfo[pool.lpToken].zapAddress)\\n                    .calc_withdraw_one_coin(_tokens, _curveCoinId);\\n        }\\n\\n        return\\n            ICurveSwapV2(pool.curveSwapAddress).calc_withdraw_one_coin(\\n                _tokens,\\n                _curveCoinId\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendFlareToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract LendFlareToken is Initializable, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    uint256 public constant YEAR = 1 days * 365;\\n    uint256 public constant INITIAL_RATE = (274815283 * 10**18) / YEAR; // leading to 43% premine\\n    uint256 public constant RATE_REDUCTION_TIME = YEAR;\\n    uint256 public constant RATE_REDUCTION_COEFFICIENT = 1189207115002721024; // 2 ** (1/4) * 1e18\\n    uint256 public constant RATE_DENOMINATOR = 10**18;\\n\\n    uint256 public startEpochTime;\\n    uint256 public startEpochSupply;\\n    uint256 public miningEpoch;\\n    uint256 public rate;\\n    uint256 public version;\\n\\n    address public multiSigUser;\\n    address public owner;\\n    address public minter;\\n    address public liquidityTransformer;\\n\\n    bool public liquidity;\\n\\n    event UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n    event SetMinter(address minter);\\n    event SetOwner(address owner);\\n    event LiquidityTransformer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    // @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() public initializer {}\\n\\n    function initialize(address _owner, address _multiSigUser)\\n        public\\n        initializer\\n    {\\n        _name = \\\"LendFlare DAO Token\\\";\\n        _symbol = \\\"LFT\\\";\\n        _decimals = 18;\\n        version = 1;\\n\\n        owner = _owner;\\n        multiSigUser = _multiSigUser;\\n\\n        startEpochTime = block.timestamp.sub(RATE_REDUCTION_TIME);\\n\\n        miningEpoch = 0;\\n        rate = 0;\\n        startEpochSupply = 0;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"LendFlareToken: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidityTransformer() {\\n        require(\\n            liquidityTransformer == msg.sender,\\n            \\\"LendFlareToken: caller is not the liquidityTransformer\\\"\\n        );\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    function setLiquidityTransformer(address _v) public onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n        require(liquidityTransformer == address(0), \\\"!liquidityTransformer\\\");\\n\\n        liquidityTransformer = _v;\\n\\n        uint256 supply = 909090909 * 10**18;\\n\\n        _balances[liquidityTransformer] = supply;\\n        _totalSupply = _totalSupply.add(supply);\\n\\n        startEpochSupply = startEpochSupply.add(supply);\\n\\n        emit LiquidityTransformer(address(0), multiSigUser, supply);\\n    }\\n\\n    function setLiquidityFinish() external onlyLiquidityTransformer {\\n        require(!liquidity, \\\"!liquidity\\\");\\n\\n        uint256 officialTeam = 90909090 * 10**18;\\n        uint256 merkleAirdrop = 30303030 * 10**18;\\n        uint256 earlyLiquidityReward = 151515151 * 10**18;\\n        uint256 community = 121212121 * 10**18;\\n\\n        uint256 supply = officialTeam\\n            .add(merkleAirdrop)\\n            .add(earlyLiquidityReward)\\n            .add(community);\\n\\n        _balances[multiSigUser] = supply;\\n        _totalSupply = _totalSupply.add(supply);\\n\\n        startEpochSupply = startEpochSupply.add(supply);\\n\\n        liquidity = true;\\n\\n        emit Transfer(address(0), multiSigUser, officialTeam);\\n        emit Transfer(address(0), multiSigUser, merkleAirdrop);\\n        emit Transfer(address(0), multiSigUser, earlyLiquidityReward);\\n        emit Transfer(address(0), multiSigUser, community);\\n    }\\n\\n    function _updateMiningParameters() internal {\\n        startEpochTime = startEpochTime.add(RATE_REDUCTION_TIME);\\n\\n        miningEpoch++;\\n\\n        if (rate == 0) {\\n            rate = INITIAL_RATE;\\n        } else {\\n            startEpochSupply = startEpochSupply.add(\\n                rate.mul(RATE_REDUCTION_TIME)\\n            );\\n\\n            rate = rate.mul(RATE_DENOMINATOR).div(RATE_REDUCTION_COEFFICIENT);\\n        }\\n\\n        emit UpdateMiningParameters(block.timestamp, rate, startEpochSupply);\\n    }\\n\\n    function updateMiningParameters() external {\\n        require(\\n            block.timestamp >= startEpochTime.add(RATE_REDUCTION_TIME),\\n            \\\"too soon!\\\"\\n        );\\n\\n        _updateMiningParameters();\\n    }\\n\\n    function startEpochTimeWrite() external returns (uint256) {\\n        if (block.timestamp >= startEpochTime.add(RATE_REDUCTION_TIME)) {\\n            _updateMiningParameters();\\n        }\\n\\n        return startEpochTime;\\n    }\\n\\n    function futureEpochTimeWrite() external returns (uint256) {\\n        if (block.timestamp >= startEpochTime.add(RATE_REDUCTION_TIME)) {\\n            _updateMiningParameters();\\n        }\\n\\n        return startEpochTime.add(RATE_REDUCTION_TIME);\\n    }\\n\\n    function availableSupply() public view returns (uint256) {\\n        return\\n            startEpochSupply.add(block.timestamp.sub(startEpochTime).mul(rate));\\n    }\\n\\n    function setMinter(address _minter) public onlyOwner {\\n        require(_minter != address(0), \\\"!_minter\\\");\\n\\n        minter = _minter;\\n\\n        emit SetMinter(_minter);\\n    }\\n\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address user, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[user][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(\\n                amount,\\n                \\\"transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(\\n                subtractedValue,\\n                \\\"decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function mint(address account, uint256 amount) public returns (bool) {\\n        require(msg.sender == minter, \\\"!minter\\\");\\n        require(account != address(0), \\\"mint to the zero address\\\");\\n\\n        if (!liquidity) return false;\\n\\n        if (block.timestamp >= startEpochTime.add(RATE_REDUCTION_TIME)) {\\n            _updateMiningParameters();\\n        }\\n\\n        _totalSupply = _totalSupply.add(amount);\\n\\n        require(\\n            _totalSupply <= availableSupply(),\\n            \\\"exceeds allowable mint amount\\\"\\n        );\\n\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function burn(uint256 amount) public returns (bool) {\\n        _balances[msg.sender] = _balances[msg.sender].sub(\\n            amount,\\n            \\\"burn amount exceeds balance\\\"\\n        );\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address user,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(user != address(0), \\\"approve from the zero address\\\");\\n        require(spender != address(0), \\\"approve to the zero address\\\");\\n\\n        _allowances[user][spender] = amount;\\n        emit Approval(user, spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Timelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Timelock {\\n    using SafeMath for uint256;\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint256 indexed newDelay);\\n    event CancelTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n    event ExecuteTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n    event QueueTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n\\n    uint256 public constant GRACE_PERIOD = 14 days;\\n    uint256 public constant MINIMUM_DELAY = 1 days;\\n    uint256 public constant MAXIMUM_DELAY = 30 days;\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    uint256 public delay;\\n\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    constructor(address admin_, uint256 delay_) public {\\n        admin = admin_;\\n\\n        _setDelay(delay_);\\n    }\\n\\n    function _setDelay(uint256 delay_) internal {\\n        require(\\n            delay_ >= MINIMUM_DELAY,\\n            \\\"Timelock::_setDelay: Delay must exceed minimum delay.\\\"\\n        );\\n        require(\\n            delay_ <= MAXIMUM_DELAY,\\n            \\\"Timelock::_setDelay: Delay must not exceed maximum delay.\\\"\\n        );\\n\\n        delay = delay_;\\n\\n        emit NewDelay(delay);\\n    }\\n\\n    function setDelay(uint256 delay_) public {\\n        require(\\n            msg.sender == address(this),\\n            \\\"Timelock::setDelay: Call must come from Timelock.\\\"\\n        );\\n\\n        _setDelay(delay_);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(\\n            msg.sender == pendingAdmin,\\n            \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\"\\n        );\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address pendingAdmin_) public {\\n        require(\\n            msg.sender == address(this),\\n            \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\"\\n        );\\n        pendingAdmin = pendingAdmin_;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public returns (bytes32) {\\n        require(\\n            msg.sender == admin,\\n            \\\"Timelock::queueTransaction: Call must come from admin.\\\"\\n        );\\n        require(\\n            eta >= getBlockTimestamp().add(delay),\\n            \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\"\\n        );\\n\\n        bytes32 txHash = keccak256(\\n            abi.encode(target, value, signature, data, eta)\\n        );\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public {\\n        require(\\n            msg.sender == admin,\\n            \\\"Timelock::cancelTransaction: Call must come from admin.\\\"\\n        );\\n\\n        bytes32 txHash = keccak256(\\n            abi.encode(target, value, signature, data, eta)\\n        );\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function _getRevertMsg(bytes memory _returnData)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public payable returns (bytes memory) {\\n        require(\\n            msg.sender == admin,\\n            \\\"Timelock::executeTransaction: Call must come from admin.\\\"\\n        );\\n\\n        bytes32 txHash = keccak256(\\n            abi.encode(target, value, signature, data, eta)\\n        );\\n        require(\\n            queuedTransactions[txHash],\\n            \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\"\\n        );\\n        require(\\n            getBlockTimestamp() >= eta,\\n            \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\"\\n        );\\n        require(\\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\\n            \\\"Timelock::executeTransaction: Transaction is stale.\\\"\\n        );\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(\\n                bytes4(keccak256(bytes(signature))),\\n                data\\n            );\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value: value}(\\n            callData\\n        );\\n        require(success, _getRevertMsg(returnData));\\n        // require(\\n        //     success,\\n        //     \\\"Timelock::executeTransaction: Transaction execution reverted.\\\"\\n        // );\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint256) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendingSponsor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract LendingSponsor is ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n\\n    enum LendingInfoState {\\n        NONE,\\n        CLOSED\\n    }\\n\\n    struct LendingInfo {\\n        address user;\\n        uint256 amount;\\n        LendingInfoState state;\\n    }\\n\\n    address public lendingMarket;\\n    uint256 public totalSupply;\\n    address public owner;\\n\\n    mapping(bytes32 => LendingInfo) public lendingInfos;\\n\\n    event AddSponsor(bytes32 sponsor, uint256 amount);\\n    event PayFee(bytes32 sponsor, address user, uint256 sponsorAmount);\\n\\n    modifier onlyLendingMarket() {\\n        require(\\n            lendingMarket == msg.sender,\\n            \\\"LendingSponsor: caller is not the lendingMarket\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"LendingSponsor: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function setLendingMarket(address _v) external onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        lendingMarket = _v;\\n\\n        owner = address(0);\\n    }\\n\\n    function payFee(bytes32 _lendingId, address payable _user)\\n        public\\n        onlyLendingMarket\\n        nonReentrant\\n    {\\n        LendingInfo storage lendingInfo = lendingInfos[_lendingId];\\n\\n        if (lendingInfo.state == LendingInfoState.NONE) {\\n            lendingInfo.state = LendingInfoState.CLOSED;\\n\\n            _user.sendValue(lendingInfo.amount);\\n\\n            totalSupply = totalSupply.sub(lendingInfo.amount);\\n\\n            emit PayFee(_lendingId, _user, lendingInfo.amount);\\n        }\\n    }\\n\\n    function addSponsor(bytes32 _lendingId, address _user)\\n        public\\n        payable\\n        onlyLendingMarket\\n        nonReentrant\\n    {\\n        lendingInfos[_lendingId] = LendingInfo({\\n            user: _user,\\n            amount: msg.value,\\n            state: LendingInfoState.NONE\\n        });\\n\\n        totalSupply = totalSupply.add(msg.value);\\n\\n        emit AddSponsor(_lendingId, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendFlareProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract LendFlareProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address logic,\\n        address admin,\\n        bytes memory data\\n    ) public TransparentUpgradeableProxy(logic, admin, data) {}\\n}\\n\"\r\n    },\r\n    \"contracts/LendFlareTokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface ILiquidityGauge {\\n    function updateReward(address _for) external;\\n\\n    function totalAccrued(address _for) external view returns (uint256);\\n}\\n\\ninterface ILendFlareToken {\\n    function mint(address _for, uint256 amount) external;\\n}\\n\\ncontract LendFlareTokenMinter is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address public token;\\n    address public supplyPoolExtraRewardFactory;\\n    uint256 public launchTime;\\n\\n    mapping(address => mapping(address => uint256)) public minted; // user -> gauge -> value\\n\\n    event Minted(address user, address gauge, uint256 amount);\\n\\n    constructor(\\n        address _token,\\n        address _supplyPoolExtraRewardFactory,\\n        uint256 _launchTime\\n    ) public {\\n        require(_launchTime > block.timestamp, \\\"!_launchTime\\\");\\n        launchTime = _launchTime;\\n        token = _token;\\n        supplyPoolExtraRewardFactory = _supplyPoolExtraRewardFactory;\\n    }\\n\\n    function _mintFor(address _gauge, address _for) internal {\\n        if (block.timestamp >= launchTime) {\\n            ILiquidityGauge(_gauge).updateReward(_for);\\n\\n            uint256 totalMint = ILiquidityGauge(_gauge).totalAccrued(_for);\\n            uint256 toMint = totalMint.sub(minted[_for][_gauge]);\\n\\n            if (toMint > 0) {\\n                ILendFlareToken(token).mint(_for, toMint);\\n                minted[_for][_gauge] = totalMint;\\n\\n                emit Minted(_for, _gauge, totalMint);\\n            }\\n        }\\n    }\\n\\n    function mintFor(address _gauge, address _for) public nonReentrant {\\n        require(\\n            msg.sender == supplyPoolExtraRewardFactory,\\n            \\\"LendFlareTokenMinter: !authorized mintFor\\\"\\n        );\\n\\n        _mintFor(_gauge, _for);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendFlareGaugeModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LendFlareGaugeModel {\\n    using SafeMath for uint256;\\n\\n    struct GaugeModel {\\n        address gauge;\\n        uint256 weight;\\n        bool shutdown;\\n    }\\n\\n    address[] public gauges;\\n    address public owner;\\n    address public supplyExtraReward;\\n\\n    mapping(address => GaugeModel) public gaugeWeights;\\n\\n    event AddGaguge(address indexed gauge, uint256 weight);\\n    event ToggleGauge(address indexed gauge, bool enabled);\\n    event UpdateGaugeWeight(address indexed gauge, uint256 weight);\\n    event SetOwner(address owner);\\n\\n    modifier onlyOwner() {\\n        require(\\n            owner == msg.sender,\\n            \\\"LendFlareGaugeModel: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function setSupplyExtraReward(address _v) public onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        supplyExtraReward = _v;\\n    }\\n\\n    // default = 100000000000000000000 weight(%) = 100000000000000000000 * 1e18/ total * 100\\n    function addGauge(address _gauge, uint256 _weight) public {\\n        require(\\n            msg.sender == supplyExtraReward,\\n            \\\"LendFlareGaugeModel: !authorized addGauge\\\"\\n        );\\n\\n        gauges.push(_gauge);\\n\\n        gaugeWeights[_gauge] = GaugeModel({\\n            gauge: _gauge,\\n            weight: _weight,\\n            shutdown: false\\n        });\\n    }\\n\\n    function updateGaugeWeight(address _gauge, uint256 _newWeight)\\n        public\\n        onlyOwner\\n    {\\n        require(_gauge != address(0), \\\"LendFlareGaugeModel:: !_gauge\\\");\\n        require(\\n            gaugeWeights[_gauge].gauge == _gauge,\\n            \\\"LendFlareGaugeModel: !found\\\"\\n        );\\n\\n        gaugeWeights[_gauge].weight = _newWeight;\\n\\n        emit UpdateGaugeWeight(_gauge, gaugeWeights[_gauge].weight);\\n    }\\n\\n    function toggleGauge(address _gauge, bool _state) public {\\n        require(\\n            msg.sender == supplyExtraReward,\\n            \\\"LendFlareGaugeModel: !authorized toggleGauge\\\"\\n        );\\n\\n        gaugeWeights[_gauge].shutdown = _state;\\n\\n        emit ToggleGauge(_gauge, _state);\\n    }\\n\\n    function getGaugeWeightShare(address _gauge) public view returns (uint256) {\\n        uint256 totalWeight;\\n\\n        for (uint256 i = 0; i < gauges.length; i++) {\\n            if (!gaugeWeights[gauges[i]].shutdown) {\\n                totalWeight = totalWeight.add(gaugeWeights[gauges[i]].weight);\\n            }\\n        }\\n\\n        return gaugeWeights[_gauge].weight.mul(1e18).div(totalWeight);\\n    }\\n\\n    function gaugesLength() public view returns (uint256) {\\n        return gauges.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/VirtualBalanceWrapperFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract VirtualBalanceWrapper {\\n    using SafeMath for uint256;\\n\\n    address public owner;\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(address _owner) public {\\n        owner = _owner;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address _for) public view returns (uint256) {\\n        return _balances[_for];\\n    }\\n\\n    function stakeFor(address _for, uint256 _amount) public returns (bool) {\\n        require(\\n            msg.sender == owner,\\n            \\\"VirtualBalanceWrapper: !authorized stakeFor\\\"\\n        );\\n        require(_amount > 0, \\\"VirtualBalanceWrapper: !_amount\\\");\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n        _balances[_for] = _balances[_for].add(_amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawFor(address _for, uint256 _amount) public returns (bool) {\\n        require(\\n            msg.sender == owner,\\n            \\\"VirtualBalanceWrapper: !authorized withdrawFor\\\"\\n        );\\n        require(_amount > 0, \\\"VirtualBalanceWrapper: !_amount\\\");\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n        _balances[_for] = _balances[_for].sub(_amount);\\n\\n        return true;\\n    }\\n}\\n\\ncontract VirtualBalanceWrapperFactory {\\n    event NewOwner(address indexed sender, address operator);\\n    event RemoveOwner(address indexed sender, address operator);\\n\\n    mapping(address => bool) private owners;\\n\\n    modifier onlyOwners() {\\n        require(isOwner(msg.sender), \\\"vbw: caller is not an owner onlyOwners\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        owners[msg.sender] = true;\\n    }\\n\\n    function addOwner(address _newOwner) public onlyOwners {\\n        require(!isOwner(_newOwner), \\\"vbw: address is already owner addOwner\\\");\\n\\n        owners[_newOwner] = true;\\n\\n        emit NewOwner(msg.sender, _newOwner);\\n    }\\n\\n    function addOwners(address[] calldata _newOwners) external onlyOwners {\\n        for (uint256 i = 0; i < _newOwners.length; i++) {\\n            addOwner(_newOwners[i]);\\n        }\\n    }\\n\\n    function removeOwner(address _owner) external onlyOwners {\\n        require(isOwner(_owner), \\\"vbw: address is not owner removeOwner\\\");\\n\\n        owners[_owner] = false;\\n\\n        emit RemoveOwner(msg.sender, _owner);\\n    }\\n\\n    function isOwner(address _owner) public view returns (bool) {\\n        return owners[_owner];\\n    }\\n\\n    function createWrapper(address _owner) public onlyOwners returns (address) {\\n        return address(new VirtualBalanceWrapper(_owner));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MerkleAirdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract MerkleAirdrop {\\n    using SafeERC20 for IERC20;\\n\\n    struct Layer {\\n        address token;\\n        uint96 startTime;\\n        uint96 endTime;\\n        mapping(uint256 => uint256) claimed;\\n    }\\n\\n    mapping(bytes32 => Layer) public layers;\\n\\n    address public owner;\\n\\n    event Claimed(address account, address token, uint256 amount);\\n    event SetOwner(address owner);\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function newlayer(\\n        bytes32 merkleRoot,\\n        address token,\\n        uint96 startTime,\\n        uint96 endTime\\n    ) external onlyOwner {\\n        require(\\n            layers[merkleRoot].token == address(0),\\n            \\\"merkleRoot already register\\\"\\n        );\\n        require(merkleRoot != bytes32(0), \\\"empty root\\\");\\n        require(token != address(0), \\\"empty token\\\");\\n        require(startTime < endTime, \\\"wrong dates\\\");\\n\\n        Layer storage _layer = layers[merkleRoot];\\n        _layer.token = token;\\n        _layer.startTime = startTime;\\n        _layer.endTime = endTime;\\n    }\\n\\n    function isClaimed(bytes32 merkleRoot, uint256 index)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        uint256 claimedWord = layers[merkleRoot].claimed[claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n\\n        return claimedWord & mask == mask;\\n    }\\n\\n    function _setClaimed(bytes32 merkleRoot, uint256 index) private {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        layers[merkleRoot].claimed[claimedWordIndex] =\\n            layers[merkleRoot].claimed[claimedWordIndex] |\\n            (1 << claimedBitIndex);\\n    }\\n\\n    function claim(\\n        uint256 index,\\n        address account,\\n        uint256 amount,\\n        bytes32[] calldata merkleProofs\\n    ) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(index, account, amount));\\n        bytes32 merkleRoot = processProof(merkleProofs, leaf);\\n\\n        require(layers[merkleRoot].token != address(0), \\\"empty token\\\");\\n        require(\\n            layers[merkleRoot].startTime < block.timestamp &&\\n                layers[merkleRoot].endTime >= block.timestamp,\\n            \\\"out of time\\\"\\n        );\\n\\n        require(!isClaimed(merkleRoot, index), \\\"already claimed\\\");\\n\\n        _setClaimed(merkleRoot, index);\\n\\n        IERC20(layers[merkleRoot].token).safeTransfer(account, amount);\\n\\n        emit Claimed(account, address(layers[merkleRoot].token), amount);\\n    }\\n\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) public pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    function processProof(bytes32[] memory proof, bytes32 leaf)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n        }\\n\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LiquidityTransformer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\\ninterface ILendFlareToken is IERC20 {\\n    function setLiquidityFinish() external;\\n}\\n\\ncontract LiquidityTransformer is ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    ILendFlareToken public lendflareToken;\\n    address public uniswapPair;\\n\\n    IUniswapV2Router02 public constant uniswapRouter =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    address payable teamAddress;\\n\\n    uint256 public constant FEE_DENOMINATOR = 10;\\n    uint256 public constant liquifyTokens = 909090909 * 1e18;\\n    uint256 public investmentTime;\\n    uint256 public minInvest;\\n    uint256 public launchTime;\\n\\n    struct Globals {\\n        uint256 totalUsers;\\n        uint256 totalBuys;\\n        uint256 transferredUsers;\\n        uint256 totalWeiContributed;\\n        bool liquidity;\\n        uint256 endTimeAt;\\n    }\\n\\n    Globals public globals;\\n\\n    mapping(address => uint256) public investorBalances;\\n    mapping(address => uint256[2]) investorHistory;\\n\\n    event UniSwapResult(\\n        uint256 amountToken,\\n        uint256 amountETH,\\n        uint256 liquidity,\\n        uint256 endTimeAt\\n    );\\n\\n    modifier afterUniswapTransfer() {\\n        require(globals.liquidity == true, \\\"Forward liquidity first\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _lendflareToken,\\n        address payable _teamAddress,\\n        uint256 _launchTime\\n    ) public {\\n        require(_launchTime > block.timestamp, \\\"!_launchTime\\\");\\n        launchTime = _launchTime;\\n        lendflareToken = ILendFlareToken(_lendflareToken);\\n        teamAddress = _teamAddress;\\n\\n        minInvest = 0.1 ether;\\n        investmentTime = 7 days;\\n\\n        \\n    }\\n\\n    function createPair() external {\\n        require(address(uniswapPair) == address(0), \\\"!uniswapPair\\\");\\n\\n        uniswapPair = address(\\n            IUniswapV2Factory(factory()).createPair(\\n                WETH(),\\n                address(lendflareToken)\\n            )\\n        );\\n    }\\n\\n    receive() external payable {\\n        require(\\n            msg.sender == address(uniswapRouter) || msg.sender == teamAddress,\\n            \\\"Direct deposits disabled\\\"\\n        );\\n    }\\n\\n    function reserve() external payable {\\n        _reserve(msg.sender, msg.value);\\n    }\\n\\n    function reserveWithToken(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n    {\\n        IERC20 token = IERC20(_tokenAddress);\\n\\n        token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        token.approve(address(uniswapRouter), _tokenAmount);\\n\\n        address[] memory _path = preparePath(_tokenAddress);\\n\\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForETH(\\n            _tokenAmount,\\n            minInvest,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        _reserve(msg.sender, amounts[1]);\\n    }\\n\\n    function _reserve(address _senderAddress, uint256 _senderValue) internal {\\n        require(block.timestamp >= launchTime, \\\"Not started\\\");\\n        require(\\n            block.timestamp <= launchTime.add(investmentTime),\\n            \\\"IDO has ended\\\"\\n        );\\n        require(globals.liquidity == false, \\\"!globals.liquidity\\\");\\n        require(_senderValue >= minInvest, \\\"Investment below minimum\\\");\\n\\n        if (investorBalances[_senderAddress] == 0) {\\n            globals.totalUsers++;\\n        }\\n\\n        investorBalances[_senderAddress] = investorBalances[_senderAddress].add(\\n            _senderValue\\n        );\\n\\n        globals.totalWeiContributed = globals.totalWeiContributed.add(\\n            _senderValue\\n        );\\n        globals.totalBuys++;\\n    }\\n\\n    function forwardLiquidity() external nonReentrant {\\n        require(msg.sender == tx.origin, \\\"!EOA\\\");\\n        require(globals.liquidity == false, \\\"!globals.liquidity\\\");\\n        require(\\n            block.timestamp > launchTime.add(investmentTime),\\n            \\\"Not over yet\\\"\\n        );\\n\\n        uint256 _etherFee = globals.totalWeiContributed.div(FEE_DENOMINATOR);\\n        uint256 _balance = globals.totalWeiContributed.sub(_etherFee);\\n\\n        teamAddress.sendValue(_etherFee);\\n\\n        uint256 half = liquifyTokens.div(2);\\n        uint256 _lendflareTokenFee = half.div(FEE_DENOMINATOR);\\n\\n        IERC20(lendflareToken).safeTransfer(teamAddress, _lendflareTokenFee);\\n\\n        lendflareToken.approve(\\n            address(uniswapRouter),\\n            half.sub(_lendflareTokenFee)\\n        );\\n\\n        (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        ) = uniswapRouter.addLiquidityETH{value: _balance}(\\n                address(lendflareToken),\\n                half.sub(_lendflareTokenFee),\\n                0,\\n                0,\\n                address(0x0),\\n                block.timestamp\\n            );\\n\\n        globals.liquidity = true;\\n        globals.endTimeAt = block.timestamp;\\n\\n        lendflareToken.setLiquidityFinish();\\n\\n        emit UniSwapResult(\\n            amountToken,\\n            amountETH,\\n            liquidity,\\n            globals.endTimeAt\\n        );\\n    }\\n\\n    function getMyTokens() external afterUniswapTransfer nonReentrant {\\n        require(globals.liquidity, \\\"!globals.liquidity\\\");\\n        require(investorBalances[msg.sender] > 0, \\\"!balance\\\");\\n\\n        uint256 myTokens = checkMyTokens(msg.sender);\\n\\n        investorHistory[msg.sender][0] = investorBalances[msg.sender];\\n        investorHistory[msg.sender][1] = myTokens;\\n        investorBalances[msg.sender] = 0;\\n\\n        IERC20(lendflareToken).safeTransfer(msg.sender, myTokens);\\n\\n        globals.transferredUsers++;\\n\\n        if (globals.transferredUsers == globals.totalUsers) {\\n            uint256 surplusBalance = IERC20(lendflareToken).balanceOf(\\n                address(this)\\n            );\\n\\n            if (surplusBalance > 0) {\\n                IERC20(lendflareToken).safeTransfer(\\n                    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\\n                    surplusBalance\\n                );\\n            }\\n        }\\n    }\\n\\n    /* view functions */\\n    function WETH() public pure returns (address) {\\n        return IUniswapV2Router02(uniswapRouter).WETH();\\n    }\\n\\n    function checkMyTokens(address _sender) public view returns (uint256) {\\n        if (\\n            globals.totalWeiContributed == 0 || investorBalances[_sender] == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 half = liquifyTokens.div(2);\\n        uint256 otherHalf = liquifyTokens.sub(half);\\n        uint256 percent = investorBalances[_sender].mul(100e18).div(\\n            globals.totalWeiContributed\\n        );\\n        uint256 myTokens = otherHalf.mul(percent).div(100e18);\\n\\n        return myTokens;\\n    }\\n\\n    function factory() public pure returns (address) {\\n        return IUniswapV2Router02(uniswapRouter).factory();\\n    }\\n\\n    function getInvestorHistory(address _sender)\\n        public\\n        view\\n        returns (uint256[2] memory)\\n    {\\n        return investorHistory[_sender];\\n    }\\n\\n    function preparePath(address _tokenAddress)\\n        internal\\n        pure\\n        returns (address[] memory _path)\\n    {\\n        _path = new address[](2);\\n        _path[0] = _tokenAddress;\\n        _path[1] = WETH();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendFlareTokenLockerFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract LendFlareTokenLocker is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public owner;\\n    address public token;\\n    uint256 public start_time;\\n    uint256 public end_time;\\n\\n    mapping(address => uint256) public initial_locked;\\n    mapping(address => uint256) public total_claimed;\\n    mapping(address => uint256) public disabled_at;\\n\\n    uint256 public initial_locked_supply;\\n    uint256 public unallocated_supply;\\n\\n    event Fund(address indexed recipient, uint256 amount);\\n    event Claim(address indexed recipient, uint256 amount);\\n    event ToggleDisable(address recipient, bool disabled);\\n    event SetOwner(address owner);\\n\\n    constructor(\\n        address _owner,\\n        address _token,\\n        uint256 _start_time,\\n        uint256 _end_time\\n    ) public {\\n        require(\\n            _start_time >= block.timestamp,\\n            \\\"_start_time >= block.timestamp\\\"\\n        );\\n        require(_end_time > _start_time, \\\"_end_time > _start_time\\\");\\n\\n        owner = _owner;\\n        token = _token;\\n        start_time = _start_time;\\n        end_time = _end_time;\\n    }\\n\\n    function setOwner(address _owner) external {\\n        require(\\n            msg.sender == owner,\\n            \\\"LendFlareTokenLocker: !authorized setOwner\\\"\\n        );\\n\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    function addTokens(uint256 _amount) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"LendFlareTokenLocker: !authorized addTokens\\\"\\n        );\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\\n        unallocated_supply += _amount;\\n    }\\n\\n    function fund(address[] memory _recipients, uint256[] memory _amounts)\\n        public\\n    {\\n        require(msg.sender == owner, \\\"LendFlareTokenLocker: !authorized fund\\\");\\n        require(\\n            _recipients.length == _amounts.length,\\n            \\\"_recipients != _amounts\\\"\\n        );\\n\\n        uint256 _total_amount;\\n\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            uint256 amount = _amounts[i];\\n            address recipient = _recipients[i];\\n\\n            if (recipient == address(0)) {\\n                break;\\n            }\\n\\n            _total_amount += amount;\\n\\n            initial_locked[recipient] += amount;\\n            emit Fund(recipient, amount);\\n        }\\n\\n        initial_locked_supply += _total_amount;\\n        unallocated_supply -= _total_amount;\\n    }\\n\\n    function toggleDisable(address _recipient) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"LendFlareTokenLocker: !authorized toggleDisable\\\"\\n        );\\n\\n        bool is_enabled = disabled_at[_recipient] == 0;\\n\\n        if (is_enabled) {\\n            disabled_at[_recipient] = block.timestamp;\\n        } else {\\n            disabled_at[_recipient] = 0;\\n        }\\n\\n        emit ToggleDisable(_recipient, is_enabled);\\n    }\\n\\n    function claim() public nonReentrant {\\n        address recipient = msg.sender;\\n        uint256 t = disabled_at[recipient];\\n\\n        if (t == 0) {\\n            t = block.timestamp;\\n        }\\n\\n        uint256 claimable = _totalVestedOf(recipient, t) -\\n            total_claimed[recipient];\\n\\n        total_claimed[recipient] += claimable;\\n\\n        IERC20(token).safeTransfer(recipient, claimable);\\n\\n        emit Claim(recipient, claimable);\\n    }\\n\\n    function _totalVestedOf(address _recipient, uint256 _time)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_time == 0) _time = block.timestamp;\\n\\n        uint256 locked = initial_locked[_recipient];\\n\\n        if (_time < start_time) {\\n            return 0;\\n        }\\n\\n        return\\n            min(\\n                (locked * (_time - start_time)) / (end_time - start_time),\\n                locked\\n            );\\n    }\\n\\n    function vestedSupply() public view returns (uint256) {\\n        uint256 locked = initial_locked_supply;\\n\\n        if (block.timestamp < start_time) {\\n            return 0;\\n        }\\n\\n        return\\n            min(\\n                (locked * (block.timestamp - start_time)) /\\n                    (end_time - start_time),\\n                locked\\n            );\\n    }\\n\\n    function lockedSupply() public view returns (uint256) {\\n        return initial_locked_supply - vestedSupply();\\n    }\\n\\n    function availableOf(address _recipient) public view returns (uint256) {\\n        uint256 t = disabled_at[_recipient];\\n\\n        if (t == 0) {\\n            t = block.timestamp;\\n        }\\n\\n        return _totalVestedOf(_recipient, t) - total_claimed[_recipient];\\n    }\\n\\n    function lockedOf(address _recipient) public view returns (uint256) {\\n        return\\n            initial_locked[_recipient] -\\n            _totalVestedOf(_recipient, block.timestamp);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\\ncontract LendFlareTokenLockerFactory {\\n    uint256 public totalLockers;\\n    mapping(uint256 => address) public lockers;\\n\\n    address public owner;\\n\\n    event CreateLocker(\\n        uint256 indexed uniqueId,\\n        address indexed locker,\\n        string description\\n    );\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function setOwner(address _owner) external {\\n        require(\\n            msg.sender == owner,\\n            \\\"LendFlareTokenLockerFactory: !authorized setOwner\\\"\\n        );\\n\\n        owner = _owner;\\n    }\\n\\n    function createLocker(\\n        uint256 _uniqueId,\\n        address _token,\\n        uint256 _start_time,\\n        uint256 _end_time,\\n        address _owner,\\n        string calldata description\\n    ) external returns (address) {\\n        require(\\n            msg.sender == owner,\\n            \\\"LendFlareTokenLockerFactory: !authorized createLocker\\\"\\n        );\\n        require(lockers[_uniqueId] == address(0), \\\"!_uniqueId\\\");\\n\\n        LendFlareTokenLocker locker = new LendFlareTokenLocker(\\n            _owner,\\n            _token,\\n            _start_time,\\n            _end_time\\n        );\\n\\n        lockers[_uniqueId] = address(locker);\\n\\n        totalLockers++;\\n\\n        emit CreateLocker(_uniqueId, address(locker), description);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"convexBoosterPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"supplyBoosterPids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"int128[]\",\"name\":\"curveCoinIds\",\"type\":\"int128[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateThreshold\",\"type\":\"uint256\"}],\"name\":\"AddMarketPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lendingId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowNumber\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thisAddress\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lendingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"curveCoinId\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowBlocks\",\"type\":\"uint256\"}],\"name\":\"LendingBase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lendingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LendingMarketV2.UserLendingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lendingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LendingMarketV2.UserLendingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetBorrowBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"SetLendingThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"SetLiquidateThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumbers\",\"type\":\"uint256\"}],\"name\":\"SetLiquidateThresholdBlockNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"TogglePausedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LENDFLARE_TOTAL_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LENDING_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIQUIDATE_BLOCK_NUMBERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIQUIDATE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LENDING_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LIQUIDATE_BLOCK_NUMBERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LIQUIDATE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLY_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_convexBoosterPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplyBoosterPids\",\"type\":\"uint256[]\"},{\"internalType\":\"int128[]\",\"name\":\"_curveCoinIds\",\"type\":\"int128[]\"},{\"internalType\":\"uint256\",\"name\":\"_lendingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidateThreshold\",\"type\":\"uint256\"}],\"name\":\"addMarketPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supportPid\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowBlocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supportPid\",\"type\":\"uint256\"}],\"name\":\"borrowForDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lendingId\",\"type\":\"bytes32\"}],\"name\":\"calculateRepayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"cursor\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token0\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"generateId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_utilizationRate\",\"type\":\"uint256\"}],\"name\":\"getAmplificationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supportPid\",\"type\":\"uint256\"}],\"name\":\"getCurveCoinId\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_convexPid\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_curveCoinId\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"_supplyPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidateThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowBlocks\",\"type\":\"uint256\"}],\"name\":\"getLendingInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"}],\"internalType\":\"struct LendingMarketV2.LendingParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amplificationFactor\",\"type\":\"uint256\"}],\"name\":\"getLendingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolSupportPids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyBlockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lendingId\",\"type\":\"bytes32\"}],\"name\":\"getUserLendingState\",\"outputs\":[{\"internalType\":\"enum LendingMarketV2.UserLendingState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLendingsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingSponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convexBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplyBooster\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingSponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lendings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLendingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"enum LendingMarketV2.UserLendingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lendingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_extraErc20Amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateThresholdBlockNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"myStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recentRepayAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"convexPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidateThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolLending\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lendingId\",\"type\":\"bytes32\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lendingId\",\"type\":\"bytes32\"}],\"name\":\"repayBorrowAndFreezeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lendingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lendingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowERC20AndFreezeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBorrowBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setLendingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setLiquidateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setLiquidateThresholdBlockNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLendings\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"lendingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportPid\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"curveCoinId\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"borrowNumbers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token0\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LendingMarketV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}