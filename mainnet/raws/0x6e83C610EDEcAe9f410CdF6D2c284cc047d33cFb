{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Kohi/CellData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./SortedY.sol\\\"; \\r\\nimport \\\"./Cell.sol\\\";\\r\\nimport \\\"./CellBlock.sol\\\";\\r\\n\\r\\nstruct CellData {\\r\\n    CellBlock cb;\\r\\n    Cell[] cells;\\r\\n    Cell current;\\r\\n    uint32 used;\\r\\n    SortedY[] sortedY;\\r\\n    Cell[] sortedCells;\\r\\n    bool sorted;\\r\\n    Cell style;\\r\\n    int32 minX;\\r\\n    int32 maxX;\\r\\n    int32 minY;\\r\\n    int32 maxY;\\r\\n}\\r\\n\\r\\nlibrary CellDataMethods {\\r\\n    function create() external pure returns (CellData memory cellData) {\\r\\n        cellData.cb = CellBlockMethods.create(12);\\r\\n        cellData.cells = new Cell[](cellData.cb.limit);\\r\\n        cellData.sortedCells = new Cell[](cellData.cb.limit);\\r\\n        cellData.sortedY = new SortedY[](2401);\\r\\n        cellData.sorted = false;\\r\\n        cellData.style = CellMethods.create();\\r\\n        cellData.current = CellMethods.create();\\r\\n        cellData.minX = 0x7FFFFFFF;\\r\\n        cellData.minY = 0x7FFFFFFF;\\r\\n        cellData.maxX = -0x7FFFFFFF;\\r\\n        cellData.maxY = -0x7FFFFFFF;\\r\\n        return cellData;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Kohi/SortedY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nstruct SortedY {\\r\\n    int32 start;\\r\\n    int32 count;\\r\\n}\"\r\n    },\r\n    \"contracts/Kohi/Cell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nstruct Cell {\\r\\n    int32 x;\\r\\n    int32 y;\\r\\n    int32 cover;\\r\\n    int32 area;\\r\\n    int32 left;\\r\\n    int32 right;\\r\\n}\\r\\n\\r\\nlibrary CellMethods {\\r\\n    function create() internal pure returns (Cell memory cell) {\\r\\n        reset(cell);        \\r\\n    }\\r\\n\\r\\n    function reset(Cell memory cell) internal pure {\\r\\n        cell.x = 0x7FFFFFFF;\\r\\n        cell.y = 0x7FFFFFFF;\\r\\n        cell.cover = 0;\\r\\n        cell.area = 0;\\r\\n        cell.left = -1;\\r\\n        cell.right = -1;\\r\\n    }    \\r\\n\\r\\n    function set(Cell memory cell, Cell memory other) internal pure {\\r\\n        cell.x = other.x;\\r\\n        cell.y = other.y;\\r\\n        cell.cover = other.cover;\\r\\n        cell.area = other.area;\\r\\n        cell.left = other.left;\\r\\n        cell.right = other.right;\\r\\n    }\\r\\n\\r\\n    function style(Cell memory self, Cell memory other) internal pure {\\r\\n        self.left = other.left;\\r\\n        self.right = other.right;\\r\\n    }\\r\\n\\r\\n    function notEqual(\\r\\n        Cell memory self,\\r\\n        int32 ex,\\r\\n        int32 ey,\\r\\n        Cell memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        unchecked {\\r\\n            return\\r\\n                ((ex - self.x) |\\r\\n                    (ey - self.y) |\\r\\n                    (self.left - other.left) |\\r\\n                    (self.right - other.right)) != 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Kohi/CellBlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nstruct CellBlock {\\r\\n    uint32 shift;\\r\\n    uint32 size;\\r\\n    uint32 mask;\\r\\n    uint32 limit;\\r\\n}\\r\\n\\r\\nlibrary CellBlockMethods {\\r\\n    function create(uint32 sampling)\\r\\n        external\\r\\n        pure\\r\\n        returns (CellBlock memory cb)\\r\\n    {\\r\\n        cb.shift = sampling;\\r\\n        cb.size = uint32(1) << cb.shift;\\r\\n        cb.mask = cb.size - 1;\\r\\n        cb.limit = cb.size * 2;\\r\\n        return cb;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/Kohi/CellBlock.sol\": {\r\n        \"CellBlockMethods\": \"0xf364c2773632c6dcf4dac0fabc857c9e6c608b79\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"shift\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"size\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mask\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"}],\"internalType\":\"struct CellBlock\",\"name\":\"cb\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"cover\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"area\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"left\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"right\",\"type\":\"int32\"}],\"internalType\":\"struct Cell[]\",\"name\":\"cells\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"cover\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"area\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"left\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"right\",\"type\":\"int32\"}],\"internalType\":\"struct Cell\",\"name\":\"current\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"used\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"start\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"count\",\"type\":\"int32\"}],\"internalType\":\"struct SortedY[]\",\"name\":\"sortedY\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"cover\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"area\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"left\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"right\",\"type\":\"int32\"}],\"internalType\":\"struct Cell[]\",\"name\":\"sortedCells\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"sorted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"cover\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"area\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"left\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"right\",\"type\":\"int32\"}],\"internalType\":\"struct Cell\",\"name\":\"style\",\"type\":\"tuple\"},{\"internalType\":\"int32\",\"name\":\"minX\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"maxX\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"minY\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"maxY\",\"type\":\"int32\"}],\"internalType\":\"struct CellData\",\"name\":\"cellData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CellDataMethods", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}