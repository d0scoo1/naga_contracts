{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ElfInventoryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./DataStructures.sol\\\";\\r\\n\\r\\ncontract ElfMetadataHandlerV2 {\\r\\n    using DataStructures for DataStructures.Token;\\r\\n\\r\\n    address impl_;\\r\\n    address public manager;\\r\\n    bool private initialized;\\r\\n\\r\\n    enum Part {\\r\\n        race,\\r\\n        hair,\\r\\n        primaryWeapon,\\r\\n        accessories\\r\\n    }\\r\\n\\r\\n    mapping(uint8 => address) public race;\\r\\n    mapping(uint8 => address) public hair;\\r\\n    mapping(uint8 => address) public primaryWeapon;\\r\\n    mapping(uint8 => address) public accessories;\\r\\n\\r\\n    struct Attributes {\\r\\n        uint8 hair; //MAX 3\\r\\n        uint8 race; //MAX 6 Body\\r\\n        uint8 accessories; //MAX 7\\r\\n        uint8 sentinelClass; //MAX 3\\r\\n        uint8 weaponTier; //MAX 6\\r\\n        uint8 inventory; //MAX 7\\r\\n    }\\r\\n\\r\\n    string public constant header =\\r\\n        '<svg id=\\\"elf\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 160 160\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">';\\r\\n    string public constant footer =\\r\\n        \\\"<style>#elf{shape-rendering: crispedges; image-rendering: -webkit-crisp-edges; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges; image-rendering: pixelated; -ms-interpolation-mode: nearest-neighbor;}</style></svg>\\\";\\r\\n\\r\\n   \\r\\n    //initialize function\\r\\n    function initialize() public {\\r\\n        require(!initialized, \\\"Already initialized\\\");\\r\\n        manager = msg.sender;\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    function getName(uint8 accessories_, uint16 id_)  public pure returns (string memory)  {\\r\\n        \\r\\n        string memory name = string(abi.encodePacked(\\\"Elf #\\\",toString(id_))); \\r\\n        //one for ones\\r\\n        if(accessories_ == 6 || accessories_ == 12 || accessories_ == 13 || accessories_ == 14 || accessories_ == 19 || accessories_ == 20 || accessories_ == 21){\\r\\n          name = string(abi.encodePacked(\\\"Elf #\\\",toString(id_),\\\", \\\", getAccessoriesName(accessories_)));\\r\\n        }\\r\\n\\r\\n        return name;\\r\\n\\r\\n    }\\r\\n   \\r\\n    function getSVG(\\r\\n        uint8 race_,\\r\\n        uint8 hair_,\\r\\n        uint8 primaryWeapon_,\\r\\n        uint8 accessories_,\\r\\n        uint8 sentinelClass_\\r\\n    ) public view returns (string memory) {\\r\\n      \\r\\n        uint8 accessoriesIndex = (accessories_ - 1) % 7; \\r\\n        bool specialBool = false;\\r\\n        bool morphBool = false;\\r\\n\\r\\n        \\r\\n        if(sentinelClass_ == 0 && (accessoriesIndex == 1 || accessoriesIndex == 2)) {\\r\\n            morphBool = true;\\r\\n        }\\r\\n        \\r\\n        if((sentinelClass_ != 0 && accessoriesIndex >= 4) || (sentinelClass_ == 0 && accessoriesIndex >= 5)) {\\r\\n            specialBool = true;\\r\\n        }\\r\\n\\r\\n        string memory druidMorph =  string(\\r\\n                abi.encodePacked(\\r\\n                    header,\\r\\n                    get(Part.accessories, accessories_),\\r\\n                    get(Part.race, race_),                    \\r\\n                    get(Part.hair, hair_),\\r\\n                    primaryWeapon_ == 69 ? \\\"\\\" : get(Part.primaryWeapon, primaryWeapon_),                                        \\r\\n                    footer\\r\\n                )\\r\\n            );\\r\\n\\r\\n\\r\\n        string memory sentinel =  string(\\r\\n                abi.encodePacked(\\r\\n                    header,\\r\\n                    get(Part.race, race_),\\r\\n                    accessoriesIndex <= 1 ? get(Part.accessories, accessories_) : \\\"\\\",//layer 2 armband necklace RANGE AND ASSASSIN\\r\\n                    get(Part.hair, hair_),\\r\\n                    accessoriesIndex <= 3 ? get(Part.accessories, accessories_) : \\\"\\\",//layer 4 is for body armor\\r\\n                    primaryWeapon_ == 69 ? \\\"\\\" : get(Part.primaryWeapon, primaryWeapon_),     \\r\\n                    accessoriesIndex == 4 ? get(Part.accessories, accessories_) : \\\"\\\",//layer 6 is for Druid claws.\\r\\n                    footer\\r\\n                )\\r\\n            );\\r\\n\\r\\n        string memory uniques =  string(\\r\\n                abi.encodePacked(\\r\\n                    header,\\r\\n                    get(Part.accessories, accessories_), \\r\\n                    footer\\r\\n                )\\r\\n            );    \\r\\n\\r\\n        return morphBool ? druidMorph : specialBool ? uniques : sentinel;\\r\\n          \\r\\n    }\\r\\n\\r\\n    function getTokenURI(uint16 id_, uint256 sentinel)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        DataStructures.Token memory token = DataStructures.getToken(sentinel);\\r\\n        \\r\\n        string memory svg = Base64.encode(\\r\\n            bytes(\\r\\n                getSVG(\\r\\n                    token.race,\\r\\n                    token.hair,\\r\\n                    token.primaryWeapon,\\r\\n                    token.accessories,\\r\\n                    token.sentinelClass\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"',\\r\\n                                //toString(id_),\\r\\n                                getName(token.accessories, id_),\\r\\n                                '\\\", \\\"description\\\":\\\"EthernalElves is a collection of 6666 Sentinel Elves racing to awaken the Elders. These Elves are 100% on-chain. Play EthernalElves to upgrade your abilities and grow your army. !onward\\\", \\\"image\\\": \\\"',\\r\\n                                \\\"data:image/svg+xml;base64,\\\",\\r\\n                                svg,\\r\\n                                '\\\",',\\r\\n                                getAttributes(\\r\\n                                    token.race,\\r\\n                                    token.hair,\\r\\n                                    token.primaryWeapon,\\r\\n                                    token.accessories,\\r\\n                                    token.level,\\r\\n                                    token.healthPoints,\\r\\n                                    token.attackPoints,\\r\\n                                    token.sentinelClass,\\r\\n                                    token.weaponTier\\r\\n                                ),\\r\\n                                \\\"}\\\"\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    INVENTORY MANAGEMENT\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setRace(uint8[] calldata ids, address source) external {\\r\\n        require(msg.sender == manager, \\\"Not authorized\\\");\\r\\n\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            race[ids[index]] = source;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setHair(uint8[] calldata ids, address source) external {\\r\\n        require(msg.sender == manager, \\\"Not authorized\\\");\\r\\n\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            hair[ids[index]] = source;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setWeapons(uint8[] calldata ids, address source) external {\\r\\n        require(msg.sender == manager, \\\"Not authorized\\\");\\r\\n\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            primaryWeapon[ids[index]] = source;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAccessories(uint8[] calldata ids, address source) external {\\r\\n        require(msg.sender == manager, \\\"Not authorized\\\");\\r\\n\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            accessories[ids[index]] = source;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    INTERNAL FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function call(address source, bytes memory sig)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory svg)\\r\\n    {\\r\\n        (bool succ, bytes memory ret) = source.staticcall(sig);\\r\\n        require(succ, \\\"failed to get data\\\");\\r\\n        \\r\\n        svg = abi.decode(ret, (string));\\r\\n        //  console.log(\\\"part?\\\");\\r\\n       //  console.log(svg);\\r\\n    }\\r\\n\\r\\n    function get(Part part, uint8 id)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory data_)\\r\\n    {   \\r\\n       \\r\\n        \\r\\n        address source = part == Part.race ? race[id]\\r\\n        : part == Part.hair ? hair[id]\\r\\n        : part == Part.primaryWeapon ? primaryWeapon[id] : accessories[id];\\r\\n        \\r\\n        data_ = wrapTag(call(source, getData(part, id)));\\r\\n         \\r\\n        return data_;\\r\\n    }\\r\\n\\r\\n    function wrapTag(string memory uri) internal pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '<image x=\\\"1\\\" y=\\\"1\\\" width=\\\"160\\\" height=\\\"160\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\r\\n                    uri,\\r\\n                    '\\\"/>'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getData(Part part, uint8 id)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory data)\\r\\n    {\\r\\n        string memory s = string(\\r\\n            abi.encodePacked(\\r\\n                part == Part.race ? \\\"race\\\" \\r\\n                    : part == Part.hair ? \\\"hair\\\"\\r\\n                    : part == Part.primaryWeapon ? \\\"weapon\\\"\\r\\n                    : \\\"accessories\\\",\\r\\n                toString(id),\\r\\n                \\\"()\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return abi.encodeWithSignature(s, \\\"\\\");\\r\\n    }\\r\\n\\r\\n     function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function getAttributes(\\r\\n        uint8 race_,\\r\\n        uint8 hair_,\\r\\n        uint8 primaryWeapon_,\\r\\n        uint8 accessories_,\\r\\n        uint8 level_,\\r\\n        uint8 healthPoints_,\\r\\n        uint8 attackPoints_,\\r\\n        uint8 sentinelClass_,\\r\\n        uint8 weaponTier_\\r\\n    ) internal pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '\\\"attributes\\\": [',\\r\\n                    getClassAttributes(sentinelClass_),\\r\\n                    \\\",\\\",\\r\\n                    getRaceAttributes(race_),\\r\\n                    \\\",\\\",\\r\\n                    getHairAttributes(hair_),\\r\\n                    \\\",\\\",\\r\\n                    getPrimaryWeaponAttributes(primaryWeapon_, weaponTier_),\\r\\n                    \\\",\\\",\\r\\n                    getAccessoriesAttributes(accessories_),\\r\\n                    ',{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\":',\\r\\n                    toString(level_),\\r\\n                    '},{\\\"display_type\\\": \\\"boost_number\\\",\\\"trait_type\\\": \\\"Attack Points\\\", \\\"value\\\":',\\r\\n                    toString(attackPoints_),\\r\\n                    '},{\\\"display_type\\\": \\\"boost_number\\\",\\\"trait_type\\\": \\\"Health Points\\\", \\\"value\\\":',\\r\\n                    toString(healthPoints_),\\r\\n                    \\\"}]\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getClassAttributes(uint8 sentinelClass_)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"trait_type\\\":\\\"Class\\\",\\\"value\\\":\\\"',\\r\\n                    getClassName(sentinelClass_),\\r\\n                    '\\\"}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getRaceAttributes(uint8 race_)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"trait_type\\\":\\\"Race\\\",\\\"value\\\":\\\"',\\r\\n                    getRaceName(race_),\\r\\n                    '\\\"}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getHairAttributes(uint8 hair_)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"trait_type\\\":\\\"Head\\\",\\\"value\\\":\\\"',\\r\\n                    getHairName(hair_),\\r\\n                    '\\\"}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getPrimaryWeaponAttributes(uint8 primaryWeapon_, uint8 weaponTier_)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"trait_type\\\":\\\"Weapon\\\",\\\"value\\\":\\\"',\\r\\n                    getPrimaryWeapon(primaryWeapon_),\\r\\n                    '\\\"},{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"Weapon Tier\\\",\\\"value\\\":',\\r\\n                    toString(weaponTier_),\\r\\n                    \\\"}\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getAccessoriesAttributes(uint8 accessory_)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"trait_type\\\":\\\"Accessory\\\",\\\"value\\\":\\\"',\\r\\n                    getAccessoriesName(accessory_),\\r\\n                    '\\\"}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getTier(uint16 id) internal pure returns (uint16) {\\r\\n        if (id > 40) return 100;\\r\\n        if (id == 0) return 0;\\r\\n        return ((id - 1) / 4);\\r\\n    }\\r\\n\\r\\n   /*\\r\\n   JANKY\\r\\n    function getWeaponTier(uint16 id) internal pure returns (uint16) {\\r\\n        \\r\\n        if (id == 0) return 0;\\r\\n        \\r\\n        if (id <= 15){\\r\\n            id = id/15 + 1;\\r\\n        }\\r\\n        if (id >= 15 && id <= 30){\\r\\n            id = (id-15)/15 + 1;\\r\\n        }\\r\\n        if (id >= 30 && id <= 45){\\r\\n            id = (id-30)/15 + 1;\\r\\n        }\\r\\n        \\r\\n        \\r\\n        return (id);\\r\\n    }\\r\\n    */\\r\\n\\r\\n   \\r\\n    function getClassName(uint8 id)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory className)\\r\\n    {\\r\\n        className = id == 0 ? \\\"Druid\\\" : id == 1 ? \\\"Assassin\\\" : \\\"Ranger\\\";\\r\\n    }\\r\\n\\r\\n    function getRaceName(uint8 id)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory raceName)\\r\\n    {   \\r\\n        //Dont you just fucking love modulus? \\r\\n        id = id % 4 + 1;\\r\\n        raceName = id == 2 ? \\\"Darkborne\\\" : id == 3 ? \\\"Lightborne\\\" : id == 4 ? \\\"Primeborne\\\" : \\\"Woodborne\\\";\\r\\n       \\r\\n    }\\r\\n\\r\\n    function getHairName(uint8 id)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory hairName)\\r\\n    {\\r\\n        ///create a binary search for the hair name from ids 1 to 9\\r\\n        hairName = id == 1 ? \\\"Antlers\\\" \\r\\n        : id == 2 ? \\\"Hood & Mask\\\" \\r\\n        : id == 3 ? \\\"Hood\\\" \\r\\n        : id == 4 ? \\\"Brown\\\" \\r\\n        : id == 5 ? \\\"Dark\\\" \\r\\n        : id == 6 ? \\\"Light\\\" \\r\\n        : id == 7 ? \\\"Blue\\\" : id == 8 ? \\\"Blonde\\\" : \\\"Purple\\\";\\r\\n\\r\\n    }\\r\\n\\r\\n    function getPrimaryWeapon(uint8 id) public pure returns (string memory) {\\r\\n        if(id == 69){\\r\\n            return \\\"Fists\\\";\\r\\n        }\\r\\n        if (id < 20) {\\r\\n            if (id < 10) {\\r\\n                if (id < 5) {\\r\\n                    if (id < 3) {\\r\\n                        return id == 1 ? \\\"Wand of the North\\\" : \\\"Wandherline\\\";\\r\\n                    }\\r\\n                    return id == 3 ? \\\"Flayer's Bane\\\" : \\\"Scepter of the Moon\\\";\\r\\n                }\\r\\n                if (id < 7) return id == 5 ? \\\"Meadow's Wand\\\" : \\\"Cranium Staff\\\";\\r\\n                return\\r\\n                    id == 7 ? \\\"Apiaries Indigo\\\" : \\r\\n                    id == 8 ? \\\"Rumi's Staff\\\" : \\\"Forsaken Souls\\\";\\r\\n            }\\r\\n            if (id <= 15) {\\r\\n                if (id < 13) {\\r\\n                    return\\r\\n                        id == 10 ? \\\"Ether Malevolence \\\" : id == 11\\r\\n                            ? \\\"Souls of Ethernals\\\"\\r\\n                            : \\\"Scepter of Miranda\\\";\\r\\n                }\\r\\n                return\\r\\n                    id == 13 ? \\\"Scythe of Drakon\\\" : id == 14\\r\\n                        ? \\\"Luna's Staff of Divinity\\\"\\r\\n                        : \\\"Forbidden Scepter of Lucifer\\\";\\r\\n            }\\r\\n            if (id < 18)\\r\\n                return id == 16 ? \\\"Daggafeets\\\" : \\\"Deceitful Dagger\\\";\\r\\n            return id == 18 ? \\\"Cutlass of the Night\\\" : \\\"Axe of Haladan\\\";\\r\\n        }\\r\\n\\r\\n        if (id < 30) {\\r\\n            if (id < 25) {\\r\\n                if (id < 23) {\\r\\n                    return\\r\\n                        id == 20 ? \\\"Meadow's Lancer\\\" : id == 21\\r\\n                            ? \\\"Excalibur Glaives\\\"\\r\\n                            : \\\"Reaper of the Ancients\\\";\\r\\n                }\\r\\n                return id == 23 ? \\\"Emerald's Ravage\\\" : \\\"Primeborne's Resurgence\\\";\\r\\n            }\\r\\n\\r\\n            if (id < 27)\\r\\n                return id == 25 ? \\\"Corruptors Scythe\\\" : \\\"Soul Prowler\\\";\\r\\n            return\\r\\n                id == 27 ? \\\"Blades of Illhaladan\\\" : id == 28\\r\\n                    ? \\\"Twin Blades of Behemoth\\\"\\r\\n                    : \\\"Lucifers Glaives\\\";\\r\\n        }\\r\\n        if (id <= 35) {\\r\\n            if (id < 33) {\\r\\n                return\\r\\n                    id == 30 ? \\\"Halberd of Miranda\\\" : id == 31\\r\\n                        ? \\\"Rope Dagger\\\"\\r\\n                        : \\\"Boomerang of Lilith\\\";\\r\\n            }\\r\\n            return\\r\\n                id == 33 ? \\\"Meadows Bow\\\" : id == 34\\r\\n                    ? \\\"Soul-Taker\\\"\\r\\n                    : \\\"Ethernal Boomerang\\\";\\r\\n        }\\r\\n\\r\\n        if (id <= 40) {\\r\\n            if (id < 39) {\\r\\n                return\\r\\n                    id == 36 ? \\\"Bow of Janus\\\" : id == 37\\r\\n                        ? \\\"Death by Anchors\\\"\\r\\n                        : \\\"Glaives of Succubus\\\";\\r\\n            }\\r\\n            return id == 39 ? \\\"Meteors of the Dark Moon\\\" : \\\"Searing Daggerjack\\\";\\r\\n        }\\r\\n        if (id <= 45) {\\r\\n            if (id < 44) {\\r\\n                return\\r\\n                    id == 41 ? \\\"Glimmering Moon Glaives\\\" : id == 42\\r\\n                        ? \\\"Arrows of Miranda\\\"\\r\\n                        : \\\"Cursed Venom\\\";\\r\\n            }\\r\\n            return id == 44 ? \\\"Monson of Ethernals\\\" : \\\"Nimbus Astrape\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAccessoriesName(uint8 id) public pure returns (string memory) {\\r\\n        if (id < 20) {\\r\\n            if (id < 10) {\\r\\n                if (id < 5) {\\r\\n                    if (id < 3) {\\r\\n                        return id == 1 ? \\\"Druid 1\\\" : \\\"Bear\\\";\\r\\n                    }\\r\\n                    return id == 3 ? \\\"Liger\\\" : \\\"None\\\";\\r\\n                }\\r\\n                if (id < 7)\\r\\n                    return\\r\\n                        id == 5 ? \\\"Claws\\\" : \\\"Drus Ruler of The Oaks\\\";\\r\\n                return\\r\\n                    id == 7 ? \\\"Druid 7\\\" : id == 8\\r\\n                        ? \\\"Necklace\\\"\\r\\n                        : \\\"Necklace & Armband\\\";\\r\\n            }\\r\\n            if (id <= 15) {\\r\\n                if (id < 13) {\\r\\n                    return\\r\\n                        id == 10 ? \\\"Crown of Dahagon \\\" : id == 11\\r\\n                            ? \\\"Mechadon's Vizard\\\"\\r\\n                            : \\\"Euriel The Protector\\\";\\r\\n                }\\r\\n                return\\r\\n                    id == 13 ? \\\"Kidor The Slayer of Demons\\\" : id == 14 ? \\\"Lord Mecha Aker\\\" : \\\"Wristband\\\";\\r\\n                      }\\r\\n            if (id < 18)\\r\\n                return id == 16 ? \\\"Wristband & Necklace\\\" : \\\"Azrael's Crest\\\";\\r\\n            return id == 18 ? \\\"El Machina\\\" : \\\"Eriel Angel of Nature\\\";\\r\\n        }\\r\\n            if (id < 22) {\\r\\n                    return\\r\\n                        id == 20 ? \\\"Khonsuna Demon Destroyer\\\" : \\\"Lord Machina Ethena\\\";\\r\\n                }        \\r\\n       \\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @notice NOT BUILT BY ETHERNAL ELVES TEAM.\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n//import \\\"hardhat/console.sol\\\"; ///REMOVE BEFORE DEPLOYMENT\\r\\n//v 1.0.3\\r\\n\\r\\nlibrary DataStructures {\\r\\n\\r\\n/////////////DATA STRUCTURES///////////////////////////////\\r\\n    struct Elf {\\r\\n            address owner;  \\r\\n            uint256 timestamp; \\r\\n            uint256 action; \\r\\n            uint256 healthPoints;\\r\\n            uint256 attackPoints; \\r\\n            uint256 primaryWeapon; \\r\\n            uint256 level;\\r\\n            uint256 hair;\\r\\n            uint256 race; \\r\\n            uint256 accessories; \\r\\n            uint256 sentinelClass; \\r\\n            uint256 weaponTier; \\r\\n            uint256 inventory; \\r\\n    }\\r\\n\\r\\n    struct Token {\\r\\n            address owner;  \\r\\n            uint256 timestamp; \\r\\n            uint8 action; \\r\\n            uint8 healthPoints;\\r\\n            uint8 attackPoints; \\r\\n            uint8 primaryWeapon; \\r\\n            uint8 level;\\r\\n            uint8 hair;\\r\\n            uint8 race; \\r\\n            uint8 accessories; \\r\\n            uint8 sentinelClass; \\r\\n            uint8 weaponTier; \\r\\n            uint8 inventory; \\r\\n    }\\r\\n\\r\\n    struct ActionVariables {\\r\\n\\r\\n            uint256 reward;\\r\\n            uint256 timeDiff;\\r\\n            uint256 traits; \\r\\n            uint256 class;  \\r\\n    }\\r\\n\\r\\n    struct Camps {\\r\\n            uint32 baseRewards; \\r\\n            uint32 creatureCount; \\r\\n            uint32 creatureHealth; \\r\\n            uint32 expPoints; \\r\\n            uint32 minLevel;\\r\\n            uint32 itemDrop;\\r\\n            uint32 weaponDrop;\\r\\n            uint32 spare;\\r\\n    }\\r\\n\\r\\n    /*Dont Delete, just keep it for reference\\r\\n\\r\\n    struct Attributes { \\r\\n            uint256 hair; //MAX 3 3 hair traits\\r\\n            uint256 race;  //MAX 6 Body 4 for body\\r\\n            uint256 accessories; //MAX 7 4 \\r\\n            uint256 sentinelClass; //MAX 3 3 in class\\r\\n            uint256 weaponTier; //MAX 6 5 tiers\\r\\n            uint256 inventory; //MAX 7 6 items\\r\\n    }\\r\\n\\r\\n    */\\r\\n\\r\\n/////////////////////////////////////////////////////\\r\\nfunction getElf(uint256 character) internal pure returns(Elf memory _elf) {\\r\\n   \\r\\n    _elf.owner =          address(uint160(uint256(character)));\\r\\n    _elf.timestamp =      uint256(uint40(character>>160));\\r\\n    _elf.action =         uint256(uint8(character>>200));\\r\\n    _elf.healthPoints =       uint256(uint8(character>>208));\\r\\n    _elf.attackPoints =   uint256(uint8(character>>216));\\r\\n    _elf.primaryWeapon =  uint256(uint8(character>>224));\\r\\n    _elf.level    =       uint256(uint8(character>>232));\\r\\n    _elf.hair           = (uint256(uint8(character>>240)) / 100) % 10;\\r\\n    _elf.race           = (uint256(uint8(character>>240)) / 10) % 10;\\r\\n    _elf.accessories    = (uint256(uint8(character>>240))) % 10;\\r\\n    _elf.sentinelClass  = (uint256(uint8(character>>248)) / 100) % 10;\\r\\n    _elf.weaponTier     = (uint256(uint8(character>>248)) / 10) % 10;\\r\\n    _elf.inventory      = (uint256(uint8(character>>248))) % 10; \\r\\n\\r\\n} \\r\\n\\r\\nfunction getToken(uint256 character) internal pure returns(Token memory token) {\\r\\n   \\r\\n    token.owner          = address(uint160(uint256(character)));\\r\\n    token.timestamp      = uint256(uint40(character>>160));\\r\\n    token.action         = (uint8(character>>200));\\r\\n    token.healthPoints   = (uint8(character>>208));\\r\\n    token.attackPoints   = (uint8(character>>216));\\r\\n    token.primaryWeapon  = (uint8(character>>224));\\r\\n    token.level          = (uint8(character>>232));\\r\\n    token.hair           = ((uint8(character>>240)) / 100) % 10; //MAX 3\\r\\n    token.race           = ((uint8(character>>240)) / 10) % 10; //Max6\\r\\n    token.accessories    = ((uint8(character>>240))) % 10; //Max7\\r\\n    token.sentinelClass  = ((uint8(character>>248)) / 100) % 10; //MAX 3\\r\\n    token.weaponTier     = ((uint8(character>>248)) / 10) % 10; //MAX 6\\r\\n    token.inventory      = ((uint8(character>>248))) % 10; //MAX 7\\r\\n\\r\\n    token.hair = (token.sentinelClass * 3) + (token.hair + 1);\\r\\n    token.race = (token.sentinelClass * 4) + (token.race + 1);\\r\\n    token.primaryWeapon = token.primaryWeapon == 69 ? 69 : (token.sentinelClass * 15) + (token.primaryWeapon + 1);\\r\\n    token.accessories = (token.sentinelClass * 7) + (token.accessories + 1);\\r\\n\\r\\n}\\r\\n\\r\\nfunction _setElf(\\r\\n                address owner, uint256 timestamp, uint256 action, uint256 healthPoints, \\r\\n                uint256 attackPoints, uint256 primaryWeapon, \\r\\n                uint256 level, uint256 traits, uint256 class )\\r\\n\\r\\n    internal pure returns (uint256 sentinel) {\\r\\n\\r\\n    uint256 character = uint256(uint160(address(owner)));\\r\\n    \\r\\n    character |= timestamp<<160;\\r\\n    character |= action<<200;\\r\\n    character |= healthPoints<<208;\\r\\n    character |= attackPoints<<216;\\r\\n    character |= primaryWeapon<<224;\\r\\n    character |= level<<232;\\r\\n    character |= traits<<240;\\r\\n    character |= class<<248;\\r\\n    \\r\\n    return character;\\r\\n}\\r\\n\\r\\n//////////////////////////////HELPERS/////////////////\\r\\n\\r\\nfunction packAttributes(uint hundreds, uint tens, uint ones) internal pure returns (uint256 packedAttributes) {\\r\\n    packedAttributes = uint256(hundreds*100 + tens*10 + ones);\\r\\n    return packedAttributes;\\r\\n}\\r\\n\\r\\nfunction calcAttackPoints(uint256 sentinelClass, uint256 weaponTier) internal pure returns (uint256 attackPoints) {\\r\\n\\r\\n        attackPoints = ((sentinelClass + 1) * 2) + (weaponTier * 2);\\r\\n        \\r\\n        return attackPoints;\\r\\n}\\r\\n\\r\\nfunction calcHealthPoints(uint256 sentinelClass, uint256 level) internal pure returns (uint256 healthPoints) {\\r\\n\\r\\n        healthPoints = (level/(3) +2) + (20 - (sentinelClass * 4));\\r\\n        \\r\\n        return healthPoints;\\r\\n}\\r\\n\\r\\nfunction calcCreatureHealth(uint256 sector, uint256 baseCreatureHealth) internal pure returns (uint256 creatureHealth) {\\r\\n\\r\\n        creatureHealth = ((sector - 1) * 12) + baseCreatureHealth; \\r\\n        \\r\\n        return creatureHealth;\\r\\n}\\r\\n\\r\\nfunction roll(uint256 id_, uint256 level_, uint256 rand, uint256 rollOption_, uint256 weaponTier_, uint256 primaryWeapon_, uint256 inventory_) \\r\\ninternal pure \\r\\nreturns (uint256 newWeaponTier, uint256 newWeapon, uint256 newInventory) {\\r\\n\\r\\n   uint256 levelTier = level_ == 100 ? 5 : uint256((level_/20) + 1);\\r\\n\\r\\n   newWeaponTier = weaponTier_;\\r\\n   newWeapon     = primaryWeapon_;\\r\\n   newInventory  = inventory_;\\r\\n\\r\\n\\r\\n   if(rollOption_ == 1 || rollOption_ == 3){\\r\\n       //Weapons\\r\\n      \\r\\n        uint16  chance = uint16(_randomize(rand, \\\"Weapon\\\", id_)) % 100;\\r\\n       // console.log(\\\"chance: \\\", chance);\\r\\n                if(chance > 10 && chance < 80){\\r\\n        \\r\\n                              newWeaponTier = levelTier;\\r\\n        \\r\\n                        }else if (chance > 80 ){\\r\\n        \\r\\n                              newWeaponTier = levelTier + 1 > 5 ? 5 : levelTier + 1;\\r\\n        \\r\\n                        }else{\\r\\n\\r\\n                                newWeaponTier = levelTier - 1 < 1 ? 1 : levelTier - 1;          \\r\\n                        }\\r\\n\\r\\n                                         \\r\\n        \\r\\n\\r\\n        newWeapon = newWeaponTier == 0 ? 0 : ((newWeaponTier - 1) * 3) + (rand % 3);  \\r\\n        \\r\\n\\r\\n   }\\r\\n   \\r\\n   if(rollOption_ == 2 || rollOption_ == 3){//Items Loop\\r\\n      \\r\\n       \\r\\n        uint16 morerand = uint16(_randomize(rand, \\\"Inventory\\\", id_));\\r\\n        uint16 diceRoll = uint16(_randomize(rand, \\\"Dice\\\", id_));\\r\\n        \\r\\n        diceRoll = (diceRoll % 100);\\r\\n        \\r\\n        if(diceRoll <= 20){\\r\\n\\r\\n            newInventory = levelTier > 3 ? morerand % 3 + 3: morerand % 6 + 1;\\r\\n            //console.log(\\\"Token#: \\\", id_);\\r\\n            //console.log(\\\"newITEM: \\\", newInventory);\\r\\n        } \\r\\n\\r\\n   }\\r\\n                      \\r\\n              \\r\\n}\\r\\n\\r\\n\\r\\nfunction _randomize(uint256 ran, string memory dom, uint256 ness) internal pure returns (uint256) {\\r\\n    return uint256(keccak256(abi.encode(ran,dom,ness)));}\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"accessories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"footer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getAccessoriesName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getClassName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"className\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getHairName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"hairName\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"accessories_\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"id_\",\"type\":\"uint16\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getPrimaryWeapon\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getRaceName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"raceName\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"race_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"primaryWeapon_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"accessories_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sentinelClass_\",\"type\":\"uint8\"}],\"name\":\"getSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"id_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"sentinel\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"hair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"header\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"primaryWeapon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"race\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"setAccessories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"setHair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"setRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"setWeapons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElfMetadataHandlerV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}