{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Catddle/contracts/Seller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IMinted.sol\\\";\\nimport \\\"./ITicket.sol\\\";\\n\\nerror SaleInactive();\\nerror SoldOut();\\nerror InvalidPrice();\\nerror ExceedQuota();\\nerror WithdrawFailed();\\nerror FreezeMint();\\n\\ncontract Seller is Ownable {\\n\\n    uint256 public nextTokenId = 1;\\n\\n    uint256 public allowlistPrice = 0.05 ether;\\n    uint256 public publicPrice = 0.07 ether;\\n\\n    uint256 public constant MAX_MINT = 4;\\n    uint256 public constant MAX_SUPPLY = 2048;\\n\\n    // 0: closed; 1: allowlist mint; 2: public mint\\n    uint8 public saleStage;\\n\\n    address public beneficiary;\\n\\n    ITicket public ticket;\\n    IMinted public token;\\n\\n    bool public isDevMintFreeze;\\n\\n    constructor(address ticket_) {\\n        ticket = ITicket(ticket_);\\n    }\\n\\n    /**\\n     * Public functions\\n     */\\n    function allowlistMint(bytes[] calldata _signatures, uint256[] calldata spotIds)\\n        external\\n        payable\\n    {\\n        uint256 _nextTokenId = nextTokenId;\\n        // must be allowlist mint stage\\n        if (saleStage != 1) revert SaleInactive();\\n        // offset by 1 because we start at 1, and nextTokenId is incremented _after_ mint\\n        if (_nextTokenId + (spotIds.length - 1) > MAX_SUPPLY) revert SoldOut();\\n        // cannot mint exceed 4 catddles\\n        if (spotIds.length > MAX_MINT) revert ExceedQuota();\\n        if (msg.value < allowlistPrice * spotIds.length) revert InvalidPrice();\\n\\n        for (uint256 i = 0; i < spotIds.length; i++) {\\n            // invalidate the spotId passed in\\n            ticket.claimAllowlistSpot(_signatures[i], msg.sender, spotIds[i]);\\n            token.authorizedMint(msg.sender, _nextTokenId);\\n\\n            unchecked {\\n                _nextTokenId++;\\n            }\\n        }\\n        // update nextTokenId\\n        nextTokenId = _nextTokenId;\\n    }\\n\\n    function publicMint(uint256 amount)\\n        external\\n        payable\\n    {\\n        uint256 _nextTokenId = nextTokenId;\\n        // must be public mint stage\\n        if (saleStage != 2) revert SaleInactive();\\n        // offset by 1 because we start at 1, and nextTokenId is incremented _after_ mint\\n        if (_nextTokenId + (amount - 1) > MAX_SUPPLY) revert SoldOut();\\n        // cannot mint exceed 4 catddles\\n        if (amount > MAX_MINT) revert ExceedQuota();\\n        if (msg.value < publicPrice * amount) revert InvalidPrice();\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            token.authorizedMint(msg.sender, _nextTokenId);\\n\\n            unchecked {\\n                _nextTokenId++;\\n            }\\n        }\\n        // update nextTokenId\\n        nextTokenId = _nextTokenId;\\n    }\\n\\n    /**\\n     *  OnlyOwner functions\\n     */\\n\\n    function setToken(address tokenAddress) public onlyOwner {\\n        token = IMinted(tokenAddress);\\n    }\\n\\n    function setTicket(address ticket_) public onlyOwner {\\n        ticket = ITicket(ticket_);\\n    }\\n\\n    function setSaleStage(uint8 stage) public onlyOwner {\\n        saleStage = stage;\\n    }\\n\\n    function setAllowlistPrice(uint256 price) public onlyOwner {\\n        allowlistPrice = price;\\n    }\\n\\n    function setPublicPrice(uint256 price) public onlyOwner {\\n        publicPrice = price;\\n    }\\n\\n    function freezeDevMint() public onlyOwner {\\n        // freeze dev mint forever\\n        isDevMintFreeze = true;\\n    }\\n\\n    function devMint(address receiver, uint256 amount) public onlyOwner {\\n        if (isDevMintFreeze) revert FreezeMint();\\n        uint256 _nextTokenId = nextTokenId;\\n        if (_nextTokenId + (amount - 1) > MAX_SUPPLY) revert SoldOut();\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            token.authorizedMint(receiver, _nextTokenId);\\n\\n            unchecked {\\n                _nextTokenId++;\\n            }\\n        }\\n        nextTokenId = _nextTokenId;\\n    }\\n\\n    function setBeneficiary(address beneficiary_) public onlyOwner {\\n        beneficiary = beneficiary_;\\n    }\\n\\n    function withdraw(uint256 amount) public onlyOwner {\\n        require(beneficiary != address(0), \\\"Cannot withdraw to zero address\\\");\\n        require(amount <= address(this).balance, \\\"Cannot withdraw exceed balance\\\");\\n        (bool success, ) = beneficiary.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawFailed();\\n        }\\n    }\\n   \\n}\"\r\n    },\r\n    \"Catddle/contracts/ITicket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITicket {\\n   function claimAllowlistSpot(bytes calldata _signature, address user, uint256 spotId) external;\\n}\"\r\n    },\r\n    \"Catddle/contracts/IMinted.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMinted {\\n   function authorizedMint(address user, uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticket_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExceedQuota\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FreezeMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoldOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spotIds\",\"type\":\"uint256[]\"}],\"name\":\"allowlistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeDevMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDevMintFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAllowlistPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPublicPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"setSaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticket_\",\"type\":\"address\"}],\"name\":\"setTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticket\",\"outputs\":[{\"internalType\":\"contract ITicket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMinted\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Seller", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000026612ff6652e55273bce997538e85cd40c944f0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}