{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracle/Logic/AnchoredViewRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../IOracleRelay.sol\\\";\\n\\n/// @title implementation of compounds' AnchoredView\\n/// @notice using a main relay and an anchor relay, the AnchoredView\\n/// ensures that the main relay's price is within some amount of the anchor relay price\\n/// if not, the call reverts, effectively disabling the oracle & any actions which require it\\ncontract AnchoredViewRelay is IOracleRelay {\\n  address public _anchorAddress;\\n  IOracleRelay public _anchorRelay;\\n\\n  address public _mainAddress;\\n  IOracleRelay public _mainRelay;\\n\\n  uint256 public _widthNumerator;\\n  uint256 public _widthDenominator;\\n\\n  /// @notice all values set at construction time\\n  /// @param anchor_address address of OracleRelay to use as anchor\\n  /// @param main_address address of OracleRelay to use as main\\n  /// @param widthNumerator numerator of the allowable deviation width\\n  /// @param widthDenominator denominator of the allowable deviation width\\n  constructor(\\n    address anchor_address,\\n    address main_address,\\n    uint256 widthNumerator,\\n    uint256 widthDenominator\\n  ) {\\n    _anchorAddress = anchor_address;\\n    _anchorRelay = IOracleRelay(anchor_address);\\n\\n    _mainAddress = main_address;\\n    _mainRelay = IOracleRelay(main_address);\\n\\n    _widthNumerator = widthNumerator;\\n    _widthDenominator = widthDenominator;\\n  }\\n\\n  /// @notice returns current value of oracle\\n  /// @return current value of oracle\\n  /// @dev implementation in getLastSecond\\n  function currentValue() external view override returns (uint256) {\\n    return getLastSecond();\\n  }\\n\\n  /// @notice compares the main value (chainlink) to the anchor value (uniswap v3)\\n  /// @notice the two prices must closely match +-buffer, or it will revert\\n  function getLastSecond() private view returns (uint256) {\\n    // get the main price\\n    uint256 mainValue = _mainRelay.currentValue();\\n    require(mainValue > 0, \\\"invalid oracle value\\\");\\n\\n    // get anchor price\\n    uint256 anchorPrice = _anchorRelay.currentValue();\\n    require(anchorPrice > 0, \\\"invalid anchor value\\\");\\n\\n    // calculate buffer\\n    uint256 buffer = (_widthNumerator * anchorPrice) / _widthDenominator;\\n\\n    // create upper and lower bounds\\n    uint256 upperBounds = anchorPrice + buffer;\\n    uint256 lowerBounds = anchorPrice - buffer;\\n\\n    // ensure the anchor price is within bounds\\n    require(mainValue < upperBounds, \\\"anchor too low\\\");\\n    require(mainValue > lowerBounds, \\\"anchor too high\\\");\\n\\n    // return mainValue\\n    return mainValue;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IOracleRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title OracleRelay Interface\\n/// @notice Interface for interacting with OracleRelay\\ninterface IOracleRelay {\\n  // returns  price with 18 decimals\\n  function currentValue() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"anchor_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"main_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"widthNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"widthDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_anchorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_anchorRelay\",\"outputs\":[{\"internalType\":\"contract IOracleRelay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainRelay\",\"outputs\":[{\"internalType\":\"contract IOracleRelay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_widthDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_widthNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AnchoredViewRelay", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000be347b88337b606c41c230ff83329a3c19c77a06000000000000000000000000de631f0f0138f0357b296dba3936d50b7430245d00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}