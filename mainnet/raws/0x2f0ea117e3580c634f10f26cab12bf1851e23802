{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract BuyOpenSeaV2 {\r\n\r\n    address private _proxy = 0x7f268357A8c2552623316e2562D90e642bB538E5;\r\n\r\n    function batchBuyWithETH(\r\n        uint256 payment, bytes memory orderDetail\r\n    ) payable external {\r\n        // execute trades\r\n        _trade(payment, orderDetail);\r\n\r\n        // return remaining ETH (if any)\r\n        assembly {\r\n            if gt(selfbalance(), 0) {\r\n                let callStatus := call(\r\n                    gas(),\r\n                    caller(),\r\n                    selfbalance(),\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    0\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    function _trade(\r\n        uint256 payment, bytes memory orderDetail\r\n    ) internal {\r\n\r\n        _proxy.call{value: payment}(orderDetail);\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"orderDetail\",\"type\":\"bytes\"}],\"name\":\"batchBuyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BuyOpenSeaV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f24138504a1a68e923c49c9b6fe19e1c02dae06905f5b824a41383b61d6ce40f"}]}