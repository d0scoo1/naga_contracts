{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\n/// @dev Proxy for NFT Factory\r\ncontract Proxy {\r\n\r\n    // Storage for this proxy\r\n    bytes32 private constant IMPLEMENTATION_SLOT = bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\r\n    bytes32 private constant ADMIN_SLOT          = bytes32(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103);\r\n\r\n    constructor(address impl) {\r\n        require(impl != address(0));\r\n\r\n        _setSlotValue(IMPLEMENTATION_SLOT, bytes32(uint256(uint160(impl))));\r\n        _setSlotValue(ADMIN_SLOT, bytes32(uint256(uint160(msg.sender))));\r\n    }\r\n\r\n    function setImplementation(address newImpl) public {\r\n        require(msg.sender == _getAddress(ADMIN_SLOT));\r\n        _setSlotValue(IMPLEMENTATION_SLOT, bytes32(uint256(uint160(newImpl))));\r\n    }\r\n    \r\n    function implementation() public view returns (address impl) {\r\n        impl = address(uint160(uint256(_getSlotValue(IMPLEMENTATION_SLOT))));\r\n    }\r\n\r\n    function _getAddress(bytes32 key) internal view returns (address add) {\r\n        add = address(uint160(uint256(_getSlotValue(key))));\r\n    }\r\n\r\n    function _getSlotValue(bytes32 slot_) internal view returns (bytes32 value_) {\r\n        assembly {\r\n            value_ := sload(slot_)\r\n        }\r\n    }\r\n\r\n    function _setSlotValue(bytes32 slot_, bytes32 value_) internal {\r\n        assembly {\r\n            sstore(slot_, value_)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation__) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation__, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _delegate(_getAddress(IMPLEMENTATION_SLOT));\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000711a509b0e1e380085010dd984e420a3ae55d9b4", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "1", "Implementation": "0x711a509b0e1e380085010dd984e420a3ae55d9b4", "SwarmSource": "ipfs://481447e63a40a45eb5d61b02cf4e8053f5b165f9272967f9343a94b53bbe6804"}]}