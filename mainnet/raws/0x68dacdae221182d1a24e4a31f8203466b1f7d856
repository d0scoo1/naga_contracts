{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n-----------------------------------------------------------------\r\nFILE HEADER\r\n-----------------------------------------------------------------\r\n\r\nfile:       TokenState.sol\r\nversion:    1.0\r\nauthors:    Anton Jurisevic\r\n            Dominic Romanowski\r\n\r\ndate:       2018-04-03\r\nchecked:    Mike Spain\r\napproved:   Samuel Brooks\r\n\r\nrepo:       https://github.com/Havven/havven\r\ncommit:     fa705dd2feabc9def03bce135f6a153a4b70b111\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nCONTRACT DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nAn Owned contract, to be inherited by other contracts.\r\nRequires its owner to be explicitly set in the constructor.\r\nProvides an onlyOwner access modifier.\r\n\r\nTo change owner, the current owner must nominate the next owner,\r\nwho then has to accept the nomination. The nomination can be\r\ncancelled before it is accepted by the new owner by having the\r\nprevious owner change the nomination (setting it to 0).\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    function Owned(address _owner)\r\n        public\r\n    {\r\n        owner = _owner;\r\n    }\r\n\r\n    function nominateOwner(address _owner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership()\r\n        external\r\n    {\r\n        require(msg.sender == nominatedOwner);\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nCONTRACT DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA contract that holds the state of an ERC20 compliant token.\r\n\r\nThis contract is used side by side with external state token\r\ncontracts, such as Havven and EtherNomin.\r\nIt provides an easy way to upgrade contract logic while\r\nmaintaining all user balances and allowances. This is designed\r\nto to make the changeover as easy as possible, since mappings\r\nare not so cheap or straightforward to migrate.\r\n\r\nThe first deployed contract would create this state contract,\r\nusing it as its store of balances.\r\nWhen a new contract is deployed, it links to the existing\r\nstate contract, whose owner would then change its associated\r\ncontract to the new one.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\ncontract TokenState is Owned {\r\n\r\n    // the address of the contract that can modify balances and allowances\r\n    // this can only be changed by the owner of this contract\r\n    address public associatedContract;\r\n\r\n    // ERC20 fields.\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    function TokenState(address _owner, address _associatedContract)\r\n        Owned(_owner)\r\n        public\r\n    {\r\n        associatedContract = _associatedContract;\r\n        emit AssociatedContractUpdated(_associatedContract);\r\n    }\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    // Change the associated contract to a new address\r\n    function setAssociatedContract(address _associatedContract)\r\n        external\r\n        onlyOwner\r\n    {\r\n        associatedContract = _associatedContract;\r\n        emit AssociatedContractUpdated(_associatedContract);\r\n    }\r\n\r\n    function setAllowance(address tokenOwner, address spender, uint value)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        allowance[tokenOwner][spender] = value;\r\n    }\r\n\r\n    function setBalanceOf(address account, uint value)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        balanceOf[account] = value;\r\n    }\r\n\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyAssociatedContract\r\n    {\r\n        require(msg.sender == associatedContract);\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AssociatedContractUpdated(address _associatedContract);\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_associatedContract\",\"type\":\"address\"}],\"name\":\"setAssociatedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"associatedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBalanceOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_associatedContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_associatedContract\",\"type\":\"address\"}],\"name\":\"AssociatedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]", "ContractName": "TokenState", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b10c85274d2a58ddec72c1d826e75256ff93dead000000000000000000000000523630976eb6147621b5c31c781ebe2ec2a806e0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://44a5ac85fb2d68ff813fbafcb54f31fb21f08e71c140891734ee5d014bfb4bc9"}]}