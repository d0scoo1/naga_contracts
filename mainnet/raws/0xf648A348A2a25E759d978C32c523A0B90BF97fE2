{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// File: iface/IERC20.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: iface/IPriceController.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPriceController {\r\n    /// @dev Get price\r\n    /// @param token mortgage asset address\r\n    /// @param uToken underlying asset address\r\n    /// @param payback return address of excess fee\r\n    /// @return tokenPrice Mortgage asset price(1 ETH = ? token)\r\n    /// @return pTokenPrice PToken price(1 ETH = ? pToken)\r\n    function getPriceForPToken(\r\n    \taddress token, \r\n        address uToken,\r\n        address payback\r\n\t) external payable returns (uint256 tokenPrice, uint256 pTokenPrice);\r\n}\r\n// File: iface/INestPriceFacadeForNest4.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface INestPriceFacadeForNest4 {\r\n    function triggeredPriceInfo(\r\n        uint channelId, \r\n        uint[] calldata pairIndices,\r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n}\r\n// File: PriceController2.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract PriceController2 is IPriceController {\r\n\r\n    // Nest price\r\n    INestPriceFacadeForNest4 _nestBatchPlatform;\r\n    // usdt address\r\n    address constant USDT_ADDRESS = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    // usdt base amount\r\n    uint256 constant BASE_USDT_AMOUNT = 2000 ether;\r\n    // Channel id\r\n    uint256 constant CHANNELID = 0;\r\n    // pair index\r\n    mapping(address => uint256) addressToPriceIndex;\r\n\r\n    /// @dev Initialization method\r\n    /// @param nestBatchPlatform Nest price contract\r\n\tconstructor (address nestBatchPlatform) {\r\n\t\t_nestBatchPlatform = INestPriceFacadeForNest4(nestBatchPlatform);\r\n        addressToPriceIndex[address(0x0316EB71485b0Ab14103307bf65a021042c6d380)] = 0;\r\n        addressToPriceIndex[address(0x0)] = 1;\r\n        addressToPriceIndex[address(0x04abEdA201850aC0124161F037Efd70c74ddC74C)] = 2;\r\n    }\r\n\r\n    function getAddressToPriceIndex(\r\n        address tokenAddress\r\n    ) public view returns(uint256) {\r\n        return addressToPriceIndex[tokenAddress];\r\n    }\r\n\r\n    /// @dev Get price\r\n    /// @param token mortgage asset address\r\n    /// @param uToken underlying asset address\r\n    /// @param payback return address of excess fee\r\n    /// @return tokenPrice Mortgage asset price(2000U = ? token)\r\n    /// @return pTokenPrice PToken price(2000U = ? pToken)\r\n    function getPriceForPToken(\r\n        address token, \r\n        address uToken,\r\n        address payback\r\n    ) public payable override returns (\r\n        uint256 tokenPrice,\r\n        uint256 pTokenPrice\r\n    ) {\r\n        if(uToken == address(USDT_ADDRESS)) {\r\n            uint256[] memory pricesIndex = new uint256[](1);\r\n            pricesIndex[0] = addressToPriceIndex[token];\r\n            uint256[] memory prices = _nestBatchPlatform.triggeredPriceInfo{value:msg.value}(CHANNELID, pricesIndex, payback);\r\n            require(prices[2] > 0, \"Log:PriceController:!avg\");\r\n            return(prices[2], BASE_USDT_AMOUNT);\r\n        } else {\r\n            uint256[] memory pricesIndex = new uint256[](2);\r\n            pricesIndex[0] = addressToPriceIndex[token];\r\n            pricesIndex[1] = addressToPriceIndex[uToken];\r\n            uint256[] memory prices = _nestBatchPlatform.triggeredPriceInfo{value:msg.value}(CHANNELID, pricesIndex, payback);\r\n            require(prices[2] > 0 && prices[6] > 0, \"Log:PriceController:!avg\");\r\n            return(prices[2], prices[6]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestBatchPlatform\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getAddressToPriceIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payback\",\"type\":\"address\"}],\"name\":\"getPriceForPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pTokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "PriceController2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "6666", "ConstructorArguments": "000000000000000000000000e544cf993c7d477c7ef8e91d28aca250d135aa03", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e4d5bccfedffde74d2057580af6fb3140ff22af552907a08ac98fb27fa2fd0f4"}]}