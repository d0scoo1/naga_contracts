{"status": "1", "message": "OK", "result": [{"SourceCode": "////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../token/ERC20/IERC20.sol\";\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.0;\r\n\r\n////import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n////import \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n////import \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\n////import \"@openzeppelin/contracts/security/Pausable.sol\";\r\ncontract QuantMaster is Initializable, Ownable, Pausable {\r\n\r\n    address public  MARTIAN;\r\n    address public pending_martian;\r\n    \r\n    mapping( address => mapping(address => uint256) ) public balances;\r\n    struct Project{\r\n        uint256 projectId;\r\n        uint256 strategyId;\r\n        address token;// foregift token contract address,eth:0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n        address investor;\r\n        address strategist;\r\n        uint256 foregift;\r\n        uint256 investment;\r\n        uint256 balance;\r\n        uint256 totalFee;\r\n        uint256 forVotesRewards;\r\n        uint256 endblock; // The end date of the project. In 5 days after this date, if the status == 1, the user can withdraw the pledge deposit\r\n        uint256 status; //1,creative;2.end;3.forceSettle\r\n    }\r\n\r\n    /// projectid-->project detail\r\n    mapping( uint256 => Project) public projects;\r\n\r\n    /// voter address => (strategyId => rewardsDdebts)\r\n    mapping( address => mapping( uint256 => uint256)) public rewardsDebts;\r\n\r\n    event LAUNCH(address investor,uint256 projectId,uint256 foregifts,address token);\r\n    event WITHDRAW(address withdrawer, uint256 amount, uint256 balance);\r\n    event FORCESETTLE(address investor,uint256 amount);\r\n    event DEPOSIT(address investor,uint256 addAmount,uint256 foregift);\r\n    event DEPOSITFEE(address investor,uint256 projectid,uint256 serviceFee,uint256 balance);\r\n    event ENDPROJECT(address martin, uint256 projectid, uint256 totalFee, uint256 strategyFee,uint256 returnForegift);\r\n    event SETTLEMENT(address martin, uint256 projectid, uint256 totalFee, uint256 strategyFee);\r\n    event ADDSTRATEGY(uint256 strategyId, uint256 proposalId,uint256 forVotes);\r\n    event CLAIMREWARDS(address voter, uint256 strategyId, uint256 rewards);\r\n    event SETPROTOCOLRATES(uint24 treasuryRate, uint24 supportRate, uint24 labsRate);\r\n\r\n    constructor(address _martian){\r\n        MARTIAN = _martian;\r\n    }\r\n    \r\n    // function initialize(address _martian) public initializer {\r\n    //     MARTIAN = _martian;\r\n    // }\r\n\r\n    function setPendingMartian(address _martian) external {\r\n        require(MARTIAN == msg.sender && _martian!=address(0) && MARTIAN != _martian, \"MUST MARTIAN\");\r\n        pending_martian = _martian;\r\n    }\r\n\r\n    function acceptPendingMartian() external {\r\n        require(msg.sender == pending_martian,\"ERROR ACCOUNT\");\r\n        MARTIAN = pending_martian;\r\n    }\r\n\r\n\r\n    ///@dev Create a new quantitative project, launch by the investor,If investors have unwithdraw funds, they will be used first.\r\n    /// Before confirming the transaction, the backend must check whether each parameter is correct.\r\n    ///@param _projectId quant prj id, from quant backend\r\n    ///@param _strategyId strategy id, from quant backend\r\n    ///@param _foregift Estimated project fee\r\n    ///@param _token foregift token contract,eth:0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    ///@param _strategist strategist address,from quant backend\r\n    function launch(uint256 _projectId, uint256 _strategyId, uint256 _foregift, address _token, address _strategist) payable external whenNotPaused {\r\n        require(_foregift>0 && _token!=address(0) && _strategist!=address(0),\"INVALID PARAM\");\r\n        Project storage project = projects[_projectId];\r\n        require(project.projectId == 0,\"PROJECT EXIST\");\r\n\r\n        uint256 inbalance = balances[msg.sender][_token];\r\n        uint256 amount = _foregift;\r\n        if(inbalance > 0){ //The investor still has undrawn funds\r\n            if(inbalance >= _foregift){\r\n                balances[msg.sender][_token] -= _foregift;\r\n            }else{\r\n                balances[msg.sender][_token] = 0;\r\n                amount = _foregift - inbalance;\r\n            }\r\n        }\r\n\r\n        if(_token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)){\r\n            require(msg.value >= amount, \"INSUFFICIENT FOREGIFT\");\r\n            if(msg.value > amount){\r\n                payable(msg.sender).transfer(msg.value - amount);\r\n            }\r\n        }else{\r\n            IERC20(_token).transferFrom(msg.sender, address(this), amount);\r\n        }\r\n        \r\n        \r\n        project.projectId = _projectId;\r\n        project.strategyId = _strategyId;\r\n        project.token = _token;\r\n        project.foregift = _foregift;\r\n        project.strategist = _strategist;\r\n        project.investor = msg.sender;\r\n        project.status = 1;       \r\n        emit LAUNCH(msg.sender, _projectId, _foregift,_token);\r\n    }\r\n\r\n    ///@dev Backend query project info\r\n    ///@param _projectId project Id \r\n    ///@return project struct Project. project.projectId = 0 if _projectId does not exist\r\n    function query(uint256 _projectId) external view returns(Project memory project){\r\n        return projects[_projectId];\r\n    }\r\n\r\n    ///@dev When the investor income is close to the forgive, the investor needs to pay a service fee\r\n    ///@param _projectId project\r\n    ///@param _serviceFee service fee,from backend calculate\r\n    function depositFee(uint256 _projectId,uint256 _serviceFee) payable external {\r\n        Project storage project = projects[_projectId];\r\n        require(project.investor == msg.sender, \"NON-INVESTOR\");\r\n        require(project.status == 1 && project.investor == msg.sender, \"ERROR PROJECT\");\r\n        if(project.token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)){\r\n            require(msg.value >= _serviceFee, \"INSUFFICIENT FUNDS\");\r\n            if(msg.value > _serviceFee){\r\n                payable(msg.sender).transfer(msg.value - _serviceFee);\r\n            }\r\n        }else{\r\n            require(IERC20(project.token).balanceOf(msg.sender) >= _serviceFee,\"INSUFFICIENT FUNDS\");\r\n            IERC20(project.token).transferFrom(msg.sender, address(this), _serviceFee);\r\n        }\r\n        project.balance += _serviceFee;\r\n\r\n        emit DEPOSITFEE(msg.sender, _projectId, _serviceFee,project.balance);\r\n    }\r\n\r\n    ///@dev End project,settle strategist service fee,returns foregift to investor\r\n    ///@param _projectId project ID\r\n    ///@param _totalFee total service fee\r\n    ///@param _strategyFee strategist service fee\r\n    function endProject(uint256 _projectId, uint256 _totalFee, uint256 _strategyFee) external {\r\n        require(MARTIAN == msg.sender, \"MUST MARTIAN\");\r\n        Project storage project = projects[_projectId];\r\n        require(project.projectId != 0, \"ERROR PROJECT\");\r\n\r\n        settlement(_projectId,_totalFee,_strategyFee,true, true);\r\n    }\r\n\r\n    ///@dev MTE Backend call settlement\r\n    ///@param _projectId project id \r\n    ///@param _totalFee project total service fee = strategyfee + platform fee\r\n    ///@param _strategyFee stategist service fee\r\n    ///@param _useForegift Whether to use the forgift to supplement the service fee\r\n    ///@param _endProjct end project, return foregift/service balance\r\n    function settlement(uint256 _projectId, uint256 _totalFee, uint256 _strategyFee, bool _useForegift, bool _endProjct) public whenNotPaused{\r\n        require(MARTIAN == msg.sender || msg.sender == address(this), \"MUST MARTIAN\");\r\n        require(_totalFee >= _strategyFee, \"TOTALFEE < STRATEGYFEE\");      \r\n\r\n        Project storage project = projects[_projectId];\r\n        require(project.projectId > 0, \"INVALID PID\");\r\n        uint256 tokenbalance = project.token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) ? address(this).balance : IERC20(project.token).balanceOf(address(this));\r\n        uint256 projecttoken = project.foregift + project.balance;\r\n\r\n        // Use foregift to replenish service fee deficiencies\r\n        if(_useForegift){\r\n            require(project.foregift + project.balance >= _totalFee, \"INSUFFICENT FUNDS\");\r\n            if(project.balance < _totalFee){\r\n                project.foregift -= (_totalFee - project.balance);\r\n                project.balance = 0;\r\n            }else{\r\n                project.balance -= _totalFee;\r\n            }\r\n        }else{\r\n            require(project.balance >= _totalFee, \"INSUFFICENT FUNDS\");\r\n            project.balance -= _totalFee;\r\n        }\r\n\r\n        if(_totalFee>0){\r\n            if(project.token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)){\r\n                payable(project.strategist).transfer(_totalFee);\r\n            }else{\r\n                IERC20(project.token).transfer(project.strategist,  _totalFee);  \r\n            }\r\n        }      \r\n        \r\n        //Return foregift,transfer token(not MTE) to investor\r\n        uint256 returnForegift = project.foregift + project.balance;\r\n        if(_endProjct && returnForegift > 0){\r\n        \r\n            \r\n            project.foregift = 0;\r\n            project.balance = 0;\r\n\r\n            //eth\r\n            if(project.token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)){\r\n                if(address(this).balance < returnForegift){\r\n                   returnForegift =  address(this).balance;\r\n                }\r\n                payable(project.investor).transfer(returnForegift);\r\n            }else{\r\n                if(IERC20(project.token).balanceOf(address(this)) < returnForegift ){\r\n                    returnForegift = IERC20(project.token).balanceOf(address(this));\r\n                }\r\n                IERC20(project.token).transfer(project.investor, returnForegift);\r\n            }\r\n        }\r\n        if(_endProjct){\r\n            project.status = 2;\r\n            emit ENDPROJECT(msg.sender, _projectId, _totalFee, _strategyFee, returnForegift);\r\n        }\r\n\r\n        /// Make sure there is no theft\r\n        uint256 tokenbalance_ = project.token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) ? address(this).balance : IERC20(project.token).balanceOf(address(this));\r\n        assert( tokenbalance_ >= tokenbalance - projecttoken );\r\n\r\n        emit SETTLEMENT(msg.sender, _projectId, _totalFee, _strategyFee);\r\n    }\r\n\r\n    ///@dev Investor add foregift\r\n    function deposit(uint256 _projectId, uint256 _addAmount) payable external{\r\n        Project storage project = projects[_projectId];\r\n        require(project.investor == msg.sender,\"ERROR PROJECTID\");\r\n\r\n        if(project.token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)){\r\n            require(msg.value >= _addAmount, \"INSUFFICIENT\");\r\n            if(msg.value > _addAmount){\r\n                payable(msg.sender).transfer(msg.value - _addAmount);\r\n            }\r\n        }else{\r\n            IERC20(project.token).transferFrom(msg.sender, address(this), _addAmount);\r\n        }\r\n\r\n        project.foregift += _addAmount;\r\n        emit DEPOSIT(msg.sender,_addAmount,project.foregift);\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        if (_paused) _pause();\r\n        else _unpause();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_martian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"}],\"name\":\"ADDSTRATEGY\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"CLAIMREWARDS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"foregift\",\"type\":\"uint256\"}],\"name\":\"DEPOSIT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DEPOSITFEE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"martin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnForegift\",\"type\":\"uint256\"}],\"name\":\"ENDPROJECT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FORCESETTLE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"foregifts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LAUNCH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"treasuryRate\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"supportRate\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"labsRate\",\"type\":\"uint24\"}],\"name\":\"SETPROTOCOLRATES\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"martin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyFee\",\"type\":\"uint256\"}],\"name\":\"SETTLEMENT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MARTIAN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingMartian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serviceFee\",\"type\":\"uint256\"}],\"name\":\"depositFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyFee\",\"type\":\"uint256\"}],\"name\":\"endProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_foregift\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending_martian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"foregift\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotesRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"query\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"foregift\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotesRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"internalType\":\"struct QuantMaster.Project\",\"name\":\"project\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_martian\",\"type\":\"address\"}],\"name\":\"setPendingMartian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useForegift\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_endProjct\",\"type\":\"bool\"}],\"name\":\"settlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "QuantMaster", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f880021ea30df0d8d56a85a717d7351da504370b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9f980ab33195332264936ae0ed647181e91037f3e7e0b7d88d5cdf9e242b439"}]}