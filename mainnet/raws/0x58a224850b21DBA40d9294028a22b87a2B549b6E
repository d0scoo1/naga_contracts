{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LogoNftDescriptor.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @title  Logo Nft Descriptor\\n/// @notice Descriptor which allow configuratin of logo nft\\npragma solidity ^0.8.0;\\n\\nimport './common/LogoHelper.sol';\\nimport './common/LogoModel.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract LogoNftDescriptor is Ownable {\\n  /// @notice Permanently seals the contract from being modified by owner\\n  bool public contractSealed;\\n\\n  string public namePrefix = 'DO NOT PURCHASE. Logo Container #'; \\n  string public description = 'DO NOT PURCHASE. Logo containers point to other NFTs to create an image.'\\n                              ' Purchasing this NFT will not also purchase the NFTs creating the image.'\\n                              ' There is an infinite supply of logo containers and they can be minted for free.';\\n\\n  modifier onlyWhileUnsealed() {\\n    require(!contractSealed, 'Contract is sealed');\\n    _;\\n  }\\n\\n  constructor() Ownable() {}\\n\\n  /// @notice Sets the prefix of a logo container name used by tokenURI\\n  /// @param _namePrefix, prefix to use for the logo container\\n  function setNamePrefix(string memory _namePrefix) external onlyOwner onlyWhileUnsealed {\\n    namePrefix = _namePrefix;\\n  }\\n\\n  /// @notice Sets the description of a logo container name used by tokenUri\\n  /// @param _description, description to use for the logo container\\n  function setDescription(string memory _description) external onlyOwner onlyWhileUnsealed {\\n    description = _description;\\n  }\\n\\n  /// @notice Gets attributes for attributes used in tokenURI\\n  function getAttributes(Model.Logo memory logo) public view returns (string memory) {\\n    string memory attributes;\\n    for (uint i; i < logo.layers.length; i++) {\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Layer #', LogoHelper.toString(i), ' Address\\\", \\\"value\\\": \\\"0x', LogoHelper.toString(logo.layers[i].contractAddress), '\\\"}, '));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Layer #', LogoHelper.toString(i),  ' Token Id\\\", \\\"value\\\": \\\"', LogoHelper.toString(logo.layers[i].tokenId), '\\\"}, '));\\n    }\\n    attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Text Address\\\", \\\"value\\\": \\\"0x', LogoHelper.toString(logo.text.contractAddress), '\\\"}, '));\\n    attributes = string(abi.encodePacked('[', attributes, '{\\\"trait_type\\\": \\\"Text Token Id\\\", \\\"value\\\": \\\"', LogoHelper.toString(logo.text.tokenId), '\\\"}]'));\\n    return attributes;\\n  }\\n\\n  /// @notice Permananetly seals the contract from being modified\\n  function sealContract() external onlyOwner {\\n    contractSealed = true;\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/LogoHelper.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary LogoHelper {\\n  function getRotate(string memory text) public pure returns (string memory) {\\n    bytes memory byteString = bytes(text);\\n    string memory rotate = string(abi.encodePacked('-', toString(random(text) % 10 + 1)));\\n    for (uint i=1; i < byteString.length; i++) {\\n      uint nextRotate = random(rotate) % 10 + 1;\\n      if (i % 2 == 0) {\\n        rotate = string(abi.encodePacked(rotate, ',-', toString(nextRotate)));\\n      } else {\\n        rotate = string(abi.encodePacked(rotate, ',', toString(nextRotate)));\\n      }\\n    }\\n    return rotate;\\n  }\\n\\n  function getTurbulance(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory turbulance = decimalInRange(seed, max, magnitudeOffset);\\n    uint rand = randomInRange(turbulance, max, 0);\\n    return string(abi.encodePacked(turbulance, ', ', getDecimal(rand, magnitudeOffset)));\\n  }\\n\\n  function decimalInRange(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    uint rand = randomInRange(seed, max, 0);\\n    return getDecimal(rand, magnitudeOffset);\\n  }\\n\\n  // CORE HELPERS //\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomFromInt(uint256 seed) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(seed)));\\n  }\\n\\n  function randomInRange(string memory input, uint max, uint offset) public pure returns (uint256) {\\n    max = max - offset;\\n    return (random(input) % max) + offset;\\n  }\\n\\n  function equal(string memory a, string memory b) public pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n  }\\n\\n  function toString(uint256 value) public pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n        return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2*i] = char(hi);\\n      s[2*i+1] = char(lo);            \\n    }\\n    return string(s);\\n  }\\n\\nfunction char(bytes1 b) internal pure returns (bytes1 c) {\\n  if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n  else return bytes1(uint8(b) + 0x57);\\n}\\n  \\n  function getDecimal(uint val, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory decimal;\\n    if (val != 0) {\\n      for (uint i = 10; i < magnitudeOffset / val; i=10*i) {\\n        decimal = string(abi.encodePacked(decimal, '0'));\\n      }\\n    }\\n    decimal = string(abi.encodePacked('0.', decimal, toString(val)));\\n    return decimal;\\n  }\\n\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/common/LogoModel.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @notice Definition of Logo model\\npragma solidity ^0.8.0;\\n\\nlibrary Model {\\n\\n  /// @notice A logo container which holds layers of composable visual onchain assets\\n  struct Logo {\\n    uint16 width;\\n    uint16 height;\\n    LogoElement[] layers;\\n    LogoElement text;\\n  }\\n\\n  /// @notice A layer of a logo displaying a visual onchain asset\\n  struct LogoElement {\\n    address contractAddress;\\n    uint32 tokenId;\\n    uint8 translateXDirection;\\n    uint16 translateX;\\n    uint8 translateYDirection;\\n    uint16 translateY;\\n    uint8 scaleDirection;\\n    uint8 scaleMagnitude;\\n  }\\n\\n  /// @notice Data that can be set by logo owners and can be used in a composable onchain manner\\n  struct MetaData {\\n    string key;\\n    string value;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/common/LogoHelper.sol\": {\r\n        \"LogoHelper\": \"0xe4e64b52d86ba86c5553b0e9972cd30b509a40d9\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractSealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"translateXDirection\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"translateX\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"translateYDirection\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"translateY\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"scaleDirection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scaleMagnitude\",\"type\":\"uint8\"}],\"internalType\":\"struct Model.LogoElement[]\",\"name\":\"layers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"translateXDirection\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"translateX\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"translateYDirection\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"translateY\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"scaleDirection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scaleMagnitude\",\"type\":\"uint8\"}],\"internalType\":\"struct Model.LogoElement\",\"name\":\"text\",\"type\":\"tuple\"}],\"internalType\":\"struct Model.Logo\",\"name\":\"logo\",\"type\":\"tuple\"}],\"name\":\"getAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namePrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sealContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namePrefix\",\"type\":\"string\"}],\"name\":\"setNamePrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LogoNftDescriptor", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}