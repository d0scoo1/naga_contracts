{"status": "1", "message": "OK", "result": [{"SourceCode": "// https://kittyinu.com/\r\n// TG: KittyInuToken\r\n// Discord: KittyInuToken\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.3;\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n  function setFeeTo(address) external;\r\n  function setFeeToSetter(address) external;\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n      return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n      this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n      return msg.data;\r\n  }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n  function initialize(address, address) external;\r\n}\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n  function WETH() external pure returns (address);\r\n  function addLiquidity(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint amountADesired,\r\n      uint amountBDesired,\r\n      uint amountAMin,\r\n      uint amountBMin,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint amountA, uint amountB, uint liquidity);\r\n  function addLiquidityETH(\r\n      address token,\r\n      uint amountTokenDesired,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n  function removeLiquidity(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint liquidity,\r\n      uint amountAMin,\r\n      uint amountBMin,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint amountA, uint amountB);\r\n  function removeLiquidityETH(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint amountToken, uint amountETH);\r\n  function removeLiquidityWithPermit(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint liquidity,\r\n      uint amountAMin,\r\n      uint amountBMin,\r\n      address to,\r\n      uint deadline,\r\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountA, uint amountB);\r\n  function removeLiquidityETHWithPermit(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline,\r\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountToken, uint amountETH);\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  function swapTokensForExactTokens(\r\n      uint amountOut,\r\n      uint amountInMax,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n      external\r\n      returns (uint[] memory amounts);\r\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      returns (uint[] memory amounts);\r\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint amountETH);\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline,\r\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountETH);\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external;\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external payable;\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) { return 0; }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly { codehash := extcodehash(account) }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    return _functionCallWithValue(target, data, value, errorMessage);\r\n  }\r\n  function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else { revert(errorMessage); }\r\n    }\r\n  }\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n  address private _previousOwner;\r\n  uint256 private _lockTime;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n  function getUnlockTime() public view returns (uint256) {\r\n    return _lockTime;\r\n  }\r\n  function getTime() public view returns (uint256) {\r\n    return block.timestamp;\r\n  }\r\n  function lock(uint256 time) public virtual onlyOwner {\r\n    _previousOwner = _owner;\r\n    _owner = address(0);\r\n    _lockTime = block.timestamp + time;\r\n    emit OwnershipTransferred(_owner, address(0));\r\n  }\r\n  function unlock() public virtual {\r\n    require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n    require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n    emit OwnershipTransferred(_owner, _previousOwner);\r\n    _owner = _previousOwner;\r\n  }\r\n}\r\ncontract KittyInuToken is Context, IERC20, Ownable {\r\n\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n  event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n  event SwapETHForTokens(uint256 amountIn,address[] path);\r\n  event SwapTokensForETH( uint256 amountIn, address[] path);\r\n\r\n  modifier lockTheSwap {\r\n    inSwapAndLiquify = true;\r\n    _;\r\n    inSwapAndLiquify = false;\r\n  }\r\n\r\n  mapping (address => uint256) _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n  mapping (address => bool) public nonfee;\r\n  mapping (address => bool) public nonlimit;\r\n  mapping (address => bool) public isBlacklisted;\r\n\r\n  uint256 private _totalSupply = 100 * 10**9 * 10**9;\r\n  uint8 private _decimals = 9;\r\n  uint256 public _liquidity = 2;\r\n  uint256 public _marketing = 5;\r\n  uint256 public _developer = 5;\r\n  uint256 public maxamount = 4 * 10**9 * 10**9;\r\n  uint256 public maxwallet = 5 * 10**9 * 10**9;\r\n  uint256 private minbeforetrading = 1000 * 10**9;\r\n  address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n  uint256 public _antidump = 0;\r\n  uint256 public _totaltax = 0;\r\n  uint256 public _cooldown = 0;\r\n\r\n  IUniswapV2Router02 public uniswapV2Router;\r\n  address public uniswapV2Pair;\r\n\r\n  bool inSwapAndLiquify;\r\n  bool public swapAndLiquifyEnabled = true;\r\n  bool public swapAndLiquifyByLimitOnly = false;\r\n  bool public checkWalletLimit = true;\r\n\r\n  address payable public marketingWallet = payable(0x79602fAd51A1047453Ac9945C0464a091188F1bb);\r\n  address payable public rewardsWallet = payable(0xdAEaDdcb9130182986d0f55a2ecC4fcd97575885);\r\n  address payable public devWallet;\r\n\r\n  string private _name = \"Kitty Inu\";\r\n  string private _symbol = \"Kitty\";\r\n\r\n  constructor() {\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n    uniswapV2Router = _uniswapV2Router;\r\n    _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n\r\n    nonfee[owner()] = true;\r\n    nonfee[address(this)] = true;\r\n\r\n    _totaltax = _liquidity.add(_marketing).add(_developer);\r\n    _cooldown = _totaltax.add(_antidump);\r\n    devWallet = _msgSender();\r\n\r\n    nonlimit[owner()] = true;\r\n    nonlimit[address(uniswapV2Pair)] = true;\r\n\r\n    _balances[_msgSender()] = _totalSupply;\r\n    emit Transfer(address(0), _msgSender(), _totalSupply);\r\n  }\r\n    receive() external payable {}\r\n\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n  function allowance(address owner, address spender) public view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n  function Minbeforetrading() public view returns (uint256) {\r\n    return minbeforetrading;\r\n  }\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n  function _approve(address owner, address spender, uint256 amount) private {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n  function blacklistAddress(address account, bool newValue) public onlyOwner {\r\n    isBlacklisted[account] = newValue;\r\n  }\r\n  function newnonfee(address account, bool newValue) public onlyOwner {\r\n    nonfee[account] = newValue;\r\n  }\r\n  function changetax(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newRewardsTax, uint256 newExtraFeeOnSell) external {\r\n    require(msg.sender == devWallet);\r\n    _liquidity = newLiquidityTax;\r\n    _marketing = newMarketingTax;\r\n    _developer = newRewardsTax;\r\n    _antidump = newExtraFeeOnSell;\r\n    _totaltax = _liquidity.add(_marketing).add(_developer);\r\n    _cooldown = _totaltax.add(_antidump);\r\n  }\r\n  function setMaxTxAmount(uint256 maxTxAmount) external {\r\n    require(msg.sender == devWallet);\r\n    maxamount = maxTxAmount;\r\n  }\r\n  function enableDisableWalletLimit(bool newValue) external onlyOwner {\r\n    checkWalletLimit = newValue;\r\n  }\r\n  function newnonlimit(address holder, bool exempt) external onlyOwner {\r\n    nonlimit[holder] = exempt;\r\n  }\r\n  function setWalletLimit(uint256 newLimit) external {\r\n    require(msg.sender == devWallet);\r\n    maxwallet  = newLimit;\r\n  }\r\n  function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\r\n    minbeforetrading = newLimit;\r\n  }\r\n  function setMarketingWallet(address newAddress) external onlyOwner() {\r\n    marketingWallet = payable(newAddress);\r\n  }\r\n  function setRewardsWallet(address newAddress) external onlyOwner() {\r\n    rewardsWallet = payable(newAddress);\r\n  }\r\n  function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n    recipient.transfer(amount);\r\n  }\r\n  function changeRouterVersion(address newRouterAddress) public onlyOwner returns(address newPairAddress) {\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouterAddress);\r\n    newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n    if(newPairAddress == address(0)) {\r\n      newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n    }\r\n    uniswapV2Pair = newPairAddress;\r\n    uniswapV2Router = _uniswapV2Router;\r\n  }\r\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n      _transfer(sender, recipient, amount);\r\n      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n      return true;\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    require(!isBlacklisted[sender] && !isBlacklisted[recipient], \"To/from address is blacklisted!\");\r\n    require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n    if(inSwapAndLiquify) {\r\n      return _basicTransfer(sender, recipient, amount);\r\n    } else {\r\n      if(sender != devWallet && recipient != devWallet) {\r\n        require(amount <= maxamount, \"Transfer amount exceeds the maxTxAmount.\");\r\n      }\r\n\r\n      uint256 contractTokenBalance = balanceOf(address(this));\r\n      bool overMinimumTokenBalance = contractTokenBalance >= minbeforetrading;\r\n\r\n      if(overMinimumTokenBalance && !inSwapAndLiquify && sender != uniswapV2Pair && swapAndLiquifyEnabled) {\r\n        if(swapAndLiquifyByLimitOnly) {\r\n          contractTokenBalance = minbeforetrading;\r\n        }\r\n        swapAndLiquify(contractTokenBalance);\r\n      }\r\n\r\n      _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n      uint256 finalAmount = (nonfee[sender] || nonfee[recipient]) ? amount : takeFee(sender, recipient, amount);\r\n\r\n      if(checkWalletLimit && !nonlimit[recipient]) {\r\n        require(balanceOf(recipient).add(finalAmount) <= maxwallet);\r\n      }\r\n\r\n      _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n      emit Transfer(sender, recipient, finalAmount);\r\n      return true;\r\n    }\r\n  }\r\n  function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n    _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n  }\r\n  function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n    uint256 tokensForLP = tAmount.div(_totaltax).mul(_liquidity).div(2);\r\n    uint256 tokensForSwap = tAmount.sub(tokensForLP);\r\n    swapTokensForEth(tokensForSwap);\r\n    uint256 amountReceived = address(this).balance;\r\n    uint256 totalFee = _totaltax.sub(_liquidity.div(2));\r\n    uint256 amountLiquidity = amountReceived.mul(_liquidity).div(totalFee).div(2);\r\n    uint256 amountRewards = amountReceived.mul(_developer).div(totalFee);\r\n    uint256 amountMarketing = amountReceived.sub(amountLiquidity).sub(amountRewards);\r\n    transferToAddressETH(marketingWallet, amountMarketing);\r\n    transferToAddressETH(rewardsWallet, amountRewards);\r\n    addLiquidity(tokensForLP, amountLiquidity);\r\n  }\r\n  function swapTokensForEth(uint256 tokenAmount) private {\r\n    // generate the uniswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = uniswapV2Router.WETH();\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n    // make the swap\r\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      tokenAmount,\r\n      0, // accept any amount of ETH\r\n      path,\r\n      address(this), // The contract\r\n      block.timestamp\r\n    );\r\n    emit SwapTokensForETH(tokenAmount, path);\r\n  }\r\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n    // approve token transfer to cover all possible scenarios\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n    // add the liquidity\r\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n      address(this),\r\n      tokenAmount,\r\n      0, // slippage is unavoidable\r\n      0, // slippage is unavoidable\r\n      owner(),\r\n      block.timestamp\r\n    );\r\n  }\r\n  function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n    uint256 feeAmount = recipient == uniswapV2Pair ? amount.mul(_cooldown).div(100) : amount.mul(_totaltax).div(100);\r\n    _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n    emit Transfer(sender, address(this), feeAmount);\r\n    return amount.sub(feeAmount);\r\n  }\r\n  function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n    swapAndLiquifyEnabled = _enabled;\r\n    emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n  }\r\n  function setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {\r\n    swapAndLiquifyByLimitOnly = newValue;\r\n  }\r\n  function getCirculatingSupply() public view returns (uint256) {\r\n    return _totalSupply.sub(balanceOf(deadAddress));\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Minbeforetrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_antidump\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_developer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totaltax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardsTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newExtraFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"changetax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxwallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"newnonfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"newnonlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonfee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonlimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyByLimitOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KittyInuToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://786a4c39a6bf6234dc6cac11d003d3b0ac7e6ec67482c4f0b8d6555e58d84438"}]}