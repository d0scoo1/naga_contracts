{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**********************************************************\r\nPublished Via\r\nHackerLabs Proof Platform\r\n\r\nVisit: \r\nhttps://hackerlabsdao.com/\r\nhttps://www.verifiedbyproof.com/\r\n                                                          \r\n ***********************************************************************************/\r\n\r\n /**********************************************************************************\r\n   CRAZY RICH DAO\r\n                                                                                     \r\n  ***********************************************************************************/\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n\r\n\r\n////import \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\r\n////import \"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n////import \"openzeppelin-solidity/contracts/utils/Context.sol\";\r\n////import \"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\";\r\n////import \"openzeppelin-solidity/contracts/access/Ownable.sol\";\r\n\r\ninterface IBURNER {\r\n    function burnEmUp() external payable;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint amountToken,\r\n            uint amountETH,\r\n            uint liquidity\r\n        );\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n}\r\n\r\ninterface ITeamFinanceLocker {\r\n    function lockTokens(\r\n        address _tokenAddress,\r\n        address _withdrawalAddress,\r\n        uint256 _amount,\r\n        uint256 _unlockTime\r\n    ) external payable returns (uint256 _id);\r\n}\r\n\r\ninterface ITokenTemplate {\r\n    function swapTradingStatus() external;\r\n\r\n    function setLaunchedAt() external;\r\n\r\n    function cancelToken() external;\r\n}\r\n\r\nlibrary Fees {\r\n    struct allFees {\r\n        uint256 treasuryFee;\r\n        uint256 treasuryFeeOnSell;\r\n        uint256 lpFee;\r\n        uint256 lpFeeOnSell;\r\n        uint256 marketingFee;\r\n        uint256 marketingFeeOnSell;\r\n    }\r\n}\r\n\r\ncontract TokenTemplate is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n    address payable public hldBurnerAddress;\r\n    address public hldAdmin;\r\n\r\n    bool public restrictWhales = true;\r\n\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isTxLimitExempt;\r\n    mapping(address => bool) public isDividendExempt;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public hldFee = 2;\r\n\r\n    uint256 public treasuryFee;\r\n    uint256 public lpFee;\r\n    uint256 public marketingFee;\r\n\r\n    uint256 public treasuryFeeOnSell;\r\n    uint256 public lpFeeOnSell;\r\n    uint256 public marketingFeeOnSell;\r\n\r\n    uint256 public totalFee;\r\n    uint256 public totalFeeIfSelling;\r\n\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n    address public factory;\r\n    address public tokenOwner;\r\n    address public tokenSwap;\r\n    address payable public treasuryWallet;\r\n    address payable public marketingWallet;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingStatus = true;\r\n\r\n    mapping(address => bool) private bots;\r\n\r\n    uint256 public _maxTxAmount;\r\n    uint256 public _walletMax;\r\n    uint256 public swapThreshold;\r\n\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        uint256 initialSupply,\r\n        address owner,\r\n        address marketing,\r\n        address treasury,\r\n        address swapContract,\r\n        address routerAddress,\r\n        address initialHldAdmin,\r\n        address initialHldBurner,\r\n        Fees.allFees memory fees\r\n    ) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        uint256 tokenSwapAmount = (initialSupply * 30) / 100;\r\n        uint256 ownerAmount = (initialSupply * 48) / 100;\r\n        tokenSwap = swapContract;\r\n        _totalSupply += initialSupply;\r\n        _balances[msg.sender] +=\r\n            initialSupply -\r\n            (tokenSwapAmount + ownerAmount);\r\n        _balances[tokenSwap] += tokenSwapAmount;\r\n        _balances[owner] += ownerAmount;\r\n\r\n        _maxTxAmount = (initialSupply * 1) / 100;\r\n        _walletMax = (initialSupply * 2) / 100;\r\n        swapThreshold = (initialSupply * 5) / 4000;\r\n\r\n        router = IUniswapV2Router02(routerAddress);\r\n        pair = IUniswapV2Factory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        factory = msg.sender;\r\n\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[factory] = true;\r\n        isFeeExempt[swapContract] = true;\r\n\r\n        isTxLimitExempt[owner] = true;\r\n        isTxLimitExempt[swapContract] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[factory] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n        isTxLimitExempt[ZERO] = true;\r\n\r\n        treasuryFee = fees.treasuryFee;\r\n        lpFee = fees.lpFee;\r\n        marketingFee = fees.marketingFee;\r\n\r\n        treasuryFeeOnSell = fees.treasuryFeeOnSell;\r\n        lpFeeOnSell = fees.lpFeeOnSell;\r\n        marketingFeeOnSell = fees.marketingFeeOnSell;\r\n\r\n        totalFee = marketingFee.add(lpFee).add(treasuryFee).add(hldFee);\r\n        totalFeeIfSelling = marketingFeeOnSell\r\n            .add(lpFeeOnSell)\r\n            .add(treasuryFeeOnSell)\r\n            .add(hldFee);\r\n\r\n        require(totalFee <= 12, \"Too high fee\");\r\n        require(totalFeeIfSelling <= 17, \"Too high fee\");\r\n\r\n        tokenOwner = owner;\r\n        marketingWallet = payable(marketing);\r\n        treasuryWallet = payable(treasury);\r\n        hldBurnerAddress = payable(initialHldBurner);\r\n        hldAdmin = initialHldAdmin;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyHldAdmin() {\r\n        require(\r\n            hldAdmin == _msgSender(),\r\n            \"Ownable: caller is not the hldAdmin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(tokenOwner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(factory == _msgSender(), \"Ownable: caller is not the factory\");\r\n        _;\r\n    }\r\n\r\n    //hldAdmin functions\r\n    function updateHldAdmin(address newAdmin) external virtual onlyHldAdmin {\r\n        hldAdmin = newAdmin;\r\n    }\r\n\r\n    function updateHldBurnerAddress(address newhldBurnerAddress)\r\n        external\r\n        onlyHldAdmin\r\n    {\r\n        hldBurnerAddress = payable(newhldBurnerAddress);\r\n    }\r\n\r\n    function setBots(address[] memory bots_) external onlyHldAdmin {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    //Factory functions\r\n    function swapTradingStatus() external onlyFactory {\r\n        tradingStatus = !tradingStatus;\r\n    }\r\n\r\n    function setLaunchedAt() external onlyFactory {\r\n        require(launchedAt == 0, \"already launched\");\r\n        launchedAt = block.timestamp;\r\n    }\r\n\r\n    function cancelToken() external onlyFactory {\r\n        isFeeExempt[address(router)] = true;\r\n        isTxLimitExempt[address(router)] = true;\r\n        isTxLimitExempt[tokenOwner] = true;\r\n        tradingStatus = true;\r\n    }\r\n\r\n    //Owner functions\r\n    function changeFees(\r\n        uint256 initialtreasuryFee,\r\n        uint256 initialtreasuryFeeOnSell,\r\n        uint256 initialLpFee,\r\n        uint256 initialLpFeeOnSell,\r\n        uint256 initialmarketingFee,\r\n        uint256 initialmarketingFeeOnSell\r\n    ) external onlyOwner {\r\n        treasuryFee = initialtreasuryFee;\r\n        lpFee = initialLpFee;\r\n        marketingFee = initialmarketingFee;\r\n\r\n        treasuryFeeOnSell = initialtreasuryFeeOnSell;\r\n        lpFeeOnSell = initialLpFeeOnSell;\r\n        marketingFeeOnSell = initialmarketingFeeOnSell;\r\n\r\n        totalFee = marketingFee.add(lpFee).add(treasuryFee).add(hldFee);\r\n        totalFeeIfSelling = marketingFeeOnSell\r\n            .add(lpFeeOnSell)\r\n            .add(treasuryFeeOnSell)\r\n            .add(hldFee);\r\n\r\n        require(totalFee <= 12, \"Too high fee\");\r\n        require(totalFeeIfSelling <= 17, \"Too high fee\");\r\n    }\r\n\r\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\r\n        require(launchedAt != 0, \"!launched\");\r\n        require(block.timestamp >= launchedAt + 24 hours, \"too soon\");\r\n        _maxTxAmount = newLimit;\r\n    }\r\n\r\n    function changeWalletLimit(uint256 newLimit) external onlyOwner {\r\n        require(launchedAt != 0, \"!launched\");\r\n        require(block.timestamp >= launchedAt + 24 hours, \"too soon\");\r\n        _walletMax = newLimit;\r\n    }\r\n\r\n    function changeRestrictWhales(bool newValue) external onlyOwner {\r\n        require(launchedAt != 0, \"!launched\");\r\n        require(block.timestamp >= launchedAt + 24 hours, \"too soon\");\r\n        restrictWhales = newValue;\r\n    }\r\n\r\n    function changeIsFeeExempt(address[] calldata holders, bool exempt) external onlyOwner {\r\n        for(uint256 i = 0 ; i < holders.length ; i++)\r\n        {\r\n           isFeeExempt[holders[i]] = exempt;\r\n            }\r\n    }\r\n\r\n    function changeIsTxLimitExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(launchedAt != 0, \"!launched\");\r\n        require(block.timestamp >= launchedAt + 24 hours, \"too soon\");\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function reduceHldFee() external onlyOwner {\r\n        require(hldFee == 2, \"!already reduced\");\r\n        require(launchedAt != 0, \"!launched\");\r\n        require(block.timestamp >= launchedAt + 72 hours, \"too soon\");\r\n\r\n        hldFee = 1;\r\n        totalFee = marketingFee.add(lpFee).add(treasuryFee).add(hldFee);\r\n        totalFeeIfSelling = marketingFeeOnSell\r\n            .add(lpFeeOnSell)\r\n            .add(treasuryFeeOnSell)\r\n            .add(hldFee);\r\n    }\r\n\r\n    function setmarketingWallet(address payable newmarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        marketingWallet = payable(newmarketingWallet);\r\n    }\r\n\r\n    function settreasuryWallet(address payable newTreasury) external onlyOwner {\r\n        treasuryWallet = payable(newTreasury);\r\n    }\r\n\r\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\r\n        tokenOwner = newOwnerWallet;\r\n    }\r\n\r\n    function changeSwapBackSettings(\r\n        bool enableSwapBack,\r\n        uint256 newSwapBackLimit\r\n    ) external onlyOwner {\r\n        swapAndLiquifyEnabled = enableSwapBack;\r\n        swapThreshold = newSwapBackLimit;\r\n    }\r\n\r\n    function delBot(address notbot) external onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function getCirculatingSupply() external view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(tradingStatus, \"!trading\");\r\n        require(!bots[sender] && !bots[recipient]);\r\n\r\n        if (inSwapAndLiquify) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"tx\");\r\n\r\n        if (!isTxLimitExempt[recipient] && restrictWhales) {\r\n            require(_balances[recipient].add(amount) <= _walletMax, \"wallet\");\r\n        }\r\n\r\n        if (\r\n            msg.sender != pair &&\r\n            !inSwapAndLiquify &&\r\n            swapAndLiquifyEnabled &&\r\n            _balances[address(this)] >= swapThreshold\r\n        ) {\r\n            swapBack();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient]\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeApplicable = pair == recipient\r\n            ? totalFeeIfSelling\r\n            : totalFee;\r\n        if (pair == recipient && block.timestamp < launchedAt + 24 hours) {\r\n            feeApplicable = totalFeeIfSelling + 8;\r\n        }\r\n        uint256 feeAmount = amount.mul(feeApplicable).div(100);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n        uint256 tokensToLiquify = _balances[address(this)];\r\n        uint256 amountToLiquify = tokensToLiquify.mul(lpFee).div(totalFee).div(\r\n            2\r\n        );\r\n        uint256 amountToSwap = tokensToLiquify.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance;\r\n        uint256 marketingBalance = amountETH.mul(marketingFee).div(totalFee);\r\n        uint256 hldBalance = amountETH.mul(hldFee).div(totalFee);\r\n\r\n        uint256 amountEthLiquidity = amountETH.mul(lpFee).div(totalFee).div(2);\r\n        uint256 amountEthTreasury = amountETH\r\n            .sub(marketingBalance)\r\n            .sub(hldBalance)\r\n            .sub(amountEthLiquidity);\r\n\r\n        if (amountETH > 0) {\r\n            IBURNER(hldBurnerAddress).burnEmUp{value: hldBalance}();\r\n            marketingWallet.transfer(marketingBalance);\r\n            treasuryWallet.transfer(amountEthTreasury);\r\n        }\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountEthLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                0x000000000000000000000000000000000000dEaD,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract ProofMigrationManager is Ownable {\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    struct proofToken {\r\n        bool status;\r\n        address pair;\r\n        address owner;\r\n        uint256 lockId;\r\n    }\r\n\r\n    mapping(address => proofToken) public validatedPairs;\r\n\r\n    address public hldAdmin;\r\n    address public routerAddress;\r\n    address public lockerAddress;\r\n    address public hldBurnerAddress;\r\n\r\n    event TokenCreated(address _address);\r\n\r\n    constructor(address initialRouterAddress, address initialHldBurner) {\r\n        routerAddress = initialRouterAddress;\r\n        hldBurnerAddress = initialHldBurner;\r\n        hldAdmin = msg.sender;\r\n    }\r\n\r\n    function createToken(\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        address marketingWallet,\r\n        address treasuryWallet,\r\n        address swapContract,\r\n        uint256 initialSupply,\r\n        uint256 initialtreasuryFee,\r\n        uint256 initialtreasuryFeeOnSell,\r\n        uint256 initialLpFee,\r\n        uint256 initialLpFeeOnSell,\r\n        uint256 initialmarketingFee,\r\n        uint256 initialmarketingFeeOnSell\r\n    ) external payable {\r\n        // disable trading\r\n\r\n        // require(unlockTime >= block.timestamp + 30 days, \"unlock under 30 days\");\r\n        require(msg.value >= 1 ether, \"not enough liquidity\");\r\n\r\n        //create token\r\n        Fees.allFees memory fees = Fees.allFees(\r\n            initialtreasuryFee,\r\n            initialtreasuryFeeOnSell,\r\n            initialLpFee,\r\n            initialLpFeeOnSell,\r\n            initialmarketingFee,\r\n            initialmarketingFeeOnSell\r\n        );\r\n        TokenTemplate newToken = new TokenTemplate(\r\n            tokenName,\r\n            tokenSymbol,\r\n            initialSupply,\r\n            msg.sender,\r\n            marketingWallet,\r\n            treasuryWallet,\r\n            swapContract,\r\n            routerAddress,\r\n            hldAdmin,\r\n            hldBurnerAddress,\r\n            fees\r\n        );\r\n        emit TokenCreated(address(newToken));\r\n\r\n        //add liquidity\r\n        newToken.approve(routerAddress, type(uint256).max);\r\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\r\n        router.addLiquidityETH{value: msg.value}(\r\n            address(newToken),\r\n            newToken.balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        newToken.setLaunchedAt();\r\n\r\n        validatedPairs[address(newToken)] = proofToken(\r\n            false,\r\n            newToken.pair(),\r\n            msg.sender,\r\n            0\r\n        );\r\n    }\r\n\r\n    function cancelToken(address tokenAddress) external {\r\n        require(validatedPairs[tokenAddress].owner == msg.sender, \"!owner\");\r\n        require(validatedPairs[tokenAddress].status == false, \"validated\");\r\n\r\n        address _pair = validatedPairs[tokenAddress].pair;\r\n        address _owner = validatedPairs[tokenAddress].owner;\r\n\r\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\r\n        IERC20(_pair).approve(routerAddress, type(uint256).max);\r\n        uint256 _lpBalance = IERC20(_pair).balanceOf(address(this));\r\n\r\n        ITokenTemplate(tokenAddress).cancelToken();\r\n        router.removeLiquidityETH(\r\n            address(tokenAddress),\r\n            _lpBalance,\r\n            0,\r\n            0,\r\n            _owner,\r\n            block.timestamp\r\n        );\r\n\r\n        ITokenTemplate(tokenAddress).swapTradingStatus();\r\n\r\n        delete validatedPairs[tokenAddress];\r\n    }\r\n\r\n    function setRouterAddress(address newRouterAddress) external onlyOwner {\r\n        routerAddress = payable(newRouterAddress);\r\n    }\r\n\r\n    function setHldBurner(address newHldBurnerAddress) external onlyOwner {\r\n        hldBurnerAddress = payable(newHldBurnerAddress);\r\n    }\r\n\r\n    function setHldAdmin(address newHldAdmin) external onlyOwner {\r\n        hldAdmin = newHldAdmin;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialHldAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialHldBurner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFeeOnSell\",\"type\":\"uint256\"}],\"internalType\":\"struct Fees.allFees\",\"name\":\"fees\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialtreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialtreasuryFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialmarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialmarketingFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"changeRestrictWhales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hldAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hldBurnerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceHldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictWhales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLaunchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newmarketingWallet\",\"type\":\"address\"}],\"name\":\"setmarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"settreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeIfSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateHldAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newhldBurnerAddress\",\"type\":\"address\"}],\"name\":\"updateHldBurnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenTemplate", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000002863c1f5cdae42f9540000000000000000000000000000000c86a2c85b46ffbea8905b5f86985afb165446f3b0000000000000000000000001cf00902c0274b2ca5e7130bb2750b07d160c3a2000000000000000000000000a6c04e7d6ff705581387cd22a7d7fb985d3a82660000000000000000000000004a4e17b455fa84d010fe522e6faf709e72dee6fe0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c86a2c85b46ffbea8905b5f86985afb165446f3b000000000000000000000000f9859ab850a8cc66ff33001798baca257b64bcf5000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e4372617a7920526963682044414f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005435244414f000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11f98b8c6ee9a11863fa353aa6c9f755f5cb1132956c4083871e814153a85731"}]}