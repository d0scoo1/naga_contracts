{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GNU GPLv3\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\r\n    function __ERC1967Upgrade_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal initializer {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallSecure(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        address oldImplementation = _getImplementation();\r\n\r\n        // Initial upgrade and setup call\r\n        _setImplementation(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n\r\n        // Perform rollback test if not already in progress\r\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\r\n        if (!rollbackTesting.value) {\r\n            // Trigger rollback using upgradeTo from the new implementation\r\n            rollbackTesting.value = true;\r\n            _functionDelegateCall(\r\n                newImplementation,\r\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\r\n            );\r\n            rollbackTesting.value = false;\r\n            // Check rollback was effective\r\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\r\n            // Finally reset to the new implementation and log the upgrade\r\n            _upgradeTo(newImplementation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n        __UUPSUpgradeable_init_unchained();\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal initializer {}\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(\r\n            address(this) != __self,\r\n            \"Function must be called through delegatecall\"\r\n        );\r\n        require(\r\n            _getImplementation() == __self,\r\n            \"Function must be called through active proxy\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\r\n        require(\r\n            newImplementation != address(0),\r\n            \"Address should not be a zero address\"\r\n        );\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data)\r\n        external\r\n        payable\r\n        virtual\r\n        onlyProxy\r\n    {\r\n        require(\r\n            newImplementation != address(0),\r\n            \"Address should not be a zero address\"\r\n        );\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @title TimestampToDateLibrary library for vesting\r\n/// @author Capx Team\r\n/// @notice The TimestampToDateLibrary is the library used to convert timestamp to date,month,year\r\n/// @dev This contract uses mathematical algorithm to calculate the date from timestamp\r\nlibrary TimestampToDateLibrary {\r\n    uint256 internal constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    int256 internal constant OFFSET19700101 = 2440588;\r\n\r\n    /// @notice Function of TimestampToDateLibrary used to convert timestamp to year,month,day\r\n    /// @dev Uses mathematical algorithm to calculate this\r\n    /// @param timestamp Timestamp which is needed to be converted to date\r\n    /// Returns three variables with year,month,day values\r\n\r\n    function timestampToDate(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        int256 L = int256((timestamp / SECONDS_PER_DAY)) +\r\n            68569 +\r\n            OFFSET19700101;\r\n        int256 N = (4 * L) / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int256 _year = (4000 * (L + 1)) / 1461001;\r\n        L = L - (1461 * _year) / 4 + 31;\r\n        int256 _month = (80 * L) / 2447;\r\n        int256 _day = L - (2447 * _month) / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint256(_year);\r\n        month = uint256(_month);\r\n        day = uint256(_day);\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ERC20Properties {\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ERC20Clone {\r\n    function mintbyControl(address _to, uint256 _amount) external;\r\n\r\n    function burnbyControl(address _to, uint256 _amount) external;\r\n}\r\n\r\ninterface Master {\r\n    function getFactory() external view returns (address);\r\n\r\n    function getProposal() external view returns (address);\r\n}\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface AbsERC20Factory {\r\n    function createStorage(\r\n        string memory _wrappedTokenName,\r\n        string memory _wrappedTokenTicker,\r\n        uint8 _wrappedTokenDecimals,\r\n        uint256 _vestTime\r\n    ) external returns (address);\r\n}\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @title Controller contract for creating WVTs\r\n/// @author Capx Team\r\n/// @notice User can interact with the Controller contract only through Master contract.\r\n/// @dev This contract uses openzepplin Upgradable plugin. https://docs.openzeppelin.com/upgrades-plugins/1.x/\r\ncontract Controller is Initializable, UUPSUpgradeable, OwnableUpgradeable {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    uint256 internal constant DAY = 86400;\r\n    uint256 internal constant _ACTIVE = 2;\r\n    uint256 internal constant _INACTIVE = 1;\r\n\r\n    uint256 public lastVestID;\r\n    uint256 internal _locked;\r\n    uint256 internal _killed;\r\n    uint256 internal _limitOfDerivatives;\r\n    address internal masterContract;\r\n\r\n    mapping(uint256 => address) public derivativeIDtoAddress;\r\n    mapping(address => uint256) public vestingTimeOfTokenId;\r\n    mapping(address => uint256) public totalDerivativeForAsset;\r\n    mapping(address => address) public assetAddresstoProjectOwner;\r\n    mapping(address => address) public derivativeAdrToActualAssetAdr;\r\n\r\n    struct derivativePair {\r\n        address sellable;\r\n        address nonsellable;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => derivativePair))\r\n        public assetToDerivativeMap;\r\n    mapping(address => mapping(address => uint256))\r\n        public assetLockedForDerivative;\r\n\r\n    event ProjectInfo(\r\n        address indexed tokenAddress,\r\n        string tokenTicker,\r\n        address creator,\r\n        uint256 tokenDecimal\r\n    );\r\n\r\n    event CreateVest(\r\n        address indexed assetAddress,\r\n        address creator,\r\n        address userAddress,\r\n        uint256 userAmount,\r\n        uint256 unlockTime,\r\n        address wrappedERC20Address,\r\n        string wrappedAssetTicker,\r\n        bool transferable\r\n    );\r\n\r\n    event TransferWrapped(\r\n        address userAddress,\r\n        address indexed wrappedTokenAddress,\r\n        address receiverAddress,\r\n        uint256 amount\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed userAddress,\r\n        uint256 amount,\r\n        address wrappedTokenAddress\r\n    );\r\n\r\n    modifier noReentrant() {\r\n        require(_locked != _ACTIVE, \"ReentrancyGuard: Re-Entrant call\");\r\n        _locked = _ACTIVE;\r\n        _;\r\n        _locked = _INACTIVE;\r\n    }\r\n\r\n    function isKilled() internal view {\r\n        require(_killed != _ACTIVE, \"FailSafeMode: ACTIVE\");\r\n    }\r\n\r\n    /// @notice Disables the WVT Creation & Withdraw functionality of the contract.\r\n    function kill() external onlyOwner {\r\n        _killed = _ACTIVE;\r\n    }\r\n\r\n    /// @notice Enables the WVT Creation & Withdraw functionality of the contract.\r\n    function revive() external onlyOwner {\r\n        _killed = _INACTIVE;\r\n    }\r\n\r\n    function initialize(address _masterContract) public initializer {\r\n        __Ownable_init();\r\n        lastVestID = 0;\r\n        _killed = _INACTIVE;\r\n        _locked = _INACTIVE;\r\n        require(_masterContract != address(0), \"Invalid Address\");\r\n        masterContract = _masterContract;\r\n    }\r\n\r\n    function _authorizeUpgrade(address _newImplementation)\r\n        internal\r\n        override\r\n        onlyOwner\r\n    {}\r\n\r\n    /// @notice Using this function a user can vest their project tokens till a specific date\r\n    /// @dev Iterates over the vesting sheet received in params for\r\n    /// @param _tokenAddress Address of the project token\r\n    /// @param _amount Amount of tokens the user wants to vest\r\n    /// @param _distAddress Array of Addresses to whom the project owner wants to distribute derived tokens.\r\n    /// @param _distTime Array of Integer timestamps at which the derived tokens will be eligible for exchange with project tokens\r\n    /// @param _distAmount Array of amount which determines how much of each derived tokens should be distributed to _distAddress\r\n    /// @param _transferable Array of boolean determining which asset is sellable and which is not\r\n    /// @param _caller Address calling this function through controller\r\n    function createBulkDerivative(\r\n        address _tokenAddress,\r\n        uint256 _amount,\r\n        address[] calldata _distAddress,\r\n        uint256[] memory _distTime,\r\n        uint256[] memory _distAmount,\r\n        bool[] memory _transferable,\r\n        address _caller\r\n    ) external virtual noReentrant {\r\n        require(msg.sender == masterContract, \"Only master can call\");\r\n        isKilled();\r\n        // Function variable Declaration\r\n        uint256 totalAmount = 0;\r\n        uint256 i = 0;\r\n        _limitOfDerivatives = 20;\r\n\r\n        require(\r\n            (_distAddress.length == _distTime.length) &&\r\n                (_distTime.length == _distAmount.length) &&\r\n                (_distTime.length == _transferable.length) &&\r\n                _distTime.length != 0 &&\r\n                _amount != 0 &&\r\n                _tokenAddress != address(0) &&\r\n                _caller != address(0) &&\r\n                _distTime.length <= 300,\r\n            \"Invalid Input\"\r\n        );\r\n\r\n        // Registering the Project Asset to it's owner.\r\n        if (assetAddresstoProjectOwner[_tokenAddress] == address(0)) {\r\n            assetAddresstoProjectOwner[_tokenAddress] = _caller;\r\n        }\r\n\r\n        emit ProjectInfo(\r\n            _tokenAddress,\r\n            ERC20Properties(_tokenAddress).symbol(),\r\n            assetAddresstoProjectOwner[_tokenAddress],\r\n            ERC20Properties(_tokenAddress).decimals()\r\n        );\r\n\r\n        // Minting wrapped tokens by iterating on the vesting sheet\r\n        for (i = 0; i < _distTime.length; i++) {\r\n            _distTime[i] = (_distTime[i] / DAY) * DAY;\r\n\r\n            require(\r\n                _distTime[i] > ((block.timestamp / DAY) * DAY),\r\n                \"Not a future Vest End Time\"\r\n            );\r\n            // Checking if the distribution of tokens is in consistent with the total amount of tokens.\r\n            totalAmount += _distAmount[i];\r\n\r\n            address _wrappedTokenAdr;\r\n            if (_transferable[i]) {\r\n                _wrappedTokenAdr = assetToDerivativeMap[_tokenAddress][\r\n                    _distTime[i]\r\n                ].sellable;\r\n            } else {\r\n                _wrappedTokenAdr = assetToDerivativeMap[_tokenAddress][\r\n                    _distTime[i]\r\n                ].nonsellable;\r\n            }\r\n            string memory _wrappedTokenTicker = \"\";\r\n            if (_wrappedTokenAdr == address(0)) {\r\n                //function call to deploy new ERC20 derivative\r\n                lastVestID += 1;\r\n                require(_limitOfDerivatives > 0, \"Derivative limit exhausted\");\r\n                _limitOfDerivatives -= 1;\r\n                (_wrappedTokenAdr, _wrappedTokenTicker) = _deployNewERC20(\r\n                    _tokenAddress,\r\n                    _distTime[i],\r\n                    _transferable[i]\r\n                );\r\n\r\n                //update mapping\r\n                _updateMappings(\r\n                    _wrappedTokenAdr,\r\n                    _tokenAddress,\r\n                    _distTime[i],\r\n                    _transferable[i]\r\n                );\r\n            } else {\r\n                _wrappedTokenTicker = ERC20Properties(_wrappedTokenAdr).symbol();\r\n            }\r\n            assert(\r\n                _mintWrappedTokens(\r\n                    _tokenAddress,\r\n                    _distAddress[i],\r\n                    _distAmount[i],\r\n                    _wrappedTokenAdr\r\n                )\r\n            );\r\n\r\n            totalDerivativeForAsset[_tokenAddress] += _distAmount[i];\r\n\r\n            emit CreateVest(\r\n                _tokenAddress,\r\n                assetAddresstoProjectOwner[_tokenAddress],\r\n                _distAddress[i],\r\n                _distAmount[i],\r\n                _distTime[i],\r\n                _wrappedTokenAdr,\r\n                _wrappedTokenTicker,\r\n                _transferable[i]\r\n            );\r\n        }\r\n\r\n        require(totalAmount == _amount, \"Inconsistent amount of tokens\");\r\n        assert(\r\n            IERC20Upgradeable(_tokenAddress).balanceOf(address(this)) >=\r\n                totalDerivativeForAsset[_tokenAddress]\r\n        );\r\n    }\r\n\r\n    /// @notice Helper function to update the mappings.\r\n    /// @dev Updates the global state variables.\r\n    /// @param _wrappedTokenAdr Address of the WVT to be updated.\r\n    /// @param _tokenAddress Address of the Project Token of which the WVT is created.\r\n    /// @param _vestTime Time of unlock of the project token.\r\n    /// @param _transferable Boolean to determine if this asset is sellable or not.\r\n    function _updateMappings(\r\n        address _wrappedTokenAdr,\r\n        address _tokenAddress,\r\n        uint256 _vestTime,\r\n        bool _transferable\r\n    ) internal {\r\n        derivativeIDtoAddress[lastVestID] = _wrappedTokenAdr;\r\n\r\n        if (_transferable) {\r\n            assetToDerivativeMap[_tokenAddress][_vestTime]\r\n                .sellable = _wrappedTokenAdr;\r\n        } else {\r\n            assetToDerivativeMap[_tokenAddress][_vestTime]\r\n                .nonsellable = _wrappedTokenAdr;\r\n        }\r\n\r\n        vestingTimeOfTokenId[_wrappedTokenAdr] = _vestTime;\r\n\r\n        derivativeAdrToActualAssetAdr[_wrappedTokenAdr] = _tokenAddress;\r\n    }\r\n\r\n    /// @notice Helper function to transfer the corresponding token.\r\n    /// @dev Uses the IERC20Upgradable to transfer the asset from one user to another.\r\n    /// @param _tokenAddress The asset of which the transfer is to take place.\r\n    /// @param _from The address from which the asset is being transfered.\r\n    /// @param _to The address to whom the asset is being transfered.\r\n    /// @param _amount The quantity of the asset being transfered.\r\n    function _safeTransferERC20(\r\n        address _tokenAddress,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        // transfering ERC20 tokens from _projectOwner (msg.sender) to contract\r\n        if (_from == address(this)) {\r\n            IERC20Upgradeable(_tokenAddress).safeTransfer(_to, _amount);\r\n        } else {\r\n            IERC20Upgradeable(_tokenAddress).safeTransferFrom(\r\n                _from,\r\n                _to,\r\n                _amount\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Function called by createBulkDerivative to spawn new cheap copies which make delegate call to ERC20 Model Contract\r\n    /// @dev Uses the AbsERC20Factory interface object to call createStorage method of the factory contract\r\n    /// @param _tokenAddress Token address for which a WVT is being created\r\n    /// @param _vestTime The timestamp after which the token deployed can be exchanged for the project token\r\n    /// @param _transferable The new deployed ERC20 is sellable or not\r\n    /// @return Returns a tupple of address which contains the address of newly deployed ERC20 contract and its token ticker\r\n    function _deployNewERC20(\r\n        address _tokenAddress,\r\n        uint256 _vestTime,\r\n        bool _transferable\r\n    ) internal virtual returns (address, string memory) {\r\n        // Getting ERC20 token information\r\n        string memory date = _timestampToDate(_vestTime);\r\n\r\n        address currentContractAddress;\r\n        string memory _wrappedTokenTicker;\r\n        if (_transferable) {\r\n            _wrappedTokenTicker = string(\r\n                abi.encodePacked(\r\n                    ERC20Properties(_tokenAddress).symbol(),\r\n                    \".\",\r\n                    date\r\n                    \r\n                )\r\n            );\r\n            string memory wrappedTokenName = string(\r\n                abi.encodePacked(\r\n                    ERC20Properties(_tokenAddress).name(),\r\n                    \".\",\r\n                    date\r\n                )\r\n            );\r\n            uint8 wrappedTokenDecimals = ERC20Properties(_tokenAddress)\r\n                .decimals();\r\n\r\n            currentContractAddress = AbsERC20Factory(\r\n                Master(masterContract).getFactory()\r\n            ).createStorage(\r\n                    wrappedTokenName,\r\n                    _wrappedTokenTicker,\r\n                    wrappedTokenDecimals,\r\n                    0\r\n                );\r\n        } else {\r\n            _wrappedTokenTicker = string(\r\n                abi.encodePacked(\r\n                    ERC20Properties(_tokenAddress).symbol(),\r\n                    \".\",\r\n                   date,\r\n                    \"-NT\"\r\n                )\r\n            );\r\n            string memory wrappedTokenName = string(\r\n                abi.encodePacked(\r\n                    ERC20Properties(_tokenAddress).name(),\r\n                    \".\",\r\n                    date,\r\n                    \"-NT\"\r\n                )\r\n            );\r\n            uint8 wrappedTokenDecimals = ERC20Properties(_tokenAddress)\r\n                .decimals();\r\n\r\n            currentContractAddress = AbsERC20Factory(\r\n                Master(masterContract).getFactory()\r\n            ).createStorage(\r\n                    wrappedTokenName,\r\n                    _wrappedTokenTicker,\r\n                    wrappedTokenDecimals,\r\n                    _vestTime\r\n                );\r\n        }\r\n\r\n        // Creating new Wrapped ERC20 asset\r\n\r\n        return (currentContractAddress, _wrappedTokenTicker);\r\n    }\r\n\r\n    /// @notice Function called by createBulkDerivative to mint new Derived tokens.\r\n    /// @dev Uses the ERC20Clone interface object to instruct derived asset to mint new tokens.\r\n    /// @param _tokenAddress Token address for which a WVT is being minted\r\n    /// @param _distributionAddress The address to whom derived token is to be minted.\r\n    /// @param _distributionAmount The amount of derived assets to be minted.\r\n    /// @param _wrappedTokenAddress The address of the derived asset which is to be minted.\r\n    function _mintWrappedTokens(\r\n        address _tokenAddress,\r\n        address _distributionAddress,\r\n        uint256 _distributionAmount,\r\n        address _wrappedTokenAddress\r\n    ) internal virtual returns (bool _flag) {\r\n        assetLockedForDerivative[_tokenAddress][\r\n            _wrappedTokenAddress\r\n        ] += _distributionAmount;\r\n\r\n        // Minting Wrapped ERC20 token\r\n        ERC20Clone(_wrappedTokenAddress).mintbyControl(\r\n            _distributionAddress,\r\n            _distributionAmount\r\n        );\r\n        _flag = (IERC20Upgradeable(_wrappedTokenAddress).totalSupply() ==\r\n            assetLockedForDerivative[_tokenAddress][_wrappedTokenAddress]);\r\n    }\r\n\r\n    /// @notice Function called by derived asset contract when they are transferred.\r\n    /// @param _from The address from which the token is being transferred.\r\n    /// @param _to The address to which the token is being transferred.\r\n    /// @param _amount The amount of tokens being transferred.\r\n    function tokenTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external virtual {\r\n        // This function can only be called by wrapped ERC20 token contract which are created by the controller\r\n        require(derivativeAdrToActualAssetAdr[msg.sender] != address(0));\r\n        emit TransferWrapped(_from, msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Using this function a user can withdraw vested tokens in return of derived tokens held by the user address after the vest time has passed\r\n    /// @dev This function burns the derived erc20 tokens and then transfers the project tokens to the msg.sender\r\n    /// @param _wrappedTokenAddress Takes the address of the derived token\r\n    /// @param _amount The amount of derived tokens the user want to withdraw\r\n    /// @param _caller Address calling this function through controller\r\n    function withdrawToken(\r\n        address _wrappedTokenAddress,\r\n        uint256 _amount,\r\n        address _caller\r\n    ) external virtual noReentrant {\r\n        require(msg.sender == masterContract, \"Only master can call\");\r\n        isKilled();\r\n\r\n        require(\r\n            derivativeAdrToActualAssetAdr[_wrappedTokenAddress] != address(0)\r\n        );\r\n\r\n        require(\r\n            vestingTimeOfTokenId[_wrappedTokenAddress] <= block.timestamp,\r\n            \"Cannot withdraw before vest time\"\r\n        );\r\n\r\n        address _tokenAddress = derivativeAdrToActualAssetAdr[\r\n            _wrappedTokenAddress\r\n        ];\r\n\r\n        //Transfer the Wrapped Token to the controller first.\r\n        _safeTransferERC20(\r\n            _wrappedTokenAddress,\r\n            _caller,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        totalDerivativeForAsset[_tokenAddress] -= _amount;\r\n\r\n        // Burning wrapped tokens\r\n        ERC20Clone(_wrappedTokenAddress).burnbyControl(address(this), _amount);\r\n\r\n        assetLockedForDerivative[_tokenAddress][\r\n            _wrappedTokenAddress\r\n        ] -= _amount;\r\n\r\n        _safeTransferERC20(_tokenAddress, address(this), _caller, _amount);\r\n        assert(\r\n            IERC20Upgradeable(_tokenAddress).balanceOf(address(this)) >=\r\n                totalDerivativeForAsset[_tokenAddress]\r\n        );\r\n\r\n        emit Withdraw(_caller, _amount, _wrappedTokenAddress);\r\n    }\r\n\r\n    /// @notice This function is used by _deployNewERC20 function to set Ticker and Name of the derived asset.\r\n    /// @dev This function uses the TimestampToDateLibrary.\r\n    /// @param _timestamp tiemstamp which needs to be converted to date.\r\n    /// @return finalDate as a string which the timestamp represents.\r\n    function _timestampToDate(uint256 _timestamp)\r\n        internal\r\n        pure\r\n        returns (string memory finalDate)\r\n    {\r\n        // Converting timestamp to Date using timestampToDateLibrary\r\n        _timestamp = (_timestamp / DAY) * DAY;\r\n        uint256 year;\r\n        uint256 month;\r\n        uint256 day;\r\n        (year, month, day) = TimestampToDateLibrary.timestampToDate(_timestamp);\r\n        string memory mstring;\r\n\r\n        // Converting month component to String\r\n        if (month == 1) mstring = \"Jan\";\r\n        else if (month == 2) mstring = \"Feb\";\r\n        else if (month == 3) mstring = \"Mar\";\r\n        else if (month == 4) mstring = \"Apr\";\r\n        else if (month == 5) mstring = \"May\";\r\n        else if (month == 6) mstring = \"Jun\";\r\n        else if (month == 7) mstring = \"Jul\";\r\n        else if (month == 8) mstring = \"Aug\";\r\n        else if (month == 9) mstring = \"Sep\";\r\n        else if (month == 10) mstring = \"Oct\";\r\n        else if (month == 11) mstring = \"Nov\";\r\n        else if (month == 12) mstring = \"Dec\";\r\n\r\n        // Putting data on finalDate\r\n        finalDate = string(\r\n            abi.encodePacked(_uint2str(day), mstring, _uint2str(year))\r\n        );\r\n    }\r\n\r\n    /// @notice This function is used by _timestampToDate function to convert number to string.\r\n    /// @param _i an integer.\r\n    /// @return str which is _i as string.\r\n    function _uint2str(uint256 _i) internal pure returns (string memory str) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length;\r\n        j = _i;\r\n        while (j != 0) {\r\n            bstr[--k] = bytes1(uint8(48 + (j % 10)));\r\n            j /= 10;\r\n        }\r\n        str = string(bstr);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedERC20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"wrappedAssetTicker\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"CreateVest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenTicker\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDecimal\",\"type\":\"uint256\"}],\"name\":\"ProjectInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferWrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedTokenAddress\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetAddresstoProjectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetLockedForDerivative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetToDerivativeMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sellable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonsellable\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_distAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_distTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_distAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_transferable\",\"type\":\"bool[]\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"createBulkDerivative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivativeAdrToActualAssetAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"derivativeIDtoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVestID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDerivativeForAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingTimeOfTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Controller", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cae50991a35f5e13f4ee02d8543bf394f9d56b9f45477c7795fc039aacc32443"}]}