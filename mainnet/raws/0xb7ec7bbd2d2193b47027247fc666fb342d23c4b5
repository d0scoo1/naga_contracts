{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n       M                                                 M\r\n     M   M                                             M   M\r\n    M  M  M                                           M  M  M\r\n   M  M  M  M                                       M  M  M  M\r\n  M  M  M  M  M                                    M  M  M  M  M\r\n M  M M  M  M  M                                 M  M  M  M  M  M\r\n M  M   M  M  M  M                              M  M     M  M  M  M\r\n M  M     M  M  M  M                           M  M      M  M   M  M\r\n M  M       M  M  M  M                        M  M       M  M   M  M     \u200b\u200b\r\n M  M         M  M  M  M                     M  M        M  M   M  M\r\n M  M           M  M  M  M                  M  M         M  M   M  M\r\n M  M             M  M  M  M               M  M          M  M   M  M   M  M  M  M  M  M  M\r\n M  M               M  M  M  M            M  M        M  M  M   M  M   M  M  M  M  M  M  M\r\n M  M                 M  M  M  M         M  M      M  M  M  M   M  M                  M  M\r\n M  M                   M  M  M  M      M  M    M  M  M  M  M   M  M                     M\r\n M  M                     M  M  M  M   M  M  M  M  M  M  M  M   M  M\r\n M  M                       M  M  M  M  M   M  M  M  M   M  M   M  M\r\n M  M                         M  M  M  M   M  M  M  M    M  M   M  M\r\n M  M                           M  M  M   M  M  M  M     M  M   M  M\r\n M  M                             M  M   M  M  M  M      M  M   M  M\r\nM  M  M  M  M  M                         M   M  M  M  M   M  M  M  M  M  M  M\r\n                                        M  M  M  M\r\n                                        M  M  M  M\r\n                                        M  M  M  M\r\n                                         M  M  M  M                        M  M  M  M  M  M\r\n                                          M  M  M  M                          M  M  M  M\r\n                                           M  M  M  M                         M  M  M  M\r\n                                             M  M  M  M                       M  M  M  M\r\n                                               M  M  M  M                     M  M  M  M\r\n                                                 M  M  M  M                   M  M  M  M\r\n                                                    M  M  M  M                M  M  M  M\r\n                                                       M  M  M  M             M  M  M  M\r\n                                                           M  M  M  M   M  M  M  M  M  M\r\n                                                               M  M  M  M  M  M  M  M  M\r\n                                                                                                                                                \r\n*/\r\n// based off of the beautiful work done by Erick Calderon with the smart contracts for Artblocks.\r\npragma solidity ^0.5.0;\r\n/**\r\n* @dev Interface of the ERC165 standard, as defined in the\r\n* [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n*\r\n* Implementers can declare support of contract interfaces, which can then be\r\n* queried by others (`ERC165Checker`).\r\n*\r\n* For an implementation, see `ERC165`.\r\n*/\r\ninterface IERC165 {\r\n/**\r\n * @dev Returns true if this contract implements the interface defined by\r\n * `interfaceId`. See the corresponding\r\n * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n * to learn more about how these ids are created.\r\n *\r\n * This function call must use less than 30 000 gas.\r\n */\r\nfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File contracts/libs/ERC165.sol\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @dev Implementation of the `IERC165` interface.\r\n*\r\n* Contracts may inherit from this and call `_registerInterface` to declare\r\n* their support of an interface.\r\n*/\r\ncontract ERC165 is IERC165 {\r\n/*\r\n * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n */\r\nbytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n/**\r\n * @dev Mapping of interface ids to whether or not it's supported.\r\n */\r\nmapping(bytes4 => bool) private _supportedInterfaces;\r\nconstructor () internal {\r\n    // Derived contracts need only register support for their own interfaces,\r\n    // we register support for ERC165 itself here\r\n    _registerInterface(_INTERFACE_ID_ERC165);\r\n}\r\n/**\r\n * @dev See `IERC165.supportsInterface`.\r\n *\r\n * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n */\r\nfunction supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n    return _supportedInterfaces[interfaceId];\r\n}\r\n/**\r\n * @dev Registers the contract as an implementer of the interface defined by\r\n * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n * registering its interface id is not required.\r\n *\r\n * See `IERC165.supportsInterface`.\r\n *\r\n * Requirements:\r\n *\r\n * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n */\r\nfunction _registerInterface(bytes4 interfaceId) internal {\r\n    require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n    _supportedInterfaces[interfaceId] = true;\r\n}\r\n}\r\n// File contracts/libs/IERC721.sol\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @dev Required interface of an ERC721 compliant contract.\r\n*/\r\ncontract IERC721 is IERC165 {\r\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n/**\r\n * @dev Returns the number of NFTs in `owner`'s account.\r\n */\r\nfunction balanceOf(address owner) public view returns (uint256 balance);\r\n/**\r\n * @dev Returns the owner of the NFT specified by `tokenId`.\r\n */\r\nfunction ownerOf(uint256 tokenId) public view returns (address owner);\r\n/**\r\n * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n * another (`to`).\r\n *\r\n *\r\n *\r\n * Requirements:\r\n * - `from`, `to` cannot be zero.\r\n * - `tokenId` must be owned by `from`.\r\n * - If the caller is not `from`, it must be have been allowed to move this\r\n * NFT by either `approve` or `setApproveForAll`.\r\n */\r\nfunction safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n/**\r\n * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n * another (`to`).\r\n *\r\n * Requirements:\r\n * - If the caller is not `from`, it must be approved to move this NFT by\r\n * either `approve` or `setApproveForAll`.\r\n */\r\nfunction transferFrom(address from, address to, uint256 tokenId) public;\r\nfunction approve(address to, uint256 tokenId) public;\r\nfunction getApproved(uint256 tokenId) public view returns (address operator);\r\nfunction setApprovalForAll(address operator, bool _approved) public;\r\nfunction isApprovedForAll(address owner, address operator) public view returns (bool);\r\nfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n// File contracts/libs/SafeMath.sol\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n* checks.\r\n*\r\n* Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n* in bugs, because programmers usually assume that an overflow raises an\r\n* error, which is the standard behavior in high level programming languages.\r\n* `SafeMath` restores this intuition by reverting the transaction when an\r\n* operation overflows.\r\n*\r\n* Using this library instead of the unchecked operations eliminates an entire\r\n* class of bugs, so it's recommended to use it always.\r\n*/\r\nlibrary SafeMath {\r\n/**\r\n * @dev Returns the addition of two unsigned integers, reverting on\r\n * overflow.\r\n *\r\n * Counterpart to Solidity's `+` operator.\r\n *\r\n * Requirements:\r\n * - Addition cannot overflow.\r\n */\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n}\r\n/**\r\n * @dev Returns the subtraction of two unsigned integers, reverting on\r\n * overflow (when the result is negative).\r\n *\r\n * Counterpart to Solidity's `-` operator.\r\n *\r\n * Requirements:\r\n * - Subtraction cannot overflow.\r\n */\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n    return c;\r\n}\r\n/**\r\n * @dev Returns the multiplication of two unsigned integers, reverting on\r\n * overflow.\r\n *\r\n * Counterpart to Solidity's `*` operator.\r\n *\r\n * Requirements:\r\n * - Multiplication cannot overflow.\r\n */\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n}\r\n/**\r\n * @dev Returns the integer division of two unsigned integers. Reverts on\r\n * division by zero. The result is rounded towards zero.\r\n *\r\n * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n * uses an invalid opcode to revert (consuming all remaining gas).\r\n *\r\n * Requirements:\r\n * - The divisor cannot be zero.\r\n */\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n}\r\n}\r\n// File contracts/libs/Address.sol\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @dev Collection of functions related to the address type,\r\n*/\r\nlibrary Address {\r\n/**\r\n * @dev Returns true if `account` is a contract.\r\n *\r\n * This test is non-exhaustive, and there may be false-negatives: during the\r\n * execution of a contract's constructor, its address will be reported as\r\n * not containing a contract.\r\n *\r\n * > It is unsafe to assume that an address for which this function returns\r\n * false is an externally-owned account (EOA) and not a contract.\r\n */\r\nfunction isContract(address account) internal view returns (bool) {\r\n    // This method relies in extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n}\r\n}\r\n// File contracts/libs/Counters.sol\r\n// File: openzeppelin-solidity/contracts/drafts/Counters.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @title Counters\r\n* @author Matt Condon (@shrugs)\r\n* @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n* of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n*\r\n* Include with `using Counters for Counters.Counter;`\r\n* Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\r\n* overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n* directly accessed.\r\n*/\r\nlibrary Counters {\r\nusing SafeMath for uint256;\r\nstruct Counter {\r\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n    uint256 _value; // default: 0\r\n}\r\nfunction current(Counter storage counter) internal view returns (uint256) {\r\n    return counter._value;\r\n}\r\nfunction increment(Counter storage counter) internal {\r\n    counter._value += 1;\r\n}\r\nfunction decrement(Counter storage counter) internal {\r\n    counter._value = counter._value.sub(1);\r\n}\r\n}\r\n// File contracts/libs/IERC721Receiver.sol\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @title ERC721 token receiver interface\r\n* @dev Interface for any contract that wants to support safeTransfers\r\n* from ERC721 asset contracts.\r\n*/\r\ncontract IERC721Receiver {\r\nfunction onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\npublic returns (bytes4);\r\n}\r\n// File contracts/libs/ERC721.sol\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @title ERC721 Non-Fungible Token Standard basic implementation\r\n* @dev see https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract ERC721 is ERC165, IERC721 {\r\nusing SafeMath for uint256;\r\nusing Address for address;\r\nusing Counters for Counters.Counter;\r\n// Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n// which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n// Mapping from token ID to owner\r\nmapping (uint256 => address) private _tokenOwner;\r\n// Mapping from token ID to approved address\r\nmapping (uint256 => address) private _tokenApprovals;\r\n// Mapping from owner to number of owned token\r\nmapping (address => Counters.Counter) private _ownedTokensCount;\r\n// Mapping from owner to operator approvals\r\nmapping (address => mapping (address => bool)) private _operatorApprovals;\r\n bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\nconstructor () public {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_INTERFACE_ID_ERC721);\r\n}\r\nfunction balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n    return _ownedTokensCount[owner].current();\r\n}\r\nfunction ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n    return owner;\r\n}\r\nfunction approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner, \"ERC721: approval to current owner\");\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n        \"ERC721: approve caller is not owner nor approved for all\"\r\n    );\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n}\r\nfunction getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n    return _tokenApprovals[tokenId];\r\n}\r\nfunction setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender, \"ERC721: approve to caller\");\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n}\r\nfunction isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n    return _operatorApprovals[owner][operator];\r\n}\r\nfunction transferFrom(address from, address to, uint256 tokenId) public {\r\n    //solhint-disable-next-line max-line-length\r\n    require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    _transferFrom(from, to, tokenId);\r\n}\r\nfunction safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n}\r\nfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n    transferFrom(from, to, tokenId);\r\n    require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n}\r\nfunction _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n}\r\nfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n    require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n    address owner = ownerOf(tokenId);\r\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n}\r\nfunction _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0), \"ERC721: mint to the zero address\");\r\n    require(!_exists(tokenId), \"ERC721: token already minted\");\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to].increment();\r\n    emit Transfer(address(0), to, tokenId);\r\n}\r\nfunction _burn(address owner, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n    _clearApproval(tokenId);\r\n    _ownedTokensCount[owner].decrement();\r\n    _tokenOwner[tokenId] = address(0);\r\n    emit Transfer(owner, address(0), tokenId);\r\n}\r\nfunction _burn(uint256 tokenId) internal {\r\n    _burn(ownerOf(tokenId), tokenId);\r\n}\r\nfunction _transferFrom(address from, address to, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n    require(to != address(0), \"ERC721: transfer to the zero address\");\r\n    _clearApproval(tokenId);\r\n    _ownedTokensCount[from].decrement();\r\n    _ownedTokensCount[to].increment();\r\n    _tokenOwner[tokenId] = to;\r\n    emit Transfer(from, to, tokenId);\r\n}\r\nfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\ninternal returns (bool)\r\n{\r\n    if (!to.isContract()) {\r\n        return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n}\r\nfunction _clearApproval(uint256 tokenId) private {\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n        _tokenApprovals[tokenId] = address(0);\r\n    }\r\n}\r\n}\r\n// File contracts/libs/IERC721Enumerable.sol\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n* @dev See https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract IERC721Enumerable is IERC721 {\r\nfunction totalSupply() public view returns (uint256);\r\nfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\nfunction tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n// File contracts/libs/ERC721Enumerable.sol\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n* @dev See https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n// Mapping from owner to list of owned token IDs\r\nmapping(address => uint256[]) private _ownedTokens;\r\n// Mapping from token ID to index of the owner tokens list\r\nmapping(uint256 => uint256) private _ownedTokensIndex;\r\n// Array with all token ids, used for enumeration\r\nuint256[] private _allTokens;\r\n// Mapping from token id to position in the allTokens array\r\nmapping(uint256 => uint256) private _allTokensIndex;\r\n/*\r\n *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n *\r\n *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n */\r\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n/**\r\n * @dev Constructor function.\r\n */\r\nconstructor () public {\r\n    // register the supported interface to conform to ERC721Enumerable via ERC165\r\n    _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n}\r\n/**\r\n * @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n * @param owner address owning the tokens list to be accessed\r\n * @param index uint256 representing the index to be accessed of the requested tokens list\r\n * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n */\r\nfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n    require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n    return _ownedTokens[owner][index];\r\n}\r\n/**\r\n * @dev Gets the total amount of tokens stored by the contract.\r\n * @return uint256 representing the total amount of tokens\r\n */\r\nfunction totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n}\r\n/**\r\n * @dev Gets the token ID at a given index of all the tokens in this contract\r\n * Reverts if the index is greater or equal to the total number of tokens.\r\n * @param index uint256 representing the index to be accessed of the tokens list\r\n * @return uint256 token ID at the given index of the tokens list\r\n */\r\nfunction tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n    return _allTokens[index];\r\n}\r\n/**\r\n * @dev Internal function to transfer ownership of a given token ID to another address.\r\n * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n * @param from current owner of the token\r\n * @param to address to receive the ownership of the given token ID\r\n * @param tokenId uint256 ID of the token to be transferred\r\n */\r\nfunction _transferFrom(address from, address to, uint256 tokenId) internal {\r\n    super._transferFrom(from, to, tokenId);\r\n    _removeTokenFromOwnerEnumeration(from, tokenId);\r\n    _addTokenToOwnerEnumeration(to, tokenId);\r\n}\r\n/**\r\n * @dev Internal function to mint a new token.\r\n * Reverts if the given token ID already exists.\r\n * @param to address the beneficiary that will own the minted token\r\n * @param tokenId uint256 ID of the token to be minted\r\n */\r\nfunction _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n    _addTokenToOwnerEnumeration(to, tokenId);\r\n    _addTokenToAllTokensEnumeration(tokenId);\r\n}\r\n/**\r\n * @dev Internal function to burn a specific token.\r\n * Reverts if the token does not exist.\r\n * Deprecated, use _burn(uint256) instead.\r\n * @param owner owner of the token to burn\r\n * @param tokenId uint256 ID of the token being burned\r\n */\r\nfunction _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n    _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n    // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _removeTokenFromAllTokensEnumeration(tokenId);\r\n}\r\n/**\r\n * @dev Gets the list of token IDs of the requested owner.\r\n * @param owner address owning the tokens\r\n * @return uint256[] List of token IDs owned by the requested address\r\n */\r\nfunction _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n    return _ownedTokens[owner];\r\n}\r\n/**\r\n * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n * @param to address representing the new owner of the given token ID\r\n * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n */\r\nfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n    _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n}\r\n/**\r\n * @dev Private function to add a token to this extension's token tracking data structures.\r\n * @param tokenId uint256 ID of the token to be added to the tokens list\r\n */\r\nfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n}\r\n/**\r\n * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\r\n * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n * @param from address representing the previous owner of the given token ID\r\n * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n */\r\nfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot (swap and pop).\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    // When the token to delete is the last token, the swap operation is unnecessary\r\n    if (tokenIndex != lastTokenIndex) {\r\n        uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n        _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    }\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n    // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\r\n    // lastTokenId, or just over the end of the array if the token was the last one).\r\n}\r\n/**\r\n * @dev Private function to remove a token from this extension's token tracking data structures.\r\n * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n */\r\nfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n    // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot (swap and pop).\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n    // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n    // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n    uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n    _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    // This also deletes the contents at the last position of the array\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n}\r\n}\r\n// File contracts/libs/CustomERC721Metadata.sol\r\n// File: contracts/CustomERC721Metadata.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n* ERC721 base contract without the concept of tokenUri as this is managed by the parent\r\n*/\r\ncontract CustomERC721Metadata is ERC165, ERC721, ERC721Enumerable {\r\n// Token name\r\nstring private _name;\r\n// Token symbol\r\nstring private _symbol;\r\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n/**\r\n * @dev Constructor function\r\n */\r\nconstructor (string memory name, string memory symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n}\r\n/**\r\n * @dev Gets the token name\r\n * @return string representing the token name\r\n */\r\nfunction name() external view returns (string memory) {\r\n    return _name;\r\n}\r\n/**\r\n * @dev Gets the token symbol\r\n * @return string representing the token symbol\r\n */\r\nfunction symbol() external view returns (string memory) {\r\n    return _symbol;\r\n}\r\n}\r\n// File contracts/libs/Strings.sol\r\n// File: contracts/Strings.sol\r\npragma solidity ^0.5.0;\r\n//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\nlibrary Strings {\r\nfunction strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\r\n    return strConcat(_a, _b, \"\", \"\", \"\");\r\n}\r\nfunction strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\r\n    return strConcat(_a, _b, _c, \"\", \"\");\r\n}\r\nfunction strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\r\n    return strConcat(_a, _b, _c, _d, \"\");\r\n}\r\nfunction strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint k = 0;\r\n    uint i = 0;\r\n    for (i = 0; i < _ba.length; i++) {\r\n        babcde[k++] = _ba[i];\r\n    }\r\n    for (i = 0; i < _bb.length; i++) {\r\n        babcde[k++] = _bb[i];\r\n    }\r\n    for (i = 0; i < _bc.length; i++) {\r\n        babcde[k++] = _bc[i];\r\n    }\r\n    for (i = 0; i < _bd.length; i++) {\r\n        babcde[k++] = _bd[i];\r\n    }\r\n    for (i = 0; i < _be.length; i++) {\r\n        babcde[k++] = _be[i];\r\n    }\r\n    return string(babcde);\r\n}\r\nfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n        return \"0\";\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n        len++;\r\n        j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len - 1;\r\n    while (_i != 0) {\r\n        bstr[k--] = byte(uint8(48 + _i % 10));\r\n        _i /= 10;\r\n    }\r\n    return string(bstr);\r\n}\r\n}\r\n\r\npragma solidity ^0.5.0;\r\ninterface mirageContracts {\r\nfunction balanceOf(address owner, uint256 _id) external view returns (uint256);\r\n}\r\ncontract mirageCurated is CustomERC721Metadata {\r\nusing SafeMath for uint256;\r\nevent Mint(\r\n    address indexed _to,\r\n    uint256 indexed _tokenId,\r\n    uint256 indexed _projectId\r\n);\r\nstruct Project {\r\n    string name;\r\n    string artist;\r\n    string description;\r\n    string website;\r\n    string license;\r\n    string projectBaseURI;\r\n    uint256 artworks;\r\n    uint256 maxArtworks;\r\n    uint256 maxEarly;\r\n    bool publicActive;\r\n    bool locked;\r\n    bool paused;\r\n    bool earlyActive;\r\n}\r\nuint256 constant TEN_THOUSAND = 10_000;\r\nmapping(uint256 => Project) projects;\r\n//All financial functions are stripped from struct for visibility\r\nmapping(uint256 => address) public projectIdToArtistAddress;\r\nmapping(uint256 => string) public projectIdToCurrencySymbol;\r\nmapping(uint256 => address) public projectIdToCurrencyAddress;\r\nmapping(uint256 => uint256) public projectIdToPricePerTokenInWei;\r\nmapping(uint256 => address) public projectIdToAdditionalPayee;\r\nmapping(uint256 => uint256) public projectIdToAdditionalPayeePercentage;\r\naddress public mirageAddress;\r\nmirageContracts public membershipContract;\r\nuint256 public miragePercentage = 10;\r\nmapping(uint256 => uint256) public tokenIdToProjectId;\r\nmapping(uint256 => uint256[]) internal projectIdToTokenIds;\r\nmapping(uint256 => bytes32) public tokenIdToHash;\r\nmapping(bytes32 => uint256) public hashToTokenId;\r\naddress public admin;\r\nmapping(address => bool) public isWhitelisted;\r\nmapping(address => bool) public isMintWhitelisted;\r\nuint256 public nextProjectId = 1;\r\nmodifier onlyValidTokenId(uint256 _tokenId) {\r\n    require(_exists(_tokenId), \"Token ID does not exist\");\r\n    _;\r\n}\r\nmodifier onlyUnlocked(uint256 _projectId) {\r\n    require(!projects[_projectId].locked, \"Only if unlocked\");\r\n    _;\r\n}\r\nmodifier onlyArtist(uint256 _projectId) {\r\n    require(msg.sender == projectIdToArtistAddress[_projectId], \"Only artist\");\r\n    _;\r\n}\r\nmodifier onlyAdmin() {\r\n    require(msg.sender == admin, \"Only admin\");\r\n    _;\r\n}\r\nmodifier onlyWhitelisted() {\r\n    require(isWhitelisted[msg.sender], \"Only whitelisted\");\r\n    _;\r\n}\r\nmodifier onlyArtistOrWhitelisted(uint256 _projectId) {\r\n    require(isWhitelisted[msg.sender] || msg.sender == projectIdToArtistAddress[_projectId], \"Only artist or whitelisted\");\r\n    _;\r\n}\r\nconstructor(string memory _tokenName, string memory _tokenSymbol, address membershipAddress) CustomERC721Metadata(_tokenName, _tokenSymbol) public {\r\n    admin = msg.sender;\r\n    isWhitelisted[msg.sender] = true;\r\n    mirageAddress = msg.sender;\r\n    membershipContract = mirageContracts(membershipAddress);\r\n}\r\nfunction mint(address _to, uint256 _projectId, address _by) external returns (uint256 _tokenId) {\r\n    require(isMintWhitelisted[msg.sender], \"Must mint from whitelisted minter contract.\");\r\n    require(projects[_projectId].artworks.add(51) <= projects[_projectId].maxArtworks, \"Must not exceed max artworks\");\r\n    require(projects[_projectId].publicActive || _by == projectIdToArtistAddress[_projectId], \"Project must exist and be active\");\r\n    require(!projects[_projectId].paused || _by == projectIdToArtistAddress[_projectId], \"Purchases are paused.\");\r\n    uint256 tokenId = _mintToken(_to, _projectId);\r\n    return tokenId;\r\n}\r\n function earlyMint(address _to, uint256 _projectId, address _by) external returns (uint256 _tokenId) {\r\n    require(isMintWhitelisted[msg.sender], \"Must mint from whitelisted minter contract.\");\r\n    require(projects[_projectId].earlyActive || _by == projectIdToArtistAddress[_projectId], \"Project not in early mint phase\");\r\n    require(!projects[_projectId].paused || _by == projectIdToArtistAddress[_projectId], \"Purchases are paused.\");\r\n    require(projects[_projectId].artworks < projects[_projectId].maxEarly, \"Must not exceed early mint allowance\");\r\n    uint256 tokenId = _mintToken(_to, _projectId);\r\n    return tokenId;\r\n}\r\nfunction _mintToken(address _to, uint256 _projectId) internal returns (uint256 _tokenId) {\r\n    uint256 tokenIdToBe = (_projectId * TEN_THOUSAND) + projects[_projectId].artworks + 50; //adding 50 in order to skip pieces claimable by sentient members\r\n    projects[_projectId].artworks = projects[_projectId].artworks.add(1);\r\n    _mint(_to, tokenIdToBe);\r\n    tokenIdToProjectId[tokenIdToBe] = _projectId;\r\n    projectIdToTokenIds[_projectId].push(tokenIdToBe);\r\n    emit Mint(_to, tokenIdToBe, _projectId);\r\n    return tokenIdToBe;\r\n}\r\n function claimSentient(uint256 _projectId, uint256 membershipId) public {\r\n    require(projects[_projectId].publicActive || projects[_projectId].earlyActive, \"Project must exist, and be active or in early mint state\");\r\n    require(membershipId < 50, \"Must be a Sentient Membership ID (0-49)\");\r\n    require(membershipContract.balanceOf(msg.sender, membershipId) == 1, \"Wallet does not have this membership ID\");\r\n    sentientMint(msg.sender, _projectId, membershipId);\r\n}\r\nfunction sentientMint(address _to, uint256 _projectId, uint256 _membershipId) internal returns (uint256 _tokenId) {\r\n    uint256 tokenIdToBe = (_projectId * TEN_THOUSAND) + _membershipId;\r\n    _mint(_to, tokenIdToBe);\r\n    tokenIdToProjectId[tokenIdToBe] = _projectId;\r\n    projectIdToTokenIds[_projectId].push(tokenIdToBe);\r\n    emit Mint(_to, tokenIdToBe, _projectId);\r\n    return tokenIdToBe;\r\n}\r\n function updateMembershipContract(address newAddress) public onlyAdmin {\r\n    membershipContract = mirageContracts(newAddress);\r\n}\r\n function updateMirageAddress(address _mirageAddress) public onlyAdmin {\r\n    mirageAddress = _mirageAddress;\r\n}\r\nfunction updateMiragePercentage(uint256 _miragePercentage) public onlyAdmin {\r\n    require(_miragePercentage <= 25, \"Max of 25%\");\r\n    miragePercentage = _miragePercentage;\r\n}\r\nfunction addWhitelisted(address _address) public onlyAdmin {\r\n    isWhitelisted[_address] = true;\r\n}\r\nfunction removeWhitelisted(address _address) public onlyAdmin {\r\n    isWhitelisted[_address] = false;\r\n}\r\nfunction addMintWhitelisted(address _address) public onlyAdmin {\r\n    isMintWhitelisted[_address] = true;\r\n}\r\nfunction removeMintWhitelisted(address _address) public onlyAdmin {\r\n    isMintWhitelisted[_address] = false;\r\n}\r\nfunction toggleProjectIsLocked(uint256 _projectId) public onlyWhitelisted onlyUnlocked(_projectId) {\r\n    projects[_projectId].locked = true;\r\n}\r\nfunction toggleProjectPublicMint(uint256 _projectId) public onlyWhitelisted {\r\n    projects[_projectId].publicActive = !projects[_projectId].publicActive;\r\n    projects[_projectId].earlyActive = false;\r\n}\r\n function toggleEarlyMint(uint256 _projectId) public onlyWhitelisted {\r\n    projects[_projectId].earlyActive = !projects[_projectId].earlyActive;\r\n}\r\nfunction updateProjectArtistAddress(uint256 _projectId, address _artistAddress) public onlyArtistOrWhitelisted(_projectId) {\r\n    projectIdToArtistAddress[_projectId] = _artistAddress;\r\n}\r\nfunction toggleProjectIsPaused(uint256 _projectId) public onlyWhitelisted {\r\n    projects[_projectId].paused = !projects[_projectId].paused;\r\n}\r\nfunction addProject(string memory _projectName, string memory tokenURI, string memory description, string memory artistName, string memory projectWebsite, string memory projectLicense, address _artistAddress, uint256 _pricePerTokenInWei, uint256 _maxArtworks, uint256 _maxEarly) public onlyWhitelisted {\r\n    uint256 projectId = nextProjectId;\r\n    projectIdToArtistAddress[projectId] = _artistAddress;\r\n    projects[projectId].name = _projectName;\r\n    projects[projectId].artist = artistName;\r\n    projects[projectId].description = description;\r\n    projects[projectId].website = projectWebsite;\r\n    projects[projectId].license = projectLicense;\r\n    projectIdToCurrencySymbol[projectId] = \"ETH\";\r\n    projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;\r\n    projects[projectId].paused=false;\r\n    projects[projectId].earlyActive = false;\r\n    projects[projectId].publicActive = false;\r\n    projects[projectId].maxArtworks = _maxArtworks;\r\n    projects[projectId].maxEarly = _maxEarly;\r\n    projects[projectId].projectBaseURI = tokenURI;\r\n    nextProjectId = nextProjectId.add(1);\r\n}\r\nfunction updateProjectCurrencyInfo(uint256 _projectId, string memory _currencySymbol, address _currencyAddress) onlyAdmin() public {\r\n    projectIdToCurrencySymbol[_projectId] = _currencySymbol;\r\n    projectIdToCurrencyAddress[_projectId] = _currencyAddress;\r\n}\r\nfunction updateProjectPricePerTokenInWei(uint256 _projectId, uint256 _pricePerTokenInWei) onlyWhitelisted public {\r\n    projectIdToPricePerTokenInWei[_projectId] = _pricePerTokenInWei;\r\n}\r\nfunction updateProjectName(uint256 _projectId, string memory _projectName) onlyUnlocked(_projectId) onlyAdmin() public {\r\n    projects[_projectId].name = _projectName;\r\n}\r\nfunction updateProjectArtistName(uint256 _projectId, string memory _projectArtistName) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\r\n    projects[_projectId].artist = _projectArtistName;\r\n}\r\nfunction updateProjectAdditionalPayeeInfo(uint256 _projectId, address _additionalPayee, uint256 _additionalPayeePercentage) onlyArtist(_projectId) public {\r\n    require(_additionalPayeePercentage <= 100, \"Max of 100%\");\r\n    projectIdToAdditionalPayee[_projectId] = _additionalPayee;\r\n    projectIdToAdditionalPayeePercentage[_projectId] = _additionalPayeePercentage;\r\n}\r\nfunction updateProjectDescription(uint256 _projectId, string memory _projectDescription) onlyArtist(_projectId) public {\r\n    projects[_projectId].description = _projectDescription;\r\n}\r\nfunction updateProjectWebsite(uint256 _projectId, string memory _projectWebsite) onlyArtist(_projectId) public {\r\n    projects[_projectId].website = _projectWebsite;\r\n}\r\nfunction updateProjectLicense(uint256 _projectId, string memory _projectLicense) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\r\n    projects[_projectId].license = _projectLicense;\r\n}\r\nfunction updateProjectMaxArtworks(uint256 _projectId, uint256 _maxArtworks) onlyUnlocked(_projectId) onlyWhitelisted public {\r\n    require(_maxArtworks > projects[_projectId].artworks.add(50), \"You must set max artworks greater than current artworks\");\r\n    require(_maxArtworks <= 5000, \"Cannot exceed 5000\");\r\n    projects[_projectId].maxArtworks = _maxArtworks;\r\n}\r\n function updateProjectMaxEarly(uint256 _projectId, uint256 _maxEarly) onlyUnlocked(_projectId) onlyWhitelisted public {\r\n    require(_maxEarly < projects[_projectId].maxArtworks, \"Early mint amount must be less than total number of artworks\");\r\n    require(_maxEarly <= 2500, \"Cannot exceed 2500\");\r\n    projects[_projectId].maxEarly = _maxEarly;\r\n}\r\nfunction updateProjectBaseURI(uint256 _projectId, string memory _newBaseURI) onlyWhitelisted public {\r\n    projects[_projectId].projectBaseURI = _newBaseURI;\r\n}\r\nfunction projectDetails(uint256 _projectId) view public returns (string memory projectName, string memory artist, string memory description, string memory website, string memory license) {\r\n    projectName = projects[_projectId].name;\r\n    artist = projects[_projectId].artist;\r\n    description = projects[_projectId].description;\r\n    website = projects[_projectId].website;\r\n    license = projects[_projectId].license;\r\n}\r\nfunction projectTokenInfo(uint256 _projectId) view public returns (address artistAddress, uint256 pricePerTokenInWei, uint256 artworks, uint256 maxArtworks, uint256 maxEarly, address additionalPayee, uint256 additionalPayeePercentage, bool publicActive, bool earlyActive, string memory currency) {\r\n    artistAddress = projectIdToArtistAddress[_projectId];\r\n    pricePerTokenInWei = projectIdToPricePerTokenInWei[_projectId];\r\n    artworks = projects[_projectId].artworks.add(50); //add 50 to account for claimable pieces for sentient members\r\n    maxArtworks = projects[_projectId].maxArtworks;\r\n    maxEarly = projects[_projectId].maxEarly;\r\n    publicActive = projects[_projectId].publicActive;\r\n    earlyActive = projects[_projectId].earlyActive;\r\n    additionalPayee = projectIdToAdditionalPayee[_projectId];\r\n    additionalPayeePercentage = projectIdToAdditionalPayeePercentage[_projectId];\r\n    currency = projectIdToCurrencySymbol[_projectId];\r\n}\r\nfunction projectURIInfo(uint256 _projectId) view public returns (string memory projectBaseURI) {\r\n    projectBaseURI = projects[_projectId].projectBaseURI;\r\n}\r\nfunction projectShowAllTokens(uint _projectId) public view returns (uint256[] memory){\r\n    return projectIdToTokenIds[_projectId];\r\n}\r\nfunction tokensOfOwner(address owner) external view returns (uint256[] memory) {\r\n    return _tokensOfOwner(owner);\r\n}\r\nfunction getRoyaltyData(uint256 _tokenId) public view returns (address artistAddress, address additionalPayee, uint256 additionalPayeePercentage) {\r\n    artistAddress = projectIdToArtistAddress[tokenIdToProjectId[_tokenId]];\r\n    additionalPayee = projectIdToAdditionalPayee[tokenIdToProjectId[_tokenId]];\r\n    additionalPayeePercentage = projectIdToAdditionalPayeePercentage[tokenIdToProjectId[_tokenId]];\r\n}\r\nfunction tokenURI(uint256 _tokenId) external view onlyValidTokenId(_tokenId) returns (string memory) {\r\n    return Strings.strConcat(projects[tokenIdToProjectId[_tokenId]].projectBaseURI, Strings.uint2str(_tokenId));\r\n}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"updateProjectName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectPublicMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mirageAddress\",\"type\":\"address\"}],\"name\":\"updateMirageAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToProjectId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectName\",\"type\":\"string\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"artistName\",\"type\":\"string\"},{\"name\":\"projectWebsite\",\"type\":\"string\"},{\"name\":\"projectLicense\",\"type\":\"string\"},{\"name\":\"_artistAddress\",\"type\":\"address\"},{\"name\":\"_pricePerTokenInWei\",\"type\":\"uint256\"},{\"name\":\"_maxArtworks\",\"type\":\"uint256\"},{\"name\":\"_maxEarly\",\"type\":\"uint256\"}],\"name\":\"addProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToCurrencySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_projectLicense\",\"type\":\"string\"}],\"name\":\"updateProjectLicense\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectURIInfo\",\"outputs\":[{\"name\":\"projectBaseURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miragePercentage\",\"type\":\"uint256\"}],\"name\":\"updateMiragePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_projectWebsite\",\"type\":\"string\"}],\"name\":\"updateProjectWebsite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_maxArtworks\",\"type\":\"uint256\"}],\"name\":\"updateProjectMaxArtworks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"updateProjectBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToCurrencyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membershipContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miragePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"updateProjectArtistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMintWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMintWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectTokenInfo\",\"outputs\":[{\"name\":\"artistAddress\",\"type\":\"address\"},{\"name\":\"pricePerTokenInWei\",\"type\":\"uint256\"},{\"name\":\"artworks\",\"type\":\"uint256\"},{\"name\":\"maxArtworks\",\"type\":\"uint256\"},{\"name\":\"maxEarly\",\"type\":\"uint256\"},{\"name\":\"additionalPayee\",\"type\":\"address\"},{\"name\":\"additionalPayeePercentage\",\"type\":\"uint256\"},{\"name\":\"publicActive\",\"type\":\"bool\"},{\"name\":\"earlyActive\",\"type\":\"bool\"},{\"name\":\"currency\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectDetails\",\"outputs\":[{\"name\":\"projectName\",\"type\":\"string\"},{\"name\":\"artist\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"website\",\"type\":\"string\"},{\"name\":\"license\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_pricePerTokenInWei\",\"type\":\"uint256\"}],\"name\":\"updateProjectPricePerTokenInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_maxEarly\",\"type\":\"uint256\"}],\"name\":\"updateProjectMaxEarly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_projectDescription\",\"type\":\"string\"}],\"name\":\"updateProjectDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mirageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToArtistAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyData\",\"outputs\":[{\"name\":\"artistAddress\",\"type\":\"address\"},{\"name\":\"additionalPayee\",\"type\":\"address\"},{\"name\":\"additionalPayeePercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"claimSentient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_projectArtistName\",\"type\":\"string\"}],\"name\":\"updateProjectArtistName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectShowAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleEarlyMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToAdditionalPayeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateMembershipContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_currencySymbol\",\"type\":\"string\"},{\"name\":\"_currencyAddress\",\"type\":\"address\"}],\"name\":\"updateProjectCurrencyInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToAdditionalPayee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_additionalPayee\",\"type\":\"address\"},{\"name\":\"_additionalPayeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateProjectAdditionalPayeeInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"earlyMint\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextProjectId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToPricePerTokenInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"membershipAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "ContractName": "mirageCurated", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000170227514a274826685bf81aed06e421817557200000000000000000000000000000000000000000000000000000000000000164d69726167652047616c6c65727920437572617465640000000000000000000000000000000000000000000000000000000000000000000000000000000000034d47430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9d128aba971e5c6a6322ce1ccb783eb22f6532b25dd55b689412f21f3e036547"}]}