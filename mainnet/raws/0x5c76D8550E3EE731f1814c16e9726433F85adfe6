{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PlanktoonsMarket.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n\\n    Planktoons market contract\\n      https://planktoons.io\\n\\n*/\\n\\nimport {MerkleMarket, Order} from \\\"./MerkleMarket.sol\\\";\\nimport {MerkleAirdrop} from \\\"./MerkleAirdrop.sol\\\";\\nimport {NFTStaking} from \\\"./NFTStaking.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\ncontract PlanktoonsMarket is MerkleMarket {\\n    // ---\\n    // Errors\\n    // ---\\n\\n    /// @notice A purchase was attempted by an account that does not own or have\\n    /// any staked Planktoons NFTs\\n    error NotAHolder();\\n\\n    // ---\\n    // Storage\\n    // ---\\n\\n    string public constant name = \\\"PlanktoonsMarket\\\";\\n\\n    /// @notice The Planktoons nft contract\\n    IERC721 public immutable nft;\\n\\n    /// @notice The Planktoons staking contract.\\n    NFTStaking public immutable staking;\\n\\n    /// @notice The Planktoons airdrop contract.\\n    MerkleAirdrop public immutable airdrop;\\n\\n    constructor(\\n        IERC721 nft_,\\n        NFTStaking staking_,\\n        MerkleAirdrop airdrop_\\n    ) {\\n        nft = nft_;\\n        staking = staking_;\\n        airdrop = airdrop_;\\n    }\\n\\n    // ---\\n    // End user functionality\\n    // ---\\n\\n    /// @notice Purchase items from the marketplace\\n    function purchase(Order[] calldata orders) public virtual override {\\n        _assertHasNfts();\\n        return MerkleMarket.purchase(orders);\\n    }\\n\\n    /// @notice Convenience function to claim from airdrop and staking contracts\\n    /// before purchasing from the market to save holders a few transactions.\\n    function claimAllAndPurchase(\\n        Order[] calldata orders,\\n        uint256 airdropMaxClaimable,\\n        bytes32[] calldata airdropProof\\n    ) external {\\n        _assertHasNfts();\\n\\n        // if nothing staked, nop is safe\\n        staking.claimFor(msg.sender);\\n\\n        // only attempt airdrop claim if > 0, allows skipping by setting max\\n        // claimable to 0 and passing in an empty array as proof\\n        if (airdropMaxClaimable > 0) {\\n            airdrop.claimFor(msg.sender, airdropMaxClaimable, airdropProof);\\n        }\\n\\n        purchase(orders);\\n    }\\n\\n    function _assertHasNfts() internal view {\\n        uint256 owned = nft.balanceOf(msg.sender) +\\n            staking.getStakedBalance(msg.sender);\\n        if (owned == 0) {\\n            revert NotAHolder();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MerkleMarket.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nstruct Order {\\n    string itemId;\\n    IERC20 token;\\n    uint256 unitPrice;\\n    uint256 maxAmount;\\n    bytes32[] proof;\\n    uint256 amount;\\n}\\n\\n/// @notice Simple vending machine (eg, for community prizes) that stores\\n/// inventory off chain and requires a proof to be submitted when purchasing\\ncontract MerkleMarket is Ownable {\\n    // ---\\n    // Events\\n    // ---\\n\\n    /// @notice An item was purchased from the market\\n    event ItemPurchased(\\n        string itemId,\\n        IERC20 token,\\n        uint256 unitPrice,\\n        uint256 amount\\n    );\\n\\n    // ---\\n    // Errors\\n    // ---\\n\\n    /// @notice A purchase was attempted for an item that is out of stock.\\n    error NoRemainingSupply();\\n\\n    /// @notice A purchase was attempted with an invalid inventory proof.\\n    error InvalidItem();\\n\\n    // ---\\n    // Storage\\n    // ---\\n\\n    /// @notice The merkle root of the inventory tree.\\n    bytes32 public inventoryRoot;\\n\\n    // item ID -> total purchased so far\\n    mapping(string => uint256) private _purchased;\\n\\n    // ---\\n    // Admin functionality\\n    // ---\\n\\n    /// @notice Set the merkle root of the inventory tree.\\n    function setInventoryRoot(bytes32 root) public onlyOwner {\\n        inventoryRoot = root;\\n    }\\n\\n    /// @notice Withdraw tokens from the marketplace.\\n    function withdraw(IERC20 token) external onlyOwner {\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    // ---\\n    // Main functionality\\n    // ---\\n\\n    /// @notice Purchase items from the marketplace\\n    function purchase(Order[] calldata orders) public virtual {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            bool isValid = MerkleProof.verify(\\n                orders[i].proof,\\n                inventoryRoot,\\n                keccak256(\\n                    abi.encodePacked(\\n                        orders[i].itemId,\\n                        orders[i].token,\\n                        orders[i].unitPrice,\\n                        orders[i].maxAmount\\n                    )\\n                )\\n            );\\n\\n            if (!isValid) revert InvalidItem();\\n\\n            // make sure there is remaining supply and update the total purchase\\n            // count for this item\\n            uint256 nextCount = _purchased[orders[i].itemId] + orders[i].amount;\\n            if (nextCount > orders[i].maxAmount) revert NoRemainingSupply();\\n            _purchased[orders[i].itemId] = nextCount;\\n\\n            // execute the token transfer\\n            orders[i].token.transferFrom(\\n                msg.sender,\\n                address(this),\\n                orders[i].unitPrice * orders[i].amount\\n            );\\n\\n            emit ItemPurchased(\\n                orders[i].itemId,\\n                orders[i].token,\\n                orders[i].unitPrice,\\n                orders[i].amount\\n            );\\n        }\\n    }\\n\\n    // ---\\n    // Views\\n    // ---\\n\\n    /// @notice Get the total purchased count for as specific item.\\n    function getTotalPurchased(string calldata itemId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _purchased[itemId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MerkleAirdrop.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/// @notice Simple merkle airdrop contract. Claimed tokens come from reserves\\n/// held by the contract\\ncontract MerkleAirdrop is Ownable {\\n    // ---\\n    // Events\\n    // ---\\n\\n    /// @notice Tokens were claimed for a recipient\\n    event TokensClaimed(address recipient, uint256 amount);\\n\\n    // ---\\n    // Errors\\n    // ---\\n\\n    /// @notice The contract has already been set up\\n    error AlreadySetup();\\n\\n    /// @notice A claim was attempted with an invalid claim list proof.\\n    error InvalidClaim();\\n\\n    /// @notice A claim on behalf of another address came from an account with no allowance.\\n    error NotApproved();\\n\\n    // ---\\n    // Storage\\n    // ---\\n\\n    /// @notice The merkle root of the claim list tree.\\n    bytes32 public claimListRoot;\\n\\n    /// @notice The airdropped token\\n    IERC20 public token;\\n\\n    // tokens claimed so far\\n    mapping(address => uint256) private _claimed;\\n\\n    // ---\\n    // Admin\\n    // ---\\n\\n    /// @notice Set the airdropped token, merkle root, and do an initial\\n    /// deposit. Only callable by owner, only callable once.\\n    function setup(\\n        IERC20 token_,\\n        uint256 deposit,\\n        bytes32 root\\n    ) external onlyOwner {\\n        if (token != IERC20(address(0))) revert AlreadySetup();\\n\\n        token = token_;\\n        claimListRoot = root;\\n\\n        // reverts if contract not approved to spend msg.sender tokens\\n        // reverts if insufficient balance in msg.sender\\n        // reverts if invalid token reference\\n        // reverts if deposit = 0\\n        token_.transferFrom(msg.sender, address(this), deposit);\\n    }\\n\\n    /// @notice Set the merkle root of the claim tree. Only callable by owner.\\n    function setClaimListRoot(bytes32 root) external onlyOwner {\\n        claimListRoot = root;\\n    }\\n\\n    // ---\\n    // End users\\n    // ---\\n\\n    /// @notice Claim msg.sender's airdropped tokens.\\n    function claim(uint256 maxClaimable, bytes32[] calldata proof)\\n        external\\n        returns (uint256)\\n    {\\n        return _claimFor(msg.sender, maxClaimable, proof);\\n    }\\n\\n    /// @notice Permissionlessly claim tokens on behalf of another account.\\n    function claimFor(\\n        address recipient,\\n        uint256 maxClaimable,\\n        bytes32[] calldata proof\\n    ) external returns (uint256) {\\n        return _claimFor(recipient, maxClaimable, proof);\\n    }\\n\\n    function _claimFor(\\n        address recipient,\\n        uint256 maxClaimable,\\n        bytes32[] calldata proof\\n    ) internal returns (uint256) {\\n        bool isValid = MerkleProof.verify(\\n            proof,\\n            claimListRoot,\\n            keccak256(abi.encodePacked(recipient, maxClaimable))\\n        );\\n\\n        if (!isValid) revert InvalidClaim();\\n\\n        uint256 claimed = _claimed[recipient];\\n        uint256 toClaim = claimed < maxClaimable ? maxClaimable - claimed : 0;\\n\\n        // allow silent / non-reverting nop\\n        if (toClaim == 0) return 0;\\n\\n        _claimed[recipient] = maxClaimable;\\n        emit TokensClaimed(recipient, toClaim);\\n\\n        // reverts if insufficient reserve balance\\n        token.transfer(recipient, toClaim);\\n\\n        return toClaim;\\n    }\\n\\n    // ---\\n    // Views\\n    // ---\\n\\n    /// @notice Returns the total amount of tokens claimed for an account\\n    function totalClaimed(address account) external view returns (uint256) {\\n        return _claimed[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nstruct AccountStake {\\n    // buffered rewards... tokens earned by an account but not yet distributed.\\n    // 96 bit int -> 79 billion max earned token accumulator\\n    uint96 earned;\\n    // the last time a claim occured\\n    uint96 lastClaimTime;\\n    // the total count of NFTs staked\\n    uint32 stakedCount;\\n    // token ID -> isStaked flag\\n    mapping(uint256 => bool) stakedTokens;\\n}\\n\\n/// @notice A simple NFT staking contract to emit deposited reserves to stakers\\n/// as claimable tokens.\\ncontract NFTStaking is Ownable {\\n    /// @notice The amount of tokens that are emitted per day per NFT.\\n    uint256 public constant DAILY_RATE = 1 * 10**18;\\n\\n    // ---\\n    // Storage\\n    // ---\\n\\n    /// @notice The NFT that can be staked in this contract.\\n    IERC721 public nft;\\n\\n    /// @notice The token that is rewarded for staking.\\n    IERC20 public token;\\n\\n    //// @notice Generate rewards up until this timestamp\\n    uint256 public rewardUntilTimestamp = block.timestamp + 365 days;\\n\\n    // all staking data by owner address\\n    mapping(address => AccountStake) private _stakes;\\n\\n    // ---\\n    // Events\\n    // ---\\n\\n    /// @notice An NFT was staked into the contract.\\n    event NFTStaked(address owner, uint256 tokenId);\\n\\n    /// @notice An NFT was unstaked from the contract.\\n    event NFTUnstaked(address owner, uint256 tokenId);\\n\\n    /// @notice Tokens were claimed.\\n    event TokensClaimed(address owner, uint256 amount);\\n\\n    // ---\\n    // Errors\\n    // ---\\n\\n    /// @notice Setup was attempted more than once.\\n    error AlreadySetup();\\n\\n    /// @notice A token was attempted to be staked that wasn't owned by the staker.\\n    error NotTokenOwner();\\n\\n    /// @notice An invalid NFT was attempted to be unstaked (eg, not owned or staked)\\n    error InvalidUnstake();\\n\\n    /// @notice Reward end timestamp was set to an earlier date\\n    error InvalidRewardUntilTimestamp();\\n\\n    // ---\\n    // Admin functionality\\n    // ---\\n\\n    /// @notice Set the NFT and token contracts.\\n    function setup(\\n        IERC721 nft_,\\n        IERC20 token_,\\n        uint256 deposit_\\n    ) external onlyOwner {\\n        if (nft != IERC721(address(0))) revert AlreadySetup();\\n\\n        nft = nft_;\\n        token = token_;\\n\\n        // reverts if contract not approved to spend msg.sender tokens\\n        // reverts if insufficient balance in msg.sender\\n        // reverts if invalid token reference\\n        // reverts if deposit = 0\\n        token_.transferFrom(msg.sender, address(this), deposit_);\\n    }\\n\\n    /// @notice Deposit more reward tokens (if amount > 0) and update the\\n    /// rewards cutoff date (if cutoff > 0))\\n    function depositRewards(uint256 amount, uint256 cutoff) external onlyOwner {\\n        if (amount > 0) {\\n            // reverts if contract not approved to spend msg.sender tokens\\n            // reverts if insufficient balance in msg.sender\\n            // reverts if staking not set up\\n            token.transferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        if (cutoff > 0) {\\n            if (cutoff < rewardUntilTimestamp)\\n                revert InvalidRewardUntilTimestamp();\\n            rewardUntilTimestamp = cutoff;\\n        }\\n    }\\n\\n    // ---\\n    // Holder functionality\\n    // ---\\n\\n    /// @notice Stake multiple NFTs\\n    function stakeNFTs(uint256[] memory tokenIds) external {\\n        // flush rewards to accumulator, basically buffers the current claim\\n        // since we are about the change the \\\"rate\\\" of rewards when we stake\\n        // more NFTs\\n        _stakes[msg.sender].earned = uint96(getClaimable(msg.sender));\\n        _stakes[msg.sender].lastClaimTime = uint96(block.timestamp);\\n        _stakes[msg.sender].stakedCount += uint32(tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // reverts if nft isnt owned by caller\\n            // reverts if already staked (eg, a duplicate token ID)\\n            if (nft.ownerOf(tokenId) != msg.sender) revert NotTokenOwner();\\n\\n            _stakes[msg.sender].stakedTokens[tokenId] = true;\\n            emit NFTStaked(msg.sender, tokenId);\\n\\n            // reverts if contract not approved to move nft tokens\\n            // reverts if contract is not set up\\n            nft.transferFrom(msg.sender, address(this), tokenId);\\n        }\\n    }\\n\\n    /// @notice Claim all earned tokens for msg.sender\\n    function claim() external {\\n        _claimFor(msg.sender);\\n    }\\n\\n    /// @notice Permissionlessly claim tokens on behalf of another account.\\n    function claimFor(address account) external {\\n        _claimFor(account);\\n    }\\n\\n    /// @notice Claim all unearned tokens and unstake a subset of staked NFTs\\n    function claimAndUnstakeNFTs(uint256[] memory tokenIds) external {\\n        _claimFor(msg.sender);\\n        _stakes[msg.sender].stakedCount -= uint32(tokenIds.length); // reverts on overflow\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unstake(msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unstake without claiming -- do not call unless NFTs are stuck\\n    /// due to insufficient rewards reserve balance.\\n    function emergencyUnstake(uint256[] memory tokenIds) external {\\n        // flush rewards to accumulator\\n        _stakes[msg.sender].earned = uint96(getClaimable(msg.sender));\\n        _stakes[msg.sender].lastClaimTime = uint96(block.timestamp);\\n        _stakes[msg.sender].stakedCount -= uint32(tokenIds.length); // reverts on overflow\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unstake(msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    function _unstake(address account, uint256 tokenId) internal {\\n        if (!_stakes[account].stakedTokens[tokenId]) revert InvalidUnstake();\\n        delete _stakes[account].stakedTokens[tokenId];\\n        emit NFTUnstaked(account, tokenId);\\n\\n        nft.transferFrom(address(this), account, tokenId);\\n    }\\n\\n    function _claimFor(address account) internal {\\n        uint256 claimable = getClaimable(account);\\n        if (claimable == 0) return; // allow silent nop\\n        _stakes[account].earned = 0;\\n        _stakes[account].lastClaimTime = uint96(block.timestamp);\\n        emit TokensClaimed(account, claimable);\\n\\n        // reverts if insufficient rewards reserves\\n        token.transfer(account, claimable);\\n    }\\n\\n    // ---\\n    // Views\\n    // ---\\n\\n    /// @notice Returns the total claimable tokens for a given account.\\n    function getClaimable(address account) public view returns (uint256) {\\n        // either claim up until now, or the rewards cutoff time if we've\\n        // already passed that date\\n        uint256 claimUntil = block.timestamp < rewardUntilTimestamp\\n            ? block.timestamp\\n            : rewardUntilTimestamp;\\n\\n        uint256 delta = claimUntil - _stakes[account].lastClaimTime;\\n        uint256 emitted = (_stakes[account].stakedCount * DAILY_RATE * delta) /\\n            1 days;\\n\\n        return emitted + _stakes[account].earned;\\n    }\\n\\n    /// @notice Returns the total NFTs that have been staked by an account\\n    function getStakedBalance(address account) public view returns (uint256) {\\n        return _stakes[account].stakedCount;\\n    }\\n\\n    /// @notice Returns true of a specific token ID has been staked by a specific address\\n    function isStakedForAccount(address account, uint256 tokenId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _stakes[account].stakedTokens[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"contract NFTStaking\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"contract MerkleAirdrop\",\"name\":\"airdrop_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRemainingSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"contract MerkleAirdrop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"airdropMaxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"airdropProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAllAndPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"getTotalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setInventoryRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract NFTStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlanktoonsMarket", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a411c5fbf61dde466ed9b1f0120058231aa0a5090000000000000000000000002649a76feef188d5d5ac0d66f1c3798dfb9c2031000000000000000000000000dfaec0be5cbf4a9d89c6563316416888afff5d16", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}