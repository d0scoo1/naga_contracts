{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenURICollector.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IERC721A.sol\\\";\\n\\ncontract TokenURICollector {\\n\\n    address public authorized;\\n\\n    /// @author devberry.eth\\n\\n    constructor(){\\n        authorized = msg.sender;\\n    }\\n\\n    function setAuthorized(address _authorized) public {\\n        if (tx.origin != authorized) revert(\\\"???\\\");\\n        authorized = _authorized;\\n    }\\n\\n    function collectAllTokenURIs(address _contract) public view returns (string[] memory, uint256[] memory) {\\n        IERC721A target = IERC721A(_contract);\\n        return _collectTokenURIs(target,0,target.totalSupply());\\n    }\\n\\n    function collectTokenURIs(address _contract, uint256 offset, uint256 max) public view returns (string[] memory, uint256[] memory) {\\n        return _collectTokenURIs(IERC721A(_contract),offset,max);\\n    }\\n\\n    function _collectTokenURIs(IERC721A target, uint256 offset, uint256 max) internal view returns (string[] memory, uint256[] memory) {\\n\\n        if ( tx.origin != authorized ) revert();\\n\\n        uint256 total = max-offset;\\n\\n        uint256 index;\\n\\n        string[] memory tokenUris = new string[](total);\\n        uint256[] memory tokenIds = new uint256[](total);\\n\\n        for(uint256 i = offset; i < max; i++){\\n            try target.tokenURI(i) returns (string memory tokenUri) {\\n                tokenUris[index] = tokenUri;\\n                tokenIds[index++] = i;\\n            } catch {\\n                max++;\\n            }\\n            if(index == total){\\n                break;\\n            }\\n        }\\n        return (tokenUris, tokenIds);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721A.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IERC721A {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"collectAllTokenURIs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"collectTokenURIs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorized\",\"type\":\"address\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenURICollector", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}