{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n\r\n______       ______ _______  ________  ______  _______   ______  \r\n /      \\|  \\  |  \\      \\       \\|        \\/      \\|       \\ /      \\ \r\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\ \u2593\u2593  | \u2593\u2593\\\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\ \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\r\n| \u2593\u2593___\\\u2593\u2593 \u2593\u2593__| \u2593\u2593 | \u2593\u2593 | \u2593\u2593__/ \u2593\u2593  | \u2593\u2593  | \u2593\u2593__| \u2593\u2593 \u2593\u2593__| \u2593\u2593 \u2593\u2593  | \u2593\u2593\r\n \\\u2593\u2593    \\| \u2593\u2593    \u2593\u2593 | \u2593\u2593 | \u2593\u2593    \u2593\u2593  | \u2593\u2593  | \u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593 \u2593\u2593  | \u2593\u2593\r\n _\\\u2593\u2593\u2593\u2593\u2593\u2593\\ \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 | \u2593\u2593 | \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\  | \u2593\u2593  | \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\ \u2593\u2593  | \u2593\u2593\r\n|  \\__| \u2593\u2593 \u2593\u2593  | \u2593\u2593_| \u2593\u2593_| \u2593\u2593__/ \u2593\u2593  | \u2593\u2593  | \u2593\u2593  | \u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593\r\n \\\u2593\u2593    \u2593\u2593 \u2593\u2593  | \u2593\u2593   \u2593\u2593 \\ \u2593\u2593    \u2593\u2593  | \u2593\u2593  | \u2593\u2593  | \u2593\u2593 \u2593\u2593  | \u2593\u2593\\\u2593\u2593    \u2593\u2593\r\n  \\\u2593\u2593\u2593\u2593\u2593\u2593 \\\u2593\u2593   \\\u2593\u2593\\\u2593\u2593\u2593\u2593\u2593\u2593\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593    \\\u2593\u2593   \\\u2593\u2593   \\\u2593\u2593\\\u2593\u2593   \\\u2593\u2593 \\\u2593\u2593\u2593\u2593\u2593\u2593\r\n\r\n\r\nTELEGRAM : https://t.me/ShibTaroPortal\r\nWEBSITE :  https://shibtaro.com/\r\nTWITTER :  https://twitter.com/shib_taro\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract SHIBTARO is Context, IERC20 {\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _liquidityHolders;\r\n\r\n    uint256 private startingSupply = 10_000_000_000;\r\n\r\n    string private _name = \"SHIBTARO\";\r\n    string private _symbol = \"SHIBTARO\";\r\n\r\n    uint256 public _devFeeOnBuy       = 300; // 3% (3 x 100)\r\n    uint256 public _liquidityFeeOnBuy = 300; // 3% (3 x 100)\r\n    uint256 public _marketingFeeOnBuy = 800; // 8% (8 x 100)\r\n    uint256 public _sumTotalFeesOnBuy = _devFeeOnBuy + _liquidityFeeOnBuy + _marketingFeeOnBuy;\r\n\r\n    uint256 public _devFeeOnSell       = 300; // 3% (3 x 100)\r\n    uint256 public _liquidityFeeOnSell = 300; // 3% (3 x 100)\r\n    uint256 public _marketingFeeOnSell = 800; // 8% (8 x 100)\r\n    uint256 public _sumTotalFeesOnSell = _devFeeOnSell + _liquidityFeeOnSell + _marketingFeeOnSell;\r\n\r\n    uint8 constant private _decimals      = 9;\r\n    uint256 constant private _decimalsMul = _decimals;\r\n    uint256 private _tTotal               = startingSupply * 10**_decimalsMul;\r\n\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public lpPair;\r\n\r\n    // UNI ROUTER\r\n    address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    address constant public DEAD             = 0x000000000000000000000000000000000000dEaD;\r\n    address payable private _teamWallet      = payable(0xbDB27b6dD34A3A4dB6438b8ab08fF876e608FB54);\r\n    address payable private _marketingWallet = payable(0x5a49601608B1D192339196b8DD0aA30A6EF86809);\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    \r\n    uint256 private maxTxPercent = 1;\r\n    uint256 private maxTxDivisor = 100;\r\n    uint256 private _maxTxAmount = (_tTotal * maxTxPercent) / maxTxDivisor;\r\n\r\n    uint256 private maxWalletPercent = 1;\r\n    uint256 private maxWalletDivisor = 100;\r\n    uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;\r\n\r\n    uint256 private swapThreshold = (_tTotal * 5) / 10000;\r\n    uint256 private swapAmount = (_tTotal * 5) / 1000;\r\n\r\n    bool public startTrade                = true;\r\n    uint256 private _liqAddBlock          = 0;\r\n    bool public _hasLiqBeenAddedInitially = false;\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n\r\n    event SetNewRouter(address indexed oldRouter, address indexed newRouter);\r\n    event SetLpPair(address indexed pair, bool enabled);\r\n    event SetExcludedFromFees(address account, bool enabled);\r\n    event SetStartTrade(bool enabled);\r\n    event SetFeesOnBuy(uint256 dev, uint256 liquidity, uint256 marketing);\r\n    event SetFeesOnSell(uint256 dev, uint256 liquidity, uint256 marketing);\r\n    event SetMaxTxPercent(uint256 percent, uint256 divisor);\r\n    event SetMaxWalletSize(uint256 percent, uint256 divisor);\r\n    event SetSwapSettings(uint256 swapThreshold, uint256 swapAmount);\r\n    event SetWallets(address indexed newMarketingWallet, address indexed newTeamWallet);\r\n    event BlacklistAddress(address account, bool value);\r\n    event PotOfGreedBuy(uint256 dev, uint256 liquidity, uint256 marketing, uint256 sumTotalFees);\r\n    event PotOfGreedSell(uint256 dev, uint256 liquidity, uint256 marketing, uint256 sumTotalFees);\r\n    event ResetFees(uint256 devBuy, uint256 liquidityBuy, uint256 marketingBuy, uint256 devSell, uint256 liquiditySell, uint256 marketingSell);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Caller =/= owner.\");\r\n        _;\r\n    }\r\n    \r\n    constructor () payable {\r\n        _tOwned[_msgSender()] = _tTotal;\r\n\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n\r\n        dexRouter                                      = IUniswapV2Router02(_routerAddress);\r\n        lpPair                                         = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair]                                = true;\r\n        _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _liquidityHolders[owner()] = true;\r\n\r\n        // Approve the owner for PancakeSwap, timesaver.\r\n        _approve(_msgSender(), _routerAddress, _tTotal);\r\n\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\r\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner() {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        setExcludedFromFees(_owner, false);\r\n        setExcludedFromFees(newOwner, true);\r\n        \r\n        if (_marketingWallet == payable(_owner))\r\n            _marketingWallet = payable(newOwner);\r\n        \r\n        _allowances[_owner][newOwner] = balanceOf(_owner);\r\n        if(balanceOf(_owner) > 0) {\r\n            _transfer(_owner, newOwner, balanceOf(_owner));\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        setExcludedFromFees(_owner, false);\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approveMax(address spender) public returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function setNewRouter(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\r\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        emit SetNewRouter(address(dexRouter), address(_newRouter));\r\n        dexRouter = _newRouter;\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 1 weeks, \"One week cooldown.\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n        }\r\n        emit SetLpPair(pair, enabled);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n        emit SetExcludedFromFees(account, enabled);\r\n    }\r\n\r\n    function setStartTrade(bool enabled) public onlyOwner {\r\n        startTrade = enabled;\r\n        emit SetStartTrade(enabled);\r\n    }\r\n\r\n    function setFeesOnBuy(uint256 dev, uint256 liquidity, uint256 marketing) external onlyOwner {\r\n        _devFeeOnBuy = dev;\r\n        _liquidityFeeOnBuy = liquidity;\r\n        _marketingFeeOnBuy = marketing;\r\n        _sumTotalFeesOnBuy = _devFeeOnBuy + _liquidityFeeOnBuy + _marketingFeeOnBuy;\r\n        emit SetFeesOnBuy(dev, liquidity, marketing);\r\n    }\r\n\r\n    function setFeesOnSell(uint256 dev, uint256 liquidity, uint256 marketing) external onlyOwner {\r\n        _devFeeOnSell = dev;\r\n        _liquidityFeeOnSell = liquidity;\r\n        _marketingFeeOnSell = marketing;\r\n        _sumTotalFeesOnSell = _devFeeOnSell + _liquidityFeeOnSell + _marketingFeeOnSell;\r\n        emit SetFeesOnSell(dev, liquidity, marketing);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Must be above 0.1% of total supply.\");\r\n        _maxTxAmount = check;\r\n        emit SetMaxTxPercent(percent, divisor);\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Must be above 0.1% of total supply.\");\r\n        _maxWalletSize = check;\r\n        emit SetMaxWalletSize(percent, divisor);\r\n    }\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n        emit SetSwapSettings(swapThreshold, swapAmount);\r\n    }\r\n\r\n    function setWallets(address payable marketingWallet, address payable teamWallet) external onlyOwner {\r\n        _marketingWallet = payable(marketingWallet);\r\n        _teamWallet = payable(teamWallet);\r\n        emit SetWallets(_marketingWallet, _teamWallet);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function blacklistAddress(address account, bool value) external onlyOwner {\r\n        _isBlacklisted[account] = value;\r\n        emit BlacklistAddress(account, value);\r\n    }\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: Zero address.\");\r\n        require(to != address(0), \"ERC20: Zero address.\");\r\n        require(amount > 0, \"Must >0.\");\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], 'Blacklisted address');\r\n\r\n        if (!startTrade) {\r\n            revert('Trading is not active!');\r\n        }\r\n\r\n        if (_liqAddBlock == 0) {\r\n            _checkLiquidityAdd(from, to);\r\n        }\r\n        \r\n        if(_hasLimits(from, to)) {\r\n            if(lpPairs[from] || lpPairs[to]){\r\n                require(amount <= _maxTxAmount, \"Exceeds the maxTxAmount.\");\r\n            }\r\n            if(to != _routerAddress && !lpPairs[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        if (to == lpPair) {\r\n            if (!inSwapAndLiquify && swapAndLiquifyEnabled) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (contractTokenBalance >= swapThreshold) {\r\n                    if(contractTokenBalance >= swapAmount) { \r\n                        contractTokenBalance = swapAmount;\r\n                    }\r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n            }      \r\n        }\r\n\r\n        if (from == lpPair) {\r\n            if (_liqAddBlock == block.number && _hasLimits(from, to)) {\r\n                _isBlacklisted[to] = true;\r\n                revert('FrontRunning is Bad!');\r\n            }\r\n        }\r\n\r\n        return _finalizeTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        if (_liquidityFeeOnSell + _marketingFeeOnSell + _devFeeOnSell == 0) { return; }\r\n        if (_liquidityFeeOnSell + _marketingFeeOnSell + _devFeeOnSell != _sumTotalFeesOnSell) { return; }\r\n\r\n        uint256 toLiquifyHalf = ((contractTokenBalance * _liquidityFeeOnSell) / _sumTotalFeesOnSell) / 2;\r\n\r\n        uint256 toSwapForEth = contractTokenBalance - toLiquifyHalf;\r\n        swapTokensForEth(toSwapForEth);\r\n\r\n        uint256 currentBalance = address(this).balance;\r\n        uint256 liquidityBalance = ((currentBalance * _liquidityFeeOnSell) / _sumTotalFeesOnSell) / 2;\r\n\r\n        if (toLiquifyHalf > 0) {\r\n            addLiquidity(toLiquifyHalf, liquidityBalance);\r\n            emit SwapAndLiquify(toLiquifyHalf, liquidityBalance, toLiquifyHalf);\r\n        }\r\n        if (currentBalance - liquidityBalance > 0) {\r\n            _marketingWallet.transfer(((currentBalance * _marketingFeeOnSell) / _sumTotalFeesOnSell));\r\n            _teamWallet.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        if (!_hasLiqBeenAddedInitially) {\r\n            if (!_hasLimits(from, to) && to == lpPair) {\r\n                _liqAddBlock = block.number; \r\n            }\r\n\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAddedInitially = true;\r\n\r\n            swapAndLiquifyEnabled = true;\r\n            emit SwapAndLiquifyEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    function _finalizeTransfer(address from, address to, uint256 amount, bool takeFee) private returns (bool) {\r\n        _tOwned[from] -= amount;\r\n        uint256 amountReceived = (takeFee) ? takeTaxes(from, to, amount) : amount;\r\n        _tOwned[to] += amountReceived;\r\n\r\n        emit Transfer(from, to, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function takeTaxes(address from, address to, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount;\r\n        if (from == lpPair) {\r\n            feeAmount = (amount * _sumTotalFeesOnBuy) / 10**4;\r\n        }\r\n\r\n        if (to == lpPair) {\r\n            feeAmount = (amount * _sumTotalFeesOnSell) / 10**4;\r\n        }\r\n\r\n        _tOwned[address(this)] += feeAmount;\r\n        emit Transfer(from, address(this), feeAmount);\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function potOfGreedBuy() public onlyOwner {\r\n        // half buy tax\r\n        _devFeeOnBuy       = _devFeeOnBuy / 2;\r\n        _liquidityFeeOnBuy = _liquidityFeeOnBuy / 2;\r\n        _marketingFeeOnBuy = _marketingFeeOnBuy / 2;\r\n        _sumTotalFeesOnBuy = _devFeeOnBuy + _liquidityFeeOnBuy + _marketingFeeOnBuy;\r\n        emit PotOfGreedBuy(_devFeeOnBuy, _liquidityFeeOnBuy, _marketingFeeOnBuy, _sumTotalFeesOnBuy);\r\n    }\r\n\r\n    function potOfGreedSell() public onlyOwner {\r\n        // double sell tax\r\n        _devFeeOnSell       = _devFeeOnSell * 2;\r\n        _liquidityFeeOnSell = _liquidityFeeOnSell * 2;\r\n        _marketingFeeOnSell = _marketingFeeOnSell * 2;\r\n        _sumTotalFeesOnSell = _devFeeOnSell + _liquidityFeeOnSell + _marketingFeeOnSell;\r\n        emit PotOfGreedSell(_devFeeOnSell, _liquidityFeeOnSell, _marketingFeeOnSell, _sumTotalFeesOnSell);\r\n    }\r\n\r\n    function resetFees() public onlyOwner {\r\n        _devFeeOnBuy       = 300;\r\n        _liquidityFeeOnBuy = 300;\r\n        _marketingFeeOnBuy = 800;\r\n        _sumTotalFeesOnBuy = _devFeeOnBuy + _liquidityFeeOnBuy + _marketingFeeOnBuy;\r\n\r\n        _devFeeOnSell       = 300;\r\n        _liquidityFeeOnSell = 300;\r\n        _marketingFeeOnSell = 800;\r\n        _sumTotalFeesOnSell = _devFeeOnSell + _liquidityFeeOnSell + _marketingFeeOnSell;\r\n        emit ResetFees(_devFeeOnBuy, _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnSell, _liquidityFeeOnSell, _marketingFeeOnSell);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"BlacklistAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumTotalFees\",\"type\":\"uint256\"}],\"name\":\"PotOfGreedBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumTotalFees\",\"type\":\"uint256\"}],\"name\":\"PotOfGreedSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"}],\"name\":\"ResetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"SetFeesOnBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"SetFeesOnSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetLpPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"SetMaxTxPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"SetMaxWalletSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"SetNewRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetStartTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"name\":\"SetSwapSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamWallet\",\"type\":\"address\"}],\"name\":\"SetWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFeeOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAddedInitially\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFeeOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sumTotalFeesOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sumTotalFeesOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potOfGreedBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potOfGreedSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"setFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"setFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setStartTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHIBTARO", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c72e57723ccafbf4ba89574c67f7596c3a80e5bf67f5a2b253f73816d34d0e90"}]}