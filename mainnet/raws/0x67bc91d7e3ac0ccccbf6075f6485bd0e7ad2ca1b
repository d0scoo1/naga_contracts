{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT AND GPL-3.0\r\n// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/RAM2PreBuy.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract RAM2PreBuy is Ownable {\r\n\r\n    address public _RAM2;\r\n\r\n    bool public _preBuyStopped;\r\n\r\n    uint8 public _totalPreBuyBatch;\r\n\r\n    uint8 public _totalPreBuyNFTs;\r\n\r\n    uint256 public _preBuyPrice = 0.11 ether;\r\n\r\n    mapping(address => uint8[]) private _usersBatch;\r\n\r\n    address private _fundReceiver;\r\n\r\n    struct PreBuy {\r\n        mapping(address => uint8) _users;\r\n        mapping(address => bool) _userMintStatus;\r\n        uint8 _usersCount;\r\n        uint8 _batchSize;\r\n    }\r\n\r\n    PreBuy[] private _preBuyUsers;\r\n\r\n    /**\r\n     * @dev setting default owner as fund receiver\r\n     */\r\n    constructor() {\r\n        _fundReceiver = owner();\r\n    }\r\n\r\n    fallback() external {}\r\n\r\n    receive() external payable {}\r\n\r\n    function checkPreBuyStopped() private view {\r\n        require(!_preBuyStopped, \"RAM2PreBuy: pre buy stopped\");\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to set RAM2 contract address.\r\n     * @param _ramContract RAM2 contract address\r\n     */\r\n    function configurePreBuy(address _ramContract) external onlyOwner {\r\n        _RAM2 = _ramContract;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to stop pre buy functionality.\r\n     */\r\n    function stopPreBuy() external onlyOwner {\r\n        _preBuyStopped = true;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to set new fund receiver.\r\n     * @param _newFundReceiver new fund receiver\r\n     */\r\n    function setNewFundReceiver(address _newFundReceiver) external onlyOwner {\r\n        _fundReceiver = _newFundReceiver;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to set pre buy price.\r\n     * @param _price new price in wei\r\n     */\r\n    function setPreBuyPrice(uint256 _price) external onlyOwner {\r\n        _preBuyPrice = _price;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used change user mint status.\r\n     * This method is only accessible by RAM2 contract.\r\n     * @param _batchNum pre buy batch number\r\n     * @param _user user's address\r\n     */\r\n    function setUserMintStatus(uint8 _batchNum, address _user) external {\r\n        require(msg.sender == _RAM2, \"RAM2PreBuy: caller is not RAM2\");\r\n        _preBuyUsers[_batchNum-1]._userMintStatus[_user] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used register for pre buy sale.\r\n     * @param _num number of nfts\r\n     */\r\n    function registerForPreBuy(uint8 _num) payable external {\r\n        checkPreBuyStopped();\r\n        require(_preBuyUsers[_totalPreBuyBatch-1]._users[msg.sender] + _num <= 3, \"RAM2PreBuy: max 3 nfts allowed\");\r\n        require((_preBuyPrice * _num) == msg.value, \"RAM2PreBuy: invalid price\");\r\n        if(_preBuyUsers[_totalPreBuyBatch-1]._users[msg.sender] == 0) {\r\n            require(_preBuyUsers[_totalPreBuyBatch-1]._usersCount < _preBuyUsers[_totalPreBuyBatch-1]._batchSize, \"RAM2PreBuy: max users limit reached\");\r\n            _preBuyUsers[_totalPreBuyBatch-1]._usersCount++;\r\n\r\n            _usersBatch[msg.sender].push(_totalPreBuyBatch);\r\n        }\r\n\r\n        _preBuyUsers[_totalPreBuyBatch-1]._users[msg.sender] += _num;\r\n        _totalPreBuyNFTs += _num;\r\n\r\n        payable(_fundReceiver).transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used create a new pre buy batch sale.\r\n     * @param _batchSize batch size\r\n     */\r\n    function createNewPreBuyBatch(uint8 _batchSize) external onlyOwner {\r\n        checkPreBuyStopped();    \r\n        if(_totalPreBuyBatch > 0) {\r\n            require(_preBuyUsers[_totalPreBuyBatch-1]._usersCount == _preBuyUsers[_totalPreBuyBatch-1]._batchSize, \"RAM2PreBuy: previous batch is not ended\");\r\n        }\r\n\r\n        PreBuy storage _new = _preBuyUsers.push();\r\n        _new._batchSize = _batchSize;\r\n        _totalPreBuyBatch++;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to get pre buy batch number on which user registered.\r\n     * @param _user user's address\r\n     */\r\n    function getPreBuyBatchNumByUser(address _user) external view returns(uint8[] memory _registeredBatches) {\r\n        return _usersBatch[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to get last pre buy batch register details.\r\n     */\r\n    function getPreBuyBatch() external view returns(uint8 _allowed, uint8 _registered) {\r\n        return (_preBuyUsers[_totalPreBuyBatch-1]._batchSize, _preBuyUsers[_totalPreBuyBatch-1]._usersCount);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to get total nfts buy user in batch.\r\n     * @param _batchNum batch number\r\n     * @param _user user's address\r\n     */\r\n    function getPreBuyBatchUsersNFTs(uint8 _batchNum, address _user) external view returns(uint8) {\r\n        return _preBuyUsers[_batchNum-1]._users[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to get user's mint status by pre buy batch number.\r\n     * @param _batchNum batch number\r\n     * @param _user user's address\r\n     */\r\n    function getPreBuyBatchUsersMintStatus(uint8 _batchNum, address _user) external view returns(bool) {\r\n        return _preBuyUsers[_batchNum-1]._userMintStatus[_user];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_RAM2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_preBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_preBuyStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalPreBuyBatch\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalPreBuyNFTs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramContract\",\"type\":\"address\"}],\"name\":\"configurePreBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_batchSize\",\"type\":\"uint8\"}],\"name\":\"createNewPreBuyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreBuyBatch\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_allowed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_registered\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPreBuyBatchNumByUser\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_registeredBatches\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_batchNum\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPreBuyBatchUsersMintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_batchNum\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPreBuyBatchUsersNFTs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_num\",\"type\":\"uint8\"}],\"name\":\"registerForPreBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFundReceiver\",\"type\":\"address\"}],\"name\":\"setNewFundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPreBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_batchNum\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setUserMintStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPreBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RAM2PreBuy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21b6aa4ac86e224095d85e37b6228795af4a803f732e6ade9c2721b1ec192d17"}]}