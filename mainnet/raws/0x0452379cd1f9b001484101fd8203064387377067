{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"LynKeyMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *s\\n     *  - an externally-owned account\\n     *  - a contract in constructions\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nlibrary SafeMath {\\n\\n  /**s\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n}\\n\\nabstract contract ERC20Basic {\\n  function totalSupply() public virtual view returns (uint256);\\n  function balanceOf(address who) public virtual view returns (uint256);\\n  function transfer(address to, uint256 value) public virtual;\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public virtual view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual;\\n  function approve(address spender, uint256 value) public virtual;\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract ERC1155 {\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    function balanceOf(uint256 tokenId) public virtual view returns (uint256);\\n    function setApprovalForAll(address operator, bool approved) public virtual;\\n    function isApprovedForAll(address account, address operator) public virtual view returns (bool);\\n\\n    function mintAndTransfer(address[] memory _addrs, uint256 _tokenId, uint256[] memory _amounts, string memory _uri) public virtual;\\n}\\n\\ncontract TokenRecipient {\\n    event ReceivedEther(address indexed sender, uint256 amount);\\n    event Fallback(address indexed sender, uint256 amount);\\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\\n\\n    /**\\n     * @dev Receive tokens and generate a log event\\n     * @param from Address from which to transfer tokens\\n     * @param value Amount of tokens to transfer\\n     * @param token Address of token\\n     * @param extraData Additional data to log\\n     */\\n    function receiveApproval(address from, uint256 value, address token, bytes memory extraData) public {\\n        ERC20(token).transferFrom(from, address(this), value);\\n\\n        emit ReceivedTokens(from, value, token, extraData);\\n    }\\n\\n    /**\\n     * @dev Receive Ether and generate a log event\\n     */\\n    fallback () external payable {\\n        emit Fallback(msg.sender, msg.value);\\n    }\\n\\n\\n    receive() external payable {\\n        emit ReceivedEther(msg.sender, msg.value);\\n    }\\n\\n}\\n\\ncontract LynKeyMarketPlace is Ownable, TokenRecipient{\\n    using SafeMath for uint256;\\n    using Address for address;\\n    string public constant name = \\\"LynKey Marketplace\\\";\\n    string public constant version = \\\"1.0\\\";\\n\\n    string private constant SALE_TYPE_BUY = \\\"BUY\\\";\\n    string private constant SALE_TYPE_BID = \\\"BID\\\";\\n\\n    mapping(address => bool) public isAdmin;\\n\\n    constructor(){\\n        owner = msg.sender;\\n        isAdmin[owner] = true;\\n    }\\n\\n    ERC20 private tokenContract;\\n    ERC1155 private NftContract;\\n    address private feeWallet;\\n\\n    modifier adminOnly() {\\n        require(msg.sender == owner || isAdmin[msg.sender] == true);\\n        _;\\n    }\\n\\n    modifier ownerOnly() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function addAdmin(address _address) external ownerOnly() {\\n        isAdmin[_address] = true;\\n    }\\n\\n    function removeAdmin(address _address) external ownerOnly() {\\n        isAdmin[_address] = false;\\n    }\\n\\n    function setFeeWallet(address _address) external ownerOnly() {\\n        feeWallet = _address;\\n    }\\n\\n    function withdraw(address _token, uint256 amount) external ownerOnly() {\\n        require(feeWallet != address(0), \\\"require set fee wallet\\\");\\n        if(_token == address(0)){\\n            uint256 value = address(this).balance;\\n            require(value >= amount, \\\"current balance must be than withdraw amount\\\");\\n            payable(feeWallet).transfer(amount);\\n        }else{\\n            require(_token.isContract(), \\\"invalid token contract\\\");\\n            tokenContract = ERC20(_token);\\n            uint256 value = tokenContract.balanceOf(address(this));\\n            require(value >= amount, \\\"current balance must be than withdraw amount\\\");\\n            tokenContract.transfer(feeWallet, amount);\\n        }\\n        \\n    }\\n\\n    /**\\n     * @dev Call atomicMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function exchange(\\n        address[3] calldata contracts,\\n        address[8] calldata addrs,\\n        uint256[3] calldata uints,\\n        uint256[3] calldata uintTokens,\\n        string[] memory strs)\\n        public\\n        adminOnly()\\n    {\\n        require(strs.length == 2, \\\"invalid string array\\\");\\n        uint256 feeValue = uints[0];\\n        uint256 sellValue = uints[1];\\n        uint256 royaltyValue = uints[2];\\n        uint256 totalValue =  (feeValue + sellValue + royaltyValue);\\n        \\n        address fromFee = addrs[0];\\n        address fromValue = addrs[2];\\n        address fromRoyalty = addrs[4];\\n\\n        if(contracts[1] == address(0)){\\n            require(keccak256(bytes(strs[0])) == keccak256(bytes(\\\"BUY\\\")),\\\"invalid sale type\\\");\\n            require(address(this).balance >=totalValue, \\\"not enough eth balance\\\");\\n            if(addrs[1] != address(0)){\\n                payable(addrs[1]).transfer(feeValue);\\n            }\\n            if(addrs[3] != address(0) && addrs[3] == addrs[5]){\\n                payable(addrs[3]).transfer(sellValue + royaltyValue);\\n            }else{\\n                if(addrs[3] != address(0)){\\n                    payable(addrs[3]).transfer(sellValue);\\n                }\\n                if(addrs[5]!= address(0)){\\n                    payable(addrs[5]).transfer(royaltyValue);\\n                }\\n            } \\n        }else{\\n            if(keccak256(bytes(strs[0])) == keccak256(bytes(\\\"BUY\\\"))) {\\n                fromFee = address(this);\\n                fromValue = address(this);\\n                fromRoyalty = address(this);\\n\\n                tokenContract = ERC20(contracts[1]);\\n                require(tokenContract.balanceOf(payable(address(this))) >= totalValue, \\\"not enough token balance\\\");\\n            }else{\\n                require(contracts[1] != address(0), \\\"can not bid/offer for currency\\\");\\n            }\\n\\n            if(addrs[1] != address(0)){\\n                transferTokens(contracts[1], fromFee, addrs[1], feeValue);\\n            }\\n            if(addrs[3] != address(0) && addrs[3] == addrs[5]){\\n                transferTokens(contracts[1], fromValue, addrs[3], sellValue + royaltyValue);\\n            }else{\\n                if(addrs[3] != address(0)){\\n                    transferTokens(contracts[1], fromValue, addrs[3], sellValue);\\n                }\\n                if(addrs[5]!= address(0)){\\n                    transferTokens(contracts[1], fromRoyalty, addrs[5], royaltyValue);\\n                }\\n            } \\n        }\\n            \\n        if(contracts[2] != address(0)){\\n            address[] memory addNft = new address[](2);\\n            addNft[0] = addrs[6];\\n            addNft[1] = addrs[7];\\n\\n            uint256[] memory intNft  = new uint256[](2);\\n            intNft[0] = uintTokens[1];\\n            intNft[1] = uintTokens[2];\\n\\n            if(uintTokens[1] > 0 || uintTokens[2] > 0) {\\n                NftContract = ERC1155(contracts[2]);\\n                NftContract.mintAndTransfer(addNft, uintTokens[0],  intNft, strs[1]);\\n            }\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Transfer tokens\\n     * @param token Token to transfer\\n     * @param from Address to charge fees\\n     * @param to Address to receive fees\\n     * @param amount Amount of protocol tokens to charge\\n     */\\n    function transferTokens(address token, address from, address to, uint amount)\\n        internal\\n    {\\n        if (amount > 0) {\\n            tokenContract = ERC20(token);\\n            if(from == address(this)){\\n                tokenContract.transfer(to, amount);\\n            }else{\\n                tokenContract.transferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"contracts\",\"type\":\"address[3]\"},{\"internalType\":\"address[8]\",\"name\":\"addrs\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[3]\",\"name\":\"uints\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"uintTokens\",\"type\":\"uint256[3]\"},{\"internalType\":\"string[]\",\"name\":\"strs\",\"type\":\"string[]\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LynKeyMarketPlace", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}