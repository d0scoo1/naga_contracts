{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ninterface IYearnAddressesProvider {\r\n    function addressById(string memory) external view returns (address);\r\n}\r\n\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface ISynth {\r\n    function target() external view returns (address);\r\n}\r\n\r\ninterface ISynthetix {\r\n    function availableSynthCount() external view returns (uint256);\r\n\r\n    function availableSynths(uint256) external view returns (address);\r\n}\r\n\r\ninterface ISynthTarget {\r\n    function currencyKey() external view returns (bytes32);\r\n}\r\n\r\ninterface IExchangeRates {\r\n    function ratesForCurrencies(bytes32[] calldata)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n}\r\n\r\ncontract Ownable {\r\n    address public ownerAddress;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwnerAddress(address _ownerAddress) public onlyOwner {\r\n        ownerAddress = _ownerAddress;\r\n    }\r\n}\r\n\r\ncontract AddressesProviderConsumer is Ownable {\r\n    address public addressesProviderAddress;\r\n\r\n    constructor(address _addressesProviderAddress) {\r\n        addressesProviderAddress = _addressesProviderAddress;\r\n    }\r\n\r\n    function setAddressesProviderAddress(address _addressesProviderAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        addressesProviderAddress = _addressesProviderAddress;\r\n    }\r\n\r\n    function addressById(string memory id) internal view returns (address) {\r\n        return\r\n            IYearnAddressesProvider(addressesProviderAddress).addressById(id);\r\n    }\r\n}\r\n\r\ncontract CalculationsSynth is AddressesProviderConsumer {\r\n    constructor(address _addressesProviderAddress)\r\n        AddressesProviderConsumer(_addressesProviderAddress)\r\n    {}\r\n\r\n    function getAddressByName(string memory nameString)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes32 name = bytes32(bytes(nameString));\r\n        address resolvedAddress = IAddressResolver(\r\n            addressById(\"SYNTHETIX_ADDRESS_RESOLVER\")\r\n        ).getAddress(name);\r\n        address targetAddress = targetAddressByProxyAddress(resolvedAddress);\r\n        if (targetAddress != address(0)) {\r\n            return targetAddress;\r\n        }\r\n        return resolvedAddress;\r\n    }\r\n\r\n    function synthetixProxyTarget() public view returns (ISynthetix) {\r\n        return ISynthetix(getAddressByName(\"ProxyERC20\"));\r\n    }\r\n\r\n    function exchangeRates() public view returns (IExchangeRates) {\r\n        return IExchangeRates(getAddressByName(\"ExchangeRates\"));\r\n    }\r\n\r\n    function synthsAddresses()\r\n        external\r\n        view\r\n        returns (address[] memory _synthsAddresses)\r\n    {\r\n        ISynthetix synthetix = synthetixProxyTarget();\r\n        uint256 availableSynthCount = synthetix.availableSynthCount();\r\n        _synthsAddresses = new address[](availableSynthCount);\r\n        for (uint256 synthIdx; synthIdx < availableSynthCount; synthIdx++) {\r\n            _synthsAddresses[synthIdx] = synthetix.availableSynths(synthIdx);\r\n        }\r\n    }\r\n\r\n    function targetAddressByProxyAddress(address contractAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        try ISynth(contractAddress).target() returns (address targetAddress) {\r\n            return targetAddress;\r\n        } catch {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function isSynth(address tokenAddress) external view returns (bool) {\r\n        address targetAddress = targetAddressByProxyAddress(tokenAddress);\r\n        if (targetAddress == address(0)) {\r\n            return false;\r\n        }\r\n        ISynthetix synthetix = synthetixProxyTarget();\r\n        uint256 availableSynthCount = synthetix.availableSynthCount();\r\n        for (uint256 synthIdx; synthIdx < availableSynthCount; synthIdx++) {\r\n            address synthAddress = synthetix.availableSynths(synthIdx);\r\n            if (targetAddress == synthAddress) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function currencyKeyByTokenAddress(address tokenAddress)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        address targetAddress = targetAddressByProxyAddress(tokenAddress);\r\n        if (targetAddress == address(0)) {\r\n            revert(\"token not a synth\");\r\n        }\r\n        return ISynthTarget(targetAddress).currencyKey();\r\n    }\r\n\r\n    function getPriceUsdc(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        bytes32 currencyKey = currencyKeyByTokenAddress(tokenAddress);\r\n        bytes32[] memory currenciesKeys = new bytes32[](1);\r\n        currenciesKeys[0] = currencyKey;\r\n        uint256[] memory rates = exchangeRates().ratesForCurrencies(\r\n            currenciesKeys\r\n        );\r\n        return rates[0] / 10**12;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProviderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressesProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"currencyKeyByTokenAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"internalType\":\"contract IExchangeRates\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameString\",\"type\":\"string\"}],\"name\":\"getAddressByName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isSynth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProviderAddress\",\"type\":\"address\"}],\"name\":\"setAddressesProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthetixProxyTarget\",\"outputs\":[{\"internalType\":\"contract ISynthetix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_synthsAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"targetAddressByProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CalculationsSynth", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009be19ee7bc4099d62737a7255f5c227fbcd6db93", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6df756961653e202f764c03d9176153a4b0dd38704d808e70f137a90869edca7"}]}