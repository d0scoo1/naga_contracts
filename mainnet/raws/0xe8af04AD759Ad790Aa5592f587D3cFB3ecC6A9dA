{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/dao/RewardsDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Docgen-SOLC: 0.6.0\\n\\npragma solidity ^0.8.0;\\n\\n// Inheritance\\nimport \\\"../utils/Owned.sol\\\";\\nimport \\\"../interfaces/IRewardsDistribution.sol\\\";\\n\\n// Libraires\\nimport \\\"../libraries/SafeDecimalMath.sol\\\";\\n\\n// Internal references\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/rewardsdistribution\\ncontract RewardsDistribution is Owned, IRewardsDistribution {\\n  using SafeMath for uint256;\\n  using SafeDecimalMath for uint256;\\n\\n  /**\\n   * @notice Authorised addresses able to call distributeRewards\\n   */\\n  mapping(address => bool) public rewardDistributors;\\n\\n  /**\\n   * @notice Address of the Synthetix ProxyERC20\\n   */\\n  address public pop;\\n\\n  /**\\n   * @notice Address of the FeePoolProxy\\n   */\\n  address public treasury;\\n\\n  /**\\n   * @notice An array of addresses and amounts to send\\n   */\\n  DistributionData[] public override distributions;\\n\\n  constructor(\\n    address _owner,\\n    address _pop,\\n    address _treasury\\n  ) public Owned(_owner) {\\n    pop = _pop;\\n    treasury = _treasury;\\n  }\\n\\n  // ========== EXTERNAL SETTERS ==========\\n\\n  function setPop(address _pop) external onlyOwner {\\n    pop = _pop;\\n  }\\n\\n  function setTreasury(address _treasury) external onlyOwner {\\n    treasury = _treasury;\\n  }\\n\\n  function approveRewardDistributor(address _distributor, bool _approved) external onlyOwner {\\n    emit RewardDistributorUpdated(_distributor, _approved);\\n    rewardDistributors[_distributor] = _approved;\\n  }\\n\\n  // ========== EXTERNAL FUNCTIONS ==========\\n\\n  /**\\n   * @notice Adds a Rewards DistributionData struct to the distributions\\n   * array. Any entries here will be iterated and rewards distributed to\\n   * each address when tokens are sent to this contract and distributeRewards()\\n   * is called by the autority.\\n   * @param destination An address to send rewards tokens too\\n   * @param amount The amount of rewards tokens to send\\n   * @param isLocker If the contract is a popLocker which has a slightly different notifyRewardsAmount interface\\n   */\\n  function addRewardDistribution(\\n    address destination,\\n    uint256 amount,\\n    bool isLocker\\n  ) external onlyOwner returns (bool) {\\n    require(destination != address(0), \\\"Cant add a zero address\\\");\\n    require(amount != 0, \\\"Cant add a zero amount\\\");\\n\\n    DistributionData memory rewardsDistribution = DistributionData(destination, amount, isLocker);\\n    distributions.push(rewardsDistribution);\\n\\n    emit RewardDistributionAdded(distributions.length - 1, destination, amount, isLocker);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Deletes a RewardDistribution from the distributions\\n   * so it will no longer be included in the call to distributeRewards()\\n   * @param index The index of the DistributionData to delete\\n   */\\n  function removeRewardDistribution(uint256 index) external onlyOwner {\\n    require(index <= distributions.length - 1, \\\"index out of bounds\\\");\\n\\n    // shift distributions indexes across\\n    delete distributions[index];\\n  }\\n\\n  /**\\n   * @notice Edits a RewardDistribution in the distributions array.\\n   * @param index The index of the DistributionData to edit\\n   * @param destination The destination address. Send the same address to keep or different address to change it.\\n   * @param amount The amount of tokens to edit. Send the same number to keep or change the amount of tokens to send.\\n   * @param isLocker If the contract is a popLocker which has a slightly different notifyRewardsAmount interface\\n   */\\n  function editRewardDistribution(\\n    uint256 index,\\n    address destination,\\n    uint256 amount,\\n    bool isLocker\\n  ) external onlyOwner returns (bool) {\\n    require(index <= distributions.length - 1, \\\"index out of bounds\\\");\\n\\n    distributions[index].destination = destination;\\n    distributions[index].amount = amount;\\n    distributions[index].isLocker = isLocker;\\n\\n    return true;\\n  }\\n\\n  function distributeRewards(uint256 amount) external override returns (bool) {\\n    require(amount > 0, \\\"Nothing to distribute\\\");\\n    require(rewardDistributors[msg.sender], \\\"not authorized\\\");\\n    require(pop != address(0), \\\"Pop is not set\\\");\\n    require(treasury != address(0), \\\"Treasury is not set\\\");\\n    require(\\n      IERC20(pop).balanceOf(address(this)) >= amount,\\n      \\\"RewardsDistribution contract does not have enough tokens to distribute\\\"\\n    );\\n\\n    uint256 remainder = amount;\\n\\n    // Iterate the array of distributions sending the configured amounts\\n    for (uint256 i = 0; i < distributions.length; i++) {\\n      if (distributions[i].destination != address(0) || distributions[i].amount != 0) {\\n        remainder = remainder.sub(distributions[i].amount);\\n\\n        // Approve the POP\\n        IERC20(pop).approve(distributions[i].destination, distributions[i].amount);\\n\\n        // If the contract implements RewardsDistributionRecipient.sol, inform it how many POP its received.\\n        bytes memory payload;\\n        if (distributions[i].isLocker) {\\n          payload = abi.encodeWithSignature(\\\"notifyRewardAmount(address,uint256)\\\", pop, distributions[i].amount);\\n        } else {\\n          payload = abi.encodeWithSignature(\\\"notifyRewardAmount(uint256)\\\", distributions[i].amount);\\n        }\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, ) = distributions[i].destination.call(payload);\\n\\n        if (!success) {\\n          // Note: we're ignoring the return value as it will fail for contracts that do not implement RewardsDistributionRecipient.sol\\n        }\\n      }\\n    }\\n\\n    // After all ditributions have been sent, send the remainder to the RewardsEscrow contract\\n    IERC20(pop).transfer(treasury, remainder);\\n\\n    emit RewardsDistributed(amount);\\n    return true;\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  /**\\n   * @notice Retrieve the length of the distributions array\\n   */\\n  function distributionsLength() external view override returns (uint256) {\\n    return distributions.length;\\n  }\\n\\n  /* ========== Events ========== */\\n\\n  event RewardDistributionAdded(uint256 index, address destination, uint256 amount, bool isLocker);\\n  event RewardsDistributed(uint256 amount);\\n  event RewardDistributorUpdated(address indexed distributor, bool approved);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IRewardsDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Docgen-SOLC: 0.6.0\\n\\npragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/irewardsdistribution\\ninterface IRewardsDistribution {\\n  // Structs\\n  struct DistributionData {\\n    address destination;\\n    uint256 amount;\\n    bool isLocker;\\n  }\\n\\n  function distributions(uint256 index)\\n    external\\n    view\\n    returns (\\n      address destination,\\n      uint256 amount,\\n      bool isLocker\\n    ); // DistributionData\\n\\n  function distributionsLength() external view returns (uint256);\\n\\n  // Mutative Functions\\n  function distributeRewards(uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Docgen-SOLC: 0.6.0\\n\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n  using SafeMath for uint256;\\n\\n  /* Number of decimal places in the representations. */\\n  uint8 public constant decimals = 18;\\n  uint8 public constant highPrecisionDecimals = 27;\\n\\n  /* The number representing 1.0. */\\n  uint256 public constant UNIT = 10**uint256(decimals);\\n\\n  /* The number representing 1.0 for higher fidelity numbers. */\\n  uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n  uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint256(highPrecisionDecimals - decimals);\\n\\n  /**\\n   * @return Provides an interface to UNIT.\\n   */\\n  function unit() external pure returns (uint256) {\\n    return UNIT;\\n  }\\n\\n  /**\\n   * @return Provides an interface to PRECISE_UNIT.\\n   */\\n  function preciseUnit() external pure returns (uint256) {\\n    return PRECISE_UNIT;\\n  }\\n\\n  /**\\n   * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n   * decimals.\\n   *\\n   * @dev A unit factor is divided out after the product of x and y is evaluated,\\n   * so that product must be less than 2**256. As this is an integer division,\\n   * the internal division always rounds down. This helps save on gas. Rounding\\n   * is more expensive on gas.\\n   */\\n  function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n    /* Divide by UNIT to remove the extra factor introduced by the product. */\\n    return x.mul(y) / UNIT;\\n  }\\n\\n  /**\\n   * @return The result of safely multiplying x and y, interpreting the operands\\n   * as fixed-point decimals of the specified precision unit.\\n   *\\n   * @dev The operands should be in the form of a the specified unit factor which will be\\n   * divided out after the product of x and y is evaluated, so that product must be\\n   * less than 2**256.\\n   *\\n   * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n   * Rounding is useful when you need to retain fidelity for small decimal numbers\\n   * (eg. small fractions or percentages).\\n   */\\n  function _multiplyDecimalRound(\\n    uint256 x,\\n    uint256 y,\\n    uint256 precisionUnit\\n  ) private pure returns (uint256) {\\n    /* Divide by UNIT to remove the extra factor introduced by the product. */\\n    uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n    if (quotientTimesTen % 10 >= 5) {\\n      quotientTimesTen += 10;\\n    }\\n\\n    return quotientTimesTen / 10;\\n  }\\n\\n  /**\\n   * @return The result of safely multiplying x and y, interpreting the operands\\n   * as fixed-point decimals of a precise unit.\\n   *\\n   * @dev The operands should be in the precise unit factor which will be\\n   * divided out after the product of x and y is evaluated, so that product must be\\n   * less than 2**256.\\n   *\\n   * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n   * Rounding is useful when you need to retain fidelity for small decimal numbers\\n   * (eg. small fractions or percentages).\\n   */\\n  function multiplyDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n    return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n  }\\n\\n  /**\\n   * @return The result of safely multiplying x and y, interpreting the operands\\n   * as fixed-point decimals of a standard unit.\\n   *\\n   * @dev The operands should be in the standard unit factor which will be\\n   * divided out after the product of x and y is evaluated, so that product must be\\n   * less than 2**256.\\n   *\\n   * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n   * Rounding is useful when you need to retain fidelity for small decimal numbers\\n   * (eg. small fractions or percentages).\\n   */\\n  function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n    return _multiplyDecimalRound(x, y, UNIT);\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is a high\\n   * precision decimal.\\n   *\\n   * @dev y is divided after the product of x and the standard precision unit\\n   * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n   * this is an integer division, the result is always rounded down.\\n   * This helps save on gas. Rounding is more expensive on gas.\\n   */\\n  function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n    /* Reintroduce the UNIT factor that will be divided out by y. */\\n    return x.mul(UNIT).div(y);\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is as a rounded\\n   * decimal in the precision unit specified in the parameter.\\n   *\\n   * @dev y is divided after the product of x and the specified precision unit\\n   * is evaluated, so the product of x and the specified precision unit must\\n   * be less than 2**256. The result is rounded to the nearest increment.\\n   */\\n  function _divideDecimalRound(\\n    uint256 x,\\n    uint256 y,\\n    uint256 precisionUnit\\n  ) private pure returns (uint256) {\\n    uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n    if (resultTimesTen % 10 >= 5) {\\n      resultTimesTen += 10;\\n    }\\n\\n    return resultTimesTen / 10;\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is as a rounded\\n   * standard precision decimal.\\n   *\\n   * @dev y is divided after the product of x and the standard precision unit\\n   * is evaluated, so the product of x and the standard precision unit must\\n   * be less than 2**256. The result is rounded to the nearest increment.\\n   */\\n  function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n    return _divideDecimalRound(x, y, UNIT);\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is as a rounded\\n   * high precision decimal.\\n   *\\n   * @dev y is divided after the product of x and the high precision unit\\n   * is evaluated, so the product of x and the high precision unit must\\n   * be less than 2**256. The result is rounded to the nearest increment.\\n   */\\n  function divideDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n    return _divideDecimalRound(x, y, PRECISE_UNIT);\\n  }\\n\\n  /**\\n   * @dev Convert a standard decimal representation to a high precision one.\\n   */\\n  function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n    return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n  }\\n\\n  /**\\n   * @dev Convert a high precision decimal to a standard decimal representation.\\n   */\\n  function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n    uint256 quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n    if (quotientTimesTen % 10 >= 5) {\\n      quotientTimesTen += 10;\\n    }\\n\\n    return quotientTimesTen / 10;\\n  }\\n\\n  // Computes `a - b`, setting the value to 0 if b > a.\\n  function floorsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return b >= a ? 0 : a - b;\\n  }\\n\\n  /* ---------- Utilities ---------- */\\n  /*\\n   * Absolute value of the input, returned as a signed number.\\n   */\\n  function signedAbs(int256 x) internal pure returns (int256) {\\n    return x < 0 ? -x : x;\\n  }\\n\\n  /*\\n   * Absolute value of the input, returned as an unsigned number.\\n   */\\n  function abs(int256 x) internal pure returns (uint256) {\\n    return uint256(signedAbs(x));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/utils/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Docgen-SOLC: 0.8.0\\n\\npragma solidity ^0.8.0;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n  address public owner;\\n  address public nominatedOwner;\\n\\n  constructor(address _owner) {\\n    require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n    owner = _owner;\\n    emit OwnerChanged(address(0), _owner);\\n  }\\n\\n  function nominateNewOwner(address _owner) external onlyOwner {\\n    nominatedOwner = _owner;\\n    emit OwnerNominated(_owner);\\n  }\\n\\n  function acceptOwnership() external {\\n    require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n    emit OwnerChanged(owner, nominatedOwner);\\n    owner = nominatedOwner;\\n    nominatedOwner = address(0);\\n  }\\n\\n  modifier onlyOwner() {\\n    _onlyOwner();\\n    _;\\n  }\\n\\n  function _onlyOwner() private view {\\n    require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n  }\\n\\n  event OwnerNominated(address newOwner);\\n  event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"}],\"name\":\"RewardDistributionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RewardDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"}],\"name\":\"addRewardDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"}],\"name\":\"editRewardDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pop\",\"type\":\"address\"}],\"name\":\"setPop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RewardsDistribution", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000092a1cb552d0e177f3a135b4c87a4160c8f2a485f000000000000000000000000d0cd466b34a24fcb2f87676278af2005ca8a78c40000000000000000000000000ec6290abb4714ba5f1371647894ce53c6dd673a", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}