{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/ERC20SwapToConversion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './lib/SafeERC20.sol';\\nimport './interfaces/IERC20ConversionProxy.sol';\\nimport './ChainlinkConversionPath.sol';\\n\\ninterface ISwapRouter {\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n}\\n\\n/**\\n * @title ERC20SwapToConversion\\n * @notice This contract swaps ERC20 tokens before paying a request thanks to a payment proxy\\n */\\ncontract ERC20SwapToConversion is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  ISwapRouter public swapRouter;\\n  ChainlinkConversionPath public chainlinkConversionPath;\\n\\n  // Fees taken by request when a payment is made through swap. Range 0-1000. 10 => 1% fees.\\n  uint256 public requestSwapFees;\\n\\n  constructor(address _owner) {\\n    _transferOwnership(_owner);\\n  }\\n\\n  /**\\n* @notice Performs a request payment, denominated in a token or currency A,\\n*         where the issuer expects a token B, and the payer uses a token C.\\n*         The conversion rate from A to B is done using Chainlink.\\n*         The token swap is done using UniswapV2 or equivalent.\\n* @param _paymentProxy Address of the ERC20ConversionProxy which will perform the payment.\\n* @param _to Transfer recipient = request issuer\\n* @param _requestAmount Amount to transfer in request currency\\n* @param _amountInMax Maximum amount allowed to spend for currency swap, in payment network currency.\\n        This amount should take into account the fees.\\n@param _swapRouterPath, path of ERC20 tokens to swap from spentToken to expectedToken. The first\\n        address of the path should be the spent currency. The last element should be the\\n        expected currency.\\n@param _chainlinkPath, path of currencies to convert from invoicing currency to expectedToken. The first\\n        address of the path should be the invoicing currency. The last element should be the\\n        expected currency.\\n* @param _paymentReference Reference of the payment related\\n* @param _requestFeeAmount Amount of the fee in request currency\\n* @param _feeAddress Where to pay the fee\\n* @param _deadline Deadline for the swap to be valid\\n* @param _chainlinkMaxRateTimespan Max time span with the oldestrate, ignored if zero\\n*/\\n  function swapTransferWithReference(\\n    address _paymentProxy,\\n    address _to,\\n    uint256 _requestAmount, // requestCurrency\\n    uint256 _amountInMax, // SpentToken\\n    address[] memory _swapRouterPath, // from spentToken to expectedToken on the swap router\\n    address[] memory _chainlinkPath, // from invoicingCurrency to expectedToken on chainlink\\n    bytes memory _paymentReference,\\n    uint256 _requestFeeAmount, // requestCurrency\\n    address _feeAddress,\\n    uint256 _deadline,\\n    uint256 _chainlinkMaxRateTimespan\\n  ) external {\\n    require(\\n      _swapRouterPath[_swapRouterPath.length - 1] == _chainlinkPath[_chainlinkPath.length - 1],\\n      'the requested token on the swap router must be the payment currency'\\n    );\\n    require(_feeAddress != address(0), 'Invalid fee addres');\\n\\n    // Get the amount to pay in paymentNetworkToken\\n    uint256 paymentNetworkTotalAmount = _getConversion(\\n      _chainlinkPath,\\n      _requestAmount,\\n      _requestFeeAmount\\n    );\\n\\n    // Compute the request swap fees\\n    uint256 requestSwapFeesAmount = (paymentNetworkTotalAmount * requestSwapFees) / 1000;\\n\\n    require(\\n      IERC20(_swapRouterPath[0]).safeTransferFrom(msg.sender, address(this), _amountInMax),\\n      'Could not transfer payment token from swapper-payer'\\n    );\\n\\n    _swapAndApproveIfNeeded(\\n      _paymentProxy,\\n      _amountInMax,\\n      _swapRouterPath,\\n      _deadline,\\n      paymentNetworkTotalAmount + requestSwapFeesAmount\\n    );\\n\\n    IERC20ConversionProxy paymentProxy = IERC20ConversionProxy(_paymentProxy);\\n    // Pay the request and fees\\n    try\\n      paymentProxy.transferFromWithReferenceAndFee(\\n        _to,\\n        _requestAmount,\\n        _chainlinkPath,\\n        _paymentReference,\\n        _requestFeeAmount,\\n        _feeAddress,\\n        paymentNetworkTotalAmount, // _maxToSpend\\n        _chainlinkMaxRateTimespan\\n      )\\n    {} catch (\\n      bytes memory /*lowLevelData*/\\n    ) {\\n      revert('Invalid payment proxy');\\n    }\\n\\n    // Pay the request swap fees\\n    IERC20(_swapRouterPath[_swapRouterPath.length - 1]).safeTransfer(\\n      _feeAddress,\\n      requestSwapFeesAmount\\n    );\\n\\n    // Give the change back to the payer, in both currencies (only spent token should remain)\\n    if (IERC20(_swapRouterPath[0]).balanceOf(address(this)) > 0) {\\n      IERC20(_swapRouterPath[0]).safeTransfer(\\n        msg.sender,\\n        IERC20(_swapRouterPath[0]).balanceOf(address(this))\\n      );\\n    }\\n    if (IERC20(_swapRouterPath[_swapRouterPath.length - 1]).balanceOf(address(this)) > 0) {\\n      IERC20(_swapRouterPath[_swapRouterPath.length - 1]).safeTransfer(\\n        msg.sender,\\n        IERC20(_swapRouterPath[_swapRouterPath.length - 1]).balanceOf(address(this))\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Authorizes the proxy to spend a new request currency (ERC20).\\n   * @param _erc20Address Address of an ERC20 used as a request currency\\n   * @param _paymentProxy Address of the payment proxy to approve\\n   */\\n  function approvePaymentProxyToSpend(address _erc20Address, address _paymentProxy) public {\\n    IERC20 erc20 = IERC20(_erc20Address);\\n    uint256 max = 2**256 - 1;\\n    erc20.safeApprove(_paymentProxy, max);\\n  }\\n\\n  /**\\n   * @notice Authorizes the swap router to spend a new payment currency (ERC20).\\n   * @param _erc20Address Address of an ERC20 used for payment\\n   */\\n  function approveRouterToSpend(address _erc20Address) public {\\n    IERC20 erc20 = IERC20(_erc20Address);\\n    uint256 max = 2**256 - 1;\\n    erc20.safeApprove(address(swapRouter), max);\\n  }\\n\\n  /*\\n   * Admin functions to edit the router address, the fees amount and the fees collector address\\n   */\\n  function setRouter(address _newSwapRouterAddress) public onlyOwner {\\n    swapRouter = ISwapRouter(_newSwapRouterAddress);\\n  }\\n\\n  function updateRequestSwapFees(uint256 _newRequestSwapFees) public onlyOwner {\\n    requestSwapFees = _newRequestSwapFees;\\n  }\\n\\n  function updateConversionPathAddress(address _chainlinkConversionPath) public onlyOwner {\\n    chainlinkConversionPath = ChainlinkConversionPath(_chainlinkConversionPath);\\n  }\\n\\n  /*\\n   * Internal functions to reduce the stack in swapTransferWithReference()\\n   */\\n  function _getConversion(\\n    address[] memory _path,\\n    uint256 _requestAmount,\\n    uint256 _requestFeeAmount\\n  ) internal view returns (uint256 conversion) {\\n    (conversion, ) = chainlinkConversionPath.getConversion(\\n      _requestAmount + _requestFeeAmount,\\n      _path\\n    );\\n  }\\n\\n  /**\\n   * Internal functions to reduce the stack in swapTransferWithReference()\\n   * Approve the SwapRouter to spend the spentToken if needed\\n   * Swap the spentToken in exchange for the expectedToken\\n   * Approve the payment proxy to spend the expected token if needed.\\n   */\\n  function _swapAndApproveIfNeeded(\\n    address _paymentProxy,\\n    uint256 _amountInMax, // SpentToken\\n    address[] memory _swapRouterPath, // from spentToken to expectedToken on the swap router\\n    uint256 _deadline,\\n    uint256 _paymentNetworkTotalAmount\\n  ) internal {\\n    IERC20 spentToken = IERC20(_swapRouterPath[0]);\\n    // Allow the router to spend all this contract's spentToken\\n    if (spentToken.allowance(address(this), address(swapRouter)) < _amountInMax) {\\n      approveRouterToSpend(address(spentToken));\\n    }\\n\\n    swapRouter.swapTokensForExactTokens(\\n      _paymentNetworkTotalAmount,\\n      _amountInMax,\\n      _swapRouterPath,\\n      address(this),\\n      _deadline\\n    );\\n\\n    IERC20 requestedToken = IERC20(_swapRouterPath[_swapRouterPath.length - 1]);\\n\\n    // Allow the payment network to spend all this contract's requestedToken\\n    if (requestedToken.allowance(address(this), _paymentProxy) < _paymentNetworkTotalAmount) {\\n      approvePaymentProxyToSpend(address(requestedToken), _paymentProxy);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title SafeERC20\\n * @notice Works around implementations of ERC20 with transferFrom not returning success status.\\n */\\nlibrary SafeERC20 {\\n  /**\\n   * @notice Call transferFrom ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransferFrom(\\n    IERC20 _token,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('transferFrom(address,address,uint256)', _from, _to, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n\\n  /**\\n   * @notice Call approve ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeApprove(\\n    IERC20 _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('approve(address,uint256)', _spender, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n\\n  /**\\n   * @notice Call transfer ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransfer(\\n    IERC20 _token,\\n    address _to,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('transfer(address,uint256)', _to, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IERC20ConversionProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IERC20ConversionProxy {\\n  // Event to declare a conversion with a reference\\n  event TransferWithConversionAndReference(\\n    uint256 amount,\\n    address currency,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    uint256 maxRateTimespan\\n  );\\n\\n  // Event to declare a transfer with a reference\\n  event TransferWithReferenceAndFee(\\n    address tokenAddress,\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  function transferFromWithReferenceAndFee(\\n    address _to,\\n    uint256 _requestAmount,\\n    address[] calldata _path,\\n    bytes calldata _paymentReference,\\n    uint256 _feeAmount,\\n    address _feeAddress,\\n    uint256 _maxToSpend,\\n    uint256 _maxRateTimespan\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/ChainlinkConversionPath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './legacy_openzeppelin/contracts/access/roles/WhitelistAdminRole.sol';\\n\\ninterface ERC20fraction {\\n  function decimals() external view returns (uint8);\\n}\\n\\ninterface AggregatorFraction {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n}\\n\\n/**\\n * @title ChainlinkConversionPath\\n *\\n * @notice ChainlinkConversionPath is a contract computing currency conversion rates based on Chainlink aggretators\\n */\\ncontract ChainlinkConversionPath is WhitelistAdminRole {\\n  uint256 constant PRECISION = 1e18;\\n  uint256 constant NATIVE_TOKEN_DECIMALS = 18;\\n  uint256 constant FIAT_DECIMALS = 8;\\n  address public nativeTokenHash;\\n\\n  /**\\n   * @param _nativeTokenHash hash of the native token\\n   */\\n  constructor(address _nativeTokenHash) {\\n    nativeTokenHash = _nativeTokenHash;\\n  }\\n\\n  // Mapping of Chainlink aggregators (input currency => output currency => contract address)\\n  // input & output currencies are the addresses of the ERC20 contracts OR the sha3(\\\"currency code\\\")\\n  mapping(address => mapping(address => address)) public allAggregators;\\n\\n  // declare a new aggregator\\n  event AggregatorUpdated(address _input, address _output, address _aggregator);\\n\\n  /**\\n   * @notice Update an aggregator\\n   * @param _input address representing the input currency\\n   * @param _output address representing the output currency\\n   * @param _aggregator address of the aggregator contract\\n   */\\n  function updateAggregator(\\n    address _input,\\n    address _output,\\n    address _aggregator\\n  ) external onlyWhitelistAdmin {\\n    allAggregators[_input][_output] = _aggregator;\\n    emit AggregatorUpdated(_input, _output, _aggregator);\\n  }\\n\\n  /**\\n   * @notice Update a list of aggregators\\n   * @param _inputs list of addresses representing the input currencies\\n   * @param _outputs list of addresses representing the output currencies\\n   * @param _aggregators list of addresses of the aggregator contracts\\n   */\\n  function updateAggregatorsList(\\n    address[] calldata _inputs,\\n    address[] calldata _outputs,\\n    address[] calldata _aggregators\\n  ) external onlyWhitelistAdmin {\\n    require(_inputs.length == _outputs.length, 'arrays must have the same length');\\n    require(_inputs.length == _aggregators.length, 'arrays must have the same length');\\n\\n    // For every conversions of the path\\n    for (uint256 i; i < _inputs.length; i++) {\\n      allAggregators[_inputs[i]][_outputs[i]] = _aggregators[i];\\n      emit AggregatorUpdated(_inputs[i], _outputs[i], _aggregators[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Computes the conversion of an amount through a list of intermediate conversions\\n   * @param _amountIn Amount to convert\\n   * @param _path List of addresses representing the currencies for the intermediate conversions\\n   * @return result The result after all the conversions\\n   * @return oldestRateTimestamp The oldest timestamp of the path\\n   */\\n  function getConversion(uint256 _amountIn, address[] calldata _path)\\n    external\\n    view\\n    returns (uint256 result, uint256 oldestRateTimestamp)\\n  {\\n    (uint256 rate, uint256 timestamp, uint256 decimals) = getRate(_path);\\n\\n    // initialize the result\\n    result = (_amountIn * rate) / decimals;\\n\\n    oldestRateTimestamp = timestamp;\\n  }\\n\\n  /**\\n   * @notice Computes the conversion rate from a list of currencies\\n   * @param _path List of addresses representing the currencies for the conversions\\n   * @return rate The rate\\n   * @return oldestRateTimestamp The oldest timestamp of the path\\n   * @return decimals of the conversion rate\\n   */\\n  function getRate(address[] memory _path)\\n    public\\n    view\\n    returns (\\n      uint256 rate,\\n      uint256 oldestRateTimestamp,\\n      uint256 decimals\\n    )\\n  {\\n    // initialize the result with 18 decimals (for more precision)\\n    rate = PRECISION;\\n    decimals = PRECISION;\\n    oldestRateTimestamp = block.timestamp;\\n\\n    // For every conversion of the path\\n    for (uint256 i; i < _path.length - 1; i++) {\\n      (\\n        AggregatorFraction aggregator,\\n        bool reverseAggregator,\\n        uint256 decimalsInput,\\n        uint256 decimalsOutput\\n      ) = getAggregatorAndDecimals(_path[i], _path[i + 1]);\\n\\n      // store the latest timestamp of the path\\n      uint256 currentTimestamp = aggregator.latestTimestamp();\\n      if (currentTimestamp < oldestRateTimestamp) {\\n        oldestRateTimestamp = currentTimestamp;\\n      }\\n\\n      // get the rate of the current step\\n      uint256 currentRate = uint256(aggregator.latestAnswer());\\n      // get the number of decimals of the current rate\\n      uint256 decimalsAggregator = uint256(aggregator.decimals());\\n\\n      // mul with the difference of decimals before the current rate computation (for more precision)\\n      if (decimalsAggregator > decimalsInput) {\\n        rate = rate * (10**(decimalsAggregator - decimalsInput));\\n      }\\n      if (decimalsAggregator < decimalsOutput) {\\n        rate = rate * (10**(decimalsOutput - decimalsAggregator));\\n      }\\n\\n      // Apply the current rate (if path uses an aggregator in the reverse way, div instead of mul)\\n      if (reverseAggregator) {\\n        rate = (rate * (10**decimalsAggregator)) / currentRate;\\n      } else {\\n        rate = (rate * currentRate) / (10**decimalsAggregator);\\n      }\\n\\n      // div with the difference of decimals AFTER the current rate computation (for more precision)\\n      if (decimalsAggregator < decimalsInput) {\\n        rate = rate / (10**(decimalsInput - decimalsAggregator));\\n      }\\n      if (decimalsAggregator > decimalsOutput) {\\n        rate = rate / (10**(decimalsAggregator - decimalsOutput));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets aggregators and decimals of two currencies\\n   * @param _input input Address\\n   * @param _output output Address\\n   * @return aggregator to get the rate between the two currencies\\n   * @return reverseAggregator true if the aggregator returned give the rate from _output to _input\\n   * @return decimalsInput decimals of _input\\n   * @return decimalsOutput decimals of _output\\n   */\\n  function getAggregatorAndDecimals(address _input, address _output)\\n    private\\n    view\\n    returns (\\n      AggregatorFraction aggregator,\\n      bool reverseAggregator,\\n      uint256 decimalsInput,\\n      uint256 decimalsOutput\\n    )\\n  {\\n    // Try to get the right aggregator for the conversion\\n    aggregator = AggregatorFraction(allAggregators[_input][_output]);\\n    reverseAggregator = false;\\n\\n    // if no aggregator found we try to find an aggregator in the reverse way\\n    if (address(aggregator) == address(0x00)) {\\n      aggregator = AggregatorFraction(allAggregators[_output][_input]);\\n      reverseAggregator = true;\\n    }\\n\\n    require(address(aggregator) != address(0x00), 'No aggregator found');\\n\\n    // get the decimals for the two currencies\\n    decimalsInput = getDecimals(_input);\\n    decimalsOutput = getDecimals(_output);\\n  }\\n\\n  /**\\n   * @notice Gets decimals from an address currency\\n   * @param _addr address to check\\n   * @return decimals number of decimals\\n   */\\n  function getDecimals(address _addr) private view returns (uint256 decimals) {\\n    // by default we assume it is fiat\\n    decimals = FIAT_DECIMALS;\\n    // if address is the hash of the ETH currency\\n    if (_addr == nativeTokenHash) {\\n      decimals = NATIVE_TOKEN_DECIMALS;\\n    } else if (isContract(_addr)) {\\n      // otherwise, we get the decimals from the erc20 directly\\n      decimals = ERC20fraction(_addr).decimals();\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if an address is a contract\\n   * @param _addr Address to check\\n   * @return true if the address hosts a contract, false otherwise\\n   */\\n  function isContract(address _addr) private view returns (bool) {\\n    uint32 size;\\n    // solium-disable security/no-inline-assembly\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    return (size > 0);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/contracts/legacy_openzeppelin/contracts/access/roles/WhitelistAdminRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../Roles.sol';\\n\\n/**\\n * @title WhitelistAdminRole\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n */\\nabstract contract WhitelistAdminRole is Context {\\n  using Roles for Roles.Role;\\n\\n  event WhitelistAdminAdded(address indexed account);\\n  event WhitelistAdminRemoved(address indexed account);\\n\\n  Roles.Role private _whitelistAdmins;\\n\\n  constructor() {\\n    _addWhitelistAdmin(_msgSender());\\n  }\\n\\n  modifier onlyWhitelistAdmin() {\\n    require(\\n      isWhitelistAdmin(_msgSender()),\\n      'WhitelistAdminRole: caller does not have the WhitelistAdmin role'\\n    );\\n    _;\\n  }\\n\\n  function isWhitelistAdmin(address account) public view returns (bool) {\\n    return _whitelistAdmins.has(account);\\n  }\\n\\n  function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n    _addWhitelistAdmin(account);\\n  }\\n\\n  function renounceWhitelistAdmin() public {\\n    _removeWhitelistAdmin(_msgSender());\\n  }\\n\\n  function _addWhitelistAdmin(address account) internal {\\n    _whitelistAdmins.add(account);\\n    emit WhitelistAdminAdded(account);\\n  }\\n\\n  function _removeWhitelistAdmin(address account) internal {\\n    _whitelistAdmins.remove(account);\\n    emit WhitelistAdminRemoved(account);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/legacy_openzeppelin/contracts/access/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping(address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev Give an account access to this role.\\n   */\\n  function add(Role storage role, address account) internal {\\n    require(!has(role, account), 'Roles: account already has role');\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev Remove an account's access to this role.\\n   */\\n  function remove(Role storage role, address account) internal {\\n    require(has(role, account), 'Roles: account does not have role');\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev Check if an account has this role.\\n   * @return bool\\n   */\\n  function has(Role storage role, address account) internal view returns (bool) {\\n    require(account != address(0), 'Roles: account is the zero address');\\n    return role.bearer[account];\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentProxy\",\"type\":\"address\"}],\"name\":\"approvePaymentProxyToSpend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"approveRouterToSpend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkConversionPath\",\"outputs\":[{\"internalType\":\"contract ChainlinkConversionPath\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestSwapFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapRouterAddress\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_swapRouterPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_chainlinkPath\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_requestFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainlinkMaxRateTimespan\",\"type\":\"uint256\"}],\"name\":\"swapTransferWithReference\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlinkConversionPath\",\"type\":\"address\"}],\"name\":\"updateConversionPathAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRequestSwapFees\",\"type\":\"uint256\"}],\"name\":\"updateRequestSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20SwapToConversion", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004e64c2d06d19d13061e62e291b2c4e9fe5679b93", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}