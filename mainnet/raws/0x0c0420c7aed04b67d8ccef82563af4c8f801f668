{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"oracle/OracleProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IOracleProxy.sol\\\";\\nimport \\\"../Errors.sol\\\";\\n\\n/**\\n * @title BiFi's OracleProxy Contract\\n * @notice Communicate with the contract that\\n * provides the price of token\\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\\n */\\ncontract OracleProxy is IOracleProxy, OracleProxyErrors {\\n\\taddress payable owner;\\n\\n\\tmapping(uint256 => Oracle) oracle;\\n\\n\\tstruct Oracle {\\n\\t\\tIOracle feed;\\n\\t\\tuint256 feedUnderlyingPoint;\\n\\n\\t\\tbool needPriceConvert;\\n\\t\\tuint256 priceConvertID;\\n\\t}\\n\\n\\tuint256 constant unifiedPoint = 10 ** 18;\\n\\n\\tuint256 constant defaultUnderlyingPoint = 8;\\n\\n\\tmodifier onlyOwner {\\n\\t\\trequire(msg.sender == owner, ONLY_OWNER);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t* @dev Construct a new OracleProxy which manages many oracles\\n\\t* @param coinOracle The address of ether's oracle contract\\n\\t* @param usdtOracle The address of usdt's oracle contract\\n\\t* @param daiOracle The address of dai's oracle contract\\n\\t* @param linkOracle The address of link's oracle contract\\n\\t* @param usdcOracle The address of usdc's oracle contract\\t\\n\\t* @param btcOracle The address of btc's oracle contract\\n\\t*/\\n\\tconstructor (address coinOracle, address usdtOracle, address daiOracle, address linkOracle, address usdcOracle, address btcOracle) public\\n\\t{\\n\\t\\towner = msg.sender;\\n\\t\\t_setOracleFeed(0, coinOracle, 8, false, 0);\\n\\t\\t_setOracleFeed(1, usdtOracle, 8, false, 0);\\n\\t\\t_setOracleFeed(2, daiOracle, 8, false, 0);\\n\\t\\t_setOracleFeed(3, linkOracle, 8, false, 0);\\n\\t\\t_setOracleFeed(4, usdcOracle, 8, false, 0);\\n\\t\\t_setOracleFeed(5, btcOracle, 8, false, 0);\\n\\t\\t_setOracleFeed(6, btcOracle, 8, false, 0);\\n\\t}\\n\\n\\t/**\\n\\t* @dev Replace the owner of the handler\\n\\t* @param _owner the address of the owner to be replaced\\n\\t* @return true (TODO: validate results)\\n\\t*/\\n\\tfunction ownershipTransfer(address payable _owner) onlyOwner public returns (bool)\\n\\t{\\n\\t\\towner = _owner;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @dev Gets information about the linked token Oracle.\\n\\t* @param tokenID The ID of get token Oracle information\\n\\t* @return the address of the token oracle feed and the decimal of the actual token.\\n\\t*/\\n\\tfunction getOracleFeed(uint256 tokenID) external view override returns (address, uint256)\\n\\t{\\n\\t\\treturn _getOracleFeed(tokenID);\\n\\t}\\n\\n\\t/**\\n\\t* @dev Set information about the linked token Oracle.\\n\\t* @param tokenID tokenID to set token Oracle information\\n\\t* @param feedAddr the address of the feed contract\\n\\t* that provides the price of the token\\n\\t* @param decimals Decimal of the token\\n\\t* @return true (TODO: validate results)\\n\\t*/\\n\\tfunction setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) onlyOwner external override returns (bool)\\n\\t{\\n\\t\\treturn _setOracleFeed(tokenID, feedAddr, decimals, needPriceConvert, priceConvertID);\\n\\t}\\n\\n\\t/**\\n\\t* @dev Gets information about the linked token Oracle.\\n\\t* @param tokenID The ID of get token Oracle information\\n\\t* @return the address of the token oracle feed and the decimal of the actual token.\\n\\t*/\\n\\tfunction _getOracleFeed(uint256 tokenID) internal view returns (address, uint256)\\n\\t{\\n\\t\\tOracle memory _oracle = oracle[tokenID];\\n\\t\\taddress addr = address(_oracle.feed);\\n\\t\\treturn (addr, _oracle.feedUnderlyingPoint);\\n\\t}\\n\\n\\t/**\\n\\t* @dev Set information about the linked token Oracle.\\n\\t* @param tokenID tokenID to set token Oracle information\\n\\t* @param feedAddr the address of the feed contract\\n\\t* that provides the price of the token\\n\\t* @param decimals Decimal of the token\\n\\t* @param needPriceConvert true for this oracle feed is not USD, need convert\\n\\t* @param priceConvertID convert price feed id(registered)\\n\\t* @return true (TODO: validate results)\\n\\t*/\\n\\tfunction _setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) internal returns (bool)\\n\\t{\\n\\t\\tOracle memory _oracle;\\n\\t\\t_oracle.feed = IOracle(feedAddr);\\n\\t\\t_oracle.feedUnderlyingPoint = (10 ** decimals);\\n\\n\\t\\t_oracle.needPriceConvert = needPriceConvert;\\n\\t\\t_oracle.priceConvertID = priceConvertID;\\n\\t\\toracle[tokenID] = _oracle;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @dev The price of the token is obtained through the price feed contract.\\n\\t* @param tokenID The ID of the token that will take the price.\\n\\t* @return The token price of a uniform unit.\\n\\t*/\\n\\tfunction getTokenPrice(uint256 tokenID) external view override returns (uint256)\\n\\t{\\n\\n\\t\\tOracle memory _oracle = oracle[tokenID];\\n\\t\\t(,int256 underlyingPrice,,,) = _oracle.feed.latestRoundData();\\n    require(underlyingPrice > 0, \\\"underlyingPrice latestRoundData Problem\\\");\\n\\t\\tuint256 unifiedPrice = _convertPriceToUnified(uint256(underlyingPrice), _oracle.feedUnderlyingPoint);\\n\\n\\t\\tif (_oracle.needPriceConvert)\\n\\t\\t{\\n\\t\\t\\t_oracle = oracle[_oracle.priceConvertID];\\n      (,int256 convertFeedUnderlyingPrice,,,) = _oracle.feed.latestRoundData();\\n      require(convertFeedUnderlyingPrice > 0, \\\"convertFeedUnderlyingPrice latestRoundData Problem\\\");\\n\\t\\t\\tuint256 convertPrice = _convertPriceToUnified(uint256(convertFeedUnderlyingPrice), oracle[0].feedUnderlyingPoint);\\n\\t\\t\\tunifiedPrice = unifiedMul(unifiedPrice, convertPrice);\\n\\t\\t}\\n\\n\\t\\trequire(unifiedPrice != 0, ZERO_PRICE);\\n\\t\\treturn unifiedPrice;\\n\\t}\\n\\n\\t/**\\n\\t* @dev Get owner's address in manager contract\\n\\t* @return The address of owner\\n\\t*/\\n\\tfunction getOwner() public view returns (address)\\n\\t{\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t* @dev Unify the decimal value of the token price returned by price feed oracle.\\n\\t* @param price token price without unified of decimal\\n\\t* @param feedUnderlyingPoint Decimal of the token\\n\\t* @return The price of tokens with unified decimal\\n\\t*/\\n\\tfunction _convertPriceToUnified(uint256 price, uint256 feedUnderlyingPoint) internal pure returns (uint256)\\n\\t{\\n\\t\\treturn div(mul(price, unifiedPoint), feedUnderlyingPoint);\\n\\t}\\n\\n\\t/* **************** safeMath **************** */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\treturn _mul(a, b);\\n\\t}\\n\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\treturn _div(a, b, \\\"div by zero\\\");\\n\\t}\\n\\n\\tfunction _mul(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\tif (a == 0)\\n\\t\\t{\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire((c / a) == b, \\\"mul overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction _div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\\n\\t{\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\tfunction unifiedMul(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\treturn _div(_mul(a, b), unifiedPoint, \\\"unified mul by zero\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.6.12;\\n\\ncontract Modifier {\\n    string internal constant ONLY_OWNER = \\\"O\\\";\\n    string internal constant ONLY_MANAGER = \\\"M\\\";\\n    string internal constant CIRCUIT_BREAKER = \\\"emergency\\\";\\n}\\n\\ncontract ManagerModifier is Modifier {\\n    string internal constant ONLY_HANDLER = \\\"H\\\";\\n    string internal constant ONLY_LIQUIDATION_MANAGER = \\\"LM\\\";\\n    string internal constant ONLY_BREAKER = \\\"B\\\";\\n}\\n\\ncontract HandlerDataStorageModifier is Modifier {\\n    string internal constant ONLY_BIFI_CONTRACT = \\\"BF\\\";\\n}\\n\\ncontract SIDataStorageModifier is Modifier {\\n    string internal constant ONLY_SI_HANDLER = \\\"SI\\\";\\n}\\n\\ncontract HandlerErrors is Modifier {\\n    string internal constant USE_VAULE = \\\"use value\\\";\\n    string internal constant USE_ARG = \\\"use arg\\\";\\n    string internal constant EXCEED_LIMIT = \\\"exceed limit\\\";\\n    string internal constant NO_LIQUIDATION = \\\"no liquidation\\\";\\n    string internal constant NO_LIQUIDATION_REWARD = \\\"no enough reward\\\";\\n    string internal constant NO_EFFECTIVE_BALANCE = \\\"not enough balance\\\";\\n    string internal constant TRANSFER = \\\"err transfer\\\";\\n}\\n\\ncontract SIErrors is Modifier { }\\n\\ncontract InterestErrors is Modifier { }\\n\\ncontract LiquidationManagerErrors is Modifier {\\n    string internal constant NO_DELINQUENT = \\\"not delinquent\\\";\\n}\\n\\ncontract ManagerErrors is ManagerModifier {\\n    string internal constant REWARD_TRANSFER = \\\"RT\\\";\\n    string internal constant UNSUPPORTED_TOKEN = \\\"UT\\\";\\n}\\n\\ncontract OracleProxyErrors is Modifier {\\n    string internal constant ZERO_PRICE = \\\"price zero\\\";\\n}\\n\\ncontract RequestProxyErrors is Modifier { }\\n\\ncontract ManagerDataStorageErrors is ManagerModifier {\\n    string internal constant NULL_ADDRESS = \\\"err addr null\\\";\\n}\\n\"\r\n    },\r\n    \"interfaces/IOracleProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title BiFi's oracle proxy interface\\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\\n */\\ninterface IOracleProxy  {\\n\\tfunction getTokenPrice(uint256 tokenID) external view returns (uint256);\\n\\n\\tfunction getOracleFeed(uint256 tokenID) external view returns (address, uint256);\\n\\tfunction setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title BiFi's oracle interface\\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\\n */\\ninterface IOracle {\\n  function latestAnswer() external view returns (int256);\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\\ninterface IBscChainlinkOracle {\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n      external\\n      view\\n      returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n      );\\n    function latestRoundData()\\n      external\\n      view\\n      returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n      );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"btcOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getOracleFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feedAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPriceConvert\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceConvertID\",\"type\":\"uint256\"}],\"name\":\"setOracleFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OracleProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee90000000000000000000000002c1d072e956affc0d435cb7ac38ef18d24d9127c0000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f6000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}