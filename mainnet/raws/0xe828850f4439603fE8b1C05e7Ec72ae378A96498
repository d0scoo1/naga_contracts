{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DAOracle/SkinnyDAOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport \\\"../vendor/uma/SkinnyOptimisticOracleInterface.sol\\\";\\n\\nimport \\\"./DAOracleHelpers.sol\\\";\\nimport \\\"./vault/IVestingVault.sol\\\";\\nimport \\\"./pool/StakingPool.sol\\\";\\nimport \\\"./pool/SponsorPool.sol\\\";\\n\\n/**\\n * @title SkinnyDAOracle\\n * @dev This contract is the core of the Volatility Protocol DAOracle System.\\n * It is responsible for rewarding stakers and issuing staker-backed bonds\\n * which act as a decentralized risk pool for DAOracle Indexes. Bonds and rewards\\n * are authorized, issued and funded by the Volatility DAO for qualified oracle\\n * proposals, and stakers provide insurance against lost bonds. In exchange for\\n * backstopping risk, stakers receive rewards for the data assurances they help\\n * provide. In cases where a proposal is disputed, the DAOracle leverages UMA's\\n * Data Validation Mechanism (DVM) to arbitrate and resolve by determining the\\n * correct value through a community-led governance vote.\\n */\\ncontract SkinnyDAOracle is AccessControl, EIP712 {\\n  using SafeERC20 for IERC20;\\n  using DAOracleHelpers for Index;\\n\\n  event Relayed(\\n    bytes32 indexed indexId,\\n    bytes32 indexed proposalId,\\n    Proposal proposal,\\n    address relayer,\\n    uint256 bondAmount\\n  );\\n\\n  event Disputed(\\n    bytes32 indexed indexId,\\n    bytes32 indexed proposalId,\\n    address disputer\\n  );\\n\\n  event Settled(\\n    bytes32 indexed indexId,\\n    bytes32 indexed proposalId,\\n    int256 proposedValue,\\n    int256 settledValue\\n  );\\n\\n  event IndexConfigured(bytes32 indexed indexId, IERC20 bondToken);\\n  event Rewarded(address rewardee, IERC20 token, uint256 amount);\\n\\n  /**\\n   * @dev Indexes are backed by bonds which are insured by stakers who receive\\n   * rewards for backstopping the risk of those bonds being slashed. The reward\\n   * token is the same as the bond token for simplicity. Whenever a bond is\\n   * resolved, any delta between the initial bond amount and tokens received is\\n   * \\\"slashed\\\" from the staking pool. A portion of rewards are distributed to\\n   * two groups: Stakers and Reporters. Every time targetFrequency elapses, the\\n   * weight shifts from Stakers to Reporters until it reaches the stakerFloor.\\n   */\\n  struct Index {\\n    IERC20 bondToken; // The token to be used for bonds\\n    uint32 lastUpdated; // The timestamp of the last successful update\\n    uint256 bondAmount; // The quantity of tokens to be put up for each bond\\n    uint256 bondsOutstanding; // The total amount of tokens outstanding for bonds\\n    uint256 disputesOutstanding; // The total number of requests currently in dispute\\n    uint256 drop; // The reward token drip rate (in wei)\\n    uint64 floor; // The minimum reward weighting for reporters (in wei, 1e18 = 100%)\\n    uint64 ceiling; // The maximum reward weighting for reporters (in wei, 1e18 = 100%)\\n    uint64 tilt; // The rate of change per second from floor->ceiling (in wei, 1e18 = 100%)\\n    uint64 creatorAmount; // The percentage of the total reward payable to the methodologist\\n    uint32 disputePeriod; // The dispute window for proposed values\\n    address creatorAddress; // The recipient of the methodologist rewards\\n    address sponsor; // The source of funding for the index's bonds and rewards\\n  }\\n\\n  /**\\n   * @dev Proposals are used to validate index updates to be relayed to the UMA\\n   * OptimisticOracle. The ancillaryData field supports arbitrary byte arrays,\\n   * but we are compressing down to bytes32 which exceeds the capacity needed\\n   * for all currently known use cases.\\n   */\\n  struct Proposal {\\n    bytes32 indexId; // The index identifier\\n    uint32 timestamp; // The timestamp of the value\\n    int256 value; // The proposed value\\n    bytes32 data; // Any other data needed to reproduce the proposed value\\n  }\\n\\n  // UMA's SkinnyOptimisticOracle and registered identifier\\n  SkinnyOptimisticOracleInterface public immutable oracle;\\n  bytes32 public externalIdentifier;\\n\\n  // Vesting Vault (for Rewards)\\n  IVestingVault public immutable vault;\\n\\n  // Indexes and Proposals\\n  mapping(bytes32 => Index) public index;\\n  mapping(bytes32 => Proposal) public proposal;\\n  mapping(bytes32 => bool) public isDisputed;\\n  uint32 public defaultDisputePeriod = 10 minutes;\\n  uint32 public maxOutstandingDisputes = 3;\\n\\n  // Staking Pools (bond insurance)\\n  mapping(IERC20 => StakingPool) public pool;\\n\\n  // Roles (for AccessControl)\\n  bytes32 public constant ORACLE = keccak256(\\\"ORACLE\\\");\\n  bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\n  bytes32 public constant PROPOSER = keccak256(\\\"PROPOSER\\\");\\n\\n  // Proposal type hash (for EIP-712 signature verification)\\n  bytes32 public constant PROPOSAL_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"Proposal(bytes32 indexId,uint32 timestamp,int256 value,bytes32 data)\\\"\\n      )\\n    );\\n\\n  /**\\n   * @dev Ensures that a given EIP-712 signature matches the hashed proposal\\n   * and was issued by an authorized signer. Accepts signatures from both EOAs\\n   * and contracts that support the EIP-712 standard.\\n   * @param relayed a proposal that was provided by the caller\\n   * @param signature an EIP-712 signature (raw bytes)\\n   * @param signer the address that provided the signature\\n   */\\n  modifier onlySignedProposals(\\n    Proposal calldata relayed,\\n    bytes calldata signature,\\n    address signer\\n  ) {\\n    require(\\n      SignatureChecker.isValidSignatureNow(\\n        signer,\\n        _hashTypedDataV4(\\n          keccak256(\\n            abi.encode(\\n              PROPOSAL_TYPEHASH,\\n              relayed.indexId,\\n              relayed.timestamp,\\n              relayed.value,\\n              relayed.data\\n            )\\n          )\\n        ),\\n        signature\\n      ),\\n      \\\"bad signature\\\"\\n    );\\n\\n    require(hasRole(PROPOSER, signer), \\\"unauthorized signer\\\");\\n\\n    _;\\n  }\\n\\n  constructor(\\n    bytes32 _ooIdentifier,\\n    SkinnyOptimisticOracleInterface _optimisticOracle,\\n    IVestingVault _vault\\n  ) EIP712(\\\"DAOracle\\\", \\\"1\\\") {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(PROPOSER, msg.sender);\\n    _setupRole(MANAGER, msg.sender);\\n    _setupRole(ORACLE, address(_optimisticOracle));\\n\\n    externalIdentifier = _ooIdentifier;\\n    oracle = _optimisticOracle;\\n    vault = _vault;\\n  }\\n\\n  /**\\n   * @dev Returns the currently claimable rewards for a given index.\\n   * @param indexId The index identifier\\n   * @return total The total reward token amount\\n   * @return poolAmount The pool's share of the rewards\\n   * @return reporterAmount The reporter's share of the rewards\\n   * @return residualAmount The methodologist's share of the rewards\\n   * @return vestingTime The amount of time the reporter's rewards must vest (in seconds)\\n   */\\n  function claimableRewards(bytes32 indexId)\\n    public\\n    view\\n    returns (\\n      uint256 total,\\n      uint256 poolAmount,\\n      uint256 reporterAmount,\\n      uint256 residualAmount,\\n      uint256 vestingTime\\n    )\\n  {\\n    return index[indexId].claimableRewards();\\n  }\\n\\n  /**\\n   * @dev Relay an index update that has been signed by an authorized proposer.\\n   * The signature provided must satisfy two criteria:\\n   * (1) the signature must be a valid EIP-712 signature for the proposal; and\\n   * (2) the signer must have the \\\"PROPOSER\\\" role.\\n   * @notice See https://docs.ethers.io/v5/api/signer/#Signer-signTypedData\\n   * @param relayed The relayed proposal\\n   * @param signature An EIP-712 signature for the proposal\\n   * @param signer The address of the EIP-712 signature provider\\n   * @return bond The bond amount claimable via successful dispute\\n   * @return proposalId The unique ID of the proposal\\n   * @return expiresAt The time at which the proposal is no longer disputable\\n   */\\n  function relay(\\n    Proposal calldata relayed,\\n    bytes calldata signature,\\n    address signer\\n  )\\n    external\\n    onlySignedProposals(relayed, signature, signer)\\n    returns (\\n      uint256 bond,\\n      bytes32 proposalId,\\n      uint32 expiresAt\\n    )\\n  {\\n    proposalId = _proposalId(relayed.timestamp, relayed.value, relayed.data);\\n    require(proposal[proposalId].timestamp == 0, \\\"duplicate proposal\\\");\\n\\n    Index storage _index = index[relayed.indexId];\\n    require(_index.disputesOutstanding < 3, \\\"index ineligible for proposals\\\");\\n    require(\\n      _index.lastUpdated < relayed.timestamp,\\n      \\\"must be later than most recent proposal\\\"\\n    );\\n\\n    bond = _index.bondAmount;\\n    expiresAt = uint32(block.timestamp) + _index.disputePeriod;\\n\\n    proposal[proposalId] = relayed;\\n    _index.lastUpdated = relayed.timestamp;\\n\\n    _issueRewards(relayed.indexId, msg.sender);\\n    emit Relayed(relayed.indexId, proposalId, relayed, msg.sender, bond);\\n  }\\n\\n  /**\\n   * @dev Disputes a proposal prior to its expiration. This causes a bond to be\\n   * posted on behalf of DAOracle stakers and an equal amount to be pulled from\\n   * the caller.\\n   * @notice This actually requests, proposes, and disputes with UMA's SkinnyOO\\n   * which sends the bonds and disputed proposal to UMA's DVM for settlement by\\n   * way of governance vote. Voters follow the specification of the DAOracle's\\n   * approved UMIP to determine the correct value. Once the outcome is decided,\\n   * the SkinnyOO will callback to this contract's `priceSettled` function.\\n   * @param proposalId the identifier of the proposal being disputed\\n   */\\n  function dispute(bytes32 proposalId) external {\\n    Proposal storage _proposal = proposal[proposalId];\\n    Index storage _index = index[_proposal.indexId];\\n\\n    require(proposal[proposalId].timestamp != 0, \\\"proposal doesn't exist\\\");\\n    require(\\n      !isDisputed[proposalId] &&\\n        block.timestamp < proposal[proposalId].timestamp + _index.disputePeriod,\\n      \\\"proposal already disputed or expired\\\"\\n    );\\n    isDisputed[proposalId] = true;\\n\\n    _index.dispute(_proposal, oracle, externalIdentifier);\\n    emit Disputed(_proposal.indexId, proposalId, msg.sender);\\n  }\\n\\n  /**\\n   * @dev External callback for UMA's SkinnyOptimisticOracle. Fired whenever a\\n   * disputed proposal has been settled by the DVM, regardless of outcome.\\n   * @notice This is always called by the UMA SkinnyOO contract, not an EOA.\\n   * @param - identifier, ignored\\n   * @param timestamp The timestamp of the proposal\\n   * @param ancillaryData The data field from the proposal\\n   * @param request The entire SkinnyOptimisticOracle Request object\\n   */\\n  function priceSettled(\\n    bytes32, /** identifier */\\n    uint32 timestamp,\\n    bytes calldata ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request calldata request\\n  ) external onlyRole(ORACLE) {\\n    bytes32 id = _proposalId(\\n      timestamp,\\n      request.proposedPrice,\\n      bytes32(ancillaryData)\\n    );\\n    Proposal storage relayed = proposal[id];\\n    Index storage _index = index[relayed.indexId];\\n\\n    _index.bondsOutstanding -= request.bond;\\n    _index.disputesOutstanding--;\\n    isDisputed[id] = false;\\n\\n    if (relayed.value != request.resolvedPrice) {\\n      // failed proposal, slash pool to recoup lost bond\\n      pool[request.currency].slash(_index.bondAmount, address(this));\\n    } else {\\n      // successful proposal, return bond to sponsor\\n      request.currency.safeTransfer(_index.sponsor, request.bond);\\n\\n      // sends the rest of the funds received to the staking pool\\n      request.currency.safeTransfer(\\n        address(pool[request.currency]),\\n        request.currency.balanceOf(address(this))\\n      );\\n    }\\n\\n    emit Settled(relayed.indexId, id, relayed.value, request.resolvedPrice);\\n  }\\n\\n  /**\\n   * @dev Adds or updates a index. Can only be called by managers.\\n   * @param bondToken The token to be used for bonds\\n   * @param bondAmount The quantity of tokens to offer for bonds\\n   * @param indexId The price index identifier\\n   * @param disputePeriod The proposal dispute window\\n   * @param floor The starting portion of rewards payable to reporters\\n   * @param ceiling The maximum portion of rewards payable to reporters\\n   * @param tilt The rate of change from floor to ceiling per second\\n   * @param drop The number of reward tokens to drip (per second)\\n   * @param creatorAmount The portion of rewards payable to the methodologist\\n   * @param creatorAddress The recipient of the methodologist's rewards\\n   * @param sponsor The provider of funding for bonds and rewards\\n   */\\n  function configureIndex(\\n    IERC20 bondToken,\\n    uint256 bondAmount,\\n    bytes32 indexId,\\n    uint32 disputePeriod,\\n    uint64 floor,\\n    uint64 ceiling,\\n    uint64 tilt,\\n    uint256 drop,\\n    uint64 creatorAmount,\\n    address creatorAddress,\\n    address sponsor\\n  ) external onlyRole(MANAGER) {\\n    Index storage _index = index[indexId];\\n\\n    _index.bondToken = bondToken;\\n    _index.bondAmount = bondAmount;\\n    _index.lastUpdated = _index.lastUpdated == 0\\n      ? uint32(block.timestamp)\\n      : _index.lastUpdated;\\n\\n    _index.drop = drop;\\n    _index.ceiling = ceiling;\\n    _index.tilt = tilt;\\n    _index.floor = floor;\\n    _index.creatorAmount = creatorAmount;\\n    _index.creatorAddress = creatorAddress;\\n    _index.disputePeriod = disputePeriod == 0\\n      ? defaultDisputePeriod\\n      : disputePeriod;\\n    _index.sponsor = sponsor == address(0)\\n      ? address(_index.deploySponsorPool())\\n      : sponsor;\\n\\n    if (address(pool[bondToken]) == address(0)) {\\n      _createPool(_index);\\n    }\\n\\n    emit IndexConfigured(indexId, bondToken);\\n  }\\n\\n  /**\\n   * @dev Update the global default disputePeriod. Can only be called by managers.\\n   * @param disputePeriod The new disputePeriod, in seconds\\n   */\\n  function setdefaultDisputePeriod(uint32 disputePeriod)\\n    external\\n    onlyRole(MANAGER)\\n  {\\n    defaultDisputePeriod = disputePeriod;\\n  }\\n\\n  function setExternalIdentifier(bytes32 identifier)\\n    external\\n    onlyRole(MANAGER)\\n  {\\n    externalIdentifier = identifier;\\n  }\\n\\n  /**\\n   * @dev Update the global default maxOutstandingDisputes. Can only be called by managers.\\n   * @param outstandingDisputes The new maxOutstandingDisputes\\n   */\\n  function setMaxOutstandingDisputes(uint32 outstandingDisputes)\\n    external\\n    onlyRole(MANAGER)\\n  {\\n    maxOutstandingDisputes = outstandingDisputes;\\n  }\\n\\n  /**\\n   * @dev Update the fees for a token's staking pool. Can only be called by managers.\\n   * @notice Fees must be scaled by 10**18 (1e18 = 100%). Example: 1000 DAI deposit * (0.1 * 10**18) = 100 DAI fee\\n   * @param mintFee the tax applied to new deposits\\n   * @param burnFee the tax applied to withdrawals\\n   * @param payee the recipient of fees\\n   */\\n  function setPoolFees(\\n    IERC20 token,\\n    uint256 mintFee,\\n    uint256 burnFee,\\n    address payee\\n  ) external onlyRole(MANAGER) {\\n    pool[token].setFees(mintFee, burnFee, payee);\\n  }\\n\\n  function _proposalId(\\n    uint32 timestamp,\\n    int256 value,\\n    bytes32 data\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(timestamp, value, data));\\n  }\\n\\n  function _createPool(Index storage _index) internal returns (StakingPool) {\\n    pool[_index.bondToken] = new StakingPool(\\n      ERC20(address(_index.bondToken)),\\n      0,\\n      0,\\n      address(this)\\n    );\\n\\n    _index.bondToken.safeApprove(address(vault), 2**256 - 1);\\n    _index.bondToken.safeApprove(address(oracle), 2**256 - 1);\\n\\n    return pool[_index.bondToken];\\n  }\\n\\n  function _issueRewards(bytes32 indexId, address reporter) internal {\\n    Index storage _index = index[indexId];\\n\\n    (\\n      uint256 total,\\n      uint256 poolAmount,\\n      uint256 reporterAmount,\\n      uint256 residualAmount,\\n      uint256 vestingTime\\n    ) = _index.claimableRewards();\\n\\n    // Pull in reward money from the sponsor\\n    _index.bondToken.safeTransferFrom(_index.sponsor, address(this), total);\\n\\n    // Push rewards to pool and methodologist\\n    _index.bondToken.safeTransfer(address(pool[_index.bondToken]), poolAmount);\\n    _index.bondToken.safeTransfer(_index.creatorAddress, residualAmount);\\n\\n    // Push relayer's reward to the vault for vesting\\n    vault.issue(\\n      reporter,\\n      _index.bondToken,\\n      reporterAmount,\\n      block.timestamp,\\n      0,\\n      vestingTime\\n    );\\n\\n    emit Rewarded(reporter, _index.bondToken, reporterAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/uma/SkinnyOptimisticOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleInterface {\\n  // Struct representing the state of a price request.\\n  enum State {\\n    Invalid, // Never requested.\\n    Requested, // Requested, no other actions taken.\\n    Proposed, // Proposed, but not expired or disputed yet.\\n    Expired, // Proposed, not disputed, past liveness.\\n    Disputed, // Disputed, but no DVM price returned yet.\\n    Resolved, // Disputed and DVM price is available.\\n    Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n  }\\n\\n  // Struct representing a price request.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n  // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n  // to accept a price request made with ancillary data length over a certain size.\\n  uint256 public constant ancillaryBytesLimit = 8192;\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n   * This can be changed with a subsequent call to setBond().\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Set the proposal bond associated with a price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param bond custom bond amount to set.\\n   * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n   * changed again with a subsequent call to setBond().\\n   */\\n  function setBond(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 bond\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n   * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n   * bond, so there is still profit to be made even if the reward is refunded.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   */\\n  function setRefundOnDispute(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual;\\n\\n  /**\\n   * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n   * being auto-resolved.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param customLiveness new custom liveness.\\n   */\\n  function setCustomLiveness(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 customLiveness\\n  ) external virtual;\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param proposer address to set as the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address proposer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value for an existing price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was value (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    address disputer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price value for an existing price request with an active proposal.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n   * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n   * hasn't been settled.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return resolved price.\\n   */\\n  function settleAndGetPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (int256);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 payout);\\n\\n  /**\\n   * @notice Gets the current data structure containing all information about a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the Request data structure.\\n   */\\n  function getRequest(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (Request memory);\\n\\n  /**\\n   * @notice Returns the state of a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the State enum value.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return true if price has resolved or settled, false otherwise.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (bool);\\n\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    public\\n    view\\n    virtual\\n    returns (bytes memory);\\n}\\n\\n/**\\n * @title Interface for the gas-cost-reduced version of the OptimisticOracle.\\n * @notice Differences from normal OptimisticOracle:\\n * - refundOnDispute: flag is removed, by default there are no refunds on disputes.\\n * - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset\\n *   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be\\n *   set in `requestPrice`, which has an expanded input set.\\n * - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price\\n *   can be fetched via the `Settle` event or the return value of `settle`.\\n * - general changes to interface: Functions that interact with existing requests all require the parameters of the\\n *   request to modify to be passed as input. These parameters must match with the existing request parameters or the\\n *   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the\\n *   full request struct.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract SkinnyOptimisticOracleInterface {\\n  event RequestPrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n\\n  event ProposePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n\\n  event DisputePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n\\n  event Settle(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n\\n  // Struct representing a price request. Note that this differs from the OptimisticOracleInterface's Request struct\\n  // in that refundOnDispute is removed.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address proposer,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value where caller is the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\\n   * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\\n   * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\\n   * @dev The caller is the requester, but the proposer can be customized.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function requestAndProposePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness,\\n    address proposer,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address disputer,\\n    address requester\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal where caller is the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * settle.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   * @return resolvedPrice the price that the request settled to.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 payout, int256 resolvedPrice);\\n\\n  /**\\n   * @notice Computes the current state of a price request. See the State enum for more details.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters.\\n   * @return the State.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (OptimisticOracleInterface.State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters. The hash of these parameters must match with the request hash that is\\n   * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\\n   * will revert.\\n   * @return boolean indicating true if price exists and false if not.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (bool);\\n\\n  /**\\n   * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param requester sender of the initial price request.\\n   * @return the stamped ancillary bytes.\\n   */\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    external\\n    pure\\n    virtual\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/DAOracle/DAOracleHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./SkinnyDAOracle.sol\\\";\\nimport \\\"./pool/SponsorPool.sol\\\";\\n\\nlibrary DAOracleHelpers {\\n  using SafeERC20 for IERC20;\\n\\n  function claimableRewards(SkinnyDAOracle.Index storage index)\\n    public\\n    view\\n    returns (\\n      uint256 total,\\n      uint256 poolAmount,\\n      uint256 reporterAmount,\\n      uint256 residualAmount,\\n      uint256 vestingTime\\n    )\\n  {\\n    // multiplier = distance between last proposal and current time (in seconds)\\n    uint256 multiplier = block.timestamp - index.lastUpdated;\\n\\n    // minimum multiplier = 1\\n    if (multiplier == 0) multiplier = 1;\\n\\n    // reporter's share starts at floor and moves toward ceiling by tilt % per tick\\n    uint256 reporterShare = index.floor + (index.tilt * multiplier);\\n    if (reporterShare > index.ceiling) reporterShare = index.ceiling;\\n\\n    total = index.drop * multiplier;\\n    reporterAmount = (total * reporterShare) / 1e18;\\n    residualAmount = ((total - reporterAmount) * index.creatorAmount) / 1e18;\\n    poolAmount = total - residualAmount - reporterAmount;\\n    vestingTime = 0;\\n  }\\n\\n  function dispute(\\n    SkinnyDAOracle.Index storage index,\\n    SkinnyDAOracle.Proposal storage proposal,\\n    SkinnyOptimisticOracleInterface oracle,\\n    bytes32 externalIdentifier\\n  ) public {\\n    IERC20 token = index.bondToken;\\n\\n    // Pull in funds from sponsor to cover the proposal bond\\n    token.safeTransferFrom(index.sponsor, address(this), index.bondAmount);\\n\\n    // Pull in funds from disputer to match the bond\\n    token.safeTransferFrom(msg.sender, address(this), index.bondAmount);\\n\\n    // Create the request + proposal via UMA's OO\\n    uint256 bond = oracle.requestAndProposePriceFor(\\n      externalIdentifier,\\n      proposal.timestamp,\\n      abi.encodePacked(proposal.data),\\n      token,\\n      0,\\n      index.bondAmount,\\n      index.disputePeriod,\\n      address(this),\\n      proposal.value\\n    );\\n\\n    // Build the OO request object for the above proposal\\n    SkinnyOptimisticOracleInterface.Request memory request;\\n    request.currency = token;\\n    request.finalFee = bond - index.bondAmount;\\n    request.bond = bond - request.finalFee;\\n    request.proposer = address(this);\\n    request.proposedPrice = proposal.value;\\n    request.expirationTime = block.timestamp + index.disputePeriod;\\n    request.customLiveness = index.disputePeriod;\\n\\n    // Initiate the dispute on disputer's behalf\\n    oracle.disputePriceFor(\\n      externalIdentifier,\\n      proposal.timestamp,\\n      abi.encodePacked(proposal.data),\\n      request,\\n      msg.sender,\\n      address(this)\\n    );\\n\\n    // Keep track of the outstanding bond and dispute\\n    index.bondsOutstanding += bond;\\n    index.disputesOutstanding++;\\n  }\\n\\n  function deploySponsorPool(SkinnyDAOracle.Index storage index)\\n    public\\n    returns (SponsorPool)\\n  {\\n    return new SponsorPool(ERC20(address(index.bondToken)));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DAOracle/vault/IVestingVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title VestingVault\\n * @dev A token vesting contract that will release tokens gradually like a\\n * standard equity vesting schedule, with a cliff and vesting period but no\\n * arbitrary restrictions on the frequency of claims. Optionally has an initial\\n * tranche claimable immediately after the cliff expires (in addition to any\\n * amounts that would have vested up to that point but didn't due to a cliff).\\n */\\ninterface IVestingVault {\\n  event Issued(\\n    address indexed beneficiary,\\n    IERC20 token,\\n    uint256 amount,\\n    uint256 start,\\n    uint256 cliff,\\n    uint256 duration\\n  );\\n\\n  event Released(\\n    address indexed beneficiary,\\n    uint256 indexed allocationId,\\n    IERC20 token,\\n    uint256 amount,\\n    uint256 remaining\\n  );\\n\\n  event Revoked(\\n    address indexed beneficiary,\\n    uint256 indexed allocationId,\\n    IERC20 token,\\n    uint256 allocationAmount,\\n    uint256 revokedAmount\\n  );\\n\\n  struct Allocation {\\n    IERC20 token;\\n    uint256 start;\\n    uint256 cliff;\\n    uint256 duration;\\n    uint256 total;\\n    uint256 claimed;\\n  }\\n\\n  /**\\n   * @dev Creates a new allocation for a beneficiary. Tokens are released\\n   * linearly over time until a given number of seconds have passed since the\\n   * start of the vesting schedule. Callable only by issuers.\\n   * @param _beneficiary The address to which tokens will be released\\n   * @param _amount The amount of the allocation (in wei)\\n   * @param _startAt The unix timestamp at which the vesting may begin\\n   * @param _cliff The number of seconds after _startAt before which no vesting occurs\\n   * @param _duration The number of seconds after which the entire allocation is vested\\n   */\\n  function issue(\\n    address _beneficiary,\\n    IERC20 _token,\\n    uint256 _amount,\\n    uint256 _startAt,\\n    uint256 _cliff,\\n    uint256 _duration\\n  ) external;\\n\\n  /**\\n   * @dev Revokes an existing allocation. Any unclaimed tokens are recalled\\n   * and sent to the caller. Callable only be issuers.\\n   * @param _beneficiary The address whose allocation is to be revoked\\n   * @param _id The allocation ID to revoke\\n   */\\n  function revoke(\\n    address _beneficiary,\\n    uint256 _id\\n  ) external;\\n\\n  /**\\n   * @dev Transfers vested tokens from any number of allocations to their beneficiary. Callable by anyone. May be gas-intensive.\\n   * @param _beneficiary The address that has vested tokens\\n   * @param _ids The vested allocation indexes\\n   */\\n  function release(\\n    address _beneficiary, \\n    uint256[] calldata _ids\\n  ) external;\\n\\n  /**\\n   * @dev Gets the number of allocations issued for a given address.\\n   * @param _beneficiary The address to check for allocations\\n   */\\n  function allocationCount(\\n    address _beneficiary\\n  ) external view returns (\\n    uint256 count\\n  );\\n\\n  /**\\n   * @dev Gets details about a given allocation.\\n   * @param _beneficiary Address to check\\n   * @param _id The allocation index\\n   * @return allocation The allocation\\n   * @return vested The total amount vested to date\\n   * @return releasable The amount currently releasable\\n   */\\n  function allocationSummary(\\n    address _beneficiary,\\n    uint256 _id\\n  ) external view returns (\\n    Allocation memory allocation,\\n    uint256 vested,\\n    uint256 releasable\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/DAOracle/pool/StakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\nimport \\\"./ManagedPool.sol\\\";\\nimport \\\"./Slashable.sol\\\";\\n\\n/**\\n * @title StakingPool\\n * @dev The DAOracle Network relies on decentralized risk pools. This is a\\n * simple implementation of a staking pool which wraps a single arbitrary token\\n * and provides a mechanism for recouping losses incurred by the deployer of\\n * the staking pool. Pool ownership is represented as ERC20 tokens that can be\\n * freely used as the holder sees fit. Holders of pool shares may make claims\\n * proportional to their stake on the underlying token balance of the pool. Any\\n * rewards or penalties applied to the pool will thus impact all holders.\\n */\\ncontract StakingPool is ERC20, ERC20Permit, ManagedPool, Slashable {\\n  using SafeERC20 for IERC20;\\n\\n  constructor(\\n    ERC20 _token,\\n    uint256 _mintFee,\\n    uint256 _burnFee,\\n    address _feePayee\\n  )\\n    ERC20(\\n      _concat(\\\"StakingPool: \\\", _token.name()),\\n      _concat(\\\"dp\\\", _token.symbol())\\n    )\\n    ERC20Permit(_concat(\\\"StakingPool: \\\", _token.name()))\\n  {\\n    stakedToken = IERC20(_token);\\n    mintFee = _mintFee;\\n    burnFee = _burnFee;\\n    feePayee = _feePayee;\\n\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(MANAGER, msg.sender);\\n    _setupRole(SLASHER, msg.sender);\\n\\n    stakedToken.safeApprove(msg.sender, 2**256 - 1);\\n\\n    emit Created(address(this), stakedToken);\\n  }\\n\\n  function underlying() public view override returns (IERC20) {\\n    return stakedToken;\\n  }\\n\\n  function _concat(string memory a, string memory b)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return string(bytes.concat(bytes(a), bytes(b)));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DAOracle/pool/SponsorPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\nimport \\\"./ManagedPool.sol\\\";\\n\\n/**\\n * @title SponsorPool\\n */\\ncontract SponsorPool is ERC20, ERC20Permit, ManagedPool {\\n  using SafeERC20 for IERC20;\\n\\n  constructor(ERC20 _token)\\n    ERC20(\\n      _concat(\\\"SponsorPool: \\\", _token.name()),\\n      _concat(\\\"f\\\", _token.symbol())\\n    )\\n    ERC20Permit(_concat(\\\"SponsorPool: \\\", _token.name()))\\n  {\\n    stakedToken = IERC20(_token);\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(MANAGER, msg.sender);\\n\\n    stakedToken.safeApprove(msg.sender, 2**256 - 1);\\n    emit Created(address(this), stakedToken);\\n  }\\n\\n  function _concat(string memory a, string memory b)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return string(bytes.concat(bytes(a), bytes(b)));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DAOracle/pool/ManagedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title ManagedPool\\n * @dev The DAOracle Network relies on decentralized risk pools. This is a\\n * simple implementation of a staking pool which wraps a single arbitrary token\\n * and provides a mechanism for recouping losses incurred by the deployer of\\n * the underlying. Pool ownership is represented as ERC20 tokens that can be\\n * freely used as the holder sees fit. Holders of pool shares may make claims\\n * proportional to their stake on the underlying token balance of the pool. Any\\n * rewards or penalties applied to the pool will thus impact all holders.\\n */\\nabstract contract ManagedPool is AccessControl, ERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 public immutable MANAGER = keccak256(\\\"MANAGER\\\");\\n\\n  /// @dev The token being staked in this pool\\n  IERC20 public stakedToken;\\n\\n  /**\\n   * @dev The mint/burn fee config. Fees must be scaled by 10**18 (1e18 = 100%)\\n   * Formula: fee = tokens * mintOrBurnFee / 1e18\\n   * Example: 1000 DAI deposit * (0.1 * 10**18) / 10**18 = 100 DAI fee\\n   */\\n  uint256 public mintFee;\\n  uint256 public burnFee;\\n  address public feePayee;\\n\\n  event Created(address pool, IERC20 underlying);\\n  event FeesChanged(uint256 mintFee, uint256 burnFee, address payee);\\n  event Fee(uint256 feeAmount);\\n\\n  event Deposit(\\n    address indexed depositor,\\n    uint256 underlyingAmount,\\n    uint256 tokensMinted\\n  );\\n\\n  event Payout(\\n    address indexed beneficiary,\\n    uint256 underlyingAmount,\\n    uint256 tokensBurned\\n  );\\n\\n  /**\\n   * @dev Mint pool shares for a given stake amount\\n   * @param _stakeAmount The amount of underlying to stake\\n   * @return shares The number of pool shares minted\\n   */\\n  function mint(uint256 _stakeAmount) external returns (uint256 shares) {\\n    require(\\n      stakedToken.allowance(msg.sender, address(this)) >= _stakeAmount,\\n      \\\"mint: insufficient allowance\\\"\\n    );\\n\\n    // Grab the pre-deposit balance and shares for comparison\\n    uint256 oldBalance = stakedToken.balanceOf(address(this));\\n    uint256 oldShares = totalSupply();\\n\\n    // Pull user's tokens into the pool\\n    stakedToken.safeTransferFrom(msg.sender, address(this), _stakeAmount);\\n\\n    // Calculate the fee for minting\\n    uint256 fee = (_stakeAmount * mintFee) / 1e18;\\n    if (fee != 0) {\\n      stakedToken.safeTransfer(feePayee, fee);\\n      _stakeAmount -= fee;\\n      emit Fee(fee);\\n    }\\n\\n    // Calculate the pool shares for the new deposit\\n    if (oldShares != 0) {\\n      // shares = stake * oldShares / oldBalance\\n      shares = (_stakeAmount * oldShares) / oldBalance;\\n    } else {\\n      // if no shares exist, just assign 1,000 shares (it's arbitrary)\\n      shares = 10**3;\\n    }\\n\\n    // Transfer shares to caller\\n    _mint(msg.sender, shares);\\n    emit Deposit(msg.sender, _stakeAmount, shares);\\n  }\\n\\n  /**\\n   * @dev Burn some pool shares and claim the underlying tokens\\n   * @param _shareAmount The number of shares to burn\\n   * @return tokens The number of underlying tokens returned\\n   */\\n  function burn(uint256 _shareAmount) external returns (uint256 tokens) {\\n    require(balanceOf(msg.sender) >= _shareAmount, \\\"burn: insufficient shares\\\");\\n\\n    // TODO: Extract\\n    // Calculate the user's share of the underlying balance\\n    uint256 balance = stakedToken.balanceOf(address(this));\\n    tokens = (_shareAmount * balance) / totalSupply();\\n\\n    // Burn the caller's shares before anything else\\n    _burn(msg.sender, _shareAmount);\\n\\n    // Calculate the fee for burning\\n    uint256 fee = getBurnFee(tokens);\\n    if (fee != 0) {\\n      tokens -= fee;\\n      stakedToken.safeTransfer(feePayee, fee);\\n      emit Fee(fee);\\n    }\\n\\n    // Transfer underlying tokens back to caller\\n    stakedToken.safeTransfer(msg.sender, tokens);\\n    emit Payout(msg.sender, tokens, _shareAmount);\\n  }\\n\\n  /**\\n   * @dev Calculate the minting fee\\n   * @param _amount The number of tokens being staked\\n   * @return fee The calculated fee value\\n   */\\n  function getMintFee(uint256 _amount) public view returns (uint256 fee) {\\n    fee = (_amount * mintFee) / 1e18;\\n  }\\n\\n  /**\\n   * @dev Calculate the burning fee\\n   * @param _amount The number of pool tokens being burned\\n   * @return fee The calculated fee value\\n   */\\n  function getBurnFee(uint256 _amount) public view returns (uint256 fee) {\\n    fee = (_amount * burnFee) / 1e18;\\n  }\\n\\n  /**\\n   * @dev Update fee configuration\\n   * @param _mintFee The new minting fee\\n   * @param _burnFee The new burning fee\\n   * @param _feePayee The new payee\\n   */\\n  function setFees(\\n    uint256 _mintFee,\\n    uint256 _burnFee,\\n    address _feePayee\\n  ) external onlyRole(MANAGER) {\\n    mintFee = _mintFee;\\n    burnFee = _burnFee;\\n    feePayee = _feePayee;\\n    emit FeesChanged(_mintFee, _burnFee, _feePayee);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DAOracle/pool/Slashable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract Slashable is AccessControl, IERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Precomputed hash for \\\"SLASHER\\\" role ID\\n  bytes32 public immutable SLASHER = keccak256(\\\"SLASHER\\\");\\n\\n  /// @dev Slash event\\n  event Slash(address indexed slasher, IERC20 token, uint256 amount);\\n\\n  /// @dev The slashable asset\\n  function underlying() public view virtual returns (IERC20);\\n\\n  /**\\n   * @dev Slash the pool by a given amount. Callable by the owner.\\n   * @param amount The amount of tokens to slash\\n   * @param receiver The recipient of the slashed assets\\n   */\\n  function slash(uint256 amount, address receiver) external onlyRole(SLASHER) {\\n    IERC20 token = underlying();\\n    require(\\n      token.balanceOf(address(this)) >= amount,\\n      \\\"slash: insufficient balance\\\"\\n    );\\n\\n    token.safeTransfer(receiver, amount);\\n    emit Slash(msg.sender, token, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/DAOracle/DAOracleHelpers.sol\": {\r\n        \"DAOracleHelpers\": \"0x31b678c26bef78d6958989469eeb327d6c7f0c58\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ooIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"contract SkinnyOptimisticOracleInterface\",\"name\":\"_optimisticOracle\",\"type\":\"address\"},{\"internalType\":\"contract IVestingVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"name\":\"Disputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"bondToken\",\"type\":\"address\"}],\"name\":\"IndexConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct SkinnyDAOracle.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"Relayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"settledValue\",\"type\":\"int256\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"_proposalId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reporterAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"residualAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"bondToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"disputePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"floor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ceiling\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"drop\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"creatorAmount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"configureIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDisputePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"index\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"bondToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondsOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputesOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drop\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"floor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ceiling\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"creatorAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"disputePeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isDisputed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOutstandingDisputes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract SkinnyOptimisticOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleInterface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"priceSettled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"indexId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"internalType\":\"struct SkinnyDAOracle.Proposal\",\"name\":\"relayed\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"setExternalIdentifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"outstandingDisputes\",\"type\":\"uint32\"}],\"name\":\"setMaxOutstandingDisputes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"setPoolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"disputePeriod\",\"type\":\"uint32\"}],\"name\":\"setdefaultDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVestingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SkinnyDAOracle", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "566f6c6174696c69747944414f7261636c650000000000000000000000000000000000000000000000000000ee3afe347d5c74317041e2618c49534daf887c24000000000000000000000000c964d591fc1b2825471f5f6c7630241368599671", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}