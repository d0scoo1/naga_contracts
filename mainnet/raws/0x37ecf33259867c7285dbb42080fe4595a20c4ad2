{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4;\r\n\r\n/// @title Multitransfer -- Multiple ERC20 token transfers in one transaction\r\n/// @author Robert May <robert@hyper.co>\r\n\r\ninterface ERC20 {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Multitransfer {\r\n    event TransactionCompleted(\r\n        address From,\r\n        address Token,\r\n        address[] Receivers,\r\n        uint256[] Amounts,\r\n        string Invoice\r\n    );\r\n\r\n    address owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function send(\r\n        address[] calldata _receivers,\r\n        uint256[] calldata _amounts,\r\n        string calldata _invoice\r\n    ) external payable {\r\n        require(\r\n            _receivers.length == _amounts.length,\r\n            \"0xMLT: Receiver count does not match amount count.\"\r\n        );\r\n\r\n        uint256 total;\r\n        for (uint8 i; i < _receivers.length; i++) {\r\n            total += _amounts[i];\r\n        }\r\n        require(\r\n            total == msg.value,\r\n            \"0xMLT: Total payment value does not match ether sent\"\r\n        );\r\n\r\n        for (uint8 i; i < _receivers.length; i++) {\r\n            (bool sent, ) = _receivers[i].call{value: _amounts[i]}(\"\");\r\n            require(sent, \"0xMLT: Transfer failed.\");\r\n        }\r\n\r\n        emit TransactionCompleted(\r\n            msg.sender,\r\n            0x0000000000000000000000000000000000000000,\r\n            _receivers,\r\n            _amounts,\r\n            _invoice\r\n        );\r\n    }\r\n\r\n    function transfer(\r\n        address _from,\r\n        address _token,\r\n        address[] calldata _receivers,\r\n        uint256[] calldata _amounts,\r\n        string calldata _invoice\r\n    ) public virtual {\r\n        require(\r\n            msg.sender == owner,\r\n            \"0xMLT: Only Hyper provider may call this contract.\"\r\n        );\r\n        require(\r\n            _receivers.length == _amounts.length,\r\n            \"0xMLT: Receiver count does not match amount count.\"\r\n        );\r\n\r\n        ERC20 tokenInterface = ERC20(_token);\r\n\r\n        for (uint8 i; i < _receivers.length; i++) {\r\n            require(\r\n                tokenInterface.transferFrom(_from, _receivers[i], _amounts[i]),\r\n                \"0xMLT: Transfer failed.\"\r\n            );\r\n        }\r\n\r\n        emit TransactionCompleted(\r\n            _from,\r\n            _token,\r\n            _receivers,\r\n            _amounts,\r\n            _invoice\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"Receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Invoice\",\"type\":\"string\"}],\"name\":\"TransactionCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_invoice\",\"type\":\"string\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_invoice\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Multitransfer", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13e8905197a0f069cbf471b9b295bba722ab4d2c1a7c27d0062e90af83a81ee6"}]}