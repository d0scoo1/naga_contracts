{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/pool/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {VersionedInitializable} from \\\"../libraries/omni-upgradeability/VersionedInitializable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {PoolLogic} from \\\"../libraries/logic/PoolLogic.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\nimport {SupplyLogic} from \\\"../libraries/logic/SupplyLogic.sol\\\";\\nimport {BorrowLogic} from \\\"../libraries/logic/BorrowLogic.sol\\\";\\nimport {LiquidationLogic} from \\\"../libraries/logic/LiquidationLogic.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {IERC20WithPermit} from \\\"../../interfaces/IERC20WithPermit.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"../../interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"../../interfaces/IPool.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {PoolStorage} from \\\"./PoolStorage.sol\\\";\\nimport {FlashClaimLogic} from \\\"../libraries/logic/FlashClaimLogic.sol\\\";\\nimport {Address} from \\\"../../dependencies/openzeppelin/contracts/Address.sol\\\";\\n\\n/**\\n * @title Pool contract\\n *\\n * @notice Main point of interaction with an Omni protocol's market\\n * - Users can:\\n *   # Supply\\n *   # Withdraw\\n *   # Borrow\\n *   # Repay\\n *   # Liquidate positions\\n * @dev To be covered by a proxy contract, owned by the PoolAddressesProvider of the specific market\\n * @dev All admin functions are callable by the PoolConfigurator contract defined also in the\\n *   PoolAddressesProvider\\n **/\\ncontract Pool is VersionedInitializable, PoolStorage, IPool {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using Address for address;\\n\\n    uint256 public constant POOL_REVISION = 3;\\n    IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\n\\n    /**\\n     * @dev Only pool configurator can call functions marked by this modifier.\\n     **/\\n    modifier onlyPoolConfigurator() {\\n        _onlyPoolConfigurator();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only pool admin can call functions marked by this modifier.\\n     **/\\n    modifier onlyPoolAdmin() {\\n        _onlyPoolAdmin();\\n        _;\\n    }\\n\\n    function _onlyPoolConfigurator() internal view virtual {\\n        require(\\n            ADDRESSES_PROVIDER.getPoolConfigurator() == msg.sender,\\n            Errors.CALLER_NOT_POOL_CONFIGURATOR\\n        );\\n    }\\n\\n    function _onlyPoolAdmin() internal view virtual {\\n        require(\\n            IACLManager(ADDRESSES_PROVIDER.getACLManager()).isPoolAdmin(\\n                msg.sender\\n            ),\\n            Errors.CALLER_NOT_POOL_ADMIN\\n        );\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return POOL_REVISION;\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * @param provider The address of the PoolAddressesProvider contract\\n     */\\n    constructor(IPoolAddressesProvider provider) {\\n        ADDRESSES_PROVIDER = provider;\\n    }\\n\\n    /**\\n     * @notice Initializes the Pool.\\n     * @dev Function is invoked by the proxy contract when the Pool contract is added to the\\n     * PoolAddressesProvider of the market.\\n     * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations\\n     * @param provider The address of the PoolAddressesProvider\\n     **/\\n    function initialize(IPoolAddressesProvider provider)\\n        external\\n        virtual\\n        initializer\\n    {\\n        require(\\n            provider == ADDRESSES_PROVIDER,\\n            Errors.INVALID_ADDRESSES_PROVIDER\\n        );\\n        _maxStableRateBorrowSizePercent = 0.25e4;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) public virtual override {\\n        SupplyLogic.executeSupply(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig[onBehalfOf],\\n            DataTypes.ExecuteSupplyParams({\\n                asset: asset,\\n                amount: amount,\\n                onBehalfOf: onBehalfOf,\\n                referralCode: referralCode\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function supplyERC721(\\n        address asset,\\n        DataTypes.ERC721SupplyParams[] calldata tokenData,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) public virtual override {\\n        SupplyLogic.executeSupplyERC721(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig[onBehalfOf],\\n            DataTypes.ExecuteSupplyERC721Params({\\n                asset: asset,\\n                tokenData: tokenData,\\n                onBehalfOf: onBehalfOf,\\n                referralCode: referralCode\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) public virtual override {\\n        // Need to accomodate ERC721 and ERC1155 here\\n        IERC20WithPermit(asset).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            permitV,\\n            permitR,\\n            permitS\\n        );\\n        SupplyLogic.executeSupply(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig[onBehalfOf],\\n            DataTypes.ExecuteSupplyParams({\\n                asset: asset,\\n                amount: amount,\\n                onBehalfOf: onBehalfOf,\\n                referralCode: referralCode\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) public virtual override returns (uint256) {\\n        return\\n            SupplyLogic.executeWithdraw(\\n                _reserves,\\n                _reservesList,\\n                _usersConfig[msg.sender],\\n                DataTypes.ExecuteWithdrawParams({\\n                    asset: asset,\\n                    amount: amount,\\n                    to: to,\\n                    reservesCount: _reservesCount,\\n                    oracle: ADDRESSES_PROVIDER.getPriceOracle()\\n                })\\n            );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function withdrawERC721(\\n        address asset,\\n        uint256[] calldata tokenIds,\\n        address to\\n    ) public virtual override returns (uint256) {\\n        return\\n            SupplyLogic.executeWithdrawERC721(\\n                _reserves,\\n                _reservesList,\\n                _usersConfig[msg.sender],\\n                DataTypes.ExecuteWithdrawERC721Params({\\n                    asset: asset,\\n                    tokenIds: tokenIds,\\n                    to: to,\\n                    reservesCount: _reservesCount,\\n                    oracle: ADDRESSES_PROVIDER.getPriceOracle()\\n                })\\n            );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) public virtual override {\\n        BorrowLogic.executeBorrow(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig[onBehalfOf],\\n            DataTypes.ExecuteBorrowParams({\\n                asset: asset,\\n                user: msg.sender,\\n                onBehalfOf: onBehalfOf,\\n                amount: amount,\\n                interestRateMode: DataTypes.InterestRateMode(interestRateMode),\\n                referralCode: referralCode,\\n                releaseUnderlying: true,\\n                maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,\\n                reservesCount: _reservesCount,\\n                oracle: ADDRESSES_PROVIDER.getPriceOracle(),\\n                priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) public virtual override returns (uint256) {\\n        return\\n            BorrowLogic.executeRepay(\\n                _reserves,\\n                _reservesList,\\n                _usersConfig[onBehalfOf],\\n                DataTypes.ExecuteRepayParams({\\n                    asset: asset,\\n                    amount: amount,\\n                    interestRateMode: DataTypes.InterestRateMode(\\n                        interestRateMode\\n                    ),\\n                    onBehalfOf: onBehalfOf,\\n                    useOTokens: false\\n                })\\n            );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) public virtual override returns (uint256) {\\n        {\\n            IERC20WithPermit(asset).permit(\\n                msg.sender,\\n                address(this),\\n                amount,\\n                deadline,\\n                permitV,\\n                permitR,\\n                permitS\\n            );\\n        }\\n        {\\n            DataTypes.ExecuteRepayParams memory params = DataTypes\\n                .ExecuteRepayParams({\\n                    asset: asset,\\n                    amount: amount,\\n                    interestRateMode: DataTypes.InterestRateMode(\\n                        interestRateMode\\n                    ),\\n                    onBehalfOf: onBehalfOf,\\n                    useOTokens: false\\n                });\\n            return\\n                BorrowLogic.executeRepay(\\n                    _reserves,\\n                    _reservesList,\\n                    _usersConfig[onBehalfOf],\\n                    params\\n                );\\n        }\\n    }\\n\\n    /// @inheritdoc IPool\\n    function repayWithOTokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) public virtual override returns (uint256) {\\n        return\\n            BorrowLogic.executeRepay(\\n                _reserves,\\n                _reservesList,\\n                _usersConfig[msg.sender],\\n                DataTypes.ExecuteRepayParams({\\n                    asset: asset,\\n                    amount: amount,\\n                    interestRateMode: DataTypes.InterestRateMode(\\n                        interestRateMode\\n                    ),\\n                    onBehalfOf: msg.sender,\\n                    useOTokens: true\\n                })\\n            );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\\n        public\\n        virtual\\n        override\\n    {\\n        BorrowLogic.executeSwapBorrowRateMode(\\n            _reserves[asset],\\n            _usersConfig[msg.sender],\\n            asset,\\n            DataTypes.InterestRateMode(interestRateMode)\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function rebalanceStableBorrowRate(address asset, address user)\\n        public\\n        virtual\\n        override\\n    {\\n        BorrowLogic.executeRebalanceStableBorrowRate(\\n            _reserves[asset],\\n            asset,\\n            user\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        public\\n        virtual\\n        override\\n    {\\n        SupplyLogic.executeUseReserveAsCollateral(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig[msg.sender],\\n            asset,\\n            useAsCollateral,\\n            _reservesCount,\\n            ADDRESSES_PROVIDER.getPriceOracle()\\n        );\\n    }\\n\\n    function setUserUseERC721AsCollateral(\\n        address asset,\\n        uint256 tokenId,\\n        bool useAsCollateral\\n    ) public virtual override {\\n        SupplyLogic.executeUseERC721AsCollateral(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig[msg.sender],\\n            asset,\\n            tokenId,\\n            useAsCollateral,\\n            _reservesCount,\\n            ADDRESSES_PROVIDER.getPriceOracle()\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveOToken\\n    ) public virtual override {\\n        LiquidationLogic.executeLiquidationCall(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig,\\n            DataTypes.ExecuteLiquidationCallParams({\\n                reservesCount: _reservesCount,\\n                liquidationAmount: debtToCover,\\n                collateralAsset: collateralAsset,\\n                liquidationAsset: debtAsset,\\n                user: user,\\n                receiveXToken: receiveOToken,\\n                priceOracle: ADDRESSES_PROVIDER.getPriceOracle(),\\n                priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel(),\\n                collateralTokenId: 0\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function liquidationERC721(\\n        address collateralAsset,\\n        address liquidationAsset,\\n        address user,\\n        uint256 collateralTokenId,\\n        uint256 liquidationAmount,\\n        bool receiveNToken\\n    ) public virtual override {\\n        LiquidationLogic.executeERC721LiquidationCall(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig,\\n            DataTypes.ExecuteLiquidationCallParams({\\n                reservesCount: _reservesCount,\\n                liquidationAmount: liquidationAmount,\\n                liquidationAsset: liquidationAsset,\\n                collateralAsset: collateralAsset,\\n                collateralTokenId: collateralTokenId,\\n                user: user,\\n                receiveXToken: receiveNToken,\\n                priceOracle: ADDRESSES_PROVIDER.getPriceOracle(),\\n                priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function flashClaim(\\n        address receiverAddress,\\n        address nftAsset,\\n        uint256[] calldata nftTokenIds,\\n        bytes calldata params\\n    ) external virtual override {\\n        FlashClaimLogic.executeFlashClaim(\\n            _reserves,\\n            DataTypes.ExecuteFlashClaimParams({\\n                receiverAddress: receiverAddress,\\n                nftAsset: nftAsset,\\n                nftTokenIds: nftTokenIds,\\n                params: params\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function mintToTreasury(address[] calldata assets)\\n        external\\n        virtual\\n        override\\n    {\\n        PoolLogic.executeMintToTreasury(_reserves, assets);\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getReserveData(address asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[asset];\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor,\\n            uint256 erc721HealthFactor\\n        )\\n    {\\n        return\\n            PoolLogic.executeGetUserAccountData(\\n                _reserves,\\n                _reservesList,\\n                DataTypes.CalculateUserAccountDataParams({\\n                    userConfig: _usersConfig[user],\\n                    reservesCount: _reservesCount,\\n                    user: user,\\n                    oracle: ADDRESSES_PROVIDER.getPriceOracle()\\n                })\\n            );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return _reserves[asset].configuration;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (DataTypes.UserConfigurationMap memory)\\n    {\\n        return _usersConfig[user];\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _reserves[asset].getNormalizedIncome();\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _reserves[asset].getNormalizedDebt();\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getReservesList()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        uint256 reservesListCount = _reservesCount;\\n        uint256 droppedReservesCount = 0;\\n        address[] memory reservesList = new address[](reservesListCount);\\n\\n        for (uint256 i = 0; i < reservesListCount; i++) {\\n            if (_reservesList[i] != address(0)) {\\n                reservesList[i - droppedReservesCount] = _reservesList[i];\\n            } else {\\n                droppedReservesCount++;\\n            }\\n        }\\n\\n        // Reduces the length of the reserves array by `droppedReservesCount`\\n        assembly {\\n            mstore(reservesList, sub(reservesListCount, droppedReservesCount))\\n        }\\n        return reservesList;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getReserveAddressById(uint16 id) external view returns (address) {\\n        return _reservesList[id];\\n    }\\n\\n    /// @inheritdoc IPool\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _maxStableRateBorrowSizePercent;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function MAX_NUMBER_RESERVES()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint16)\\n    {\\n        return ReserveConfiguration.MAX_RESERVES_COUNT;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        bool usedAsCollateral,\\n        uint256 value,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external virtual override {\\n        require(\\n            msg.sender == _reserves[asset].xTokenAddress,\\n            Errors.CALLER_NOT_XTOKEN\\n        );\\n        SupplyLogic.executeFinalizeTransfer(\\n            _reserves,\\n            _reservesList,\\n            _usersConfig,\\n            DataTypes.FinalizeTransferParams({\\n                asset: asset,\\n                from: from,\\n                to: to,\\n                usedAsCollateral: usedAsCollateral,\\n                value: value,\\n                balanceFromBefore: balanceFromBefore,\\n                balanceToBefore: balanceToBefore,\\n                reservesCount: _reservesCount,\\n                oracle: ADDRESSES_PROVIDER.getPriceOracle()\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function initReserve(\\n        address asset,\\n        DataTypes.AssetType assetType,\\n        address xTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external virtual override onlyPoolConfigurator {\\n        if (\\n            PoolLogic.executeInitReserve(\\n                _reserves,\\n                _reservesList,\\n                DataTypes.InitReserveParams({\\n                    asset: asset,\\n                    assetType: assetType,\\n                    xTokenAddress: xTokenAddress,\\n                    stableDebtAddress: stableDebtAddress,\\n                    variableDebtAddress: variableDebtAddress,\\n                    interestRateStrategyAddress: interestRateStrategyAddress,\\n                    reservesCount: _reservesCount,\\n                    maxNumberReserves: MAX_NUMBER_RESERVES()\\n                })\\n            )\\n        ) {\\n            _reservesCount++;\\n        }\\n    }\\n\\n    /// @inheritdoc IPool\\n    function dropReserve(address asset)\\n        external\\n        virtual\\n        override\\n        onlyPoolConfigurator\\n    {\\n        PoolLogic.executeDropReserve(_reserves, _reservesList, asset);\\n    }\\n\\n    /// @inheritdoc IPool\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external virtual override onlyPoolConfigurator {\\n        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n        require(\\n            _reserves[asset].id != 0 || _reservesList[0] == asset,\\n            Errors.ASSET_NOT_LISTED\\n        );\\n        _reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external virtual override onlyPoolConfigurator {\\n        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n        require(\\n            _reserves[asset].id != 0 || _reservesList[0] == asset,\\n            Errors.ASSET_NOT_LISTED\\n        );\\n        _reserves[asset].configuration = configuration;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function rescueTokens(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external virtual override onlyPoolAdmin {\\n        PoolLogic.executeRescueTokens(token, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/omni-upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title VersionedInitializable\\n * , inspired by the OpenZeppelin Initializable contract\\n * @notice Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * @dev WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\nabstract contract VersionedInitializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the revision number of the contract\\n     * @dev Needs to be defined in the inherited class as a constant.\\n     * @return The revision number\\n     **/\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @notice Returns true if and only if the function is running in the constructor\\n     * @return True if the function is running in the constructor\\n     **/\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Errors library\\n *\\n * @notice Defines the error messages emitted by the different contracts of the Omni protocol\\n */\\nlibrary Errors {\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\n    string public constant CALLER_NOT_XTOKEN = \\\"11\\\"; // 'The caller of the function is not an OToken'\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\n    string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\n    string public constant SAME_BLOCK_BORROW_REPAY = \\\"48\\\"; // 'Borrow and repay in same block is not allowed'\\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\n    string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\n    string public constant XTOKEN_SUPPLY_NOT_ZERO = \\\"54\\\"; // 'OToken supply is not zero'\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\n    string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\n    string public constant USER_IN_ISOLATION_MODE = \\\"62\\\"; // 'User is in isolation mode'\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\n    string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\n    string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\n    string public constant NOT_THE_OWNER = \\\"91\\\"; // user is not the owner of a given asset\\n    string public constant LIQUIDATION_AMOUNT_NOT_ENOUGH = \\\"92\\\";\\n    string public constant INVALID_ASSET_TYPE = \\\"93\\\"; // invalid asset type for action.\\n    string public constant INVALID_FLASH_CLAIM_RECEIVER = \\\"94\\\"; // invalid flash claim receiver.\\n    string public constant ERC721_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"95\\\"; // 'ERC721 Health factor is not below the threshold. Can only liquidate ERC20'\\n    string public constant UNDERLYING_ASSET_CAN_NOT_BE_TRANSFERRED = \\\"96\\\"; //underlying asset can not be transferred.\\n    string public constant TOKEN_TRANSFERRED_CAN_NOT_BE_SELF_ADDRESS = \\\"97\\\"; //token transferred can not be self address.\\n    string public constant INVALID_AIRDROP_CONTRACT_ADDRESS = \\\"98\\\"; //invalid airdrop contract address.\\n    string public constant INVALID_AIRDROP_PARAMETERS = \\\"99\\\"; //invalid airdrop parameters.\\n    string public constant CALL_AIRDROP_METHOD_FAILED = \\\"100\\\"; //call airdrop method failed.\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n *\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n    /// @dev bit 63 reserved\\n\\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n    uint256 internal constant MAX_VALID_LTV = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n    uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n    /**\\n     * @notice Sets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @param ltv The new ltv\\n     **/\\n    function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv)\\n        internal\\n        pure\\n    {\\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n        self.data = (self.data & LTV_MASK) | ltv;\\n    }\\n\\n    /**\\n     * @notice Gets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @return The loan to value\\n     **/\\n    function getLtv(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self.data & ~LTV_MASK;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @param threshold The new liquidation threshold\\n     **/\\n    function setLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 threshold\\n    ) internal pure {\\n        require(\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n            Errors.INVALID_LIQ_THRESHOLD\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation threshold\\n     **/\\n    function getLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @param bonus The new liquidation bonus\\n     **/\\n    function setLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 bonus\\n    ) internal pure {\\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n        self.data =\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation bonus\\n     **/\\n    function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @param decimals The decimals\\n     **/\\n    function setDecimals(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 decimals\\n    ) internal pure {\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n        self.data =\\n            (self.data & DECIMALS_MASK) |\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @return The decimals of the asset\\n     **/\\n    function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @return The active state\\n     **/\\n    function getActive(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @param frozen The frozen state\\n     **/\\n    function setFrozen(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool frozen\\n    ) internal pure {\\n        self.data =\\n            (self.data & FROZEN_MASK) |\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @return The frozen state\\n     **/\\n    function getFrozen(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (self.data & ~FROZEN_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @param paused The paused state\\n     **/\\n    function setPaused(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool paused\\n    ) internal pure {\\n        self.data =\\n            (self.data & PAUSED_MASK) |\\n            (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @return The paused state\\n     **/\\n    function getPaused(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (self.data & ~PAUSED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @param siloed True if the asset is siloed\\n     **/\\n    function setSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool siloed\\n    ) internal pure {\\n        self.data =\\n            (self.data & SILOED_BORROWING_MASK) |\\n            (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @return The siloed borrowing flag\\n     **/\\n    function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\n     **/\\n    function setBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrowing state\\n     **/\\n    function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (self.data & ~BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables stable rate borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n     **/\\n    function setStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & STABLE_BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) <<\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the stable rate borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The stable rate borrowing state\\n     **/\\n    function getStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @param reserveFactor The reserve factor\\n     **/\\n    function setReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveFactor\\n    ) internal pure {\\n        require(\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n            Errors.INVALID_RESERVE_FACTOR\\n        );\\n\\n        self.data =\\n            (self.data & RESERVE_FACTOR_MASK) |\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @return The reserve factor\\n     **/\\n    function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\n            RESERVE_FACTOR_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @param borrowCap The borrow cap\\n     **/\\n    function setBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 borrowCap\\n    ) internal pure {\\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n        self.data =\\n            (self.data & BORROW_CAP_MASK) |\\n            (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrow cap\\n     **/\\n    function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @param supplyCap The supply cap\\n     **/\\n    function setSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 supplyCap\\n    ) internal pure {\\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n        self.data =\\n            (self.data & SUPPLY_CAP_MASK) |\\n            (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The supply cap\\n     **/\\n    function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation protocol fee of the reserve\\n     * @param self The reserve configuration\\n     * @param liquidationProtocolFee The liquidation protocol fee\\n     **/\\n    function setLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 liquidationProtocolFee\\n    ) internal pure {\\n        require(\\n            liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n            (liquidationProtocolFee <<\\n                LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee\\n     * @param self The reserve configuration\\n     * @return The liquidation protocol fee\\n     **/\\n    function getLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\n            LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flag representing active\\n     * @return The state flag representing frozen\\n     * @return The state flag representing borrowing enabled\\n     * @return The state flag representing stableRateBorrowing enabled\\n     * @return The state flag representing paused\\n     **/\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (\\n            bool,\\n            bool,\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_MASK) != 0,\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n            (dataLocal & ~PAUSED_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the configuration parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing ltv\\n     * @return The state param representing liquidation threshold\\n     * @return The state param representing liquidation bonus\\n     * @return The state param representing reserve decimals\\n     * @return The state param representing reserve factor\\n     **/\\n    function getParams(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            dataLocal & ~LTV_MASK,\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\n                RESERVE_FACTOR_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the caps parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing borrow cap\\n     * @return The state param representing supply cap.\\n     **/\\n    function getCaps(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/PoolLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {Address} from \\\"../../../dependencies/openzeppelin/contracts/Address.sol\\\";\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IOToken} from \\\"../../../interfaces/IOToken.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {ValidationLogic} from \\\"./ValidationLogic.sol\\\";\\nimport {GenericLogic} from \\\"./GenericLogic.sol\\\";\\n\\n/**\\n * @title PoolLogic library\\n *\\n * @notice Implements the logic for Pool specific functions\\n */\\nlibrary PoolLogic {\\n    using GPv2SafeERC20 for IERC20;\\n    using WadRayMath for uint256;\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    // See `IPool` for descriptions\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Initialize an asset reserve and add the reserve to the list of reserves\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param params Additional parameters needed for initiation\\n     * @return true if appended, false if inserted at existing empty spot\\n     **/\\n    function executeInitReserve(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.InitReserveParams memory params\\n    ) external returns (bool) {\\n        require(Address.isContract(params.asset), Errors.NOT_CONTRACT);\\n        reservesData[params.asset].init(\\n            params.xTokenAddress,\\n            params.assetType,\\n            params.stableDebtAddress,\\n            params.variableDebtAddress,\\n            params.interestRateStrategyAddress\\n        );\\n\\n        bool reserveAlreadyAdded = reservesData[params.asset].id != 0 ||\\n            reservesList[0] == params.asset;\\n        require(!reserveAlreadyAdded, Errors.RESERVE_ALREADY_ADDED);\\n\\n        for (uint16 i = 0; i < params.reservesCount; i++) {\\n            if (reservesList[i] == address(0)) {\\n                reservesData[params.asset].id = i;\\n                reservesList[i] = params.asset;\\n                return false;\\n            }\\n        }\\n\\n        require(\\n            params.reservesCount < params.maxNumberReserves,\\n            Errors.NO_MORE_RESERVES_ALLOWED\\n        );\\n        reservesData[params.asset].id = params.reservesCount;\\n        reservesList[params.reservesCount] = params.asset;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function executeRescueTokens(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of xTokens\\n     * @param reservesData The state of all the reserves\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     **/\\n    function executeMintToTreasury(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        address[] calldata assets\\n    ) external {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address assetAddress = assets[i];\\n\\n            DataTypes.ReserveData storage reserve = reservesData[assetAddress];\\n\\n            // this cover both inactive reserves and invalid reserves since the flag will be 0 for both\\n            if (!reserve.configuration.getActive()) {\\n                continue;\\n            }\\n\\n            uint256 accruedToTreasury = reserve.accruedToTreasury;\\n\\n            if (accruedToTreasury != 0) {\\n                reserve.accruedToTreasury = 0;\\n                uint256 normalizedIncome = reserve.getNormalizedIncome();\\n                uint256 amountToMint = accruedToTreasury.rayMul(\\n                    normalizedIncome\\n                );\\n                IOToken(reserve.xTokenAddress).mintToTreasury(\\n                    amountToMint,\\n                    normalizedIncome\\n                );\\n\\n                emit MintedToTreasury(assetAddress, amountToMint);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param asset The address of the underlying asset of the reserve\\n     **/\\n    function executeDropReserve(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        address asset\\n    ) external {\\n        DataTypes.ReserveData storage reserve = reservesData[asset];\\n        ValidationLogic.validateDropReserve(reservesList, reserve, asset);\\n        reservesList[reservesData[asset].id] = address(0);\\n        delete reservesData[asset];\\n    }\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param params Additional params needed for the calculation\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     **/\\n    function executeGetUserAccountData(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.CalculateUserAccountDataParams memory params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor,\\n            uint256 erc721HealthFactor\\n        )\\n    {\\n        (\\n            totalCollateralBase,\\n            ,\\n            totalDebtBase,\\n            ltv,\\n            currentLiquidationThreshold,\\n            ,\\n            ,\\n            healthFactor,\\n            erc721HealthFactor,\\n\\n        ) = GenericLogic.calculateUserAccountData(\\n            reservesData,\\n            reservesList,\\n            params\\n        );\\n\\n        availableBorrowsBase = GenericLogic.calculateAvailableBorrows(\\n            totalCollateralBase,\\n            totalDebtBase,\\n            ltv\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/ReserveLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {MathUtils} from \\\"../math/MathUtils.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n *\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using SafeCast for uint256;\\n    using GPv2SafeERC20 for IERC20;\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    // See `IPool` for descriptions\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @notice Returns the ongoing normalized income for the reserve.\\n     * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\\n     * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n     * @param reserve The reserve object\\n     * @return The normalized income, expressed in ray\\n     **/\\n    function getNormalizedIncome(DataTypes.ReserveData storage reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n        //solium-disable-next-line\\n        if (timestamp == block.timestamp) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return reserve.liquidityIndex;\\n        } else {\\n            return\\n                MathUtils\\n                    .calculateLinearInterest(\\n                        reserve.currentLiquidityRate,\\n                        timestamp\\n                    )\\n                    .rayMul(reserve.liquidityIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the ongoing normalized variable debt for the reserve.\\n     * @dev A value of 1e27 means there is no debt. As time passes, the debt is accrued\\n     * @dev A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n     * @param reserve The reserve object\\n     * @return The normalized variable debt, expressed in ray\\n     **/\\n    function getNormalizedDebt(DataTypes.ReserveData storage reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n        //solium-disable-next-line\\n        if (timestamp == block.timestamp) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return reserve.variableBorrowIndex;\\n        } else {\\n            return\\n                MathUtils\\n                    .calculateCompoundedInterest(\\n                        reserve.currentVariableBorrowRate,\\n                        timestamp\\n                    )\\n                    .rayMul(reserve.variableBorrowIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the liquidity cumulative index and the variable borrow index.\\n     * @param reserve The reserve object\\n     * @param reserveCache The caching layer for the reserve data\\n     **/\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.ReserveCache memory reserveCache\\n    ) internal {\\n        _updateIndexes(reserve, reserveCache);\\n        _accrueToTreasury(reserve, reserveCache);\\n    }\\n\\n    /**\\n     * @notice Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example\\n     * to accumulate the flashloan fee to the reserve, and spread it between all the suppliers.\\n     * @param reserve The reserve object\\n     * @param totalLiquidity The total liquidity available in the reserve\\n     * @param amount The amount to accumulate\\n     * @return The next liquidity index of the reserve\\n     **/\\n    function cumulateToLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 totalLiquidity,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        //next liquidity index is calculated this way: `((amount / totalLiquidity) + 1) * liquidityIndex`\\n        //division `amount / totalLiquidity` done in ray for precision\\n        uint256 result = (amount.wadToRay().rayDiv(totalLiquidity.wadToRay()) +\\n            WadRayMath.RAY).rayMul(reserve.liquidityIndex);\\n        reserve.liquidityIndex = result.toUint128();\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Initializes a reserve.\\n     * @param reserve The reserve object\\n     * @param xTokenAddress The address of the overlying atoken contract\\n     * @param stableDebtTokenAddress The address of the overlying stable debt token contract\\n     * @param variableDebtTokenAddress The address of the overlying variable debt token contract\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address xTokenAddress,\\n        DataTypes.AssetType assetType,\\n        address stableDebtTokenAddress,\\n        address variableDebtTokenAddress,\\n        address interestRateStrategyAddress\\n    ) internal {\\n        require(\\n            reserve.xTokenAddress == address(0),\\n            Errors.RESERVE_ALREADY_INITIALIZED\\n        );\\n\\n        reserve.liquidityIndex = uint128(WadRayMath.RAY);\\n        reserve.variableBorrowIndex = uint128(WadRayMath.RAY);\\n        reserve.xTokenAddress = xTokenAddress;\\n        reserve.assetType = assetType;\\n        reserve.stableDebtTokenAddress = stableDebtTokenAddress;\\n        reserve.variableDebtTokenAddress = variableDebtTokenAddress;\\n        reserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        uint256 nextLiquidityRate;\\n        uint256 nextStableRate;\\n        uint256 nextVariableRate;\\n        uint256 totalVariableDebt;\\n    }\\n\\n    /**\\n     * @notice Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate.\\n     * @param reserve The reserve reserve to be updated\\n     * @param reserveCache The caching layer for the reserve data\\n     * @param reserveAddress The address of the reserve to be updated\\n     * @param liquidityAdded The amount of liquidity added to the protocol (supply or repay) in the previous action\\n     * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n     **/\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.ReserveCache memory reserveCache,\\n        address reserveAddress,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken\\n    ) internal {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        vars.totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(\\n            reserveCache.nextVariableBorrowIndex\\n        );\\n\\n        (\\n            vars.nextLiquidityRate,\\n            vars.nextStableRate,\\n            vars.nextVariableRate\\n        ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                DataTypes.CalculateInterestRatesParams({\\n                    liquidityAdded: liquidityAdded,\\n                    liquidityTaken: liquidityTaken,\\n                    totalStableDebt: reserveCache.nextTotalStableDebt,\\n                    totalVariableDebt: vars.totalVariableDebt,\\n                    averageStableBorrowRate: reserveCache\\n                        .nextAvgStableBorrowRate,\\n                    reserveFactor: reserveCache.reserveFactor,\\n                    reserve: reserveAddress,\\n                    xToken: reserveCache.xTokenAddress\\n                })\\n            );\\n\\n        reserve.currentLiquidityRate = vars.nextLiquidityRate.toUint128();\\n        reserve.currentStableBorrowRate = vars.nextStableRate.toUint128();\\n        reserve.currentVariableBorrowRate = vars.nextVariableRate.toUint128();\\n\\n        emit ReserveDataUpdated(\\n            reserveAddress,\\n            vars.nextLiquidityRate,\\n            vars.nextStableRate,\\n            vars.nextVariableRate,\\n            reserveCache.nextLiquidityIndex,\\n            reserveCache.nextVariableBorrowIndex\\n        );\\n    }\\n\\n    struct AccrueToTreasuryLocalVars {\\n        uint256 prevTotalStableDebt;\\n        uint256 prevTotalVariableDebt;\\n        uint256 currTotalVariableDebt;\\n        uint256 cumulatedStableInterest;\\n        uint256 totalDebtAccrued;\\n        uint256 amountToMint;\\n    }\\n\\n    /**\\n     * @notice Mints part of the repaid interest to the reserve treasury as a function of the reserve factor for the\\n     * specific asset.\\n     * @param reserve The reserve to be updated\\n     * @param reserveCache The caching layer for the reserve data\\n     **/\\n    function _accrueToTreasury(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.ReserveCache memory reserveCache\\n    ) internal {\\n        AccrueToTreasuryLocalVars memory vars;\\n\\n        if (reserveCache.reserveFactor == 0) {\\n            return;\\n        }\\n\\n        //calculate the total variable debt at moment of the last interaction\\n        vars.prevTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\\n            reserveCache.currVariableBorrowIndex\\n        );\\n\\n        //calculate the new total variable debt after accumulation of the interest on the index\\n        vars.currTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\\n            reserveCache.nextVariableBorrowIndex\\n        );\\n\\n        //calculate the stable debt until the last timestamp update\\n        vars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\\n            reserveCache.currAvgStableBorrowRate,\\n            reserveCache.stableDebtLastUpdateTimestamp,\\n            reserveCache.reserveLastUpdateTimestamp\\n        );\\n\\n        vars.prevTotalStableDebt = reserveCache.currPrincipalStableDebt.rayMul(\\n            vars.cumulatedStableInterest\\n        );\\n\\n        //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n        vars.totalDebtAccrued =\\n            vars.currTotalVariableDebt +\\n            reserveCache.currTotalStableDebt -\\n            vars.prevTotalVariableDebt -\\n            vars.prevTotalStableDebt;\\n\\n        vars.amountToMint = vars.totalDebtAccrued.percentMul(\\n            reserveCache.reserveFactor\\n        );\\n\\n        if (vars.amountToMint != 0) {\\n            reserve.accruedToTreasury += vars\\n                .amountToMint\\n                .rayDiv(reserveCache.nextLiquidityIndex)\\n                .toUint128();\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the reserve indexes and the timestamp of the update.\\n     * @param reserve The reserve reserve to be updated\\n     * @param reserveCache The cache layer holding the cached protocol data\\n     **/\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.ReserveCache memory reserveCache\\n    ) internal {\\n        reserveCache.nextLiquidityIndex = reserveCache.currLiquidityIndex;\\n        reserveCache.nextVariableBorrowIndex = reserveCache\\n            .currVariableBorrowIndex;\\n\\n        //only cumulating if there is any income being produced\\n        if (reserveCache.currLiquidityRate != 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(\\n                    reserveCache.currLiquidityRate,\\n                    reserveCache.reserveLastUpdateTimestamp\\n                );\\n            reserveCache.nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                reserveCache.currLiquidityIndex\\n            );\\n            reserve.liquidityIndex = reserveCache\\n                .nextLiquidityIndex\\n                .toUint128();\\n\\n            //as the liquidity rate might come only from stable rate loans, we need to ensure\\n            //that there is actual variable debt before accumulating\\n            if (reserveCache.currScaledVariableDebt != 0) {\\n                uint256 cumulatedVariableBorrowInterest = MathUtils\\n                    .calculateCompoundedInterest(\\n                        reserveCache.currVariableBorrowRate,\\n                        reserveCache.reserveLastUpdateTimestamp\\n                    );\\n                reserveCache\\n                    .nextVariableBorrowIndex = cumulatedVariableBorrowInterest\\n                    .rayMul(reserveCache.currVariableBorrowIndex);\\n                reserve.variableBorrowIndex = reserveCache\\n                    .nextVariableBorrowIndex\\n                    .toUint128();\\n            }\\n        }\\n\\n        //solium-disable-next-line\\n        reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Creates a cache object to avoid repeated storage reads and external contract calls when updating state and\\n     * interest rates.\\n     * @param reserve The reserve object for which the cache will be filled\\n     * @return The cache object\\n     */\\n    function cache(DataTypes.ReserveData storage reserve)\\n        internal\\n        view\\n        returns (DataTypes.ReserveCache memory)\\n    {\\n        DataTypes.ReserveCache memory reserveCache;\\n\\n        reserveCache.reserveConfiguration = reserve.configuration;\\n        reserveCache.assetType = reserve.assetType;\\n        reserveCache.reserveFactor = reserveCache\\n            .reserveConfiguration\\n            .getReserveFactor();\\n        reserveCache.currLiquidityIndex = reserve.liquidityIndex;\\n        reserveCache.currVariableBorrowIndex = reserve.variableBorrowIndex;\\n        reserveCache.currLiquidityRate = reserve.currentLiquidityRate;\\n        reserveCache.currVariableBorrowRate = reserve.currentVariableBorrowRate;\\n\\n        reserveCache.xTokenAddress = reserve.xTokenAddress;\\n        reserveCache.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\\n        reserveCache.variableDebtTokenAddress = reserve\\n            .variableDebtTokenAddress;\\n\\n        reserveCache.reserveLastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n\\n        reserveCache.currScaledVariableDebt = reserveCache\\n            .nextScaledVariableDebt = IVariableDebtToken(\\n            reserveCache.variableDebtTokenAddress\\n        ).scaledTotalSupply();\\n\\n        (\\n            reserveCache.currPrincipalStableDebt,\\n            reserveCache.currTotalStableDebt,\\n            reserveCache.currAvgStableBorrowRate,\\n            reserveCache.stableDebtLastUpdateTimestamp\\n        ) = IStableDebtToken(reserveCache.stableDebtTokenAddress)\\n            .getSupplyData();\\n\\n        // by default the actions are considered as not affecting the debt balances.\\n        // if the action involves mint/burn of debt, the cache needs to be updated\\n        reserveCache.nextTotalStableDebt = reserveCache.currTotalStableDebt;\\n        reserveCache.nextAvgStableBorrowRate = reserveCache\\n            .currAvgStableBorrowRate;\\n\\n        return reserveCache;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/SupplyLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IERC721} from \\\"../../../dependencies/openzeppelin/contracts/IERC721.sol\\\";\\n\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {IOToken} from \\\"../../../interfaces/IOToken.sol\\\";\\nimport {INToken} from \\\"../../../interfaces/INToken.sol\\\";\\nimport {ICollaterizableERC721} from \\\"../../../interfaces/ICollaterizableERC721.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {ValidationLogic} from \\\"./ValidationLogic.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\n\\n/**\\n * @title SupplyLogic library\\n *\\n * @notice Implements the base logic for supply/withdraw\\n */\\nlibrary SupplyLogic {\\n    using ReserveLogic for DataTypes.ReserveCache;\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using GPv2SafeERC20 for IERC20;\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n\\n    // See `IPool` for descriptions\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n    event SupplyERC721(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        DataTypes.ERC721SupplyParams[] tokenData,\\n        uint16 indexed referralCode\\n    );\\n\\n    event WithdrawERC721(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256[] tokenIds\\n    );\\n\\n    /**\\n     * @notice Implements the supply feature. Through `supply()`, users supply assets to the Omni protocol.\\n     * @dev Emits the `Supply()` event.\\n     * @dev In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as\\n     * collateral.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n     * @param params The additional parameters needed to execute the supply function\\n     */\\n    function executeSupply(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ExecuteSupplyParams memory params\\n    ) external {\\n        DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        reserve.updateState(reserveCache);\\n\\n        ValidationLogic.validateSupply(\\n            reserveCache,\\n            params.amount,\\n            DataTypes.AssetType.ERC20\\n        );\\n\\n        reserve.updateInterestRates(\\n            reserveCache,\\n            params.asset,\\n            params.amount,\\n            0\\n        );\\n\\n        IERC20(params.asset).safeTransferFrom(\\n            msg.sender,\\n            reserveCache.xTokenAddress,\\n            params.amount\\n        );\\n\\n        bool isFirstSupply = IOToken(reserveCache.xTokenAddress).mint(\\n            msg.sender,\\n            params.onBehalfOf,\\n            params.amount,\\n            reserveCache.nextLiquidityIndex\\n        );\\n\\n        if (isFirstSupply) {\\n            userConfig.setUsingAsCollateral(reserve.id, true);\\n            emit ReserveUsedAsCollateralEnabled(\\n                params.asset,\\n                params.onBehalfOf\\n            );\\n        }\\n\\n        emit Supply(\\n            params.asset,\\n            msg.sender,\\n            params.onBehalfOf,\\n            params.amount,\\n            params.referralCode\\n        );\\n    }\\n\\n    function executeSupplyERC721(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ExecuteSupplyERC721Params memory params\\n    ) external {\\n        DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        reserve.updateState(reserveCache);\\n\\n        uint256 amount = params.tokenData.length;\\n\\n        ValidationLogic.validateSupply(\\n            reserveCache,\\n            amount,\\n            DataTypes.AssetType.ERC721\\n        );\\n\\n        // uint256 usedAsCollateral;\\n\\n        for (uint256 index = 0; index < amount; index++) {\\n            // if (params.tokenData[index].useAsCollateral) {\\n            //     usedAsCollateral++;\\n            // }\\n\\n            IERC721(params.asset).safeTransferFrom(\\n                msg.sender,\\n                reserveCache.xTokenAddress,\\n                params.tokenData[index].tokenId\\n            );\\n        }\\n\\n        bool isFirstSupply = INToken(reserveCache.xTokenAddress).mint(\\n            msg.sender,\\n            params.onBehalfOf,\\n            params.tokenData,\\n            reserveCache.nextLiquidityIndex\\n        );\\n        // TODO consider using (usedAsCollateral > 0) instead here to enable collateralization\\n        if (isFirstSupply) {\\n            userConfig.setUsingAsCollateral(reserve.id, true);\\n            emit ReserveUsedAsCollateralEnabled(\\n                params.asset,\\n                params.onBehalfOf\\n            );\\n        }\\n\\n        emit SupplyERC721(\\n            params.asset,\\n            msg.sender,\\n            params.onBehalfOf,\\n            params.tokenData,\\n            params.referralCode\\n        );\\n    }\\n\\n    /**\\n     * @notice Implements the withdraw feature. Through `withdraw()`, users redeem their xTokens for the underlying asset\\n     * previously supplied in the Omni protocol.\\n     * @dev Emits the `Withdraw()` event.\\n     * @dev If the user withdraws everything, `ReserveUsedAsCollateralDisabled()` is emitted.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n     * @param params The additional parameters needed to execute the withdraw function\\n     * @return The actual amount withdrawn\\n     */\\n    function executeWithdraw(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ExecuteWithdrawParams memory params\\n    ) external returns (uint256) {\\n        DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        reserve.updateState(reserveCache);\\n\\n        uint256 userBalance = IOToken(reserveCache.xTokenAddress)\\n            .scaledBalanceOf(msg.sender)\\n            .rayMul(reserveCache.nextLiquidityIndex);\\n\\n        uint256 amountToWithdraw = params.amount;\\n\\n        if (params.amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n\\n        ValidationLogic.validateWithdraw(\\n            reserveCache,\\n            amountToWithdraw,\\n            userBalance\\n        );\\n\\n        reserve.updateInterestRates(\\n            reserveCache,\\n            params.asset,\\n            0,\\n            amountToWithdraw\\n        );\\n\\n        IOToken(reserveCache.xTokenAddress).burn(\\n            msg.sender,\\n            params.to,\\n            amountToWithdraw,\\n            reserveCache.nextLiquidityIndex\\n        );\\n\\n        if (userConfig.isUsingAsCollateral(reserve.id)) {\\n            if (userConfig.isBorrowingAny()) {\\n                ValidationLogic.validateHFAndLtv(\\n                    reservesData,\\n                    reservesList,\\n                    userConfig,\\n                    params.asset,\\n                    msg.sender,\\n                    params.reservesCount,\\n                    params.oracle\\n                );\\n            }\\n\\n            if (amountToWithdraw == userBalance) {\\n                userConfig.setUsingAsCollateral(reserve.id, false);\\n                emit ReserveUsedAsCollateralDisabled(params.asset, msg.sender);\\n            }\\n        }\\n\\n        emit Withdraw(params.asset, msg.sender, params.to, amountToWithdraw);\\n\\n        return amountToWithdraw;\\n    }\\n\\n    function executeWithdrawERC721(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ExecuteWithdrawERC721Params memory params\\n    ) external returns (uint256) {\\n        DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        reserve.updateState(reserveCache);\\n        uint256 amountToWithdraw = params.tokenIds.length;\\n\\n        bool withdrwingAllCollateral = INToken(reserveCache.xTokenAddress).burn(\\n            msg.sender,\\n            params.to,\\n            params.tokenIds,\\n            reserveCache.nextLiquidityIndex\\n        );\\n\\n        ValidationLogic.validateWithdrawERC721(reserveCache);\\n\\n        if (userConfig.isUsingAsCollateral(reserve.id)) {\\n            if (userConfig.isBorrowingAny()) {\\n                ValidationLogic.validateHFAndLtv(\\n                    reservesData,\\n                    reservesList,\\n                    userConfig,\\n                    params.asset,\\n                    msg.sender,\\n                    params.reservesCount,\\n                    params.oracle\\n                );\\n            }\\n\\n            if (withdrwingAllCollateral) {\\n                userConfig.setUsingAsCollateral(reserve.id, false);\\n                emit ReserveUsedAsCollateralDisabled(params.asset, msg.sender);\\n            }\\n        }\\n\\n        emit WithdrawERC721(\\n            params.asset,\\n            msg.sender,\\n            params.to,\\n            params.tokenIds\\n        );\\n\\n        return amountToWithdraw;\\n    }\\n\\n    /**\\n     * @notice Validates a transfer of xTokens. The sender is subjected to health factor validation to avoid\\n     * collateralization constraints violation.\\n     * @dev Emits the `ReserveUsedAsCollateralEnabled()` event for the `to` account, if the asset is being activated as\\n     * collateral.\\n     * @dev In case the `from` user transfers everything, `ReserveUsedAsCollateralDisabled()` is emitted for `from`.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\\n     * @param params The additional parameters needed to execute the finalizeTransfer function\\n     */\\n    function executeFinalizeTransfer(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\\n        DataTypes.FinalizeTransferParams memory params\\n    ) external {\\n        DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n\\n        ValidationLogic.validateTransfer(reserve);\\n\\n        uint256 reserveId = reserve.id;\\n\\n        if (params.from != params.to && params.value != 0) {\\n            DataTypes.UserConfigurationMap storage fromConfig = usersConfig[\\n                params.from\\n            ];\\n\\n            bool usingAsCollateral;\\n            uint256 amount;\\n\\n            if (reserve.assetType == DataTypes.AssetType.ERC721) {\\n                usingAsCollateral = params.usedAsCollateral;\\n                amount = 1;\\n            } else {\\n                usingAsCollateral = fromConfig.isUsingAsCollateral(reserveId);\\n                amount = params.value;\\n            }\\n\\n            if (usingAsCollateral) {\\n                if (fromConfig.isBorrowingAny()) {\\n                    ValidationLogic.validateHFAndLtv(\\n                        reservesData,\\n                        reservesList,\\n                        usersConfig[params.from],\\n                        params.asset,\\n                        params.from,\\n                        params.reservesCount,\\n                        params.oracle\\n                    );\\n                }\\n                if (params.balanceFromBefore == amount) {\\n                    fromConfig.setUsingAsCollateral(reserveId, false);\\n                    emit ReserveUsedAsCollateralDisabled(\\n                        params.asset,\\n                        params.from\\n                    );\\n                }\\n            }\\n\\n            if (params.balanceToBefore == 0 && params.usedAsCollateral) {\\n                DataTypes.UserConfigurationMap storage toConfig = usersConfig[\\n                    params.to\\n                ];\\n\\n                toConfig.setUsingAsCollateral(reserveId, true);\\n                emit ReserveUsedAsCollateralEnabled(params.asset, params.to);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes the 'set as collateral' feature. A user can choose to activate or deactivate an asset as\\n     * collateral at any point in time. Deactivating an asset as collateral is subjected to the usual health factor\\n     * checks to ensure collateralization.\\n     * @dev Emits the `ReserveUsedAsCollateralEnabled()` event if the asset can be activated as collateral.\\n     * @dev In case the asset is being deactivated as collateral, `ReserveUsedAsCollateralDisabled()` is emitted.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The users configuration mapping that track the supplied/borrowed assets\\n     * @param asset The address of the asset being configured as collateral\\n     * @param useAsCollateral True if the user wants to set the asset as collateral, false otherwise\\n     * @param reservesCount The number of initialized reserves\\n     * @param priceOracle The address of the price oracle\\n     */\\n    function executeUseReserveAsCollateral(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        address asset,\\n        bool useAsCollateral,\\n        uint256 reservesCount,\\n        address priceOracle\\n    ) external {\\n        DataTypes.ReserveData storage reserve = reservesData[asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        uint256 userBalance;\\n\\n        if (reserveCache.assetType == DataTypes.AssetType.ERC20) {\\n            userBalance = IERC20(reserveCache.xTokenAddress).balanceOf(\\n                msg.sender\\n            );\\n        } else {\\n            userBalance = ICollaterizableERC721(reserveCache.xTokenAddress)\\n                .collaterizedBalanceOf(msg.sender);\\n        }\\n\\n        ValidationLogic.validateSetUseReserveAsCollateral(\\n            reserveCache,\\n            userBalance\\n        );\\n\\n        if (useAsCollateral == userConfig.isUsingAsCollateral(reserve.id))\\n            return;\\n\\n        if (useAsCollateral) {\\n            userConfig.setUsingAsCollateral(reserve.id, true);\\n            emit ReserveUsedAsCollateralEnabled(asset, msg.sender);\\n        } else {\\n            userConfig.setUsingAsCollateral(reserve.id, false);\\n            ValidationLogic.validateHFAndLtv(\\n                reservesData,\\n                reservesList,\\n                userConfig,\\n                asset,\\n                msg.sender,\\n                reservesCount,\\n                priceOracle\\n            );\\n\\n            emit ReserveUsedAsCollateralDisabled(asset, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes the 'set as collateral' feature. A user can choose to activate or deactivate an asset as\\n     * collateral at any point in time. Deactivating an asset as collateral is subjected to the usual health factor\\n     * checks to ensure collateralization.\\n     * @dev Emits the `ReserveUsedAsCollateralEnabled()` event if the asset can be activated as collateral.\\n     * @dev In case the asset is being deactivated as collateral, `ReserveUsedAsCollateralDisabled()` is emitted.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The users configuration mapping that track the supplied/borrowed assets\\n     * @param asset The address of the asset being configured as collateral\\n     * @param useAsCollateral True if the user wants to set the asset as collateral, false otherwise\\n     * @param reservesCount The number of initialized reserves\\n     * @param priceOracle The address of the price oracle\\n     */\\n    function executeUseERC721AsCollateral(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        address asset,\\n        uint256 tokenId,\\n        bool useAsCollateral,\\n        uint256 reservesCount,\\n        address priceOracle\\n    ) external {\\n        DataTypes.ReserveData storage reserve = reservesData[asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        (\\n            bool valid,\\n            address owner,\\n            uint256 collaterizedBalance\\n        ) = ICollaterizableERC721(reserveCache.xTokenAddress)\\n                .setIsUsedAsCollateral(tokenId, useAsCollateral);\\n\\n        if (valid) {\\n            ValidationLogic.validateSetUseERC721AsCollateral(\\n                reserveCache,\\n                msg.sender,\\n                owner\\n            );\\n\\n            if (useAsCollateral) {\\n                if (collaterizedBalance == 1) {\\n                    userConfig.setUsingAsCollateral(reserve.id, true);\\n                    emit ReserveUsedAsCollateralEnabled(asset, msg.sender);\\n                }\\n                // TODO emit event\\n            } else {\\n                if (collaterizedBalance == 0) {\\n                    userConfig.setUsingAsCollateral(reserve.id, false);\\n                    emit ReserveUsedAsCollateralDisabled(asset, msg.sender);\\n                }\\n                ValidationLogic.validateHFAndLtv(\\n                    reservesData,\\n                    reservesList,\\n                    userConfig,\\n                    asset,\\n                    msg.sender,\\n                    reservesCount,\\n                    priceOracle\\n                );\\n            }\\n        } else {\\n            return;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/BorrowLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IOToken} from \\\"../../../interfaces/IOToken.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {Helpers} from \\\"../helpers/Helpers.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ValidationLogic} from \\\"./ValidationLogic.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\n\\n/**\\n * @title BorrowLogic library\\n *\\n * @notice Implements the base logic for all the actions related to borrowing\\n */\\nlibrary BorrowLogic {\\n    using ReserveLogic for DataTypes.ReserveCache;\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using GPv2SafeERC20 for IERC20;\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using SafeCast for uint256;\\n\\n    // See `IPool` for descriptions\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useOTokens\\n    );\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @notice Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the\\n     * Omni protocol proportionally to their collateralization power. For isolated positions, it also increases the\\n     * isolated debt.\\n     * @dev  Emits the `Borrow()` event\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n     * @param params The additional parameters needed to execute the borrow function\\n     */\\n    function executeBorrow(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ExecuteBorrowParams memory params\\n    ) public {\\n        DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        reserve.updateState(reserveCache);\\n\\n        ValidationLogic.validateBorrow(\\n            reservesData,\\n            reservesList,\\n            DataTypes.ValidateBorrowParams({\\n                reserveCache: reserveCache,\\n                userConfig: userConfig,\\n                asset: params.asset,\\n                userAddress: params.onBehalfOf,\\n                amount: params.amount,\\n                interestRateMode: params.interestRateMode,\\n                maxStableLoanPercent: params.maxStableRateBorrowSizePercent,\\n                reservesCount: params.reservesCount,\\n                oracle: params.oracle,\\n                priceOracleSentinel: params.priceOracleSentinel,\\n                assetType: reserveCache.assetType\\n            })\\n        );\\n\\n        uint256 currentStableRate = 0;\\n        bool isFirstBorrowing = false;\\n\\n        if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n            currentStableRate = reserve.currentStableBorrowRate;\\n\\n            (\\n                isFirstBorrowing,\\n                reserveCache.nextTotalStableDebt,\\n                reserveCache.nextAvgStableBorrowRate\\n            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(\\n                params.user,\\n                params.onBehalfOf,\\n                params.amount,\\n                currentStableRate\\n            );\\n        } else {\\n            (\\n                isFirstBorrowing,\\n                reserveCache.nextScaledVariableDebt\\n            ) = IVariableDebtToken(reserveCache.variableDebtTokenAddress).mint(\\n                params.user,\\n                params.onBehalfOf,\\n                params.amount,\\n                reserveCache.nextVariableBorrowIndex\\n            );\\n        }\\n\\n        if (isFirstBorrowing) {\\n            userConfig.setBorrowing(reserve.id, true);\\n        }\\n\\n        reserve.updateInterestRates(\\n            reserveCache,\\n            params.asset,\\n            0,\\n            params.releaseUnderlying ? params.amount : 0\\n        );\\n\\n        if (params.releaseUnderlying) {\\n            IOToken(reserveCache.xTokenAddress).transferUnderlyingTo(\\n                params.user,\\n                params.amount\\n            );\\n        }\\n\\n        emit Borrow(\\n            params.asset,\\n            params.user,\\n            params.onBehalfOf,\\n            params.amount,\\n            params.interestRateMode,\\n            params.interestRateMode == DataTypes.InterestRateMode.STABLE\\n                ? currentStableRate\\n                : reserve.currentVariableBorrowRate,\\n            params.referralCode\\n        );\\n    }\\n\\n    /**\\n     * @notice Implements the repay feature. Repaying transfers the underlying back to the xToken and clears the\\n     * equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also\\n     * reduces the isolated debt.\\n     * @dev  Emits the `Repay()` event\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n     * @param params The additional parameters needed to execute the repay function\\n     * @return The actual amount being repaid\\n     */\\n    function executeRepay(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ExecuteRepayParams memory params\\n    ) external returns (uint256) {\\n        DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n        reserve.updateState(reserveCache);\\n\\n        (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\\n            params.onBehalfOf,\\n            reserveCache\\n        );\\n\\n        ValidationLogic.validateRepay(\\n            reserveCache,\\n            params.amount,\\n            params.interestRateMode,\\n            params.onBehalfOf,\\n            stableDebt,\\n            variableDebt\\n        );\\n\\n        uint256 paybackAmount = params.interestRateMode ==\\n            DataTypes.InterestRateMode.STABLE\\n            ? stableDebt\\n            : variableDebt;\\n\\n        // Allows a user to repay with xTokens without leaving dust from interest.\\n        if (params.useOTokens && params.amount == type(uint256).max) {\\n            params.amount = IOToken(reserveCache.xTokenAddress).balanceOf(\\n                msg.sender\\n            );\\n        }\\n\\n        if (params.amount < paybackAmount) {\\n            paybackAmount = params.amount;\\n        }\\n\\n        if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n            (\\n                reserveCache.nextTotalStableDebt,\\n                reserveCache.nextAvgStableBorrowRate\\n            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).burn(\\n                params.onBehalfOf,\\n                paybackAmount\\n            );\\n        } else {\\n            reserveCache.nextScaledVariableDebt = IVariableDebtToken(\\n                reserveCache.variableDebtTokenAddress\\n            ).burn(\\n                    params.onBehalfOf,\\n                    paybackAmount,\\n                    reserveCache.nextVariableBorrowIndex\\n                );\\n        }\\n\\n        reserve.updateInterestRates(\\n            reserveCache,\\n            params.asset,\\n            params.useOTokens ? 0 : paybackAmount,\\n            0\\n        );\\n\\n        if (stableDebt + variableDebt - paybackAmount == 0) {\\n            userConfig.setBorrowing(reserve.id, false);\\n        }\\n\\n        if (params.useOTokens) {\\n            IOToken(reserveCache.xTokenAddress).burn(\\n                msg.sender,\\n                reserveCache.xTokenAddress,\\n                paybackAmount,\\n                reserveCache.nextLiquidityIndex\\n            );\\n        } else {\\n            IERC20(params.asset).safeTransferFrom(\\n                msg.sender,\\n                reserveCache.xTokenAddress,\\n                paybackAmount\\n            );\\n            IOToken(reserveCache.xTokenAddress).handleRepayment(\\n                msg.sender,\\n                paybackAmount\\n            );\\n        }\\n\\n        emit Repay(\\n            params.asset,\\n            params.onBehalfOf,\\n            msg.sender,\\n            paybackAmount,\\n            params.useOTokens\\n        );\\n\\n        return paybackAmount;\\n    }\\n\\n    /**\\n     * @notice Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable\\n     * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.\\n     * @dev The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`\\n     * @dev Emits the `RebalanceStableBorrowRate()` event\\n     * @param reserve The state of the reserve of the asset being repaid\\n     * @param asset The asset of the position being rebalanced\\n     * @param user The user being rebalanced\\n     */\\n    function executeRebalanceStableBorrowRate(\\n        DataTypes.ReserveData storage reserve,\\n        address asset,\\n        address user\\n    ) external {\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n        reserve.updateState(reserveCache);\\n\\n        ValidationLogic.validateRebalanceStableBorrowRate(\\n            reserve,\\n            reserveCache,\\n            asset\\n        );\\n\\n        IStableDebtToken stableDebtToken = IStableDebtToken(\\n            reserveCache.stableDebtTokenAddress\\n        );\\n        uint256 stableDebt = IERC20(address(stableDebtToken)).balanceOf(user);\\n\\n        stableDebtToken.burn(user, stableDebt);\\n\\n        (\\n            ,\\n            reserveCache.nextTotalStableDebt,\\n            reserveCache.nextAvgStableBorrowRate\\n        ) = stableDebtToken.mint(\\n            user,\\n            user,\\n            stableDebt,\\n            reserve.currentStableBorrowRate\\n        );\\n\\n        reserve.updateInterestRates(reserveCache, asset, 0, 0);\\n\\n        emit RebalanceStableBorrowRate(asset, user);\\n    }\\n\\n    /**\\n     * @notice Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.\\n     * @dev Emits the `Swap()` event\\n     * @param reserve The of the reserve of the asset being repaid\\n     * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n     * @param asset The asset of the position being swapped\\n     * @param interestRateMode The current interest rate mode of the position being swapped\\n     */\\n    function executeSwapBorrowRateMode(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        address asset,\\n        DataTypes.InterestRateMode interestRateMode\\n    ) external {\\n        DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n        reserve.updateState(reserveCache);\\n\\n        (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\\n            msg.sender,\\n            reserveCache\\n        );\\n\\n        ValidationLogic.validateSwapRateMode(\\n            reserve,\\n            reserveCache,\\n            userConfig,\\n            stableDebt,\\n            variableDebt,\\n            interestRateMode\\n        );\\n\\n        if (interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n            (\\n                reserveCache.nextTotalStableDebt,\\n                reserveCache.nextAvgStableBorrowRate\\n            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).burn(\\n                msg.sender,\\n                stableDebt\\n            );\\n\\n            (, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(\\n                reserveCache.variableDebtTokenAddress\\n            ).mint(\\n                    msg.sender,\\n                    msg.sender,\\n                    stableDebt,\\n                    reserveCache.nextVariableBorrowIndex\\n                );\\n        } else {\\n            reserveCache.nextScaledVariableDebt = IVariableDebtToken(\\n                reserveCache.variableDebtTokenAddress\\n            ).burn(\\n                    msg.sender,\\n                    variableDebt,\\n                    reserveCache.nextVariableBorrowIndex\\n                );\\n\\n            (\\n                ,\\n                reserveCache.nextTotalStableDebt,\\n                reserveCache.nextAvgStableBorrowRate\\n            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(\\n                msg.sender,\\n                msg.sender,\\n                variableDebt,\\n                reserve.currentStableBorrowRate\\n            );\\n        }\\n\\n        reserve.updateInterestRates(reserveCache, asset, 0, 0);\\n\\n        emit SwapBorrowRateMode(asset, msg.sender, interestRateMode);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/LiquidationLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts//IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {PercentageMath} from \\\"../../libraries/math/PercentageMath.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {Helpers} from \\\"../../libraries/helpers/Helpers.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {SupplyLogic} from \\\"./SupplyLogic.sol\\\";\\nimport {ValidationLogic} from \\\"./ValidationLogic.sol\\\";\\nimport {GenericLogic} from \\\"./GenericLogic.sol\\\";\\nimport {UserConfiguration} from \\\"../../libraries/configuration/UserConfiguration.sol\\\";\\nimport {ReserveConfiguration} from \\\"../../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {IOToken} from \\\"../../../interfaces/IOToken.sol\\\";\\nimport {ICollaterizableERC721} from \\\"../../../interfaces/ICollaterizableERC721.sol\\\";\\nimport {INToken} from \\\"../../../interfaces/INToken.sol\\\";\\n\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\n\\n/**\\n * @title LiquidationLogic library\\n *\\n * @notice Implements actions involving management of collateral in the protocol, the main one being the liquidations\\n **/\\nlibrary LiquidationLogic {\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using ReserveLogic for DataTypes.ReserveCache;\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using GPv2SafeERC20 for IERC20;\\n\\n    // See `IPool` for descriptions\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed liquidationAsset,\\n        address indexed user,\\n        uint256 liquidationAmount,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveOToken\\n    );\\n\\n    event ERC721LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed liquidationAsset,\\n        address indexed user,\\n        uint256 liquidationAmount,\\n        uint256 liquidatedCollateralTokenId,\\n        address liquidator,\\n        bool receiveNToken\\n    );\\n\\n    /**\\n     * @dev Default percentage of borrower's debt to be repaid in a liquidation.\\n     * @dev Percentage applied when the users health factor is above `CLOSE_FACTOR_HF_THRESHOLD`\\n     * Expressed in bps, a value of 0.5e4 results in 50.00%\\n     */\\n    uint256 internal constant DEFAULT_LIQUIDATION_CLOSE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @dev Maximum percentage of borrower's debt to be repaid in a liquidation\\n     * @dev Percentage applied when the users health factor is below `CLOSE_FACTOR_HF_THRESHOLD`\\n     * Expressed in bps, a value of 1e4 results in 100.00%\\n     */\\n    uint256 public constant MAX_LIQUIDATION_CLOSE_FACTOR = 1e4;\\n\\n    /**\\n     * @dev This constant represents below which health factor value it is possible to liquidate\\n     * an amount of debt corresponding to `MAX_LIQUIDATION_CLOSE_FACTOR`.\\n     * A value of 0.95e18 results in 0.95\\n     */\\n    uint256 public constant CLOSE_FACTOR_HF_THRESHOLD = 0.95e18;\\n\\n    uint256 private constant BASE_CURRENCY_DECIMALS = 18;\\n\\n    struct LiquidationCallLocalVars {\\n        uint256 userCollateralBalance;\\n        uint256 userGlobalCollateralBalance;\\n        uint256 userVariableDebt;\\n        uint256 userGlobalTotalDebt;\\n        uint256 userTotalDebt;\\n        uint256 actualDebtToLiquidate;\\n        uint256 collateralDiscountedPrice;\\n        uint256 actualCollateralToLiquidate;\\n        uint256 liquidationBonus;\\n        uint256 healthFactor;\\n        uint256 liquidationProtocolFeeAmount;\\n        address collateralPriceSource;\\n        address debtPriceSource;\\n        address collateralXToken;\\n        bool isLiquidationAssetBorrowed;\\n        DataTypes.ReserveCache debtReserveCache;\\n        DataTypes.AssetType assetType;\\n    }\\n\\n    /**\\n     * @notice Function to liquidate a position if its Health Factor drops below 1. The caller (liquidator)\\n     * covers `liquidationAmount` amount of debt of the user getting liquidated, and receives\\n     * a proportional amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @dev Emits the `LiquidationCall()` event\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\\n     * @param params The additional parameters needed to execute the liquidation function\\n     **/\\n    function executeLiquidationCall(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\\n        DataTypes.ExecuteLiquidationCallParams memory params\\n    ) external {\\n        LiquidationCallLocalVars memory vars;\\n\\n        DataTypes.ReserveData storage collateralReserve = reservesData[\\n            params.collateralAsset\\n        ];\\n        DataTypes.ReserveData storage debtReserve = reservesData[\\n            params.liquidationAsset\\n        ];\\n        DataTypes.UserConfigurationMap storage userConfig = usersConfig[\\n            params.user\\n        ];\\n        vars.debtReserveCache = debtReserve.cache();\\n        debtReserve.updateState(vars.debtReserveCache);\\n\\n        (, , , , , , , vars.healthFactor, , ) = GenericLogic\\n            .calculateUserAccountData(\\n                reservesData,\\n                reservesList,\\n                DataTypes.CalculateUserAccountDataParams({\\n                    userConfig: userConfig,\\n                    reservesCount: params.reservesCount,\\n                    user: params.user,\\n                    oracle: params.priceOracle\\n                })\\n            );\\n\\n        (\\n            vars.userVariableDebt,\\n            vars.userTotalDebt,\\n            vars.actualDebtToLiquidate\\n        ) = _calculateDebt(vars.debtReserveCache, params, vars.healthFactor);\\n\\n        ValidationLogic.validateLiquidationCall(\\n            userConfig,\\n            collateralReserve,\\n            DataTypes.ValidateLiquidationCallParams({\\n                debtReserveCache: vars.debtReserveCache,\\n                totalDebt: vars.userTotalDebt,\\n                healthFactor: vars.healthFactor,\\n                priceOracleSentinel: params.priceOracleSentinel,\\n                assetType: collateralReserve.assetType\\n            })\\n        );\\n\\n        (\\n            vars.collateralXToken,\\n            vars.collateralPriceSource,\\n            vars.debtPriceSource,\\n            vars.liquidationBonus\\n        ) = _getConfigurationData(collateralReserve, params);\\n\\n        vars.userCollateralBalance = IOToken(vars.collateralXToken).balanceOf(\\n            params.user\\n        );\\n\\n        (\\n            vars.actualCollateralToLiquidate,\\n            vars.actualDebtToLiquidate,\\n            vars.liquidationProtocolFeeAmount\\n        ) = _calculateAvailableCollateralToLiquidate(\\n            collateralReserve,\\n            vars.debtReserveCache,\\n            vars.collateralPriceSource,\\n            vars.debtPriceSource,\\n            vars.actualDebtToLiquidate,\\n            vars.userCollateralBalance,\\n            vars.liquidationBonus,\\n            IPriceOracleGetter(params.priceOracle)\\n        );\\n\\n        if (vars.userTotalDebt == vars.actualDebtToLiquidate) {\\n            userConfig.setBorrowing(debtReserve.id, false);\\n        }\\n\\n        _burnDebtTokens(params, vars);\\n\\n        debtReserve.updateInterestRates(\\n            vars.debtReserveCache,\\n            params.liquidationAsset,\\n            vars.actualDebtToLiquidate,\\n            0\\n        );\\n\\n        if (params.receiveXToken) {\\n            _liquidateOTokens(\\n                reservesData,\\n                reservesList,\\n                usersConfig,\\n                collateralReserve,\\n                params,\\n                vars\\n            );\\n        } else {\\n            _burnCollateralOTokens(collateralReserve, params, vars);\\n        }\\n\\n        // Transfer fee to treasury if it is non-zero\\n        if (vars.liquidationProtocolFeeAmount != 0) {\\n            IOToken(vars.collateralXToken).transferOnLiquidation(\\n                params.user,\\n                IOToken(vars.collateralXToken).RESERVE_TREASURY_ADDRESS(),\\n                vars.liquidationProtocolFeeAmount\\n            );\\n        }\\n\\n        // If the collateral being liquidated is equal to the user balance,\\n        // we set the currency as not being used as collateral anymore\\n        if (vars.actualCollateralToLiquidate == vars.userCollateralBalance) {\\n            userConfig.setUsingAsCollateral(collateralReserve.id, false);\\n            emit ReserveUsedAsCollateralDisabled(\\n                params.collateralAsset,\\n                params.user\\n            );\\n        }\\n\\n        // Transfers the debt asset being repaid to the xToken, where the liquidity is kept\\n        IERC20(params.liquidationAsset).safeTransferFrom(\\n            msg.sender,\\n            vars.debtReserveCache.xTokenAddress,\\n            vars.actualDebtToLiquidate\\n        );\\n\\n        IOToken(vars.debtReserveCache.xTokenAddress).handleRepayment(\\n            msg.sender,\\n            vars.actualDebtToLiquidate\\n        );\\n\\n        emit LiquidationCall(\\n            params.collateralAsset,\\n            params.liquidationAsset,\\n            params.user,\\n            vars.actualDebtToLiquidate,\\n            vars.actualCollateralToLiquidate,\\n            msg.sender,\\n            params.receiveXToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Function to liquidate an ERC721 of a position if its Health Factor drops below 1. The caller (liquidator)\\n     * covers `liquidationAmount` amount of debt of the user getting liquidated, and receives\\n     * a proportional tokenId of the `collateralAsset` minus a bonus to cover market risk\\n     * @dev Emits the `ERC721LiquidationCall()` event\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\\n     * @param params The additional parameters needed to execute the liquidation function\\n     **/\\n    function executeERC721LiquidationCall(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\\n        DataTypes.ExecuteLiquidationCallParams memory params\\n    ) external {\\n        LiquidationCallLocalVars memory vars;\\n        DataTypes.ReserveData storage collateralReserve = reservesData[\\n            params.collateralAsset\\n        ];\\n        vars.assetType = collateralReserve.assetType;\\n        DataTypes.ReserveData storage liquidationAssetReserve = reservesData[\\n            params.liquidationAsset\\n        ];\\n        DataTypes.UserConfigurationMap storage userConfig = usersConfig[\\n            params.user\\n        ];\\n        uint16 liquidationAssetReserveId = liquidationAssetReserve.id;\\n        vars.debtReserveCache = liquidationAssetReserve.cache();\\n\\n        liquidationAssetReserve.updateState(vars.debtReserveCache);\\n        (\\n            vars.userGlobalCollateralBalance,\\n            ,\\n            vars.userGlobalTotalDebt,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            vars.healthFactor,\\n\\n        ) = GenericLogic.calculateUserAccountData(\\n            reservesData,\\n            reservesList,\\n            DataTypes.CalculateUserAccountDataParams({\\n                userConfig: userConfig,\\n                reservesCount: params.reservesCount,\\n                user: params.user,\\n                oracle: params.priceOracle\\n            })\\n        );\\n\\n        vars.isLiquidationAssetBorrowed = userConfig.isBorrowing(\\n            liquidationAssetReserveId\\n        );\\n\\n        if (vars.isLiquidationAssetBorrowed) {\\n            (\\n                vars.userVariableDebt,\\n                vars.userTotalDebt,\\n                vars.actualDebtToLiquidate\\n            ) = _calculateDebt(\\n                vars.debtReserveCache,\\n                params,\\n                vars.healthFactor\\n            );\\n        }\\n\\n        (\\n            vars.collateralXToken,\\n            vars.collateralPriceSource,\\n            vars.debtPriceSource,\\n            vars.liquidationBonus\\n        ) = _getConfigurationData(collateralReserve, params);\\n\\n        if (!vars.isLiquidationAssetBorrowed) {\\n            vars.liquidationBonus = PercentageMath.PERCENTAGE_FACTOR;\\n        }\\n\\n        vars.userCollateralBalance = ICollaterizableERC721(\\n            vars.collateralXToken\\n        ).collaterizedBalanceOf(params.user);\\n        (\\n            vars.collateralDiscountedPrice,\\n            vars.liquidationProtocolFeeAmount,\\n            vars.userGlobalTotalDebt,\\n\\n        ) = _calculateERC721LiquidationParameters(\\n            collateralReserve,\\n            vars.debtReserveCache,\\n            vars.collateralPriceSource,\\n            vars.debtPriceSource,\\n            vars.userGlobalTotalDebt,\\n            vars.actualDebtToLiquidate,\\n            vars.userCollateralBalance,\\n            vars.liquidationBonus,\\n            IPriceOracleGetter(params.priceOracle)\\n        );\\n\\n        ValidationLogic.validateERC721LiquidationCall(\\n            userConfig,\\n            collateralReserve,\\n            DataTypes.ValidateERC721LiquidationCallParams({\\n                debtReserveCache: vars.debtReserveCache,\\n                totalDebt: vars.userGlobalTotalDebt,\\n                collateralDiscountedPrice: vars.collateralDiscountedPrice,\\n                liquidationAmount: params.liquidationAmount,\\n                healthFactor: vars.healthFactor,\\n                priceOracleSentinel: params.priceOracleSentinel,\\n                tokenId: params.collateralTokenId,\\n                assetType: vars.assetType,\\n                xTokenAddress: vars.collateralXToken\\n            })\\n        );\\n\\n        uint256 debtCanBeCovered = vars.collateralDiscountedPrice -\\n            vars.liquidationProtocolFeeAmount;\\n\\n        if (debtCanBeCovered > vars.actualDebtToLiquidate) {\\n            if (vars.userGlobalTotalDebt > vars.actualDebtToLiquidate) {\\n                SupplyLogic.executeSupply(\\n                    reservesData,\\n                    reservesList,\\n                    userConfig,\\n                    DataTypes.ExecuteSupplyParams({\\n                        asset: params.liquidationAsset,\\n                        amount: debtCanBeCovered - vars.actualDebtToLiquidate,\\n                        onBehalfOf: params.user,\\n                        referralCode: 0\\n                    })\\n                );\\n\\n                if (\\n                    !userConfig.isUsingAsCollateral(liquidationAssetReserveId)\\n                ) {\\n                    userConfig.setUsingAsCollateral(\\n                        liquidationAssetReserveId,\\n                        true\\n                    );\\n                    emit ReserveUsedAsCollateralEnabled(\\n                        params.liquidationAsset,\\n                        params.user\\n                    );\\n                }\\n            } else {\\n                IERC20(params.liquidationAsset).safeTransferFrom(\\n                    msg.sender,\\n                    params.user,\\n                    debtCanBeCovered - vars.actualDebtToLiquidate\\n                );\\n            }\\n        } else {\\n            vars.actualDebtToLiquidate = debtCanBeCovered;\\n        }\\n\\n        if (vars.actualDebtToLiquidate != 0) {\\n            _burnDebtTokens(params, vars);\\n            liquidationAssetReserve.updateInterestRates(\\n                vars.debtReserveCache,\\n                params.liquidationAsset,\\n                vars.actualDebtToLiquidate,\\n                0\\n            );\\n\\n            IERC20(params.liquidationAsset).safeTransferFrom(\\n                msg.sender,\\n                vars.debtReserveCache.xTokenAddress,\\n                vars.actualDebtToLiquidate\\n            );\\n        }\\n\\n        if (params.receiveXToken) {\\n            _liquidateNTokens(\\n                reservesData,\\n                reservesList,\\n                usersConfig,\\n                collateralReserve,\\n                params,\\n                vars\\n            );\\n        } else {\\n            _burnCollateralNTokens(collateralReserve, params, vars);\\n        }\\n\\n        if (vars.userTotalDebt == vars.actualDebtToLiquidate) {\\n            userConfig.setBorrowing(liquidationAssetReserve.id, false);\\n        }\\n\\n        // Transfer fee to treasury if it is non-zero\\n        if (vars.liquidationProtocolFeeAmount != 0) {\\n            IERC20(params.liquidationAsset).safeTransferFrom(\\n                msg.sender,\\n                IOToken(vars.debtReserveCache.xTokenAddress)\\n                    .RESERVE_TREASURY_ADDRESS(),\\n                vars.liquidationProtocolFeeAmount\\n            );\\n        }\\n\\n        // If the collateral being liquidated is equal to the user balance,\\n        // we set the currency as not being used as collateral anymore\\n        if (vars.userCollateralBalance == 1) {\\n            userConfig.setUsingAsCollateral(collateralReserve.id, false);\\n            emit ReserveUsedAsCollateralDisabled(\\n                params.collateralAsset,\\n                params.user\\n            );\\n        }\\n\\n        emit ERC721LiquidationCall(\\n            params.collateralAsset,\\n            params.liquidationAsset,\\n            params.user,\\n            vars.actualDebtToLiquidate,\\n            params.collateralTokenId,\\n            msg.sender,\\n            params.receiveXToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Burns the collateral xTokens and transfers the underlying to the liquidator.\\n     * @dev   The function also updates the state and the interest rate of the collateral reserve.\\n     * @param collateralReserve The data of the collateral reserve\\n     * @param params The additional parameters needed to execute the liquidation function\\n     * @param vars The executeLiquidationCall() function local vars\\n     */\\n    function _burnCollateralOTokens(\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ExecuteLiquidationCallParams memory params,\\n        LiquidationCallLocalVars memory vars\\n    ) internal {\\n        DataTypes.ReserveCache memory collateralReserveCache = collateralReserve\\n            .cache();\\n        collateralReserve.updateState(collateralReserveCache);\\n        collateralReserve.updateInterestRates(\\n            collateralReserveCache,\\n            params.collateralAsset,\\n            0,\\n            vars.actualCollateralToLiquidate\\n        );\\n\\n        // Burn the equivalent amount of xToken, sending the underlying to the liquidator\\n        IOToken(vars.collateralXToken).burn(\\n            params.user,\\n            msg.sender,\\n            vars.actualCollateralToLiquidate,\\n            collateralReserveCache.nextLiquidityIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Burns the collateral xTokens and transfers the underlying to the liquidator.\\n     * @dev   The function also updates the state and the interest rate of the collateral reserve.\\n     * @param collateralReserve The data of the collateral reserve\\n     * @param params The additional parameters needed to execute the liquidation function\\n     * @param vars The executeLiquidationCall() function local vars\\n     */\\n    function _burnCollateralNTokens(\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ExecuteLiquidationCallParams memory params,\\n        LiquidationCallLocalVars memory vars\\n    ) internal {\\n        // Burn the equivalent amount of xToken, sending the underlying to the liquidator\\n        uint256[] memory tokenIds = new uint256[](1);\\n        tokenIds[0] = params.collateralTokenId;\\n        INToken(vars.collateralXToken).burn(\\n            params.user,\\n            msg.sender,\\n            tokenIds,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice Liquidates the user xTokens by transferring them to the liquidator.\\n     * @dev   The function also checks the state of the liquidator and activates the xToken as collateral\\n     *        as in standard transfers if the isolation mode constraints are respected.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\\n     * @param collateralReserve The data of the collateral reserve\\n     * @param params The additional parameters needed to execute the liquidation function\\n     * @param vars The executeLiquidationCall() function local vars\\n     */\\n    function _liquidateOTokens(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ExecuteLiquidationCallParams memory params,\\n        LiquidationCallLocalVars memory vars\\n    ) internal {\\n        uint256 liquidatorPreviousOTokenBalance = IERC20(vars.collateralXToken)\\n            .balanceOf(msg.sender);\\n        IOToken(vars.collateralXToken).transferOnLiquidation(\\n            params.user,\\n            msg.sender,\\n            vars.actualCollateralToLiquidate\\n        );\\n\\n        if (liquidatorPreviousOTokenBalance == 0) {\\n            DataTypes.UserConfigurationMap\\n                storage liquidatorConfig = usersConfig[msg.sender];\\n\\n            liquidatorConfig.setUsingAsCollateral(collateralReserve.id, true);\\n            emit ReserveUsedAsCollateralEnabled(\\n                params.collateralAsset,\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Liquidates the user xTokens by transferring them to the liquidator.\\n     * @dev   The function also checks the state of the liquidator and activates the xToken as collateral\\n     *        as in standard transfers if the isolation mode constraints are respected.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\\n     * @param collateralReserve The data of the collateral reserve\\n     * @param params The additional parameters needed to execute the liquidation function\\n     * @param vars The executeLiquidationCall() function local vars\\n     */\\n    function _liquidateNTokens(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ExecuteLiquidationCallParams memory params,\\n        LiquidationCallLocalVars memory vars\\n    ) internal {\\n        uint256 liquidatorPreviousNTokenBalance = ICollaterizableERC721(\\n            vars.collateralXToken\\n        ).collaterizedBalanceOf(msg.sender);\\n\\n        bool isTokenUsedAsCollateral = ICollaterizableERC721(\\n            vars.collateralXToken\\n        ).isUsedAsCollateral(params.collateralTokenId);\\n\\n        INToken(vars.collateralXToken).transferOnLiquidation(\\n            params.user,\\n            msg.sender,\\n            params.collateralTokenId\\n        );\\n\\n        if (liquidatorPreviousNTokenBalance == 0 && isTokenUsedAsCollateral) {\\n            DataTypes.UserConfigurationMap\\n                storage liquidatorConfig = usersConfig[msg.sender];\\n\\n            liquidatorConfig.setUsingAsCollateral(collateralReserve.id, true);\\n            emit ReserveUsedAsCollateralEnabled(\\n                params.collateralAsset,\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Burns the debt tokens of the user up to the amount being repaid by the liquidator.\\n     * @dev The function alters the `debtReserveCache` state in `vars` to update the debt related data.\\n     * @param params The additional parameters needed to execute the liquidation function\\n     * @param vars the executeLiquidationCall() function local vars\\n     */\\n    function _burnDebtTokens(\\n        DataTypes.ExecuteLiquidationCallParams memory params,\\n        LiquidationCallLocalVars memory vars\\n    ) internal {\\n        if (vars.userVariableDebt >= vars.actualDebtToLiquidate) {\\n            vars.debtReserveCache.nextScaledVariableDebt = IVariableDebtToken(\\n                vars.debtReserveCache.variableDebtTokenAddress\\n            ).burn(\\n                    params.user,\\n                    vars.actualDebtToLiquidate,\\n                    vars.debtReserveCache.nextVariableBorrowIndex\\n                );\\n        } else {\\n            // If the user doesn't have variable debt, no need to try to burn variable debt tokens\\n            if (vars.userVariableDebt != 0) {\\n                vars\\n                    .debtReserveCache\\n                    .nextScaledVariableDebt = IVariableDebtToken(\\n                    vars.debtReserveCache.variableDebtTokenAddress\\n                ).burn(\\n                        params.user,\\n                        vars.userVariableDebt,\\n                        vars.debtReserveCache.nextVariableBorrowIndex\\n                    );\\n            }\\n            (\\n                vars.debtReserveCache.nextTotalStableDebt,\\n                vars.debtReserveCache.nextAvgStableBorrowRate\\n            ) = IStableDebtToken(vars.debtReserveCache.stableDebtTokenAddress)\\n                .burn(\\n                    params.user,\\n                    vars.actualDebtToLiquidate - vars.userVariableDebt\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total debt of the user and the actual amount to liquidate depending on the health factor\\n     * and corresponding close factor. we are always using max closing factor in this version\\n     * @param debtReserveCache The reserve cache data object of the debt reserve\\n     * @param params The additional parameters needed to execute the liquidation function\\n     * @param healthFactor The health factor of the position\\n     * @return The variable debt of the user\\n     * @return The total debt of the user\\n     * @return The actual debt to liquidate as a function of the closeFactor\\n     */\\n    function _calculateDebt(\\n        DataTypes.ReserveCache memory debtReserveCache,\\n        DataTypes.ExecuteLiquidationCallParams memory params,\\n        uint256 healthFactor\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (uint256 userStableDebt, uint256 userVariableDebt) = Helpers\\n            .getUserCurrentDebt(params.user, debtReserveCache);\\n\\n        uint256 userTotalDebt = userStableDebt + userVariableDebt;\\n\\n        uint256 actualDebtToLiquidate = params.liquidationAmount > userTotalDebt\\n            ? userTotalDebt\\n            : params.liquidationAmount;\\n\\n        return (userVariableDebt, userTotalDebt, actualDebtToLiquidate);\\n    }\\n\\n    /**\\n     * @notice Returns the configuration data for the debt and the collateral reserves.\\n     * @param collateralReserve The data of the collateral reserve\\n     * @param params The additional parameters needed to execute the liquidation function\\n     * @return The collateral xToken\\n     * @return The address to use as price source for the collateral\\n     * @return The address to use as price source for the debt\\n     * @return The liquidation bonus to apply to the collateral\\n     */\\n    function _getConfigurationData(\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ExecuteLiquidationCallParams memory params\\n    )\\n        internal\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        address collateralXToken = collateralReserve.xTokenAddress;\\n        uint256 liquidationBonus = collateralReserve\\n            .configuration\\n            .getLiquidationBonus();\\n\\n        address collateralPriceSource = params.collateralAsset;\\n        address debtPriceSource = params.liquidationAsset;\\n\\n        return (\\n            collateralXToken,\\n            collateralPriceSource,\\n            debtPriceSource,\\n            liquidationBonus\\n        );\\n    }\\n\\n    struct AvailableCollateralToLiquidateLocalVars {\\n        uint256 collateralPrice;\\n        uint256 debtAssetPrice;\\n        uint256 globalDebtPrice;\\n        uint256 debtToCoverInBaseCurrency;\\n        uint256 maxCollateralToLiquidate;\\n        uint256 baseCollateral;\\n        uint256 bonusCollateral;\\n        uint256 debtAssetDecimals;\\n        uint256 collateralDecimals;\\n        uint256 collateralAssetUnit;\\n        uint256 debtAssetUnit;\\n        uint256 collateralAmount;\\n        uint256 collateralPriceInDebtAsset;\\n        uint256 collateralDiscountedPrice;\\n        uint256 actualLiquidationBonus;\\n        uint256 liquidationProtocolFeePercentage;\\n        uint256 liquidationProtocolFee;\\n    }\\n\\n    /**\\n     * @notice Calculates how much of a specific collateral can be liquidated, given\\n     * a certain amount of debt asset.\\n     * @dev This function needs to be called after all the checks to validate the liquidation have been performed,\\n     *   otherwise it might fail.\\n     * @param collateralReserve The data of the collateral reserve\\n     * @param debtReserveCache The cached data of the debt reserve\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param liquidationAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param liquidationAmount The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param userCollateralBalance The collateral balance for the specific `collateralAsset` of the user being liquidated\\n     * @param liquidationBonus The collateral bonus percentage to receive as result of the liquidation\\n     * @return The maximum amount that is possible to liquidate given all the liquidation constraints (user balance, close factor)\\n     * @return The amount to repay with the liquidation\\n     * @return The fee taken from the liquidation bonus amount to be paid to the protocol\\n     **/\\n    function _calculateAvailableCollateralToLiquidate(\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ReserveCache memory debtReserveCache,\\n        address collateralAsset,\\n        address liquidationAsset,\\n        uint256 liquidationAmount,\\n        uint256 userCollateralBalance,\\n        uint256 liquidationBonus,\\n        IPriceOracleGetter oracle\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        AvailableCollateralToLiquidateLocalVars memory vars;\\n\\n        vars.collateralPrice = oracle.getAssetPrice(collateralAsset);\\n        vars.debtAssetPrice = oracle.getAssetPrice(liquidationAsset);\\n\\n        vars.collateralDecimals = collateralReserve.configuration.getDecimals();\\n        vars.debtAssetDecimals = debtReserveCache\\n            .reserveConfiguration\\n            .getDecimals();\\n\\n        unchecked {\\n            vars.collateralAssetUnit = 10**vars.collateralDecimals;\\n            vars.debtAssetUnit = 10**vars.debtAssetDecimals;\\n        }\\n\\n        vars.liquidationProtocolFeePercentage = collateralReserve\\n            .configuration\\n            .getLiquidationProtocolFee();\\n\\n        // This is the base collateral to liquidate based on the given debt to cover\\n        vars.baseCollateral =\\n            (\\n                (vars.debtAssetPrice *\\n                    liquidationAmount *\\n                    vars.collateralAssetUnit)\\n            ) /\\n            (vars.collateralPrice * vars.debtAssetUnit);\\n\\n        vars.maxCollateralToLiquidate = vars.baseCollateral.percentMul(\\n            liquidationBonus\\n        );\\n\\n        if (vars.maxCollateralToLiquidate > userCollateralBalance) {\\n            vars.collateralAmount = userCollateralBalance;\\n            vars.collateralDiscountedPrice = ((vars.collateralPrice *\\n                vars.collateralAmount *\\n                vars.debtAssetUnit) /\\n                (vars.debtAssetPrice * vars.collateralAssetUnit)).percentDiv(\\n                    liquidationBonus\\n                );\\n        } else {\\n            vars.collateralAmount = vars.maxCollateralToLiquidate;\\n            vars.collateralDiscountedPrice = liquidationAmount;\\n        }\\n\\n        if (vars.liquidationProtocolFeePercentage != 0) {\\n            vars.bonusCollateral =\\n                vars.collateralAmount -\\n                vars.collateralAmount.percentDiv(liquidationBonus);\\n\\n            vars.liquidationProtocolFee = vars.bonusCollateral.percentMul(\\n                vars.liquidationProtocolFeePercentage\\n            );\\n\\n            return (\\n                vars.collateralAmount - vars.liquidationProtocolFee,\\n                vars.collateralDiscountedPrice,\\n                vars.liquidationProtocolFee\\n            );\\n        } else {\\n            return (vars.collateralAmount, vars.collateralDiscountedPrice, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates how much of a specific collateral can be liquidated, given\\n     * a certain amount of debt asset.\\n     * @dev This function needs to be called after all the checks to validate the liquidation have been performed,\\n     *   otherwise it might fail.\\n     * @param collateralReserve The data of the collateral reserve\\n     * @param debtReserveCache The cached data of the debt reserve\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param liquidationAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param liquidationAmount The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param userCollateralBalance The collateral balance for the specific `collateralAsset` of the user being liquidated\\n     * @param liquidationBonus The collateral bonus percentage to receive as result of the liquidation\\n     * @return The amount to repay with the liquidation\\n     * @return The fee taken from the liquidation bonus amount to be paid to the protocol\\n     **/\\n    function _calculateERC721LiquidationParameters(\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ReserveCache memory debtReserveCache,\\n        address collateralAsset,\\n        address liquidationAsset,\\n        uint256 userGlobalTotalDebt,\\n        uint256 liquidationAmount,\\n        uint256 userCollateralBalance,\\n        uint256 liquidationBonus,\\n        IPriceOracleGetter oracle\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        AvailableCollateralToLiquidateLocalVars memory vars;\\n\\n        vars.collateralPrice = oracle.getAssetPrice(collateralAsset);\\n        vars.debtAssetPrice = oracle.getAssetPrice(liquidationAsset);\\n\\n        vars.collateralDecimals = collateralReserve.configuration.getDecimals();\\n        vars.debtAssetDecimals = debtReserveCache\\n            .reserveConfiguration\\n            .getDecimals();\\n\\n        unchecked {\\n            vars.collateralAssetUnit = 10**vars.collateralDecimals;\\n            vars.debtAssetUnit = 10**vars.debtAssetDecimals;\\n        }\\n\\n        vars.liquidationProtocolFeePercentage = collateralReserve\\n            .configuration\\n            .getLiquidationProtocolFee();\\n\\n        vars.collateralPriceInDebtAsset = ((vars.collateralPrice *\\n            vars.debtAssetUnit) /\\n            (vars.debtAssetPrice * vars.collateralAssetUnit));\\n\\n        vars.globalDebtPrice =\\n            (userGlobalTotalDebt * vars.debtAssetUnit) /\\n            vars.debtAssetPrice;\\n\\n        vars.debtToCoverInBaseCurrency =\\n            (liquidationAmount * vars.debtAssetPrice) /\\n            vars.debtAssetUnit;\\n\\n        vars.collateralDiscountedPrice = vars\\n            .collateralPriceInDebtAsset\\n            .percentDiv(liquidationBonus);\\n\\n        if (vars.liquidationProtocolFeePercentage != 0) {\\n            vars.bonusCollateral =\\n                vars.collateralPriceInDebtAsset -\\n                vars.collateralDiscountedPrice;\\n\\n            vars.liquidationProtocolFee = vars.bonusCollateral.percentMul(\\n                vars.liquidationProtocolFeePercentage\\n            );\\n\\n            return (\\n                vars.collateralDiscountedPrice + vars.liquidationProtocolFee,\\n                vars.liquidationProtocolFee,\\n                vars.globalDebtPrice,\\n                vars.debtToCoverInBaseCurrency\\n            );\\n        } else {\\n            return (\\n                vars.collateralDiscountedPrice,\\n                0,\\n                vars.globalDebtPrice,\\n                vars.debtToCoverInBaseCurrency\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    enum AssetType {\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        // the asset type of the reserve (uint8)\\n        AssetType assetType;\\n        //xToken address\\n        address xTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct ERC721SupplyParams {\\n        uint256 tokenId;\\n        bool useAsCollateral;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        AssetType assetType;\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address xTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    // struct ExecuteLiquidationCallParams {\\n    //     uint256 reservesCount;\\n    //     uint256 debtToCover;\\n    //     address collateralAsset;\\n    //     address debtAsset;\\n    //     address user;\\n    //     bool receiveOToken;\\n    //     address priceOracle;\\n    //     address priceOracleSentinel;\\n    // }\\n\\n    // struct ExecuteERC721LiquidationCallParams {\\n    //     uint256 reservesCount;\\n    //     uint256 liquidationAmount;\\n    //     uint256 collateralTokenId;\\n    //     address collateralAsset;\\n    //     address liquidationAsset;\\n    //     address user;\\n    //     bool receiveNToken;\\n    //     address priceOracle;\\n    //     address priceOracleSentinel;\\n    // }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 liquidationAmount;\\n        uint256 collateralTokenId;\\n        address collateralAsset;\\n        address liquidationAsset;\\n        address user;\\n        bool receiveXToken;\\n        address priceOracle;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteSupplyERC721Params {\\n        address asset;\\n        DataTypes.ERC721SupplyParams[] tokenData;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useOTokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n    }\\n\\n    struct ExecuteWithdrawERC721Params {\\n        address asset;\\n        uint256[] tokenIds;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        bool usedAsCollateral;\\n        uint256 value;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        address priceOracleSentinel;\\n        AssetType assetType;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n        AssetType assetType;\\n    }\\n\\n    struct ValidateERC721LiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        uint256 tokenId;\\n        uint256 collateralDiscountedPrice;\\n        uint256 liquidationAmount;\\n        address priceOracleSentinel;\\n        address xTokenAddress;\\n        AssetType assetType;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address xToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        AssetType assetType;\\n        address xTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n\\n    struct ExecuteFlashClaimParams {\\n        address receiverAddress;\\n        address nftAsset;\\n        uint256[] nftTokenIds;\\n        bytes params;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20WithPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IERC20WithPermit\\n *\\n * @notice Interface for the permit function (EIP-2612)\\n **/\\ninterface IERC20WithPermit is IERC20 {\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPoolAddressesProvider\\n *\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Omni market to which this contract points to.\\n     * @return The market id\\n     **/\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Omni markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\\n        external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     **/\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     **/\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     **/\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     **/\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     **/\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     **/\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     **/\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n *\\n * @notice Defines the basic interface for an Omni Pool.\\n **/\\ninterface IPool {\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the xTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     **/\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    event SupplyERC721(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        DataTypes.ERC721SupplyParams[] tokenData,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of xTokens\\n     * @param to The address that will receive the underlying asset\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on withdrawERC721()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of xTokens\\n     * @param to The address that will receive the underlying asset\\n     * @param tokenIds The tokenIds to be withdrawn\\n     **/\\n    event WithdrawERC721(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256[] tokenIds\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useOTokens True if the repayment is done using xTokens, `false` if done with underlying asset directly\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useOTokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveOToken True if the liquidators wants to receive the collateral xTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveOToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted xTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     **/\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @dev Emitted on flashClaim\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash claim\\n     * @param nftAsset address of the underlying asset of NFT\\n     * @param tokenId The token id of the asset being flash borrowed\\n     **/\\n    event FlashClaim(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed nftAsset,\\n        uint256 tokenId\\n    );\\n\\n    /**\\n     * @dev Allows smart contracts to access the tokens within one transaction, as long as the tokens taken is returned.\\n     *\\n     * Requirements:\\n     *  - `nftTokenIds` must exist.\\n     *\\n     * @param receiverAddress The address of the contract receiving the tokens, implementing the IFlashClaimReceiver interface\\n     * @param nftAsset address of the underlying asset of NFT\\n     * @param nftTokenIds token ids of the underlying asset\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     */\\n    function flashClaim(\\n        address receiverAddress,\\n        address nftAsset,\\n        uint256[] calldata nftTokenIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying xTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the xTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of xTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supplies multiple `tokenIds` of underlying ERC721 asset into the reserve, receiving in return overlying nTokens.\\n     * - E.g. User supplies 2 BAYC and gets in return 2 nBAYC\\n     * @param asset The address of the underlying asset to supply\\n     * @param tokenData The list of tokenIds and their colateral configs to be supplied\\n     * @param onBehalfOf The address that will receive the xTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of xTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supplyERC721(\\n        address asset,\\n        DataTypes.ERC721SupplyParams[] calldata tokenData,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the xTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of xTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     **/\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent xTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole xToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws multiple `tokenIds` of underlying ERC721  asset from the reserve, burning the equivalent nTokens owned\\n     * E.g. User has 2 nBAYC, calls withdraw() and receives 2 BAYC, burning the 2 nBAYC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param tokenIds The underlying tokenIds to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole xToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdrawERC721(\\n        address asset,\\n        uint256[] calldata tokenIds,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     **/\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve xTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual xToken dust balance, if the user xToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     **/\\n    function repayWithOTokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\\n        external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied ERC721 asset with a tokenID as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param tokenId the id of the supplied ERC721 token\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     **/\\n    function setUserUseERC721AsCollateral(\\n        address asset,\\n        uint256 tokenId,\\n        bool useAsCollateral\\n    ) external virtual;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveOToken True if the liquidators wants to receive the collateral xTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveOToken\\n    ) external;\\n\\n    function liquidationERC721(\\n        address collateralAsset,\\n        address liquidationAsset,\\n        address user,\\n        uint256 collateralTokenId,\\n        uint256 liquidationAmount,\\n        bool receiveNToken\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor,\\n            uint256 erc721HealthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an xToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param xTokenAddress The address of the xToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function initReserve(\\n        address asset,\\n        DataTypes.AssetType assetType,\\n        address xTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     **/\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     **/\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an xToken transfer\\n     * @dev Only callable by the overlying xToken of the `asset`\\n     * @param asset The address of the underlying asset of the xToken\\n     * @param from The user from which the xTokens are transferred\\n     * @param to The user receiving the xTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The xToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The xToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        bool usedAsCollateral,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     **/\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     **/\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     **/\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of xTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     **/\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IACLManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IACLManager\\n *\\n * @notice Defines the basic interface for the ACL Manager\\n **/\\ninterface IACLManager {\\n    /**\\n     * @notice Returns the contract address of the PoolAddressesProvider\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns the identifier of the PoolAdmin role\\n     * @return The id of the PoolAdmin role\\n     */\\n    function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the EmergencyAdmin role\\n     * @return The id of the EmergencyAdmin role\\n     */\\n    function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the RiskAdmin role\\n     * @return The id of the RiskAdmin role\\n     */\\n    function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the FlashBorrower role\\n     * @return The id of the FlashBorrower role\\n     */\\n    function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the Bridge role\\n     * @return The id of the Bridge role\\n     */\\n    function BRIDGE_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the AssetListingAdmin role\\n     * @return The id of the AssetListingAdmin role\\n     */\\n    function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    /**\\n     * @notice Adds a new admin as PoolAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addPoolAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as PoolAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removePoolAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is PoolAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is PoolAdmin, false otherwise\\n     */\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as EmergencyAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addEmergencyAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as EmergencyAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeEmergencyAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is EmergencyAdmin, false otherwise\\n     */\\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as RiskAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addRiskAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as RiskAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeRiskAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is RiskAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is RiskAdmin, false otherwise\\n     */\\n    function isRiskAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new address as FlashBorrower\\n     * @param borrower The address of the new FlashBorrower\\n     */\\n    function addFlashBorrower(address borrower) external;\\n\\n    /**\\n     * @notice Removes an admin as FlashBorrower\\n     * @param borrower The address of the FlashBorrower to remove\\n     */\\n    function removeFlashBorrower(address borrower) external;\\n\\n    /**\\n     * @notice Returns true if the address is FlashBorrower, false otherwise\\n     * @param borrower The address to check\\n     * @return True if the given address is FlashBorrower, false otherwise\\n     */\\n    function isFlashBorrower(address borrower) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new address as Bridge\\n     * @param bridge The address of the new Bridge\\n     */\\n    function addBridge(address bridge) external;\\n\\n    /**\\n     * @notice Removes an address as Bridge\\n     * @param bridge The address of the bridge to remove\\n     */\\n    function removeBridge(address bridge) external;\\n\\n    /**\\n     * @notice Returns true if the address is Bridge, false otherwise\\n     * @param bridge The address to check\\n     * @return True if the given address is Bridge, false otherwise\\n     */\\n    function isBridge(address bridge) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as AssetListingAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addAssetListingAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as AssetListingAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeAssetListingAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is AssetListingAdmin, false otherwise\\n     */\\n    function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/pool/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {UserConfiguration} from \\\"../libraries/configuration/UserConfiguration.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title PoolStorage\\n *\\n * @notice Contract used as storage of the Pool contract.\\n * @dev It defines the storage layout of the Pool contract.\\n */\\ncontract PoolStorage {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n    // Map of reserves and their data (underlyingAssetOfReserve => reserveData)\\n    mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n    // Map of users address and their configuration data (userAddress => userConfiguration)\\n    mapping(address => DataTypes.UserConfigurationMap) internal _usersConfig;\\n\\n    // List of reserves as a map (reserveId => reserve).\\n    // It is structured as a mapping for gas savings reasons, using the reserve id as index\\n    mapping(uint256 => address) internal _reservesList;\\n\\n    // Available liquidity that can be borrowed at once at stable rate, expressed in bps\\n    uint64 internal _maxStableRateBorrowSizePercent;\\n\\n    // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list\\n    uint16 internal _reservesCount;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/FlashClaimLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC721} from \\\"../../../dependencies/openzeppelin/contracts/IERC721.sol\\\";\\nimport {IFlashClaimReceiver} from \\\"../../../interfaces/IFlashClaimReceiver.sol\\\";\\nimport {INToken} from \\\"../../../interfaces/INToken.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {ValidationLogic} from \\\"./ValidationLogic.sol\\\";\\n\\nlibrary FlashClaimLogic {\\n    // See `IPool` for descriptions\\n    event FlashClaim(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed nftAsset,\\n        uint256 tokenId\\n    );\\n\\n    function executeFlashClaim(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        DataTypes.ExecuteFlashClaimParams memory params\\n    ) external {\\n        DataTypes.ReserveData storage reserve = reservesData[params.nftAsset];\\n        ValidationLogic.validateFlashClaim(reserve, params);\\n\\n        uint256 i;\\n        // step 1: moving underlying asset forward to receiver contract\\n        for (i = 0; i < params.nftTokenIds.length; i++) {\\n            INToken(reserve.xTokenAddress).transferUnderlyingTo(\\n                params.receiverAddress,\\n                params.nftTokenIds[i]\\n            );\\n        }\\n\\n        // step 2: execute receiver contract, doing something like airdrop\\n        require(\\n            IFlashClaimReceiver(params.receiverAddress).executeOperation(\\n                params.nftAsset,\\n                params.nftTokenIds,\\n                params.params\\n            ),\\n            Errors.INVALID_FLASH_CLAIM_RECEIVER\\n        );\\n\\n        // step 3: moving underlying asset backward from receiver contract\\n        for (i = 0; i < params.nftTokenIds.length; i++) {\\n            IERC721(params.nftAsset).safeTransferFrom(\\n                params.receiverAddress,\\n                reserve.xTokenAddress,\\n                params.nftTokenIds[i]\\n            );\\n\\n            emit FlashClaim(\\n                params.receiverAddress,\\n                msg.sender,\\n                params.nftAsset,\\n                params.nftTokenIds[i]\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from '../../openzeppelin/contracts/IERC20.sol';\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n  /// also when the token returns `false`.\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    bytes4 selector_ = token.transfer.selector;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let freeMemoryPointer := mload(0x40)\\n      mstore(freeMemoryPointer, selector_)\\n      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 36), value)\\n\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    require(getLastTransferResult(token), 'GPv2: failed transfer');\\n  }\\n\\n  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n  /// reverts also when the token returns `false`.\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    bytes4 selector_ = token.transferFrom.selector;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let freeMemoryPointer := mload(0x40)\\n      mstore(freeMemoryPointer, selector_)\\n      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 68), value)\\n\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    require(getLastTransferResult(token), 'GPv2: failed transferFrom');\\n  }\\n\\n  /// @dev Verifies that the last return was a successful `transfer*` call.\\n  /// This is done by checking that the return data is either empty, or\\n  /// is a valid ABI encoded boolean.\\n  function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n    // NOTE: Inspecting previous return data requires assembly. Note that\\n    // we write the return data to memory 0 in the case where the return\\n    // data size is 32, this is OK since the first 64 bytes of memory are\\n    // reserved by Solidy as a scratch space that can be used within\\n    // assembly blocks.\\n    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      /// @dev Revert with an ABI encoded Solidity error with a message\\n      /// that fits into 32-bytes.\\n      ///\\n      /// An ABI encoded Solidity error has the following memory layout:\\n      ///\\n      /// ------------+----------------------------------\\n      ///  byte range | value\\n      /// ------------+----------------------------------\\n      ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n      ///  0x04..0x24 |      string offset (always 0x20)\\n      ///  0x24..0x44 |                    string length\\n      ///  0x44..0x64 | string value, padded to 32-bytes\\n      function revertWithMessage(length, message) {\\n        mstore(0x00, '\\\\x08\\\\xc3\\\\x79\\\\xa0')\\n        mstore(0x04, 0x20)\\n        mstore(0x24, length)\\n        mstore(0x44, message)\\n        revert(0x00, 0x64)\\n      }\\n\\n      switch returndatasize()\\n      // Non-standard ERC20 transfer without return.\\n      case 0 {\\n        // NOTE: When the return data size is 0, verify that there\\n        // is code at the address. This is done in order to maintain\\n        // compatibility with Solidity calling conventions.\\n        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n        if iszero(extcodesize(token)) {\\n          revertWithMessage(20, 'GPv2: not a contract')\\n        }\\n\\n        success := 1\\n      }\\n      // Standard ERC20 transfer returning boolean success value.\\n      case 32 {\\n        returndatacopy(0, 0, returndatasize())\\n\\n        // NOTE: For ABI encoding v1, any non-zero value is accepted\\n        // as `true` for a boolean. In order to stay compatible with\\n        // OpenZeppelin's `SafeERC20` library which is known to work\\n        // with the existing ERC20 implementation we care about,\\n        // make sure we return success for any non-zero return value\\n        // from the `transfer*` call.\\n        success := iszero(iszero(mload(0)))\\n      }\\n      default {\\n        revertWithMessage(31, 'GPv2: malformed transfer result')\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableOToken} from \\\"./IInitializableOToken.sol\\\";\\n\\n/**\\n * @title IOToken\\n *\\n * @notice Defines the basic interface for an OToken.\\n **/\\ninterface IOToken is IERC20, IScaledBalanceToken, IInitializableOToken {\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The amount being transferred\\n     * @param index The next liquidity index of the reserve\\n     **/\\n    event BalanceTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Mints `amount` xTokens to `user`\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted xTokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address caller,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Burns xTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @dev In some instances, the mint event could be emitted from a burn transaction\\n     * if the amount to burn is less than the interest that the user accrued\\n     * @param from The address from which the xTokens will be burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The next liquidity index of the reserve\\n     **/\\n    function burn(\\n        address from,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @notice Mints xTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @notice Transfers xTokens in the event of a borrow being liquidated, in case the liquidators reclaims the xToken\\n     * @param from The address getting liquidated, current owner of the xTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     **/\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the underlying asset to `target`.\\n     * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n     * @param user The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     **/\\n    function transferUnderlyingTo(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Handles the underlying received by the xToken after the transfer has been completed.\\n     * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n     * transfer is concluded. However in the future there may be xTokens that allow for example to stake the underlying\\n     * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n     * @param user The user executing the repayment\\n     * @param amount The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of this xToken (E.g. WETH for aWETH)\\n     * @return The address of the underlying asset\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the Omni treasury, receiving the fees on this xToken.\\n     * @return Address of the Omni treasury\\n     **/\\n    function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Get the domain separator for the token\\n     * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n     * @return The domain separator of the token at current chain\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the nonce for owner.\\n     * @param owner The address of the owner\\n     * @return The nonce of the owner\\n     **/\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title WadRayMath library\\n *\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/ValidationLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Address} from \\\"../../../dependencies/openzeppelin/contracts/Address.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\nimport {IScaledBalanceToken} from \\\"../../../interfaces/IScaledBalanceToken.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\nimport {IOToken} from \\\"../../../interfaces/IOToken.sol\\\";\\nimport {ICollaterizableERC721} from \\\"../../../interfaces/ICollaterizableERC721.sol\\\";\\nimport {INToken} from \\\"../../../interfaces/INToken.sol\\\";\\nimport {IPriceOracleSentinel} from \\\"../../../interfaces/IPriceOracleSentinel.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {GenericLogic} from \\\"./GenericLogic.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\nimport {INToken} from \\\"../../../interfaces/INToken.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n *\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using SafeCast for uint256;\\n    using GPv2SafeERC20 for IERC20;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n    using Address for address;\\n\\n    // Factor to apply to \\\"only-variable-debt\\\" liquidity rate to get threshold for rebalancing, expressed in bps\\n    // A value of 0.9e4 results in 90%\\n    uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 0.9e4;\\n\\n    // Minimum health factor allowed under any circumstance\\n    // A value of 0.95e18 results in 0.95\\n    uint256 public constant MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD =\\n        0.95e18;\\n\\n    /**\\n     * @dev Minimum health factor to consider a user position healthy\\n     * A value of 1e18 results in 1\\n     */\\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;\\n\\n    /**\\n     * @notice Validates a supply action.\\n     * @param reserveCache The cached data of the reserve\\n     * @param amount The amount to be supplied\\n     */\\n    function validateSupply(\\n        DataTypes.ReserveCache memory reserveCache,\\n        uint256 amount,\\n        DataTypes.AssetType assetType\\n    ) internal view {\\n        require(amount != 0, Errors.INVALID_AMOUNT);\\n        require(reserveCache.assetType == assetType, Errors.INVALID_ASSET_TYPE);\\n\\n        (bool isActive, bool isFrozen, , , bool isPaused) = reserveCache\\n            .reserveConfiguration\\n            .getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n        require(!isFrozen, Errors.RESERVE_FROZEN);\\n\\n        uint256 supplyCap = reserveCache.reserveConfiguration.getSupplyCap();\\n\\n        if (assetType == DataTypes.AssetType.ERC20) {\\n            require(\\n                supplyCap == 0 ||\\n                    (IOToken(reserveCache.xTokenAddress)\\n                        .scaledTotalSupply()\\n                        .rayMul(reserveCache.nextLiquidityIndex) + amount) <=\\n                    supplyCap *\\n                        (10**reserveCache.reserveConfiguration.getDecimals()),\\n                Errors.SUPPLY_CAP_EXCEEDED\\n            );\\n        } else if (assetType == DataTypes.AssetType.ERC721) {\\n            require(\\n                supplyCap == 0 ||\\n                    (INToken(reserveCache.xTokenAddress).totalSupply() +\\n                        amount <=\\n                        supplyCap),\\n                Errors.SUPPLY_CAP_EXCEEDED\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a withdraw action.\\n     * @param reserveCache The cached data of the reserve\\n     * @param amount The amount to be withdrawn\\n     * @param userBalance The balance of the user\\n     */\\n    function validateWithdraw(\\n        DataTypes.ReserveCache memory reserveCache,\\n        uint256 amount,\\n        uint256 userBalance\\n    ) internal pure {\\n        require(amount != 0, Errors.INVALID_AMOUNT);\\n        require(\\n            reserveCache.assetType == DataTypes.AssetType.ERC20,\\n            Errors.INVALID_ASSET_TYPE\\n        );\\n\\n        require(\\n            amount <= userBalance,\\n            Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE\\n        );\\n\\n        (bool isActive, , , , bool isPaused) = reserveCache\\n            .reserveConfiguration\\n            .getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n    }\\n\\n    function validateWithdrawERC721(DataTypes.ReserveCache memory reserveCache)\\n        internal\\n        pure\\n    {\\n        require(\\n            reserveCache.assetType == DataTypes.AssetType.ERC721,\\n            Errors.INVALID_ASSET_TYPE\\n        );\\n        (bool isActive, , , , bool isPaused) = reserveCache\\n            .reserveConfiguration\\n            .getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n    }\\n\\n    struct ValidateBorrowLocalVars {\\n        uint256 currentLtv;\\n        uint256 collateralNeededInBaseCurrency;\\n        uint256 userCollateralInBaseCurrency;\\n        uint256 userDebtInBaseCurrency;\\n        uint256 availableLiquidity;\\n        uint256 healthFactor;\\n        uint256 totalDebt;\\n        uint256 totalSupplyVariableDebt;\\n        uint256 reserveDecimals;\\n        uint256 borrowCap;\\n        uint256 amountInBaseCurrency;\\n        uint256 assetUnit;\\n        address siloedBorrowingAddress;\\n        bool isActive;\\n        bool isFrozen;\\n        bool isPaused;\\n        bool borrowingEnabled;\\n        bool stableRateBorrowingEnabled;\\n        bool siloedBorrowingEnabled;\\n    }\\n\\n    /**\\n     * @notice Validates a borrow action.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param params Additional params needed for the validation\\n     */\\n    function validateBorrow(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.ValidateBorrowParams memory params\\n    ) internal view {\\n        require(params.amount != 0, Errors.INVALID_AMOUNT);\\n        require(\\n            params.assetType == DataTypes.AssetType.ERC20,\\n            Errors.INVALID_ASSET_TYPE\\n        );\\n        ValidateBorrowLocalVars memory vars;\\n\\n        (\\n            vars.isActive,\\n            vars.isFrozen,\\n            vars.borrowingEnabled,\\n            vars.stableRateBorrowingEnabled,\\n            vars.isPaused\\n        ) = params.reserveCache.reserveConfiguration.getFlags();\\n\\n        require(vars.isActive, Errors.RESERVE_INACTIVE);\\n        require(!vars.isPaused, Errors.RESERVE_PAUSED);\\n        require(!vars.isFrozen, Errors.RESERVE_FROZEN);\\n        require(vars.borrowingEnabled, Errors.BORROWING_NOT_ENABLED);\\n\\n        require(\\n            params.priceOracleSentinel == address(0) ||\\n                IPriceOracleSentinel(params.priceOracleSentinel)\\n                    .isBorrowAllowed(),\\n            Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\\n        );\\n\\n        //validate interest rate mode\\n        require(\\n            params.interestRateMode == DataTypes.InterestRateMode.VARIABLE ||\\n                params.interestRateMode == DataTypes.InterestRateMode.STABLE,\\n            Errors.INVALID_INTEREST_RATE_MODE_SELECTED\\n        );\\n\\n        vars.reserveDecimals = params\\n            .reserveCache\\n            .reserveConfiguration\\n            .getDecimals();\\n        vars.borrowCap = params\\n            .reserveCache\\n            .reserveConfiguration\\n            .getBorrowCap();\\n        unchecked {\\n            vars.assetUnit = 10**vars.reserveDecimals;\\n        }\\n\\n        if (vars.borrowCap != 0) {\\n            vars.totalSupplyVariableDebt = params\\n                .reserveCache\\n                .currScaledVariableDebt\\n                .rayMul(params.reserveCache.nextVariableBorrowIndex);\\n\\n            vars.totalDebt =\\n                params.reserveCache.currTotalStableDebt +\\n                vars.totalSupplyVariableDebt +\\n                params.amount;\\n\\n            unchecked {\\n                require(\\n                    vars.totalDebt <= vars.borrowCap * vars.assetUnit,\\n                    Errors.BORROW_CAP_EXCEEDED\\n                );\\n            }\\n        }\\n\\n        (\\n            vars.userCollateralInBaseCurrency,\\n            ,\\n            vars.userDebtInBaseCurrency,\\n            vars.currentLtv,\\n            ,\\n            ,\\n            ,\\n            vars.healthFactor,\\n            ,\\n\\n        ) = GenericLogic.calculateUserAccountData(\\n            reservesData,\\n            reservesList,\\n            DataTypes.CalculateUserAccountDataParams({\\n                userConfig: params.userConfig,\\n                reservesCount: params.reservesCount,\\n                user: params.userAddress,\\n                oracle: params.oracle\\n            })\\n        );\\n\\n        require(\\n            vars.userCollateralInBaseCurrency != 0,\\n            Errors.COLLATERAL_BALANCE_IS_ZERO\\n        );\\n        require(vars.currentLtv != 0, Errors.LTV_VALIDATION_FAILED);\\n\\n        require(\\n            vars.healthFactor > HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n            Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n        );\\n\\n        vars.amountInBaseCurrency =\\n            IPriceOracleGetter(params.oracle).getAssetPrice(params.asset) *\\n            params.amount;\\n        unchecked {\\n            vars.amountInBaseCurrency /= vars.assetUnit;\\n        }\\n\\n        //add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\n        vars.collateralNeededInBaseCurrency = (vars.userDebtInBaseCurrency +\\n            vars.amountInBaseCurrency).percentDiv(vars.currentLtv); //LTV is calculated in percentage\\n\\n        require(\\n            vars.collateralNeededInBaseCurrency <=\\n                vars.userCollateralInBaseCurrency,\\n            Errors.COLLATERAL_CANNOT_COVER_NEW_BORROW\\n        );\\n\\n        /**\\n         * Following conditions need to be met if the user is borrowing at a stable rate:\\n         * 1. Reserve must be enabled for stable rate borrowing\\n         * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\\n         *    they are borrowing, to prevent abuses.\\n         * 3. Users will be able to borrow only a portion of the total available liquidity\\n         **/\\n\\n        if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n            //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\\n\\n            require(\\n                vars.stableRateBorrowingEnabled,\\n                Errors.STABLE_BORROWING_NOT_ENABLED\\n            );\\n\\n            require(\\n                !params.userConfig.isUsingAsCollateral(\\n                    reservesData[params.asset].id\\n                ) ||\\n                    params.reserveCache.reserveConfiguration.getLtv() == 0 ||\\n                    params.amount >\\n                    IERC20(params.reserveCache.xTokenAddress).balanceOf(\\n                        params.userAddress\\n                    ),\\n                Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n            );\\n\\n            vars.availableLiquidity = IERC20(params.asset).balanceOf(\\n                params.reserveCache.xTokenAddress\\n            );\\n\\n            //calculate the max available loan size in stable rate mode as a percentage of the\\n            //available liquidity\\n            uint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(\\n                params.maxStableLoanPercent\\n            );\\n\\n            require(\\n                params.amount <= maxLoanSizeStable,\\n                Errors.AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE\\n            );\\n        }\\n\\n        if (params.userConfig.isBorrowingAny()) {\\n            require(\\n                !params.reserveCache.reserveConfiguration.getSiloedBorrowing(),\\n                Errors.SILOED_BORROWING_VIOLATION\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a repay action.\\n     * @param reserveCache The cached data of the reserve\\n     * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\\n     * @param interestRateMode The interest rate mode of the debt being repaid\\n     * @param onBehalfOf The address of the user msg.sender is repaying for\\n     * @param stableDebt The borrow balance of the user\\n     * @param variableDebt The borrow balance of the user\\n     */\\n    function validateRepay(\\n        DataTypes.ReserveCache memory reserveCache,\\n        uint256 amountSent,\\n        DataTypes.InterestRateMode interestRateMode,\\n        address onBehalfOf,\\n        uint256 stableDebt,\\n        uint256 variableDebt\\n    ) internal view {\\n        require(amountSent != 0, Errors.INVALID_AMOUNT);\\n        require(\\n            amountSent != type(uint256).max || msg.sender == onBehalfOf,\\n            Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\n        );\\n\\n        (bool isActive, , , , bool isPaused) = reserveCache\\n            .reserveConfiguration\\n            .getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n\\n        uint256 variableDebtPreviousIndex = IScaledBalanceToken(\\n            reserveCache.variableDebtTokenAddress\\n        ).getPreviousIndex(onBehalfOf);\\n\\n        uint40 stableRatePreviousTimestamp = IStableDebtToken(\\n            reserveCache.stableDebtTokenAddress\\n        ).getUserLastUpdated(onBehalfOf);\\n\\n        require(\\n            (stableRatePreviousTimestamp < uint40(block.timestamp) &&\\n                interestRateMode == DataTypes.InterestRateMode.STABLE) ||\\n                (variableDebtPreviousIndex <\\n                    reserveCache.nextVariableBorrowIndex &&\\n                    interestRateMode == DataTypes.InterestRateMode.VARIABLE),\\n            Errors.SAME_BLOCK_BORROW_REPAY\\n        );\\n\\n        require(\\n            (stableDebt != 0 &&\\n                interestRateMode == DataTypes.InterestRateMode.STABLE) ||\\n                (variableDebt != 0 &&\\n                    interestRateMode == DataTypes.InterestRateMode.VARIABLE),\\n            Errors.NO_DEBT_OF_SELECTED_TYPE\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates a swap of borrow rate mode.\\n     * @param reserve The reserve state on which the user is swapping the rate\\n     * @param reserveCache The cached data of the reserve\\n     * @param userConfig The user reserves configuration\\n     * @param stableDebt The stable debt of the user\\n     * @param variableDebt The variable debt of the user\\n     * @param currentRateMode The rate mode of the debt being swapped\\n     */\\n    function validateSwapRateMode(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.ReserveCache memory reserveCache,\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        uint256 stableDebt,\\n        uint256 variableDebt,\\n        DataTypes.InterestRateMode currentRateMode\\n    ) internal view {\\n        (\\n            bool isActive,\\n            bool isFrozen,\\n            ,\\n            bool stableRateEnabled,\\n            bool isPaused\\n        ) = reserveCache.reserveConfiguration.getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n        require(!isFrozen, Errors.RESERVE_FROZEN);\\n\\n        if (currentRateMode == DataTypes.InterestRateMode.STABLE) {\\n            require(stableDebt != 0, Errors.NO_OUTSTANDING_STABLE_DEBT);\\n        } else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\\n            require(variableDebt != 0, Errors.NO_OUTSTANDING_VARIABLE_DEBT);\\n            /**\\n             * user wants to swap to stable, before swapping we need to ensure that\\n             * 1. stable borrow rate is enabled on the reserve\\n             * 2. user is not trying to abuse the reserve by supplying\\n             * more collateral than he is borrowing, artificially lowering\\n             * the interest rate, borrowing at variable, and switching to stable\\n             **/\\n            require(stableRateEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);\\n\\n            require(\\n                !userConfig.isUsingAsCollateral(reserve.id) ||\\n                    reserveCache.reserveConfiguration.getLtv() == 0 ||\\n                    stableDebt + variableDebt >\\n                    IERC20(reserveCache.xTokenAddress).balanceOf(msg.sender),\\n                Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n            );\\n        } else {\\n            revert(Errors.INVALID_INTEREST_RATE_MODE_SELECTED);\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a stable borrow rate rebalance action.\\n     * @dev Rebalancing is accepted when depositors are earning <= 90% of their earnings in pure supply/demand market (variable rate only)\\n     * For this to be the case, there has to be quite large stable debt with an interest rate below the current variable rate.\\n     * @param reserve The reserve state on which the user is getting rebalanced\\n     * @param reserveCache The cached state of the reserve\\n     * @param reserveAddress The address of the reserve\\n     */\\n    function validateRebalanceStableBorrowRate(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.ReserveCache memory reserveCache,\\n        address reserveAddress\\n    ) internal view {\\n        (bool isActive, , , , bool isPaused) = reserveCache\\n            .reserveConfiguration\\n            .getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n\\n        uint256 totalDebt = IERC20(reserveCache.stableDebtTokenAddress)\\n            .totalSupply() +\\n            IERC20(reserveCache.variableDebtTokenAddress).totalSupply();\\n\\n        (\\n            uint256 liquidityRateVariableDebtOnly,\\n            ,\\n\\n        ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\\n                .calculateInterestRates(\\n                    DataTypes.CalculateInterestRatesParams({\\n                        liquidityAdded: 0,\\n                        liquidityTaken: 0,\\n                        totalStableDebt: 0,\\n                        totalVariableDebt: totalDebt,\\n                        averageStableBorrowRate: 0,\\n                        reserveFactor: reserveCache.reserveFactor,\\n                        reserve: reserveAddress,\\n                        xToken: reserveCache.xTokenAddress\\n                    })\\n                );\\n\\n        require(\\n            reserveCache.currLiquidityRate <=\\n                liquidityRateVariableDebtOnly.percentMul(\\n                    REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD\\n                ),\\n            Errors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates the action of setting an asset as collateral.\\n     * @param reserveCache The cached data of the reserve\\n     * @param userBalance The balance of the user\\n     */\\n    function validateSetUseReserveAsCollateral(\\n        DataTypes.ReserveCache memory reserveCache,\\n        uint256 userBalance\\n    ) internal pure {\\n        require(userBalance != 0, Errors.UNDERLYING_BALANCE_ZERO);\\n\\n        (bool isActive, , , , bool isPaused) = reserveCache\\n            .reserveConfiguration\\n            .getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n    }\\n\\n    function validateSetUseERC721AsCollateral(\\n        DataTypes.ReserveCache memory reserveCache,\\n        address sender,\\n        address owner\\n    ) internal pure {\\n        require(sender == owner, Errors.NOT_THE_OWNER);\\n        (bool isActive, , , , bool isPaused) = reserveCache\\n            .reserveConfiguration\\n            .getFlags();\\n        require(isActive, Errors.RESERVE_INACTIVE);\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\n    }\\n\\n    struct ValidateLiquidationCallLocalVars {\\n        bool collateralReserveActive;\\n        bool collateralReservePaused;\\n        bool principalReserveActive;\\n        bool principalReservePaused;\\n        bool isCollateralEnabled;\\n    }\\n\\n    /**\\n     * @notice Validates the liquidation action.\\n     * @param userConfig The user configuration mapping\\n     * @param collateralReserve The reserve data of the collateral\\n     * @param params Additional parameters needed for the validation\\n     */\\n    function validateLiquidationCall(\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ValidateLiquidationCallParams memory params\\n    ) internal view {\\n        require(\\n            params.assetType == DataTypes.AssetType.ERC20,\\n            Errors.INVALID_ASSET_TYPE\\n        );\\n        ValidateLiquidationCallLocalVars memory vars;\\n\\n        (\\n            vars.collateralReserveActive,\\n            ,\\n            ,\\n            ,\\n            vars.collateralReservePaused\\n        ) = collateralReserve.configuration.getFlags();\\n\\n        (\\n            vars.principalReserveActive,\\n            ,\\n            ,\\n            ,\\n            vars.principalReservePaused\\n        ) = params.debtReserveCache.reserveConfiguration.getFlags();\\n\\n        require(\\n            vars.collateralReserveActive && vars.principalReserveActive,\\n            Errors.RESERVE_INACTIVE\\n        );\\n        require(\\n            !vars.collateralReservePaused && !vars.principalReservePaused,\\n            Errors.RESERVE_PAUSED\\n        );\\n\\n        require(\\n            params.priceOracleSentinel == address(0) ||\\n                params.healthFactor <\\n                MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD ||\\n                IPriceOracleSentinel(params.priceOracleSentinel)\\n                    .isLiquidationAllowed(),\\n            Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\\n        );\\n\\n        require(\\n            params.healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n            Errors.HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\n        );\\n\\n        vars.isCollateralEnabled =\\n            collateralReserve.configuration.getLiquidationThreshold() != 0 &&\\n            userConfig.isUsingAsCollateral(collateralReserve.id);\\n\\n        //if collateral isn't enabled as collateral by user, it cannot be liquidated\\n        require(\\n            vars.isCollateralEnabled,\\n            Errors.COLLATERAL_CANNOT_BE_LIQUIDATED\\n        );\\n        require(\\n            params.totalDebt != 0,\\n            Errors.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates the liquidation action.\\n     * @param userConfig The user configuration mapping\\n     * @param collateralReserve The reserve data of the collateral\\n     * @param params Additional parameters needed for the validation\\n     */\\n    function validateERC721LiquidationCall(\\n        DataTypes.UserConfigurationMap storage userConfig,\\n        DataTypes.ReserveData storage collateralReserve,\\n        DataTypes.ValidateERC721LiquidationCallParams memory params\\n    ) internal view {\\n        require(\\n            params.assetType == DataTypes.AssetType.ERC721,\\n            Errors.INVALID_ASSET_TYPE\\n        );\\n\\n        ValidateLiquidationCallLocalVars memory vars;\\n\\n        (\\n            vars.collateralReserveActive,\\n            ,\\n            ,\\n            ,\\n            vars.collateralReservePaused\\n        ) = collateralReserve.configuration.getFlags();\\n\\n        (\\n            vars.principalReserveActive,\\n            ,\\n            ,\\n            ,\\n            vars.principalReservePaused\\n        ) = params.debtReserveCache.reserveConfiguration.getFlags();\\n\\n        require(\\n            vars.collateralReserveActive && vars.principalReserveActive,\\n            Errors.RESERVE_INACTIVE\\n        );\\n        require(\\n            !vars.collateralReservePaused && !vars.principalReservePaused,\\n            Errors.RESERVE_PAUSED\\n        );\\n\\n        require(\\n            params.priceOracleSentinel == address(0) ||\\n                params.healthFactor <\\n                MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD ||\\n                IPriceOracleSentinel(params.priceOracleSentinel)\\n                    .isLiquidationAllowed(),\\n            Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\\n        );\\n\\n        require(\\n            params.healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n            Errors.ERC721_HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\n        );\\n\\n        require(\\n            params.liquidationAmount >= params.collateralDiscountedPrice,\\n            Errors.LIQUIDATION_AMOUNT_NOT_ENOUGH\\n        );\\n\\n        vars.isCollateralEnabled =\\n            collateralReserve.configuration.getLiquidationThreshold() != 0 &&\\n            userConfig.isUsingAsCollateral(collateralReserve.id) &&\\n            ICollaterizableERC721(params.xTokenAddress).isUsedAsCollateral(\\n                params.tokenId\\n            );\\n\\n        //if collateral isn't enabled as collateral by user, it cannot be liquidated\\n        require(\\n            vars.isCollateralEnabled,\\n            Errors.COLLATERAL_CANNOT_BE_LIQUIDATED\\n        );\\n        require(\\n            params.totalDebt != 0,\\n            Errors.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates the health factor of a user.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The state of the user for the specific reserve\\n     * @param user The user to validate health factor of\\n     * @param reservesCount The number of available reserves\\n     * @param oracle The price oracle\\n     */\\n    function validateHealthFactor(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap memory userConfig,\\n        address user,\\n        uint256 reservesCount,\\n        address oracle\\n    ) internal view returns (uint256, bool) {\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint256 healthFactor,\\n            ,\\n            bool hasZeroLtvCollateral\\n        ) = GenericLogic.calculateUserAccountData(\\n                reservesData,\\n                reservesList,\\n                DataTypes.CalculateUserAccountDataParams({\\n                    userConfig: userConfig,\\n                    reservesCount: reservesCount,\\n                    user: user,\\n                    oracle: oracle\\n                })\\n            );\\n\\n        require(\\n            healthFactor >= HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n            Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n        );\\n\\n        return (healthFactor, hasZeroLtvCollateral);\\n    }\\n\\n    /**\\n     * @notice Validates the health factor of a user and the ltv of the asset being withdrawn.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param userConfig The state of the user for the specific reserve\\n     * @param asset The asset for which the ltv will be validated\\n     * @param from The user from which the xTokens are being transferred\\n     * @param reservesCount The number of available reserves\\n     * @param oracle The price oracle\\n     */\\n    function validateHFAndLtv(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.UserConfigurationMap memory userConfig,\\n        address asset,\\n        address from,\\n        uint256 reservesCount,\\n        address oracle\\n    ) internal view {\\n        DataTypes.ReserveData memory reserve = reservesData[asset];\\n\\n        (, bool hasZeroLtvCollateral) = validateHealthFactor(\\n            reservesData,\\n            reservesList,\\n            userConfig,\\n            from,\\n            reservesCount,\\n            oracle\\n        );\\n\\n        require(\\n            !hasZeroLtvCollateral || reserve.configuration.getLtv() == 0,\\n            Errors.LTV_VALIDATION_FAILED\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates a transfer action.\\n     * @param reserve The reserve object\\n     */\\n    function validateTransfer(DataTypes.ReserveData storage reserve)\\n        internal\\n        view\\n    {\\n        require(!reserve.configuration.getPaused(), Errors.RESERVE_PAUSED);\\n    }\\n\\n    /**\\n     * @notice Validates a drop reserve action.\\n     * @param reservesList The addresses of all the active reserves\\n     * @param reserve The reserve object\\n     * @param asset The address of the reserve's underlying asset\\n     **/\\n    function validateDropReserve(\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.ReserveData storage reserve,\\n        address asset\\n    ) internal view {\\n        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n        require(\\n            reserve.id != 0 || reservesList[0] == asset,\\n            Errors.ASSET_NOT_LISTED\\n        );\\n        require(\\n            IERC20(reserve.stableDebtTokenAddress).totalSupply() == 0,\\n            Errors.STABLE_DEBT_NOT_ZERO\\n        );\\n        require(\\n            IERC20(reserve.variableDebtTokenAddress).totalSupply() == 0,\\n            Errors.VARIABLE_DEBT_SUPPLY_NOT_ZERO\\n        );\\n        require(\\n            IERC20(reserve.xTokenAddress).totalSupply() == 0,\\n            Errors.XTOKEN_SUPPLY_NOT_ZERO\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates a flash claim.\\n     * @param reserve The reserve object\\n     * @param params The flash claim params\\n     */\\n    function validateFlashClaim(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.ExecuteFlashClaimParams memory params\\n    ) internal view {\\n        require(\\n            reserve.assetType == DataTypes.AssetType.ERC721,\\n            Errors.INVALID_ASSET_TYPE\\n        );\\n        require(\\n            params.receiverAddress != address(0),\\n            Errors.ZERO_ADDRESS_NOT_VALID\\n        );\\n\\n        // only token owner can do flash claim\\n        for (uint256 i = 0; i < params.nftTokenIds.length; i++) {\\n            require(\\n                INToken(reserve.xTokenAddress).ownerOf(params.nftTokenIds[i]) ==\\n                    msg.sender,\\n                Errors.NOT_THE_OWNER\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/logic/GenericLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"../../../interfaces/IScaledBalanceToken.sol\\\";\\nimport {INToken} from \\\"../../../interfaces/INToken.sol\\\";\\nimport {ICollaterizableERC721} from \\\"../../../interfaces/ICollaterizableERC721.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\n\\n/**\\n * @title GenericLogic library\\n *\\n * @notice Implements protocol-level logic to calculate and validate the state of a user\\n */\\nlibrary GenericLogic {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n    struct CalculateUserAccountDataVars {\\n        uint256 assetPrice;\\n        uint256 assetUnit;\\n        DataTypes.AssetType assetType;\\n        uint256 userBalanceInBaseCurrency;\\n        uint256 decimals;\\n        uint256 ltv;\\n        uint256 liquidationThreshold;\\n        uint256 liquidationBonus;\\n        uint256 i;\\n        uint256 healthFactor;\\n        uint256 erc721HealthFactor;\\n        uint256 totalERC721CollateralInBaseCurrency;\\n        uint256 payableDebtByERC20Assets;\\n        uint256 totalCollateralInBaseCurrency;\\n        uint256 totalDebtInBaseCurrency;\\n        uint256 avgLtv;\\n        uint256 avgLiquidationThreshold;\\n        uint256 avgERC721LiquidationThreshold;\\n        address currentReserveAddress;\\n        bool hasZeroLtvCollateral;\\n    }\\n\\n    /**\\n     * @notice Calculates the user data across the reserves.\\n     * @dev It includes the total liquidity/collateral/borrow balances in the base currency used by the price feed,\\n     * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @param params Additional parameters needed for the calculation\\n     * @return The total collateral of the user in the base currency used by the price feed\\n     * @return The total ERC721 collateral of the user in the base currency used by the price feed\\n     * @return The total debt of the user in the base currency used by the price feed\\n     * @return The average ltv of the user\\n     * @return The average liquidation threshold of the user\\n     * @return The health factor of the user\\n     * @return True if the ltv is zero, false otherwise\\n     **/\\n    function calculateUserAccountData(\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList,\\n        DataTypes.CalculateUserAccountDataParams memory params\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        if (params.userConfig.isEmpty()) {\\n            return (\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                type(uint256).max,\\n                type(uint256).max,\\n                false\\n            );\\n        }\\n\\n        CalculateUserAccountDataVars memory vars;\\n\\n        while (vars.i < params.reservesCount) {\\n            if (!params.userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\n                unchecked {\\n                    ++vars.i;\\n                }\\n                continue;\\n            }\\n\\n            vars.currentReserveAddress = reservesList[vars.i];\\n\\n            if (vars.currentReserveAddress == address(0)) {\\n                unchecked {\\n                    ++vars.i;\\n                }\\n                continue;\\n            }\\n\\n            DataTypes.ReserveData storage currentReserve = reservesData[\\n                vars.currentReserveAddress\\n            ];\\n\\n            vars.assetType = currentReserve.assetType;\\n\\n            (\\n                vars.ltv,\\n                vars.liquidationThreshold,\\n                vars.liquidationBonus,\\n                vars.decimals,\\n\\n            ) = currentReserve.configuration.getParams();\\n\\n            unchecked {\\n                vars.assetUnit = 10**vars.decimals;\\n            }\\n\\n            vars.assetPrice = IPriceOracleGetter(params.oracle).getAssetPrice(\\n                vars.currentReserveAddress\\n            );\\n\\n            if (\\n                vars.liquidationThreshold != 0 &&\\n                params.userConfig.isUsingAsCollateral(vars.i)\\n            ) {\\n                vars.userBalanceInBaseCurrency = _getUserBalanceInBaseCurrency(\\n                    params.user,\\n                    currentReserve,\\n                    vars.assetPrice,\\n                    vars.assetUnit\\n                );\\n\\n                vars.totalCollateralInBaseCurrency += vars\\n                    .userBalanceInBaseCurrency;\\n\\n                if (vars.ltv != 0) {\\n                    vars.avgLtv += vars.userBalanceInBaseCurrency * vars.ltv;\\n                } else {\\n                    vars.hasZeroLtvCollateral = true;\\n                }\\n\\n                vars.liquidationThreshold =\\n                    vars.userBalanceInBaseCurrency *\\n                    (vars.liquidationThreshold);\\n\\n                vars.avgLiquidationThreshold += vars.liquidationThreshold;\\n\\n                if (vars.assetType == DataTypes.AssetType.ERC721) {\\n                    vars.totalERC721CollateralInBaseCurrency += vars\\n                        .userBalanceInBaseCurrency;\\n                    vars.avgERC721LiquidationThreshold += vars\\n                        .liquidationThreshold;\\n                } else {\\n                    vars.payableDebtByERC20Assets += vars\\n                        .userBalanceInBaseCurrency\\n                        .percentDiv(vars.liquidationBonus);\\n                }\\n            }\\n\\n            if (params.userConfig.isBorrowing(vars.i)) {\\n                vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(\\n                    params.user,\\n                    currentReserve,\\n                    vars.assetPrice,\\n                    vars.assetUnit\\n                );\\n            }\\n\\n            unchecked {\\n                ++vars.i;\\n            }\\n        }\\n\\n        unchecked {\\n            vars.avgLtv = vars.totalCollateralInBaseCurrency != 0\\n                ? vars.avgLtv / vars.totalCollateralInBaseCurrency\\n                : 0;\\n            vars.avgLiquidationThreshold = vars.totalCollateralInBaseCurrency !=\\n                0\\n                ? vars.avgLiquidationThreshold /\\n                    vars.totalCollateralInBaseCurrency\\n                : 0;\\n\\n            vars.avgERC721LiquidationThreshold = vars\\n                .totalERC721CollateralInBaseCurrency != 0\\n                ? vars.avgERC721LiquidationThreshold /\\n                    vars.totalERC721CollateralInBaseCurrency\\n                : 0;\\n        }\\n\\n        vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)\\n            ? type(uint256).max\\n            : (\\n                vars.totalCollateralInBaseCurrency.percentMul(\\n                    vars.avgLiquidationThreshold\\n                )\\n            ).wadDiv(vars.totalDebtInBaseCurrency);\\n\\n        vars.erc721HealthFactor = (vars.totalDebtInBaseCurrency == 0 ||\\n            vars.payableDebtByERC20Assets >= vars.totalDebtInBaseCurrency)\\n            ? type(uint256).max\\n            : (\\n                vars.totalERC721CollateralInBaseCurrency.percentMul(\\n                    vars.avgERC721LiquidationThreshold\\n                )\\n            ).wadDiv(\\n                    vars.totalDebtInBaseCurrency - vars.payableDebtByERC20Assets\\n                );\\n\\n        return (\\n            vars.totalCollateralInBaseCurrency,\\n            vars.totalERC721CollateralInBaseCurrency,\\n            vars.totalDebtInBaseCurrency,\\n            vars.avgLtv,\\n            vars.avgLiquidationThreshold,\\n            vars.avgERC721LiquidationThreshold,\\n            vars.payableDebtByERC20Assets,\\n            vars.healthFactor,\\n            vars.erc721HealthFactor,\\n            vars.hasZeroLtvCollateral\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the maximum amount that can be borrowed depending on the available collateral, the total debt\\n     * and the average Loan To Value\\n     * @param totalCollateralInBaseCurrency The total collateral in the base currency used by the price feed\\n     * @param totalDebtInBaseCurrency The total borrow balance in the base currency used by the price feed\\n     * @param ltv The average loan to value\\n     * @return The amount available to borrow in the base currency of the used by the price feed\\n     **/\\n    function calculateAvailableBorrows(\\n        uint256 totalCollateralInBaseCurrency,\\n        uint256 totalDebtInBaseCurrency,\\n        uint256 ltv\\n    ) internal pure returns (uint256) {\\n        uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency\\n            .percentMul(ltv);\\n\\n        if (availableBorrowsInBaseCurrency < totalDebtInBaseCurrency) {\\n            return 0;\\n        }\\n\\n        availableBorrowsInBaseCurrency =\\n            availableBorrowsInBaseCurrency -\\n            totalDebtInBaseCurrency;\\n        return availableBorrowsInBaseCurrency;\\n    }\\n\\n    /**\\n     * @notice Calculates total debt of the user in the based currency used to normalize the values of the assets\\n     * @dev This fetches the `balanceOf` of the stable and variable debt tokens for the user. For gas reasons, the\\n     * variable debt balance is calculated by fetching `scaledBalancesOf` normalized debt, which is cheaper than\\n     * fetching `balanceOf`\\n     * @param user The address of the user\\n     * @param reserve The data of the reserve for which the total debt of the user is being calculated\\n     * @param assetPrice The price of the asset for which the total debt of the user is being calculated\\n     * @param assetUnit The value representing one full unit of the asset (10^decimals)\\n     * @return The total debt of the user normalized to the base currency\\n     **/\\n    function _getUserDebtInBaseCurrency(\\n        address user,\\n        DataTypes.ReserveData storage reserve,\\n        uint256 assetPrice,\\n        uint256 assetUnit\\n    ) private view returns (uint256) {\\n        // fetching variable debt\\n        uint256 userTotalDebt = IScaledBalanceToken(\\n            reserve.variableDebtTokenAddress\\n        ).scaledBalanceOf(user);\\n        if (userTotalDebt != 0) {\\n            userTotalDebt = userTotalDebt.rayMul(reserve.getNormalizedDebt());\\n        }\\n\\n        userTotalDebt =\\n            userTotalDebt +\\n            IERC20(reserve.stableDebtTokenAddress).balanceOf(user);\\n\\n        userTotalDebt = assetPrice * userTotalDebt;\\n\\n        unchecked {\\n            return userTotalDebt / assetUnit;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates total xToken balance of the user in the based currency used by the price oracle\\n     * @dev For gas reasons, the xToken balance is calculated by fetching `scaledBalancesOf` normalized debt, which\\n     * is cheaper than fetching `balanceOf`\\n     * @param user The address of the user\\n     * @param reserve The data of the reserve for which the total xToken balance of the user is being calculated\\n     * @param assetPrice The price of the asset for which the total xToken balance of the user is being calculated\\n     * @param assetUnit The value representing one full unit of the asset (10^decimals)\\n     * @return The total xToken balance of the user normalized to the base currency of the price oracle\\n     **/\\n    function _getUserBalanceInBaseCurrency(\\n        address user,\\n        DataTypes.ReserveData storage reserve,\\n        uint256 assetPrice,\\n        uint256 assetUnit\\n    ) private view returns (uint256) {\\n        uint256 balance;\\n\\n        if (reserve.assetType == DataTypes.AssetType.ERC20) {\\n            uint256 normalizedIncome = reserve.getNormalizedIncome();\\n            balance =\\n                (\\n                    IScaledBalanceToken(reserve.xTokenAddress)\\n                        .scaledBalanceOf(user)\\n                        .rayMul(normalizedIncome)\\n                ) *\\n                assetPrice;\\n        } else if (reserve.assetType == DataTypes.AssetType.ERC721) {\\n            balance =\\n                ICollaterizableERC721(reserve.xTokenAddress)\\n                    .collaterizedBalanceOf(user) *\\n                assetPrice;\\n        }\\n\\n        unchecked {\\n            return balance / assetUnit;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IScaledBalanceToken\\n *\\n * @notice Defines the basic interface for a scaledbalance token.\\n **/\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\\n     * @param value The amount being minted (user entered amount + balance increase from interest)\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param index The next liquidity index of the reserve\\n     **/\\n    event Mint(\\n        address indexed caller,\\n        address indexed onBehalfOf,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted after scaled balance tokens are burned\\n     * @param from The address from which the scaled tokens will be burned\\n     * @param target The address that will receive the underlying, if any\\n     * @param value The amount being burned (user entered amount - balance increase from interest)\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param index The next liquidity index of the reserve\\n     **/\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Returns the scaled balance of the user.\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n     * at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns last index interest was accrued to the user's balance\\n     * @param user The address of the user\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\n     **/\\n    function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableOToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRewardController} from \\\"./IRewardController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializableOToken\\n *\\n * @notice Interface for the initialize function on OToken\\n **/\\ninterface IInitializableOToken {\\n    /**\\n     * @dev Emitted when an oToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this oToken\\n     * @param oTokenDecimals The decimals of the underlying\\n     * @param oTokenName The name of the oToken\\n     * @param oTokenSymbol The symbol of the oToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 oTokenDecimals,\\n        string oTokenName,\\n        string oTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the oToken\\n     * @param pool The pool contract that is initializing this contract\\n     * @param treasury The address of the Omni treasury, receiving the fees on this oToken\\n     * @param underlyingAsset The address of the underlying asset of this oToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param oTokenDecimals The decimals of the oToken, same as the underlying asset's\\n     * @param oTokenName The name of the oToken\\n     * @param oTokenSymbol The symbol of the oToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IRewardController incentivesController,\\n        uint8 oTokenDecimals,\\n        string calldata oTokenName,\\n        string calldata oTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IRewardController\\n *\\n * @notice Defines the basic interface for an Omni Incentives Controller.\\n **/\\ninterface IRewardController {\\n    /**\\n     * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\\n     * @param user The user that accrued rewards\\n     * @param amount The amount of accrued rewards\\n     */\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\\n     * @param user The address that accrued rewards\\n     *\u00a0@param to The address that will be receiving the rewards\\n     * @param claimer The address that performed the claim\\n     * @param amount The amount of rewards\\n     */\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted during `setClaimer`\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @notice Returns the configuration of the distribution for a certain asset\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The asset index\\n     * @return The emission per second\\n     * @return The last updated timestamp\\n     **/\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * LEGACY **************************\\n     * @dev Returns the configuration of the distribution for a certain asset\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The asset index, the emission per second and the last updated timestamp\\n     **/\\n    function assets(address asset)\\n        external\\n        view\\n        returns (\\n            uint128,\\n            uint128,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @notice Configure assets for a certain rewards emission\\n     * @param assets The assets to incentivize\\n     * @param emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(\\n        address[] calldata assets,\\n        uint256[] calldata emissionsPerSecond\\n    ) external;\\n\\n    /**\\n     * @notice Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param asset The address of the user\\n     * @param userBalance The balance of the user of the asset in the pool\\n     * @param totalSupply The total supply of the asset in the pool\\n     **/\\n    function handleAction(\\n        address asset,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n\\n    /**\\n     * @notice Returns the total of rewards of a user, already accrued + not yet accrued\\n     * @param assets The assets to accumulate rewards for\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\\n     * @param assets The assets to accumulate rewards for\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\\n     * @dev The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The assets to accumulate rewards for\\n     * @param amount The amount of rewards to claim\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the unclaimed rewards of the user\\n     * @param user The address of the user\\n     * @return The unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the user index for a specific asset\\n     * @param user The address of the user\\n     * @param asset The asset to incentivize\\n     * @return The user index for the asset\\n     */\\n    function getUserAssetData(address user, address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice for backward compatibility with previous implementation of the Incentives controller\\n     * @return The address of the reward token\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    /**\\n     * @notice for backward compatibility with previous implementation of the Incentives controller\\n     * @return The precision used in the incentives controller\\n     */\\n    function PRECISION() external view returns (uint8);\\n\\n    /**\\n     * @dev Gets the distribution end timestamp of the emissions\\n     */\\n    function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\n\\n/**\\n * @title IStableDebtToken\\n *\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n **/\\ninterface IStableDebtToken is IInitializableDebtToken {\\n    /**\\n     * @dev Emitted when new stable debt is minted\\n     * @param user The address of the user who triggered the minting\\n     * @param onBehalfOf The recipient of stable debt tokens\\n     * @param amount The amount minted (user entered amount + balance increase from interest)\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param newRate The rate of the debt after the minting\\n     * @param avgStableRate The next average stable rate after the minting\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\n     **/\\n    event Mint(\\n        address indexed user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 newRate,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    /**\\n     * @dev Emitted when new stable debt is burned\\n     * @param from The address from which the debt will be burned\\n     * @param amount The amount being burned (user entered amount - balance increase from interest)\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The the increase in balance since the last action of the user\\n     * @param avgStableRate The next average stable rate after the burning\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\n     **/\\n    event Burn(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    /**\\n     * @notice Mints debt token to the `onBehalfOf` address.\\n     * @dev The resulting rate is the weighted average between the rate of the new debt\\n     * and the rate of the previous debt\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\n     * @param onBehalfOf The address receiving the debt tokens\\n     * @param amount The amount of debt tokens to mint\\n     * @param rate The rate of the debt being minted\\n     * @return True if it is the first borrow, false otherwise\\n     * @return The total stable debt\\n     * @return The average stable borrow rate\\n     **/\\n    function mint(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 rate\\n    )\\n        external\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Burns debt of `user`\\n     * @dev The resulting rate is the weighted average between the rate of the new debt\\n     * and the rate of the previous debt\\n     * @dev In some instances, a burn transaction will emit a mint event\\n     * if the amount to burn is less than the interest the user earned\\n     * @param from The address from which the debt will be burned\\n     * @param amount The amount of debt tokens getting burned\\n     * @return The total stable debt\\n     * @return The average stable borrow rate\\n     **/\\n    function burn(address from, uint256 amount)\\n        external\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the average rate of all the stable rate loans.\\n     * @return The average stable rate\\n     **/\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the stable rate of the user debt\\n     * @param user The address of the user\\n     * @return The stable rate of the user\\n     **/\\n    function getUserStableRate(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the timestamp of the last update of the user\\n     * @param user The address of the user\\n     * @return The timestamp\\n     **/\\n    function getUserLastUpdated(address user) external view returns (uint40);\\n\\n    /**\\n     * @notice Returns the principal, the total supply, the average stable rate and the timestamp for the last update\\n     * @return The principal\\n     * @return The total supply\\n     * @return The average stable rate\\n     * @return The timestamp of the last update\\n     **/\\n    function getSupplyData()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint40\\n        );\\n\\n    /**\\n     * @notice Returns the timestamp of the last update of the total supply\\n     * @return The timestamp\\n     **/\\n    function getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n    /**\\n     * @notice Returns the total supply and the average stable rate\\n     * @return The total supply\\n     * @return The average rate\\n     **/\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the principal debt balance of the user\\n     * @return The debt balance of the user since the last burn/mint action\\n     **/\\n    function principalBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of this stableDebtToken (E.g. WETH for stableDebtWETH)\\n     * @return The address of the underlying asset\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n *\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n    /**\\n     * @notice Mints debt token to the `onBehalfOf` address\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\n     * @param onBehalfOf The address receiving the debt tokens\\n     * @param amount The amount of debt being minted\\n     * @param index The variable debt index of the reserve\\n     * @return True if the previous balance of the user is 0, false otherwise\\n     * @return The scaled total debt of the reserve\\n     **/\\n    function mint(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool, uint256);\\n\\n    /**\\n     * @notice Burns user variable debt\\n     * @dev In some instances, a burn transaction will emit a mint event\\n     * if the amount to burn is less than the interest that the user accrued\\n     * @param from The address from which the debt will be burned\\n     * @param amount The amount getting burned\\n     * @param index The variable debt index of the reserve\\n     * @return The scaled total debt of the reserve\\n     **/\\n    function burn(\\n        address from,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\n     * @return The address of the underlying asset\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IReserveInterestRateStrategy\\n *\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IReserveInterestRateStrategy {\\n    /**\\n     * @notice Returns the base variable borrow rate\\n     * @return The base variable borrow rate, expressed in ray\\n     **/\\n    function getBaseVariableBorrowRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maximum variable borrow rate\\n     * @return The maximum variable borrow rate, expressed in ray\\n     **/\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the interest rates depending on the reserve's state and configurations\\n     * @param params The parameters needed to calculate interest rates\\n     * @return liquidityRate The liquidity rate expressed in rays\\n     * @return stableBorrowRate The stable borrow rate expressed in rays\\n     * @return variableBorrowRate The variable borrow rate expressed in rays\\n     **/\\n    function calculateInterestRates(\\n        DataTypes.CalculateInterestRatesParams memory params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @title MathUtils library\\n *\\n * @notice Provides functions to perform linear and compounded interest calculations\\n */\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 result = rate *\\n            (block.timestamp - uint256(lastUpdateTimestamp));\\n        unchecked {\\n            result = result / SECONDS_PER_YEAR;\\n        }\\n\\n        return WadRayMath.RAY + result;\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\\n     * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\\n     * error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n        if (exp == 0) {\\n            return WadRayMath.RAY;\\n        }\\n\\n        uint256 expMinusOne;\\n        uint256 expMinusTwo;\\n        uint256 basePowerTwo;\\n        uint256 basePowerThree;\\n        unchecked {\\n            expMinusOne = exp - 1;\\n\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n            basePowerTwo =\\n                rate.rayMul(rate) /\\n                (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n            basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\n        }\\n\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n        unchecked {\\n            secondTerm /= 2;\\n        }\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n        unchecked {\\n            thirdTerm /= 6;\\n        }\\n\\n        return\\n            WadRayMath.RAY +\\n            (rate * exp) /\\n            SECONDS_PER_YEAR +\\n            secondTerm +\\n            thirdTerm;\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title PercentageMath library\\n *\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    return uint224(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint128).\\n   *\\n   * Counterpart to Solidity's `uint128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    return uint128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint96).\\n   *\\n   * Counterpart to Solidity's `uint96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    return uint96(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint64).\\n   *\\n   * Counterpart to Solidity's `uint64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    return uint64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint32).\\n   *\\n   * Counterpart to Solidity's `uint32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    return uint32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint16).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    return uint16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint8).\\n   *\\n   * Counterpart to Solidity's `uint8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   */\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    return uint8(value);\\n  }\\n\\n  /**\\n   * @dev Converts a signed int256 into an unsigned uint256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be greater than or equal to 0.\\n   */\\n  function toUint256(int256 value) internal pure returns (uint256) {\\n    require(value >= 0, 'SafeCast: value must be positive');\\n    return uint256(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on\\n   * overflow (when the input is less than smallest int128 or\\n   * greater than largest int128).\\n   *\\n   * Counterpart to Solidity's `int128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt128(int256 value) internal pure returns (int128) {\\n    require(\\n      value >= type(int128).min && value <= type(int128).max,\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n    );\\n    return int128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on\\n   * overflow (when the input is less than smallest int64 or\\n   * greater than largest int64).\\n   *\\n   * Counterpart to Solidity's `int64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt64(int256 value) internal pure returns (int64) {\\n    require(\\n      value >= type(int64).min && value <= type(int64).max,\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n    );\\n    return int64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on\\n   * overflow (when the input is less than smallest int32 or\\n   * greater than largest int32).\\n   *\\n   * Counterpart to Solidity's `int32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt32(int256 value) internal pure returns (int32) {\\n    require(\\n      value >= type(int32).min && value <= type(int32).max,\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n    );\\n    return int32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on\\n   * overflow (when the input is less than smallest int16 or\\n   * greater than largest int16).\\n   *\\n   * Counterpart to Solidity's `int16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt16(int256 value) internal pure returns (int16) {\\n    require(\\n      value >= type(int16).min && value <= type(int16).max,\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n    );\\n    return int16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on\\n   * overflow (when the input is less than smallest int8 or\\n   * greater than largest int8).\\n   *\\n   * Counterpart to Solidity's `int8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt8(int256 value) internal pure returns (int8) {\\n    require(\\n      value >= type(int8).min && value <= type(int8).max,\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n    );\\n    return int8(value);\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned uint256 into a signed int256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be less than or equal to maxInt256.\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256) {\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n    return int256(value);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRewardController} from \\\"./IRewardController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n *\\n * @notice Interface for the initialize function common between debt tokens\\n **/\\ninterface IInitializableDebtToken {\\n    /**\\n     * @dev Emitted when a debt token is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param incentivesController The address of the incentives controller for this xToken\\n     * @param debtTokenDecimals The decimals of the debt token\\n     * @param debtTokenName The name of the debt token\\n     * @param debtTokenSymbol The symbol of the debt token\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address incentivesController,\\n        uint8 debtTokenDecimals,\\n        string debtTokenName,\\n        string debtTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the debt token.\\n     * @param pool The pool contract that is initializing this contract\\n     * @param underlyingAsset The address of the underlying asset of this xToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n     * @param debtTokenName The name of the token\\n     * @param debtTokenSymbol The symbol of the token\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address underlyingAsset,\\n        IRewardController incentivesController,\\n        uint8 debtTokenDecimals,\\n        string memory debtTokenName,\\n        string memory debtTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPriceOracleGetter\\n *\\n * @notice Interface for the Omni price oracle.\\n **/\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     **/\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     **/\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     **/\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollaterizableERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ICollaterizableERC721\\n * @author Parallel\\n * @notice Defines the basic interface for an CollaterizableERC721.\\n **/\\ninterface ICollaterizableERC721 {\\n    /**\\n     * @dev get the collaterized balance of a specific user\\n     */\\n    function collaterizedBalanceOf(address user)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /**\\n     * @dev get the the collateral configuation of a spefifc token\\n     */\\n    function isUsedAsCollateral(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev changes the collateral state/config of a token\\n     * @return bool (if the state has changed), address (the owner address), uint256 (user's new collaterized balance)\\n     */\\n    function setIsUsedAsCollateral(uint256 tokenId, bool useAsCollateral)\\n        external\\n        virtual\\n        returns (\\n            bool,\\n            address,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC721} from \\\"../dependencies/openzeppelin/contracts/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"../dependencies/openzeppelin/contracts/IERC721Receiver.sol\\\";\\nimport {IERC721Enumerable} from \\\"../dependencies/openzeppelin/contracts/IERC721Enumerable.sol\\\";\\nimport {IERC1155Receiver} from \\\"../dependencies/openzeppelin/contracts/IERC1155Receiver.sol\\\";\\n\\nimport {IInitializableNToken} from \\\"./IInitializableNToken.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title INToken\\n * @author ParallelFi\\n * @notice Defines the basic interface for an NToken.\\n **/\\ninterface INToken is\\n    IERC721Enumerable,\\n    IInitializableNToken,\\n    IERC721Receiver,\\n    IERC1155Receiver\\n{\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param tokenId The id of the token being transferred\\n     **/\\n    event BalanceTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted during claimERC20Airdrop()\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount being claimed from the airdrop\\n     **/\\n    event ClaimERC20Airdrop(\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted during claimERC721Airdrop()\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param ids The ids of the tokens being claimed from the airdrop\\n     **/\\n    event ClaimERC721Airdrop(\\n        address indexed token,\\n        address indexed to,\\n        uint256[] ids\\n    );\\n\\n    /**\\n     * @dev Emitted during claimERC1155Airdrop()\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param ids The ids of the tokens being claimed from the airdrop\\n     * @param amounts The amount of NFTs being claimed from the airdrop for a specific id.\\n     * @param data The data of the tokens that is being claimed from the airdrop. Usually this is 0.\\n     **/\\n    event ClaimERC1155Airdrop(\\n        address indexed token,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted during executeAirdrop()\\n     * @param airdropContract The address of the airdrop contract\\n     **/\\n    event ExecuteAirdrop(address indexed airdropContract);\\n\\n    /**\\n     * @notice Mints `amount` nTokens to `user`\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted nTokens\\n     * @param tokenData The list of the tokens getting minted and their collateral configs\\n     * @param index The next liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address caller,\\n        address onBehalfOf,\\n        DataTypes.ERC721SupplyParams[] calldata tokenData,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Burns nTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @dev In some instances, the mint event could be emitted from a burn transaction\\n     * if the amount to burn is less than the interest that the user accrued\\n     * @param from The address from which the nTokens will be burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param tokenIds The ids of the tokens getting burned\\n     * @param index The next liquidity index of the reserve\\n     **/\\n    function burn(\\n        address from,\\n        address receiverOfUnderlying,\\n        uint256[] calldata tokenIds,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    // TODO are we using the Treasury at all? Can we remove?\\n    // /**\\n    //  * @notice Mints nTokens to the reserve treasury\\n    //  * @param tokenId The id of the token getting minted\\n    //  * @param index The next liquidity index of the reserve\\n    //  */\\n    // function mintToTreasury(uint256 tokenId, uint256 index) external;\\n\\n    /**\\n     * @notice Transfers nTokens in the event of a borrow being liquidated, in case the liquidators reclaims the nToken\\n     * @param from The address getting liquidated, current owner of the nTokens\\n     * @param to The recipient\\n     * @param tokenId The id of the token getting transferred\\n     **/\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the underlying asset to `target`.\\n     * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n     * @param user The recipient of the underlying\\n     * @param tokenId The id of the token getting transferred\\n     **/\\n    function transferUnderlyingTo(address user, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Handles the underlying received by the nToken after the transfer has been completed.\\n     * @dev The default implementation is empty as with standard ERC721 tokens, nothing needs to be done after the\\n     * transfer is concluded. However in the future there may be nTokens that allow for example to stake the underlying\\n     * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n     * @param user The user executing the repayment\\n     * @param tokenId The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The tokenId\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of this nToken (E.g. WETH for aWETH)\\n     * @return The address of the underlying asset\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the Omni treasury, receiving the fees on this nToken.\\n     * @return Address of the Omni treasury\\n     **/\\n    function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Get the domain separator for the token\\n     * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n     * @return The domain separator of the token at current chain\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the nonce for owner.\\n     * @param owner The address of the owner\\n     * @return The nonce of the owner\\n     **/\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param value The tokenId or amount to transfer\\n     */\\n    function rescueTokens(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @notice Claims ERC20 Airdrops.\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount being claimed from the airdrop\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claims ERC721 Airdrops.\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param ids The ids of the tokens being claimed from the airdrop\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claims ERC1155 Airdrops.\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param ids The ids of the tokens being claimed from the airdrop\\n     * @param amounts The amount of NFTs being claimed from the airdrop for a specific id.\\n     * @param data The data of the tokens that is being claimed from the airdrop. Usually this is 0.\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Executes airdrop.\\n     * @param airdropContract The address of the airdrop contract\\n     * @param airdropParams Third party airdrop abi data. You need to get this from the third party airdrop.\\n     **/\\n    function executeAirdrop(\\n        address airdropContract,\\n        bytes calldata airdropParams\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleSentinel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IPriceOracleSentinel\\n *\\n * @notice Defines the basic interface for the PriceOracleSentinel\\n */\\ninterface IPriceOracleSentinel {\\n    /**\\n     * @dev Emitted after the sequencer oracle is updated\\n     * @param newSequencerOracle The new sequencer oracle\\n     */\\n    event SequencerOracleUpdated(address newSequencerOracle);\\n\\n    /**\\n     * @dev Emitted after the grace period is updated\\n     * @param newGracePeriod The new grace period value\\n     */\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider\\n     * @return The address of the PoolAddressesProvider contract\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns true if the `borrow` operation is allowed.\\n     * @dev Operation not allowed when PriceOracle is down or grace period not passed.\\n     * @return True if the `borrow` operation is allowed, false otherwise.\\n     */\\n    function isBorrowAllowed() external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the `liquidation` operation is allowed.\\n     * @dev Operation not allowed when PriceOracle is down or grace period not passed.\\n     * @return True if the `liquidation` operation is allowed, false otherwise.\\n     */\\n    function isLiquidationAllowed() external view returns (bool);\\n\\n    /**\\n     * @notice Updates the address of the sequencer oracle\\n     * @param newSequencerOracle The address of the new Sequencer Oracle to use\\n     */\\n    function setSequencerOracle(address newSequencerOracle) external;\\n\\n    /**\\n     * @notice Updates the duration of the grace period\\n     * @param newGracePeriod The value of the new grace period duration\\n     */\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n\\n    /**\\n     * @notice Returns the SequencerOracle\\n     * @return The address of the sequencer oracle contract\\n     */\\n    function getSequencerOracle() external view returns (address);\\n\\n    /**\\n     * @notice Returns the grace period\\n     * @return The duration of the grace period\\n     */\\n    function getGracePeriod() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/configuration/UserConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ReserveConfiguration} from \\\"./ReserveConfiguration.sol\\\";\\n\\n/**\\n * @title UserConfiguration library\\n *\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    uint256 internal constant BORROWING_MASK =\\n        0x5555555555555555555555555555555555555555555555555555555555555555;\\n    uint256 internal constant COLLATERAL_MASK =\\n        0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\\n\\n    /**\\n     * @notice Sets if the user is borrowing the reserve identified by reserveIndex\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @param borrowing True if the user is borrowing the reserve, false otherwise\\n     **/\\n    function setBorrowing(\\n        DataTypes.UserConfigurationMap storage self,\\n        uint256 reserveIndex,\\n        bool borrowing\\n    ) internal {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            uint256 bit = 1 << (reserveIndex << 1);\\n            if (borrowing) {\\n                self.data |= bit;\\n            } else {\\n                self.data &= ~bit;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets if the user is using as collateral the reserve identified by reserveIndex\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise\\n     **/\\n    function setUsingAsCollateral(\\n        DataTypes.UserConfigurationMap storage self,\\n        uint256 reserveIndex,\\n        bool usingAsCollateral\\n    ) internal {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            uint256 bit = 1 << ((reserveIndex << 1) + 1);\\n            if (usingAsCollateral) {\\n                self.data |= bit;\\n            } else {\\n                self.data &= ~bit;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if a user has been using the reserve for borrowing or as collateral\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n     **/\\n    function isUsingAsCollateralOrBorrowing(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            return (self.data >> (reserveIndex << 1)) & 3 != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate a user has been using the reserve for borrowing\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve for borrowing, false otherwise\\n     **/\\n    function isBorrowing(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            return (self.data >> (reserveIndex << 1)) & 1 != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate a user has been using the reserve as collateral\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve as collateral, false otherwise\\n     **/\\n    function isUsingAsCollateral(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been supplying only one reserve as collateral\\n     * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n     * @param self The configuration object\\n     * @return True if the user has been supplying as collateral one reserve, false otherwise\\n     **/\\n    function isUsingAsCollateralOne(DataTypes.UserConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        uint256 collateralData = self.data & COLLATERAL_MASK;\\n        return\\n            collateralData != 0 && (collateralData & (collateralData - 1) == 0);\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been supplying any reserve as collateral\\n     * @param self The configuration object\\n     * @return True if the user has been supplying as collateral any reserve, false otherwise\\n     **/\\n    function isUsingAsCollateralAny(DataTypes.UserConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self.data & COLLATERAL_MASK != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been borrowing only one asset\\n     * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n     * @param self The configuration object\\n     * @return True if the user has been supplying as collateral one reserve, false otherwise\\n     **/\\n    function isBorrowingOne(DataTypes.UserConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        uint256 borrowingData = self.data & BORROWING_MASK;\\n        return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been borrowing from any reserve\\n     * @param self The configuration object\\n     * @return True if the user has been borrowing any reserve, false otherwise\\n     **/\\n    function isBorrowingAny(DataTypes.UserConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self.data & BORROWING_MASK != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if a user has not been using any reserve for borrowing or supply\\n     * @param self The configuration object\\n     * @return True if the user has not been borrowing or supplying any reserve, false otherwise\\n     **/\\n    function isEmpty(DataTypes.UserConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self.data == 0;\\n    }\\n\\n    /**\\n     * @notice Returns the siloed borrowing state for the user\\n     * @param self The configuration object\\n     * @param reservesData The data of all the reserves\\n     * @param reservesList The reserve list\\n     * @return True if the user has borrowed a siloed asset, false otherwise\\n     * @return The address of the only borrowed asset\\n     */\\n    function getSiloedBorrowingState(\\n        DataTypes.UserConfigurationMap memory self,\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList\\n    ) internal view returns (bool, address) {\\n        if (isBorrowingOne(self)) {\\n            uint256 assetId = _getFirstAssetIdByMask(self, BORROWING_MASK);\\n            address assetAddress = reservesList[assetId];\\n            if (reservesData[assetAddress].configuration.getSiloedBorrowing()) {\\n                return (true, assetAddress);\\n            }\\n        }\\n\\n        return (false, address(0));\\n    }\\n\\n    /**\\n     * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask\\n     * @param self The configuration object\\n     * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied\\n     */\\n    function _getFirstAssetIdByMask(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 mask\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 bitmapData = self.data & mask;\\n            uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);\\n            uint256 id;\\n\\n            while ((firstAssetPosition >>= 2) != 0) {\\n                id += 1;\\n            }\\n            return id;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableNToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRewardController} from \\\"./IRewardController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializablenToken\\n *\\n * @notice Interface for the initialize function on NToken\\n **/\\ninterface IInitializableNToken {\\n    /**\\n     * @dev Emitted when an nToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this nToken\\n     * @param nTokenName The name of the nToken\\n     * @param nTokenSymbol The symbol of the nToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        string nTokenName,\\n        string nTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the nToken\\n     * @param pool The pool contract that is initializing this contract\\n     * @param treasury The address of the Omni treasury, receiving the fees on this nToken\\n     * @param underlyingAsset The address of the underlying asset of this nToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param nTokenName The name of the nToken\\n     * @param nTokenSymbol The symbol of the nToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IRewardController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata nTokenName,\\n        string calldata nTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Helpers library\\n *\\n */\\nlibrary Helpers {\\n    /**\\n     * @notice Fetches the user current stable and variable debt balances\\n     * @param user The user address\\n     * @param reserveCache The reserve cache data object\\n     * @return The stable debt balance\\n     * @return The variable debt balance\\n     **/\\n    function getUserCurrentDebt(\\n        address user,\\n        DataTypes.ReserveCache memory reserveCache\\n    ) internal view returns (uint256, uint256) {\\n        return (\\n            IERC20(reserveCache.stableDebtTokenAddress).balanceOf(user),\\n            IERC20(reserveCache.variableDebtTokenAddress).balanceOf(user)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashClaimReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IFlashClaimReceiver interface\\n * @notice Interface for the IFlashClaimReceiver.\\n * @author OMNI\\n * @dev implement this interface to develop a flashclaim-compatible flashclaimReceiver contract\\n **/\\ninterface IFlashClaimReceiver {\\n    function executeOperation(\\n        address asset,\\n        uint256[] calldata tokenIds,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/protocol/libraries/logic/BorrowLogic.sol\": {\r\n        \"BorrowLogic\": \"0x2b6277fc35452190599fcbd2d3faf6d8c73ac7f6\"\r\n      },\r\n      \"contracts/protocol/libraries/logic/FlashClaimLogic.sol\": {\r\n        \"FlashClaimLogic\": \"0xae62f634cb409cd36c219f16cc84b1e9a48ad3c9\"\r\n      },\r\n      \"contracts/protocol/libraries/logic/LiquidationLogic.sol\": {\r\n        \"LiquidationLogic\": \"0x46fc17be725ec5634e1a0efb14b5246b9e96125f\"\r\n      },\r\n      \"contracts/protocol/libraries/logic/PoolLogic.sol\": {\r\n        \"PoolLogic\": \"0x59fbff336af3a16da5a386cb28d05acfd3e54e14\"\r\n      },\r\n      \"contracts/protocol/libraries/logic/SupplyLogic.sol\": {\r\n        \"SupplyLogic\": \"0x5070f878a39162ff22fb04f52fd3c50d76758547\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FlashClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveOToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"}],\"name\":\"MintedToTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RebalanceStableBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useOTokens\",\"type\":\"bool\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.ERC721SupplyParams[]\",\"name\":\"tokenData\",\"type\":\"tuple[]\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"SupplyERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"}],\"name\":\"SwapBorrowRateMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawERC721\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_RESERVES\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STABLE_RATE_BORROW_SIZE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"dropReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usedAsCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceFromBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceToBefore\",\"type\":\"uint256\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getReserveAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"enum DataTypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"xTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accruedToTreasury\",\"type\":\"uint128\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc721HealthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.UserConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum DataTypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"xTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveOToken\",\"type\":\"bool\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidationAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveNToken\",\"type\":\"bool\"}],\"name\":\"liquidationERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rebalanceStableBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"repayWithOTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"permitS\",\"type\":\"bytes32\"}],\"name\":\"repayWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUseERC721AsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUseReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.ERC721SupplyParams[]\",\"name\":\"tokenData\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supplyERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"permitS\",\"type\":\"bytes32\"}],\"name\":\"supplyWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"swapBorrowRateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000d3ceb5a25a068d99609052b3b35cb204b5ec77c6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}