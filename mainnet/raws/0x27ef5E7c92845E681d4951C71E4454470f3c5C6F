{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"tmp_contracts/StringUtilsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/// Deployed by CyberPnk <cyberpnk@stringutilsv2.cyberpnk.win>\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./NumberToString.sol\\\";\\nimport \\\"./AddressToString.sol\\\";\\nimport \\\"./Base64.sol\\\";\\n\\ncontract StringUtilsV2 {\\n    function base64Encode(bytes memory data) external pure returns (string memory) {\\n        return Base64.encode(data);\\n    }\\n\\n    function base64EncodeJson(bytes memory data) external pure returns (string memory) {\\n        return string(abi.encodePacked('data:application/json;base64,', Base64.encode(data)));\\n    }\\n\\n    function base64EncodeSvg(bytes memory data) external pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", Base64.encode(data)));\\n    }\\n\\n    function numberToString(uint256 value) external pure returns (string memory) {\\n        return NumberToString.numberToString(value);\\n    }\\n\\n    function addressToString(address account) external pure returns(string memory) {\\n        return AddressToString.addressToString(account);\\n    }\\n\\n    // This is quite inefficient, should be used only in read functions\\n    function split(string calldata str, string calldata delim) external pure returns(string[] memory) {\\n        uint numStrings = 1;\\n        for (uint i=0; i < bytes(str).length; i++) {            \\n            if (bytes(str)[i] == bytes(delim)[0]) {\\n                numStrings += 1;\\n            }\\n        }\\n\\n        string[] memory strs = new string[](numStrings);\\n\\n        string memory current = \\\"\\\";\\n        uint strIndex = 0;\\n        for (uint i=0; i < bytes(str).length; i++) {            \\n            if (bytes(str)[i] == bytes(delim)[0]) {\\n                strs[strIndex++] = current;\\n                current = \\\"\\\";\\n            } else {\\n                current = string(abi.encodePacked(current, bytes(str)[i]));\\n            }\\n        }\\n        strs[strIndex] = current;\\n        return strs;\\n    }\\n\\n    function substr(bytes calldata str, uint startIndexInclusive, uint endIndexExclusive) external pure returns(string memory) {\\n        bytes memory result = new bytes(endIndexExclusive - startIndexInclusive);\\n        for (uint j = startIndexInclusive; j < endIndexExclusive; j++) {\\n            result[j - startIndexInclusive] = str[j];\\n        }\\n        return string(result);\\n    }\\n\\n    function substrStart(bytes calldata str, uint endIndexExclusive) external pure returns(string memory) {\\n        bytes memory result = new bytes(endIndexExclusive);\\n        for (uint j = 0; j < endIndexExclusive; j++) {\\n            result[j] = str[j];\\n        }\\n        return string(result);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"tmp_contracts/NumberToString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary NumberToString {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     *\\n     *\\n     * Inspired by OraclizeAPI's implementation - MIT licence\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n     * Copied from Mad Dog Jones' replicator\\n     */\\n    function numberToString(uint256 value) internal pure returns (string memory) {\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"tmp_contracts/AddressToString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary AddressToString {\\n    function addressToString(address account) internal pure returns(string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function toString(uint256 value) private pure returns(string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) private pure returns(string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes memory data) private pure returns(string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint i = 0; i < data.length; i++) {\\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n}\"\r\n    },\r\n    \"tmp_contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"base64EncodeJson\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"base64EncodeSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"str\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"startIndexInclusive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndexExclusive\",\"type\":\"uint256\"}],\"name\":\"substr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"str\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"endIndexExclusive\",\"type\":\"uint256\"}],\"name\":\"substrStart\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "StringUtilsV2", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}