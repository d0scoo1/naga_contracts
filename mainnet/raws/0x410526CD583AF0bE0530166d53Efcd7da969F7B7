{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\n \r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n/*\r\n * NameFilter library\r\n */\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n/**\r\n interface : PlayerBookReceiverInterface\r\n */\r\ninterface PlayerBookReceiverInterface {\r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff) external;\r\n    function receivePlayerNameList(uint256 _pID, bytes32 _name) external;\r\n}\r\n\r\n/**\r\n contract : PlayerBook\r\n */\r\ncontract PlayerBook{\r\n    /****************************************************************************************** \r\n     \u5bfc\u5165\u7684\u5e93\r\n     */\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n    /******************************************************************************************\r\n     \u793e\u533a\u5730\u5740\r\n     */\r\n    address public communityAddr;\r\n    function initCommunityAddr(address addr) isAdmin() public {\r\n        require(address(addr) != address(0x0), \"Empty address not allowed.\");\r\n        require(address(communityAddr) == address(0x0), \"Community address has been set.\");\r\n        communityAddr = addr ;\r\n    }\r\n    /******************************************************************************************\r\n     \u5408\u7ea6\u6743\u9650\u7ba1\u7406\r\n     \u8bbe\u8ba1\uff1a\u4f1a\u8bbe\u8ba1\u7528\u6237\u6743\u9650\u7ba1\u7406\uff0c\r\n        9 => \u7ba1\u7406\u5458\u89d2\u8272\r\n        0 => \u6ca1\u6709\u4efb\u4f55\u6743\u9650\r\n     */\r\n\r\n    // \u7528\u6237\u5730\u5740\u5230\u89d2\u8272\u7684\u8868\r\n    mapping(address => uint256)     private users ;\r\n    // \u521d\u59cb\u5316\r\n    function initUsers() private {\r\n        // \u521d\u59cb\u5316\u4e0b\u5217\u5730\u5740\u5e10\u6237\u4e3a\u7ba1\u7406\u5458\r\n        users[0x89b2E7Ee504afd522E07F80Ae7b9d4D228AF3fe2] = 9 ;\r\n        users[msg.sender] = 9 ;\r\n    }\r\n    // \u662f\u5426\u662f\u7ba1\u7406\u5458\r\n    modifier isAdmin() {\r\n        uint256 role = users[msg.sender];\r\n        require((role==9), \"Must be admin.\");\r\n        _;\r\n    }\r\n    /******************************************************************************************\r\n     \u68c0\u67e5\u662f\u5e10\u6237\u5730\u5740\u8fd8\u662f\u5408\u7ea6\u5730\u5740   \r\n     */\r\n    modifier isHuman {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"Humans only\");\r\n        _;\r\n    }\r\n    /****************************************************************************************** \r\n     \u4e8b\u4ef6\u5b9a\u4e49\r\n     */\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n    // \u6ce8\u518c\u73a9\u5bb6\u4fe1\u606f\r\n    struct Player {\r\n        address addr;\r\n        bytes32 name;\r\n        uint256 laff;\r\n        uint256 names;\r\n    }\r\n    /******************************************************************************************  \r\n     \u6ce8\u518c\u8d39\u7528\uff1a\u521d\u59cb\u4e3a 0.01 ether\r\n     \u6761\u4ef6\uff1a\r\n     1. \u5fc5\u987b\u662f\u7ba1\u7406\u5458\u624d\u53ef\u4ee5\u66f4\u65b0\r\n     */\r\n    uint256 public registrationFee_ = 10 finney; \r\n    function setRegistrationFee(uint256 _fee) isAdmin() public {\r\n        registrationFee_ = _fee ;\r\n    }\r\n    /******************************************************************************************\r\n     \u6ce8\u518c\u6e38\u620f\r\n     */\r\n    // \u6ce8\u518c\u7684\u6e38\u620f\u5217\u8868\r\n    mapping(uint256 => PlayerBookReceiverInterface) public games_;\r\n    // \u6ce8\u518c\u7684\u6e38\u620f\u540d\u79f0\u5217\u8868\r\n    mapping(address => bytes32) public gameNames_;\r\n    // \u6ce8\u518c\u7684\u6e38\u620fID\u5217\u8868\r\n    mapping(address => uint256) public gameIDs_;\r\n    // \u6e38\u620f\u6570\u76ee\r\n    uint256 public gID_;\r\n    // \u5224\u65ad\u662f\u5426\u662f\u6ce8\u518c\u6e38\u620f\r\n    modifier isRegisteredGame() {\r\n        require(gameIDs_[msg.sender] != 0);\r\n        _;\r\n    }\r\n    /****************************************************************************************** \r\n     \u65b0\u589e\u6e38\u620f\r\n     \u6761\u4ef6\uff1a\r\n     1. \u6e38\u620f\u4e0d\u5b58\u5728\r\n     */\r\n    function addGame(address _gameAddress, string _gameNameStr) isAdmin() public {\r\n        require(gameIDs_[_gameAddress] == 0, \"Game already registered\");\r\n        gID_++;\r\n        bytes32 _name = _gameNameStr.nameFilter();\r\n        gameIDs_[_gameAddress] = gID_;\r\n        gameNames_[_gameAddress] = _name;\r\n        games_[gID_] = PlayerBookReceiverInterface(_gameAddress);\r\n    }\r\n    /****************************************************************************************** \r\n     \u73a9\u5bb6\u4fe1\u606f\r\n     */\r\n    // \u73a9\u5bb6\u6570\u76ee\r\n    uint256 public pID_;\r\n    // \u73a9\u5bb6\u5730\u5740=>\u73a9\u5bb6ID\r\n    mapping (address => uint256) public pIDxAddr_;\r\n    // \u73a9\u5bb6\u540d\u79f0=>\u73a9\u5bb6ID\r\n    mapping (bytes32 => uint256) public pIDxName_;  \r\n    // \u73a9\u5bb6ID => \u73a9\u5bb6\u6570\u636e\r\n    mapping (uint256 => Player) public plyr_; \r\n    // \u73a9\u5bb6ID => \u73a9\u5bb6\u540d\u79f0 => \r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_;\r\n    // \u73a9\u5bb6ID => \u540d\u79f0\u7f16\u53f7 => \u73a9\u5bb6\u540d\u79f0\r\n    mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; \r\n    /******************************************************************************************\r\n     \u521d\u59cb\u73a9\u5bb6 \r\n     */\r\n     function initPlayers() private {\r\n        pID_ = 0;\r\n     }\r\n    /******************************************************************************************\r\n     \u5224\u65ad\u73a9\u5bb6\u540d\u5b57\u662f\u5426\u6709\u6548\uff08\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u8fc7\uff09\r\n     */\r\n    function checkIfNameValid(string _nameStr) public view returns(bool){\r\n        bytes32 _name = _nameStr.nameFilter();\r\n        if (pIDxName_[_name] == 0) return (true);\r\n        else return (false);\r\n    }\r\n    /******************************************************************************************\r\n     \u6784\u9020\u51fd\u6570\r\n     */\r\n    constructor() public {\r\n        // \u521d\u59cb\u5316\u7528\u6237\r\n        initUsers() ;\r\n        // \u521d\u59cb\u5316\u73a9\u5bb6\r\n        initPlayers();\r\n        // \u521d\u59cb\u5316\u793e\u533a\u57fa\u91d1\u5730\u5740\r\n        communityAddr = address(0x3C07f9f7164Bf72FDBefd9438658fAcD94Ed4439);\r\n\r\n    }\r\n    /******************************************************************************************\r\n     \u6ce8\u518c\u540d\u5b57\r\n     _nameString: \u540d\u5b57\r\n     _affCode\uff1a\u63a8\u8350\u4eba\u7f16\u53f7\r\n     _all\uff1a\u662f\u5426\u662f\u6ce8\u518c\u5230\u6240\u6709\u6e38\u620f\u4e2d\r\n     \u6761\u4ef6\uff1a\r\n     1. \u662f\u8d26\u6237\u5730\u5740\r\n     2. \u8981\u4ed8\u8d39\r\n     */\r\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all) isHuman() public payable{\r\n        // \u8981\u6c42\u6ce8\u518c\u8d39\u7528,\u4e0d\u9700\u8981\u4ed8\u8d39\r\n        //require (msg.value >= registrationFee_, \"You have to pay the name fee\");\r\n\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        address _addr = msg.sender;\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        if (_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID) {\r\n            plyr_[_pID].laff = _affCode;\r\n        }else{\r\n            _affCode = 0;\r\n        }\r\n        registerNameCore(_pID, _addr, _affCode, _name, _isNewPlayer, _all);\r\n    }\r\n    /**\r\n     \u6ce8\u518c\u540d\u5b57\r\n     _nameString: \u540d\u5b57\r\n     _affCode\uff1a\u63a8\u8350\u4eba\u5730\u5740\r\n     _all\uff1a\u662f\u5426\u662f\u6ce8\u518c\u5230\u6240\u6709\u6e38\u620f\u4e2d\r\n     \u6761\u4ef6\uff1a\r\n     1. \u662f\u8d26\u6237\u5730\u5740\r\n     2. \u8981\u4ed8\u8d39\r\n     */\r\n    function registerNameXaddr(string _nameString, address _affCode, bool _all) isHuman() public payable{\r\n        // \u8981\u6c42\u6ce8\u518c\u8d39\u7528,\u4e0d\u9700\u8981\u4ed8\u8d39\r\n        //require (msg.value >= registrationFee_, \"You have to pay the name fee\");\r\n        \r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        address _addr = msg.sender;\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        uint256 _affID;\r\n        if (_affCode != address(0) && _affCode != _addr){\r\n            _affID = pIDxAddr_[_affCode];\r\n            if (_affID != plyr_[_pID].laff){\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n    }\r\n    /**\r\n     \u6ce8\u518c\u540d\u5b57\r\n     _nameString: \u540d\u5b57\r\n     _affCode\uff1a\u63a8\u8350\u4eba\u540d\u79f0\r\n     _all\uff1a\u662f\u5426\u662f\u6ce8\u518c\u5230\u6240\u6709\u6e38\u620f\u4e2d\r\n     \u6761\u4ef6\uff1a\r\n     1. \u662f\u8d26\u6237\u5730\u5740\r\n     2. \u8981\u4ed8\u8d39\r\n     */\r\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all) isHuman() public payable{\r\n        // \u8981\u6c42\u6ce8\u518c\u8d39\u7528,\u4e0d\u9700\u8981\u4ed8\u8d39\r\n        //require (msg.value >= registrationFee_, \"You have to pay the name fee\");\r\n        \r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        address _addr = msg.sender;\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        uint256 _affID;\r\n        if (_affCode != \"\" && _affCode != _name){\r\n            _affID = pIDxName_[_affCode];\r\n            if (_affID != plyr_[_pID].laff){\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n    }\r\n\r\n    /**\r\n     \u6ce8\u518c\r\n     _pID:          \u73a9\u5bb6\u7f16\u53f7\r\n     _addr:         \u73a9\u5bb6\u5730\u5740\r\n     _affID:        \u4ece\u5c5e\r\n     _name:         \u540d\u79f0\r\n    _isNewPlayer:   \u662f\u5426\u662f\u65b0\u73a9\u5bb6\r\n    _all:           \u662f\u5426\u6ce8\u518c\u5230\u6240\u6709\u6e38\u620f\r\n     */\r\n    function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer, bool _all) private {\r\n        // \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u8fc7\r\n        if (pIDxName_[_name] != 0)\r\n            require(plyrNames_[_pID][_name] == true, \"That names already taken\");\r\n        // \r\n        plyr_[_pID].name = _name;\r\n        pIDxName_[_name] = _pID;\r\n        if (plyrNames_[_pID][_name] == false) {\r\n            plyrNames_[_pID][_name] = true;\r\n            plyr_[_pID].names++;\r\n            plyrNameList_[_pID][plyr_[_pID].names] = _name;\r\n        }\r\n        // \u5c06\u6ce8\u518c\u8d39\u7528\u8f6c\u5230\u793e\u533a\u57fa\u91d1\u5408\u7ea6\u8d26\u6237\u4e2d\r\n        if(address(this).balance>0){\r\n            if(address(communityAddr) != address(0x0)) {\r\n                communityAddr.transfer(address(this).balance);\r\n            }\r\n        }\r\n\r\n        if (_all == true)\r\n            for (uint256 i = 1; i <= gID_; i++)\r\n                games_[i].receivePlayerInfo(_pID, _addr, _name, _affID);\r\n        \r\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, msg.value, now);\r\n    }\r\n    /**\r\n     \u5982\u679c\u662f\u65b0\u73a9\u5bb6\uff0c\u5219\u8fd4\u56de\u771f\r\n     */\r\n    function determinePID(address _addr) private returns (bool) {\r\n        if (pIDxAddr_[_addr] == 0){\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n            return (true) ;\r\n        }else{\r\n            return (false);\r\n        }\r\n    }\r\n    /**\r\n     */\r\n    function addMeToGame(uint256 _gameID) isHuman() public {\r\n        require(_gameID <= gID_, \"Game doesn't exist yet\");\r\n        address _addr = msg.sender;\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        require(_pID != 0, \"You dont even have an account\");\r\n        uint256 _totalNames = plyr_[_pID].names;\r\n        \r\n        // add players profile and most recent name\r\n        games_[_gameID].receivePlayerInfo(_pID, _addr, plyr_[_pID].name, plyr_[_pID].laff);\r\n        \r\n        // add list of all names\r\n        if (_totalNames > 1)\r\n            for (uint256 ii = 1; ii <= _totalNames; ii++)\r\n                games_[_gameID].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);\r\n    }\r\n\r\n    function addMeToAllGames() isHuman() public {\r\n        address _addr = msg.sender;\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        require(_pID != 0, \"You dont even have an account\");\r\n        uint256 _laff = plyr_[_pID].laff;\r\n        uint256 _totalNames = plyr_[_pID].names;\r\n        bytes32 _name = plyr_[_pID].name;\r\n        \r\n        for (uint256 i = 1; i <= gID_; i++){\r\n            games_[i].receivePlayerInfo(_pID, _addr, _name, _laff);\r\n            if (_totalNames > 1)\r\n                for (uint256 ii = 1; ii <= _totalNames; ii++)\r\n                    games_[i].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);\r\n        }\r\n    }\r\n\r\n    function useMyOldName(string _nameString) isHuman() public {\r\n        // filter name, and get pID\r\n        bytes32 _name = _nameString.nameFilter();\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n        // make sure they own the name \r\n        require(plyrNames_[_pID][_name] == true, \"Thats not a name you own\");\r\n        \r\n        // update their current name \r\n        plyr_[_pID].name = _name;\r\n    }\r\n    /**\r\n     PlayerBookInterface Interface \r\n     */\r\n    function getPlayerID(address _addr) external returns (uint256){\r\n        determinePID(_addr);\r\n        return (pIDxAddr_[_addr]);\r\n    }\r\n\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32){\r\n        return (plyr_[_pID].name);\r\n    }\r\n\r\n    function getPlayerLAff(uint256 _pID) external view returns (uint256) {\r\n        return (plyr_[_pID].laff);\r\n    }\r\n\r\n    function getPlayerAddr(uint256 _pID) external view returns (address) {\r\n        return (plyr_[_pID].addr);\r\n    }\r\n\r\n    function getNameFee() external view returns (uint256){\r\n        return (registrationFee_);\r\n    }\r\n    \r\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) \r\n        isRegisteredGame()\r\n        external payable returns(bool, uint256){\r\n        // \u8981\u6c42\u6ce8\u518c\u8d39\u7528,\u4e0d\u9700\u8981\u4ed8\u8d39\r\n        //require (msg.value >= registrationFee_, \"You have to pay the name fee\");\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        uint256 _affID = _affCode;\r\n        if (_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID) {\r\n            plyr_[_pID].laff = _affID;\r\n        } else if (_affID == _pID) {\r\n            _affID = 0;\r\n        }      \r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n        return(_isNewPlayer, _affID);\r\n    }\r\n    //\r\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) \r\n        isRegisteredGame()\r\n        external payable returns(bool, uint256){\r\n        // \u8981\u6c42\u6ce8\u518c\u8d39\u7528,\u4e0d\u9700\u8981\u4ed8\u8d39\r\n        //require (msg.value >= registrationFee_, \"You have to pay the name fee\");\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        uint256 _affID;\r\n        if (_affCode != address(0) && _affCode != _addr){\r\n            _affID = pIDxAddr_[_affCode];\r\n            if (_affID != plyr_[_pID].laff){\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        \r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n        \r\n        return(_isNewPlayer, _affID);    \r\n    }\r\n    //\r\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) \r\n        isRegisteredGame()\r\n        external payable returns(bool, uint256){\r\n        // \u8981\u6c42\u6ce8\u518c\u8d39\u7528,\u4e0d\u9700\u8981\u4ed8\u8d39\r\n        //require (msg.value >= registrationFee_, \"You have to pay the name fee\");\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        uint256 _affID;\r\n        if (_affCode != \"\" && _affCode != _name){\r\n            _affID = pIDxName_[_affCode];\r\n            if (_affID != plyr_[_pID].laff){\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n        return(_isNewPlayer, _affID);            \r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"addMeToAllGames\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNameFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"},{\"name\":\"_gameNameStr\",\"type\":\"string\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXnameFromDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"addMeToGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrNameList_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddrFromDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"useMyOldName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXIDFromDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameIDs_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"names\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerLAff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"initCommunityAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"}]", "ContractName": "PlayerBook", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://25508bc72d1ec741dfc3a25ffa07cd82f61e66501d6ae60c5376060ff1163245"}]}