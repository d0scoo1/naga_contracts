{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable {\r\n    address public owner; \r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner { require(owner == msg.sender, \"Not Owner!\"); _; }\r\n    function transferOwnership(address new_) external onlyOwner { owner = new_; }\r\n}\r\n\r\ninterface iZenApe {\r\n    function changeName(uint256 tokenId_, string memory name_) external;\r\n    function changeBio(uint256 tokenId_, string memory bio_) external;\r\n    function zenApeName(uint256 tokenId_) external view returns (string memory);\r\n    function zenApeBio(uint256 tokenId_) external view returns (string memory);\r\n}\r\n\r\ninterface iZenToken {\r\n    function burnAsController(address from_, uint256 amount_) external;\r\n}\r\n\r\ncontract zenApeBioManager is Ownable {\r\n\r\n    iZenApe public ZenApe = iZenApe(0x838804a3dd7c717396a68F94E736eAf76b911632);\r\n    iZenToken public ZenToken = iZenToken(0x884345a7B7E7fFd7F4298aD6115f5d5afb2F7660);\r\n\r\n    uint256 public changeNamePrice = 10 ether;\r\n    uint256 public changeBioPrice = 20 ether;\r\n\r\n    function setChangeNamePrice(uint256 price_) external onlyOwner { \r\n        changeNamePrice = price_; }\r\n    function setChangeBioPrice(uint256 price_) external onlyOwner {\r\n        changeBioPrice = price_; }\r\n    \r\n    // For Burnerable functions, an invalid-amount burnAsController will trigger\r\n    // to Solidity 8.0's underflow check and fail the function with no error message\r\n    // in return, this saves a bit of gas from requiring to query balanceOf(msg.sender)\r\n    function changeName(uint256 tokenId_, string calldata name_) public {\r\n        ZenToken.burnAsController(msg.sender, changeNamePrice);\r\n        ZenApe.changeName(tokenId_, name_);\r\n    }\r\n    function changeBio(uint256 tokenId_, string calldata bio_) public {\r\n        ZenToken.burnAsController(msg.sender, changeBioPrice);\r\n        ZenApe.changeBio(tokenId_, bio_);\r\n    }\r\n\r\n    // Read Function for Easy Server Querying\r\n    struct NameAndBio {\r\n        string name;\r\n        string bio;\r\n    }\r\n    function getNamesAndBiosOfZenApes(uint256 start_, uint256 end_) external\r\n    view returns (NameAndBio[] memory) {\r\n        uint256 _length = end_ - start_ + 1;\r\n        uint256 _endPlus = end_ + 1;\r\n        uint256 _index;\r\n        NameAndBio[] memory _NameAndBio = new NameAndBio[](_length);\r\n\r\n        for (uint256 i = start_; i < _endPlus;) {\r\n            string memory _name  = ZenApe.zenApeName(i);\r\n            string memory _bio   = ZenApe.zenApeBio(i);\r\n            _NameAndBio[_index] = NameAndBio(_name, _bio);\r\n            unchecked { ++i; ++_index; }\r\n        }\r\n        return _NameAndBio;\r\n    }\r\n    function getAllNamesAndBiosOfZenApes() external view \r\n    returns (NameAndBio[5002] memory) {\r\n        NameAndBio[5002] memory _NameAndBio;\r\n        for (uint256 i; i < 5002;) {\r\n            string memory _name  = ZenApe.zenApeName(i);\r\n            string memory _bio   = ZenApe.zenApeBio(i);\r\n            _NameAndBio[i] = NameAndBio(_name, _bio);\r\n            unchecked { ++i; }\r\n        }\r\n        return _NameAndBio;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"ZenApe\",\"outputs\":[{\"internalType\":\"contract iZenApe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZenToken\",\"outputs\":[{\"internalType\":\"contract iZenToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"bio_\",\"type\":\"string\"}],\"name\":\"changeBio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeBioPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeNamePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNamesAndBiosOfZenApes\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"internalType\":\"struct zenApeBioManager.NameAndBio[5002]\",\"name\":\"\",\"type\":\"tuple[5002]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_\",\"type\":\"uint256\"}],\"name\":\"getNamesAndBiosOfZenApes\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"internalType\":\"struct zenApeBioManager.NameAndBio[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setChangeBioPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setChangeNamePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "zenApeBioManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://280c0df2eba1d65ff2567dc0577542c64f489766a6920748cab497f77bce5780"}]}