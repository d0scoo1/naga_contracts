{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract MyLeaders {\r\n    struct User {\r\n        uint32 id;\r\n        address referrer;\r\n        mapping(uint8 => bool) eligibility;\r\n        mapping(uint8 => mapping(uint8 => uint16)) premiumReinvestCount;\r\n        mapping(uint8 => mapping(uint8 => bool)) reinvestEligibility;\r\n        mapping(uint8 => uint256) accumulatedReward;              // Rewards accumulated if the user is not active\r\n        // All mappings use key matrixCode to refer to Millionaire or Junior Club which is a uint8\r\n        mapping(uint8 => uint256) partnersCount;\r\n        mapping(uint8 => bool) firstReferral;  // Whether the user was the first direct referral to his referrer\r\n        mapping(uint8 => bool) isActive;\r\n        mapping(uint8 => mapping(uint8 => bool)) activeBonusMatrixLevels;\r\n        mapping(uint8 => bool) activePrimaryMatrixLevels;\r\n        mapping(uint8 => bool) thirdLinePayout;\r\n        mapping(uint8 => Matrix3x3) primaryMatrix;\r\n        mapping(uint8 => mapping(uint8 => bool)) activeEliteMatrixLevels;\r\n        mapping(uint8 => bool) activeBillionaireMatrixLevels;\r\n    }\r\n    \r\n    struct Matrix3x3 {\r\n        address currentReferrer;\r\n        uint8 level;\r\n        uint64 position;\r\n        mapping(uint8 => mapping(uint64 => address))levelReferrals;\r\n        mapping(uint8 => uint64) levelReferralCount;\r\n    }\r\n    \r\n    uint8 constant base = 3;\r\n    bool initializer;\r\n    uint8 public MATRIX_CODE;\r\n    address payable public owner;\r\n    address payable public manager;\r\n    uint32 public lastUserId;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint32 => address) public idToAddress;\r\n    mapping(address => uint) public balances; \r\n    mapping(uint8 =>  mapping(uint8 => uint)) public rewards;           // Mapping of various reward payouts\r\n    mapping(uint8 => uint) public matrixCodePrice;\r\n    \r\n    mapping(uint8 => mapping(uint8 => mapping(uint8 => uint8))) globalTreeLevel;  // Mapping MATRIX_CODE => matrixType => matrixLevel => treeLevel;\r\n    mapping(uint8 => mapping(uint8 => mapping(uint8 => mapping(uint8 => address[])))) globalTreePosition;   // mapping MATRIX_CODE => matrixType => matrixLevel => treeLevel => address[]\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId, uint8 matrixCode, uint32 timestamp);\r\n    event SubAccountRegistration(address indexed user, address indexed parent, uint indexed userId, uint32 timestamp);\r\n\r\n    event NewUserPlace(address indexed user, uint256 userId, address indexed referrer, uint8 matrixType, uint8 matrixCode, uint64 place, uint8 level, uint256 cycleCount, uint32 timestamp);\r\n    event EthPayout(uint256 userId, uint8 matrixCode, uint8 payoutType, uint256 amount, uint32 timestamp);\r\n\r\n    event Reinvest(address indexed user, uint8 matrix, uint8 matrixType, uint8 level, uint32 timestamp);\r\n\r\n    function initialize(address payable ownerAddress, address payable managerAddress) public {\r\n        require(!initializer, \"MyLeaders: Already initialized\");\r\n        initializer=true;\r\n        MATRIX_CODE=3;\r\n        lastUserId=2;\r\n        matrixCodePrice[1] = 6 ether;\r\n        matrixCodePrice[2] = 1.25 ether;\r\n        matrixCodePrice[3] = 0.25 ether;\r\n        matrixCodePrice[0] = 7.25 ether;        // JUMP Start\r\n        \r\n\r\n        /**Reward Type:\r\n         * 1) Direct Partner: 6 ETH / 1.25 ETH\r\n         * 2) Bonus Profit II: 18 ETH / 3.75 ETH\r\n         * 3) Elite II: 200 ETH / 0 ETH\r\n         * 4) Elite III: 400 ETH / 0 ETH\r\n         * 5) Elite IV: 800 ETH / 0 ETH\r\n         * 6) Final Elite (Position 1): 480 ETH (1480-1000) / 104 ETH\r\n         * 7) Final Elite (Position 2/3): 1546 ETH / 117.75 ETH\r\n         * 8) All 27 positions filled: 24 ETH / 5 ETH\r\n         * 9) Final Billionaire (Position 1): 8000 ETH / 0 ETH\r\n         * 10) Final Billionaire (Position 2/3): 9000 ETH\r\n         **/\r\n        \r\n        rewards[1][1] = 6 ether;\r\n        rewards[2][1] = 1.25 ether;\r\n        rewards[1][2] = 18 ether;\r\n        rewards[2][2] = 3.75 ether;\r\n        rewards[1][3] = 200 ether;\r\n        rewards[1][4] = 400 ether;\r\n        rewards[1][5] = 800 ether;\r\n        rewards[1][6] = 480 ether;\r\n        rewards[2][6] = 104 ether;\r\n        rewards[1][7] = 1546 ether;\r\n        rewards[2][7] = 117.75 ether;\r\n        rewards[1][8] = 24 ether;\r\n        rewards[2][8] = 5 ether;\r\n        rewards[1][9] = 8000 ether;\r\n        rewards[1][10] = 9000 ether;\r\n        \r\n        owner = ownerAddress;\r\n        manager = managerAddress;\r\n        \r\n        users[ownerAddress].id = 1;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= MATRIX_CODE; i++) {\r\n            users[ownerAddress].activePrimaryMatrixLevels[i] = true;\r\n            users[ownerAddress].primaryMatrix[i].position=1;\r\n            users[ownerAddress].primaryMatrix[i].levelReferrals[0][1]=ownerAddress;\r\n            emit Registration(ownerAddress, address(0), 1, 0, i, uint32(block.timestamp));\r\n            for (uint8 j = 1; j <= 5; j++) {\r\n                if(j<=2){\r\n                    users[owner].activeBonusMatrixLevels[i][j] = true;\r\n                    globalTreePosition[i][1][j][0].push(owner);\r\n                    globalTreeLevel[i][1][j] = 1;\r\n                    \r\n                }\r\n                if((i==2&&j<=3) || i==1){\r\n                    users[owner].activeEliteMatrixLevels[i][j] = true;\r\n                    globalTreePosition[i][2][j][0].push(owner);\r\n                    globalTreeLevel[i][2][j] = 1;\r\n                }\r\n                \r\n                if(i==1 && j<=3) {\r\n                    // Registering the Billionaire Club\r\n                    users[owner].activeBillionaireMatrixLevels[j] = true;\r\n                    globalTreePosition[1][3][j][0].push(owner);\r\n                    globalTreeLevel[1][3][j] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function millionaireRegistrationExt(address newAddress) external {\r\n        require(users[msg.sender].eligibility[1], \"Not eligible\");\r\n        delete users[msg.sender].eligibility[1];\r\n        emit SubAccountRegistration(newAddress, msg.sender, lastUserId, uint32(block.timestamp));\r\n        registration(newAddress, msg.sender, 1);\r\n    }\r\n    \r\n    function adminRegistrationExt(address referrerAddress, address userAddress, uint8 matrixCode) external payable {\r\n        require(msg.sender==manager, \"Unauthorized\");\r\n        require(matrixCode>=0 && matrixCode<=MATRIX_CODE, \"Invalid Matrix Code\");\r\n        \r\n        if(matrixCode==0) {\r\n            require(!isRegisteredUser(userAddress, 1), \"User already exists in this matrixCode\");\r\n            require(!isRegisteredUser(userAddress, 2), \"User already exists in this matrixCode\");\r\n\r\n            registration(userAddress, referrerAddress, 1);\r\n            registration(userAddress, referrerAddress, 2);\r\n        }\r\n        else {\r\n            require(!isRegisteredUser(userAddress, matrixCode), \"User already exists in this matrixCode\");\r\n            registration(userAddress, referrerAddress, matrixCode);\r\n        }\r\n    }\r\n\r\n    function registrationExt(address referrerAddress, uint8 matrixCode) external payable {\r\n        require(matrixCode>=0 && matrixCode<=MATRIX_CODE, \"Invalid Matrix Code\");\r\n        require(msg.value == matrixCodePrice[matrixCode], \"Invalid Registration Cost\");\r\n\r\n\r\n        if(matrixCode==0) {\r\n            require(!isRegisteredUser(msg.sender, 1), \"User already exists in this matrixCode\");\r\n            require(!isRegisteredUser(msg.sender, 2), \"User already exists in this matrixCode\");\r\n\r\n            registration(msg.sender, referrerAddress, 1);\r\n            registration(msg.sender, referrerAddress, 2);\r\n        }\r\n        else {\r\n            require(!isRegisteredUser(msg.sender, matrixCode), \"User already exists in this matrixCode\");\r\n            registration(msg.sender, referrerAddress, matrixCode);\r\n        }\r\n    }\r\n    \r\n    function bilionaireRegistrationExt(uint8 choice) external payable {\r\n        require(users[msg.sender].eligibility[4], \"Unauthorized\");\r\n        require(choice==1||choice==2, \"Only 2 choices\");\r\n        if(choice==1){\r\n            users[msg.sender].eligibility[4]=false;\r\n            userSecondaryPlacement(msg.sender, 1, 1, 3);\r\n        } else {\r\n            delete users[msg.sender].eligibility[4];\r\n            msg.sender.transfer(1000 ether);\r\n            emit EthPayout(users[msg.sender].id, 1, 11, 1000 ether, uint32(block.timestamp));\r\n\r\n            \r\n        }\r\n    }\r\n    \r\n    function registration(address userAddress, address referrerAddress, uint8 matrixCode) private {\r\n        \r\n        require(users[referrerAddress].id != 0, \"Referrer does not exist\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"Cannot be a contract\");\r\n        \r\n        if(users[userAddress].id==0) {\r\n            //Registering user in User Address Directory\r\n            users[userAddress].id = lastUserId;\r\n            users[userAddress].referrer = referrerAddress;\r\n            \r\n            idToAddress[lastUserId] = userAddress;\r\n            users[userAddress].referrer = referrerAddress;\r\n            lastUserId++;\r\n        }\r\n        users[userAddress].activePrimaryMatrixLevels[matrixCode] = true;\r\n        users[userAddress].primaryMatrix[matrixCode].position=1;\r\n        users[userAddress].primaryMatrix[matrixCode].levelReferrals[0][1]=userAddress;\r\n        address currentReferrer = referrerAddress;\r\n        \r\n        if(!isRegisteredUser(referrerAddress, matrixCode)){\r\n            currentReferrer = findFreeReferrer(referrerAddress, matrixCode);    // Finding referrer for cross buying cases\r\n        }\r\n        \r\n        // Direct Partners\r\n        users[referrerAddress].partnersCount[matrixCode]++;\r\n                \r\n        /** Making referrer active partner\r\n         * Active Partner is Partner with at least 3 direct associates\r\n         **/\r\n        if(users[referrerAddress].partnersCount[matrixCode]==3){\r\n            users[referrerAddress].isActive[matrixCode] = true; \r\n            if(users[referrerAddress].accumulatedReward[matrixCode]>0){\r\n                delete users[referrerAddress].accumulatedReward[matrixCode];\r\n                address(uint160(referrerAddress)).transfer(users[referrerAddress].accumulatedReward[matrixCode]);\r\n            }\r\n        }\r\n        \r\n        if(users[referrerAddress].partnersCount[matrixCode]==1){\r\n            // Sending reward for first direct associate\r\n            sendRewards(referrerAddress, matrixCode, 1);\r\n            users[userAddress].firstReferral[matrixCode] = true;\r\n        }\r\n        \r\n        userPlacement(currentReferrer, userAddress, matrixCode);             // Primary Placement in TurboPower3x3\r\n        \r\n        address partner = users[users[userAddress].primaryMatrix[matrixCode].currentReferrer].primaryMatrix[matrixCode].currentReferrer; \r\n        address superPartner = users[partner].primaryMatrix[matrixCode].currentReferrer; \r\n\r\n         // Bonus Matrix Logic\r\n        if(checkBonusMatrixCriteria(partner, matrixCode)){\r\n            userSecondaryPlacement(partner, matrixCode, 1, 1);\r\n            users[partner].activeBonusMatrixLevels[matrixCode][1] = true;\r\n        }\r\n        \r\n        // Elite Matrix Logic\r\n        if(checkEliteMatrixCriteria(superPartner, matrixCode)) {\r\n            userSecondaryPlacement(superPartner, matrixCode, 1, 2);\r\n            users[superPartner].activeEliteMatrixLevels[matrixCode][1] = true;\r\n        }\r\n        \r\n        // Third Line payout\r\n        if(checkThirdLineCriteria(superPartner, matrixCode)) {\r\n            sendRewards(superPartner, matrixCode, 8);\r\n            users[superPartner].thirdLinePayout[matrixCode] = true;\r\n        }\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id, matrixCode, uint32(block.timestamp));\r\n    }\r\n    \r\n    function findFreeReferrer(address referrerAddress, uint8 matrixCode) private view returns(address) {\r\n        while (referrerAddress!=address(0)) {\r\n            if (usersActivePrimaryMatrixLevels(referrerAddress, matrixCode)) {\r\n                return referrerAddress;\r\n            }\r\n            \r\n            referrerAddress = users[referrerAddress].referrer;\r\n        }\r\n        return owner;\r\n    }\r\n\r\n    function checkBonusMatrixCriteria(address partnerAddress, uint8 matrixCode) private view returns(bool) {\r\n        if(partnerAddress==owner) {\r\n            return false;\r\n        }\r\n        else if(users[partnerAddress].activeBonusMatrixLevels[matrixCode][1]){ // Check is Partner already has a bonus Matrix\r\n            return false;\r\n        }\r\n        else if(partnerAddress!=address(0)){\r\n            if(users[partnerAddress].primaryMatrix[matrixCode].levelReferralCount[2]<2){  // Minimum two users in second line\r\n                return false;\r\n            }\r\n            else {\r\n                for(uint64 i=0; i<users[partnerAddress].primaryMatrix[matrixCode].levelReferralCount[2]; i++){\r\n                    if(!users[users[partnerAddress].primaryMatrix[matrixCode].levelReferrals[2][i]].firstReferral[matrixCode]){\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n            \r\n    }\r\n    \r\n    function checkEliteMatrixCriteria(address superPartner, uint8 matrixCode) public view returns(bool) {\r\n        // Elite Matrix Logic\r\n        return (superPartner!=owner && \r\n                !users[superPartner].activeEliteMatrixLevels[matrixCode][1] &&                   // Check is Partner already has a bonus Matrix\r\n                users[superPartner].isActive[matrixCode] &&                                     // If Super Partner is active \r\n                users[superPartner].primaryMatrix[matrixCode].levelReferralCount[2]==9 &&   //Partner on the second line has all 9 positions filled\r\n                users[superPartner].primaryMatrix[matrixCode].levelReferralCount[3]>=21);  // any 21 of the 27 positions in the third line\r\n    }\r\n    \r\n    function checkThirdLineCriteria(address superPartner, uint8 matrixCode) private view returns(bool) {\r\n        return (!users[superPartner].thirdLinePayout[matrixCode] &&                             // Check if Super Partner has already claimed thirdLinePayout\r\n                users[superPartner].isActive[matrixCode] &&                                    // If Super Partner is active \r\n                users[superPartner].primaryMatrix[matrixCode].levelReferralCount[3]==27);  // All 27 positions in the third line are filled\r\n    }\r\n    \r\n    function usersActivePrimaryMatrixLevels(address userAddress, uint8 matrixCode) public view returns(bool) {\r\n        return users[userAddress].activePrimaryMatrixLevels[matrixCode];\r\n    }\r\n\r\n    function usersActiveBonusMatrixLevels(address userAddress, uint8 matrixCode, uint8 level) private view returns(bool) {\r\n        return users[userAddress].activeBonusMatrixLevels[matrixCode][level];\r\n    }\r\n    \r\n    function usersActiveEliteMatrixLevels(address userAddress, uint8 matrixCode, uint8 level) private view returns(bool) {\r\n        return users[userAddress].activeEliteMatrixLevels[matrixCode][level];\r\n    }\r\n    \r\n    function usersActiveBonusMatrixLevelsExt(address userAddress, uint8 matrixCode) external view returns(bool, bool) {\r\n        return (users[userAddress].activeBonusMatrixLevels[matrixCode][1], users[userAddress].activeBonusMatrixLevels[matrixCode][2]);\r\n    }\r\n    \r\n    function usersActiveEliteMatrixLevelsExt(address userAddress, uint8 matrixCode) external view returns(bool, bool, bool, bool, bool) {\r\n        return (users[userAddress].activeEliteMatrixLevels[matrixCode][1], \r\n                users[userAddress].activeEliteMatrixLevels[matrixCode][2],\r\n                users[userAddress].activeEliteMatrixLevels[matrixCode][3],\r\n                users[userAddress].activeEliteMatrixLevels[matrixCode][4],\r\n                users[userAddress].activeEliteMatrixLevels[matrixCode][5]);\r\n    }\r\n\r\n    function isRegisteredUser(address user, uint8 matrixCode) public view returns (bool) {\r\n        return (users[user].activePrimaryMatrixLevels[matrixCode]);\r\n    }\r\n    \r\n    function userPlacement(address referrerAddress, address userAddress, uint8 matrixCode) private {\r\n        for(uint i = users[referrerAddress].primaryMatrix[matrixCode].position; i<=(base)**users[referrerAddress].primaryMatrix[matrixCode].level; i++) {\r\n            address firstReferrer = users[referrerAddress].primaryMatrix[matrixCode].levelReferrals[users[referrerAddress].primaryMatrix[matrixCode].level][users[referrerAddress].primaryMatrix[matrixCode].position];\r\n            users[userAddress].primaryMatrix[matrixCode].currentReferrer=firstReferrer;\r\n            if(users[firstReferrer].primaryMatrix[matrixCode].levelReferralCount[1] < base) {\r\n                updatePosition(userAddress,firstReferrer, matrixCode);\r\n                if(users[firstReferrer].primaryMatrix[matrixCode].levelReferralCount[1] == base) {\r\n                    updateLevel(referrerAddress, matrixCode);\r\n                }\r\n                break;\r\n            }\r\n            else {\r\n                updateLevel(referrerAddress, matrixCode);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function userSecondaryPlacement(address userAddress, uint8 matrixCode, uint8 matrixLevel, uint8 secondaryMatrixType) private {\r\n        uint8 currentTreeLevel = globalTreeLevel[matrixCode][secondaryMatrixType][matrixLevel];\r\n        address referrerAddress = globalTreePosition[matrixCode][secondaryMatrixType][matrixLevel][currentTreeLevel-1][(globalTreePosition[matrixCode][secondaryMatrixType][matrixLevel][currentTreeLevel].length)/3];\r\n        globalTreePosition[matrixCode][secondaryMatrixType][matrixLevel][currentTreeLevel].push(userAddress);\r\n        emit NewUserPlace(userAddress, users[userAddress].id, referrerAddress, secondaryMatrixType+1, matrixCode, uint64(globalTreePosition[matrixCode][secondaryMatrixType][matrixLevel][currentTreeLevel].length-1)%3+1, matrixLevel, users[referrerAddress].premiumReinvestCount[matrixCode][secondaryMatrixType]+1, uint32(block.timestamp));\r\n        \r\n        // For Bonus Matrix Level 2 Rewards\r\n        if(matrixLevel==2 && secondaryMatrixType==1) {\r\n            sendRewards(referrerAddress, matrixCode, 2); \r\n        }\r\n        \r\n        uint256 positionModulus = globalTreePosition[matrixCode][secondaryMatrixType][matrixLevel][currentTreeLevel].length%3;\r\n        \r\n        if(positionModulus== 0) {\r\n            //Upgrade referrerAddress\r\n            if(referrerAddress!=owner && \r\n                ((secondaryMatrixType==1 && matrixLevel<2) ||       // Bonus Matrix upgrades max to level 2\r\n                (secondaryMatrixType==2 && ((matrixCode==1 && matrixLevel<5) || ((matrixCode==2||matrixCode==3) && matrixLevel<3))) ||\r\n                (secondaryMatrixType==3 && matrixLevel<3)\r\n            )) {         \r\n                // Upgrade partner to next level \r\n                userSecondaryPlacement(referrerAddress, matrixCode, matrixLevel+1, secondaryMatrixType);\r\n                if(secondaryMatrixType==1)\r\n                    users[referrerAddress].activeBonusMatrixLevels[matrixCode][matrixLevel+1] = true;\r\n                else if(secondaryMatrixType==2)\r\n                    users[referrerAddress].activeEliteMatrixLevels[matrixCode][matrixLevel+1] = true;\r\n                else \r\n                    users[referrerAddress].activeBillionaireMatrixLevels[matrixLevel+1] = true;\r\n            }\r\n            \r\n            if(secondaryMatrixType==2 || secondaryMatrixType==3){             \r\n               if((matrixCode==1 && matrixLevel==5) ||((matrixCode==2||matrixCode==3||secondaryMatrixType==3) && matrixLevel==3)) {\r\n                    if(users[referrerAddress].reinvestEligibility[matrixCode][secondaryMatrixType]){\r\n                        users[referrerAddress].premiumReinvestCount[matrixCode][secondaryMatrixType]++;     \r\n                        delete users[referrerAddress].reinvestEligibility[matrixCode][secondaryMatrixType];\r\n                    }\r\n                    sendRewards(referrerAddress, matrixCode, secondaryMatrixType==3? 10: 7);\r\n                }\r\n            } else if(secondaryMatrixType==3 && matrixLevel==3){\r\n                sendRewards(referrerAddress, matrixCode, 10);\r\n            }\r\n            \r\n            \r\n            if(globalTreePosition[matrixCode][secondaryMatrixType][matrixLevel][currentTreeLevel].length==3**uint256(currentTreeLevel)){\r\n                // Updating the tree level\r\n                globalTreeLevel[matrixCode][secondaryMatrixType][matrixLevel] = currentTreeLevel+1;\r\n            }\r\n            \r\n        } else if(secondaryMatrixType==2||secondaryMatrixType==3) {\r\n            if(positionModulus == 1) {\r\n                if((matrixCode==2||matrixCode==3) && matrixLevel==2){\r\n                    // Register in Millionaire/Junior club\r\n                    if(!isRegisteredUser(referrerAddress, 1)) {\r\n                        registration(referrerAddress, users[referrerAddress].referrer, matrixCode-1);\r\n                    } else {\r\n                        users[referrerAddress].eligibility[matrixCode-1] = true;\r\n                    }\r\n                } else if((matrixCode==1 && matrixLevel==5) ||((matrixCode==2||matrixCode==3||secondaryMatrixType==3) && matrixLevel==3)){\r\n                    // Bonus Auto Reinvest\r\n                    users[referrerAddress].reinvestEligibility[matrixCode][secondaryMatrixType]=true;\r\n                    userSecondaryPlacement(referrerAddress, matrixCode, 1, secondaryMatrixType);\r\n                    emit Reinvest(referrerAddress, matrixCode, secondaryMatrixType, matrixLevel, uint32(block.timestamp));\r\n                    // Premium Elite Profits\r\n                    sendRewards(referrerAddress, matrixCode, secondaryMatrixType==3 ? 9: 6);\r\n                    if(matrixCode==1 && secondaryMatrixType==2 && referrerAddress!=owner){\r\n                        users[referrerAddress].eligibility[4]=true;\r\n                    }\r\n                }\r\n                \r\n            } else if(positionModulus == 2) {\r\n                // Premium Elite Profits\r\n                if(matrixCode==1 && matrixLevel>=2 && matrixLevel<5 && secondaryMatrixType!=3) {\r\n                    sendRewards(referrerAddress, matrixCode, matrixLevel+1);\r\n                } else if((matrixCode==1 && matrixLevel==5) ||((matrixCode==2||matrixCode==3||secondaryMatrixType==3) && matrixLevel==3)) {\r\n                    sendRewards(referrerAddress, matrixCode, secondaryMatrixType==3? 10: 7);\r\n                }\r\n            }\r\n        }\r\n    }\r\n        \r\n    function updateLevel(address referrerAddress, uint8 matrixCode) private {\r\n        users[referrerAddress].primaryMatrix[matrixCode].position++;\r\n        if(users[referrerAddress].primaryMatrix[matrixCode].position > base**(users[referrerAddress].primaryMatrix[matrixCode].level)) {\r\n            users[referrerAddress].primaryMatrix[matrixCode].level++;\r\n            users[referrerAddress].primaryMatrix[matrixCode].position = 1;\r\n        }\r\n    }\r\n    \r\n    function updatePosition(address userAddress,address firstReferrer, uint8 matrixCode) private {\r\n        uint8 _level=1;\r\n        uint index;\r\n        uint64 pos;\r\n        address startUser = userAddress;\r\n        while(firstReferrer!= address(0)) {\r\n            users[firstReferrer].primaryMatrix[matrixCode].levelReferralCount[_level]++;\r\n            if(_level == 1){\r\n              pos = users[firstReferrer].primaryMatrix[matrixCode].levelReferralCount[_level];\r\n            }else{\r\n              for(uint64 i = 1;i <= (users[firstReferrer].primaryMatrix[matrixCode].levelReferralCount[1]);i++){\r\n                    if(userAddress==users[firstReferrer].primaryMatrix[matrixCode].levelReferrals[1][i]){\r\n                         index = i;\r\n                    } \r\n                }\r\n                pos = pos + uint64(3**(uint256(_level)-1)*(index-1));\r\n            }\r\n            if(_level<=3){\r\n              emit NewUserPlace(startUser, users[startUser].id, firstReferrer, 1, matrixCode, pos, _level, 1, uint32(block.timestamp));\r\n            }\r\n            users[firstReferrer].primaryMatrix[matrixCode].levelReferrals[_level][pos] = startUser;\r\n            _level++;\r\n            userAddress = firstReferrer; \r\n            firstReferrer = users[firstReferrer].primaryMatrix[matrixCode].currentReferrer;   \r\n        }\r\n    }\r\n    \r\n    function userInfo(address userAddress, uint8 matrixCode) public view returns(uint256, bool, bool, bool, bool){\r\n        return (users[userAddress].accumulatedReward[matrixCode], users[userAddress].isActive[matrixCode], users[userAddress].eligibility[4], users[userAddress].eligibility[1], users[userAddress].eligibility[2]);\r\n    }\r\n\r\n    function sendRewards(address recipient, uint8 matrixCode, uint8 rewardType) private {\r\n        uint256 rewardAmount;\r\n        if(matrixCode==3){\r\n            rewardAmount = rewards[2][rewardType]/5;\r\n        }\r\n        else {\r\n            rewardAmount = rewards[matrixCode][rewardType];\r\n        }\r\n        if (rewardAmount!=0) {\r\n            if(rewardType==2 && !users[recipient].isActive[matrixCode]){\r\n                users[recipient].accumulatedReward[matrixCode]+=rewardAmount;\r\n            }\r\n            else {\r\n                emit EthPayout(users[recipient].id, matrixCode, rewardType, rewardAmount, uint32(block.timestamp));\r\n                return address(uint160(recipient)).transfer(rewardAmount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function smartContractBalance() external view returns (uint256) {\r\n        return (address(this).balance);\r\n    }\r\n    \r\n    function adminWithdrawal() external {\r\n        require(msg.sender==owner, \"Unauthorized access\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function transferManager(address payable managerAddress) external {\r\n        require(msg.sender==manager, \"Unauthorized access\");\r\n        manager=managerAddress;\r\n    }\r\n    \r\n    // Deposit Fallback\r\n    function() external payable {}\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"payoutType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"EthPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrixType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"place\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycleCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrixType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"SubAccountRegistration\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MATRIX_CODE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"adminRegistrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"bilionaireRegistrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"superPartner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"checkEliteMatrixCriteria\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"isRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"matrixCodePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"millionaireRegistrationExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"usersActiveBonusMatrixLevelsExt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"usersActiveEliteMatrixLevelsExt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrixCode\",\"type\":\"uint8\"}],\"name\":\"usersActivePrimaryMatrixLevels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MyLeaders", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://98567f928649b7d3643c6f8464b851c7480390d34f1e11ca40bc1550a8221f2f"}]}