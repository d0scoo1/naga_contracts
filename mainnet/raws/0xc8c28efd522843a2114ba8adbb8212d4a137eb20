{"status": "1", "message": "OK", "result": [{"SourceCode": "/*                                                  ``  .:;:` ` `                                        \r\n                                                    .#W##@W#,` `                                       \r\n                                                  `;x#######M*`                                        \r\n                                                  i@###########`                                       \r\n                                                 ,W############n.                                      \r\n                                                `#####@z+n@#####n```                                   \r\n                                             `  ,W###Wi```i######z` `                                  \r\n                                             `  i####*`` .+######@#`                                   \r\n                                             ` `+####: ``########@@#.                                  \r\n                                               `z####,``:@###########`                                 \r\n                                             `  +####:  ####@WM@######```                              \r\n                                             ` `i####i `M###M:,ix@###W:`                               \r\n                                            ` `,n#####`.##### ``.n####n`                               \r\n                                             `;W@####W;.@###+`` `,M####i``                             \r\n                                          ```.M#######M+@###+`` ``*####M,`` ` `                        \r\n                                             *##############+ `   ,@####z` ` `                         \r\n                                          ` .x#@##W@#@####### `` ``n####@;` ` `                        \r\n                                       `  ` :W###M,*@#######z     `*#####M. ``                         \r\n                                         ` `*@####``########n``````,@######` `                         \r\n                                           `z###@i `,@######x. `   `x#####@;                           \r\n                                        ` ``x###W.` `z######W,    ` +@#####x.                          \r\n                                        ` ``W###M`` `i@#####@:      :W######+`                         \r\n                                         ` `@###x`  `,W#####@;`  ` `.x######W,                         \r\n                                         ` .@###z ` ``M#####@i   `  `+#######n`                        \r\n                                         ` :@###+     ######@i      `:#######@i` `                     \r\n                                           i####i     *######+ `     .W#######M.``                     \r\n                                           +###@:     :@#####z``     `##########` `                    \r\n                                          `z###@,     ,W#####M`      `;########@, `                    \r\n                                          `n###W.     .M#####W`       .W########n``                    \r\n                                         `.M###x.     .M#####@`     ` `z########@i  ``                 \r\n                                         `:@###z`     .x######,      ``i@########M.` ``                \r\n                                       `` i####*`     .x######:       `,W###@W####+````                \r\n                                         `z####:`     `n######i`    ````x###@z@###W, ` `               \r\n                                     `   ,W###W.      `n#######`      ``z####+x#####``                 \r\n                                    `  ``+####z`      `n######n`      ` *####z;@###W:`                 \r\n                                     ```:@###@;       `n######x.    ` ` ,@###x.z####n``                \r\n                                    ```,x####n`` `    .x######M.    `  `.W@##W:.W###@;                 \r\n                                   ` `;x@###@; `      .M######W.        `n####i`+####x.                \r\n                    `    `      ` ``.*W#####+``       ,W######W:        `+#####`,M###@i` ` `           \r\n                      ````` `  `.;*n@#####@#`      `  ,@######@i         ;@###n` *####M.  `            \r\n                     `    ` .;#xM@@######@#.     `  ``*########*         ,@###W.`.M###@*`   `          \r\n                          `*x@##########@*``      ` ``n########+         `M###@:``*@###W`  `           \r\n                    ` ` `iM###########@z:`       `   ,W########z          ####@i` `x####*` `           \r\n               ` `   ``,n@#########@M#:`          `  +###@n####n`  `      i####+`` i@###x.`            \r\n                `   ``;W#######@x+i:.`             ``n###W;W###x ```      :@###n`  .x###@;             \r\n               ` `  `#@#####@xi.`   ````          ` :@###n`M###x`  `     `.M###M` ` i####n``           \r\n                ` `,n@#####Mi`` `   `  `         ` .n###@i n###M,` `      `n###@.  `.M###@:`           \r\n                  .n#####@#. `   ```` `          ``i@###M.`z###W,  `       #####.`  `+##### `          \r\n           `  `  .M#####M;``                  `   .W####*` +###@,`  `     `+####,` ``.W###@`           \r\n           ``   ,x#####n,` `                      #####M. `*###@;        ` *####:  `  z####;`          \r\n             ``.x##@##n.  `                    ` :@###@i`  +###@i ` `      i####i   ` i@####`          \r\n           ` `.M######` `  ``                   .x@###z`   z###@;        ` :@###*`   `.M###x`          \r\n          ```,x####@#``      `               ` `+@###W,  ``n###@;` `       .W###+    ``x###M.          \r\n        ` ``.n####@#`                        ``;W####+``  `n###@;`        `.W###z`   ``z###M,          \r\n      `` ` `n######`                         `,W####n`   ``n###W,`        `.W###n`   ``z###W,          \r\n        ` .z@###@n`                          ,x####M,`  ` `x###M.`        `.M###x`    `n###M.          \r\n ``   `  :x@####n.  `                      ``z####@i`   ` `@###x`  ``      `x###x`    .x###x.          \r\nz*i,.`.:#@#####n.  `                     ` `+@####*``     ,####z `       ` `x###M.    ,M###n`          \r\n##@WMxM@######n.                        `  :@###@z`      `i####*           `x###M.  ` :W####`          \r\n############@n.`                          .x####M,` ` ` ``z###W:           `n###M,   `i@###i`          \r\n###########Wi```                          *####W, ` ` `  `x###M.           `n###W:    z###@,           \r\nW@######@M#,`                            ,W###@*` ``     ,W###n`           `z###@;  ``M###W`           \r\n,;*zxMx#i,`    `                   ` ` ``+@###x` `   ` ``i####+`           `####@i  `:@###n `          \r\n   ````  `                          ``  .W###W: `     ` `z####,            `####@i ``*###@*            \r\n      `  `                          ` ``+####z```      `,W###W`            `####@i  `n###W:`           \r\n`     ```                              :W###@: ` `    ``#####z``           `####@i  ,@###n.            \r\n  `       `                         ` `x####W.` `     .#####@; `           `####W; `*####* `           \r\n                                    ``i@#####zi,...,:+x@####n``            `####W, .x###@,` `          \r\n                                     .W########@MMMW@######W,`             `####M. :W###n` `           \r\n                                   ``+####################W:` `            `####M, #####+` ``          \r\n                                   `:W####W@############@x;``` `           `####M,`W###@, ` `          \r\n                                   `n####n;#M@########Wni. ````            `####M.;@###n `             \r\n                                ` `i@###W,``.:*#nxx#+;.` `                 `z###M:z###@i               \r\n                               `  .M##### ` `  ``..` ``  `                 `n###M*@###M.               \r\n                                ``+####M.`      ``  `                      `n###Wx#####`               \r\n                               ` ,W###@i  `          ``                    `n########@:                \r\n                              `  :@###n` `  `     `                        `x########n``               \r\n                               ` .n##W,`                                 ` `x#######@i                 \r\n                                ` .##:``                                   .M#######M` `               \r\n                              `                                           `.M######## `                \r\n                               `                                          `.W######W:                  \r\n                                 ` ` ` `                                  `.W#######``                 \r\n                                                                           ,@#####@: `                 \r\n                                                                           ;@#####n``                  \r\n                                                                          `i#####@;    `               \r\n                                                                           *#####n`````                \r\n                                                                         ` #####@i`   `                \r\n                                                                          `z####x.                     \r\n                                                                          `n####i`                     \r\n                                                                         ``x###W.`                     \r\n                                                                          :W###n``                     \r\n                                                                          +####*``                     \r\n                                                                       ``.W###@,                       \r\n                                                                     ` ``+####n`` `                    \r\n                                                                     `  ,W###@; `                      \r\n                                                                      ``z####n` `                      \r\nn+**ii;:,,..```                   `     `            ````        `   ``+@###@:`                        \r\n######@WWMxxxnnz#+*;:,..```````   `` `` `       `   `             `  `i@@###z`                         \r\n####################@@WWWWMxxn#+*i;;:,,,...`    `       ``       `` `+@####M.`                         \r\n#################################@@@@W@WWWMnzz#+**i:.`     `   `` `:z@####W: `                         \r\n@@#@###############################################@Mz+*;,.````.,izM#####Wi` `                         \r\n:,:;;i*+nnxMMW@@@@@#####################################@@@WMMMW@#######Wi` `                          \r\n  `    ```....,,,:;**+znxxxMMMW@@@#####################################x;` `  `                        \r\n`             `    ` ```````..,;i*+++#zznnxM@@@#################@####@z,````                           \r\n        ``          `` ```  `  `  ``      `.,.,::;*zx@#############M#:` `                              \r\n   `  `                      ``````            `  ``..:;*##xxxxxz*:.` `   ``                           \r\n                                                        ``````````  `                                  \r\n                                                                                                       \r\n                                                         ```    ```                                    \r\n                                                                                                       \r\n                                                            CT6 \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: lib/SafeERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary SafeERC20 {\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        /* solium-disable-next-line */\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        /* solium-disable-next-line */\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        /* solium-disable-next-line */\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(\r\n                0x23b872dd,\r\n                from,\r\n                to,\r\n                value\r\n            )\r\n        );\r\n\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n}\r\n// File: lib/SafeMath.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n// File: lib/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: browser/WhitelistSale.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ncontract WhitelistSale is Ownable {\r\n\r\n    /* ========== Libraries ========== */\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== Struct ========== */\r\n\r\n    struct Participant {\r\n        uint256 allocation;\r\n        uint256 spent;\r\n    }\r\n\r\n    /* ========== Variables ========== */\r\n\r\n    IERC20 public currency;\r\n\r\n    mapping (address => Participant) public participants;\r\n\r\n    uint256 public totalHardCap;\r\n\r\n    uint256 public totalRaised;\r\n\r\n    bool public saleOpen;\r\n\r\n    /* ========== Events ========== */\r\n\r\n    event AllocationClaimed(address user, uint256 amount);\r\n\r\n    event AllocationSet(address user, uint256 amount);\r\n\r\n    event SaleStatusUpdated(bool status);\r\n\r\n    event HardCapUpdated(uint256 amount);\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(address currencyAddress) public {\r\n        currency = IERC20(currencyAddress);\r\n        saleOpen = false;\r\n    }\r\n\r\n    /* ========== Public Functions ========== */\r\n\r\n    function claimAllocation(\r\n        uint256 amount\r\n    )\r\n        external\r\n    {\r\n        // Get their total spend till date\r\n        uint256 participantSpent = participants[msg.sender].spent.add(amount);\r\n\r\n        uint256 newTotalRaised = totalRaised.add(amount);\r\n\r\n        require(\r\n            participantSpent <= participants[msg.sender].allocation,\r\n            \"You cannot spend more than your allocation\"\r\n        );\r\n\r\n        require(\r\n            saleOpen,\r\n            \"The sale is not currently open\"\r\n        );\r\n\r\n        require(\r\n            newTotalRaised <= totalHardCap,\r\n            \"You cannot purchase more than the hard cap\"\r\n        );\r\n\r\n        // Increase the user's spend amount otherwise they can keep purchasing\r\n        participants[msg.sender].spent = participantSpent;\r\n\r\n        totalRaised = newTotalRaised;\r\n\r\n        // Transfer the funds to the owner, no funds will be stored in this contract directly.\r\n        currency.safeTransferFrom(\r\n            msg.sender,\r\n            owner(),\r\n            amount\r\n        );\r\n\r\n        emit AllocationClaimed(msg.sender, amount);\r\n    }\r\n\r\n    /* ========== Admin Functions ========== */\r\n\r\n    function setHardCap(uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        totalHardCap = amount;\r\n\r\n        emit HardCapUpdated(amount);\r\n    }\r\n\r\n    function setAllocation(\r\n        address[] calldata users,\r\n        uint256[] calldata allocations\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        // If there is a mismatch something hasn't been done correctly\r\n        require(\r\n            users.length == allocations.length,\r\n            \"The users and amounts do not match\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            participants[users[i]].allocation = allocations[i];\r\n\r\n            emit AllocationSet(users[i], allocations[i]);\r\n        }\r\n    }\r\n\r\n    function updateSaleStatus(\r\n        bool status\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            saleOpen != status,\r\n            \"Cannot re-set the same status\"\r\n        );\r\n\r\n        saleOpen = status;\r\n\r\n        emit SaleStatusUpdated(status);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllocationClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllocationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HardCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SaleStatusUpdated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"}],\"name\":\"setAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSaleStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhitelistSale", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a707487f59bcb409794c9832bafbe8321eec1d06e5533fe06532ace04b20167a"}]}