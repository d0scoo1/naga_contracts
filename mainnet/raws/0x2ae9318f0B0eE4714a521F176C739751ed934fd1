{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/@openzeppelin/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/@openzeppelin/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Staking.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.14;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @title AGFI Staking\r\n\r\n * @author Aggregated Finance\r\n\r\n * @notice AGFIStaking is a contract that allows AGFI deposits and receives AGFI sent from the AGFI staking tax channel\r\n\r\n * harvests. Users deposit AGFI and receive a share of what has been sent from the AGFI contract based on their participation of\r\n\r\n * the total deposited AGFI.\r\n\r\n * This contract is a fork from sJOE, but just rewarding the same token that is staked \r\n\r\n * Every time `updateReward(token)` is called, We distribute the balance of that tokens as rewards to users that are\r\n\r\n * currently staking inside this contract, and they can claim it using `withdraw(0)`\r\n\r\n */\r\n\r\ncontract AGFIStaking is Ownable, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n\r\n    /// @notice Info of each user\r\n\r\n    struct UserInfo {\r\n\r\n        uint256 amount;\r\n\r\n        mapping(IERC20 => uint256) rewardDebt;\r\n\r\n        /**\r\n\r\n         * @notice We do some fancy math here. Basically, any point in time, the amount of AGFI\r\n\r\n         * entitled to a user but is pending to be distributed is:\r\n\r\n         *\r\n\r\n         *   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt[token]\r\n\r\n         *\r\n\r\n         * Whenever a user deposits or withdraws AGFI. Here's what happens:\r\n\r\n         *   1. accRewardPerShare (and `lastRewardBalance`) gets updated\r\n\r\n         *   2. User receives the pending reward sent to his/her address\r\n\r\n         *   3. User's `amount` gets updated\r\n\r\n         *   4. User's `rewardDebt[token]` gets updated\r\n\r\n         */\r\n\r\n    }\r\n\r\n\r\n\r\n    IERC20 public agfi;\r\n\r\n\r\n\r\n    /// @dev Internal balance of AGFI, this gets updated on user deposits / withdrawals\r\n\r\n    /// this allows to reward users with AGFI\r\n\r\n    uint256 public internalAGFIBalance;\r\n\r\n    /// @notice Array of tokens that users can claim\r\n\r\n    IERC20[] public rewardTokens;\r\n\r\n    mapping(IERC20 => bool) public isRewardToken;\r\n\r\n    /// @notice Last reward balance of `token`\r\n\r\n    mapping(IERC20 => uint256) public lastRewardBalance;\r\n\r\n\r\n\r\n    address public feeCollector;\r\n\r\n\r\n\r\n    /// @notice The deposit fee, scaled to `DEPOSIT_FEE_PERCENT_PRECISION`\r\n\r\n    uint256 public depositFeePercent;\r\n\r\n    /// @notice The precision of `depositFeePercent`\r\n\r\n    uint256 public DEPOSIT_FEE_PERCENT_PRECISION;\r\n\r\n\r\n\r\n    /// @notice Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\r\n\r\n    mapping(IERC20 => uint256) public accRewardPerShare;\r\n\r\n    /// @notice The precision of `accRewardPerShare`\r\n\r\n    uint256 public ACC_REWARD_PER_SHARE_PRECISION;\r\n\r\n\r\n\r\n    /// @dev Info of each user that stakes AGFI\r\n\r\n    mapping(address => UserInfo) private userInfo;\r\n\r\n\r\n\r\n    /// @notice Emitted when a user deposits AGFI\r\n\r\n    event Deposit(address indexed user, uint256 amount, uint256 fee);\r\n\r\n\r\n\r\n    /// @notice Emitted when owner changes the deposit fee percentage\r\n\r\n    event DepositFeeChanged(uint256 newFee, uint256 oldFee);\r\n\r\n\r\n\r\n    /// @notice Emitted when a user withdraws AGFI\r\n\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n\r\n\r\n    /// @notice Emitted when a user claims reward\r\n\r\n    event ClaimReward(address indexed user, address indexed rewardToken, uint256 amount);\r\n\r\n\r\n\r\n    /// @notice Emitted when a user emergency withdraws its AGFI\r\n\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n\r\n\r\n\r\n    /// @notice Emitted when owner adds a token to the reward tokens list\r\n\r\n    event RewardTokenAdded(address token);\r\n\r\n\r\n\r\n    /// @notice Emitted when owner removes a token from the reward tokens list\r\n\r\n    event RewardTokenRemoved(address token);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Initialize a new AGFIStaking contract\r\n\r\n     * @dev This contract needs to receive an ERC20 `_rewardToken` in order to distribute them\r\n\r\n     * @param _rewardToken The address of the ERC20 reward token\r\n\r\n     * @param _agfi The address of the AGFI token\r\n\r\n     * @param _feeCollector The address where deposit fees will be sent\r\n\r\n     * @param _depositFeePercent The deposit fee percent, scalled to 1e18, e.g. 3% is 3e16\r\n\r\n     */\r\n\r\n    constructor(\r\n\r\n        IERC20 _rewardToken,\r\n\r\n        IERC20 _agfi,\r\n\r\n        address _feeCollector,\r\n\r\n        uint256 _depositFeePercent\r\n\r\n    ) {\r\n\r\n        require(address(_rewardToken) != address(0), \"AGFIStaking: reward token can't be address(0)\");\r\n\r\n        require(address(_agfi) != address(0), \"AGFIStaking: agfi can't be address(0)\");\r\n\r\n        require(_feeCollector != address(0), \"AGFIStaking: fee collector can't be address(0)\");\r\n\r\n        require(_depositFeePercent <= 5e17, \"AGFIStaking: max deposit fee can't be greater than 50%\");\r\n\r\n\r\n\r\n        agfi = _agfi;\r\n\r\n        depositFeePercent = _depositFeePercent;\r\n\r\n        feeCollector = _feeCollector;\r\n\r\n\r\n\r\n        isRewardToken[_rewardToken] = true;\r\n\r\n        rewardTokens.push(_rewardToken);\r\n\r\n        DEPOSIT_FEE_PERCENT_PRECISION = 1e18;\r\n\r\n        ACC_REWARD_PER_SHARE_PRECISION = 1e24;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Deposit AGFI for reward token allocation\r\n\r\n     * @param _amount The amount of AGFI to deposit\r\n\r\n     */\r\n\r\n    function deposit(uint256 _amount) external nonReentrant {\r\n\r\n        UserInfo storage user = userInfo[_msgSender()];\r\n\r\n\r\n\r\n        uint256 _fee = _amount.mul(depositFeePercent).div(DEPOSIT_FEE_PERCENT_PRECISION);\r\n\r\n        uint256 _amountMinusFee = _amount.sub(_fee);\r\n\r\n\r\n\r\n        uint256 _previousAmount = user.amount;\r\n\r\n        uint256 _newAmount = user.amount.add(_amountMinusFee);\r\n\r\n        user.amount = _newAmount;\r\n\r\n\r\n\r\n        uint256 _len = rewardTokens.length;\r\n\r\n        for (uint256 i; i < _len; i++) {\r\n\r\n            IERC20 _token = rewardTokens[i];\r\n\r\n            updateReward(_token);\r\n\r\n\r\n\r\n            uint256 _previousRewardDebt = user.rewardDebt[_token];\r\n\r\n            user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(ACC_REWARD_PER_SHARE_PRECISION);\r\n\r\n\r\n\r\n            if (_previousAmount != 0) {\r\n\r\n                uint256 _pending = _previousAmount\r\n\r\n                    .mul(accRewardPerShare[_token])\r\n\r\n                    .div(ACC_REWARD_PER_SHARE_PRECISION)\r\n\r\n                    .sub(_previousRewardDebt);\r\n\r\n                if (_pending != 0) {\r\n\r\n                    safeTokenTransfer(_token, _msgSender(), _pending);\r\n\r\n                    emit ClaimReward(_msgSender(), address(_token), _pending);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        internalAGFIBalance = internalAGFIBalance.add(_amountMinusFee);\r\n\r\n        agfi.safeTransferFrom(_msgSender(), feeCollector, _fee);\r\n\r\n        agfi.safeTransferFrom(_msgSender(), address(this), _amountMinusFee);\r\n\r\n        emit Deposit(_msgSender(), _amountMinusFee, _fee);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Get user info\r\n\r\n     * @param _user The address of the user\r\n\r\n     * @param _rewardToken The address of the reward token\r\n\r\n     * @return The amount of AGFI user has deposited\r\n\r\n     * @return The reward debt for the chosen token\r\n\r\n     */\r\n\r\n    function getUserInfo(address _user, IERC20 _rewardToken) external view returns (uint256, uint256) {\r\n\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        return (user.amount, user.rewardDebt[_rewardToken]);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Get the number of reward tokens\r\n\r\n     * @return The length of the array\r\n\r\n     */\r\n\r\n    function rewardTokensLength() external view returns (uint256) {\r\n\r\n        return rewardTokens.length;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Add a reward token\r\n\r\n     * @param _rewardToken The address of the reward token\r\n\r\n     */\r\n\r\n    function addRewardToken(IERC20 _rewardToken) external onlyOwner {\r\n\r\n        require(\r\n\r\n            !isRewardToken[_rewardToken] && address(_rewardToken) != address(0),\r\n\r\n            \"AGFIStaking: token can't be added\"\r\n\r\n        );\r\n\r\n        require(rewardTokens.length < 25, \"AGFIStaking: list of token too big\");\r\n\r\n        rewardTokens.push(_rewardToken);\r\n\r\n        isRewardToken[_rewardToken] = true;\r\n\r\n        updateReward(_rewardToken);\r\n\r\n        emit RewardTokenAdded(address(_rewardToken));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Remove a reward token\r\n\r\n     * @param _rewardToken The address of the reward token\r\n\r\n     */\r\n\r\n    function removeRewardToken(IERC20 _rewardToken) external onlyOwner {\r\n\r\n        require(isRewardToken[_rewardToken], \"AGFIStaking: token can't be removed\");\r\n\r\n        updateReward(_rewardToken);\r\n\r\n        isRewardToken[_rewardToken] = false;\r\n\r\n        uint256 _len = rewardTokens.length;\r\n\r\n        for (uint256 i; i < _len; i++) {\r\n\r\n            if (rewardTokens[i] == _rewardToken) {\r\n\r\n                rewardTokens[i] = rewardTokens[_len - 1];\r\n\r\n                rewardTokens.pop();\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        emit RewardTokenRemoved(address(_rewardToken));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Set the deposit fee percent\r\n\r\n     * @param _depositFeePercent The new deposit fee percent\r\n\r\n     */\r\n\r\n    function setDepositFeePercent(uint256 _depositFeePercent) external onlyOwner {\r\n\r\n        require(_depositFeePercent <= 5e17, \"AGFIStaking: deposit fee can't be greater than 50%\");\r\n\r\n        uint256 oldFee = depositFeePercent;\r\n\r\n        depositFeePercent = _depositFeePercent;\r\n\r\n        emit DepositFeeChanged(_depositFeePercent, oldFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice View function to see pending reward token on frontend\r\n\r\n     * @param _user The address of the user\r\n\r\n     * @param _token The address of the token\r\n\r\n     * @return `_user`'s pending reward token\r\n\r\n     */\r\n\r\n    function pendingReward(address _user, IERC20 _token) external view returns (uint256) {\r\n\r\n        require(isRewardToken[_token], \"AGFIStaking: wrong reward token\");\r\n\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 _totalAGFI = internalAGFIBalance;\r\n\r\n        uint256 _accRewardTokenPerShare = accRewardPerShare[_token];\r\n\r\n\r\n\r\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\r\n\r\n        uint256 _rewardBalance = _token == agfi ? _currRewardBalance.sub(_totalAGFI) : _currRewardBalance;\r\n\r\n\r\n\r\n        if (_rewardBalance != lastRewardBalance[_token] && _totalAGFI != 0) {\r\n\r\n            uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\r\n\r\n            _accRewardTokenPerShare = _accRewardTokenPerShare.add(\r\n\r\n                _accruedReward.mul(ACC_REWARD_PER_SHARE_PRECISION).div(_totalAGFI)\r\n\r\n            );\r\n\r\n        }\r\n\r\n        return\r\n\r\n            user.amount.mul(_accRewardTokenPerShare).div(ACC_REWARD_PER_SHARE_PRECISION).sub(user.rewardDebt[_token]);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Withdraw AGFI and harvest the rewards\r\n\r\n     * @param _amount The amount of AGFI to withdraw\r\n\r\n     */\r\n\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n\r\n        UserInfo storage user = userInfo[_msgSender()];\r\n\r\n        uint256 _previousAmount = user.amount;\r\n\r\n        require(_amount <= _previousAmount, \"AGFIStaking: withdraw amount exceeds balance\");\r\n\r\n        uint256 _newAmount = user.amount.sub(_amount);\r\n\r\n        user.amount = _newAmount;\r\n\r\n\r\n\r\n        uint256 _len = rewardTokens.length;\r\n\r\n        if (_previousAmount != 0) {\r\n\r\n            for (uint256 i; i < _len; i++) {\r\n\r\n                IERC20 _token = rewardTokens[i];\r\n\r\n                updateReward(_token);\r\n\r\n\r\n\r\n                uint256 _pending = _previousAmount\r\n\r\n                    .mul(accRewardPerShare[_token])\r\n\r\n                    .div(ACC_REWARD_PER_SHARE_PRECISION)\r\n\r\n                    .sub(user.rewardDebt[_token]);\r\n\r\n                user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(ACC_REWARD_PER_SHARE_PRECISION);\r\n\r\n\r\n\r\n                if (_pending != 0) {\r\n\r\n                    safeTokenTransfer(_token, _msgSender(), _pending);\r\n\r\n                    emit ClaimReward(_msgSender(), address(_token), _pending);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        internalAGFIBalance = internalAGFIBalance.sub(_amount);\r\n\r\n        agfi.safeTransfer(_msgSender(), _amount);\r\n\r\n        emit Withdraw(_msgSender(), _amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY\r\n\r\n     */\r\n\r\n    function emergencyWithdraw() external nonReentrant {\r\n\r\n        UserInfo storage user = userInfo[_msgSender()];\r\n\r\n\r\n\r\n        uint256 _amount = user.amount;\r\n\r\n        user.amount = 0;\r\n\r\n        uint256 _len = rewardTokens.length;\r\n\r\n        for (uint256 i; i < _len; i++) {\r\n\r\n            IERC20 _token = rewardTokens[i];\r\n\r\n            user.rewardDebt[_token] = 0;\r\n\r\n        }\r\n\r\n        internalAGFIBalance = internalAGFIBalance.sub(_amount);\r\n\r\n        agfi.safeTransfer(_msgSender(), _amount);\r\n\r\n        emit EmergencyWithdraw(_msgSender(), _amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Update reward variables\r\n\r\n     * @param _token The address of the reward token\r\n\r\n     * @dev Needs to be called before any deposit or withdrawal\r\n\r\n     */\r\n\r\n    function updateReward(IERC20 _token) public {\r\n\r\n        require(isRewardToken[_token], \"AGFIStaking: wrong reward token\");\r\n\r\n\r\n\r\n        uint256 _totalAGFI = internalAGFIBalance;\r\n\r\n\r\n\r\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\r\n\r\n        uint256 _rewardBalance = _token == agfi ? _currRewardBalance.sub(_totalAGFI) : _currRewardBalance;\r\n\r\n\r\n\r\n        // Did AGFIStaking receive any token\r\n\r\n        if (_rewardBalance == lastRewardBalance[_token] || _totalAGFI == 0) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\r\n\r\n\r\n\r\n        accRewardPerShare[_token] = accRewardPerShare[_token].add(\r\n\r\n            _accruedReward.mul(ACC_REWARD_PER_SHARE_PRECISION).div(_totalAGFI)\r\n\r\n        );\r\n\r\n        lastRewardBalance[_token] = _rewardBalance;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @notice Safe token transfer function, just in case if rounding error\r\n\r\n     * causes pool to not have enough reward tokens\r\n\r\n     * @param _token The address of then token to transfer\r\n\r\n     * @param _to The address that will receive `_amount` `rewardToken`\r\n\r\n     * @param _amount The amount to send to `_to`\r\n\r\n     */\r\n\r\n    function safeTokenTransfer(\r\n\r\n        IERC20 _token,\r\n\r\n        address _to,\r\n\r\n        uint256 _amount\r\n\r\n    ) internal {\r\n\r\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\r\n\r\n        uint256 _rewardBalance = _token == agfi ? _currRewardBalance.sub(internalAGFIBalance) : _currRewardBalance;\r\n\r\n\r\n\r\n        if (_amount > _rewardBalance) {\r\n\r\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_rewardBalance);\r\n\r\n            _token.safeTransfer(_to, _rewardBalance);\r\n\r\n        } else {\r\n\r\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_amount);\r\n\r\n            _token.safeTransfer(_to, _amount);\r\n\r\n        }\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_agfi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARD_PER_SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_FEE_PERCENT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agfi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalAGFIBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFeePercent\",\"type\":\"uint256\"}],\"name\":\"setDepositFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AGFIStaking", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d0f56d728c5232ab07faa0bdcba23670a35451f0000000000000000000000004d0f56d728c5232ab07faa0bdcba23670a35451f0000000000000000000000003e822d55e79ea9f53c744bd9179d89ddec0815560000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ebe555f0d1ca76034b9485e4bdbde0f2705e5ba9e8dd5ab20082333455c8f41"}]}