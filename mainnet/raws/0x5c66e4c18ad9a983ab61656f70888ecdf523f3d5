{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        require(adr != owner, \"OWNER cant be unauthorized\");\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr, uint256 confirm) public onlyOwner {\r\n        require(confirm == 911911911,\"Accidental Press\"); // just paranoid\r\n        require(adr != owner, \"Already the owner\");\r\n        authorizations[owner] = false;\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract DEMOCRACYLAND is ERC20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address WETH;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"Democracy Land\";\r\n    string constant _symbol = \"DLAND\";\r\n    uint8 constant _decimals = 4;\r\n\r\n    uint256 _totalSupply = 100 * 10**6 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount = _totalSupply / 200;\r\n    uint256 public _maxWalletToken = _totalSupply / 100;\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    bool public blacklistMode = true;\r\n    mapping (address => bool) public isBlacklisted;\r\n\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n\r\n    uint256 public liquidityFee = 2;\r\n    uint256 public presidentFee = 1;\r\n    uint256 public marketingFee = 3;\r\n    uint256 public teamFee = 3;\r\n    uint256 public devFee = 1;\r\n    uint256 public totalFee = marketingFee + liquidityFee + teamFee + devFee + presidentFee;\r\n    uint256 public constant feeDenominator = 100;\r\n\r\n    uint256 sellMultiplier = 200;\r\n    uint256 buyMultiplier = 100;\r\n    uint256 transferMultiplier = 200;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public marketingFeeReceiver;\r\n    address public teamFeeReceiver;\r\n    address public devFeeReceiver;\r\n    address public presidentFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public tradingOpen = false;\r\n    bool public launchMode = true;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 1 / 1000;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        autoLiquidityReceiver = msg.sender;\r\n        marketingFeeReceiver = 0x81c172D71776Ef866550eb216Be2788D9f1456da;\r\n        teamFeeReceiver = 0x861508edD3dEE9110B65FE66A0D01931C830F2e0;\r\n        devFeeReceiver = 0x277BdadF7A82Ab1a9C5Cac664abfdF748aFF3486;\r\n        presidentFeeReceiver = 0xbBB39c4C72410d113EfE1442026E061C509148E6;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n        isTxLimitExempt[ZERO] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n\r\n        isWalletLimitExempt[msg.sender] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[DEAD] = true;\r\n        isWalletLimitExempt[marketingFeeReceiver] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner {\r\n        require(maxWallPercent_base1000 >= 1,\"Cannot set max wallet less than 0.1%\");\r\n        _maxWalletToken = (_totalSupply * maxWallPercent_base1000 ) / 1000;\r\n    }\r\n    function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000) external onlyOwner {\r\n        require(maxTXPercentage_base1000 >= 1,\"Cannot set max transaction less than 0.1%\");\r\n        _maxTxAmount = (_totalSupply * maxTXPercentage_base1000 ) / 1000;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(tradingOpen,\"Trading not open yet\");\r\n        }\r\n\r\n        // Blacklist\r\n        if(blacklistMode){\r\n            require(!isBlacklisted[sender],\"Blacklisted\");    \r\n        }\r\n\r\n        if (!authorizations[sender] && !isWalletLimitExempt[sender] && !isWalletLimitExempt[recipient] && recipient != pair) {\r\n            require((balanceOf(recipient) + amount) <= _maxWalletToken,\"max wallet limit reached\");\r\n        }\r\n    \r\n        // Checks max transaction limit\r\n        require((amount <= _maxTxAmount) || isTxLimitExempt[sender] || isTxLimitExempt[recipient], \"Max TX Limit Exceeded\");\r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = (isFeeExempt[sender] || isFeeExempt[recipient]) ? amount : takeFee(sender, amount, recipient);\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount, address recipient) internal returns (uint256) {\r\n\r\n        uint256 multiplier = transferMultiplier;\r\n\r\n        if(recipient == pair) {\r\n            multiplier = sellMultiplier;\r\n        } else if(sender == pair) {\r\n            multiplier = buyMultiplier;\r\n        }\r\n\r\n        uint256 feeAmount = amount.mul(totalFee).mul(multiplier).div(feeDenominator * 100);\r\n\r\n        if(feeAmount > 0){\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(msg.sender).transfer(amountETH * amountPercentage / 100);\r\n    }\r\n\r\n    function clearStuckToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success) {\r\n        if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        return ERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function setMultipliers(uint256 _buy, uint256 _sell, uint256 _trans) external authorized {\r\n        sellMultiplier = _sell;\r\n        buyMultiplier = _buy;\r\n        transferMultiplier = _trans;\r\n\r\n        require(totalFee.mul(buyMultiplier).div(100) < 25, \"Tax cannot be more than 24%\");\r\n        require(totalFee.mul(sellMultiplier).div(100) < 25, \"Tax cannot be more than 24%\");\r\n    }\r\n\r\n    // switch Trading\r\n    function tradingStatus(bool _status) external onlyOwner {\r\n        if(!_status){\r\n            require(launchMode,\"Cannot stop trading after launch is done\");\r\n        }\r\n        tradingOpen = _status;\r\n    }\r\n\r\n    function tradingStatus_launchmode(uint256 confirm) external onlyOwner {\r\n        require(confirm == 911911911,\"Accidental Press\"); // just paranoid\r\n        require(tradingOpen,\"Cant close launch mode when trading is disabled\");\r\n        launchMode = false;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 amountToLiquify = swapThreshold.mul(liquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\r\n        \r\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n        uint256 amountETHteam = amountETH.mul(teamFee).div(totalETHFee);\r\n        uint256 amountETHDev = amountETH.mul(devFee).div(totalETHFee);\r\n        uint256 amountETHpresident = amountETH.mul(presidentFee).div(totalETHFee);\r\n\r\n        payable(marketingFeeReceiver).transfer(amountETHMarketing);\r\n        payable(teamFeeReceiver).transfer(amountETHteam);\r\n        payable(devFeeReceiver).transfer(amountETHDev);\r\n        payable(presidentFeeReceiver).transfer(amountETHpresident);\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n\r\n    function manage_blacklist_status(bool _status) external onlyOwner {\r\n        if(_status){\r\n            require(launchMode,\"Cannot turn on blacklistMode after launch is done\");\r\n        }\r\n        blacklistMode = _status;\r\n    }\r\n\r\n\r\n\r\n    function manage_blacklist(address[] calldata addresses, bool status) external onlyOwner {\r\n        require(addresses.length < 201,\"GAS Error: max limit is 200 addresses\");\r\n        if(status){\r\n            require(launchMode,\"Cannot manually blacklist after launch\");\r\n        }\r\n\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isBlacklisted[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function manage_FeeExempt(address[] calldata addresses, bool status) external authorized {\r\n        require(addresses.length < 501,\"GAS Error: max limit is 500 addresses\");\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isFeeExempt[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function manage_TxLimitExempt(address[] calldata addresses, bool status) external authorized {\r\n        require(addresses.length < 501,\"GAS Error: max limit is 500 addresses\");\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isTxLimitExempt[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function manage_WalletLimitExempt(address[] calldata addresses, bool status) external authorized {\r\n        require(addresses.length < 501,\"GAS Error: max limit is 500 addresses\");\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isWalletLimitExempt[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee,  uint256 _marketingFee, uint256 _teamFee, uint256 _devFee, uint256 _presidentFee) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        teamFee = _teamFee;\r\n        devFee = _devFee;\r\n        presidentFee = _presidentFee;\r\n        totalFee = _liquidityFee + _marketingFee + _teamFee + _devFee + _presidentFee;\r\n        \r\n        require(totalFee.mul(buyMultiplier).div(100) < 25, \"Tax cannot be more than 24%\");\r\n        require(totalFee.mul(sellMultiplier).div(100) < 25, \"Tax cannot be more than 24%\");\r\n\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver, address _teamFeeReceiver, address _devFeeReceiver, address _presidentFeeReceiver) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        teamFeeReceiver = _teamFeeReceiver;\r\n        devFeeReceiver = _devFeeReceiver;\r\n        presidentFeeReceiver = _presidentFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n\r\nfunction multiTransfer(address from, address[] calldata addresses, uint256[] calldata tokens) external onlyOwner {\r\n    require(launchMode,\"Cannot execute this after launch is done\");\r\n\r\n    require(addresses.length < 501,\"GAS Error: max airdrop limit is 500 addresses\");\r\n    require(addresses.length == tokens.length,\"Mismatch between Address and token count\");\r\n\r\n    uint256 SCCC = 0;\r\n\r\n    for(uint i=0; i < addresses.length; i++){\r\n        SCCC = SCCC + tokens[i];\r\n    }\r\n\r\n    require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n    for(uint i=0; i < addresses.length; i++){\r\n        _basicTransfer(from,addresses[i],tokens[i]);\r\n    }\r\n\r\n}\r\n\r\nevent AutoLiquify(uint256 amountETH, uint256 amountTokens);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_FeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_TxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_WalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist_status\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presidentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presidentFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presidentFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presidentFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"confirm\",\"type\":\"uint256\"}],\"name\":\"tradingStatus_launchmode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"confirm\",\"type\":\"uint256\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DEMOCRACYLAND", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7673b1f8504c3f46092490986c560130473a56e0eda6e2244f2ce1b0d504034"}]}