{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/MetadataV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"base64/base64.sol\\\";\\nimport \\\"./Image.sol\\\";\\nimport \\\"./HotChainSVG.sol\\\";\\n\\ncontract MetadataV1 is Image, Metadata {\\n    function uri(uint256 tokenId, string memory name)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        address collection = address(uint160(tokenId));\\n        uint96 value = uint96(tokenId >> 160);\\n        uint8 level = getLevel(value);\\n\\n        string memory image = Base64.encode(\\n            bytes(render(name, collection, level))\\n        );\\n        string memory json = string.concat(\\n            '{\\\"name\\\":\\\"',\\n            escape(name),\\n            ' is using Hot Chain SVG\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Level\\\",\\\"value\\\":',\\n            utils.uint2str(level + 1),\\n            '}],\\\"image\\\": \\\"data:image/svg+xml;base64,',\\n            image,\\n            '\\\"}'\\n        );\\n        return\\n            string.concat(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(bytes(json))\\n            );\\n    }\\n\\n    function escape(string memory name) internal pure returns (string memory) {\\n        bytes memory chars = bytes(name);\\n        for (uint256 i = 0; i < chars.length; i++) {\\n            if (uint8(chars[i]) == 34) {\\n                chars[i] = bytes1(uint8(39));\\n            }\\n        }\\n        return name;\\n    }\\n\\n    function getLevel(uint96 value) internal pure returns (uint8) {\\n        if (value >= 2 ether) {\\n            return 4;\\n        }\\n        if (value >= 1 ether) {\\n            return 3;\\n        }\\n        if (value >= 0.1 ether) {\\n            return 2;\\n        }\\n        if (value >= 0.01 ether) {\\n            return 1;\\n        }\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/base64/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Image.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"base64/base64.sol\\\";\\nimport \\\"./SVG.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./TinierFont.sol\\\";\\n\\ncontract Image {\\n    function render(\\n        string memory name,\\n        address collection,\\n        uint8 level\\n    ) public pure returns (string memory) {\\n        string[2][5] memory levels = [\\n            [\\\"#AAAAAA\\\", \\\"#424242\\\"],\\n            [\\\"#4E7AD4\\\", \\\"#70DA99\\\"],\\n            [\\\"#E5C075\\\", \\\"#70DA99\\\"],\\n            [\\\"#F1CD89\\\", \\\"#9943D1\\\"],\\n            [\\\"#F9F365\\\", \\\"#F27400\\\"]\\n        ];\\n        string memory startColor = levels[level][0];\\n        string memory stopColor = levels[level][1];\\n\\n        return\\n            string.concat(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"350\\\" height=\\\"350\\\" style=\\\"background:#000;font-family:Courier New\\\">',\\n                styles(),\\n                logo(),\\n                info(name, collection),\\n                svg.el(\\n                    \\\"defs\\\",\\n                    \\\"\\\",\\n                    svg.el(\\n                        \\\"linearGradient\\\",\\n                        string.concat(\\n                            svg.prop(\\\"id\\\", \\\"grd\\\"),\\n                            svg.prop(\\\"x1\\\", \\\"0\\\"),\\n                            svg.prop(\\\"y1\\\", \\\"0\\\"),\\n                            svg.prop(\\\"x2\\\", \\\"180\\\"),\\n                            svg.prop(\\\"y2\\\", \\\"180\\\"),\\n                            svg.prop(\\\"gradientUnits\\\", \\\"userSpaceOnUse\\\")\\n                        ),\\n                        string.concat(\\n                            svg.el(\\\"stop\\\", svg.prop(\\\"stop-color\\\", startColor)),\\n                            svg.el(\\n                                \\\"stop\\\",\\n                                string.concat(\\n                                    svg.prop(\\\"stop-color\\\", stopColor),\\n                                    svg.prop(\\\"offset\\\", \\\"1\\\")\\n                                )\\n                            )\\n                        )\\n                    )\\n                ),\\n                \\\"</svg>\\\"\\n            );\\n    }\\n\\n    function tinierFontData() public pure returns (bytes memory) {\\n        return TinierFont.fontdata;\\n    }\\n\\n    function tinierFontBase64() public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:font/ttf;base64,\\\",\\n                string(Base64.encode(TinierFont.fontdata))\\n            );\\n    }\\n\\n    function tinierFontFace() public pure returns (string memory) {\\n        return\\n            string.concat(\\n                '@font-face{font-family:tinier;src:url(\\\"',\\n                tinierFontBase64(),\\n                '\\\" format(ttf);}'\\n            );\\n    }\\n\\n    function styles() internal pure returns (string memory) {\\n        return svg.el(\\\"style\\\", \\\"\\\", tinierFontFace());\\n    }\\n\\n    function logo() internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                svg.el(\\n                    \\\"mask\\\",\\n                    string.concat(svg.prop(\\\"id\\\", \\\"hot_mask\\\")),\\n                    string.concat(\\n                        svg.text(\\n                            string.concat(\\n                                svg.prop(\\\"x\\\", \\\"20\\\"),\\n                                svg.prop(\\\"y\\\", \\\"50\\\"),\\n                                svg.prop(\\\"font-size\\\", \\\"49\\\"),\\n                                svg.prop(\\\"fill\\\", \\\"white\\\")\\n                            ),\\n                            \\\"HOT\\\"\\n                        ),\\n                        svg.text(\\n                            string.concat(\\n                                svg.prop(\\\"x\\\", \\\"20\\\"),\\n                                svg.prop(\\\"y\\\", \\\"90\\\"),\\n                                svg.prop(\\\"font-size\\\", \\\"49\\\"),\\n                                svg.prop(\\\"fill\\\", \\\"white\\\")\\n                            ),\\n                            \\\"CHAIN\\\"\\n                        ),\\n                        svg.text(\\n                            string.concat(\\n                                svg.prop(\\\"x\\\", \\\"20\\\"),\\n                                svg.prop(\\\"y\\\", \\\"130\\\"),\\n                                svg.prop(\\\"font-size\\\", \\\"49\\\"),\\n                                svg.prop(\\\"fill\\\", \\\"white\\\")\\n                            ),\\n                            \\\"SVG\\\"\\n                        )\\n                    )\\n                ),\\n                svg.g(\\n                    svg.prop(\\\"mask\\\", \\\"url(#hot_mask)\\\"),\\n                    svg.rect(\\n                        string.concat(\\n                            svg.prop(\\\"width\\\", \\\"180\\\"),\\n                            svg.prop(\\\"height\\\", \\\"180\\\"),\\n                            svg.prop(\\\"fill\\\", \\\"url(#grd)\\\")\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function info(string memory name, address collection)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                svg.text(\\n                    string.concat(\\n                        svg.prop(\\\"x\\\", \\\"20\\\"),\\n                        svg.prop(\\\"y\\\", \\\"310\\\"),\\n                        svg.prop(\\\"font-size\\\", \\\"20\\\"),\\n                        svg.prop(\\\"font-family\\\", \\\"tinier\\\"),\\n                        svg.prop(\\\"fill\\\", \\\"#ABABAB\\\")\\n                    ),\\n                    string.concat(\\\"<![CDATA[\\\", name, \\\"]]>\\\")\\n                ),\\n                svg.text(\\n                    string.concat(\\n                        svg.prop(\\\"x\\\", \\\"20\\\"),\\n                        svg.prop(\\\"y\\\", \\\"330\\\"),\\n                        svg.prop(\\\"font-size\\\", \\\"12\\\"),\\n                        svg.prop(\\\"fill\\\", \\\"#999\\\")\\n                    ),\\n                    string.concat(\\\"0x\\\", utils.addressToAsciiString(collection))\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/HotChainSVG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"solmate/auth/Owned.sol\\\";\\nimport \\\"solmate/tokens/ERC1155.sol\\\";\\n\\ncontract HotChainSVG is ERC1155, Owned {\\n    Metadata public metadata;\\n    mapping(address => string) public collectionName;\\n\\n    event CollectionNameUpdated(address indexed collection, string name);\\n\\n    constructor() Owned(msg.sender) {}\\n\\n    /// @notice Mint a new \\\"Hot Chain SVG\\\" token\\n    /// @param name Name of your NFT project that uses hot-chain-svg (keep it short)\\n    /// @param collection Contract address of your NFT project\\n    function mint(string calldata name, address collection) external payable {\\n        uint256 tokenId = (msg.value << 160) | uint160(collection);\\n\\n        if (bytes(name).length > 0) {\\n            if (bytes(collectionName[collection]).length == 0) {\\n                collectionName[collection] = name;\\n                emit CollectionNameUpdated(collection, name);\\n            }\\n        }\\n\\n        _mint(msg.sender, tokenId, 1, \\\"\\\");\\n    }\\n\\n    function burn(uint256 tokenId) external payable {\\n        _burn(msg.sender, tokenId, 1);\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        address collection = address(uint160(tokenId));\\n        return metadata.uri(tokenId, collectionName[collection]);\\n    }\\n\\n    // Admin\\n    function overrideCollectionName(address addr, string calldata name)\\n        external\\n        onlyOwner\\n    {\\n        collectionName[addr] = name;\\n        emit CollectionNameUpdated(addr, name);\\n    }\\n\\n    function setMetadata(Metadata _metadata) external onlyOwner {\\n        metadata = _metadata;\\n    }\\n\\n    function withdrawAll() external onlyOwner {\\n        uint256 value = address(this).balance;\\n        (bool success, bytes memory message) = owner.call{value: value}(\\\"\\\");\\n        require(success, string(message));\\n    }\\n\\n    function withdrawTokens(Token token, uint256 value) external onlyOwner {\\n        require(token.transferFrom(address(this), owner, value));\\n    }\\n}\\n\\ninterface Token {\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n}\\n\\ninterface Metadata {\\n    function uri(uint256 tokenId, string memory name)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/SVG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"./Utils.sol\\\";\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG's with a simple, web-like API.\\nlibrary svg {\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"g\\\", _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"path\\\", _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"text\\\", _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"line\\\", _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"circle\\\", _props, _children);\\n    }\\n\\n    function circle(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"circle\\\", _props);\\n    }\\n\\n    function rect(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"rect\\\", _props, _children);\\n    }\\n\\n    function rect(string memory _props) internal pure returns (string memory) {\\n        return el(\\\"rect\\\", _props);\\n    }\\n\\n    function filter(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"filter\\\", _props, _children);\\n    }\\n\\n    function cdata(string memory _content)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"radialGradient\\\", _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"linearGradient\\\", _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                \\\"stop\\\",\\n                string.concat(\\n                    prop(\\\"stop-color\\\", stopColor),\\n                    \\\" \\\",\\n                    prop(\\\"offset\\\", string.concat(utils.uint2str(offset), \\\"%\\\")),\\n                    \\\" \\\",\\n                    _props\\n                )\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"animateTransform\\\", _props);\\n    }\\n\\n    function image(string memory _href, string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _tag,\\n                \\\" \\\",\\n                _props,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _tag,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    // A generic element, can be used to construct any SVG (or HTML) element without children\\n    function el(string memory _tag, string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = \\\"\\\";\\n\\n    // formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat(\\\"0.\\\", utils.uint2str(_a))\\n            : \\\"1\\\";\\n        return\\n            string.concat(\\n                \\\"rgba(\\\",\\n                utils.uint2str(_r),\\n                \\\",\\\",\\n                utils.uint2str(_g),\\n                \\\",\\\",\\n                utils.uint2str(_b),\\n                \\\",\\\",\\n                formattedA,\\n                \\\")\\\"\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function addressToAsciiString(address x)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TinierFont.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary TinierFont {\\n    bytes public constant fontdata =\\n        hex\\\"\\\";\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"base64/=lib/base64/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"script/=script/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"script/=script/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tinierFontBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tinierFontData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tinierFontFace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "MetadataV1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}