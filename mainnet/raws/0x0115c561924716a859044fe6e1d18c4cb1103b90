{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n * @title String \\u0026 slice utility library for Solidity contracts.\\r\\n * @author Nick Johnson \\u003carachnid@notdot.net\\u003e\\r\\n *\\r\\n * @dev Functionality in this library is largely implemented using an\\r\\n *      abstraction called a \\u0027slice\\u0027. A slice represents a part of a string -\\r\\n *      anything from the entire string to a single character, or even no\\r\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\r\\n *      an offset and a length, copying and manipulating slices is a lot less\\r\\n *      expensive than copying and manipulating the strings they reference.\\r\\n *\\r\\n *      To further reduce gas costs, most functions on slice that need to return\\r\\n *      a slice modify the original one instead of allocating a new one; for\\r\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first \\u0027.\\u0027,\\r\\n *      modifying s to only contain the remainder of the string after the \\u0027.\\u0027.\\r\\n *      In situations where you do not want to modify the original slice, you\\r\\n *      can make a copy first with `.copy()`, for example:\\r\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\r\\n *      Solidity has no memory management, it will result in allocating many\\r\\n *      short-lived slices that are later discarded.\\r\\n *\\r\\n *      Functions that return two slices come in two versions: a non-allocating\\r\\n *      version that takes the second slice as an argument, modifying it in\\r\\n *      place, and an allocating version that allocates and returns the second\\r\\n *      slice; see `nextRune` for example.\\r\\n *\\r\\n *      Functions that have to copy string data will return strings rather than\\r\\n *      slices; these can be cast back to slices for further processing if\\r\\n *      required.\\r\\n *\\r\\n *      For convenience, some functions are provided with non-modifying\\r\\n *      variants that create a new slice and return both; for instance,\\r\\n *      `s.splitNew(\\u0027.\\u0027)` leaves s unmodified, and returns two values\\r\\n *      corresponding to the left and right parts of the string.\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary strings {\\r\\n    struct slice {\\r\\n        uint _len;\\r\\n        uint _ptr;\\r\\n    }\\r\\n\\r\\n    function memcpy(uint dest, uint src, uint len1) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for(; len1 \\u003e= 32; len1 -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        uint mask = type(uint).max;\\r\\n        if (len1 \\u003e 0) {\\r\\n            mask = 256 ** (32 - len1) - 1;\\r\\n        }\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask))\\r\\n            let destpart := and(mload(dest), mask)\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a slice containing the entire string.\\r\\n     * @param self The string to make a slice from.\\r\\n     * @return A newly allocated slice containing the entire string.\\r\\n     */\\r\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\r\\n        uint ptr;\\r\\n        assembly {\\r\\n            ptr := add(self, 0x20)\\r\\n        }\\r\\n        return slice(bytes(self).length, ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the length of a null-terminated bytes32 string.\\r\\n     * @param self The value to find the length of.\\r\\n     * @return The length of the string, from 0 to 32.\\r\\n     */\\r\\n    function len(bytes32 self) internal pure returns (uint) {\\r\\n        uint ret;\\r\\n        if (self == 0)\\r\\n            return 0;\\r\\n        if (uint(self) \\u0026 type(uint128).max == 0) {\\r\\n            ret += 16;\\r\\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\\r\\n        }\\r\\n        if (uint(self) \\u0026 type(uint64).max == 0) {\\r\\n            ret += 8;\\r\\n            self = bytes32(uint(self) / 0x10000000000000000);\\r\\n        }\\r\\n        if (uint(self) \\u0026 type(uint32).max == 0) {\\r\\n            ret += 4;\\r\\n            self = bytes32(uint(self) / 0x100000000);\\r\\n        }\\r\\n        if (uint(self) \\u0026 type(uint16).max == 0) {\\r\\n            ret += 2;\\r\\n            self = bytes32(uint(self) / 0x10000);\\r\\n        }\\r\\n        if (uint(self) \\u0026 type(uint8).max == 0) {\\r\\n            ret += 1;\\r\\n        }\\r\\n        return 32 - ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\\r\\n     *      null-terminated utf-8 string.\\r\\n     * @param self The bytes32 value to convert to a slice.\\r\\n     * @return A new slice containing the value of the input argument up to the\\r\\n     *         first null.\\r\\n     */\\r\\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\r\\n        // Allocate space for `self` in memory, copy it there, and point ret at it\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(0x40, add(ptr, 0x20))\\r\\n            mstore(ptr, self)\\r\\n            mstore(add(ret, 0x20), ptr)\\r\\n        }\\r\\n        ret._len = len(self);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a new slice containing the same data as the current slice.\\r\\n     * @param self The slice to copy.\\r\\n     * @return A new slice containing the same data as `self`.\\r\\n     */\\r\\n    function copy(slice memory self) internal pure returns (slice memory) {\\r\\n        return slice(self._len, self._ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a slice to a new string.\\r\\n     * @param self The slice to copy.\\r\\n     * @return A newly allocated string containing the slice\\u0027s text.\\r\\n     */\\r\\n    function toString(slice memory self) internal pure returns (string memory) {\\r\\n        string memory ret = new string(self._len);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n\\r\\n        memcpy(retptr, self._ptr, self._len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the length in runes of the slice. Note that this operation\\r\\n     *      takes time proportional to the length of the slice; avoid using it\\r\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\r\\n     *      the slice is empty or not.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return The length of the slice in runes.\\r\\n     */\\r\\n    function len(slice memory self) internal pure returns (uint l) {\\r\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\r\\n        uint ptr = self._ptr - 31;\\r\\n        uint end = ptr + self._len;\\r\\n        for (l = 0; ptr \\u003c end; l++) {\\r\\n            uint8 b;\\r\\n            assembly { b := and(mload(ptr), 0xFF) }\\r\\n            if (b \\u003c 0x80) {\\r\\n                ptr += 1;\\r\\n            } else if(b \\u003c 0xE0) {\\r\\n                ptr += 2;\\r\\n            } else if(b \\u003c 0xF0) {\\r\\n                ptr += 3;\\r\\n            } else if(b \\u003c 0xF8) {\\r\\n                ptr += 4;\\r\\n            } else if(b \\u003c 0xFC) {\\r\\n                ptr += 5;\\r\\n            } else {\\r\\n                ptr += 6;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the slice is empty (has a length of 0).\\r\\n     * @param self The slice to operate on.\\r\\n     * @return True if the slice is empty, False otherwise.\\r\\n     */\\r\\n    function empty(slice memory self) internal pure returns (bool) {\\r\\n        return self._len == 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\r\\n     *      on unicode codepoints.\\r\\n     * @param self The first slice to compare.\\r\\n     * @param other The second slice to compare.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\\r\\n        uint shortest = self._len;\\r\\n        if (other._len \\u003c self._len)\\r\\n            shortest = other._len;\\r\\n\\r\\n        uint selfptr = self._ptr;\\r\\n        uint otherptr = other._ptr;\\r\\n        for (uint idx = 0; idx \\u003c shortest; idx += 32) {\\r\\n            uint a;\\r\\n            uint b;\\r\\n            assembly {\\r\\n                a := mload(selfptr)\\r\\n                b := mload(otherptr)\\r\\n            }\\r\\n            if (a != b) {\\r\\n                // Mask out irrelevant bytes and check again\\r\\n                uint mask = type(uint).max; // 0xffff...\\r\\n                if(shortest \\u003c 32) {\\r\\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\r\\n                }\\r\\n                unchecked {\\r\\n                    uint diff = (a \\u0026 mask) - (b \\u0026 mask);\\r\\n                    if (diff != 0)\\r\\n                        return int(diff);\\r\\n                }\\r\\n            }\\r\\n            selfptr += 32;\\r\\n            otherptr += 32;\\r\\n        }\\r\\n        return int(self._len) - int(other._len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two slices contain the same text.\\r\\n     * @param self The first slice to compare.\\r\\n     * @param self The second slice to compare.\\r\\n     * @return True if the slices are equal, false otherwise.\\r\\n     */\\r\\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\\r\\n        return compare(self, other) == 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\r\\n     *      slice to point to the next rune and returning `self`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param rune The slice that will contain the first rune.\\r\\n     * @return `rune`.\\r\\n     */\\r\\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\r\\n        rune._ptr = self._ptr;\\r\\n\\r\\n        if (self._len == 0) {\\r\\n            rune._len = 0;\\r\\n            return rune;\\r\\n        }\\r\\n\\r\\n        uint l;\\r\\n        uint b;\\r\\n        // Load the first byte of the rune into the LSBs of b\\r\\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\\r\\n        if (b \\u003c 0x80) {\\r\\n            l = 1;\\r\\n        } else if(b \\u003c 0xE0) {\\r\\n            l = 2;\\r\\n        } else if(b \\u003c 0xF0) {\\r\\n            l = 3;\\r\\n        } else {\\r\\n            l = 4;\\r\\n        }\\r\\n\\r\\n        // Check for truncated codepoints\\r\\n        if (l \\u003e self._len) {\\r\\n            rune._len = self._len;\\r\\n            self._ptr += self._len;\\r\\n            self._len = 0;\\r\\n            return rune;\\r\\n        }\\r\\n\\r\\n        self._ptr += l;\\r\\n        self._len -= l;\\r\\n        rune._len = l;\\r\\n        return rune;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\r\\n     *      to the next rune.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return A slice containing only the first rune from `self`.\\r\\n     */\\r\\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\\r\\n        nextRune(self, ret);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the number of the first codepoint in the slice.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return The number of the first codepoint in the slice.\\r\\n     */\\r\\n    function ord(slice memory self) internal pure returns (uint ret) {\\r\\n        if (self._len == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint word;\\r\\n        uint length;\\r\\n        uint divisor = 2 ** 248;\\r\\n\\r\\n        // Load the rune into the MSBs of b\\r\\n        assembly { word:= mload(mload(add(self, 32))) }\\r\\n        uint b = word / divisor;\\r\\n        if (b \\u003c 0x80) {\\r\\n            ret = b;\\r\\n            length = 1;\\r\\n        } else if(b \\u003c 0xE0) {\\r\\n            ret = b \\u0026 0x1F;\\r\\n            length = 2;\\r\\n        } else if(b \\u003c 0xF0) {\\r\\n            ret = b \\u0026 0x0F;\\r\\n            length = 3;\\r\\n        } else {\\r\\n            ret = b \\u0026 0x07;\\r\\n            length = 4;\\r\\n        }\\r\\n\\r\\n        // Check for truncated codepoints\\r\\n        if (length \\u003e self._len) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        for (uint i = 1; i \\u003c length; i++) {\\r\\n            divisor = divisor / 256;\\r\\n            b = (word / divisor) \\u0026 0xFF;\\r\\n            if (b \\u0026 0xC0 != 0x80) {\\r\\n                // Invalid UTF-8 sequence\\r\\n                return 0;\\r\\n            }\\r\\n            ret = (ret * 64) | (b \\u0026 0x3F);\\r\\n        }\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of the slice.\\r\\n     * @param self The slice to hash.\\r\\n     * @return The hash of the slice.\\r\\n     */\\r\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if `self` starts with `needle`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return True if the slice starts with the provided text, false otherwise.\\r\\n     */\\r\\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        if (self._len \\u003c needle._len) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        if (self._ptr == needle._ptr) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        bool equal;\\r\\n        assembly {\\r\\n            let length := mload(needle)\\r\\n            let selfptr := mload(add(self, 0x20))\\r\\n            let needleptr := mload(add(needle, 0x20))\\r\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n        }\\r\\n        return equal;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev If `self` starts with `needle`, `needle` is removed from the\\r\\n     *      beginning of `self`. Otherwise, `self` is unmodified.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return `self`\\r\\n     */\\r\\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        if (self._len \\u003c needle._len) {\\r\\n            return self;\\r\\n        }\\r\\n\\r\\n        bool equal = true;\\r\\n        if (self._ptr != needle._ptr) {\\r\\n            assembly {\\r\\n                let length := mload(needle)\\r\\n                let selfptr := mload(add(self, 0x20))\\r\\n                let needleptr := mload(add(needle, 0x20))\\r\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (equal) {\\r\\n            self._len -= needle._len;\\r\\n            self._ptr += needle._len;\\r\\n        }\\r\\n\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the slice ends with `needle`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return True if the slice starts with the provided text, false otherwise.\\r\\n     */\\r\\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        if (self._len \\u003c needle._len) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        uint selfptr = self._ptr + self._len - needle._len;\\r\\n\\r\\n        if (selfptr == needle._ptr) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        bool equal;\\r\\n        assembly {\\r\\n            let length := mload(needle)\\r\\n            let needleptr := mload(add(needle, 0x20))\\r\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n        }\\r\\n\\r\\n        return equal;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\r\\n     *      end of `self`. Otherwise, `self` is unmodified.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return `self`\\r\\n     */\\r\\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        if (self._len \\u003c needle._len) {\\r\\n            return self;\\r\\n        }\\r\\n\\r\\n        uint selfptr = self._ptr + self._len - needle._len;\\r\\n        bool equal = true;\\r\\n        if (selfptr != needle._ptr) {\\r\\n            assembly {\\r\\n                let length := mload(needle)\\r\\n                let needleptr := mload(add(needle, 0x20))\\r\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (equal) {\\r\\n            self._len -= needle._len;\\r\\n        }\\r\\n\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    // Returns the memory address of the first byte of the first occurrence of\\r\\n    // `needle` in `self`, or the first byte after `self` if not found.\\r\\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\r\\n        uint ptr = selfptr;\\r\\n        uint idx;\\r\\n\\r\\n        if (needlelen \\u003c= selflen) {\\r\\n            if (needlelen \\u003c= 32) {\\r\\n                bytes32 mask;\\r\\n                if (needlelen \\u003e 0) {\\r\\n                    mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\r\\n                }\\r\\n\\r\\n                bytes32 needledata;\\r\\n                assembly { needledata := and(mload(needleptr), mask) }\\r\\n\\r\\n                uint end = selfptr + selflen - needlelen;\\r\\n                bytes32 ptrdata;\\r\\n                assembly { ptrdata := and(mload(ptr), mask) }\\r\\n\\r\\n                while (ptrdata != needledata) {\\r\\n                    if (ptr \\u003e= end)\\r\\n                        return selfptr + selflen;\\r\\n                    ptr++;\\r\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\r\\n                }\\r\\n                return ptr;\\r\\n            } else {\\r\\n                // For long needles, use hashing\\r\\n                bytes32 hash;\\r\\n                assembly { hash := keccak256(needleptr, needlelen) }\\r\\n\\r\\n                for (idx = 0; idx \\u003c= selflen - needlelen; idx++) {\\r\\n                    bytes32 testHash;\\r\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\r\\n                    if (hash == testHash)\\r\\n                        return ptr;\\r\\n                    ptr += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return selfptr + selflen;\\r\\n    }\\r\\n\\r\\n    // Returns the memory address of the first byte after the last occurrence of\\r\\n    // `needle` in `self`, or the address of `self` if not found.\\r\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\r\\n        uint ptr;\\r\\n\\r\\n        if (needlelen \\u003c= selflen) {\\r\\n            if (needlelen \\u003c= 32) {\\r\\n                bytes32 mask;\\r\\n                if (needlelen \\u003e 0) {\\r\\n                    mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\r\\n                }\\r\\n\\r\\n                bytes32 needledata;\\r\\n                assembly { needledata := and(mload(needleptr), mask) }\\r\\n\\r\\n                ptr = selfptr + selflen - needlelen;\\r\\n                bytes32 ptrdata;\\r\\n                assembly { ptrdata := and(mload(ptr), mask) }\\r\\n\\r\\n                while (ptrdata != needledata) {\\r\\n                    if (ptr \\u003c= selfptr)\\r\\n                        return selfptr;\\r\\n                    ptr--;\\r\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\r\\n                }\\r\\n                return ptr + needlelen;\\r\\n            } else {\\r\\n                // For long needles, use hashing\\r\\n                bytes32 hash;\\r\\n                assembly { hash := keccak256(needleptr, needlelen) }\\r\\n                ptr = selfptr + (selflen - needlelen);\\r\\n                while (ptr \\u003e= selfptr) {\\r\\n                    bytes32 testHash;\\r\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\r\\n                    if (hash == testHash)\\r\\n                        return ptr + needlelen;\\r\\n                    ptr -= 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return selfptr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\r\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\r\\n     *      if `needle` is not found.\\r\\n     * @param self The slice to search and modify.\\r\\n     * @param needle The text to search for.\\r\\n     * @return `self`.\\r\\n     */\\r\\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        self._len -= ptr - self._ptr;\\r\\n        self._ptr = ptr;\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Modifies `self` to contain the part of the string from the start of\\r\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\r\\n     *      is not found, `self` is set to the empty slice.\\r\\n     * @param self The slice to search and modify.\\r\\n     * @param needle The text to search for.\\r\\n     * @return `self`.\\r\\n     */\\r\\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        self._len = ptr - self._ptr;\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and `token` to everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and `token` is set to the entirety of `self`.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @param token An output parameter to which the first token is written.\\r\\n     * @return `token`.\\r\\n     */\\r\\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        token._ptr = self._ptr;\\r\\n        token._len = ptr - self._ptr;\\r\\n        if (ptr == self._ptr + self._len) {\\r\\n            // Not found\\r\\n            self._len = 0;\\r\\n        } else {\\r\\n            self._len -= token._len + needle._len;\\r\\n            self._ptr = ptr + needle._len;\\r\\n        }\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and returning everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and the entirety of `self` is returned.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The part of `self` up to the first occurrence of `delim`.\\r\\n     */\\r\\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\r\\n        split(self, needle, token);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything before the last\\r\\n     *      occurrence of `needle`, and `token` to everything after it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and `token` is set to the entirety of `self`.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @param token An output parameter to which the first token is written.\\r\\n     * @return `token`.\\r\\n     */\\r\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\r\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        token._ptr = ptr;\\r\\n        token._len = self._len - (ptr - self._ptr);\\r\\n        if (ptr == self._ptr) {\\r\\n            // Not found\\r\\n            self._len = 0;\\r\\n        } else {\\r\\n            self._len -= token._len + needle._len;\\r\\n        }\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything before the last\\r\\n     *      occurrence of `needle`, and returning everything after it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and the entirety of `self` is returned.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The part of `self` after the last occurrence of `delim`.\\r\\n     */\\r\\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\r\\n        rsplit(self, needle, token);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\r\\n     * @param self The slice to search.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The number of occurrences of `needle` found in `self`.\\r\\n     */\\r\\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\r\\n        while (ptr \\u003c= self._ptr + self._len) {\\r\\n            cnt++;\\r\\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns True if `self` contains `needle`.\\r\\n     * @param self The slice to search.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return True if `needle` is found in `self`, false otherwise.\\r\\n     */\\r\\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a newly allocated string containing the concatenation of\\r\\n     *      `self` and `other`.\\r\\n     * @param self The first slice to concatenate.\\r\\n     * @param other The second slice to concatenate.\\r\\n     * @return The concatenation of the two strings.\\r\\n     */\\r\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\r\\n        string memory ret = new string(self._len + other._len);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n        memcpy(retptr, self._ptr, self._len);\\r\\n        memcpy(retptr + self._len, other._ptr, other._len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\r\\n     *      newly allocated string.\\r\\n     * @param self The delimiter to use.\\r\\n     * @param parts A list of slices to join.\\r\\n     * @return A newly allocated string containing all the slices in `parts`,\\r\\n     *         joined with `self`.\\r\\n     */\\r\\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\r\\n        if (parts.length == 0)\\r\\n            return \\\"\\\";\\r\\n\\r\\n        uint length = self._len * (parts.length - 1);\\r\\n        for(uint i = 0; i \\u003c parts.length; i++)\\r\\n            length += parts[i]._len;\\r\\n\\r\\n        string memory ret = new string(length);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n\\r\\n        for(uint i = 0; i \\u003c parts.length; i++) {\\r\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\r\\n            retptr += parts[i]._len;\\r\\n            if (i \\u003c parts.length - 1) {\\r\\n                memcpy(retptr, self._ptr, self._len);\\r\\n                retptr += self._len;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: test\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        \\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address public _owner;\\r\\n    address private _previousOwner;\\r\\n    uint256 private _lockTime;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function geUnlockTime() public view returns (uint256) {\\r\\n        return _lockTime;\\r\\n    }\\r\\n\\r\\n    //Locks the contract for owner for the amount of time provided\\r\\n    function lock(uint256 time) public virtual onlyOwner {\\r\\n        _previousOwner = _owner;\\r\\n        _owner = address(0);\\r\\n        _lockTime = block.timestamp + time;\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n    }\\r\\n    \\r\\n    //Unlocks the contract for owner when _lockTime is exceeds\\r\\n    function unlock() public virtual {\\r\\n        require(_previousOwner == msg.sender, \\\"You don\\u0027t have permission to unlock\\\");\\r\\n        require(block.timestamp \\u003e _lockTime , \\\"Contract is locked until 7 days\\\");\\r\\n        emit OwnershipTransferred(_owner, _previousOwner);\\r\\n        _owner = _previousOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract WhiteList is Ownable {\\r\\n    mapping (address =\\u003e bool) private _whiteList;\\r\\n    event LogWhiteListChanged(address indexed _user, bool _status);\\r\\n    modifier onlyWhiteList() {\\r\\n        require(_whiteList[_msgSender()], \\\"White list\\\");_;\\r\\n    }\\r\\n    function isWhiteListed(address _maker) public view returns (bool) {\\r\\n        return _whiteList[_maker];\\r\\n    }\\r\\n    function setWhiteList (address _evilUser, bool _status) public virtual onlyOwner returns (bool){\\r\\n        _whiteList[_evilUser] = _status;\\r\\n        emit LogWhiteListChanged(_evilUser, _status);\\r\\n        return _whiteList[_evilUser];\\r\\n    }\\r\\n}\\r\\nimport \\\"./strings.sol\\\";\\r\\n\\r\\ncontract Token is ERC20,Ownable,WhiteList {\\r\\n    using SafeMath for uint256;\\r\\n    using strings  for *;\\r\\n\\r\\n\\r\\n    receive () external payable {}\\r\\n\\r\\n    uint256 public total = 100000000000 * 10 ** 18;\\r\\n\\r\\n    uint256 public _releaseTime;\\r\\n    uint256 public _feeRatio;\\r\\n    bool public _isStartLock;\\r\\n    bool public _isStartSwapTrade;\\r\\n    address public _destinationAddress;\\r\\n    address public _backCoinAddress;\\r\\n    address public _backAccountAddress;\\r\\n\\r\\n    mapping(address=\\u003ebool) public uniswapV2PairMapping;\\r\\n    mapping(address=\\u003eLockInfo[]) public lockAmountMapping;\\r\\n    address[] public addressArray;\\r\\n    \\r\\n    constructor(address addr,address destinationAddress_,address backCoinAddress_,address backAccountAddress_) ERC20(\\\"mxdao\\\",\\\"mxdao\\\"){\\r\\n        super._mint(addr, total);\\r\\n        _owner = addr;\\r\\n        _releaseTime = 1656604800;\\r\\n        _destinationAddress = destinationAddress_;\\r\\n        _backCoinAddress = backCoinAddress_;\\r\\n        _backAccountAddress = backAccountAddress_;\\r\\n    }\\r\\n\\r\\n    struct LockInfo{\\r\\n        uint256 lockAmount;\\r\\n        uint256 lockAmountFinal;\\r\\n        uint256 releaseTime;\\r\\n    }\\r\\n\\r\\n    function setFeeRatio(uint256 ratio)public onlyOwner{\\r\\n        _feeRatio = ratio;\\r\\n    }\\r\\n\\r\\n    function setBackCoinAddress(address addr)public onlyOwner{\\r\\n        _backCoinAddress = addr;\\r\\n    }\\r\\n    function setBackAccountAddress(address addr)public onlyOwner{\\r\\n        _backAccountAddress = addr;\\r\\n    }\\r\\n\\r\\n    function setStartLock(bool isStart)public onlyOwner{\\r\\n        _isStartLock = isStart;\\r\\n    }\\r\\n    function setStartSwapTrade(bool isStart)public onlyOwner{\\r\\n        _isStartSwapTrade = isStart;\\r\\n    }\\r\\n\\r\\n    function setReleaseTime(uint256 time)public onlyOwner{\\r\\n        _releaseTime = time;\\r\\n    }\\r\\n\\r\\n    function setUniswapV2PairMapping(address addr,bool flag)public onlyOwner{\\r\\n        uniswapV2PairMapping[addr] = flag;\\r\\n    }\\r\\n\\r\\n    function setDestinationAddress(address addr)public onlyOwner{\\r\\n        _destinationAddress = addr;\\r\\n    }\\r\\n\\r\\n    function release(uint256 ratio)public onlyOwner{\\r\\n        for(uint256 i = 0; i \\u003c addressArray.length; i++){\\r\\n            LockInfo[] storage lockInfoList = lockAmountMapping[addressArray[i]];\\r\\n            for(uint256 k = 0;k \\u003c lockInfoList.length; k++){  \\r\\n                if(lockInfoList[k].lockAmount == 0 || block.timestamp \\u003c lockInfoList[k].releaseTime) continue;\\r\\n                uint256 releaseAmount = calculateRatio(lockInfoList[k].lockAmountFinal,ratio);\\r\\n                if(lockInfoList[k].lockAmount \\u003c releaseAmount){\\r\\n                    lockInfoList[k].lockAmount = 0;\\r\\n                }else{\\r\\n                    lockInfoList[k].lockAmount -= releaseAmount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual override{\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        if((uniswapV2PairMapping[sender] || uniswapV2PairMapping[recipient]) \\u0026\\u0026 !_isStartSwapTrade){\\r\\n            require(isWhiteListed(sender) || isWhiteListed(recipient) || sender == _owner || recipient == _owner,\\\"Only white list users can trade\\\");\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        \\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        \\r\\n        if(!isWhiteListed(sender) \\u0026\\u0026 !isWhiteListed(recipient) \\u0026\\u0026 _isStartLock){\\r\\n            if(sender == _owner){\\r\\n                lockTransfer(recipient,amount);\\r\\n            }else{\\r\\n                normalTransfer(sender,recipient,amount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n         \\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function lockTransfer(address recipient,uint256 amount) internal{\\r\\n        LockInfo memory lockInfo = LockInfo(amount,amount,_releaseTime);\\r\\n        lockAmountMapping[recipient].push(lockInfo);\\r\\n        if(lockAmountMapping[recipient].length == 1){\\r\\n            addressArray.push(recipient);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function normalTransfer(address sender,address recipient,uint256 amount) internal{\\r\\n        require(recipient == _destinationAddress ,\\\"Destination address error\\\");\\r\\n\\r\\n        LockInfo[] storage lockInfoList = lockAmountMapping[sender];\\r\\n        uint256 lockAmount = 0;\\r\\n        for(uint256 i =0;i\\u003c lockInfoList.length;i++){\\r\\n            lockAmount += lockInfoList[i].lockAmount;\\r\\n        }\\r\\n\\r\\n        uint256 availableBalnce = _balances[sender].sub(lockAmount);\\r\\n        string memory text = \\\"Available Credit:\\\";\\r\\n        string memory value = Strings.toString(availableBalnce);\\r\\n        string memory message = text.toSlice().concat(value.toSlice());\\r\\n        require(amount \\u003c= availableBalnce, message);\\r\\n\\r\\n        uint256 backAmount = amount.sub(calculateThreeRatio(amount,_feeRatio));\\r\\n\\r\\n        IERC20(_backCoinAddress).transferFrom(_backAccountAddress,sender,backAmount);\\r\\n    }\\r\\n   \\r\\n    function calculateRatio(uint256 _amount,uint256 ratio) private pure returns (uint256) {\\r\\n        return _amount.mul(ratio).div(\\r\\n            10**5\\r\\n        );\\r\\n    }\\r\\n    function calculateThreeRatio(uint256 _amount,uint256 ratio) private pure returns (uint256) {\\r\\n        return _amount.mul(ratio).div(\\r\\n            10**3\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"backCoinAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"backAccountAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LogWhiteListChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_backAccountAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_backCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destinationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isStartLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isStartSwapTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockAmountMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmountFinal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBackAccountAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBackCoinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDestinationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setReleaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isStart\",\"type\":\"bool\"}],\"name\":\"setStartLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isStart\",\"type\":\"bool\"}],\"name\":\"setStartSwapTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setUniswapV2PairMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV2PairMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b7dd4d134b1794ee848e1af1a62b85d7b2ea9301000000000000000000000000b7dd4d134b1794ee848e1af1a62b85d7b2ea93010000000000000000000000006251e725cd45fb1af99354035a414a2c0890b929000000000000000000000000b7dd4d134b1794ee848e1af1a62b85d7b2ea9301", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98cbd72518a8ad934c24b524bf258241ccfd4b581b7097fc604aec8f8d676511"}]}