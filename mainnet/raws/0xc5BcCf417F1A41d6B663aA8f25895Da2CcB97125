{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BadgerVotingShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"ISett.sol\\\";\\nimport \\\"IGeyser.sol\\\";\\nimport \\\"IUniswapV2Pair.sol\\\";\\nimport \\\"ICToken.sol\\\";\\nimport \\\"IBridgePool.sol\\\";\\nimport \\\"ICurvePool.sol\\\";\\nimport \\\"ICurveToken.sol\\\";\\n\\ncontract BadgerVotingShare {\\n    IERC20 constant badger = IERC20(0x3472A5A71965499acd81997a54BBA8D852C6E53d);\\n    ISett constant sett_badger =\\n        ISett(0x19D97D8fA813EE2f51aD4B4e04EA08bAf4DFfC28);\\n    IGeyser constant geyser_badger =\\n        IGeyser(0xa9429271a28F8543eFFfa136994c0839E7d7bF77);\\n    ISett constant rem_badger = ISett(0x6aF7377b5009d7d154F36FE9e235aE1DA27Aea22);\\n\\n    //Badger is token1\\n    IUniswapV2Pair constant badger_wBTC_UniV2 =\\n        IUniswapV2Pair(0xcD7989894bc033581532D2cd88Da5db0A4b12859);\\n    ISett constant sett_badger_wBTC_UniV2 =\\n        ISett(0x235c9e24D3FB2FAFd58a2E49D454Fdcd2DBf7FF1);\\n    IGeyser constant geyser_badger_wBTC_UniV2 =\\n        IGeyser(0xA207D69Ea6Fb967E54baA8639c408c31767Ba62D);\\n\\n    //Badger is token1\\n    IUniswapV2Pair constant badger_wBTC_SLP =\\n        IUniswapV2Pair(0x110492b31c59716AC47337E616804E3E3AdC0b4a);\\n    ISett constant sett_badger_wBTC_SLP =\\n        ISett(0x1862A18181346EBd9EdAf800804f89190DeF24a5);\\n    IGeyser constant geyser_badger_wBTC_SLP =\\n        IGeyser(0xB5b654efBA23596Ed49FAdE44F7e67E23D6712e7); \\n\\n    // Rari pool - fBADGER-22\\n    ICToken constant fBADGER =\\n        ICToken(0x6780B4681aa8efE530d075897B3a4ff6cA5ed807);\\n\\n    IBridgePool constant aBADGER = IBridgePool(0x43298F9f91a4545dF64748e78a2c777c580573d6);\\n\\n    ICurvePool constant badger_wBTC_crv_pool =\\n        ICurvePool(0x50f3752289e1456BfA505afd37B241bca23e685d);\\n    ICurveToken constant badger_wBTC_crv_token = \\n        ICurveToken(0x137469B55D1f15651BA46A89D0588e97dD0B6562);\\n    ISett constant sett_badger_wBTC_crv =\\n        ISett(0xeC1c717A3b02582A4Aa2275260C583095536b613);\\n\\n    function decimals() external pure returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"Badger Voting Share\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"Badger VS\\\";\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return badger.totalSupply();\\n    }\\n\\n    function uniswapBalanceOf(address _voter) external view returns(uint256) {\\n        return _uniswapBalanceOf(_voter);\\n    }\\n    function sushiswapBalanceOf(address _voter) external view returns(uint256) {\\n        return _sushiswapBalanceOf(_voter);\\n    }\\n    function badgerBalanceOf(address _voter) external view returns(uint256) {\\n        return _badgerBalanceOf(_voter);\\n    }\\n    function rariBalanceOf(address _voter) external view returns(uint256) {\\n        return _rariBalanceOf(_voter);\\n    }\\n    function remBadgerBalanceOf(address _voter) external view returns(uint256) {\\n        return _remBadgerBalanceOf(_voter);\\n    }\\n    function acrossBalanceOf(address _voter) external view returns(uint256) {\\n        return _acrossBalanceOf(_voter);\\n    }\\n    function curveBalanceOf(address _voter) external view returns(uint256) {\\n        return _curveBalanceOf(_voter);\\n    }\\n\\n    /*\\n        The voter can have Badger in Uniswap in 3 configurations:\\n         * Staked bUni-V2 in Geyser\\n         * Unstaked bUni-V2 (same as staked Uni-V2 in Sett)\\n         * Unstaked Uni-V2\\n        The top two correspond to more than 1 Uni-V2, so they are multiplied by pricePerFullShare.\\n        After adding all 3 balances we calculate how much BADGER it corresponds to using the pool's reserves.\\n    */\\n    function _uniswapBalanceOf(address _voter) internal view returns (uint256) {\\n        uint256 bUniV2PricePerShare = sett_badger_wBTC_UniV2\\n            .getPricePerFullShare();\\n        (, uint112 reserve1, ) = badger_wBTC_UniV2.getReserves();\\n        uint256 totalUniBalance = badger_wBTC_UniV2.balanceOf(_voter) +\\n            (sett_badger_wBTC_UniV2.balanceOf(_voter) * bUniV2PricePerShare) /\\n            1e18 +\\n            (geyser_badger_wBTC_UniV2.totalStakedFor(_voter) *\\n                bUniV2PricePerShare) /\\n            1e18;\\n        return (totalUniBalance * reserve1) / badger_wBTC_UniV2.totalSupply();\\n    }\\n\\n    /*\\n        The voter can have Badger in Sushi in 3 configurations:\\n         * Staked SLP in Geyser\\n         * Unstaked SLP (same as staked SLP in Sett)\\n         * Unstaked SLP\\n        The top two correspond to more than 1 SLP, so they are multiplied by pricePerFullShare.\\n        After adding all 3 balances we calculate how much BADGER it corresponds to using the pool's reserves.\\n    */\\n    function _sushiswapBalanceOf(address _voter)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 bSLPPricePerShare = sett_badger_wBTC_SLP.getPricePerFullShare();\\n        (, uint112 reserve1, ) = badger_wBTC_SLP.getReserves();\\n        uint256 totalSLPBalance = badger_wBTC_SLP.balanceOf(_voter) +\\n            (sett_badger_wBTC_SLP.balanceOf(_voter) * bSLPPricePerShare) /\\n            1e18 +\\n            (geyser_badger_wBTC_SLP.totalStakedFor(_voter) *\\n                bSLPPricePerShare) /\\n            1e18;\\n        return (totalSLPBalance * reserve1) / badger_wBTC_SLP.totalSupply();\\n    }\\n\\n    /*\\n        The voter can have Badger in Curve in 2 configurations:\\n         * Curve LP in vault\\n         * Curve LP in wallet\\n        Vaults have an additional PPFS that we need to take into account\\n        After adding the 2 balances we calculate how much BADGER it corresponds to using the pool's reserves.\\n    */\\n    function _curveBalanceOf(address _voter)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // coin 0 is BADGER\\n        uint256 bCrvPricePerShare = sett_badger_wBTC_crv.getPricePerFullShare();\\n        uint256 poolBadgerBalance = badger_wBTC_crv_pool.balances(0);\\n        uint256 voterLpBalance = badger_wBTC_crv_token.balanceOf(_voter) +\\n            (sett_badger_wBTC_crv.balanceOf(_voter) * bCrvPricePerShare) /\\n            1e18;\\n        return voterLpBalance * poolBadgerBalance / badger_wBTC_crv_token.totalSupply();\\n    }\\n\\n    /*\\n        The voter can have regular Badger in 3 configurations as well:\\n         * Staked bBadger in Geyser\\n         * Unstaked bBadger (same as staked Badger in Sett)\\n         * Unstaked Badger\\n    */\\n    function _badgerBalanceOf(address _voter) internal view returns (uint256) {\\n        uint256 bBadgerPricePerShare = sett_badger.getPricePerFullShare();\\n        return\\n            badger.balanceOf(_voter) +\\n            (sett_badger.balanceOf(_voter) * bBadgerPricePerShare) /\\n            1e18 +\\n            (geyser_badger.totalStakedFor(_voter) * bBadgerPricePerShare) /\\n            1e18;\\n    }\\n\\n    /*\\n        The voter can also have remBADGER\\n    */\\n    function _remBadgerBalanceOf(address _voter) internal view returns (uint256) {\\n        uint256 remBadgerPricePerShare = rem_badger.getPricePerFullShare();\\n        return (rem_badger.balanceOf(_voter) * remBadgerPricePerShare) / 1e18;\\n    }\\n\\n    /*\\n        The voter may have deposited BADGER into the rari pool:\\n         * check current rate\\n         * balanceOf fBadger\\n    */\\n    function _rariBalanceOf(address _voter) internal view returns (uint256) {\\n        uint256 rate = fBADGER.exchangeRateStored();\\n        return (fBADGER.balanceOf(_voter) * rate) / 1e18;\\n    }\\n\\n    /*\\n        The voter may have deposited BADGER into the across pool:\\n    */\\n    function _acrossBalanceOf(address _voter) internal view returns (uint256) {\\n        int256 numerator = int256(aBADGER.liquidReserves()) + int256(aBADGER.utilizedReserves()) - int256(aBADGER.undistributedLpFees());\\n        uint256 exchangeRateCurrent = (uint256(numerator) * 1e18) / aBADGER.totalSupply();\\n        \\n        return exchangeRateCurrent * aBADGER.balanceOf(_voter) / 1e18;\\n    }\\n\\n    function balanceOf(address _voter) external view returns (uint256) {\\n        return\\n            _badgerBalanceOf(_voter) +\\n            _uniswapBalanceOf(_voter) +\\n            _sushiswapBalanceOf(_voter) +\\n            _rariBalanceOf(_voter) +\\n            _remBadgerBalanceOf(_voter) +\\n            _acrossBalanceOf(_voter);\\n    }\\n\\n    constructor() {}\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"ISett.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISett {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"IGeyser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGeyser {\\n    function totalStakedFor(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n}\\n\"\r\n    },\r\n    \"ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICToken {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IBridgePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgePool {\\n    function liquidReserves() external view returns (uint256);\\n    function utilizedReserves() external view returns (uint256);\\n    function undistributedLpFees() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n    function addLiquidity(uint256 l1TokenAmount) external;\\n\\n}\\n\"\r\n    },\r\n    \"ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n    function balances(uint256) external pure returns (uint256);\\n    function add_liquidity(uint256[2] calldata amounts, uint256 deadline) external;\\n}\"\r\n    },\r\n    \"ICurveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurveToken {\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"BadgerVotingShare.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"acrossBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"badgerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"curveBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"rariBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"remBadgerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"sushiswapBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"uniswapBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BadgerVotingShare", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}