{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.6.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary CountersUpgradeable {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IAccessControl.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title IAccessControl\r\n/// @author Forked from OpenZeppelin\r\n/// @notice Interface for `AccessControl` contracts\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File contracts/external/AccessControlUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n/**\r\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\r\n * The only difference is the removal of the ERC165 implementation as it's not\r\n * needed in Angle.\r\n *\r\n * Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\r\n    function __AccessControl_init() internal initializer {\r\n        __AccessControl_init_unchained();\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal initializer {}\r\n\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external override {\r\n        require(account == msg.sender, \"71\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IFeeManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title IFeeManagerFunctions\r\n/// @author Angle Core Team\r\n/// @dev Interface for the `FeeManager` contract\r\ninterface IFeeManagerFunctions is IAccessControl {\r\n    // ================================= Keepers ===================================\r\n\r\n    function updateUsersSLP() external;\r\n\r\n    function updateHA() external;\r\n\r\n    // ================================= Governance ================================\r\n\r\n    function deployCollateral(\r\n        address[] memory governorList,\r\n        address guardian,\r\n        address _perpetualManager\r\n    ) external;\r\n\r\n    function setFees(\r\n        uint256[] memory xArray,\r\n        uint64[] memory yArray,\r\n        uint8 typeChange\r\n    ) external;\r\n\r\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\r\n}\r\n\r\n/// @title IFeeManager\r\n/// @author Angle Core Team\r\n/// @notice Previous interface with additionnal getters for public variables and mappings\r\n/// @dev We need these getters as they are used in other contracts of the protocol\r\ninterface IFeeManager is IFeeManagerFunctions {\r\n    function stableMaster() external view returns (address);\r\n\r\n    function perpetualManager() external view returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC721 is IERC165 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOracle.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title IOracle\r\n/// @author Angle Core Team\r\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\r\n/// from just UniswapV3 or from just Chainlink\r\ninterface IOracle {\r\n    function read() external view returns (uint256);\r\n\r\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\r\n\r\n    function readLower() external view returns (uint256);\r\n\r\n    function readUpper() external view returns (uint256);\r\n\r\n    function readQuote(uint256 baseAmount) external view returns (uint256);\r\n\r\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\r\n\r\n    function inBase() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPerpetualManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n/// @title Interface of the contract managing perpetuals\r\n/// @author Angle Core Team\r\n/// @dev Front interface, meaning only user-facing functions\r\ninterface IPerpetualManagerFront is IERC721Metadata {\r\n    function openPerpetual(\r\n        address owner,\r\n        uint256 amountBrought,\r\n        uint256 amountCommitted,\r\n        uint256 maxOracleRate,\r\n        uint256 minNetMargin\r\n    ) external returns (uint256 perpetualID);\r\n\r\n    function closePerpetual(\r\n        uint256 perpetualID,\r\n        address to,\r\n        uint256 minCashOutAmount\r\n    ) external;\r\n\r\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\r\n\r\n    function removeFromPerpetual(\r\n        uint256 perpetualID,\r\n        uint256 amount,\r\n        address to\r\n    ) external;\r\n\r\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\r\n\r\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\r\n\r\n    // ========================= External View Functions =============================\r\n\r\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\r\n\r\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\r\n}\r\n\r\n/// @title Interface of the contract managing perpetuals\r\n/// @author Angle Core Team\r\n/// @dev This interface does not contain user facing functions, it just has functions that are\r\n/// interacted with in other parts of the protocol\r\ninterface IPerpetualManagerFunctions is IAccessControl {\r\n    // ================================= Governance ================================\r\n\r\n    function deployCollateral(\r\n        address[] memory governorList,\r\n        address guardian,\r\n        IFeeManager feeManager,\r\n        IOracle oracle_\r\n    ) external;\r\n\r\n    function setFeeManager(IFeeManager feeManager_) external;\r\n\r\n    function setHAFees(\r\n        uint64[] memory _xHAFees,\r\n        uint64[] memory _yHAFees,\r\n        uint8 deposit\r\n    ) external;\r\n\r\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\r\n\r\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\r\n\r\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\r\n\r\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\r\n\r\n    function setLockTime(uint64 _lockTime) external;\r\n\r\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    // ==================================== Keepers ================================\r\n\r\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\r\n\r\n    // =============================== StableMaster ================================\r\n\r\n    function setOracle(IOracle _oracle) external;\r\n}\r\n\r\n/// @title IPerpetualManager\r\n/// @author Angle Core Team\r\n/// @notice Previous interface with additionnal getters for public variables\r\ninterface IPerpetualManager is IPerpetualManagerFunctions {\r\n    function poolManager() external view returns (address);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function targetHAHedge() external view returns (uint64);\r\n\r\n    function totalHedgeAmount() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPoolManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\r\n// contract\r\nstruct StrategyParams {\r\n    // Timestamp of last report made by this strategy\r\n    // It is also used to check if a strategy has been initialized\r\n    uint256 lastReport;\r\n    // Total amount the strategy is expected to have\r\n    uint256 totalStrategyDebt;\r\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\r\n    uint256 debtRatio;\r\n}\r\n\r\n/// @title IPoolManagerFunctions\r\n/// @author Angle Core Team\r\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\r\n/// a given stablecoin\r\n/// @dev Only the functions used in other contracts of the protocol are left here\r\ninterface IPoolManagerFunctions {\r\n    // ============================ Constructor ====================================\r\n\r\n    function deployCollateral(\r\n        address[] memory governorList,\r\n        address guardian,\r\n        IPerpetualManager _perpetualManager,\r\n        IFeeManager feeManager,\r\n        IOracle oracle\r\n    ) external;\r\n\r\n    // ============================ Yield Farming ==================================\r\n\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external;\r\n\r\n    // ============================ Governance =====================================\r\n\r\n    function addGovernor(address _governor) external;\r\n\r\n    function removeGovernor(address _governor) external;\r\n\r\n    function setGuardian(address _guardian, address guardian) external;\r\n\r\n    function revokeGuardian(address guardian) external;\r\n\r\n    function setFeeManager(IFeeManager _feeManager) external;\r\n\r\n    // ============================= Getters =======================================\r\n\r\n    function getBalance() external view returns (uint256);\r\n\r\n    function getTotalAsset() external view returns (uint256);\r\n}\r\n\r\n/// @title IPoolManager\r\n/// @author Angle Core Team\r\n/// @notice Previous interface with additionnal getters for public variables and mappings\r\n/// @dev Used in other contracts of the protocol\r\ninterface IPoolManager is IPoolManagerFunctions {\r\n    function stableMaster() external view returns (address);\r\n\r\n    function perpetualManager() external view returns (address);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function feeManager() external view returns (address);\r\n\r\n    function totalDebt() external view returns (uint256);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStakingRewards.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title IStakingRewardsFunctions\r\n/// @author Angle Core Team\r\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\r\ninterface IStakingRewardsFunctions {\r\n    function notifyRewardAmount(uint256 reward) external;\r\n\r\n    function recoverERC20(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 tokenAmount\r\n    ) external;\r\n\r\n    function setNewRewardsDistribution(address newRewardsDistribution) external;\r\n}\r\n\r\n/// @title IStakingRewards\r\n/// @author Angle Core Team\r\n/// @notice Previous interface with additionnal getters for public variables\r\ninterface IStakingRewards is IStakingRewardsFunctions {\r\n    function rewardToken() external view returns (IERC20);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewardsDistributor.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title IRewardsDistributor\r\n/// @author Angle Core Team, inspired from Fei protocol\r\n/// (https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/IRewardsDistributor.sol)\r\n/// @notice Rewards Distributor interface\r\ninterface IRewardsDistributor {\r\n    // ========================= Public Parameter Getter ===========================\r\n\r\n    function rewardToken() external view returns (IERC20);\r\n\r\n    // ======================== External User Available Function ===================\r\n\r\n    function drip(IStakingRewards stakingContract) external returns (uint256);\r\n\r\n    // ========================= Governor Functions ================================\r\n\r\n    function governorWithdrawRewardToken(uint256 amount, address governance) external;\r\n\r\n    function governorRecover(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount,\r\n        IStakingRewards stakingContract\r\n    ) external;\r\n\r\n    function setUpdateFrequency(uint256 _frequency, IStakingRewards stakingContract) external;\r\n\r\n    function setIncentiveAmount(uint256 _incentiveAmount, IStakingRewards stakingContract) external;\r\n\r\n    function setAmountToDistribute(uint256 _amountToDistribute, IStakingRewards stakingContract) external;\r\n\r\n    function setDuration(uint256 _duration, IStakingRewards stakingContract) external;\r\n\r\n    function setStakingContract(\r\n        address _stakingContract,\r\n        uint256 _duration,\r\n        uint256 _incentiveAmount,\r\n        uint256 _dripFrequency,\r\n        uint256 _amountToDistribute\r\n    ) external;\r\n\r\n    function setNewRewardsDistributor(address newRewardsDistributor) external;\r\n\r\n    function removeStakingContract(IStakingRewards stakingContract) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISanToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title ISanToken\r\n/// @author Angle Core Team\r\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\r\n/// contributing to a collateral for a given stablecoin\r\ninterface ISanToken is IERC20Upgradeable {\r\n    // ================================== StableMaster =============================\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burnFrom(\r\n        uint256 amount,\r\n        address burner,\r\n        address sender\r\n    ) external;\r\n\r\n    function burnSelf(uint256 amount, address burner) external;\r\n\r\n    function stableMaster() external view returns (address);\r\n\r\n    function poolManager() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStableMaster.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\r\n// we prefer to import all concerned interfaces\r\n\r\n\r\n\r\n\r\n// Struct to handle all the parameters to manage the fees\r\n// related to a given collateral pool (associated to the stablecoin)\r\nstruct MintBurnData {\r\n    // Values of the thresholds to compute the minting fees\r\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\r\n    uint64[] xFeeMint;\r\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\r\n    uint64[] yFeeMint;\r\n    // Values of the thresholds to compute the burning fees\r\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\r\n    uint64[] xFeeBurn;\r\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\r\n    uint64[] yFeeBurn;\r\n    // Max proportion of collateral from users that can be covered by HAs\r\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\r\n    // the other changes accordingly\r\n    uint64 targetHAHedge;\r\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\r\n    // to the value of the fees computed using the hedge curve\r\n    // Scaled by `BASE_PARAMS`\r\n    uint64 bonusMalusMint;\r\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\r\n    // to the value of the fees computed using the hedge curve\r\n    // Scaled by `BASE_PARAMS`\r\n    uint64 bonusMalusBurn;\r\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\r\n    uint256 capOnStableMinted;\r\n}\r\n\r\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\r\n// including the fraction of interests they receive or the fees to be distributed to\r\n// them\r\nstruct SLPData {\r\n    // Last timestamp at which the `sanRate` has been updated for SLPs\r\n    uint256 lastBlockUpdated;\r\n    // Fees accumulated from previous blocks and to be distributed to SLPs\r\n    uint256 lockedInterests;\r\n    // Max interests used to update the `sanRate` in a single block\r\n    // Should be in collateral token base\r\n    uint256 maxInterestsDistributed;\r\n    // Amount of fees left aside for SLPs and that will be distributed\r\n    // when the protocol is collateralized back again\r\n    uint256 feesAside;\r\n    // Part of the fees normally going to SLPs that is left aside\r\n    // before the protocol is collateralized back again (depends on collateral ratio)\r\n    // Updated by keepers and scaled by `BASE_PARAMS`\r\n    uint64 slippageFee;\r\n    // Portion of the fees from users minting and burning\r\n    // that goes to SLPs (the rest goes to surplus)\r\n    uint64 feesForSLPs;\r\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\r\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\r\n    // Updated by keepers and scaled by `BASE_PARAMS`\r\n    uint64 slippage;\r\n    // Portion of the interests from lending\r\n    // that goes to SLPs (the rest goes to surplus)\r\n    uint64 interestsForSLPs;\r\n}\r\n\r\n/// @title IStableMasterFunctions\r\n/// @author Angle Core Team\r\n/// @notice Interface for the `StableMaster` contract\r\ninterface IStableMasterFunctions {\r\n    function deploy(\r\n        address[] memory _governorList,\r\n        address _guardian,\r\n        address _agToken\r\n    ) external;\r\n\r\n    // ============================== Lending ======================================\r\n\r\n    function accumulateInterest(uint256 gain) external;\r\n\r\n    function signalLoss(uint256 loss) external;\r\n\r\n    // ============================== HAs ==========================================\r\n\r\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\r\n\r\n    function convertToSLP(uint256 amount, address user) external;\r\n\r\n    // ============================== Keepers ======================================\r\n\r\n    function getCollateralRatio() external returns (uint256);\r\n\r\n    function setFeeKeeper(\r\n        uint64 feeMint,\r\n        uint64 feeBurn,\r\n        uint64 _slippage,\r\n        uint64 _slippageFee\r\n    ) external;\r\n\r\n    // ============================== AgToken ======================================\r\n\r\n    function updateStocksUsers(uint256 amount, address poolManager) external;\r\n\r\n    // ============================= Governance ====================================\r\n\r\n    function setCore(address newCore) external;\r\n\r\n    function addGovernor(address _governor) external;\r\n\r\n    function removeGovernor(address _governor) external;\r\n\r\n    function setGuardian(address newGuardian, address oldGuardian) external;\r\n\r\n    function revokeGuardian(address oldGuardian) external;\r\n\r\n    function setCapOnStableAndMaxInterests(\r\n        uint256 _capOnStableMinted,\r\n        uint256 _maxInterestsDistributed,\r\n        IPoolManager poolManager\r\n    ) external;\r\n\r\n    function setIncentivesForSLPs(\r\n        uint64 _feesForSLPs,\r\n        uint64 _interestsForSLPs,\r\n        IPoolManager poolManager\r\n    ) external;\r\n\r\n    function setUserFees(\r\n        IPoolManager poolManager,\r\n        uint64[] memory _xFee,\r\n        uint64[] memory _yFee,\r\n        uint8 _mint\r\n    ) external;\r\n\r\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\r\n\r\n    function pause(bytes32 agent, IPoolManager poolManager) external;\r\n\r\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\r\n}\r\n\r\n/// @title IStableMaster\r\n/// @author Angle Core Team\r\n/// @notice Previous interface with additionnal getters for public variables and mappings\r\ninterface IStableMaster is IStableMasterFunctions {\r\n    function agToken() external view returns (address);\r\n\r\n    function collateralMap(IPoolManager poolManager)\r\n        external\r\n        view\r\n        returns (\r\n            IERC20 token,\r\n            ISanToken sanToken,\r\n            IPerpetualManager perpetualManager,\r\n            IOracle oracle,\r\n            uint256 stocksUsers,\r\n            uint256 sanRate,\r\n            uint256 collatBase,\r\n            SLPData memory slpData,\r\n            MintBurnData memory feeData\r\n        );\r\n}\r\n\r\n\r\n// File contracts/utils/FunctionUtils.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title FunctionUtils\r\n/// @author Angle Core Team\r\n/// @notice Contains all the utility functions that are needed in different places of the protocol\r\n/// @dev Functions in this contract should typically be pure functions\r\n/// @dev This contract is voluntarily a contract and not a library to save some gas cost every time it is used\r\ncontract FunctionUtils {\r\n    /// @notice Base that is used to compute ratios and floating numbers\r\n    uint256 public constant BASE_TOKENS = 10**18;\r\n    /// @notice Base that is used to define parameters that need to have a floating value (for instance parameters\r\n    /// that are defined as ratios)\r\n    uint256 public constant BASE_PARAMS = 10**9;\r\n\r\n    /// @notice Computes the value of a linear by part function at a given point\r\n    /// @param x Point of the function we want to compute\r\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\r\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\r\n    /// @dev The evolution of the linear by part function between two breaking points is linear\r\n    /// @dev Before the first breaking point and after the last one, the function is constant with a value\r\n    /// equal to the first or last value of the yArray\r\n    /// @dev This function is relevant if `x` is between O and `BASE_PARAMS`. If `x` is greater than that, then\r\n    /// everything will be as if `x` is equal to the greater element of the `xArray`\r\n    function _piecewiseLinear(\r\n        uint64 x,\r\n        uint64[] memory xArray,\r\n        uint64[] memory yArray\r\n    ) internal pure returns (uint64) {\r\n        if (x >= xArray[xArray.length - 1]) {\r\n            return yArray[xArray.length - 1];\r\n        } else if (x <= xArray[0]) {\r\n            return yArray[0];\r\n        } else {\r\n            uint256 lower;\r\n            uint256 upper = xArray.length - 1;\r\n            uint256 mid;\r\n            while (upper - lower > 1) {\r\n                mid = lower + (upper - lower) / 2;\r\n                if (xArray[mid] <= x) {\r\n                    lower = mid;\r\n                } else {\r\n                    upper = mid;\r\n                }\r\n            }\r\n            if (yArray[upper] > yArray[lower]) {\r\n                // There is no risk of overflow here as in the product of the difference of `y`\r\n                // with the difference of `x`, the product is inferior to `BASE_PARAMS**2` which does not\r\n                // overflow for `uint64`\r\n                return\r\n                    yArray[lower] +\r\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\r\n                    (xArray[upper] - xArray[lower]);\r\n            } else {\r\n                return\r\n                    yArray[lower] -\r\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\r\n                    (xArray[upper] - xArray[lower]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Checks if the input arrays given by governance to update the fee structure is valid\r\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\r\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\r\n    /// @dev This function is a way to avoid some governance attacks or errors\r\n    /// @dev The modifier checks if the arrays have a non null length, if their length is the same, if the values\r\n    /// in the `xArray` are in ascending order and if the values in the `xArray` and in the `yArray` are not superior\r\n    /// to `BASE_PARAMS`\r\n    modifier onlyCompatibleInputArrays(uint64[] memory xArray, uint64[] memory yArray) {\r\n        require(xArray.length == yArray.length && xArray.length > 0, \"5\");\r\n        for (uint256 i = 0; i <= yArray.length - 1; i++) {\r\n            require(yArray[i] <= uint64(BASE_PARAMS) && xArray[i] <= uint64(BASE_PARAMS), \"6\");\r\n            if (i > 0) {\r\n                require(xArray[i] > xArray[i - 1], \"7\");\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks if the new value given for the parameter is consistent (it should be inferior to 1\r\n    /// if it corresponds to a ratio)\r\n    /// @param fees Value of the new parameter to check\r\n    modifier onlyCompatibleFees(uint64 fees) {\r\n        require(fees <= BASE_PARAMS, \"4\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks if the new address given is not null\r\n    /// @param newAddress Address to check\r\n    /// @dev Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation\r\n    modifier zeroCheck(address newAddress) {\r\n        require(newAddress != address(0), \"0\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/perpetualManager/PerpetualManagerEvents.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Used in the `forceCashOutPerpetuals` function to store owners of perpetuals which have been force cashed\r\n// out, along with the amount associated to it\r\nstruct Pairs {\r\n    address owner;\r\n    uint256 netCashOutAmount;\r\n}\r\n\r\n/// @title PerpetualManagerEvents\r\n/// @author Angle Core Team\r\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents perpetuals\r\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\r\n/// @dev This file contains all the events of the `PerpetualManager` contract\r\ncontract PerpetualManagerEvents {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    event PerpetualUpdated(uint256 _perpetualID, uint256 _margin);\r\n\r\n    event PerpetualOpened(uint256 _perpetualID, uint256 _entryRate, uint256 _margin, uint256 _committedAmount);\r\n\r\n    event PerpetualClosed(uint256 _perpetualID, uint256 _closeAmount);\r\n\r\n    event PerpetualsForceClosed(uint256[] perpetualIDs, Pairs[] ownerAndCashOut, address keeper, uint256 reward);\r\n\r\n    event KeeperTransferred(address keeperAddress, uint256 liquidationFees);\r\n\r\n    // ============================== Parameters ===================================\r\n\r\n    event BaseURIUpdated(string _baseURI);\r\n\r\n    event LockTimeUpdated(uint64 _lockTime);\r\n\r\n    event KeeperFeesCapUpdated(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap);\r\n\r\n    event TargetAndLimitHAHedgeUpdated(uint64 _targetHAHedge, uint64 _limitHAHedge);\r\n\r\n    event BoundsPerpetualUpdated(uint64 _maxLeverage, uint64 _maintenanceMargin);\r\n\r\n    event HAFeesUpdated(uint64[] _xHAFees, uint64[] _yHAFees, uint8 deposit);\r\n\r\n    event KeeperFeesLiquidationRatioUpdated(uint64 _keeperFeesLiquidationRatio);\r\n\r\n    event KeeperFeesClosingUpdated(uint64[] xKeeperFeesClosing, uint64[] yKeeperFeesClosing);\r\n\r\n    // =============================== Reward ======================================\r\n\r\n    event RewardAdded(uint256 _reward);\r\n\r\n    event RewardPaid(address indexed _user, uint256 _reward);\r\n\r\n    event RewardsDistributionUpdated(address indexed _rewardsDistributor);\r\n\r\n    event RewardsDistributionDurationUpdated(uint256 _rewardsDuration, address indexed _rewardsDistributor);\r\n\r\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\r\n}\r\n\r\n\r\n// File contracts/perpetualManager/PerpetualManagerStorage.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\nstruct Perpetual {\r\n    // Oracle value at the moment of perpetual opening\r\n    uint256 entryRate;\r\n    // Timestamp at which the perpetual was opened\r\n    uint256 entryTimestamp;\r\n    // Amount initially brought in the perpetual (net from fees) + amount added - amount removed from it\r\n    // This is the only element that can be modified in the perpetual after its creation\r\n    uint256 margin;\r\n    // Amount of collateral covered by the perpetual. This cannot be modified once the perpetual is opened.\r\n    // The amount covered is used interchangeably with the amount hedged\r\n    uint256 committedAmount;\r\n}\r\n\r\n/// @title PerpetualManagerStorage\r\n/// @author Angle Core Team\r\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents positions and perpetuals\r\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\r\n/// @dev This file contains all the parameters and references used in the `PerpetualManager` contract\r\n// solhint-disable-next-line max-states-count\r\ncontract PerpetualManagerStorage is PerpetualManagerEvents, FunctionUtils {\r\n    // Base used in the collateral implementation (ERC20 decimal)\r\n    uint256 internal _collatBase;\r\n\r\n    // ============================== Perpetual Variables ==========================\r\n\r\n    /// @notice Total amount of stablecoins that are insured (i.e. that could be redeemed against\r\n    /// collateral thanks to HAs)\r\n    /// When a HA opens a perpetual, it covers/hedges a fixed amount of stablecoins for the protocol, equal to\r\n    /// the committed amount times the entry rate\r\n    /// `totalHedgeAmount` is the sum of all these hedged amounts\r\n    uint256 public totalHedgeAmount;\r\n\r\n    // Counter to generate a unique `perpetualID` for each perpetual\r\n    CountersUpgradeable.Counter internal _perpetualIDcount;\r\n\r\n    // ========================== Mutable References ============================\r\n\r\n    /// @notice `Oracle` to give the rate feed, that is the price of the collateral\r\n    /// with respect to the price of the stablecoin\r\n    /// This reference can be modified by the corresponding `StableMaster` contract\r\n    IOracle public oracle;\r\n\r\n    // `FeeManager` address allowed to update the way fees are computed for this contract\r\n    // This reference can be modified by the `PoolManager` contract\r\n    IFeeManager internal _feeManager;\r\n\r\n    // ========================== Immutable References ==========================\r\n\r\n    /// @notice Interface for the `rewardToken` distributed as a reward\r\n    /// As of Angle V1, only a single `rewardToken` can be distributed to HAs who own a perpetual\r\n    /// This implementation assumes that reward tokens have a base of 18 decimals\r\n    IERC20 public rewardToken;\r\n\r\n    /// @notice Address of the `PoolManager` instance\r\n    IPoolManager public poolManager;\r\n\r\n    // Address of the `StableMaster` instance\r\n    IStableMaster internal _stableMaster;\r\n\r\n    // Interface for the underlying token accepted by this contract\r\n    // This reference cannot be changed, it is taken from the `PoolManager`\r\n    IERC20 internal _token;\r\n\r\n    // ======================= Fees and other Parameters ===========================\r\n\r\n    /// Deposit fees for HAs depend on the hedge ratio that is the ratio between what is hedged\r\n    /// (or covered, this is a synonym) by HAs compared with the total amount to hedge\r\n    /// @notice Thresholds for the ratio between to amount hedged and the amount to hedge\r\n    /// The bigger the ratio the bigger the fees will be because this means that the max amount\r\n    /// to insure is soon to be reached\r\n    uint64[] public xHAFeesDeposit;\r\n\r\n    /// @notice Deposit fees at threshold values\r\n    /// This array should have the same length as the array above\r\n    /// The evolution of the fees between two threshold values is linear\r\n    uint64[] public yHAFeesDeposit;\r\n\r\n    /// Withdraw fees for HAs also depend on the hedge ratio\r\n    /// @notice Thresholds for the hedge ratio\r\n    uint64[] public xHAFeesWithdraw;\r\n\r\n    /// @notice Withdraw fees at threshold values\r\n    uint64[] public yHAFeesWithdraw;\r\n\r\n    /// @notice Maintenance Margin (in `BASE_PARAMS`) for each perpetual\r\n    /// The margin ratio is defined for a perpetual as: `(initMargin + PnL) / committedAmount` where\r\n    /// `PnL = committedAmount * (1 - initRate/currentRate)`\r\n    /// If the `marginRatio` is below `maintenanceMargin`: then the perpetual can be liquidated\r\n    uint64 public maintenanceMargin;\r\n\r\n    /// @notice Maximum leverage multiplier authorized for HAs (`in BASE_PARAMS`)\r\n    /// Leverage for a perpetual here corresponds to the ratio between the amount committed\r\n    /// and the margin of the perpetual\r\n    uint64 public maxLeverage;\r\n\r\n    /// @notice Target proportion of stablecoins issued using this collateral to insure with HAs.\r\n    /// This variable is exactly the same as the one in the `StableMaster` contract for this collateral.\r\n    /// Above this hedge ratio, HAs cannot open new perpetuals\r\n    /// When keepers are forcing the closing of some perpetuals, they are incentivized to bringing\r\n    /// the hedge ratio to this proportion\r\n    uint64 public targetHAHedge;\r\n\r\n    /// @notice Limit proportion of stablecoins issued using this collateral that HAs can insure\r\n    /// Above this ratio `forceCashOut` is activated and anyone can see its perpetual cashed out\r\n    uint64 public limitHAHedge;\r\n\r\n    /// @notice Extra parameter from the `FeeManager` contract that is multiplied to the fees from above and that\r\n    /// can be used to change deposit fees. It works as a bonus - malus fee, if `haBonusMalusDeposit > BASE_PARAMS`,\r\n    /// then the fee will be larger than `haFeesDeposit`, if `haBonusMalusDeposit < BASE_PARAMS`, fees will be smaller.\r\n    /// This parameter, updated by keepers in the `FeeManager` contract, could most likely depend on the collateral ratio\r\n    uint64 public haBonusMalusDeposit;\r\n\r\n    /// @notice Extra parameter from the `FeeManager` contract that is multiplied to the fees from above and that\r\n    /// can be used to change withdraw fees. It works as a bonus - malus fee, if `haBonusMalusWithdraw > BASE_PARAMS`,\r\n    /// then the fee will be larger than `haFeesWithdraw`, if `haBonusMalusWithdraw < BASE_PARAMS`, fees will be smaller\r\n    uint64 public haBonusMalusWithdraw;\r\n\r\n    /// @notice Amount of time before HAs are allowed to withdraw funds from their perpetuals\r\n    /// either using `removeFromPerpetual` or `closePerpetual`. New perpetuals cannot be forced closed in\r\n    /// situations where the `forceClosePerpetuals` function is activated before this `lockTime` elapsed\r\n    uint64 public lockTime;\r\n\r\n    // ================================= Keeper fees ======================================\r\n    // All these parameters can be modified by their corresponding governance function\r\n\r\n    /// @notice Portion of the leftover cash out amount of liquidated perpetuals that go to\r\n    /// liquidating keepers\r\n    uint64 public keeperFeesLiquidationRatio;\r\n\r\n    /// @notice Cap on the fees that go to keepers liquidating a perpetual\r\n    /// If a keeper liquidates n perpetuals in a single transaction, then this keeper is entitled to get as much as\r\n    /// `n * keeperFeesLiquidationCap` as a reward\r\n    uint256 public keeperFeesLiquidationCap;\r\n\r\n    /// @notice Cap on the fees that go to keepers closing perpetuals when too much collateral is hedged by HAs\r\n    /// (hedge ratio above `limitHAHedge`)\r\n    /// If a keeper forces the closing of n perpetuals in a single transaction, then this keeper is entitled to get\r\n    /// as much as `keeperFeesClosingCap`. This cap amount is independent of the number of perpetuals closed\r\n    uint256 public keeperFeesClosingCap;\r\n\r\n    /// @notice Thresholds on the values of the rate between the current hedged amount (`totalHedgeAmount`) and the\r\n    /// target hedged amount by HAs (`targetHedgeAmount`) divided by 2. A value of `0.5` corresponds to a hedge ratio\r\n    /// of `1`. Doing this allows to maintain an array with values of `x` inferior to `BASE_PARAMS`.\r\n    uint64[] public xKeeperFeesClosing;\r\n\r\n    /// @notice Values at thresholds of the proportions of the fees that should go to keepers closing perpetuals\r\n    uint64[] public yKeeperFeesClosing;\r\n\r\n    // =========================== Staking Parameters ==============================\r\n\r\n    /// @notice Below are parameters that can also be found in other staking contracts\r\n    /// to be able to compute rewards from staking (having perpetuals here) correctly\r\n    uint256 public periodFinish;\r\n    uint256 public rewardRate;\r\n    uint256 public rewardsDuration;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    address public rewardsDistribution;\r\n\r\n    // ============================== ERC721 Base URI ==============================\r\n\r\n    /// @notice URI used for the metadata of the perpetuals\r\n    string public baseURI;\r\n\r\n    // =============================== Mappings ====================================\r\n\r\n    /// @notice Mapping from `perpetualID` to perpetual data\r\n    mapping(uint256 => Perpetual) public perpetualData;\r\n\r\n    /// @notice Mapping used to compute the rewards earned by a perpetual in a timeframe\r\n    mapping(uint256 => uint256) public perpetualRewardPerTokenPaid;\r\n\r\n    /// @notice Mapping used to get how much rewards in governance tokens are gained by a perpetual\r\n    // identified by its ID\r\n    mapping(uint256 => uint256) public rewards;\r\n\r\n    // Mapping from `perpetualID` to owner address\r\n    mapping(uint256 => address) internal _owners;\r\n\r\n    // Mapping from owner address to perpetual owned count\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    // Mapping from `perpetualID` to approved address\r\n    mapping(uint256 => address) internal _perpetualApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n}\r\n\r\n\r\n// File contracts/perpetualManager/PerpetualManagerInternal.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title PerpetualManagerInternal\r\n/// @author Angle Core Team\r\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents perpetuals\r\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\r\n/// @dev This file contains all the internal functions of the `PerpetualManager` contract\r\ncontract PerpetualManagerInternal is PerpetualManagerStorage {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ======================== State Modifying Functions ==========================\r\n\r\n    /// @notice Cashes out a perpetual, which means that it simply deletes the references to the perpetual\r\n    /// in the contract\r\n    /// @param perpetualID ID of the perpetual\r\n    /// @param perpetual Data of the perpetual\r\n    function _closePerpetual(uint256 perpetualID, Perpetual memory perpetual) internal {\r\n        // Handling the staking logic\r\n        // Reward should always be updated before the `totalHedgeAmount`\r\n        // Rewards are distributed to the perpetual which is liquidated\r\n        uint256 hedge = perpetual.committedAmount * perpetual.entryRate;\r\n        _getReward(perpetualID, hedge);\r\n        delete perpetualRewardPerTokenPaid[perpetualID];\r\n\r\n        // Updating `totalHedgeAmount` to represent the fact that less money is insured\r\n        totalHedgeAmount -= hedge / _collatBase;\r\n\r\n        _burn(perpetualID);\r\n    }\r\n\r\n    /// @notice Allows the protocol to transfer collateral to an address while handling the case where there are\r\n    /// not enough reserves\r\n    /// @param owner Address of the receiver\r\n    /// @param amount The amount of collateral sent\r\n    /// @dev If there is not enough collateral in balance (this can happen when money has been lent to strategies),\r\n    /// then the owner is reimbursed by receiving what is missing in sanTokens at the correct value\r\n    function _secureTransfer(address owner, uint256 amount) internal {\r\n        uint256 curBalance = poolManager.getBalance();\r\n        if (curBalance >= amount && amount > 0) {\r\n            // Case where there is enough in reserves to reimburse the person\r\n            _token.safeTransferFrom(address(poolManager), owner, amount);\r\n        } else if (amount > 0) {\r\n            // When there is not enough to reimburse the entire amount, the protocol reimburses\r\n            // what it can using its reserves and the rest is paid in sanTokens at the current\r\n            // exchange rate\r\n            uint256 amountLeft = amount - curBalance;\r\n            _token.safeTransferFrom(address(poolManager), owner, curBalance);\r\n            _stableMaster.convertToSLP(amountLeft, owner);\r\n        }\r\n    }\r\n\r\n    /// @notice Checks whether the perpetual should be liquidated or not, and if so liquidates the perpetual\r\n    /// @param perpetualID ID of the perpetual to check and potentially liquidate\r\n    /// @param perpetual Data of the perpetual to check\r\n    /// @param rateDown Oracle value to compute the cash out amount of the perpetual\r\n    /// @return Cash out amount of the perpetual\r\n    /// @return Whether the perpetual was liquidated or not\r\n    /// @dev Generally, to check for the liquidation of a perpetual, we use the lowest oracle value possible:\r\n    /// it's the one that is most at the advantage of the protocol, hence the `rateDown` parameter\r\n    function _checkLiquidation(\r\n        uint256 perpetualID,\r\n        Perpetual memory perpetual,\r\n        uint256 rateDown\r\n    ) internal returns (uint256, uint256) {\r\n        uint256 liquidated;\r\n        (uint256 cashOutAmount, uint256 reachMaintenanceMargin) = _getCashOutAmount(perpetual, rateDown);\r\n        if (cashOutAmount == 0 || reachMaintenanceMargin == 1) {\r\n            _closePerpetual(perpetualID, perpetual);\r\n            // No need for an event to find out that a perpetual is liquidated\r\n            liquidated = 1;\r\n        }\r\n        return (cashOutAmount, liquidated);\r\n    }\r\n\r\n    // ========================= Internal View Functions ===========================\r\n\r\n    /// @notice Gets the current cash out amount of a perpetual\r\n    /// @param perpetual Data of the concerned perpetual\r\n    /// @param rate Value of the oracle\r\n    /// @return cashOutAmount Amount that the HA could get by closing this perpetual\r\n    /// @return reachMaintenanceMargin Whether the position of the perpetual is now too small\r\n    /// compared with its initial position\r\n    /// @dev Refer to the whitepaper or the doc for the formulas of the cash out amount\r\n    /// @dev The notion of `maintenanceMargin` is standard in centralized platforms offering perpetual futures\r\n    function _getCashOutAmount(Perpetual memory perpetual, uint256 rate)\r\n        internal\r\n        view\r\n        returns (uint256 cashOutAmount, uint256 reachMaintenanceMargin)\r\n    {\r\n        // All these computations are made just because we are working with uint and not int\r\n        // so we cannot do x-y if x<y\r\n        uint256 newCommit = (perpetual.committedAmount * perpetual.entryRate) / rate;\r\n        // Checking if a liquidation is needed: for this to happen the `cashOutAmount` should be inferior\r\n        // to the maintenance margin of the perpetual\r\n        reachMaintenanceMargin;\r\n        if (newCommit >= perpetual.committedAmount + perpetual.margin) cashOutAmount = 0;\r\n        else {\r\n            // The definition of the margin ratio is `(margin + PnL) / committedAmount`\r\n            // where `PnL = commit * (1-entryRate/currentRate)`\r\n            // So here: `newCashOutAmount = margin + PnL`\r\n            cashOutAmount = perpetual.committedAmount + perpetual.margin - newCommit;\r\n            if (cashOutAmount * BASE_PARAMS <= perpetual.committedAmount * maintenanceMargin)\r\n                reachMaintenanceMargin = 1;\r\n        }\r\n    }\r\n\r\n    /// @notice Calls the oracle to read both Chainlink and Uniswap rates\r\n    /// @return The lowest oracle value (between Chainlink and Uniswap) is the first outputted value\r\n    /// @return The highest oracle value is the second output\r\n    /// @dev If the oracle only involves a single oracle fees (like just Chainlink for USD-EUR),\r\n    /// the same value is returned twice\r\n    function _getOraclePrice() internal view returns (uint256, uint256) {\r\n        return oracle.readAll();\r\n    }\r\n\r\n    /// @notice Computes the incentive for the keeper as a function of the cash out amount of a liquidated perpetual\r\n    /// which value falls below its maintenance margin\r\n    /// @param cashOutAmount Value remaining in the perpetual\r\n    /// @dev By computing keeper fees as a fraction of the cash out amount of a perpetual rather than as a fraction\r\n    /// of the `committedAmount`, keepers are incentivized to react fast when a perpetual is below the maintenance margin\r\n    /// @dev Perpetual exchange protocols typically compute liquidation fees using an equivalent of the `committedAmount`,\r\n    /// this is not the case here\r\n    function _computeKeeperLiquidationFees(uint256 cashOutAmount) internal view returns (uint256 keeperFees) {\r\n        keeperFees = (cashOutAmount * keeperFeesLiquidationRatio) / BASE_PARAMS;\r\n        keeperFees = keeperFees < keeperFeesLiquidationCap ? keeperFees : keeperFeesLiquidationCap;\r\n    }\r\n\r\n    /// @notice Gets the value of the hedge ratio that is the ratio between the amount currently hedged by HAs\r\n    /// and the target amount that should be hedged by them\r\n    /// @param currentHedgeAmount Amount currently covered by HAs\r\n    /// @return ratio Ratio between the amount of collateral (in stablecoin value) currently hedged\r\n    /// and the target amount to hedge\r\n    function _computeHedgeRatio(uint256 currentHedgeAmount) internal view returns (uint64 ratio) {\r\n        // Fetching info from the `StableMaster`: the amount to hedge is based on the `stocksUsers`\r\n        // of the given collateral\r\n        uint256 targetHedgeAmount = (_stableMaster.getStocksUsers() * targetHAHedge) / BASE_PARAMS;\r\n        if (currentHedgeAmount < targetHedgeAmount)\r\n            ratio = uint64((currentHedgeAmount * BASE_PARAMS) / targetHedgeAmount);\r\n        else ratio = uint64(BASE_PARAMS);\r\n    }\r\n\r\n    // =========================== Fee Computation =================================\r\n\r\n    /// @notice Gets the net margin corrected from the fees at perpetual opening\r\n    /// @param margin Amount brought in the perpetual at creation\r\n    /// @param totalHedgeAmountUpdate Amount of stablecoins that this perpetual is going to insure\r\n    /// @param committedAmount Committed amount in the perpetual, we need it to compute the fees\r\n    /// paid by the HA\r\n    /// @return netMargin Amount that will be written in the perpetual as the `margin`\r\n    /// @dev The amount of stablecoins insured by a perpetual is `committedAmount * oracleRate / _collatBase`\r\n    function _getNetMargin(\r\n        uint256 margin,\r\n        uint256 totalHedgeAmountUpdate,\r\n        uint256 committedAmount\r\n    ) internal view returns (uint256 netMargin) {\r\n        // Checking if the HA has the right to open a perpetual with such amount\r\n        // If HAs hedge more than the target amount, then new HAs will not be able to create perpetuals\r\n        // The amount hedged by HAs after opening the perpetual is going to be:\r\n        uint64 ratio = _computeHedgeRatio(totalHedgeAmount + totalHedgeAmountUpdate);\r\n        require(ratio < uint64(BASE_PARAMS), \"25\");\r\n        // Computing the net margin of HAs to store in the perpetual: it consists simply in deducing fees\r\n        // Those depend on how much is already hedged by HAs compared with what's to hedge\r\n        uint256 haFeesDeposit = (haBonusMalusDeposit * _piecewiseLinear(ratio, xHAFeesDeposit, yHAFeesDeposit)) /\r\n            BASE_PARAMS;\r\n        // Fees are rounded to the advantage of the protocol\r\n        haFeesDeposit = committedAmount - (committedAmount * (BASE_PARAMS - haFeesDeposit)) / BASE_PARAMS;\r\n        // Fees are computed based on the committed amount of the perpetual\r\n        // The following reverts if fees are too big compared to the margin\r\n        netMargin = margin - haFeesDeposit;\r\n    }\r\n\r\n    /// @notice Gets the net amount to give to a HA (corrected from the fees) in case of a perpetual closing\r\n    /// @param committedAmount Committed amount in the perpetual\r\n    /// @param cashOutAmount The current cash out amount of the perpetual\r\n    /// @param ratio What's hedged divided by what's to hedge\r\n    /// @return netCashOutAmount Amount that will be distributed to the HA\r\n    /// @return feesPaid Amount of fees paid by the HA at perpetual closing\r\n    /// @dev This function is called by the `closePerpetual` and by the `forceClosePerpetuals`\r\n    /// function\r\n    /// @dev The amount of fees paid by the HA is used to compute the incentive given to HAs closing perpetuals\r\n    /// when too much is covered\r\n    function _getNetCashOutAmount(\r\n        uint256 cashOutAmount,\r\n        uint256 committedAmount,\r\n        uint64 ratio\r\n    ) internal view returns (uint256 netCashOutAmount, uint256 feesPaid) {\r\n        feesPaid = (haBonusMalusWithdraw * _piecewiseLinear(ratio, xHAFeesWithdraw, yHAFeesWithdraw)) / BASE_PARAMS;\r\n        // Rounding the fees at the protocol's advantage\r\n        feesPaid = committedAmount - (committedAmount * (BASE_PARAMS - feesPaid)) / BASE_PARAMS;\r\n        if (feesPaid >= cashOutAmount) {\r\n            netCashOutAmount = 0;\r\n            feesPaid = cashOutAmount;\r\n        } else {\r\n            netCashOutAmount = cashOutAmount - feesPaid;\r\n        }\r\n    }\r\n\r\n    // ========================= Reward Distribution ===============================\r\n\r\n    /// @notice View function to query the last timestamp at which a reward was distributed\r\n    /// @return Current timestamp if a reward is being distributed or the last timestamp\r\n    function _lastTimeRewardApplicable() internal view returns (uint256) {\r\n        uint256 returnValue = block.timestamp < periodFinish ? block.timestamp : periodFinish;\r\n        return returnValue;\r\n    }\r\n\r\n    /// @notice Used to actualize the `rewardPerTokenStored`\r\n    /// @dev It adds to the reward per token: the time elapsed since the `rewardPerTokenStored`\r\n    /// was last updated multiplied by the `rewardRate` divided by the number of tokens\r\n    /// @dev Specific attention should be placed on the base here: `rewardRate` is in the base of the reward token\r\n    /// and `totalHedgeAmount` is in `BASE_TOKENS` here: as this function concerns an amount of reward\r\n    /// tokens, the output of this function should be in the base of the reward token too\r\n    function _rewardPerToken() internal view returns (uint256) {\r\n        if (totalHedgeAmount == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored +\r\n            ((_lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * BASE_TOKENS) /\r\n            totalHedgeAmount;\r\n    }\r\n\r\n    /// @notice Allows a perpetual owner to withdraw rewards\r\n    /// @param perpetualID ID of the perpetual which accumulated tokens\r\n    /// @param hedge Perpetual commit amount times the entry rate\r\n    /// @dev Internal version of the `getReward` function\r\n    /// @dev In case where an approved address calls to close a perpetual, rewards are still going to get distributed\r\n    /// to the owner of the perpetual, and not necessarily to the address getting the proceeds of the perpetual\r\n    function _getReward(uint256 perpetualID, uint256 hedge) internal {\r\n        _updateReward(perpetualID, hedge);\r\n        uint256 reward = rewards[perpetualID];\r\n        if (reward > 0) {\r\n            rewards[perpetualID] = 0;\r\n            address owner = _owners[perpetualID];\r\n            // Attention here, there may be reentrancy attacks because of the following call\r\n            // to an external contract done before other things are modified. Yet since the `rewardToken`\r\n            // is mostly going to be a trusted contract controlled by governance (namely the ANGLE token), then\r\n            // there is no point in putting an expensive `nonReentrant` modifier in the functions in `PerpetualManagerFront`\r\n            // that allow indirect interactions with `_updateReward`. If new `rewardTokens` are set, we could think about\r\n            // upgrading the `PerpetualManagerFront` contract\r\n            rewardToken.safeTransfer(owner, reward);\r\n            emit RewardPaid(owner, reward);\r\n        }\r\n    }\r\n\r\n    /// @notice Allows to check the amount of gov tokens earned by a perpetual\r\n    /// @param perpetualID ID of the perpetual which accumulated tokens\r\n    /// @param hedge Perpetual commit amount times the entry rate\r\n    /// @return Amount of gov tokens earned by the perpetual\r\n    /// @dev A specific attention should be paid to have the base here: we consider that each HA stakes an amount\r\n    /// equal to `committedAmount * entryRate / _collatBase`, here as the `hedge` corresponds to `committedAmount * entryRate`,\r\n    /// we just need to divide by `_collatBase`\r\n    /// @dev HAs earn reward tokens which are in base `BASE_TOKENS`\r\n    function _earned(uint256 perpetualID, uint256 hedge) internal view returns (uint256) {\r\n        return\r\n            (hedge * (_rewardPerToken() - perpetualRewardPerTokenPaid[perpetualID])) /\r\n            BASE_TOKENS /\r\n            _collatBase +\r\n            rewards[perpetualID];\r\n    }\r\n\r\n    /// @notice Updates the amount of gov tokens earned by a perpetual\r\n    /// @param perpetualID of the perpetual which earns tokens\r\n    /// @param hedge Perpetual commit amount times the entry rate\r\n    /// @dev When this function is called in the code, it has already been checked that the `perpetualID`\r\n    /// exists\r\n    function _updateReward(uint256 perpetualID, uint256 hedge) internal {\r\n        rewardPerTokenStored = _rewardPerToken();\r\n        lastUpdateTime = _lastTimeRewardApplicable();\r\n        // No need to check if the `perpetualID` exists here, it has already been checked\r\n        // in the code before when this internal function is called\r\n        rewards[perpetualID] = _earned(perpetualID, hedge);\r\n        perpetualRewardPerTokenPaid[perpetualID] = rewardPerTokenStored;\r\n    }\r\n\r\n    // =============================== ERC721 Logic ================================\r\n\r\n    /// @notice Gets the owner of a perpetual\r\n    /// @param perpetualID ID of the concerned perpetual\r\n    /// @return owner Owner of the perpetual\r\n    function _ownerOf(uint256 perpetualID) internal view returns (address owner) {\r\n        owner = _owners[perpetualID];\r\n        require(owner != address(0), \"2\");\r\n    }\r\n\r\n    /// @notice Gets the addresses approved for a perpetual\r\n    /// @param perpetualID ID of the concerned perpetual\r\n    /// @return Address approved for this perpetual\r\n    function _getApproved(uint256 perpetualID) internal view returns (address) {\r\n        return _perpetualApprovals[perpetualID];\r\n    }\r\n\r\n    /// @notice Safely transfers `perpetualID` token from `from` to `to`, checking first that contract recipients\r\n    /// are aware of the ERC721 protocol to prevent tokens from being forever locked\r\n    /// @param perpetualID ID of the concerned perpetual\r\n    /// @param _data Additional data, it has no specified format and it is sent in call to `to`\r\n    /// @dev This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n    /// implement alternative mechanisms to perform token transfer, such as signature-based\r\n    /// @dev Requirements:\r\n    ///     - `from` cannot be the zero address.\r\n    ///     - `to` cannot be the zero address.\r\n    ///     - `perpetualID` token must exist and be owned by `from`.\r\n    ///     - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 perpetualID,\r\n        bytes memory _data\r\n    ) internal {\r\n        _transfer(from, to, perpetualID);\r\n        require(_checkOnERC721Received(from, to, perpetualID, _data), \"24\");\r\n    }\r\n\r\n    /// @notice Returns whether `perpetualID` exists\r\n    /// @dev Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}\r\n    /// @dev Tokens start existing when they are minted (`_mint`),\r\n    /// and stop existing when they are burned (`_burn`)\r\n    function _exists(uint256 perpetualID) internal view returns (bool) {\r\n        return _owners[perpetualID] != address(0);\r\n    }\r\n\r\n    /// @notice Returns whether `spender` is allowed to manage `perpetualID`\r\n    /// @dev `perpetualID` must exist\r\n    function _isApprovedOrOwner(address spender, uint256 perpetualID) internal view returns (bool) {\r\n        // The following checks if the perpetual exists\r\n        address owner = _ownerOf(perpetualID);\r\n        return (spender == owner || _getApproved(perpetualID) == spender || _operatorApprovals[owner][spender]);\r\n    }\r\n\r\n    /// @notice Mints `perpetualID` and transfers it to `to`\r\n    /// @dev This method is equivalent to the `_safeMint` method used in OpenZeppelin ERC721 contract\r\n    /// @dev `perpetualID` must not exist and `to` cannot be the zero address\r\n    /// @dev Before calling this function it is checked that the `perpetualID` does not exist as it\r\n    /// comes from a counter that has been incremented\r\n    /// @dev Emits a {Transfer} event\r\n    function _mint(address to, uint256 perpetualID) internal {\r\n        _balances[to] += 1;\r\n        _owners[perpetualID] = to;\r\n        emit Transfer(address(0), to, perpetualID);\r\n        require(_checkOnERC721Received(address(0), to, perpetualID, \"\"), \"24\");\r\n    }\r\n\r\n    /// @notice Destroys `perpetualID`\r\n    /// @dev `perpetualID` must exist\r\n    /// @dev Emits a {Transfer} event\r\n    function _burn(uint256 perpetualID) internal {\r\n        address owner = _ownerOf(perpetualID);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), perpetualID);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[perpetualID];\r\n        delete perpetualData[perpetualID];\r\n\r\n        emit Transfer(owner, address(0), perpetualID);\r\n    }\r\n\r\n    /// @notice Transfers `perpetualID` from `from` to `to` as opposed to {transferFrom},\r\n    /// this imposes no restrictions on msg.sender\r\n    /// @dev `to` cannot be the zero address and `perpetualID` must be owned by `from`\r\n    /// @dev Emits a {Transfer} event\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 perpetualID\r\n    ) internal {\r\n        require(_ownerOf(perpetualID) == from, \"1\");\r\n        require(to != address(0), \"26\");\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), perpetualID);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[perpetualID] = to;\r\n\r\n        emit Transfer(from, to, perpetualID);\r\n    }\r\n\r\n    /// @notice Approves `to` to operate on `perpetualID`\r\n    function _approve(address to, uint256 perpetualID) internal {\r\n        _perpetualApprovals[perpetualID] = to;\r\n        emit Approval(_ownerOf(perpetualID), to, perpetualID);\r\n    }\r\n\r\n    /// @notice Internal function to invoke {IERC721Receiver-onERC721Received} on a target address\r\n    /// The call is not executed if the target address is not a contract\r\n    /// @param from Address representing the previous owner of the given token ID\r\n    /// @param to Target address that will receive the tokens\r\n    /// @param perpetualID ID of the token to be transferred\r\n    /// @param _data Bytes optional data to send along with the call\r\n    /// @return Bool whether the call correctly returned the expected magic value\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 perpetualID,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721ReceiverUpgradeable(to).onERC721Received(msg.sender, from, perpetualID, _data) returns (\r\n                bytes4 retval\r\n            ) {\r\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"24\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/perpetualManager/PerpetualManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title PerpetualManager\r\n/// @author Angle Core Team\r\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents positions and perpetuals\r\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\r\n/// @dev This file contains the functions of the `PerpetualManager` that can be interacted with\r\n/// by `StableMaster`, by the `PoolManager`, by the `FeeManager` and by governance\r\ncontract PerpetualManager is\r\n    PerpetualManagerInternal,\r\n    IPerpetualManagerFunctions,\r\n    IStakingRewardsFunctions,\r\n    AccessControlUpgradeable,\r\n    PausableUpgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Role for guardians, governors and `StableMaster`\r\n    /// Made for the `StableMaster` to be able to update some parameters\r\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\r\n    /// @notice Role for `PoolManager` only\r\n    bytes32 public constant POOLMANAGER_ROLE = keccak256(\"POOLMANAGER_ROLE\");\r\n\r\n    // ============================== Modifiers ====================================\r\n\r\n    /// @notice Checks if the person interacting with the perpetual with `perpetualID` is approved\r\n    /// @param caller Address of the person seeking to interact with the perpetual\r\n    /// @param perpetualID ID of the concerned perpetual\r\n    /// @dev Generally in `PerpetualManager`, perpetual owners should store the ID of the perpetuals\r\n    /// they are able to interact with\r\n    modifier onlyApprovedOrOwner(address caller, uint256 perpetualID) {\r\n        require(_isApprovedOrOwner(caller, perpetualID), \"21\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks if the message sender is the rewards distribution address\r\n    modifier onlyRewardsDistribution() {\r\n        require(msg.sender == rewardsDistribution, \"1\");\r\n        _;\r\n    }\r\n\r\n    // =============================== Deployer ====================================\r\n\r\n    /// @notice Notifies the address of the `_feeManager` and of the `oracle`\r\n    /// to this contract and grants the correct roles\r\n    /// @param governorList List of governor addresses of the protocol\r\n    /// @param guardian Address of the guardian of the protocol\r\n    /// @param feeManager_ Reference to the `FeeManager` contract which will be able to update fees\r\n    /// @param oracle_ Reference to the `oracle` contract which will be able to update fees\r\n    /// @dev Called by the `PoolManager` contract when it is activated by the `StableMaster`\r\n    /// @dev The `governorList` and `guardian` here are those of the `Core` contract\r\n    function deployCollateral(\r\n        address[] memory governorList,\r\n        address guardian,\r\n        IFeeManager feeManager_,\r\n        IOracle oracle_\r\n    ) external override onlyRole(POOLMANAGER_ROLE) {\r\n        for (uint256 i = 0; i < governorList.length; i++) {\r\n            _grantRole(GUARDIAN_ROLE, governorList[i]);\r\n        }\r\n        // In the end guardian should be revoked by governance\r\n        _grantRole(GUARDIAN_ROLE, guardian);\r\n        _grantRole(GUARDIAN_ROLE, address(_stableMaster));\r\n        _feeManager = feeManager_;\r\n        oracle = oracle_;\r\n    }\r\n\r\n    // ========================== Rewards Distribution =============================\r\n\r\n    /// @notice Notifies the contract that rewards are going to be shared among HAs of this pool\r\n    /// @param reward Amount of governance tokens to be distributed to HAs\r\n    /// @dev Only the reward distributor contract is allowed to call this function which starts a staking cycle\r\n    /// @dev This function is the equivalent of the `notifyRewardAmount` function found in all staking contracts\r\n    function notifyRewardAmount(uint256 reward) external override onlyRewardsDistribution {\r\n        rewardPerTokenStored = _rewardPerToken();\r\n\r\n        if (block.timestamp >= periodFinish) {\r\n            // If the period is not done, then the reward rate changes\r\n            rewardRate = reward / rewardsDuration;\r\n        } else {\r\n            uint256 remaining = periodFinish - block.timestamp;\r\n            uint256 leftover = remaining * rewardRate;\r\n            // If the period is not over, we compute the reward left and increase reward duration\r\n            rewardRate = (reward + leftover) / rewardsDuration;\r\n        }\r\n        // Ensuring the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of `rewardRate` in the earned and `rewardsPerToken` functions;\r\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n        uint256 balance = rewardToken.balanceOf(address(this));\r\n\r\n        require(rewardRate <= balance / rewardsDuration, \"22\");\r\n\r\n        lastUpdateTime = block.timestamp;\r\n        // Change the duration\r\n        periodFinish = block.timestamp + rewardsDuration;\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    /// @notice Supports recovering LP Rewards from other systems such as BAL to be distributed to holders\r\n    /// or tokens that were mistakenly\r\n    /// @param tokenAddress Address of the token to transfer\r\n    /// @param to Address to give tokens to\r\n    /// @param tokenAmount Amount of tokens to transfer\r\n    function recoverERC20(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 tokenAmount\r\n    ) external override onlyRewardsDistribution {\r\n        require(tokenAddress != address(rewardToken), \"20\");\r\n        IERC20(tokenAddress).safeTransfer(to, tokenAmount);\r\n        emit Recovered(tokenAddress, to, tokenAmount);\r\n    }\r\n\r\n    /// @notice Changes the `rewardsDistribution` associated to this contract\r\n    /// @param _rewardsDistribution Address of the new rewards distributor contract\r\n    /// @dev This function is part of the staking rewards interface and it is used to propagate\r\n    /// a change of rewards distributor notified by the current `rewardsDistribution` address\r\n    /// @dev It has already been checked in the `RewardsDistributor` contract calling\r\n    /// this function that the `newRewardsDistributor` had a compatible reward token\r\n    /// @dev With this function, everything is as if `rewardsDistribution` was admin of its own role\r\n    function setNewRewardsDistribution(address _rewardsDistribution) external override onlyRewardsDistribution {\r\n        rewardsDistribution = _rewardsDistribution;\r\n        emit RewardsDistributionUpdated(_rewardsDistribution);\r\n    }\r\n\r\n    // ================================= Keepers ===================================\r\n\r\n    /// @notice Updates all the fees not depending on individual HA conditions via keeper utils functions\r\n    /// @param feeDeposit New deposit global fees\r\n    /// @param feeWithdraw New withdraw global fees\r\n    /// @dev Governance may decide to incorporate a collateral ratio dependence in the fees for HAs,\r\n    /// in this case it will be done through the `FeeManager` contract\r\n    /// @dev This dependence can either be a bonus or a malus\r\n    function setFeeKeeper(uint64 feeDeposit, uint64 feeWithdraw) external override {\r\n        require(msg.sender == address(_feeManager), \"1\");\r\n        haBonusMalusDeposit = feeDeposit;\r\n        haBonusMalusWithdraw = feeWithdraw;\r\n    }\r\n\r\n    // ======== Governance - Guardian Functions - Staking and Pauses ===============\r\n\r\n    /// @notice Pauses the `getReward` method as well as the functions allowing to open, modify or close perpetuals\r\n    /// @dev After calling this function, it is going to be impossible for HAs to interact with their perpetuals\r\n    /// or claim their rewards on it\r\n    function pause() external override onlyRole(GUARDIAN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpauses HAs functions\r\n    function unpause() external override onlyRole(GUARDIAN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice Sets the conditions and specifies the duration of the reward distribution\r\n    /// @param _rewardsDuration Duration for the rewards for this contract\r\n    /// @param _rewardsDistribution Address which will give the reward tokens\r\n    /// @dev It allows governance to directly change the rewards distribution contract and the conditions\r\n    /// at which this distribution is done\r\n    /// @dev The compatibility of the reward token is not checked here: it is checked\r\n    /// in the rewards distribution contract when activating this as a staking contract,\r\n    /// so if a reward distributor is set here but does not have a compatible reward token, then this reward\r\n    /// distributor will not be able to set this contract as a staking contract\r\n    function setRewardDistribution(uint256 _rewardsDuration, address _rewardsDistribution)\r\n        external\r\n        onlyRole(GUARDIAN_ROLE)\r\n        zeroCheck(_rewardsDistribution)\r\n    {\r\n        rewardsDuration = _rewardsDuration;\r\n        rewardsDistribution = _rewardsDistribution;\r\n        emit RewardsDistributionDurationUpdated(rewardsDuration, rewardsDistribution);\r\n    }\r\n\r\n    // ============ Governance - Guardian Functions - Parameters ===================\r\n\r\n    /// @notice Sets `baseURI` that is the URI to access ERC721 metadata\r\n    /// @param _baseURI New `baseURI` parameter\r\n    function setBaseURI(string memory _baseURI) external onlyRole(GUARDIAN_ROLE) {\r\n        baseURI = _baseURI;\r\n        emit BaseURIUpdated(_baseURI);\r\n    }\r\n\r\n    /// @notice Sets `lockTime` that is the minimum amount of time HAs have to stay within the protocol\r\n    /// @param _lockTime New `lockTime` parameter\r\n    /// @dev This parameter is used to prevent HAs from exiting before a certain amount of time and taking advantage\r\n    /// of insiders' information they may have due to oracle latency\r\n    function setLockTime(uint64 _lockTime) external override onlyRole(GUARDIAN_ROLE) {\r\n        lockTime = _lockTime;\r\n        emit LockTimeUpdated(_lockTime);\r\n    }\r\n\r\n    /// @notice Changes the maximum leverage authorized (commit/margin) and the maintenance margin under which\r\n    /// perpetuals can be liquidated\r\n    /// @param _maxLeverage New value of the maximum leverage allowed\r\n    /// @param _maintenanceMargin The new maintenance margin\r\n    /// @dev For a perpetual, the leverage is defined as the ratio between the committed amount and the margin\r\n    /// @dev For a perpetual, the maintenance margin is defined as the ratio between the margin ratio / the committed amount\r\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin)\r\n        external\r\n        override\r\n        onlyRole(GUARDIAN_ROLE)\r\n        onlyCompatibleFees(_maintenanceMargin)\r\n    {\r\n        // Checking the compatibility of the parameters\r\n        require(BASE_PARAMS**2 > _maxLeverage * _maintenanceMargin, \"8\");\r\n        maxLeverage = _maxLeverage;\r\n        maintenanceMargin = _maintenanceMargin;\r\n        emit BoundsPerpetualUpdated(_maxLeverage, _maintenanceMargin);\r\n    }\r\n\r\n    /// @notice Sets `xHAFees` that is the thresholds of values of the ratio between what's covered (hedged)\r\n    /// divided by what's to hedge with HAs at which fees will change as well as\r\n    /// `yHAFees` that is the value of the deposit or withdraw fees at threshold\r\n    /// @param _xHAFees Array of the x-axis value for the fees (deposit or withdraw)\r\n    /// @param _yHAFees Array of the y-axis value for the fees (deposit or withdraw)\r\n    /// @param deposit Whether deposit or withdraw fees should be updated\r\n    /// @dev Evolution of the fees is linear between two values of thresholds\r\n    /// @dev These x values should be ranked in ascending order\r\n    /// @dev For deposit fees, the higher the x that is the ratio between what's to hedge and what's hedged\r\n    /// the higher y should be (the more expensive it should be for HAs to come in)\r\n    /// @dev For withdraw fees, evolution should follow an opposite logic\r\n    function setHAFees(\r\n        uint64[] memory _xHAFees,\r\n        uint64[] memory _yHAFees,\r\n        uint8 deposit\r\n    ) external override onlyRole(GUARDIAN_ROLE) onlyCompatibleInputArrays(_xHAFees, _yHAFees) {\r\n        if (deposit == 1) {\r\n            xHAFeesDeposit = _xHAFees;\r\n            yHAFeesDeposit = _yHAFees;\r\n        } else {\r\n            xHAFeesWithdraw = _xHAFees;\r\n            yHAFeesWithdraw = _yHAFees;\r\n        }\r\n        emit HAFeesUpdated(_xHAFees, _yHAFees, deposit);\r\n    }\r\n\r\n    /// @notice Sets the target and limit proportions of collateral from users that can be insured by HAs\r\n    /// @param _targetHAHedge Proportion of collateral from users that HAs should hedge\r\n    /// @param _limitHAHedge Proportion of collateral from users above which HAs can see their perpetuals\r\n    /// cashed out\r\n    /// @dev `targetHAHedge` equal to `BASE_PARAMS` means that all the collateral from users should be insured by HAs\r\n    /// @dev `targetHAHedge` equal to 0 means HA should not cover (hedge) anything\r\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge)\r\n        external\r\n        override\r\n        onlyRole(GUARDIAN_ROLE)\r\n        onlyCompatibleFees(_targetHAHedge)\r\n        onlyCompatibleFees(_limitHAHedge)\r\n    {\r\n        require(_targetHAHedge <= _limitHAHedge, \"8\");\r\n        limitHAHedge = _limitHAHedge;\r\n        targetHAHedge = _targetHAHedge;\r\n        // Updating the value in the `stableMaster` contract\r\n        _stableMaster.setTargetHAHedge(_targetHAHedge);\r\n        emit TargetAndLimitHAHedgeUpdated(_targetHAHedge, _limitHAHedge);\r\n    }\r\n\r\n    /// @notice Sets the portion of the leftover cash out amount of liquidated perpetuals that go to keepers\r\n    /// @param _keeperFeesLiquidationRatio Proportion to keepers\r\n    /// @dev This proportion should be inferior to `BASE_PARAMS`\r\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio)\r\n        external\r\n        override\r\n        onlyRole(GUARDIAN_ROLE)\r\n        onlyCompatibleFees(_keeperFeesLiquidationRatio)\r\n    {\r\n        keeperFeesLiquidationRatio = _keeperFeesLiquidationRatio;\r\n        emit KeeperFeesLiquidationRatioUpdated(keeperFeesLiquidationRatio);\r\n    }\r\n\r\n    /// @notice Sets the maximum amounts going to the keepers when closing perpetuals\r\n    /// because too much was hedged by HAs or when liquidating a perpetual\r\n    /// @param _keeperFeesLiquidationCap Maximum reward going to the keeper liquidating a perpetual\r\n    /// @param _keeperFeesClosingCap Maximum reward going to the keeper forcing the closing of an ensemble\r\n    /// of perpetuals\r\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap)\r\n        external\r\n        override\r\n        onlyRole(GUARDIAN_ROLE)\r\n    {\r\n        keeperFeesLiquidationCap = _keeperFeesLiquidationCap;\r\n        keeperFeesClosingCap = _keeperFeesClosingCap;\r\n        emit KeeperFeesCapUpdated(keeperFeesLiquidationCap, keeperFeesClosingCap);\r\n    }\r\n\r\n    /// @notice Sets the x-array (ie thresholds) for `FeeManager` when closing perpetuals and the y-array that is the\r\n    /// value of the proportions of the fees going to keepers closing perpetuals\r\n    /// @param _xKeeperFeesClosing Thresholds for closing fees\r\n    /// @param _yKeeperFeesClosing Value of the fees at the different threshold values specified in `xKeeperFeesClosing`\r\n    /// @dev The x thresholds correspond to values of the hedge ratio divided by two\r\n    /// @dev `xKeeperFeesClosing` and `yKeeperFeesClosing` should have the same length\r\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing)\r\n        external\r\n        override\r\n        onlyRole(GUARDIAN_ROLE)\r\n        onlyCompatibleInputArrays(_xKeeperFeesClosing, _yKeeperFeesClosing)\r\n    {\r\n        xKeeperFeesClosing = _xKeeperFeesClosing;\r\n        yKeeperFeesClosing = _yKeeperFeesClosing;\r\n        emit KeeperFeesClosingUpdated(xKeeperFeesClosing, yKeeperFeesClosing);\r\n    }\r\n\r\n    // ================ Governance - `PoolManager` Functions =======================\r\n\r\n    /// @notice Changes the reference to the `FeeManager` contract\r\n    /// @param feeManager_ New `FeeManager` contract\r\n    /// @dev This allows the `PoolManager` contract to propagate changes to the `PerpetualManager`\r\n    /// @dev This is the only place where the `_feeManager` can be changed, it is as if there was\r\n    /// a `FEEMANAGER_ROLE` for which `PoolManager` was the admin\r\n    function setFeeManager(IFeeManager feeManager_) external override onlyRole(POOLMANAGER_ROLE) {\r\n        _feeManager = feeManager_;\r\n    }\r\n\r\n    // ======================= `StableMaster` Function =============================\r\n\r\n    /// @notice Changes the oracle contract used to compute collateral price with respect to the stablecoin's price\r\n    /// @param oracle_ Oracle contract\r\n    /// @dev The collateral `PoolManager` does not store a reference to an oracle, the value of the oracle\r\n    /// is hence directly set by the `StableMaster`\r\n    function setOracle(IOracle oracle_) external override {\r\n        require(msg.sender == address(_stableMaster), \"1\");\r\n        oracle = oracle_;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/perpetualManager/PerpetualManagerFront.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/// @title PerpetualManagerFront\r\n/// @author Angle Core Team\r\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents perpetuals\r\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\r\n/// @dev This file contains the functions of the `PerpetualManager` that can be directly interacted\r\n/// with by external agents. These functions are the ones that need to be called to open, modify or close\r\n/// perpetuals\r\n/// @dev `PerpetualManager` naturally handles staking, the code allowing HAs to stake has been inspired from\r\n/// https://github.com/SetProtocol/index-coop-contracts/blob/master/contracts/staking/StakingRewardsV2.sol\r\n/// @dev Perpetuals at Angle protocol are treated as NFTs, this contract handles the logic for that\r\ncontract PerpetualManagerFront is PerpetualManager, IPerpetualManagerFront {\r\n    using SafeERC20 for IERC20;\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n\r\n    // =============================== Deployer ====================================\r\n\r\n    /// @notice Initializes the `PerpetualManager` contract\r\n    /// @param poolManager_ Reference to the `PoolManager` contract handling the collateral associated to the `PerpetualManager`\r\n    /// @param rewardToken_ Reference to the `rewardtoken` that can be distributed to HAs as they have open positions\r\n    /// @dev The reward token is most likely going to be the ANGLE token\r\n    /// @dev Since this contract is upgradeable, this function is an `initialize` and not a `constructor`\r\n    /// @dev Zero checks are only performed on addresses for which no external calls are made, in this case just\r\n    /// the `rewardToken_` is checked\r\n    /// @dev After initializing this contract, all the fee parameters should be initialized by governance using\r\n    /// the setters in this contract\r\n    function initialize(IPoolManager poolManager_, IERC20 rewardToken_)\r\n        external\r\n        initializer\r\n        zeroCheck(address(rewardToken_))\r\n    {\r\n        // Initializing contracts\r\n        __Pausable_init();\r\n        __AccessControl_init();\r\n\r\n        // Creating references\r\n        poolManager = poolManager_;\r\n        _token = IERC20(poolManager_.token());\r\n        _stableMaster = IStableMaster(poolManager_.stableMaster());\r\n        rewardToken = rewardToken_;\r\n        _collatBase = 10**(IERC20Metadata(address(_token)).decimals());\r\n        // The references to the `feeManager` and to the `oracle` contracts are to be set when the contract is deployed\r\n\r\n        // Setting up Access Control for this contract\r\n        // There is no need to store the reference to the `PoolManager` address here\r\n        // Once the `POOLMANAGER_ROLE` has been granted, no new addresses can be granted or revoked\r\n        // from this role: a `PerpetualManager` contract can only have one `PoolManager` associated\r\n        _setupRole(POOLMANAGER_ROLE, address(poolManager));\r\n        // `PoolManager` is admin of all the roles. Most of the time, changes are propagated from it\r\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\r\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\r\n        // Pausing the contract because it is not functional till the collateral has really been deployed by the\r\n        // `StableMaster`\r\n        _pause();\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() initializer {}\r\n\r\n    // ================================= HAs =======================================\r\n\r\n    /// @notice Lets a HA join the protocol and create a perpetual\r\n    /// @param owner Address of the future owner of the perpetual\r\n    /// @param margin Amount of collateral brought by the HA\r\n    /// @param committedAmount Amount of collateral covered by the HA\r\n    /// @param maxOracleRate Maximum oracle value that the HA wants to see stored in the perpetual\r\n    /// @param minNetMargin Minimum net margin that the HA is willing to see stored in the perpetual\r\n    /// @return perpetualID The ID of the perpetual opened by this HA\r\n    /// @dev The future owner of the perpetual cannot be the zero address\r\n    /// @dev It is possible to open a perpetual on behalf of someone else\r\n    /// @dev The `maxOracleRate` parameter serves as a protection against oracle manipulations for HAs opening perpetuals\r\n    /// @dev `minNetMargin` is a protection against too big variations in the fees for HAs\r\n    function openPerpetual(\r\n        address owner,\r\n        uint256 margin,\r\n        uint256 committedAmount,\r\n        uint256 maxOracleRate,\r\n        uint256 minNetMargin\r\n    ) external override whenNotPaused zeroCheck(owner) returns (uint256 perpetualID) {\r\n        // Transaction will revert anyway if `margin` is zero\r\n        require(committedAmount > 0, \"27\");\r\n\r\n        // There could be a reentrancy attack as a call to an external contract is done before state variables\r\n        // updates. Yet in this case, the call involves a transfer from the `msg.sender` to the contract which\r\n        // eliminates the risk\r\n        _token.safeTransferFrom(msg.sender, address(poolManager), margin);\r\n\r\n        // Computing the oracle value\r\n        // Only the highest oracle value (between Chainlink and Uniswap) we get is stored in the perpetual\r\n        (, uint256 rateUp) = _getOraclePrice();\r\n        // Checking if the oracle rate is not too big: a too big oracle rate could mean for a HA that the price\r\n        // has become too high to make it interesting to open a perpetual\r\n        require(rateUp <= maxOracleRate, \"28\");\r\n\r\n        // Computing the total amount of stablecoins that this perpetual is going to hedge for the protocol\r\n        uint256 totalHedgeAmountUpdate = (committedAmount * rateUp) / _collatBase;\r\n        // Computing the net amount brought by the HAs to store in the perpetual\r\n        uint256 netMargin = _getNetMargin(margin, totalHedgeAmountUpdate, committedAmount);\r\n        require(netMargin >= minNetMargin, \"29\");\r\n        // Checking if the perpetual is not too leveraged, even after computing the fees\r\n        require((committedAmount * BASE_PARAMS) <= maxLeverage * netMargin, \"30\");\r\n\r\n        // ERC721 logic\r\n        _perpetualIDcount.increment();\r\n        perpetualID = _perpetualIDcount.current();\r\n\r\n        // In the logic of the staking contract, the `_updateReward` should be called\r\n        // before the perpetual is opened\r\n        _updateReward(perpetualID, 0);\r\n\r\n        // Updating the total amount of stablecoins hedged by HAs and creating the perpetual\r\n        totalHedgeAmount += totalHedgeAmountUpdate;\r\n\r\n        perpetualData[perpetualID] = Perpetual(rateUp, block.timestamp, netMargin, committedAmount);\r\n\r\n        // Following ERC721 logic, the function `_mint(...)` calls `_checkOnERC721Received` and could then be used as\r\n        // a reentrancy vector. Minting should then only be done at the very end after updating all variables.\r\n        _mint(owner, perpetualID);\r\n        emit PerpetualOpened(perpetualID, rateUp, netMargin, committedAmount);\r\n    }\r\n\r\n    /// @notice Lets a HA close a perpetual owned or controlled for the stablecoin/collateral pair associated\r\n    /// to this `PerpetualManager` contract\r\n    /// @param perpetualID ID of the perpetual to close\r\n    /// @param to Address which will receive the proceeds from this perpetual\r\n    /// @param minCashOutAmount Minimum net cash out amount that the HA is willing to get for closing the\r\n    /// perpetual\r\n    /// @dev The HA gets the current amount of her position depending on the entry oracle value\r\n    /// and current oracle value minus some transaction fees computed on the committed amount\r\n    /// @dev `msg.sender` should be the owner of `perpetualID` or be approved for this perpetual\r\n    /// @dev If the `PoolManager` does not have enough collateral, the perpetual owner will be converted to a SLP and\r\n    /// receive sanTokens\r\n    /// @dev The `minCashOutAmount` serves as a protection for HAs closing their perpetuals: it protects them both\r\n    /// from fees that would have become too high and from a too big decrease in oracle value\r\n    function closePerpetual(\r\n        uint256 perpetualID,\r\n        address to,\r\n        uint256 minCashOutAmount\r\n    ) external override whenNotPaused onlyApprovedOrOwner(msg.sender, perpetualID) {\r\n        // Loading perpetual data and getting the oracle price\r\n        Perpetual memory perpetual = perpetualData[perpetualID];\r\n        (uint256 rateDown, ) = _getOraclePrice();\r\n        // The lowest oracle price between Chainlink and Uniswap is used to compute the perpetual's position at\r\n        // the time of closing: it is the one that is most at the advantage of the protocol\r\n        (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\r\n        if (liquidated == 0) {\r\n            // You need to wait `lockTime` before being able to withdraw funds from the protocol as a HA\r\n            require(perpetual.entryTimestamp + lockTime <= block.timestamp, \"31\");\r\n            // Cashing out the perpetual internally\r\n            _closePerpetual(perpetualID, perpetual);\r\n            // Computing exit fees: they depend on how much is already hedgeded by HAs compared with what's to hedge\r\n            (uint256 netCashOutAmount, ) = _getNetCashOutAmount(\r\n                cashOutAmount,\r\n                perpetual.committedAmount,\r\n                // The perpetual has already been cashed out when calling this function, so there is no\r\n                // `committedAmount` to add to the `totalHedgeAmount` to get the `currentHedgeAmount`\r\n                _computeHedgeRatio(totalHedgeAmount)\r\n            );\r\n            require(netCashOutAmount >= minCashOutAmount, \"32\");\r\n            emit PerpetualClosed(perpetualID, netCashOutAmount);\r\n            _secureTransfer(to, netCashOutAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Lets a HA increase the `margin` in a perpetual she controls for this\r\n    /// stablecoin/collateral pair\r\n    /// @param perpetualID ID of the perpetual to which amount should be added to `margin`\r\n    /// @param amount Amount to add to the perpetual's `margin`\r\n    /// @dev This decreases the leverage multiple of this perpetual\r\n    /// @dev If this perpetual is to be liquidated, the HA is not going to be able to add liquidity to it\r\n    /// @dev Since this function can be used to add liquidity to a perpetual, there is no need to restrict\r\n    /// it to the owner of the perpetual\r\n    /// @dev Calling this function on a non-existing perpetual makes it revert\r\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external override whenNotPaused {\r\n        // Loading perpetual data and getting the oracle price\r\n        Perpetual memory perpetual = perpetualData[perpetualID];\r\n        (uint256 rateDown, ) = _getOraclePrice();\r\n        (, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\r\n        if (liquidated == 0) {\r\n            // Overflow check\r\n            _token.safeTransferFrom(msg.sender, address(poolManager), amount);\r\n            perpetualData[perpetualID].margin += amount;\r\n            emit PerpetualUpdated(perpetualID, perpetual.margin + amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Lets a HA decrease the `margin` in a perpetual she controls for this\r\n    /// stablecoin/collateral pair\r\n    /// @param perpetualID ID of the perpetual from which collateral should be removed\r\n    /// @param amount Amount to remove from the perpetual's `margin`\r\n    /// @param to Address which will receive the collateral removed from this perpetual\r\n    /// @dev This increases the leverage multiple of this perpetual\r\n    /// @dev `msg.sender` should be the owner of `perpetualID` or be approved for this perpetual\r\n    function removeFromPerpetual(\r\n        uint256 perpetualID,\r\n        uint256 amount,\r\n        address to\r\n    ) external override whenNotPaused onlyApprovedOrOwner(msg.sender, perpetualID) {\r\n        // Loading perpetual data and getting the oracle price\r\n        Perpetual memory perpetual = perpetualData[perpetualID];\r\n        (uint256 rateDown, ) = _getOraclePrice();\r\n\r\n        (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\r\n        if (liquidated == 0) {\r\n            // Checking if money can be withdrawn from the perpetual\r\n            require(\r\n                // The perpetual should not have been opened too soon\r\n                (perpetual.entryTimestamp + lockTime <= block.timestamp) &&\r\n                    // The amount to withdraw should not be more important than the perpetual's `cashOutAmount` and `margin`\r\n                    (amount < cashOutAmount) &&\r\n                    (amount < perpetual.margin) &&\r\n                    // Withdrawing collateral should not make the leverage of the perpetual too important\r\n                    // Checking both on `cashOutAmount` and `perpetual.margin` (as we can have either\r\n                    // `cashOutAmount >= perpetual.margin` or `cashOutAmount<perpetual.margin`)\r\n                    // No checks are done on `maintenanceMargin`, as conditions on `maxLeverage` are more restrictive\r\n                    perpetual.committedAmount * BASE_PARAMS <= (cashOutAmount - amount) * maxLeverage &&\r\n                    perpetual.committedAmount * BASE_PARAMS <= (perpetual.margin - amount) * maxLeverage,\r\n                \"33\"\r\n            );\r\n            perpetualData[perpetualID].margin -= amount;\r\n            emit PerpetualUpdated(perpetualID, perpetual.margin - amount);\r\n\r\n            _secureTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Allows an outside caller to liquidate perpetuals if their margin ratio is\r\n    /// under the maintenance margin\r\n    /// @param perpetualIDs ID of the targeted perpetuals\r\n    /// @dev Liquidation of a perpetual will succeed if the `cashOutAmount` of the perpetual is under the maintenance margin,\r\n    /// and nothing will happen if the perpetual is still healthy\r\n    /// @dev The outside caller (namely a keeper) gets a portion of the leftover cash out amount of the perpetual\r\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\r\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\r\n    /// as keepers for the protocol\r\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external override whenNotPaused {\r\n        // Getting the oracle price\r\n        (uint256 rateDown, ) = _getOraclePrice();\r\n        uint256 liquidationFees;\r\n        for (uint256 i = 0; i < perpetualIDs.length; i++) {\r\n            uint256 perpetualID = perpetualIDs[i];\r\n            if (_exists(perpetualID)) {\r\n                // Loading perpetual data\r\n                Perpetual memory perpetual = perpetualData[perpetualID];\r\n                (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\r\n                if (liquidated == 1) {\r\n                    // Computing the incentive for the keeper as a function of the `cashOutAmount` of the perpetual\r\n                    // This incentivizes keepers to react fast when the price starts to go below the liquidation\r\n                    // margin\r\n                    liquidationFees += _computeKeeperLiquidationFees(cashOutAmount);\r\n                }\r\n            }\r\n        }\r\n        emit KeeperTransferred(msg.sender, liquidationFees);\r\n        _secureTransfer(msg.sender, liquidationFees);\r\n    }\r\n\r\n    /// @notice Allows an outside caller to close perpetuals if too much of the collateral from\r\n    /// users is hedged by HAs\r\n    /// @param perpetualIDs IDs of the targeted perpetuals\r\n    /// @dev This function allows to make sure that the protocol will not have too much HAs for a long period of time\r\n    /// @dev A HA that owns a targeted perpetual will get the current value of her perpetual\r\n    /// @dev The call to the function above will revert if HAs cannot be cashed out\r\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\r\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\r\n    /// as keepers for the protocol\r\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external override whenNotPaused {\r\n        // Getting the oracle prices\r\n        // `rateUp` is used to compute the cost of manipulation of the covered amounts\r\n        (uint256 rateDown, uint256 rateUp) = _getOraclePrice();\r\n\r\n        // Fetching `stocksUsers` to check if perpetuals cover too much collateral\r\n        uint256 stocksUsers = _stableMaster.getStocksUsers();\r\n        uint256 targetHedgeAmount = (stocksUsers * targetHAHedge) / BASE_PARAMS;\r\n\r\n        // `totalHedgeAmount` should be greater than the limit hedge amount\r\n        require(totalHedgeAmount > (stocksUsers * limitHAHedge) / BASE_PARAMS, \"34\");\r\n        uint256 liquidationFees;\r\n        uint256 cashOutFees;\r\n\r\n        // Array of pairs `(owner, netCashOutAmount)`\r\n        Pairs[] memory outputPairs = new Pairs[](perpetualIDs.length);\r\n\r\n        for (uint256 i = 0; i < perpetualIDs.length; i++) {\r\n            uint256 perpetualID = perpetualIDs[i];\r\n            address owner = _owners[perpetualID];\r\n            if (owner != address(0)) {\r\n                // Loading perpetual data and getting the oracle price\r\n                Perpetual memory perpetual = perpetualData[perpetualID];\r\n                // First checking if the perpetual should not be liquidated\r\n                (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\r\n                if (liquidated == 1) {\r\n                    // This results in the perpetual being liquidated and the keeper being paid the same amount of fees as\r\n                    // what would have been paid if the perpetual had been liquidated using the `liquidatePerpetualFunction`\r\n                    // Computing the incentive for the keeper as a function of the `cashOutAmount` of the perpetual\r\n                    // This incentivizes keepers to react fast\r\n                    liquidationFees += _computeKeeperLiquidationFees(cashOutAmount);\r\n                } else if (perpetual.entryTimestamp + lockTime <= block.timestamp) {\r\n                    // It is impossible to force the closing a perpetual that was just created: in the other case, this\r\n                    // function could be used to do some insider trading and to bypass the `lockTime` limit\r\n                    // If too much collateral is hedged by HAs, then the perpetual can be cashed out\r\n                    _closePerpetual(perpetualID, perpetual);\r\n                    uint64 ratioPostCashOut;\r\n                    // In this situation, `totalHedgeAmount` is the `currentHedgeAmount`\r\n                    if (targetHedgeAmount > totalHedgeAmount) {\r\n                        ratioPostCashOut = uint64((totalHedgeAmount * BASE_PARAMS) / targetHedgeAmount);\r\n                    } else {\r\n                        ratioPostCashOut = uint64(BASE_PARAMS);\r\n                    }\r\n                    // Computing how much the HA will get and the amount of fees paid at closing\r\n                    (uint256 netCashOutAmount, uint256 fees) = _getNetCashOutAmount(\r\n                        cashOutAmount,\r\n                        perpetual.committedAmount,\r\n                        ratioPostCashOut\r\n                    );\r\n                    cashOutFees += fees;\r\n                    // Storing the owners of perpetuals that were forced cash out in a memory array to avoid\r\n                    // reentrancy attacks\r\n                    outputPairs[i] = Pairs(owner, netCashOutAmount);\r\n                }\r\n\r\n                // Checking if at this point enough perpetuals have been cashed out\r\n                if (totalHedgeAmount <= targetHedgeAmount) break;\r\n            }\r\n        }\r\n\r\n        uint64 ratio = (targetHedgeAmount == 0)\r\n            ? 0\r\n            : uint64((totalHedgeAmount * BASE_PARAMS) / (2 * targetHedgeAmount));\r\n        // Computing the rewards given to the keeper calling this function\r\n        // and transferring the rewards to the keeper\r\n        // Using a cache value of `cashOutFees` to save some gas\r\n        // The value below is the amount of fees that should go to the keeper forcing the closing of perpetuals\r\n        // In the linear by part function, if `xKeeperFeesClosing` is greater than 0.5 (meaning we are not at target yet)\r\n        // then keepers should get almost no fees\r\n        cashOutFees = (cashOutFees * _piecewiseLinear(ratio, xKeeperFeesClosing, yKeeperFeesClosing)) / BASE_PARAMS;\r\n        // The amount of fees that can go to keepers is capped by a parameter set by governance\r\n        cashOutFees = cashOutFees < keeperFeesClosingCap ? cashOutFees : keeperFeesClosingCap;\r\n        // A malicious attacker could take advantage of this function to take a flash loan, burn agTokens\r\n        // to diminish the stocks users and then force close some perpetuals. We also need to check that assuming\r\n        // really small burn transaction fees (of 0.05%), an attacker could make a profit with such flash loan\r\n        // if current hedge is below the target hedge by making such flash loan.\r\n        // The formula for the cost of such flash loan is:\r\n        // `fees * (limitHAHedge - targetHAHedge) * stocksUsers / oracle`\r\n        // In order to avoid doing multiplications after divisions, and to get everything in the correct base, we do:\r\n        uint256 estimatedCost = (5 * (limitHAHedge - targetHAHedge) * stocksUsers * _collatBase) /\r\n            (rateUp * 10000 * BASE_PARAMS);\r\n        cashOutFees = cashOutFees < estimatedCost ? cashOutFees : estimatedCost;\r\n\r\n        emit PerpetualsForceClosed(perpetualIDs, outputPairs, msg.sender, cashOutFees + liquidationFees);\r\n\r\n        // Processing transfers after all calculations have been performed\r\n        for (uint256 j = 0; j < perpetualIDs.length; j++) {\r\n            if (outputPairs[j].netCashOutAmount > 0) {\r\n                _secureTransfer(outputPairs[j].owner, outputPairs[j].netCashOutAmount);\r\n            }\r\n        }\r\n        _secureTransfer(msg.sender, cashOutFees + liquidationFees);\r\n    }\r\n\r\n    // =========================== External View Function ==========================\r\n\r\n    /// @notice Returns the `cashOutAmount` of the perpetual owned by someone at a given oracle value\r\n    /// @param perpetualID ID of the perpetual\r\n    /// @param rate Oracle value\r\n    /// @return The `cashOutAmount` of the perpetual\r\n    /// @return Whether the position of the perpetual is now too small compared with its initial position and should hence\r\n    /// be liquidated\r\n    /// @dev This function is used by the Collateral Settlement contract\r\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view override returns (uint256, uint256) {\r\n        Perpetual memory perpetual = perpetualData[perpetualID];\r\n        return _getCashOutAmount(perpetual, rate);\r\n    }\r\n\r\n    // =========================== Reward Distribution =============================\r\n\r\n    /// @notice Allows to check the amount of reward tokens earned by a perpetual\r\n    /// @param perpetualID ID of the perpetual to check\r\n    function earned(uint256 perpetualID) external view returns (uint256) {\r\n        return _earned(perpetualID, perpetualData[perpetualID].committedAmount * perpetualData[perpetualID].entryRate);\r\n    }\r\n\r\n    /// @notice Allows a perpetual owner to withdraw rewards\r\n    /// @param perpetualID ID of the perpetual which accumulated tokens\r\n    /// @dev Only an approved caller can claim the rewards for the perpetual with perpetualID\r\n    function getReward(uint256 perpetualID) external whenNotPaused onlyApprovedOrOwner(msg.sender, perpetualID) {\r\n        _getReward(perpetualID, perpetualData[perpetualID].committedAmount * perpetualData[perpetualID].entryRate);\r\n    }\r\n\r\n    // =============================== ERC721 logic ================================\r\n\r\n    /// @notice Gets the name of the NFT collection implemented by this contract\r\n    function name() external pure override returns (string memory) {\r\n        return \"AnglePerp\";\r\n    }\r\n\r\n    /// @notice Gets the symbol of the NFT collection implemented by this contract\r\n    function symbol() external pure override returns (string memory) {\r\n        return \"AnglePerp\";\r\n    }\r\n\r\n    /// @notice Gets the URI containing metadata\r\n    /// @param perpetualID ID of the perpetual\r\n    function tokenURI(uint256 perpetualID) external view override returns (string memory) {\r\n        require(_exists(perpetualID), \"2\");\r\n        // There is no perpetual with `perpetualID` equal to 0, so the following variable is\r\n        // always greater than zero\r\n        uint256 temp = perpetualID;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (perpetualID != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(perpetualID % 10)));\r\n            perpetualID /= 10;\r\n        }\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, string(buffer))) : \"\";\r\n    }\r\n\r\n    /// @notice Gets the balance of an owner\r\n    /// @param owner Address of the owner\r\n    /// @dev Balance here represents the number of perpetuals owned by a HA\r\n    function balanceOf(address owner) external view override returns (uint256) {\r\n        require(owner != address(0), \"0\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /// @notice Gets the owner of the perpetual with ID perpetualID\r\n    /// @param perpetualID ID of the perpetual\r\n    function ownerOf(uint256 perpetualID) external view override returns (address) {\r\n        return _ownerOf(perpetualID);\r\n    }\r\n\r\n    /// @notice Approves to an address specified by `to` a perpetual specified by `perpetualID`\r\n    /// @param to Address to approve the perpetual to\r\n    /// @param perpetualID ID of the perpetual\r\n    /// @dev The approved address will have the right to transfer the perpetual, to cash it out\r\n    /// on behalf of the owner, to add or remove collateral in it and to choose the destination\r\n    /// address that will be able to receive the proceeds of the perpetual\r\n    function approve(address to, uint256 perpetualID) external override {\r\n        address owner = _ownerOf(perpetualID);\r\n        require(to != owner, \"35\");\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender), \"21\");\r\n\r\n        _approve(to, perpetualID);\r\n    }\r\n\r\n    /// @notice Gets the approved address by a perpetual owner\r\n    /// @param perpetualID ID of the concerned perpetual\r\n    function getApproved(uint256 perpetualID) external view override returns (address) {\r\n        require(_exists(perpetualID), \"2\");\r\n        return _getApproved(perpetualID);\r\n    }\r\n\r\n    /// @notice Sets approval on all perpetuals owned by the owner to an operator\r\n    /// @param operator Address to approve (or block) on all perpetuals\r\n    /// @param approved Whether the sender wants to approve or block the operator\r\n    function setApprovalForAll(address operator, bool approved) external override {\r\n        require(operator != msg.sender, \"36\");\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /// @notice Gets if the operator address is approved on all perpetuals by the owner\r\n    /// @param owner Owner of perpetuals\r\n    /// @param operator Address to check if approved\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /// @notice Gets if the sender address is approved for the perpetualId\r\n    /// @param perpetualID ID of the perpetual\r\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view override returns (bool) {\r\n        return _isApprovedOrOwner(spender, perpetualID);\r\n    }\r\n\r\n    /// @notice Transfers the `perpetualID` from an address to another\r\n    /// @param from Source address\r\n    /// @param to Destination a address\r\n    /// @param perpetualID ID of the perpetual to transfer\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 perpetualID\r\n    ) external override onlyApprovedOrOwner(msg.sender, perpetualID) {\r\n        _transfer(from, to, perpetualID);\r\n    }\r\n\r\n    /// @notice Safely transfers the `perpetualID` from an address to another without data in it\r\n    /// @param from Source address\r\n    /// @param to Destination a address\r\n    /// @param perpetualID ID of the perpetual to transfer\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 perpetualID\r\n    ) external override {\r\n        safeTransferFrom(from, to, perpetualID, \"\");\r\n    }\r\n\r\n    /// @notice Safely transfers the `perpetualID` from an address to another with data in the transfer\r\n    /// @param from Source address\r\n    /// @param to Destination a address\r\n    /// @param perpetualID ID of the perpetual to transfer\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 perpetualID,\r\n        bytes memory _data\r\n    ) public override onlyApprovedOrOwner(msg.sender, perpetualID) {\r\n        _safeTransfer(from, to, perpetualID, _data);\r\n    }\r\n\r\n    // =============================== ERC165 logic ================================\r\n\r\n    /// @notice Queries if a contract implements an interface\r\n    /// @param interfaceId The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function uses less than 30,000 gas.\r\n    /// Required by the ERC721 standard, so used to check that the IERC721 is implemented.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceId) external pure override(IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IPerpetualManagerFront).interfaceId ||\r\n            interfaceId == type(IPerpetualManagerFunctions).interfaceId ||\r\n            interfaceId == type(IStakingRewards).interfaceId ||\r\n            interfaceId == type(IStakingRewardsFunctions).interfaceId ||\r\n            interfaceId == type(IAccessControl).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_maxLeverage\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_maintenanceMargin\",\"type\":\"uint64\"}],\"name\":\"BoundsPerpetualUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_xHAFees\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_yHAFees\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"deposit\",\"type\":\"uint8\"}],\"name\":\"HAFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_keeperFeesLiquidationCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_keeperFeesClosingCap\",\"type\":\"uint256\"}],\"name\":\"KeeperFeesCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"xKeeperFeesClosing\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"yKeeperFeesClosing\",\"type\":\"uint64[]\"}],\"name\":\"KeeperFeesClosingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_keeperFeesLiquidationRatio\",\"type\":\"uint64\"}],\"name\":\"KeeperFeesLiquidationRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFees\",\"type\":\"uint256\"}],\"name\":\"KeeperTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"LockTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perpetualID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_closeAmount\",\"type\":\"uint256\"}],\"name\":\"PerpetualClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perpetualID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_entryRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_committedAmount\",\"type\":\"uint256\"}],\"name\":\"PerpetualOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perpetualID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_margin\",\"type\":\"uint256\"}],\"name\":\"PerpetualUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netCashOutAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Pairs[]\",\"name\":\"ownerAndCashOut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"PerpetualsForceClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributionDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_targetHAHedge\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_limitHAHedge\",\"type\":\"uint64\"}],\"name\":\"TargetAndLimitHAHedgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCashOutAmount\",\"type\":\"uint256\"}],\"name\":\"closePerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"contract IFeeManager\",\"name\":\"feeManager_\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"deployCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"}],\"name\":\"forceClosePerpetuals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"getCashOutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haBonusMalusDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haBonusMalusWithdraw\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeesClosingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeesLiquidationCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeesLiquidationRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitHAHedge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"}],\"name\":\"liquidatePerpetuals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceMargin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOracleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minNetMargin\",\"type\":\"uint256\"}],\"name\":\"openPerpetual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"perpetualData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"perpetualRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeFromPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maintenanceMargin\",\"type\":\"uint64\"}],\"name\":\"setBoundsPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"feeDeposit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feeWithdraw\",\"type\":\"uint64\"}],\"name\":\"setFeeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_xHAFees\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_yHAFees\",\"type\":\"uint64[]\"},{\"internalType\":\"uint8\",\"name\":\"deposit\",\"type\":\"uint8\"}],\"name\":\"setHAFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keeperFeesLiquidationCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keeperFeesClosingCap\",\"type\":\"uint256\"}],\"name\":\"setKeeperFeesCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_xKeeperFeesClosing\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_yKeeperFeesClosing\",\"type\":\"uint64[]\"}],\"name\":\"setKeeperFeesClosing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_keeperFeesLiquidationRatio\",\"type\":\"uint64\"}],\"name\":\"setKeeperFeesLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setNewRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_limitHAHedge\",\"type\":\"uint64\"}],\"name\":\"setTargetAndLimitHAHedge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetHAHedge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHedgeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xHAFeesDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xHAFeesWithdraw\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xKeeperFeesClosing\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yHAFeesDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yHAFeesWithdraw\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yKeeperFeesClosing\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PerpetualManagerFront", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "283", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://45840058006f230868797238b1a0691e6a0b163718211cd780d1fcfd01a5532c"}]}