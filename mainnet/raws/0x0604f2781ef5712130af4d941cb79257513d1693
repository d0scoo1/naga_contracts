{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-03-26\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT \r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contract/library/ErrorCode.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\nlibrary ErrorCode {\r\n\r\n    string constant FORBIDDEN = 'YouSwap:FORBIDDEN';\r\n    string constant IDENTICAL_ADDRESSES = 'YouSwap:IDENTICAL_ADDRESSES';\r\n    string constant ZERO_ADDRESS = 'YouSwap:ZERO_ADDRESS';\r\n    string constant INVALID_ADDRESSES = 'YouSwap:INVALID_ADDRESSES';\r\n    string constant BALANCE_INSUFFICIENT = 'YouSwap:BALANCE_INSUFFICIENT';\r\n    string constant REWARDTOTAL_LESS_THAN_REWARDPROVIDE = 'YouSwap:REWARDTOTAL_LESS_THAN_REWARDPROVIDE';\r\n    string constant PARAMETER_TOO_LONG = 'YouSwap:PARAMETER_TOO_LONG';\r\n    string constant REGISTERED = 'YouSwap:REGISTERED';\r\n    string constant MINING_NOT_STARTED = 'YouSwap:MINING_NOT_STARTED';\r\n    string constant END_OF_MINING = 'YouSwap:END_OF_MINING';\r\n    string constant POOL_NOT_EXIST_OR_END_OF_MINING = 'YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING';\r\n    \r\n}\r\n// File: localhost/contract/interface/IYouswapInviteV1.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\ninterface IYouswapInviteV1 {\r\n\r\n    struct UserInfo {\r\n        address upper;//\u4e0a\u7ea7\r\n        address[] lowers;//\u4e0b\u7ea7\r\n        uint256 startBlock;//\u9080\u8bf7\u5757\u9ad8\r\n    }\r\n\r\n    event InviteV1(address indexed owner, address indexed upper, uint256 indexed height);//\u88ab\u9080\u8bf7\u4eba\u7684\u5730\u5740\uff0c\u9080\u8bf7\u4eba\u7684\u5730\u5740\uff0c\u9080\u8bf7\u5757\u9ad8\r\n\r\n    function inviteCount() external view returns (uint256);//\u9080\u8bf7\u4eba\u6570\r\n\r\n    function inviteUpper1(address) external view returns (address);//\u4e0a\u7ea7\u9080\u8bf7\r\n\r\n    function inviteUpper2(address) external view returns (address, address);//\u4e0a\u7ea7\u9080\u8bf7\r\n\r\n    function inviteLower1(address) external view returns (address[] memory);//\u4e0b\u7ea7\u9080\u8bf7\r\n\r\n    function inviteLower2(address) external view returns (address[] memory, address[] memory);//\u4e0b\u7ea7\u9080\u8bf7\r\n\r\n    function inviteLower2Count(address) external view returns (uint256, uint256);//\u4e0b\u7ea7\u9080\u8bf7\r\n    \r\n    function register() external returns (bool);//\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\r\n\r\n    function acceptInvitation(address) external returns (bool);//\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\r\n    \r\n    function inviteBatch(address[] memory) external returns (uint, uint);//\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\uff1a\u8f93\u5165\u6570\u91cf\uff0c\u6210\u529f\u6570\u91cf\r\n\r\n}\r\n// File: localhost/contract/implement/YouswapInviteV1.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\ncontract YouswapInviteV1 is IYouswapInviteV1 {\r\n\r\n    address public constant ZERO = address(0);\r\n    uint256 public startBlock;\r\n    address[] public inviteUserInfoV1;\r\n    mapping(address => UserInfo) public inviteUserInfoV2;\r\n\r\n    constructor () {\r\n        startBlock = block.number;\r\n    }\r\n    \r\n    function inviteCount() override external view returns (uint256) {\r\n        return inviteUserInfoV1.length;\r\n    }\r\n\r\n    function inviteUpper1(address _owner) override external view returns (address) {\r\n        return inviteUserInfoV2[_owner].upper;\r\n    }\r\n\r\n    function inviteUpper2(address _owner) override external view returns (address, address) {\r\n        address upper1 = inviteUserInfoV2[_owner].upper;\r\n        address upper2 = address(0);\r\n        if (address(0) != upper1) {\r\n            upper2 = inviteUserInfoV2[upper1].upper;\r\n        }\r\n\r\n        return (upper1, upper2);\r\n    }\r\n\r\n    function inviteLower1(address _owner) override external view returns (address[] memory) {\r\n        return inviteUserInfoV2[_owner].lowers;\r\n    }\r\n\r\n    function inviteLower2(address _owner) override external view returns (address[] memory, address[] memory) {\r\n        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\r\n        uint256 count = 0;\r\n        uint256 lowers1Len = lowers1.length;\r\n        for (uint256 i = 0; i < lowers1Len; i++) {\r\n            count += inviteUserInfoV2[lowers1[i]].lowers.length;\r\n        }\r\n        address[] memory lowers;\r\n        address[] memory lowers2 = new address[](count);\r\n        count = 0;\r\n        for (uint256 i = 0; i < lowers1Len; i++) {\r\n            lowers = inviteUserInfoV2[lowers1[i]].lowers;\r\n            for (uint256 j = 0; j < lowers.length; j++) {\r\n                lowers2[count] = lowers[j];\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        return (lowers1, lowers2);\r\n    }\r\n\r\n    function inviteLower2Count(address _owner) override external view returns (uint256, uint256) {\r\n        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\r\n        uint256 lowers2Len = 0;\r\n        uint256 len = lowers1.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            lowers2Len += inviteUserInfoV2[lowers1[i]].lowers.length;\r\n        }\r\n        \r\n        return (lowers1.length, lowers2Len);\r\n    }\r\n\r\n    function register() override external returns (bool) {\r\n        UserInfo storage user = inviteUserInfoV2[tx.origin];\r\n        require(0 == user.startBlock, ErrorCode.REGISTERED);\r\n        user.upper = ZERO;\r\n        user.startBlock = block.number;\r\n        inviteUserInfoV1.push(tx.origin);\r\n        \r\n        emit InviteV1(tx.origin, user.upper, user.startBlock);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function acceptInvitation(address _inviter) override external returns (bool) {\r\n        require(msg.sender != _inviter, ErrorCode.FORBIDDEN);\r\n        UserInfo storage user = inviteUserInfoV2[msg.sender];\r\n        require(0 == user.startBlock, ErrorCode.REGISTERED);\r\n        UserInfo storage upper = inviteUserInfoV2[_inviter];\r\n        if (0 == upper.startBlock) {\r\n            upper.upper = ZERO;\r\n            upper.startBlock = block.number;\r\n            inviteUserInfoV1.push(_inviter);\r\n            \r\n            emit InviteV1(_inviter, upper.upper, upper.startBlock);\r\n        }\r\n        user.upper = _inviter;\r\n        upper.lowers.push(msg.sender);\r\n        user.startBlock = block.number;\r\n        inviteUserInfoV1.push(msg.sender);\r\n        \r\n        emit InviteV1(msg.sender, user.upper, user.startBlock);\r\n\r\n        return true;\r\n    }\r\n\r\n    function inviteBatch(address[] memory _invitees) override external returns (uint, uint) {\r\n        uint len = _invitees.length;\r\n        require(len <= 100, ErrorCode.PARAMETER_TOO_LONG);\r\n        UserInfo storage user = inviteUserInfoV2[msg.sender];\r\n        if (0 == user.startBlock) {\r\n            user.upper = ZERO;\r\n            user.startBlock = block.number;\r\n            inviteUserInfoV1.push(msg.sender);\r\n                        \r\n            emit InviteV1(msg.sender, user.upper, user.startBlock);\r\n        }\r\n        uint count = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n            if ((address(0) != _invitees[i]) && (msg.sender != _invitees[i])) {\r\n                UserInfo storage lower = inviteUserInfoV2[_invitees[i]];\r\n                if (0 == lower.startBlock) {\r\n                    lower.upper = msg.sender;\r\n                    lower.startBlock = block.number;\r\n                    user.lowers.push(_invitees[i]);\r\n                    inviteUserInfoV1.push(_invitees[i]);\r\n                    count++;\r\n\r\n                    emit InviteV1(_invitees[i], msg.sender, lower.startBlock);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (len, count);\r\n    }\r\n\r\n}\r\n// File: localhost/contract/interface/ITokenYou.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\ninterface ITokenYou {\r\n    \r\n    function mint(address recipient, uint256 amount) external;\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n}\r\n\r\n// File: localhost/contract/interface/IYouswapFactoryV1.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n/**\r\n\u6316\u77ff\r\n */\r\ninterface IYouswapFactoryV1 {\r\n    \r\n    /**\r\n    \u7528\u6237\u6316\u77ff\u4fe1\u606f\r\n     */\r\n    struct RewardInfo {\r\n        uint256 receiveReward;//\u603b\u9886\u53d6\u5956\u52b1\r\n        uint256 inviteReward;//\u603b\u9080\u8bf7\u5956\u52b1\r\n        uint256 pledgeReward;//\u603b\u8d28\u62bc\u5956\u52b1\r\n    }\r\n\r\n    /**\r\n    \u8d28\u62bc\u7528\u6237\u4fe1\u606f\r\n     */\r\n    struct UserInfo {\r\n        uint256 startBlock;//\u8d28\u62bc\u5f00\u59cb\u5757\u9ad8\r\n        uint256 amount;//\u8d28\u62bc\u6570\u91cf\r\n        uint256 invitePower;//\u9080\u8bf7\u7b97\u529b\r\n        uint256 pledgePower;//\u8d28\u62bc\u7b97\u529b\r\n        uint256 pendingReward;//\u5f85\u9886\u53d6\u5956\u52b1\r\n        uint256 inviteRewardDebt;//\u9080\u8bf7\u8d1f\u503a\r\n        uint256 pledgeRewardDebt;//\u8d28\u62bc\u8d1f\u503a\r\n    }\r\n\r\n    /**\r\n    \u77ff\u6c60\u4fe1\u606f\uff08\u53ef\u89c6\u5316\uff09\r\n     */\r\n    struct PoolViewInfo {\r\n        address lp;//LP\u5730\u5740\r\n        string name;//\u540d\u79f0\r\n        uint256 multiple;//\u5956\u52b1\u500d\u6570\r\n        uint256 priority;//\u6392\u5e8f\r\n    }\r\n\r\n    /**\r\n    \u77ff\u6c60\u4fe1\u606f\r\n     */\r\n    struct PoolInfo {\r\n        uint256 startBlock;//\u6316\u77ff\u5f00\u59cb\u5757\u9ad8\r\n        uint256 rewardTotal;//\u77ff\u6c60\u603b\u5956\u52b1\r\n        uint256 rewardProvide;//\u77ff\u6c60\u5df2\u53d1\u653e\u5956\u52b1\r\n        address lp;//lp\u5408\u7ea6\u5730\u5740\r\n        uint256 amount;//\u8d28\u62bc\u6570\u91cf\r\n        uint256 lastRewardBlock;//\u6700\u540e\u53d1\u653e\u5956\u52b1\u5757\u9ad8\r\n        uint256 rewardPerBlock;//\u5355\u4e2a\u533a\u5757\u5956\u52b1\r\n        uint256 totalPower;//\u603b\u7b97\u529b\r\n        uint256 endBlock;//\u6316\u77ff\u7ed3\u675f\u5757\u9ad8\r\n        uint256 rewardPerShare;//\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    /**\r\n    \u81ea\u9080\u8bf7\r\n    self\uff1aSender\u5730\u5740\r\n     */\r\n    event InviteRegister(address indexed self);\r\n\r\n    /**\r\n    \u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\r\n\r\n    action\uff1atrue(\u65b0\u5efa\u77ff\u6c60)\uff0cfalse(\u66f4\u65b0\u77ff\u6c60)\r\n    pool\uff1a\u77ff\u6c60\u5e8f\u53f7\r\n    lp\uff1alp\u5408\u7ea6\u5730\u5740\r\n    name\uff1a\u77ff\u6c60\u540d\u79f0\r\n    startBlock\uff1a\u77ff\u6c60\u5f00\u59cb\u6316\u77ff\u5757\u9ad8\r\n    rewardTotal\uff1a\u77ff\u6c60\u603b\u5956\u52b1\r\n    rewardPerBlock\uff1a\u533a\u5757\u5956\u52b1\r\n    multiple\uff1a\u77ff\u6c60\u5956\u52b1\u500d\u6570\r\n    priority\uff1a\u77ff\u6c60\u6392\u5e8f\r\n     */\r\n    event UpdatePool(bool action, uint256 pool, address indexed lp, string name, uint256 startBlock, uint256 rewardTotal, uint256 rewardPerBlock, uint256 multiple, uint256 priority);\r\n\r\n    /**\r\n    \u77ff\u6c60\u6316\u77ff\u7ed3\u675f\r\n    \r\n    pool\uff1a\u77ff\u6c60\u5e8f\u53f7\r\n    lp\uff1alp\u5408\u7ea6\u5730\u5740\r\n     */\r\n    event EndPool(uint256 pool, address indexed lp);\r\n    \r\n    /**\r\n    \u8d28\u62bc\r\n\r\n    pool\uff1a\u77ff\u6c60\u5e8f\u53f7\r\n    lp\uff1alp\u5408\u7ea6\u5730\u5740\r\n    from\uff1a\u8d28\u62bc\u8f6c\u51fa\u5730\u5740\r\n    amount\uff1a\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    event Stake(uint256 pool, address indexed lp, address indexed from, uint256 amount);\r\n\r\n    /**\r\n    pool\uff1a\u77ff\u6c60\u5e8f\u53f7\r\n    lp\uff1alp\u5408\u7ea6\u5730\u5740\r\n    totalPower\uff1a\u77ff\u6c60\u603b\u7b97\u529b\r\n    owner\uff1a\u7528\u6237\u5730\u5740\r\n    ownerInvitePower\uff1a\u7528\u6237\u9080\u8bf7\u7b97\u529b\r\n    ownerPledgePower\uff1a\u7528\u6237\u8d28\u62bc\u7b97\u529b\r\n    upper1\uff1a\u4e0a1\u7ea7\u5730\u5740\r\n    upper1InvitePower\uff1a\u4e0a1\u7ea7\u9080\u8bf7\u7b97\u529b\r\n    upper2\uff1a\u4e0a2\u7ea7\u5730\u5740\r\n    upper2InvitePower\uff1a\u4e0a2\u7ea7\u9080\u8bf7\u7b97\u529b\r\n     */\r\n    event UpdatePower(uint256 pool, address lp, uint256 totalPower, address indexed owner, uint256 ownerInvitePower, uint256 ownerPledgePower, address indexed upper1, uint256 upper1InvitePower, address indexed upper2, uint256 upper2InvitePower);\r\n\r\n    //\u7b97\u529b\r\n\r\n    /**\r\n    \u89e3\u8d28\u62bc\r\n    \r\n    pool\uff1a\u77ff\u6c60\u5e8f\u53f7\r\n    lp\uff1alp\u5408\u7ea6\u5730\u5740\r\n    to\uff1a\u89e3\u8d28\u62bc\u8f6c\u5165\u5730\u5740\r\n    amount\uff1a\u89e3\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    event UnStake(uint256 pool, address indexed lp, address indexed to, uint256 amount);\r\n    \r\n    /**\r\n    \u63d0\u53d6\u5956\u52b1\r\n\r\n    pool\uff1a\u77ff\u6c60\u5e8f\u53f7\r\n    lp\uff1alp\u5408\u7ea6\u5730\u5740\r\n    to\uff1a\u5956\u52b1\u8f6c\u5165\u5730\u5740\r\n    amount\uff1a\u5956\u52b1\u6570\u91cf\r\n     */\r\n    event WithdrawReward(uint256 pool, address indexed lp, address indexed to, uint256 amount);\r\n    \r\n    /**\r\n    \u6316\u77ff\r\n\r\n    pool\uff1a\u77ff\u6c60\u5e8f\u53f7\r\n    lp\uff1alp\u5408\u7ea6\u5730\u5740\r\n    amount\uff1a\u5956\u52b1\u6570\u91cf\r\n     */\r\n    event Mint(uint256 pool, address indexed lp, uint256 amount);\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n    \u4fee\u6539OWNER\r\n     */\r\n    function transferOwnership(address) external;\r\n\r\n    /**\r\n    \u8bbe\u7f6eYOU\r\n     */\r\n    function setYou(ITokenYou) external;\r\n\r\n    /**\r\n    \u8bbe\u7f6e\u9080\u8bf7\u5173\u7cfb\r\n     */\r\n    function setInvite(YouswapInviteV1) external;\r\n    \r\n    /**\r\n    \u8d28\u62bc\r\n    */\r\n    function deposit(uint256, uint256) external;\r\n    \r\n    /**\r\n    \u89e3\u8d28\u62bc\u3001\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function withdraw(uint256, uint256) external;\r\n\r\n    /**\r\n    \u77ff\u6c60\u8d28\u62bc\u5730\u5740\r\n     */\r\n    function poolPledgeAddresss(uint256) external view returns (address[] memory);\r\n\r\n    /**\r\n    \u7b97\u529b\u5360\u6bd4\r\n     */\r\n    function powerScale(uint256, address) external view returns (uint256);\r\n\r\n    /**\r\n    \u5f85\u9886\u53d6\u7684\u5956\u52b1\r\n     */\r\n    function pendingReward(uint256, address) external view returns (uint256);\r\n\r\n    /**\r\n    \u4e0b\u7ea7\u6536\u76ca\u8d21\u732e\r\n     */\r\n    function rewardContribute(address, address) external view returns (uint256);\r\n\r\n    /**\r\n    \u4e2a\u4eba\u6536\u76ca\u52a0\u6210\r\n     */\r\n    function selfReward(address) external view returns (uint256);\r\n\r\n    /**\r\n    \u901a\u8fc7lp\u67e5\u8be2\u77ff\u6c60\u7f16\u53f7\r\n     */\r\n    function poolNumbers(address) external view returns (uint256[] memory);\r\n\r\n    /**\r\n    \u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n     */\r\n    function setOperateOwner(address, bool) external;\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////    \r\n    \r\n    /**\r\n    \u65b0\u5efa\u77ff\u6c60\r\n     */\r\n    function addPool(string memory, address, uint256, uint256) external returns (bool);\r\n        \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u533a\u5757\u5956\u52b1\r\n     */\r\n    function setRewardPerBlock(uint256, uint256) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u603b\u5956\u52b1\r\n     */\r\n    function setRewardTotal(uint256, uint256) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u540d\u79f0\r\n     */\r\n    function setName(uint256, string memory) external;\r\n    \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u500d\u6570\r\n     */\r\n    function setMultiple(uint256, uint256) external;\r\n    \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6392\u5e8f\r\n     */\r\n    function setPriority(uint256, uint256) external;\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n}\r\n// File: localhost/contract/implement/YouswapFactoryV1.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract YouswapFactoryV1 is IYouswapFactoryV1 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    uint256 public deployBlock;//\u5408\u7ea6\u90e8\u7f72\u5757\u9ad8\r\n    address public owner;//\u6240\u6709\u6743\u9650\r\n    mapping(address => bool) public operateOwner;//\u8fd0\u8425\u6743\u9650\r\n    ITokenYou public you;//you contract\r\n    YouswapInviteV1 public invite;//invite contract\r\n\r\n    uint256 public poolCount = 0;//\u77ff\u6c60\u6570\u91cf\r\n    mapping(address => RewardInfo) public rewardInfos;//\u7528\u6237\u6316\u77ff\u4fe1\u606f\r\n    mapping(uint256 => PoolInfo) public poolInfos;//\u77ff\u6c60\u4fe1\u606f\r\n    mapping(uint256 => PoolViewInfo) public poolViewInfos;//\u77ff\u6c60\u4fe1\u606f\r\n    mapping(uint256 => address[]) public pledgeAddresss;//\u77ff\u6c60\u8d28\u62bc\u5730\u5740\r\n    mapping(uint256 => mapping(address => UserInfo)) public pledgeUserInfo;//\u77ff\u6c60\u8d28\u62bc\u7528\u6237\u4fe1\u606f\r\n\r\n    uint256 public constant inviteSelfReward = 5;//\u8d28\u62bc\u81ea\u5956\u52b1\uff0c5%\r\n    uint256 public constant invite1Reward = 15;//1\u7ea7\u9080\u8bf7\u5956\u52b1\uff0c15%\r\n    uint256 public constant invite2Reward = 10;//2\u7ea7\u9080\u8bf7\u5956\u52b1\uff0c10%\r\n    uint256 public constant rewardPerBlock = 267094;//\u533a\u5757\u5956\u52b1\r\n    uint256 public rewardTotal = 0;//\u603b\u6316\u77ff\u5956\u52b1\r\n\r\n    constructor (ITokenYou _you, YouswapInviteV1 _invite) {\r\n        deployBlock = block.number;\r\n        owner = msg.sender;\r\n        invite = _invite;\r\n        _setOperateOwner(owner, true);\r\n        _setYou(_you);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function transferOwnership(address _owner) override external {\r\n        require(owner == msg.sender, ErrorCode.FORBIDDEN);\r\n        require((address(0) != _owner) && (owner != _owner), ErrorCode.INVALID_ADDRESSES);\r\n        _setOperateOwner(owner, false);\r\n        _setOperateOwner(_owner, true);\r\n        owner = _owner;\r\n    }\r\n\r\n    function setYou(ITokenYou _you) override external {\r\n        _setYou(_you);\r\n    }\r\n    \r\n    function _setYou(ITokenYou _you) internal {\r\n        require(owner == msg.sender, ErrorCode.FORBIDDEN);\r\n        you = _you;\r\n    }\r\n\r\n    function setInvite(YouswapInviteV1 _invite) override external {\r\n        require(owner == msg.sender, ErrorCode.FORBIDDEN);\r\n        invite = _invite;\r\n    }\r\n    \r\n    function deposit(uint256 _pool, uint256 _amount) override external {\r\n        require(0 < _amount, ErrorCode.FORBIDDEN);\r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        require((address(0) != poolInfo.lp) && (poolInfo.startBlock <= block.number), ErrorCode.MINING_NOT_STARTED);\r\n        //require(0 == poolInfo.endBlock, ErrorCode.END_OF_MINING);\r\n        (, uint256 startBlock) = invite.inviteUserInfoV2(msg.sender);\r\n        if (0 == startBlock) {\r\n            invite.register();\r\n            \r\n            emit InviteRegister(msg.sender);\r\n        }\r\n\r\n        IERC20(poolInfo.lp).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);\r\n\r\n        computeReward(_pool);\r\n\r\n        provideReward(_pool, poolInfo.rewardPerShare, poolInfo.lp, msg.sender, upper1, upper2);\r\n\r\n        addPower(_pool, msg.sender, _amount, upper1, upper2);\r\n\r\n        setRewardDebt(_pool, poolInfo.rewardPerShare, msg.sender, upper1, upper2);\r\n\r\n        emit Stake(_pool, poolInfo.lp, msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _pool, uint256 _amount) override external {\r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        require((address(0) != poolInfo.lp) && (poolInfo.startBlock <= block.number), ErrorCode.MINING_NOT_STARTED);\r\n        if (0 < _amount) {\r\n            UserInfo storage userInfo = pledgeUserInfo[_pool][msg.sender];\r\n            require(_amount <= userInfo.amount, ErrorCode.BALANCE_INSUFFICIENT);\r\n            IERC20(poolInfo.lp).safeTransfer(msg.sender, _amount);\r\n\r\n            emit UnStake(_pool, poolInfo.lp, msg.sender, _amount);\r\n        }\r\n\r\n        (address _upper1, address _upper2) = invite.inviteUpper2(msg.sender);\r\n\r\n        computeReward(_pool);\r\n\r\n        provideReward(_pool, poolInfo.rewardPerShare, poolInfo.lp, msg.sender, _upper1, _upper2);\r\n\r\n        if (0 < _amount) {\r\n            subPower(_pool, msg.sender, _amount, _upper1, _upper2);\r\n        }\r\n\r\n        setRewardDebt(_pool, poolInfo.rewardPerShare, msg.sender, _upper1, _upper2);\r\n    }\r\n\r\n    function poolPledgeAddresss(uint256 _pool) override external view returns (address[] memory) {\r\n        return pledgeAddresss[_pool];\r\n    }\r\n\r\n    function computeReward(uint256 _pool) internal {\r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        if ((0 < poolInfo.totalPower) && (poolInfo.rewardProvide < poolInfo.rewardTotal)) {\r\n            uint256 reward = (block.number - poolInfo.lastRewardBlock).mul(poolInfo.rewardPerBlock);\r\n            if (poolInfo.rewardProvide.add(reward) > poolInfo.rewardTotal) {\r\n                reward = poolInfo.rewardTotal.sub(poolInfo.rewardProvide);\r\n                poolInfo.endBlock = block.number;\r\n            }\r\n\r\n            rewardTotal = rewardTotal.add(reward);\r\n            poolInfo.rewardProvide = poolInfo.rewardProvide.add(reward);\r\n            poolInfo.rewardPerShare = poolInfo.rewardPerShare.add(reward.mul(1e24).div(poolInfo.totalPower));\r\n            poolInfo.lastRewardBlock = block.number;\r\n\r\n            emit Mint(_pool, poolInfo.lp, reward);\r\n\r\n            if (0 < poolInfo.endBlock) {\r\n                emit EndPool(_pool, poolInfo.lp);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addPower(uint256 _pool, address _user, uint256 _amount, address _upper1, address _upper2) internal {\r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        poolInfo.amount = poolInfo.amount.add(_amount);\r\n\r\n        uint256 pledgePower = _amount;\r\n        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];            \r\n        userInfo.amount = userInfo.amount.add(_amount);\r\n        userInfo.pledgePower = userInfo.pledgePower.add(pledgePower);\r\n        poolInfo.totalPower = poolInfo.totalPower.add(pledgePower);\r\n        if (0 == userInfo.startBlock) {\r\n            userInfo.startBlock = block.number;\r\n            pledgeAddresss[_pool].push(msg.sender);\r\n        }\r\n        \r\n        uint256 upper1InvitePower = 0;\r\n        uint256 upper2InvitePower = 0;\r\n\r\n        if (address(0) != _upper1) {\r\n            uint256 inviteSelfPower = pledgePower.mul(inviteSelfReward).div(100);\r\n            userInfo.invitePower = userInfo.invitePower.add(inviteSelfPower);\r\n            poolInfo.totalPower = poolInfo.totalPower.add(inviteSelfPower);\r\n\r\n            uint256 invite1Power = pledgePower.mul(invite1Reward).div(100);\r\n            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];            \r\n            upper1Info.invitePower = upper1Info.invitePower.add(invite1Power);\r\n            upper1InvitePower = upper1Info.invitePower;\r\n            poolInfo.totalPower = poolInfo.totalPower.add(invite1Power);\r\n            if (0 == upper1Info.startBlock) {\r\n                upper1Info.startBlock = block.number;\r\n                pledgeAddresss[_pool].push(_upper1);\r\n            }\r\n        }\r\n\r\n        if (address(0) != _upper2) {\r\n            uint256 invite2Power = pledgePower.mul(invite2Reward).div(100);\r\n            UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];            \r\n            upper2Info.invitePower = upper2Info.invitePower.add(invite2Power);\r\n            upper2InvitePower = upper2Info.invitePower;\r\n            poolInfo.totalPower = poolInfo.totalPower.add(invite2Power);\r\n            if (0 == upper2Info.startBlock) {\r\n                upper2Info.startBlock = block.number;\r\n                pledgeAddresss[_pool].push(_upper2);\r\n            }\r\n        }\r\n        \r\n        emit UpdatePower(_pool, poolInfo.lp, poolInfo.totalPower, _user, userInfo.invitePower, userInfo.pledgePower, _upper1, upper1InvitePower, _upper2, upper2InvitePower);\r\n    }\r\n\r\n    function subPower(uint256 _pool, address _user, uint256 _amount, address _upper1, address _upper2) internal {\r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];\r\n        poolInfo.amount = poolInfo.amount.sub(_amount);\r\n\r\n        uint256 pledgePower = _amount;\r\n        userInfo.amount = userInfo.amount.sub(_amount);\r\n        userInfo.pledgePower = userInfo.pledgePower.sub(pledgePower);\r\n        poolInfo.totalPower = poolInfo.totalPower.sub(pledgePower);\r\n\r\n        uint256 upper1InvitePower = 0;\r\n        uint256 upper2InvitePower = 0;\r\n\r\n        if (address(0) != _upper1) {\r\n            uint256 inviteSelfPower = pledgePower.mul(inviteSelfReward).div(100);\r\n            userInfo.invitePower = userInfo.invitePower.sub(inviteSelfPower);\r\n            poolInfo.totalPower = poolInfo.totalPower.sub(inviteSelfPower);\r\n\r\n            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];\r\n            if (0 < upper1Info.startBlock) {\r\n                uint256 invite1Power = pledgePower.mul(invite1Reward).div(100);\r\n                upper1Info.invitePower = upper1Info.invitePower.sub(invite1Power);\r\n                upper1InvitePower = upper1Info.invitePower;\r\n                poolInfo.totalPower = poolInfo.totalPower.sub(invite1Power);\r\n\r\n                if (address(0) != _upper2) {\r\n                    UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];\r\n                    if (0 < upper2Info.startBlock) {\r\n                        uint256 invite2Power = pledgePower.mul(invite2Reward).div(100);\r\n                        upper2Info.invitePower = upper2Info.invitePower.sub(invite2Power);\r\n                        upper2InvitePower = upper2Info.invitePower;\r\n                        poolInfo.totalPower = poolInfo.totalPower.sub(invite2Power);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit UpdatePower(_pool, poolInfo.lp, poolInfo.totalPower, _user, userInfo.invitePower, userInfo.pledgePower, _upper1, upper1InvitePower, _upper2, upper2InvitePower);\r\n    }\r\n\r\n    function provideReward(uint256 _pool, uint256 _rewardPerShare, address _lp, address _user, address _upper1, address _upper2) internal {\r\n        uint256 inviteReward = 0;\r\n        uint256 pledgeReward = 0;\r\n        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];\r\n        if ((0 < userInfo.invitePower) || (0 < userInfo.pledgePower)) {\r\n            inviteReward = userInfo.invitePower.mul(_rewardPerShare).sub(userInfo.inviteRewardDebt).div(1e24);\r\n            pledgeReward = userInfo.pledgePower.mul(_rewardPerShare).sub(userInfo.pledgeRewardDebt).div(1e24);\r\n\r\n            userInfo.pendingReward = userInfo.pendingReward.add(inviteReward.add(pledgeReward));\r\n\r\n            RewardInfo storage userRewardInfo = rewardInfos[_user];\r\n            userRewardInfo.inviteReward = userRewardInfo.inviteReward.add(inviteReward);\r\n            userRewardInfo.pledgeReward = userRewardInfo.pledgeReward.add(pledgeReward);\r\n        }\r\n\r\n        if (0 < userInfo.pendingReward) {\r\n            you.mint(_user, userInfo.pendingReward);\r\n            \r\n            RewardInfo storage userRewardInfo = rewardInfos[_user];\r\n            userRewardInfo.receiveReward = userRewardInfo.inviteReward;\r\n            \r\n            emit WithdrawReward(_pool, _lp, _user, userInfo.pendingReward);\r\n\r\n            userInfo.pendingReward = 0;\r\n        }\r\n\r\n        if (address(0) != _upper1) {\r\n            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];\r\n            if ((0 < upper1Info.invitePower) || (0 < upper1Info.pledgePower)) {\r\n                inviteReward = upper1Info.invitePower.mul(_rewardPerShare).sub(upper1Info.inviteRewardDebt).div(1e24);\r\n                pledgeReward = upper1Info.pledgePower.mul(_rewardPerShare).sub(upper1Info.pledgeRewardDebt).div(1e24);\r\n                \r\n                upper1Info.pendingReward = upper1Info.pendingReward.add(inviteReward.add(pledgeReward));\r\n\r\n                RewardInfo storage upper1RewardInfo = rewardInfos[_upper1];\r\n                upper1RewardInfo.inviteReward = upper1RewardInfo.inviteReward.add(inviteReward);\r\n                upper1RewardInfo.pledgeReward = upper1RewardInfo.pledgeReward.add(pledgeReward);\r\n            }\r\n\r\n            if (address(0) != _upper2) {\r\n                UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];\r\n                if ((0 < upper2Info.invitePower) || (0 < upper2Info.pledgePower)) {\r\n                    inviteReward = upper2Info.invitePower.mul(_rewardPerShare).sub(upper2Info.inviteRewardDebt).div(1e24);\r\n                    pledgeReward = upper2Info.pledgePower.mul(_rewardPerShare).sub(upper2Info.pledgeRewardDebt).div(1e24);\r\n\r\n                    upper2Info.pendingReward = upper2Info.pendingReward.add(inviteReward.add(pledgeReward));\r\n\r\n                    RewardInfo storage upper2RewardInfo = rewardInfos[_upper2];\r\n                    upper2RewardInfo.inviteReward = upper2RewardInfo.inviteReward.add(inviteReward);\r\n                    upper2RewardInfo.pledgeReward = upper2RewardInfo.pledgeReward.add(pledgeReward);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setRewardDebt(uint256 _pool, uint256 _rewardPerShare, address _user, address _upper1, address _upper2) internal {\r\n        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];\r\n        userInfo.inviteRewardDebt = userInfo.invitePower.mul(_rewardPerShare);\r\n        userInfo.pledgeRewardDebt = userInfo.pledgePower.mul(_rewardPerShare);\r\n\r\n        if (address(0) != _upper1) {\r\n            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];\r\n            upper1Info.inviteRewardDebt = upper1Info.invitePower.mul(_rewardPerShare);\r\n            upper1Info.pledgeRewardDebt = upper1Info.pledgePower.mul(_rewardPerShare);\r\n\r\n            if (address(0) != _upper2) {\r\n                UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];\r\n                upper2Info.inviteRewardDebt = upper2Info.invitePower.mul(_rewardPerShare);\r\n                upper2Info.pledgeRewardDebt = upper2Info.pledgePower.mul(_rewardPerShare);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function powerScale(uint256 _pool, address _user) override external view returns (uint256) {\r\n        PoolInfo memory poolInfo = poolInfos[_pool];\r\n        if (0 == poolInfo.totalPower) {\r\n            return 0;\r\n        }\r\n\r\n        UserInfo memory userInfo = pledgeUserInfo[_pool][_user];\r\n        return (userInfo.invitePower.add(userInfo.pledgePower).mul(100)).div(poolInfo.totalPower);\r\n    }\r\n\r\n    function pendingReward(uint256 _pool, address _user) override external view returns (uint256) {\r\n        uint256 totalReward = 0;\r\n        PoolInfo memory poolInfo = poolInfos[_pool];\r\n        if (address(0) != poolInfo.lp && (poolInfo.startBlock <= block.number)) {\r\n            uint256 rewardPerShare = 0;\r\n            if (0 < poolInfo.totalPower) {\r\n                uint256 reward = (block.number - poolInfo.lastRewardBlock).mul(poolInfo.rewardPerBlock);\r\n                if (poolInfo.rewardProvide.add(reward) > poolInfo.rewardTotal) {\r\n                    reward = poolInfo.rewardTotal.sub(poolInfo.rewardProvide);\r\n                }\r\n                rewardPerShare = reward.mul(1e24).div(poolInfo.totalPower);\r\n            }\r\n            rewardPerShare = rewardPerShare.add(poolInfo.rewardPerShare);\r\n\r\n            UserInfo memory userInfo = pledgeUserInfo[_pool][_user];\r\n            totalReward = userInfo.pendingReward;\r\n            totalReward = totalReward.add(userInfo.invitePower.mul(rewardPerShare).sub(userInfo.inviteRewardDebt).div(1e24));\r\n            totalReward = totalReward.add(userInfo.pledgePower.mul(rewardPerShare).sub(userInfo.pledgeRewardDebt).div(1e24));\r\n        }\r\n\r\n        return totalReward;\r\n    }\r\n\r\n    function rewardContribute(address _user, address _lower) override external view returns (uint256) {\r\n        if ((address(0) == _user) || (address(0) == _lower)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 inviteReward = 0;\r\n        (address upper1, address upper2) = invite.inviteUpper2(_lower);\r\n        if (_user == upper1) {\r\n            inviteReward = rewardInfos[_lower].pledgeReward.mul(invite1Reward).div(100);\r\n        }else if (_user == upper2) {\r\n            inviteReward = rewardInfos[_lower].pledgeReward.mul(invite2Reward).div(100);\r\n        }\r\n        \r\n        return inviteReward;\r\n    }\r\n\r\n    function selfReward(address _user) override external view returns (uint256) {\r\n        address upper1 = invite.inviteUpper1(_user);\r\n        if (address(0) == upper1) {\r\n            return 0;\r\n        }\r\n\r\n        RewardInfo memory userRewardInfo = rewardInfos[_user];\r\n        return userRewardInfo.pledgeReward.mul(inviteSelfReward).div(100);\r\n    }\r\n\r\n    function poolNumbers(address _lp) override external view returns (uint256[] memory) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < poolCount; i++) {\r\n            if (_lp == poolViewInfos[i].lp) {\r\n                count = count.add(1);\r\n            }\r\n        }\r\n        \r\n        uint256[] memory numbers = new uint256[](count);\r\n        count = 0;\r\n        for (uint256 i = 0; i < poolCount; i++) {\r\n            if (_lp == poolViewInfos[i].lp) {\r\n                numbers[count] = i;\r\n                count = count.add(1);\r\n            }\r\n        }\r\n\r\n        return numbers;\r\n    }\r\n\r\n    function setOperateOwner(address _address, bool _bool) override external {\r\n        _setOperateOwner(_address, _bool);\r\n    }\r\n    \r\n    function _setOperateOwner(address _address, bool _bool) internal {\r\n        require(owner == msg.sender, ErrorCode.FORBIDDEN);\r\n        operateOwner[_address] = _bool;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function addPool(string memory _name, address _lp, uint256 _startBlock, uint256 _rewardTotal) override external returns (bool) {\r\n        require(operateOwner[msg.sender] && (address(0) != _lp) && (address(this) != _lp), ErrorCode.FORBIDDEN);\r\n        _startBlock = _startBlock < block.number ? block.number : _startBlock;\r\n        uint256 _pool = poolCount;\r\n        poolCount = poolCount.add(1);\r\n\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\r\n        poolViewInfo.lp = _lp;\r\n        poolViewInfo.name = _name;\r\n        poolViewInfo.multiple = 1;\r\n        poolViewInfo.priority = _pool.mul(100);\r\n        \r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        poolInfo.startBlock = _startBlock;\r\n        poolInfo.rewardTotal = _rewardTotal;\r\n        poolInfo.rewardProvide = 0;\r\n        poolInfo.lp = _lp;\r\n        poolInfo.amount = 0;\r\n        poolInfo.lastRewardBlock = _startBlock.sub(1);\r\n        poolInfo.rewardPerBlock = rewardPerBlock;\r\n        poolInfo.totalPower = 0;\r\n        poolInfo.endBlock = 0;\r\n        poolInfo.rewardPerShare = 0;\r\n\r\n        emit UpdatePool(true, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function setRewardPerBlock(uint256 _pool, uint256 _rewardPerBlock) override external {\r\n        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        require((address(0) != poolInfo.lp) && (0 == poolInfo.endBlock), ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\r\n        poolInfo.rewardPerBlock = _rewardPerBlock;\r\n\r\n        PoolViewInfo memory poolViewInfo = poolViewInfos[_pool];\r\n\r\n        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\r\n    }\r\n    \r\n    function setRewardTotal(uint256 _pool, uint256 _rewardTotal) override external {\r\n        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\r\n        PoolInfo storage poolInfo = poolInfos[_pool];\r\n        require((address(0) != poolInfo.lp) && (0 == poolInfo.endBlock), ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\r\n        require(poolInfo.rewardProvide < _rewardTotal, ErrorCode.REWARDTOTAL_LESS_THAN_REWARDPROVIDE);\r\n        poolInfo.rewardTotal = _rewardTotal;\r\n\r\n        PoolViewInfo memory poolViewInfo = poolViewInfos[_pool];\r\n\r\n        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\r\n   }\r\n\r\n   function setName(uint256 _pool, string memory _name) override external {\r\n        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\r\n        require(address(0) != poolViewInfo.lp, ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\r\n        poolViewInfo.name = _name;\r\n\r\n        PoolInfo memory poolInfo = poolInfos[_pool];\r\n\r\n        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\r\n   }\r\n\r\n   function setMultiple(uint256 _pool, uint256 _multiple) override external {\r\n        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\r\n        require(address(0) != poolViewInfo.lp, ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\r\n        poolViewInfo.multiple = _multiple;\r\n\r\n        PoolInfo memory poolInfo = poolInfos[_pool];\r\n\r\n        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\r\n    }\r\n\r\n    function setPriority(uint256 _pool, uint256 _priority) override external {\r\n        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\r\n        require(address(0) != poolViewInfo.lp, ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\r\n        poolViewInfo.priority = _priority;\r\n\r\n        PoolInfo memory poolInfo = poolInfos[_pool];\r\n\r\n        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ITokenYou\",\"name\":\"_you\",\"type\":\"address\"},{\"internalType\":\"contract YouswapInviteV1\",\"name\":\"_invite\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"EndPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"InviteRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"action\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priority\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPower\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerInvitePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerPledgePower\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upper1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upper1InvitePower\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upper2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upper2InvitePower\",\"type\":\"uint256\"}],\"name\":\"UpdatePower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTotal\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invite\",\"outputs\":[{\"internalType\":\"contract YouswapInviteV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invite1Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invite2Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteSelfReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operateOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgeAddresss\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledgeUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invitePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeRewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardProvide\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"poolNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"poolPledgeAddresss\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolViewInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priority\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"powerScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lower\",\"type\":\"address\"}],\"name\":\"rewardContribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"selfReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YouswapInviteV1\",\"name\":\"_invite\",\"type\":\"address\"}],\"name\":\"setInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiple\",\"type\":\"uint256\"}],\"name\":\"setMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setOperateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priority\",\"type\":\"uint256\"}],\"name\":\"setPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTotal\",\"type\":\"uint256\"}],\"name\":\"setRewardTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenYou\",\"name\":\"_you\",\"type\":\"address\"}],\"name\":\"setYou\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"you\",\"outputs\":[{\"internalType\":\"contract ITokenYou\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YouswapFactoryV1", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001d32916cfa6534d261ad53e2498ab95505bd251000000000000000000000000025310873e310b270aec5113a2d3037fa94166969", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://767fcd10c251eba64e693e049a258a5b5b7cc037735fdd82d1505cbc2be7b714"}]}