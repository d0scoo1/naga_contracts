{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/APWineZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"contracts/interfaces/IController.sol\\\";\\nimport \\\"contracts/interfaces/IAMMRouterV1.sol\\\";\\nimport \\\"contracts/interfaces/IFutureVault.sol\\\";\\nimport \\\"contracts/interfaces/IRegistry.sol\\\";\\nimport \\\"contracts/interfaces/IAMMRegistry.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/IAMM.sol\\\";\\nimport \\\"contracts/interfaces/IZapDepositor.sol\\\";\\nimport \\\"contracts/interfaces/IDepositorRegistry.sol\\\";\\nimport \\\"contracts/interfaces/ILPToken.sol\\\";\\n\\ncontract APWineZap is Initializable, ERC1155HolderUpgradeable {\\n    using SafeERC20Upgradeable for IERC20;\\n    uint256 internal constant UNIT = 10**18;\\n    uint256 internal constant MAX_UINT256 =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    IAMMRegistry public registry;\\n    IController public controller;\\n    IAMMRouterV1 public router;\\n    IDepositorRegistry public depositorRegistry;\\n\\n    ILPToken public lpToken;\\n\\n    modifier isValidAmm(IAMM _amm) {\\n        require(\\n            registry.isRegisteredAMM(address(_amm)),\\n            \\\"AMMRouter: invalid amm address\\\"\\n        );\\n        _;\\n    }\\n\\n    event RegistrySet(IAMMRegistry _registry);\\n    event AllTokenApprovalUpdatedForAMM(IAMM _amm);\\n    event FYTApprovalUpdatedForAMM(IAMM _amm);\\n    event UnderlyingApprovalUpdatedForDepositor(\\n        IAMM _amm,\\n        IZapDepositor _zapDepositor\\n    );\\n\\n    event ZappedInScaledToUnderlying(\\n        address _sender,\\n        IAMM _amm,\\n        uint256 _initialUnderlyinValue,\\n        uint256 _underlyingEarned,\\n        bool _sellAllFYTs\\n    );\\n\\n    event ZappedInToPT(\\n        address _sender,\\n        IAMM _amm,\\n        uint256 _amount,\\n        uint256 totalPTAmount\\n    );\\n\\n    function initialize(\\n        IController _controller,\\n        IAMMRouterV1 _router,\\n        IDepositorRegistry _depositorRegistry,\\n        ILPToken _lpToken\\n    ) public virtual initializer {\\n        registry = _depositorRegistry.registry();\\n        controller = _controller;\\n        router = _router;\\n        depositorRegistry = _depositorRegistry;\\n        lpToken = _lpToken;\\n    }\\n\\n    /**\\n     * @notice Zap to deposit in protocol and get back the amount of PT that is corresponding to the underlying amount deposited, selling the rest of the FYTs against underlying\\n     * @param _amm the amm to interact with\\n     * @param _amount the amount of underlying to deposit\\n     * @param _inputs 0.minUnderlyingOut 1.deadline\\n     * @param _referralRecipient referral recipient address if any\\n     * @param _sellAllFYTs if true, will sell fyt against underlying\\n     * @return the amount of underlying at the end\\n     */\\n    function zapInScaledToUnderlying(\\n        IAMM _amm,\\n        uint256 _amount,\\n        uint256[] calldata _inputs,\\n        address _referralRecipient,\\n        bool _sellAllFYTs\\n    ) public isValidAmm(_amm) returns (uint256) {\\n        address underlyingAddress = _amm.getUnderlyingOfIBTAddress();\\n        uint256 ibtAmount =\\n            depositorRegistry\\n                .ZapDepositorsPerAMM(address(_amm))\\n                .depositInProtocolFrom(underlyingAddress, _amount, msg.sender);\\n\\n        return\\n            _zapInScaledToUnderlyingWithIBT(\\n                _amm,\\n                ibtAmount,\\n                _inputs,\\n                _referralRecipient,\\n                _sellAllFYTs\\n            );\\n    }\\n\\n    /**\\n     * @notice Zap to deposit in protocol and get back the amount of PT that is corresponding to the underlying amount deposited, selling the rest of the FYTs against underlying\\n     * @param _amm the amm to interact with\\n     * @param _amount the amount of IBT to deposit\\n     * @param _inputs 0.minUnderlyingOut 1.deadline\\n     * @param _referralRecipient referral recipient address if any\\n     * @param _sellAllFYTs if true, will sell fyt against underlying\\n     * @return the amount of underlying at the end\\n     */\\n    function zapInScaledToUnderlyingWithIBT(\\n        IAMM _amm,\\n        uint256 _amount,\\n        uint256[] calldata _inputs,\\n        address _referralRecipient,\\n        bool _sellAllFYTs\\n    ) public isValidAmm(_amm) returns (uint256) {\\n        IERC20(_amm.getIBTAddress()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        ); // get IBT from caller\\n        return\\n            _zapInScaledToUnderlyingWithIBT(\\n                _amm,\\n                _amount,\\n                _inputs,\\n                _referralRecipient,\\n                _sellAllFYTs\\n            );\\n    }\\n\\n    /**\\n     * @notice Zap to deposit in protocol and get back the amount of PT that is corresponding to the underlying amount deposited, selling the rest of the FYTs against underlying\\n     * @param _amm the amm to interact with\\n     * @param _amount the amount of IBT to deposit\\n     * @param _inputs 0.minUnderlyingOut 1.deadline\\n     * @param _referralRecipient referral recipient address if any\\n     * @param _sellAllFYTs if true, will sell fyt against underlying\\n     * @return the amount of underlying at the end\\n     */\\n    function _zapInScaledToUnderlyingWithIBT(\\n        IAMM _amm,\\n        uint256 _amount,\\n        uint256[] calldata _inputs,\\n        address _referralRecipient,\\n        bool _sellAllFYTs\\n    ) internal returns (uint256) {\\n        IFutureVault future = IFutureVault(_amm.getFutureAddress());\\n\\n        uint256[] memory underlyingAndPTForAmount = new uint256[](2);\\n\\n        underlyingAndPTForAmount[0] = future.convertIBTToUnderlying(_amount); // underlying value\\n        underlyingAndPTForAmount[1] = future.getPTPerAmountDeposited(_amount); // ptBalance\\n\\n        controller.deposit(address(future), _amount); // deposit IBT in future\\n\\n        uint256 underlyingEarned;\\n\\n        if (_sellAllFYTs) {\\n            if (underlyingAndPTForAmount[0] != underlyingAndPTForAmount[1]) {\\n                underlyingEarned = _executeFYTToScaledSwaps(\\n                    _amm,\\n                    underlyingAndPTForAmount,\\n                    _inputs,\\n                    _referralRecipient\\n                );\\n            } else {\\n                underlyingEarned = underlyingAndPTForAmount[0];\\n            }\\n        } else {\\n            underlyingEarned = _executeFYTToScaledUnderlyingSwaps(\\n                _amm,\\n                underlyingAndPTForAmount,\\n                _inputs,\\n                _referralRecipient\\n            );\\n        }\\n\\n        IERC20(future.getPTAddress()).safeTransfer(\\n            msg.sender,\\n            underlyingAndPTForAmount[0]\\n        );\\n        emit ZappedInScaledToUnderlying(\\n            msg.sender,\\n            _amm,\\n            underlyingAndPTForAmount[0],\\n            underlyingEarned,\\n            _sellAllFYTs\\n        );\\n\\n        return underlyingEarned;\\n    }\\n\\n    /**\\n     * @notice Zap to deposit in protocol and sell all FYTs against PTs\\n     * @param _amm the amm to interact with\\n     * @param _amount the amount of underlying to deposit\\n     * @param _inputs 0.minPTAmountOut 1.deadline\\n     * @param _referralRecipient referral recipient address if any\\n     * @return the amount of PTs at the end\\n     */\\n    function zapInToPT(\\n        IAMM _amm,\\n        uint256 _amount,\\n        uint256[] calldata _inputs,\\n        address _referralRecipient\\n    ) public isValidAmm(_amm) returns (uint256) {\\n        address underlyingAddress = _amm.getUnderlyingOfIBTAddress();\\n\\n        uint256 ibtReceived =\\n            depositorRegistry\\n                .ZapDepositorsPerAMM(address(_amm))\\n                .depositInProtocolFrom(underlyingAddress, _amount, msg.sender);\\n        return\\n            _zapInToPTWithIBT(_amm, ibtReceived, _inputs, _referralRecipient);\\n    }\\n\\n    /**\\n     * @notice Zap to deposit in protocol and sell all FYTs against PTs\\n     * @param _amm the amm to interact with\\n     * @param _amount the amount of IBT to deposit\\n     * @param _inputs 0.minPTAmountOut 1.deadline\\n     * @param _referralRecipient referral recipient address if any\\n     * @return the amount of PTs at the end\\n     */\\n    function zapInToPTWithIBT(\\n        IAMM _amm,\\n        uint256 _amount,\\n        uint256[] calldata _inputs,\\n        address _referralRecipient\\n    ) public isValidAmm(_amm) returns (uint256) {\\n        IERC20(_amm.getIBTAddress()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        ); // get IBT from caller\\n\\n        return _zapInToPTWithIBT(_amm, _amount, _inputs, _referralRecipient);\\n    }\\n\\n    /**\\n     * @notice Zap to deposit in protocol and sell all FYTs against PTs\\n     * @param _amm the amm to interact with\\n     * @param _amount the amount of IBT to deposit\\n     * @param _inputs 0.minPTAmountOut 1.deadline\\n     * @param _referralRecipient referral recipient address if any\\n     * @return the amount of PTs at the end\\n     */\\n    function _zapInToPTWithIBT(\\n        IAMM _amm,\\n        uint256 _amount,\\n        uint256[] calldata _inputs,\\n        address _referralRecipient\\n    ) internal returns (uint256) {\\n        IFutureVault future = IFutureVault(_amm.getFutureAddress());\\n\\n        controller.deposit(address(future), _amount); // deposit IBT in future and get corresponding PT and FYT.\\n\\n        uint256 PTBalance =\\n            IERC20(future.getPTAddress()).balanceOf(address(this));\\n\\n        uint256 totalPTAmount =\\n            _executeFYTToPTSwap(_amm, PTBalance, _inputs, _referralRecipient);\\n\\n        IERC20(future.getPTAddress()).safeTransfer(msg.sender, PTBalance);\\n\\n        emit ZappedInToPT(msg.sender, _amm, _amount, totalPTAmount);\\n\\n        return totalPTAmount;\\n    }\\n\\n    /**\\n     * @notice Getter for the underlying amount that can be obtained at the end of the zapInScaledToUnderlying\\n     * @param _amm the amm to interact with\\n     * @param _ibtAmountIn the amount of IBT to deposit\\n     * @return the amount of the underlying after the zap\\n     */\\n    function getUnderlyingOutFromZapScaledToUnderlying(\\n        IAMM _amm,\\n        uint256 _ibtAmountIn\\n    ) external view returns (uint256) {\\n        IFutureVault future = IFutureVault(_amm.getFutureAddress());\\n\\n        uint256 underlyingValue = future.convertIBTToUnderlying(_ibtAmountIn); // underlying value\\n        uint256 ptBalance = future.getPTPerAmountDeposited(_ibtAmountIn); // ptBalance\\n\\n        uint256[] memory pairPath = new uint256[](1);\\n        pairPath[0] = 1;\\n        uint256[] memory tokenPath = new uint256[](2);\\n        tokenPath[0] = 1;\\n        tokenPath[1] = 0;\\n        uint256 fytUsedForPT =\\n            router.getAmountIn(\\n                _amm,\\n                pairPath,\\n                tokenPath,\\n                underlyingValue - (ptBalance)\\n            );\\n\\n        uint256 fytLeftForUnderlying = ptBalance - (fytUsedForPT);\\n\\n        pairPath = new uint256[](2);\\n        tokenPath = new uint256[](4);\\n        pairPath[0] = 1;\\n        pairPath[1] = 0;\\n        tokenPath[0] = 1;\\n        tokenPath[1] = 0;\\n        tokenPath[2] = 0;\\n        tokenPath[3] = 1;\\n\\n        uint256 underlyingOut =\\n            router.getAmountOut(\\n                _amm,\\n                pairPath,\\n                tokenPath,\\n                fytLeftForUnderlying\\n            );\\n        return underlyingOut;\\n    }\\n\\n    /**\\n     * @notice Getter for the PT amount that can be obtained at the end of the zapInToPT\\n     * @param _amm the amm to interact with\\n     * @param _ibtAmountIn the amount of IBT to deposit\\n     * @return the amount of the PT after the zap\\n     */\\n    function getPTOutFromZapToPT(IAMM _amm, uint256 _ibtAmountIn)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        IFutureVault future = IFutureVault(_amm.getFutureAddress());\\n        uint256 PTBalance = future.getPTPerAmountDeposited(_ibtAmountIn); // ptAndFytBalance\\n        uint256[] memory pairPath = new uint256[](1);\\n        pairPath[0] = 1;\\n        uint256[] memory tokenPath = new uint256[](2);\\n        tokenPath[0] = 1;\\n        tokenPath[1] = 0;\\n        uint256 PTTraded =\\n            router.getAmountOut(_amm, pairPath, tokenPath, PTBalance);\\n        return PTTraded + (PTBalance);\\n    }\\n\\n    /**\\n     * @notice internal fonction to swap the FYT balance to PT\\n     * @param _amm the amm to interact with\\n     * @param _PTBalance the initial PT balance\\n     * @param _inputs 0. minAmountOut 1. deadline timestamp\\n     * @param _referralRecipient the referall recipient address if any\\n     * @return the total amount of the PT after the zap\\n     */\\n    function _executeFYTToPTSwap(\\n        IAMM _amm,\\n        uint256 _PTBalance,\\n        uint256[] memory _inputs,\\n        address _referralRecipient\\n    ) internal returns (uint256) {\\n        uint256[] memory pairPath = new uint256[](1);\\n        pairPath[0] = 1;\\n        uint256[] memory tokenPath = new uint256[](2);\\n        tokenPath[0] = 1;\\n        tokenPath[1] = 0;\\n        uint256 PTEarned =\\n            router.swapExactAmountIn(\\n                _amm,\\n                pairPath, // e.g. [0, 1] -> will swap on pair 0 then 1\\n                tokenPath, // e.g. [1, 0, 0, 1] -> will swap on pair 0 from token 1 to 0, then swap on pair 1 from token 0 to 1.\\n                _PTBalance,\\n                _inputs[0] > _PTBalance ? _inputs[0] - (_PTBalance) : 0,\\n                msg.sender,\\n                _inputs[1],\\n                _referralRecipient\\n            ); // swap all FYTs against more PTs\\n\\n        return PTEarned + (_PTBalance);\\n    }\\n\\n    /**\\n     * @notice Swap FYT to have PT balance equal the underlying value deposited, and swap the remaining FYT to underlying\\n     * @param _amm the amm to interact with\\n     * @param _underlyingAndPTForAmount 0. the underlying value of the ibt deposited 1. the obtained PT amount with the amount deposited\\n     * @param _inputs 0. minAmountOut 1. deadline timestamp\\n     * @param _referralRecipient the referall recipient address if any\\n     * @return the total underlying amount after the swaps\\n     */\\n    function _executeFYTToScaledSwaps(\\n        IAMM _amm,\\n        uint256[] memory _underlyingAndPTForAmount,\\n        uint256[] memory _inputs,\\n        address _referralRecipient\\n    ) internal returns (uint256) {\\n        uint256[] memory pairPath = new uint256[](1);\\n        pairPath[0] = 1;\\n        uint256[] memory tokenPath = new uint256[](2);\\n        tokenPath[0] = 1;\\n        tokenPath[1] = 0;\\n\\n        uint256 PTstoSwap;\\n        {\\n            uint256 newPTs =\\n                router.swapExactAmountIn(\\n                    _amm,\\n                    pairPath,\\n                    tokenPath,\\n                    _underlyingAndPTForAmount[1],\\n                    0,\\n                    msg.sender,\\n                    _inputs[1],\\n                    _referralRecipient\\n                ); // swap against PT\\n\\n            if (IERC20(_amm.getFYTAddress()).balanceOf(address(this)) == 0)\\n                return 0;\\n\\n            PTstoSwap =\\n                newPTs -\\n                (_underlyingAndPTForAmount[0] - _underlyingAndPTForAmount[1]);\\n        }\\n\\n        uint256 underlyingOut =\\n            router.swapExactAmountIn(\\n                _amm,\\n                pairPath,\\n                tokenPath,\\n                PTstoSwap,\\n                _inputs[0],\\n                msg.sender,\\n                _inputs[1],\\n                _referralRecipient\\n            ); // swap against underlying\\n        return underlyingOut;\\n    }\\n\\n    /**\\n     * @notice Swap FYT to have PT balance equal the underlying value deposited, and send te remaining FYTs to the caller\\n     * @param _amm the amm to interact with\\n     * @param _underlyingAndPTForAmount 0. the underlying value of the ibt deposited 1. the obtained PT amount with the amount deposited\\n     * @param _inputs 0. minAmountOut 1. deadline timestamp\\n     * @param _referralRecipient the referall recipient address if any\\n     * @return the remaining FYTs amount after the swap\\n     */\\n    function _executeFYTToScaledUnderlyingSwaps(\\n        IAMM _amm,\\n        uint256[] memory _underlyingAndPTForAmount,\\n        uint256[] memory _inputs,\\n        address _referralRecipient\\n    ) internal returns (uint256) {\\n        uint256[] memory pairPath = new uint256[](1);\\n        pairPath[0] = 1;\\n        uint256[] memory tokenPath = new uint256[](2);\\n        tokenPath[0] = 1;\\n        tokenPath[1] = 0;\\n        uint256 fytSold =\\n            router.swapExactAmountOut(\\n                _amm,\\n                pairPath,\\n                tokenPath,\\n                _underlyingAndPTForAmount[1],\\n                _underlyingAndPTForAmount[0] - (_underlyingAndPTForAmount[1]),\\n                msg.sender,\\n                _inputs[1],\\n                _referralRecipient\\n            ); // swap extra fyt to get an amount of pt = underlyingValue\\n        uint256 FYTsLeft = _underlyingAndPTForAmount[1] - (fytSold);\\n        IERC20(_amm.getFYTAddress()).transfer(msg.sender, FYTsLeft);\\n        return FYTsLeft;\\n    }\\n\\n    function _getUnderlyingAndDepositToProtocol(IAMM _amm, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        address underlyingAddress = _amm.getUnderlyingOfIBTAddress();\\n        IERC20(underlyingAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        ); // get IBT from caller\\n\\n        return\\n            depositorRegistry\\n                .ZapDepositorsPerAMM(address(_amm))\\n                .depositInProtocol(underlyingAddress, _amount);\\n    }\\n\\n    function updateAllTokensApprovalForAMM(IAMM _amm)\\n        external\\n        isValidAmm(_amm)\\n    {\\n        IFutureVault future = IFutureVault(_amm.getFutureAddress());\\n\\n        IERC20 ibt = IERC20(future.getIBTAddress());\\n        ibt.safeIncreaseAllowance(\\n            address(controller),\\n            MAX_UINT256 - (ibt.allowance(address(this), address(_amm)))\\n        ); // Approve controller for IBT\\n\\n        IERC20 pt = IERC20(future.getPTAddress());\\n        pt.safeIncreaseAllowance(\\n            address(router),\\n            MAX_UINT256 - (pt.allowance(address(this), address(router)))\\n        ); // Approve router for PT\\n        pt.safeIncreaseAllowance(\\n            address(_amm),\\n            MAX_UINT256 - (pt.allowance(address(this), address(_amm)))\\n        ); // Approve amm for PT\\n\\n        IERC20 underlying = IERC20(_amm.getUnderlyingOfIBTAddress());\\n\\n        underlying.safeIncreaseAllowance(\\n            address(_amm),\\n            MAX_UINT256 - (underlying.allowance(address(this), address(_amm)))\\n        );\\n\\n        IERC20 fyt =\\n            IERC20(future.getFYTofPeriod(future.getCurrentPeriodIndex()));\\n        fyt.safeIncreaseAllowance(\\n            address(router),\\n            MAX_UINT256 - (fyt.allowance(address(this), address(router)))\\n        ); // Approve router for FYT\\n        emit FYTApprovalUpdatedForAMM(_amm);\\n        emit AllTokenApprovalUpdatedForAMM(_amm);\\n    }\\n\\n    function updateFYTApprovalForAMM(IAMM _amm) external isValidAmm(_amm) {\\n        IFutureVault future = IFutureVault(_amm.getFutureAddress());\\n        IERC20 fyt =\\n            IERC20(future.getFYTofPeriod(future.getCurrentPeriodIndex()));\\n        fyt.safeIncreaseAllowance(\\n            address(router),\\n            MAX_UINT256 - (fyt.allowance(address(this), address(router)))\\n        ); // Approve router for FYT\\n        emit FYTApprovalUpdatedForAMM(_amm);\\n    }\\n\\n    function updateUnderlyingApprovalForDepositor(IAMM _amm)\\n        external\\n        isValidAmm(_amm)\\n    {\\n        IZapDepositor zapDepositor =\\n            depositorRegistry.ZapDepositorsPerAMM(address(_amm));\\n        IERC20 underlying = IERC20(_amm.getUnderlyingOfIBTAddress());\\n        underlying.safeIncreaseAllowance(\\n            address(zapDepositor),\\n            MAX_UINT256 -\\n                (underlying.allowance(address(this), address(zapDepositor)))\\n        );\\n\\n        emit UnderlyingApprovalUpdatedForDepositor(_amm, zapDepositor);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface IController {\\n    /* Getters */\\n\\n    function STARTING_DELAY() external view returns (uint256);\\n\\n    /* Future Settings Setters */\\n\\n    /**\\n     * @notice Change the delay for starting a new period\\n     * @param _startingDelay the new delay (+-) to start the next period\\n     */\\n    function setPeriodStartingDelay(uint256 _startingDelay) external;\\n\\n    /**\\n     * @notice Set the next period switch timestamp for the future with corresponding duration\\n     * @param _periodDuration the duration of a period\\n     * @param _nextPeriodTimestamp the next period switch timestamp\\n     */\\n    function setNextPeriodSwitchTimestamp(\\n        uint256 _periodDuration,\\n        uint256 _nextPeriodTimestamp\\n    ) external;\\n\\n    /* User Methods */\\n\\n    /**\\n     * @notice Deposit funds into ongoing period\\n     * @param _futureVault the address of the future to be deposit the funds in\\n     * @param _amount the amount to deposit on the ongoing period\\n     * @dev part of the amount depostied will be used to buy back the yield already generated proportionaly to the amount deposited\\n     */\\n    function deposit(address _futureVault, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw deposited funds from APWine\\n     * @param _futureVault the address of the future to withdraw the IBT from\\n     * @param _amount the amount to withdraw\\n     */\\n    function withdraw(address _futureVault, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claim FYT of the msg.sender\\n     * @param _futureVault the future from which to claim the FYT\\n     */\\n    function claimFYT(address _futureVault) external;\\n\\n    /**\\n     * @notice Getter for the registry address of the protocol\\n     * @return the address of the protocol registry\\n     */\\n    function getRegistryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the symbol of the PT of one future\\n     * @param _ibtSymbol the IBT of the external protocol\\n     * @param _platform the external protocol name\\n     * @param _periodDuration the duration of the periods for the future\\n     * @return the generated symbol of the PT\\n     */\\n    function getFutureIBTSymbol(\\n        string memory _ibtSymbol,\\n        string memory _platform,\\n        uint256 _periodDuration\\n    ) external pure returns (string memory);\\n\\n    /**\\n     * @notice Getter for the symbol of the FYT of one future\\n     * @param _ptSymbol the PT symbol for this future\\n     * @param _periodDuration the duration of the periods for this future\\n     * @return the generated symbol of the FYT\\n     */\\n    function getFYTSymbol(string memory _ptSymbol, uint256 _periodDuration)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Getter for the period index depending on the period duration of the future\\n     * @param _periodDuration the periods duration\\n     * @return the period index\\n     */\\n    function getPeriodIndex(uint256 _periodDuration)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for beginning timestamp of the next period for the futures with a defined periods duration\\n     * @param _periodDuration the periods duration\\n     * @return the timestamp of the beginning of the next period\\n     */\\n    function getNextPeriodStart(uint256 _periodDuration)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for the next performance fee factor of one futureVault\\n     * @param _futureVault the address of the futureVault\\n     * @return the next performance fee factor of the futureVault\\n     */\\n    function getNextPerformanceFeeFactor(address _futureVault)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for the performance fee factor of one futureVault\\n     * @param _futureVault the address of the futureVault\\n     * @return the performance fee factor of the futureVault\\n     */\\n    function getCurrentPerformanceFeeFactor(address _futureVault)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for the list of future durations registered in the contract\\n     * @return the list of futures duration\\n     */\\n    function getDurations() external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Register a newly created future in the registry\\n     * @param _futureVault the address of the new future\\n     */\\n    function registerNewFutureVault(address _futureVault) external;\\n\\n    /**\\n     * @notice Unregister a future from the registry\\n     * @param _futureVault the address of the future to unregister\\n     */\\n    function unregisterFutureVault(address _futureVault) external;\\n\\n    /**\\n     * @notice Start all the futures that have a defined periods duration to synchronize them\\n     * @param _periodDuration the periods duration of the futures to start\\n     */\\n    function startFuturesByPeriodDuration(uint256 _periodDuration) external;\\n\\n    /**\\n     * @notice Getter for the futures by periods duration\\n     * @param _periodDuration the periods duration of the futures to return\\n     */\\n    function getFuturesWithDuration(uint256 _periodDuration)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Claim the FYTs of the corresponding futures\\n     * @param _user the address of the user\\n     * @param _futureVaults the addresses of the futures to claim the fyts from\\n     */\\n    function claimSelectedFYTS(address _user, address[] memory _futureVaults)\\n        external;\\n\\n    function getRoleMember(bytes32 role, uint256 index)\\n        external\\n        view\\n        returns (address); // OZ ACL getter\\n\\n    /**\\n     * @notice Getter for the future deposits state\\n     * @param _futureVault the address of the future\\n     * @return true is new deposits are paused, false otherwise\\n     */\\n    function isDepositsPaused(address _futureVault)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Getter for the future withdrawals state\\n     * @param _futureVault the address of the future\\n     * @return true is new withdrawals are paused, false otherwise\\n     */\\n    function isWithdrawalsPaused(address _futureVault)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Getter for the future period state\\n     * @param _futureVault the address of the future\\n     * @return true if the future is set to be terminated\\n     */\\n    function isFutureSetToBeTerminated(address _futureVault)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAMMRouterV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\nimport \\\"./IAMM.sol\\\";\\nimport \\\"./IAMMRegistry.sol\\\";\\n\\n/**\\n * IAMMRouter is an on-chain router designed to batch swaps for the APWine AMM.\\n * It can be used to facilitate swaps and save gas fees as opposed to executing multiple transactions.\\n * Example: swap from pair 0 to pair 1, from token 0 to token 1 then token 1 to token 0.\\n * One practical use-case would be swapping from FYT to underlying, which would otherwise not be possible natively.\\n */\\ninterface IAMMRouterV1 {\\n    /**\\n     * @dev execute a swapExactAmountIn given pair and token paths. Works just like the regular swapExactAmountIn from AMM.\\n     *\\n     * @param _amm the address of the AMM instance to execute the swap on\\n     * @param _pairPath a list of N pair indices, where N is the number of swaps to execute\\n     * @param _tokenPath a list of 2 * N token indices corresponding to the swaps path. For swap I, tokenIn = 2*I, tokenOut = 2*I + 1\\n     * @param _tokenAmountIn the exact input token amount\\n     * @param _minAmountOut the minimum amount of output tokens to receive, call will revert if not reached\\n     * @param _to the recipient address\\n     * @param _deadline the absolute deadline, in seconds, to prevent outdated swaps from being executed\\n     * @param _referralRecipient the recipient address for the referral\\n     */\\n    function swapExactAmountIn(\\n        IAMM _amm,\\n        uint256[] calldata _pairPath,\\n        uint256[] calldata _tokenPath,\\n        uint256 _tokenAmountIn,\\n        uint256 _minAmountOut,\\n        address _to,\\n        uint256 _deadline,\\n        address _referralRecipient\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    /**\\n     * @dev execute a swapExactAmountOut given pair and token paths. Works just like the regular swapExactAmountOut from AMM.\\n     *\\n     * @param _amm the address of the AMM instance to execute the swap on\\n     * @param _pairPath a list of N pair indices, where N is the number of swaps to execute\\n     * @param _tokenPath a list of 2 * N token indices corresponding to the swaps path. For swap I, tokenIn = 2*I, tokenOut = 2*I + 1\\n     * @param _maxAmountIn the maximum amount of input tokens needed to send, call will revert if not reached\\n     * @param _tokenAmountOut the exact out token amount\\n     * @param _to the recipient address\\n     * @param _deadline the absolute deadline, in seconds, to prevent outdated swaps from being executed\\n     * @param _referralRecipient the recipient address for the referral\\n     */\\n    function swapExactAmountOut(\\n        IAMM _amm,\\n        uint256[] calldata _pairPath,\\n        uint256[] calldata _tokenPath,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenAmountOut,\\n        address _to,\\n        uint256 _deadline,\\n        address _referralRecipient\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    /**\\n     * @dev execute a getSpotPrice given pair and token paths. Works just like the regular getSpotPrice from AMM.\\n     *\\n     * @param _amm the address of the AMM instance to execute the spotPrice on\\n     * @param _pairPath a list of N pair indices, where N is the number of getSpotPrice to execute\\n     * @param _tokenPath a list of 2 * N token indices corresponding to the getSpotPrice path. For getSpotPrice I, tokenIn = 2*I, tokenOut = 2*I + 1\\n     */\\n    function getSpotPrice(\\n        IAMM _amm,\\n        uint256[] calldata _pairPath,\\n        uint256[] calldata _tokenPath\\n    ) external returns (uint256 spotPrice);\\n\\n    /**\\n     * @dev execute a getAmountIn given pair and token paths. Works just like the regular calcInAndSpotGivenOut from AMM.\\n     *\\n     * @param _amm the address of the AMM instance to execute the getAmountIn on\\n     * @param _pairPath a list of N pair indices, where N is the number of getAmountIn to execute\\n     * @param _tokenPath a list of 2 * N token indices corresponding to the getAmountIn path. For getAmountIn I, tokenIn = 2*I, tokenOut = 2*I + 1\\n     * @param _tokenAmountOut the exact out token amount\\n     */\\n    function getAmountIn(\\n        IAMM _amm,\\n        uint256[] calldata _pairPath,\\n        uint256[] calldata _tokenPath,\\n        uint256 _tokenAmountOut\\n    ) external view returns (uint256 tokenAmountIn);\\n\\n    /**\\n     * @dev execute a getAmountOut given pair and token paths. Works just like the regular calcInAndSpotGivenOut from AMM.\\n     *\\n     * @param _amm the address of the AMM instance to execute the getAmountOut on\\n     * @param _pairPath a list of N pair indices, where N is the number of getAmountOut to execute\\n     * @param _tokenPath a list of 2 * N token indices corresponding to the getAmountOut path. For getAmountOut I, tokenIn = 2*I, tokenOut = 2*I + 1\\n     * @param _tokenAmountIn the exact input token amount\\n     */\\n    function getAmountOut(\\n        IAMM _amm,\\n        uint256[] calldata _pairPath,\\n        uint256[] calldata _tokenPath,\\n        uint256 _tokenAmountIn\\n    ) external view returns (uint256 tokenAmountOut);\\n\\n    function registry() external view returns (IAMMRegistry);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFutureVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"contracts/interfaces/IPT.sol\\\";\\nimport \\\"contracts/interfaces/IRegistry.sol\\\";\\nimport \\\"contracts/interfaces/IFutureWallet.sol\\\";\\n\\ninterface IFutureVault {\\n    /* Events */\\n    event NewPeriodStarted(uint256 _newPeriodIndex);\\n    event FutureWalletSet(address _futureWallet);\\n    event RegistrySet(IRegistry _registry);\\n    event FundsDeposited(address _user, uint256 _amount);\\n    event FundsWithdrawn(address _user, uint256 _amount);\\n    event PTSet(IPT _pt);\\n    event LiquidityTransfersPaused();\\n    event LiquidityTransfersResumed();\\n    event DelegationCreated(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    );\\n    event DelegationRemoved(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    );\\n\\n    /* Params */\\n    /**\\n     * @notice Getter for the PERIOD future parameter\\n     * @return returns the period duration of the future\\n     */\\n    function PERIOD_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the PLATFORM_NAME future parameter\\n     * @return returns the platform of the future\\n     */\\n    function PLATFORM_NAME() external view returns (string memory);\\n\\n    /**\\n     * @notice Start a new period\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function startNewPeriod() external;\\n\\n    /**\\n     * @notice Update the state of the user and mint claimable pt\\n     * @param _user user adress\\n     */\\n    function updateUserState(address _user) external;\\n\\n    /**\\n     * @notice Send the user their owed FYT (and pt if there are some claimable)\\n     * @param _user address of the user to send the FYT to\\n     */\\n    function claimFYT(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit funds into ongoing period\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited\\n     */\\n    function deposit(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sender unlocks the locked funds corresponding to their pt holding\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked\\n     */\\n    function withdraw(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Create a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to delegate\\n     */\\n    function createFYTDelegationTo(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Remove a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to remove from the delegation\\n     */\\n    function withdrawFYTDelegationFrom(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /* Getters */\\n\\n    /**\\n     * @notice Getter the total number of FYTs on address is delegating\\n     * @param _delegator the delegating address\\n     * @return totalDelegated the number of FYTs delegated\\n     */\\n    function getTotalDelegated(address _delegator)\\n        external\\n        view\\n        returns (uint256 totalDelegated);\\n\\n    /**\\n     * @notice Getter for next period index\\n     * @return next period index\\n     * @dev index starts at 1\\n     */\\n    function getNextPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for current period index\\n     * @return current period index\\n     * @dev index starts at 1\\n     */\\n    function getCurrentPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of pt that the user can claim\\n     * @param _user user to check the check the claimable pt of\\n     * @return the amount of pt claimable by the user\\n     */\\n    function getClaimablePT(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount (in underlying) of premium redeemable with the corresponding amount of fyt/pt to be burned\\n     * @param _user user adress\\n     * @return premiumLocked the premium amount unlockage at this period (in underlying), amountRequired the amount of pt/fyt required for that operation\\n     */\\n    function getUserEarlyUnlockablePremium(address _user)\\n        external\\n        view\\n        returns (uint256 premiumLocked, uint256 amountRequired);\\n\\n    /**\\n     * @notice Getter for user IBT amount that is unlockable\\n     * @param _user the user to unlock the IBT from\\n     * @return the amount of IBT the user can unlock\\n     */\\n    function getUnlockableFunds(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of FYT that the user can claim for a certain period\\n     * @param _user the user to check the claimable FYT of\\n     * @param _periodIndex period ID to check the claimable FYT of\\n     * @return the amount of FYT claimable by the user for this period ID\\n     */\\n    function getClaimableFYTForPeriod(address _user, uint256 _periodIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for the yield currently generated by one pt for the current period\\n     * @return the amount of yield (in IBT) generated during the current period\\n     */\\n    function getUnrealisedYieldPerPT() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the number of pt that can be minted for an amoumt deposited now\\n     * @param _amount the amount to of IBT to deposit\\n     * @return the number of pt that can be minted for that amount\\n     */\\n    function getPTPerAmountDeposited(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for premium in underlying tokens that can be redeemed at the end of the period of the deposit\\n     * @param _amount the amount of underlying deposited\\n     * @return the number of underlying of the ibt deposited that will be redeemable\\n     */\\n    function getPremiumPerUnderlyingDeposited(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for total underlying deposited in the vault\\n     * @return the total amount of funds deposited in the vault (in underlying)\\n     */\\n    function getTotalUnderlyingDeposited() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the total yield generated during one period\\n     * @param _periodID the period id\\n     * @return the total yield in underlying value\\n     */\\n    function getYieldOfPeriod(uint256 _periodID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for controller address\\n     * @return the controller address\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for futureWallet address\\n     * @return futureWallet address\\n     */\\n    function getFutureWalletAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the IBT address\\n     * @return IBT address\\n     */\\n    function getIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for future pt address\\n     * @return pt address\\n     */\\n    function getPTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for FYT address of a particular period\\n     * @param _periodIndex period index\\n     * @return FYT address\\n     */\\n    function getFYTofPeriod(uint256 _periodIndex)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Getter for the terminated state of the future\\n     * @return true if this vault is terminated\\n     */\\n    function isTerminated() external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the performance fee factor of the current period\\n     * @return the performance fee factor of the futureVault\\n     */\\n    function getPerformanceFeeFactor() external view returns (uint256);\\n\\n    /* Rewards mecanisms*/\\n\\n    /**\\n     * @notice Harvest all rewards from the vault\\n     */\\n    function harvestRewards() external;\\n\\n    /**\\n     * @notice Transfer all the redeemable rewards to set defined recipient\\n     */\\n    function redeemAllVaultRewards() external;\\n\\n    /**\\n     * @notice Transfer the specified token reward balance tot the defined recipient\\n     * @param _rewardToken the reward token to redeem the balance of\\n     */\\n    function redeemVaultRewards(address _rewardToken) external;\\n\\n    /**\\n     * @notice Add a token to the list of reward tokens\\n     * @param _token the reward token to add to the list\\n     * @dev the token must be different than the ibt\\n     */\\n    function addRewardsToken(address _token) external;\\n\\n    /**\\n     * @notice Getter to check if a token is in the reward tokens list\\n     * @param _token the token to check if it is in the list\\n     * @return true if the token is a reward token\\n     */\\n    function isRewardToken(address _token) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the reward token at an index\\n     * @param _index the index of the reward token in the list\\n     * @return the address of the token at this index\\n     */\\n    function getRewardTokenAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for the size of the list of reward tokens\\n     * @return the number of token in the list\\n     */\\n    function getRewardTokensCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the address of the rewards recipient\\n     * @return the address of the rewards recipient\\n     */\\n    function getRewardsRecipient() external view returns (address);\\n\\n    /**\\n     * @notice Setter for the address of the rewards recipient\\n     */\\n    function setRewardRecipient(address _recipient) external;\\n\\n    /* Admin functions */\\n\\n    /**\\n     * @notice Set futureWallet address\\n     */\\n    function setFutureWallet(IFutureWallet _futureWallet) external;\\n\\n    /**\\n     * @notice Set Registry\\n     */\\n    function setRegistry(IRegistry _registry) external;\\n\\n    /**\\n     * @notice Pause liquidity transfers\\n     */\\n    function pauseLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Resume liquidity transfers\\n     */\\n    function resumeLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Convert an amount of IBTs in its equivalent in underlying tokens\\n     * @param _amount the amount of IBTs\\n     * @return the corresponding amount of underlying\\n     */\\n    function convertIBTToUnderlying(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Convert an amount of underlying tokens in its equivalent in IBTs\\n     * @param _amount the amount of underlying tokens\\n     * @return the corresponding amount of IBTs\\n     */\\n    function convertUnderlyingtoIBT(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRegistry {\\n    /* Setters */\\n    /**\\n     * @notice Setter for the treasury address\\n     * @param _newTreasury the address of the new treasury\\n     */\\n    function setTreasury(address _newTreasury) external;\\n\\n    /**\\n     * @notice Setter for the controller address\\n     * @param _newController the address of the new controller\\n     */\\n    function setController(address _newController) external;\\n\\n    /**\\n     * @notice Setter for the APWine IBT logic address\\n     * @param _PTLogic the address of the new APWine IBT logic\\n     */\\n    function setPTLogic(address _PTLogic) external;\\n\\n    /**\\n     * @notice Setter for the APWine FYT logic address\\n     * @param _FYTLogic the address of the new APWine FYT logic\\n     */\\n    function setFYTLogic(address _FYTLogic) external;\\n\\n    /**\\n     * @notice Getter for the controller address\\n     * @return the address of the controller\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the treasury address\\n     * @return the address of the treasury\\n     */\\n    function getTreasuryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the token factory address\\n     * @return the token factory address\\n     */\\n    function getTokensFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine IBT logic address\\n     * @return the APWine IBT logic address\\n     */\\n    function getPTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine FYT logic address\\n     * @return the APWine FYT logic address\\n     */\\n    function getFYTLogicAddress() external view returns (address);\\n\\n    /* Futures */\\n    /**\\n     * @notice Add a future to the registry\\n     * @param _future the address of the future to add to the registry\\n     */\\n    function addFutureVault(address _future) external;\\n\\n    /**\\n     * @notice Remove a future from the registry\\n     * @param _future the address of the future to remove from the registry\\n     */\\n    function removeFutureVault(address _future) external;\\n\\n    /**\\n     * @notice Getter to check if a future is registered\\n     * @param _future the address of the future to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredFutureVault(address _future)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Getter for the future registered at an index\\n     * @param _index the index of the future to return\\n     * @return the address of the corresponding future\\n     */\\n    function getFutureVaultAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for number of future registered\\n     * @return the number of future registered\\n     */\\n    function futureVaultCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAMMRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title AMM Registry interface\\n * @notice Keeps a record of all Future / Pool pairs\\n */\\ninterface IAMMRegistry {\\n    /**\\n     * @notice Initializer of the contract\\n     * @param _admin the address of the admin of the contract\\n     */\\n    function initialize(address _admin) external;\\n\\n    /* Setters */\\n\\n    /**\\n     * @notice Setter for the AMM pools\\n     * @param _futureVaultAddress the future vault address\\n     * @param _ammPool the AMM pool address\\n     */\\n    function setAMMPoolByFuture(address _futureVaultAddress, address _ammPool)\\n        external;\\n\\n    /**\\n     * @notice Register the AMM pools\\n     * @param _ammPool the AMM pool address\\n     */\\n    function setAMMPool(address _ammPool) external;\\n\\n    /**\\n     * @notice Remove an AMM Pool from the registry\\n     * @param _ammPool the address of the pool to remove from the registry\\n     */\\n    function removeAMMPool(address _ammPool) external;\\n\\n    /* Getters */\\n    /**\\n     * @notice Getter for the controller address\\n     * @return the address of the controller\\n     */\\n    function getFutureAMMPool(address _futureVaultAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    function isRegisteredAMM(address _ammAddress) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\npragma abicoder v2;\\n\\ninterface IAMM {\\n    /* Struct */\\n    struct Pair {\\n        address tokenAddress; // first is always PT\\n        uint256[2] weights;\\n        uint256[2] balances;\\n        bool liquidityIsInitialized;\\n    }\\n\\n    enum AMMGlobalState {\\n        Created,\\n        Activated,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice finalize the initialization of the amm\\n     * @dev must be called during the first period the amm is supposed to be active\\n     */\\n    function finalize() external;\\n\\n    /**\\n     * @notice switch period\\n     * @dev must be called after each new period switch\\n     * @dev the switch will auto renew part of the tokens and update the weights accordingly\\n     */\\n    function switchPeriod() external;\\n\\n    /**\\n     * @notice toggle amm pause for pausing/resuming all user functionalities\\n     */\\n    function togglePauseAmm() external;\\n\\n    /**\\n     * @notice Withdraw expired LP tokens\\n     */\\n    function withdrawExpiredToken(address _user, uint256 _lpTokenId) external;\\n\\n    /**\\n     * @notice Getter for redeemable expired tokens info\\n     * @param _user the address of the user to check the redeemable tokens of\\n     * @param _lpTokenId the lp token id\\n     * @return the amount, the period id and the pair id of the expired tokens of the user\\n     */\\n    function getExpiredTokensInfo(address _user, uint256 _lpTokenId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function swapExactAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut,\\n        address _to\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        address _to\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    /**\\n     * @notice Create liquidity on the pair setting an initial price\\n     */\\n    function createLiquidity(uint256 _pairID, uint256[2] memory _tokenAmounts)\\n        external;\\n\\n    function addLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountOut,\\n        uint256[2] memory _maxAmountsIn\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountIn,\\n        uint256[] calldata _minAmountsOut\\n    ) external;\\n\\n    function joinSwapExternAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _minPoolAmountOut\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinSwapPoolAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _poolAmountOut,\\n        uint256 _maxAmountIn\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitSwapPoolAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _poolAmountIn,\\n        uint256 _minAmountOut\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitSwapExternAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        uint256 _maxPoolAmountIn\\n    ) external returns (uint256 poolAmountIn);\\n\\n    function setSwappingFees(uint256 _swapFee) external;\\n\\n    /* Getters */\\n    function calcOutAndSpotGivenIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut\\n    ) external view returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function calcInAndSpotGivenOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut\\n    ) external view returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    /**\\n     * @notice Getter for the spot price of a pair\\n     * @param _pairID the id of the pair\\n     * @param _tokenIn the id of the tokens sent\\n     * @param _tokenOut the id of the tokens received\\n     * @return the sport price of the pair\\n     */\\n    function getSpotPrice(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenOut\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the address of the corresponding future vault\\n     * @return the address of the future vault\\n     */\\n    function getFutureAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the pt address\\n     * @return the pt address\\n     */\\n    function getPTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the address of the underlying token of the ibt\\n     * @return the address of the underlying token of the ibt\\n     */\\n    function getUnderlyingOfIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the fyt address\\n     * @return the fyt address\\n     */\\n    function getFYTAddress() external view returns (address);\\n\\n    function getIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the PT weight in the first pair (0)\\n     * @return the weight of the pt\\n     */\\n    function getPTWeightInPair() external view returns (uint256);\\n\\n    function getPairWithID(uint256 _pairID) external view returns (Pair memory);\\n\\n    function getLPTokenId(\\n        uint256 _ammId,\\n        uint256 _periodIndex,\\n        uint256 _pairID\\n    ) external pure returns (uint256);\\n\\n    function ammId() external view returns (uint64);\\n\\n    function currentPeriodIndex() external view returns (uint256);\\n\\n    function getTotalSupplyWithTokenId(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAMMState() external view returns (AMMGlobalState);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZapDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\npragma abicoder v2;\\n\\ninterface IZapDepositor {\\n    /**\\n     * @notice Deposit a defined underling in the depositor protocol\\n     * @param _token the token to deposit\\n     * @param _underlyingAmount the amount to deposit\\n     * @return the amount ibt generated and sent back to the caller\\n     */\\n    function depositInProtocol(address _token, uint256 _underlyingAmount)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Deposit a defined underling in the depositor protocol from the caller adderss\\n     * @param _token the token to deposit\\n     * @param _underlyingAmount the amount to deposit\\n     * @param _from the address from which the underlying need to be pulled\\n     * @return the amount ibt generated\\n     */\\n    function depositInProtocolFrom(\\n        address _token,\\n        uint256 _underlyingAmount,\\n        address _from\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"contracts/interfaces/IZapDepositor.sol\\\";\\nimport \\\"contracts/interfaces/IAMM.sol\\\";\\nimport \\\"contracts/interfaces/IAMMRegistry.sol\\\";\\n\\ninterface IDepositorRegistry {\\n    event ZapDepositorSet(address _amm, IZapDepositor _zapDepositor);\\n\\n    function ZapDepositorsPerAMM(address _address)\\n        external\\n        view\\n        returns (IZapDepositor);\\n\\n    function registry() external view returns (IAMMRegistry);\\n\\n    function setZapDepositor(address _amm, IZapDepositor _zapDepositor)\\n        external;\\n\\n    function isRegisteredZap(address _zapAddress) external view returns (bool);\\n\\n    function addZap(address _zapAddress) external returns (bool);\\n\\n    function removeZap(address _zapAddress) external returns (bool);\\n\\n    function zapLength() external view returns (uint256);\\n\\n    function zapAt(uint256 _index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"contracts/interfaces/IERC1155.sol\\\";\\n\\npragma solidity 0.8.11;\\n\\ninterface ILPToken is IERC1155 {\\n    function amms(uint64 _ammId) external view returns (address);\\n\\n    /**\\n     * @notice Getter for AMM id\\n     * @param _id the id of the LP Token\\n     * @return AMM id\\n     */\\n    function getAMMId(uint256 _id) external pure returns (uint64);\\n\\n    /**\\n     * @notice Getter for PeriodIndex\\n     * @param _id the id of the LP Token\\n     * @return period index\\n     */\\n    function getPeriodIndex(uint256 _id) external pure returns (uint64);\\n\\n    /**\\n     * @notice Getter for PairId\\n     * @param _id the index of the Pair\\n     * @return pair index\\n     */\\n    function getPairId(uint256 _id) external pure returns (uint32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IPT is IERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Returns the current balance of one user (without the claimable amount)\\n     * @param account the address of the account to check the balance of\\n     * @return the current pt balance of this address\\n     */\\n    function recordedBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current balance of one user including the pt that were not claimed yet\\n     * @param account the address of the account to check the balance of\\n     * @return the total pt balance of one address\\n     */\\n    function balanceOf(address account)\\n        external\\n        view\\n        override\\n        returns (uint256);\\n\\n    /**\\n     * @notice Getter for the future vault link to this pt\\n     * @return the address of the future vault\\n     */\\n    function futureVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFutureWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface IFutureWallet {\\n    /* Events */\\n\\n    event YieldRedeemed(address _user, uint256 _periodIndex);\\n    event WithdrawalsPaused();\\n    event WithdrawalsResumed();\\n\\n    /**\\n     * @notice register the yield of an expired period\\n     * @param _amount the amount of yield to be registered\\n     */\\n    function registerExpiredFuture(uint256 _amount) external;\\n\\n    /**\\n     * @notice redeem the yield of the underlying yield of the FYT held by the sender\\n     * @param _periodIndex the index of the period to redeem the yield from\\n     */\\n    function redeemYield(uint256 _periodIndex) external;\\n\\n    /**\\n     * @notice return the yield that could be redeemed by an address for a particular period\\n     * @param _periodIndex the index of the corresponding period\\n     * @param _user the FYT holder\\n     * @return the yield that could be redeemed by the token holder for this period\\n     */\\n    function getRedeemableYield(uint256 _periodIndex, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice getter for the address of the future corresponding to this future wallet\\n     * @return the address of the future\\n     */\\n    function getFutureVaultAddress() external view returns (address);\\n\\n    /**\\n     * @notice getter for the address of the IBT corresponding to this future wallet\\n     * @return the address of the IBT\\n     */\\n    function getIBTAddress() external view returns (address);\\n\\n    /* Rewards mecanisms*/\\n\\n    /**\\n     * @notice Harvest all rewards from the future wallet\\n     */\\n    function harvestRewards() external;\\n\\n    /**\\n     * @notice Transfer all the redeemable rewards to set defined recipient\\n     */\\n    function redeemAllWalletRewards() external;\\n\\n    /**\\n     * @notice Transfer the specified token reward balance tot the defined recipient\\n     * @param _rewardToken the reward token to redeem the balance of\\n     */\\n    function redeemWalletRewards(address _rewardToken) external;\\n\\n    /**\\n     * @notice Getter for the address of the rewards recipient\\n     * @return the address of the rewards recipient\\n     */\\n    function getRewardsRecipient() external view returns (address);\\n\\n    /**\\n     * @notice Setter for the address of the rewards recipient\\n     */\\n    function setRewardRecipient(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function MINTER_ROLE() external view returns (bytes32);\\n\\n    function mint(\\n        address to,\\n        uint64 _ammId,\\n        uint64 _periodIndex,\\n        uint32 _pairId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external returns (uint256 id);\\n\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"AllTokenApprovalUpdatedForAMM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"FYTApprovalUpdatedForAMM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAMMRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IZapDepositor\",\"name\":\"_zapDepositor\",\"type\":\"address\"}],\"name\":\"UnderlyingApprovalUpdatedForDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initialUnderlyinValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_underlyingEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_sellAllFYTs\",\"type\":\"bool\"}],\"name\":\"ZappedInScaledToUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPTAmount\",\"type\":\"uint256\"}],\"name\":\"ZappedInToPT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositorRegistry\",\"outputs\":[{\"internalType\":\"contract IDepositorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ibtAmountIn\",\"type\":\"uint256\"}],\"name\":\"getPTOutFromZapToPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ibtAmountIn\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingOutFromZapScaledToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IAMMRouterV1\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IDepositorRegistry\",\"name\":\"_depositorRegistry\",\"type\":\"address\"},{\"internalType\":\"contract ILPToken\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract ILPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAMMRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IAMMRouterV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"updateAllTokensApprovalForAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"updateFYTApprovalForAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"updateUnderlyingApprovalForDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_referralRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sellAllFYTs\",\"type\":\"bool\"}],\"name\":\"zapInScaledToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_referralRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sellAllFYTs\",\"type\":\"bool\"}],\"name\":\"zapInScaledToUnderlyingWithIBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_referralRecipient\",\"type\":\"address\"}],\"name\":\"zapInToPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_referralRecipient\",\"type\":\"address\"}],\"name\":\"zapInToPTWithIBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "APWineZap", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}