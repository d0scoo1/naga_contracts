{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/proxies/YieldsterVaultProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\nimport \\\"./YieldsterVaultProxy.sol\\\";\\r\\nimport \\\"./IProxyCreationCallback.sol\\\";\\r\\nimport \\\"../interfaces/IAPContract.sol\\\";\\r\\n\\r\\ncontract YieldsterVaultProxyFactory {\\r\\n    address private mastercopy;\\r\\n    address private APContract;\\r\\n    address private owner;\\r\\n\\r\\n    event ProxyCreation(YieldsterVaultProxy proxy);\\r\\n\\r\\n    constructor(address _mastercopy, address _APContract)  {\\r\\n        mastercopy = _mastercopy;\\r\\n        APContract = _APContract;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setMasterCopy(address _mastercopy) public {\\r\\n        require(msg.sender == owner, \\\"Not Authorized\\\");\\r\\n        mastercopy = _mastercopy;\\r\\n    }\\r\\n\\r\\n    function setAPContract(address _APContract) public {\\r\\n        require(msg.sender == owner, \\\"Not Authorized\\\");\\r\\n        APContract = _APContract;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\r\\n    /// @param data Payload for message call sent to new proxy contract.\\r\\n    function createProxy(bytes memory data)\\r\\n        public\\r\\n        returns (address)\\r\\n    {\\r\\n       YieldsterVaultProxy proxy = new YieldsterVaultProxy(mastercopy);\\r\\n        if (data.length > 0) \\r\\n            // solium-disable-next-line security/no-inline-assembly\\r\\n            assembly {\\r\\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0),0) {\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n            }\\r\\n        \\r\\n        IAPContract(APContract).setVaultStatus(address(proxy));\\r\\n        emit ProxyCreation(proxy);\\r\\n        return address(proxy);\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\\r\\n    function proxyRuntimeCode() public pure returns (bytes memory) {\\r\\n        return type(YieldsterVaultProxy).runtimeCode;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\r\\n    function proxyCreationCode() public pure returns (bytes memory) {\\r\\n        return type(YieldsterVaultProxy).creationCode;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/proxies/YieldsterVaultProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\\r\\n/// @author Richard Meissner - <richard@gnosis.io>\\r\\ninterface IProxy {\\r\\n    function masterCopy() external view returns (address);\\r\\n}\\r\\n\\r\\n/// @title YieldsterVaultProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\\r\\n/// @author Stefan George - <stefan@gnosis.io>\\r\\n/// @author Richard Meissner - <richard@gnosis.io>\\r\\ncontract YieldsterVaultProxy {\\r\\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\\r\\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\\r\\n    address internal masterCopy;\\r\\n\\r\\n    /// @dev Constructor function sets address of master copy contract.\\r\\n    /// @param _masterCopy Master copy address.\\r\\n    constructor(address _masterCopy)  {\\r\\n        require(\\r\\n            _masterCopy != address(0),\\r\\n            \\\"Invalid master copy address provided\\\"\\r\\n        );\\r\\n        masterCopy = _masterCopy;\\r\\n    }\\r\\n\\r\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\r\\n    fallback() external payable {\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            let _masterCopy := and(\\r\\n                sload(0),\\r\\n                0xffffffffffffffffffffffffffffffffffffffff\\r\\n            )\\r\\n            // 0xa619486e == keccak(\\\"masterCopy()\\\"). The value is right padded to 32-bytes with 0s\\r\\n            if eq(\\r\\n                calldataload(0),\\r\\n                0xa619486e00000000000000000000000000000000000000000000000000000000\\r\\n            ) {\\r\\n                mstore(0, _masterCopy)\\r\\n                return(0, 0x20)\\r\\n            }\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let success := delegatecall(\\r\\n                gas(),\\r\\n                _masterCopy,\\r\\n                0,\\r\\n                calldatasize(),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            if eq(success, 0) {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            return(0, returndatasize())\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/proxies/IProxyCreationCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\nimport \\\"./YieldsterVaultProxy.sol\\\";\\r\\n\\r\\ninterface IProxyCreationCallback {\\r\\n    function proxyCreated(\\r\\n        YieldsterVaultProxy proxy,\\r\\n        address _mastercopy,\\r\\n        bytes calldata initializer,\\r\\n        uint256 saltNonce\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAPContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IAPContract {\\r\\n    \\r\\n\\r\\n    function getUSDPrice(address) external view returns (uint256);\\r\\n    function stringUtils() external view returns (address);\\r\\n    function yieldsterGOD() external view returns (address);\\r\\n    function emergencyVault() external view returns (address);\\r\\n    function whitelistModule() external view returns (address);\\r\\n    function addVault(address,uint256[] calldata) external;\\r\\n    function setVaultSlippage(uint256) external;\\r\\n    function setVaultAssets(address[] calldata,address[] calldata,address[] calldata,address[] calldata) external;\\r\\n    function changeVaultAdmin(address _vaultAdmin) external;\\r\\n    function yieldsterDAO() external view returns (address);\\r\\n    function exchangeRegistry() external view returns (address);\\r\\n    function getVaultSlippage() external view returns (uint256);\\r\\n    function _isVaultAsset(address) external view returns (bool);\\r\\n    function yieldsterTreasury() external view returns (address);\\r\\n    function setVaultStatus(address) external;\\r\\n    function setVaultSmartStrategy(address, uint256) external;\\r\\n    function getWithdrawStrategy() external returns (address);\\r\\n    function getDepositStrategy() external returns (address);\\r\\n    function isDepositAsset(address) external view returns (bool);\\r\\n    function isWithdrawalAsset(address) external view returns (bool);\\r\\n    function getVaultManagementFee() external returns (address[] memory);\\r\\n    function safeMinter() external returns (address);\\r\\n    function safeUtils() external returns (address);\\r\\n    function getStrategyFromMinter(address) external view returns (address);\\r\\n    function sdkContract() external returns (address);\\r\\n    function getWETH()external view returns(address);\\r\\n    function calculateSlippage(address ,address, uint256, uint256)external view returns(uint256);\\r\\n    function vaultsCount(address) external view returns(uint256);\\r\\n    function getPlatformFeeStorage() external view returns(address);\\r\\n    function checkWalletAddress(address _walletAddress) external view returns(bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastercopy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_APContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract YieldsterVaultProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRuntimeCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_APContract\",\"type\":\"address\"}],\"name\":\"setAPContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastercopy\",\"type\":\"address\"}],\"name\":\"setMasterCopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YieldsterVaultProxyFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000037b13dd88508a20601573bd97e74279ff38191f0000000000000000000000003f618d70d025dee233d4d73b61532a69244b524a", "EVMVersion": "petersburg", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}