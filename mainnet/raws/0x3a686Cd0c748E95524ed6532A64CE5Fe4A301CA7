{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12 >=0.6.12 <0.7.0;\npragma experimental ABIEncoderV2;\n\n////// lib/dss-exec-lib/src/CollateralOpts.sol\n/* pragma solidity ^0.6.12; */\n\nstruct CollateralOpts {\n    bytes32 ilk;\n    address gem;\n    address join;\n    address clip;\n    address calc;\n    address pip;\n    bool    isLiquidatable;\n    bool    isOSM;\n    bool    whitelistOSM;\n    uint256 ilkDebtCeiling;\n    uint256 minVaultAmount;\n    uint256 maxLiquidationAmount;\n    uint256 liquidationPenalty;\n    uint256 ilkStabilityFee;\n    uint256 startingPriceFactor;\n    uint256 breakerTolerance;\n    uint256 auctionDuration;\n    uint256 permittedDrop;\n    uint256 liquidationRatio;\n    uint256 kprFlatReward;\n    uint256 kprPctReward;\n}\n\n////// lib/dss-exec-lib/src/DssExecLib.sol\n//\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.12; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface Initializable {\n    function init(bytes32) external;\n}\n\ninterface Authorizable {\n    function rely(address) external;\n    function deny(address) external;\n}\n\ninterface Fileable {\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n}\n\ninterface Drippable {\n    function drip() external returns (uint256);\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface Pricing {\n    function poke(bytes32) external;\n}\n\ninterface ERC20 {\n    function decimals() external returns (uint8);\n}\n\ninterface DssVat {\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n    function Line() external view returns (uint256);\n    function suck(address, address, uint) external;\n}\n\ninterface ClipLike {\n    function vat() external returns (address);\n    function dog() external returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function ilk() external returns (bytes32);\n}\n\ninterface DogLike {\n    function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);\n}\n\ninterface JoinLike {\n    function vat() external returns (address);\n    function ilk() external returns (bytes32);\n    function gem() external returns (address);\n    function dec() external returns (uint256);\n    function join(address, uint) external;\n    function exit(address, uint) external;\n}\n\n// Includes Median and OSM functions\ninterface OracleLike_2 {\n    function src() external view returns (address);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n}\n\ninterface MomLike {\n    function setOsm(bytes32, address) external;\n    function setPriceTolerance(address, uint256) external;\n}\n\ninterface RegistryLike {\n    function add(address) external;\n    function xlip(bytes32) external view returns (address);\n}\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogLike {\n    function setVersion(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function getAddress(bytes32) external view returns (address);\n    function setAddress(bytes32, address) external;\n    function removeAddress(bytes32) external;\n}\n\ninterface IAMLike {\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\ninterface LerpFactoryLike {\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n}\n\ninterface LerpLike {\n    function tick() external returns (uint256);\n}\n\n\nlibrary DssExecLib {\n\n    /* WARNING\n\nThe following library code acts as an interface to the actual DssExecLib\nlibrary, which can be found in its own deployed contract. Only trust the actual\nlibrary's implementation.\n\n    */\n\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    uint256 constant internal WAD      = 10 ** 18;\n    uint256 constant internal RAY      = 10 ** 27;\n    uint256 constant internal RAD      = 10 ** 45;\n    uint256 constant internal THOUSAND = 10 ** 3;\n    uint256 constant internal MILLION  = 10 ** 6;\n    uint256 constant internal BPS_ONE_PCT             = 100;\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\n    function dog()        public view returns (address) { return getChangelogAddress(\"MCD_DOG\"); }\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\n    function esm()        public view returns (address) { return getChangelogAddress(\"MCD_ESM\"); }\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\n    function spotter()    public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\n    function osmMom()     public view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\n    function clipperMom() public view returns (address) { return getChangelogAddress(\"CLIPPER_MOM\"); }\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\n    function setChangelogAddress(bytes32 _key, address _val) public {}\n    function setChangelogVersion(string memory _version) public {}\n    function authorize(address _base, address _ward) public {}\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\n    function updateCollateralPrice(bytes32 _ilk) public {}\n    function setContract(address _base, bytes32 _what, address _addr) public {}\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {}\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\n    function increaseGlobalDebtCeiling(uint256 _amount) public {}\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {}\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {}\n    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {}\n    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {}\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setAuctionTimeBeforeReset(bytes32 _ilk, uint256 _duration) public {}\n    function setAuctionPermittedDrop(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setKeeperIncentivePercent(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setKeeperIncentiveFlatRate(bytes32 _ilk, uint256 _amount) public {}\n    function setLiquidationBreakerPriceTolerance(address _clip, uint256 _pct_bps) public {}\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {}\n    function setStairstepExponentialDecrease(address _calc, uint256 _duration, uint256 _pct_bps) public {}\n    function whitelistOracleMedians(address _oracle) public {}\n    function addReaderToWhitelist(address _oracle, address _reader) public {}\n    function addReaderToWhitelistCall(address _oracle, address _reader) public {}\n    function allowOSMFreeze(address _osm, bytes32 _ilk) public {}\n    function addCollateralBase(\n        bytes32 _ilk,\n        address _gem,\n        address _join,\n        address _clip,\n        address _calc,\n        address _pip\n    ) public {}\n    function addNewCollateral(CollateralOpts memory co) public {}\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n}\n\n////// lib/dss-exec-lib/src/DssAction.sol\n//\n// DssAction.sol -- DSS Executive Spell Actions\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface OracleLike_1 {\n    function src() external view returns (address);\n}\n\nabstract contract DssAction {\n\n    using DssExecLib for *;\n\n    // Modifier used to limit execution time when office hours is enabled\n    modifier limited {\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\n        _;\n    }\n\n    // Office Hours defaults to true by default.\n    //   To disable office hours, override this function and\n    //    return false in the inherited action.\n    function officeHours() public virtual returns (bool) {\n        return true;\n    }\n\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\n    function execute() external limited {\n        actions();\n    }\n\n    // DssAction developer must override `actions()` and place all actions to be called inside.\n    //   The DssExec function will call this subject to the officeHours limiter\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n    function actions() public virtual;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external virtual view returns (string memory);\n\n    // Returns the next available cast time\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n        require(eta <= uint40(-1));\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n    }\n}\n\n////// lib/dss-exec-lib/src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n    function description() external view returns (string memory);\n    function nextCastTime(uint256) external view returns (uint256);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        return SpellAction(action).nextCastTime(eta);\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// src/DssSpell.sol\n//\n// Copyright (C) 2021 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import \"dss-exec-lib/DssExec.sol\"; */\n/* import \"dss-exec-lib/DssAction.sol\"; */\n\ncontract DssSpellAction is DssAction {\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/2dfe2a94162345e448c0353ec0e522038572366a/governance/votes/Executive%20vote%20-%20December%203%2C%202021.md -q -O - 2>/dev/null)\"\n    string public constant override description =\n        \"2021-12-03 MakerDAO Executive Spell | Hash: 0x9068bf87d0ec441f57ff92e2544a3df16d42a481b3e94ec2c37a443031833b84\";\n\n    // Many of the settings that change weekly rely on the rate accumulator\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n    // To check this yourself, use the following rate calculation (example 8%):\n    //\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n    //\n    // A table of rates can be found at\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n    //\n\n    // --- Rates ---\n    uint256 constant ZERO_ONE_PCT_RATE       = 1000000000031693947650284507;\n    uint256 constant ONE_PCT_RATE            = 1000000000315522921573372069;\n    uint256 constant TWO_PCT_RATE            = 1000000000627937192491029810;\n    uint256 constant TWO_FIVE_PCT_RATE       = 1000000000782997609082909351;\n    uint256 constant TWO_SEVEN_FIVE_PCT_RATE = 1000000000860244400048238898;\n    uint256 constant THREE_PCT_RATE          = 1000000000937303470807876289;\n    uint256 constant FOUR_PCT_RATE           = 1000000001243680656318820312;\n    uint256 constant SIX_PCT_RATE            = 1000000001847694957439350562;\n    uint256 constant SIX_FIVE_PCT_RATE       = 1000000001996917783620820123;\n\n    // --- Math ---\n    uint256 constant MILLION = 10 ** 6;\n    uint256 constant BILLION = 10 ** 9;\n\n    // --- GUNIV3DAIUSDC2-A ---\n    address constant GUNIV3DAIUSDC2                 = 0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e;\n    address constant MCD_JOIN_GUNIV3DAIUSDC2_A      = 0xA7e4dDde3cBcEf122851A7C8F7A55f23c0Daf335;\n    address constant MCD_CLIP_GUNIV3DAIUSDC2_A      = 0xB55da3d3100C4eBF9De755b6DdC24BF209f6cc06;\n    address constant MCD_CLIP_CALC_GUNIV3DAIUSDC2_A = 0xef051Ca2A2d809ba47ee0FC8caaEd06E3D832225;\n    address constant PIP_GUNIV3DAIUSDC2             = 0xcCBa43231aC6eceBd1278B90c3a44711a00F4e93;\n\n    // --- Wallets ---\n    address constant COM_WALLET               = 0x1eE3ECa7aEF17D1e74eD7C447CcBA61aC76aDbA9;\n    address constant FLIPFLOPFLAP_WALLET      = 0x688d508f3a6B0a377e266405A1583B3316f9A2B3;\n    address constant FEEDBLACKLOOPS_WALLET    = 0x80882f2A36d49fC46C3c654F7f9cB9a2Bf0423e1;\n    address constant ULTRASCHUPPI_WALLET      = 0x89C5d54C979f682F40b73a9FC39F338C88B434c6;\n    address constant FIELDTECHNOLOGIES_WALLET = 0x0988E41C02915Fe1beFA78c556f946E5F20ffBD3;\n\n    function actions() public override {\n\n        // ----------------------------- Collateral onboarding -----------------------------\n        //  Add GUNIV3DAIUSDC2-A as a new Vault Type\n        //  https://vote.makerdao.com/polling/QmSkHE8T?network=mainnet#poll-detail\n        DssExecLib.addNewCollateral(\n            CollateralOpts({\n                ilk:                   \"GUNIV3DAIUSDC2-A\",\n                gem:                   GUNIV3DAIUSDC2,\n                join:                  MCD_JOIN_GUNIV3DAIUSDC2_A,\n                clip:                  MCD_CLIP_GUNIV3DAIUSDC2_A,\n                calc:                  MCD_CLIP_CALC_GUNIV3DAIUSDC2_A,\n                pip:                   PIP_GUNIV3DAIUSDC2,\n                isLiquidatable:        false,\n                isOSM:                 true,\n                whitelistOSM:          true,\n                ilkDebtCeiling:        10 * MILLION,\n                minVaultAmount:        15_000,\n                maxLiquidationAmount:  5 * MILLION,\n                liquidationPenalty:    1300,\n                ilkStabilityFee:       ONE_PCT_RATE,\n                startingPriceFactor:   10500,\n                breakerTolerance:      9500,\n                auctionDuration:       220 minutes,\n                permittedDrop:         9000,\n                liquidationRatio:      10500,\n                kprFlatReward:         300,\n                kprPctReward:          10\n            })\n        );\n\n        DssExecLib.setStairstepExponentialDecrease(MCD_CLIP_CALC_GUNIV3DAIUSDC2_A, 120 seconds, 9990);\n        DssExecLib.setIlkAutoLineParameters(\"GUNIV3DAIUSDC2-A\", 10 * MILLION, 10 * MILLION, 8 hours);\n\n        // ----------------------------- Rates updates -----------------------------\n        // https://vote.makerdao.com/polling/QmNqCZGa?network=mainnet\n        // Increase the ETH-A Stability Fee from 2.5% to 2.75%\n        DssExecLib.setIlkStabilityFee(\"ETH-A\", TWO_SEVEN_FIVE_PCT_RATE, true);\n\n        // Increase the ETH-B Stability Fee from 6.0% to 6.5%\n        DssExecLib.setIlkStabilityFee(\"ETH-B\", SIX_FIVE_PCT_RATE, true);\n\n        // Increase the LINK-A Stability Fee from 1.5% to 2.5%\n        DssExecLib.setIlkStabilityFee(\"LINK-A\", TWO_FIVE_PCT_RATE, true);\n\n        // Increase the MANA-A Stability Fee from 3.0% to 6.0%\n        DssExecLib.setIlkStabilityFee(\"MANA-A\", SIX_PCT_RATE, true);\n\n        // Increase the UNI-A Stability Fee from 1.0% to 3.0%\n        DssExecLib.setIlkStabilityFee(\"UNI-A\", THREE_PCT_RATE, true);\n\n        // Increase the GUSD-A Stability Fee from 0.0% to 1.0%\n        DssExecLib.setIlkStabilityFee(\"GUSD-A\", ONE_PCT_RATE, true);\n\n        // Increase the UNIV2DAIETH-A Stability Fee from 1.5% to 2.0%\n        DssExecLib.setIlkStabilityFee(\"UNIV2DAIETH-A\", TWO_PCT_RATE, true);\n\n        // Increase the UNIV2WBTCETH-A Stability Fee from 2.5% to 3.0%\n        DssExecLib.setIlkStabilityFee(\"UNIV2WBTCETH-A\", THREE_PCT_RATE, true);\n\n        // Increase the UNIV2USDCETH-A Stability Fee from 2.0% to 2.5%\n        DssExecLib.setIlkStabilityFee(\"UNIV2USDCETH-A\", TWO_FIVE_PCT_RATE, true);\n\n        // Increase the UNIV2UNIETH-A Stability Fee from 2.0% to 4.0%\n        DssExecLib.setIlkStabilityFee(\"UNIV2UNIETH-A\", FOUR_PCT_RATE, true);\n\n        // Decrease the GUNIV3DAIUSDC1-A Stability Fee from 0.5% to 0.1%\n        DssExecLib.setIlkStabilityFee(\"GUNIV3DAIUSDC1-A\", ZERO_ONE_PCT_RATE, true);\n\n        // ----------------------------- Debt Ceiling updates -----------------------------\n        // Increase the WBTC-A Maximum Debt Ceiling (line) from 1.5 billion DAI to 2 billion DAI\n        // Increase the WBTC-A Target Available Debt (gap) from 60 million DAI to 80 million DAI\n        // https://vote.makerdao.com/polling/QmNqCZGa?network=mainnet\n        DssExecLib.setIlkAutoLineParameters(\"WBTC-A\", 2 * BILLION, 80 * MILLION, 6 hours);\n\n        // Increase the Dust Parameter from 30,000 DAI to 40,000 DAI for the ETH-B\n        // https://vote.makerdao.com/polling/QmZXnn16?network=mainnet#poll-detail\n        DssExecLib.setIlkMinVaultAmount(\"ETH-B\", 40_000);\n\n        // Increase the Dust Parameter from 10,000 DAI to 15,000 DAI for all vault-types excluding ETH-B and ETH-C\n        // https://vote.makerdao.com/polling/QmUYLPcr?network=mainnet#poll-detail\n        DssExecLib.setIlkMinVaultAmount(\"ETH-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"USDC-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"WBTC-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"TUSD-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"MANA-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"PAXUSD-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"LINK-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"YFI-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"GUSD-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"UNI-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"RENBTC-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"UNIV2DAIETH-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"UNIV2WBTCETH-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"UNIV2USDCETH-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"UNIV2DAIUSDC-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"UNIV2UNIETH-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"UNIV2WBTCDAI-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"MATIC-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"GUNIV3DAIUSDC1-A\", 15_000);\n        DssExecLib.setIlkMinVaultAmount(\"WSTETH-A\", 15_000);        \n        \n\n        // ----------------------------- Budget distributions -----------------------------\n\n        // Core Unit Budget Distributions\n        DssExecLib.sendPaymentFromSurplusBuffer(COM_WALLET, 27_058);\n        // Delegate Compensation Payments\n        DssExecLib.sendPaymentFromSurplusBuffer(FLIPFLOPFLAP_WALLET, 12_000);\n        DssExecLib.sendPaymentFromSurplusBuffer(FEEDBLACKLOOPS_WALLET, 12_000);\n        DssExecLib.sendPaymentFromSurplusBuffer(ULTRASCHUPPI_WALLET, 8_144);\n        DssExecLib.sendPaymentFromSurplusBuffer(FIELDTECHNOLOGIES_WALLET, 3_690);\n\n\n        // Changelog\n        DssExecLib.setChangelogAddress(\"GUNIV3DAIUSDC2\", GUNIV3DAIUSDC2);\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_GUNIV3DAIUSDC2_A\", MCD_JOIN_GUNIV3DAIUSDC2_A);\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_GUNIV3DAIUSDC2_A\", MCD_CLIP_GUNIV3DAIUSDC2_A);\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_CALC_GUNIV3DAIUSDC2_A\", MCD_CLIP_CALC_GUNIV3DAIUSDC2_A);\n        DssExecLib.setChangelogAddress(\"PIP_GUNIV3DAIUSDC2\", PIP_GUNIV3DAIUSDC2);\n\n        DssExecLib.setChangelogVersion(\"1.9.12\");\n    }\n}\n\ncontract DssSpell is DssExec {\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\n}\n\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:fd88cee74f7d78697775abdae53f9da1559728e4", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}