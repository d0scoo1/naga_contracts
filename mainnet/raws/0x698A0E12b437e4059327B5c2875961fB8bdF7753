{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OneWar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {IOneWar} from \\\"./interfaces/IOneWar.sol\\\";\\nimport {OneWarGold} from \\\"./OneWarGold.sol\\\";\\nimport {OneWarCouncil} from \\\"./OneWarCouncil.sol\\\";\\nimport {OneWarModifier} from \\\"./OneWarModifier.sol\\\";\\nimport {OneWarDescriptor} from \\\"./OneWarDescriptor.sol\\\";\\nimport {Seeder} from \\\"./libs/Seeder.sol\\\";\\nimport {Math} from \\\"./libs/Math.sol\\\";\\n\\n/**\\n * Voyagers of the metaverse are on the lookout for land.\\n * They scout for Settlements that are rich with $GOLD treasure\\n * and filled with miners who will work hard to extract it,\\n * one block at a time. But danger awaits them.\\n * War is about to strike out. They must be weary\\n * of other voyagers, thirsty for glory,\\n * who desire to conquer their Settlements and\\n * steal their precious $GOLD.\\n *\\n * Once the war begins, so does $GOLD treasure mining.\\n * As soon as the voyagers have redeemed their mined $GOLD,\\n * they can use it to build an army. Towers that defend\\n * their Settlement's walls; catapults that destroy enemy\\n * towers; and soldiers who can be used in both defense\\n * and offense.\\n *\\n * To settle on their scouted land, voyagers pay a fee to\\n * the OneWar Treasury. In return, they can become members\\n * of the council that controls the Treasury, should they\\n * choose to accept the honor.\\n *\\n * Upon settling, a voyager's new Settlement is temporarily\\n * protected by a sacred sanctuary period, preventing it\\n * from falling under attack. It is the duty of\\n * the voyager and any appointed co-rulers to defend it,\\n * thereafter.\\n *\\n * Let the war for glory begin!\\n */\\n\\ncontract OneWar is IOneWar, OneWarModifier, ERC721 {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    Counters.Counter public totalSupply;\\n    OneWarGold public gold;\\n    OneWarCouncil public council;\\n    uint256 public warBegins;\\n    bool public override hasWarCountdownBegun;\\n\\n    mapping(address => uint256) public scoutingEnds;\\n    mapping(uint256 => Settlement) public settlements;\\n\\n    uint256 public constant MAX_SUPPLY = 10_000;\\n\\n    uint256 public constant SCOUTING_COST = 1 * 10**17;\\n    uint256 public constant SCOUTING_DURATION = 4;\\n    uint256 public constant MAX_SCOUTING_DURATION = 255;\\n\\n    uint256 public constant AVERAGE_SANCTUARY = 3000;\\n    uint256 public constant AVERAGE_TREASURE = 5000;\\n    uint256 public constant AVERAGE_MINERS = 100;\\n\\n    uint256 public constant MINING_RATE = 4 * 10**14;\\n\\n    uint32 public constant SOLDIER_COST = 1;\\n    uint32 public constant TOWER_COST = 6;\\n    uint32 public constant CATAPULT_COST = 4;\\n\\n    uint32 public constant SOLDIER_STRENGTH = 1;\\n    uint32 public constant TOWER_STRENGTH = 20;\\n    uint32 public constant CATAPULT_STRENGTH = 5;\\n\\n    uint8 public constant GOLD_DECIMALS = 18;\\n    uint256 public constant GOLD_DENOMINATION = 10**GOLD_DECIMALS;\\n\\n    uint256 public constant MOTTO_CHANGE_COST = 10 * GOLD_DENOMINATION;\\n    uint8 public constant MOTTO_CHARACTER_LIMIT = 50;\\n\\n    uint32 public constant PREWAR_DURATION = 20_000;\\n\\n    modifier whenWarHasBegun() {\\n        require(block.number >= warBegins, \\\"war has not begun yet\\\");\\n        _;\\n    }\\n\\n    modifier isCallerRulerOrCoruler(uint256 _settlement) {\\n        require(_isApprovedOrOwner(msg.sender, _settlement), \\\"caller is not settlement ruler or co-ruler\\\");\\n        _;\\n    }\\n\\n    modifier isLocationSettled(uint256 _settlement) {\\n        require(_exists(_settlement), \\\"location is not settled\\\");\\n        _;\\n    }\\n\\n    modifier whenWarCountdownHasBegun() {\\n        require(hasWarCountdownBegun, \\\"war countdown has not begun\\\");\\n        _;\\n    }\\n\\n    constructor(address payable _treasury) ERC721(\\\"OneWar Settlement\\\", \\\"OWS\\\") OneWarModifier(_treasury) {\\n        warBegins = 2**256 - 1;\\n        gold = new OneWarGold();\\n        descriptor = new OneWarDescriptor(this);\\n        council = new OneWarCouncil(this);\\n    }\\n\\n    /**\\n     * Prior to settling, voyagers make an offering\\n     * to the Treasury. Scouts are subsequently\\n     * dispatched to seek out undiscovered land.\\n     * Scouting lasts 4 blocks and can be initiated before\\n     * the war has begun. If all 10,000 Settlements have been\\n     * occupied, voyagers will be unable to settle.\\n     */\\n    function scout() public payable override {\\n        require(msg.value >= SCOUTING_COST, \\\"inadequate offering\\\");\\n        scoutingEnds[msg.sender] = block.number + SCOUTING_DURATION;\\n        emit Scout(msg.sender, scoutingEnds[msg.sender]);\\n    }\\n\\n    /**\\n     * Between 4 and 256 blocks after scouting has been initiated,\\n     * a voyager can settle into the land that was discovered by\\n     * the commissioned scouts. It is during this ritual\\n     * that the voyager gets crowned as the Settlement's ruler,\\n     * granted full authority over the new-found land.\\n     */\\n    function settle() public override {\\n        require(scoutingEnds[msg.sender] != 0, \\\"location has not been scouted\\\");\\n        require(block.number > scoutingEnds[msg.sender], \\\"insufficient blocks since scouting began\\\");\\n        require(\\n            block.number - scoutingEnds[msg.sender] <= MAX_SCOUTING_DURATION,\\n            \\\"too many blocks since scouting began\\\"\\n        );\\n        _tokenIds.increment();\\n        uint256 settlementId = _tokenIds.current();\\n        require(settlementId <= MAX_SUPPLY, \\\"all land has been settled\\\");\\n\\n        uint256 seed = uint256(keccak256(abi.encodePacked(msg.sender, blockhash(scoutingEnds[msg.sender]))));\\n        settlements[settlementId].genesis = block.number;\\n        settlements[settlementId].seed = seed;\\n        settlements[settlementId].founder = msg.sender;\\n        settlements[settlementId].glory = 0;\\n        settlements[settlementId].sanctuary = Seeder.generateNumber(\\n            AVERAGE_SANCTUARY,\\n            Seeder.pluck(\\\"sanctuary\\\", seed)\\n        );\\n        settlements[settlementId].treasure =\\n            Seeder.generateNumber(AVERAGE_TREASURE, Seeder.pluck(\\\"treasure\\\", seed)) *\\n            GOLD_DENOMINATION;\\n        settlements[settlementId].miners = Seeder.generateNumber(AVERAGE_MINERS, Seeder.pluck(\\\"miners\\\", seed));\\n        _mint(msg.sender, settlementId);\\n        totalSupply.increment();\\n        scoutingEnds[msg.sender] = 0;\\n\\n        emit Settle(msg.sender, settlementId);\\n    }\\n\\n    /**\\n     * Rulers are given the right to even burn their Settlement\\n     * to the ground.\\n     */\\n    function burn(uint256 _settlement) public override isCallerRulerOrCoruler(_settlement) {\\n        _burn(_settlement);\\n        totalSupply.decrement();\\n        emit Burn(_settlement);\\n    }\\n\\n    /**\\n     * It is up to the Treasury to announce when\\n     * the war is about to begin.\\n     */\\n    function commenceWarCountdown() public override onlyTreasury {\\n        require(!hasWarCountdownBegun, \\\"war countdown has already begun\\\");\\n        hasWarCountdownBegun = true;\\n        warBegins = block.number + PREWAR_DURATION;\\n    }\\n\\n    /**\\n     * As soon as the war begins, miners get to work.\\n     * As they constantly dig for more $GOLD, their\\n     * progress can be monitored here.\\n     */\\n    function redeemableGold(uint256 _settlement) public view override isLocationSettled(_settlement) returns (uint256) {\\n        uint256 miningBegins = Math.max(settlements[_settlement].genesis, warBegins);\\n        if (block.number < miningBegins) {\\n            return 0;\\n        }\\n\\n        uint256 settlementTotal = uint256(block.number - miningBegins) * settlements[_settlement].miners * MINING_RATE;\\n        if (settlements[_settlement].treasure < settlementTotal) {\\n            settlementTotal = settlements[_settlement].treasure;\\n        }\\n\\n        return settlementTotal - settlements[_settlement].goldRedeemed;\\n    }\\n\\n    /**\\n     * Rulers can redeem their mined $GOLD at any point.\\n     * It is only once they have redeemed their $GOLD that\\n     * they can spend it on their Settlement's operations.\\n     */\\n    function redeemGold(uint256[] calldata _settlements) public override whenWarHasBegun {\\n        uint256 totalAmount = 0;\\n\\n        for (uint16 i = 0; i < _settlements.length; ++i) {\\n            uint256 locAmount = redeemableGold(_settlements[i]);\\n            settlements[_settlements[i]].goldRedeemed += locAmount;\\n            totalAmount += locAmount;\\n            require(_isApprovedOrOwner(msg.sender, _settlements[i]), \\\"caller is not settlement ruler or co-ruler\\\");\\n        }\\n\\n        gold.mint(msg.sender, totalAmount);\\n    }\\n\\n    /**\\n     * $GOLD can be consumed to create army units.\\n     * Their costs can be calculated here.\\n     */\\n    function armyCost(\\n        uint32 _soldiers,\\n        uint32 _towers,\\n        uint32 _catapults\\n    ) public pure override returns (uint256) {\\n        return\\n            uint256(SOLDIER_COST * _soldiers + TOWER_COST * _towers + CATAPULT_COST * _catapults) * GOLD_DENOMINATION;\\n    }\\n\\n    /**\\n     * Any portion of a ruler's $GOLD can be consumed\\n     * to build an army for their Settlement.\\n     */\\n    function buildArmy(\\n        uint256 _settlement,\\n        uint32 _soldiers,\\n        uint32 _towers,\\n        uint32 _catapults\\n    ) public override whenWarHasBegun {\\n        gold.burn(msg.sender, armyCost(_soldiers, _towers, _catapults));\\n        settlements[_settlement].soldiers += _soldiers;\\n        settlements[_settlement].towers += _towers;\\n        settlements[_settlement].catapults += _catapults;\\n\\n        emit BuildArmy(_settlement, _soldiers, _towers, _catapults);\\n    }\\n\\n    /**\\n     * Rulers can relocate army units to other Settlements that\\n     * they may or may not control.\\n     */\\n    function moveArmy(\\n        uint256 _sourceSettlement,\\n        uint256 _destinationSettlement,\\n        uint32 _soldiers,\\n        uint32 _catapults\\n    ) public override whenWarHasBegun isCallerRulerOrCoruler(_sourceSettlement) {\\n        require(\\n            settlements[_sourceSettlement].soldiers >= _soldiers &&\\n                settlements[_sourceSettlement].catapults >= _catapults,\\n            \\\"insufficient army units\\\"\\n        );\\n\\n        settlements[_sourceSettlement].soldiers -= _soldiers;\\n        settlements[_destinationSettlement].soldiers += _soldiers;\\n        settlements[_sourceSettlement].catapults -= _catapults;\\n        settlements[_destinationSettlement].catapults += _catapults;\\n\\n        emit MoveArmy(_sourceSettlement, _destinationSettlement, _soldiers, _catapults);\\n    }\\n\\n    /**\\n     * Rulers can dispatch multiple army units to multiple\\n     * Settlements, at once.\\n     */\\n    function multiMoveArmy(ArmyMove[] calldata _moves) public override whenWarHasBegun {\\n        for (uint256 i = 0; i < _moves.length; ++i) {\\n            moveArmy(_moves[i].source, _moves[i].destination, _moves[i].soldiers, _moves[i].catapults);\\n        }\\n    }\\n\\n    /**\\n     * A Settlement's catapults and soldiers can be used\\n     * to attack another Settlement. If the attacking forces\\n     * overwhelm the defensive forces, then the Settlement under\\n     * attack is successfully conquered and\\n     * authority is transferred to the conqueror.\\n     *\\n     * Attacking catapults first attempt to take down the\\n     * defending towers. Subsequently, the attacking soldiers\\n     * target any remaining towers and lastly any defending\\n     * soldiers.\\n     *\\n     * A successful offensive attack must therefore be\\n     * orchestrated with enough catapults and soldiers to\\n     * annihilate all the defensive towers and soldiers.\\n     */\\n    function attack(\\n        uint256 _attackingSettlement,\\n        uint256 _defendingSettlement,\\n        uint32 _soldiers,\\n        uint32 _catapults\\n    )\\n        public\\n        override\\n        whenWarHasBegun\\n        isCallerRulerOrCoruler(_attackingSettlement)\\n        isLocationSettled(_defendingSettlement)\\n    {\\n        require(\\n            settlements[_attackingSettlement].soldiers >= _soldiers &&\\n                settlements[_attackingSettlement].catapults >= _catapults,\\n            \\\"insufficient attacking army units\\\"\\n        );\\n        require(\\n            Math.max(settlements[_defendingSettlement].genesis, warBegins) +\\n                settlements[_defendingSettlement].sanctuary <\\n                block.number,\\n            \\\"defending settlement is in sanctuary period\\\"\\n        );\\n\\n        uint256 attackingSanctuaryBegins = Math.max(settlements[_attackingSettlement].genesis, warBegins);\\n        if (attackingSanctuaryBegins + settlements[_attackingSettlement].sanctuary > block.number) {\\n            settlements[_attackingSettlement].sanctuary = block.number - attackingSanctuaryBegins;\\n        }\\n\\n        DefenderAssets memory defenderAssets;\\n        AttackerAssets memory attackerAssets;\\n\\n        defenderAssets.soldiers = settlements[_defendingSettlement].soldiers;\\n        defenderAssets.towers = settlements[_defendingSettlement].towers;\\n\\n        attackerAssets.soldiers = _soldiers;\\n        attackerAssets.catapults = _catapults;\\n\\n        settlements[_attackingSettlement].soldiers -= _soldiers;\\n        settlements[_attackingSettlement].catapults -= _catapults;\\n\\n        if (_catapults * CATAPULT_STRENGTH > TOWER_STRENGTH * settlements[_defendingSettlement].towers) {\\n            _catapults -= (TOWER_STRENGTH / CATAPULT_STRENGTH) * settlements[_defendingSettlement].towers;\\n            settlements[_defendingSettlement].towers = 0;\\n        } else {\\n            settlements[_defendingSettlement].towers -= _catapults / (TOWER_STRENGTH / CATAPULT_STRENGTH);\\n            _catapults = 0;\\n        }\\n\\n        if (_soldiers * SOLDIER_STRENGTH > TOWER_STRENGTH * settlements[_defendingSettlement].towers) {\\n            _soldiers -= (TOWER_STRENGTH / SOLDIER_STRENGTH) * settlements[_defendingSettlement].towers;\\n            settlements[_defendingSettlement].towers = 0;\\n        } else {\\n            settlements[_defendingSettlement].towers -= _soldiers / (TOWER_STRENGTH / SOLDIER_STRENGTH);\\n            _soldiers = 0;\\n        }\\n\\n        if (_soldiers > settlements[_defendingSettlement].soldiers) {\\n            _soldiers -= settlements[_defendingSettlement].soldiers;\\n\\n            settlements[_defendingSettlement].glory +=\\n                (attackerAssets.soldiers - _soldiers) *\\n                SOLDIER_COST +\\n                (attackerAssets.catapults - _catapults) *\\n                CATAPULT_COST;\\n            settlements[_attackingSettlement].glory +=\\n                defenderAssets.soldiers *\\n                SOLDIER_COST +\\n                defenderAssets.towers *\\n                TOWER_COST;\\n\\n            settlements[_defendingSettlement].soldiers = _soldiers;\\n            settlements[_defendingSettlement].catapults = _catapults;\\n            emit SuccessfulAttack(_attackingSettlement, _defendingSettlement);\\n            _transfer(ownerOf(_defendingSettlement), msg.sender, _defendingSettlement);\\n        } else {\\n            settlements[_defendingSettlement].soldiers -= _soldiers;\\n            settlements[_defendingSettlement].catapults += _catapults;\\n\\n            settlements[_defendingSettlement].glory +=\\n                attackerAssets.soldiers *\\n                SOLDIER_COST +\\n                (attackerAssets.catapults - _catapults) *\\n                CATAPULT_COST;\\n            settlements[_attackingSettlement].glory +=\\n                (defenderAssets.soldiers - settlements[_defendingSettlement].soldiers) *\\n                SOLDIER_COST +\\n                (defenderAssets.towers - settlements[_defendingSettlement].towers) *\\n                TOWER_COST;\\n\\n            emit FailedAttack(_attackingSettlement, _defendingSettlement);\\n        }\\n    }\\n\\n    /**\\n     * Here lies the  number of blocks remaining until\\n     * a Settlement's sacred sanctuary period ends.\\n     */\\n    function blocksUntilSanctuaryEnds(uint256 _settlement)\\n        public\\n        view\\n        override\\n        isLocationSettled(_settlement)\\n        whenWarCountdownHasBegun\\n        returns (uint256)\\n    {\\n        uint256 sanctuaryBegins = Math.max(settlements[_settlement].genesis, warBegins);\\n        if (sanctuaryBegins + settlements[_settlement].sanctuary < block.number) {\\n            return 0;\\n        }\\n\\n        return sanctuaryBegins + settlements[_settlement].sanctuary - block.number;\\n    }\\n\\n    /**\\n     * The number of blocks remaining until the OneWar begins\\n     * can be viewed here.\\n     */\\n    function blocksUntilWarBegins() public view override whenWarCountdownHasBegun returns (uint256) {\\n        if (warBegins < block.number) {\\n            return 0;\\n        }\\n\\n        return warBegins - block.number;\\n    }\\n\\n    /**\\n     * Rulers may pay $GOLD to modify their\\n     * Settlement's motto.\\n     */\\n    function changeMotto(uint256 _settlement, string memory _newMotto)\\n        public\\n        override\\n        isCallerRulerOrCoruler(_settlement)\\n    {\\n        require(bytes(_newMotto).length <= MOTTO_CHARACTER_LIMIT, \\\"motto is too long\\\");\\n\\n        gold.burn(msg.sender, MOTTO_CHANGE_COST);\\n        settlements[_settlement].motto = _newMotto;\\n\\n        emit ChangeMotto(_settlement, _newMotto);\\n    }\\n\\n    /**\\n     * The OneWar Treasury can claim their rightful offerings\\n     * at any time.\\n     */\\n    function redeemFundsToOneWarTreasury() external override {\\n        (bool redeemed, ) = treasury.call{value: address(this).balance}(\\\"\\\");\\n        require(redeemed, \\\"failed to redeem funds\\\");\\n    }\\n\\n    /**\\n     * Each Settlement has a plaque inscribed with its traits.\\n     */\\n    function tokenURI(uint256 _settlement) public view override isLocationSettled(_settlement) returns (string memory) {\\n        return descriptor.tokenURI(_settlement);\\n    }\\n\\n    /**\\n     * Discover a particular Settlement's traits here.\\n     */\\n    function settlementTraits(uint256 _settlement)\\n        external\\n        view\\n        override\\n        isLocationSettled(_settlement)\\n        returns (Settlement memory)\\n    {\\n        return settlements[_settlement];\\n    }\\n\\n    /**\\n     * Discover whether a voyager is a certain Settlement's\\n     * ruler or co-ruler.\\n     */\\n    function isRulerOrCoruler(address _address, uint256 _settlement) public view override returns (bool) {\\n        return _isApprovedOrOwner(_address, _settlement);\\n    }\\n\\n    /**\\n     * Discover whether a specific area has been settled or\\n     * remains undiscovered.\\n     */\\n    function isSettled(uint256 _settlement) public view override returns (bool) {\\n        return _exists(_settlement);\\n    }\\n}\\n\\n/**\\n * War has no winners, except in honor and glory.\\n * The glory of OneWar Settlements is measured in bloodshed.\\n */\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneWar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IOneWar {\\n    struct Settlement {\\n        uint32 soldiers;\\n        uint32 towers;\\n        uint32 catapults;\\n        uint256 goldRedeemed;\\n        uint256 genesis;\\n        uint256 seed;\\n        address founder;\\n        string motto;\\n        uint32 glory;\\n        uint256 sanctuary;\\n        uint256 treasure;\\n        uint256 miners;\\n    }\\n\\n    struct DefenderAssets {\\n        uint32 soldiers;\\n        uint32 towers;\\n    }\\n\\n    struct AttackerAssets {\\n        uint32 soldiers;\\n        uint32 catapults;\\n    }\\n\\n    struct ArmyMove {\\n        uint256 source;\\n        uint256 destination;\\n        uint32 soldiers;\\n        uint32 catapults;\\n    }\\n\\n    event Scout(address _by, uint256 indexed _blockNumber);\\n\\n    event Settle(address _by, uint256 indexed _settlement);\\n\\n    event Burn(uint256 indexed _settlement);\\n\\n    event BuildArmy(uint256 indexed _settlement, uint32 _soldiers, uint32 _towers, uint32 _catapults);\\n\\n    event MoveArmy(\\n        uint256 indexed _sourceSettlement,\\n        uint256 indexed _destinationSettlement,\\n        uint32 _soldiers,\\n        uint32 _catapults\\n    );\\n\\n    event SuccessfulAttack(uint256 indexed _attackingSettlement, uint256 indexed _defendingSettlement);\\n\\n    event FailedAttack(uint256 indexed _attackingSettlement, uint256 indexed _defendingSettlement);\\n\\n    event ChangeMotto(uint256 indexed _settlement, string _motto);\\n\\n    function hasWarCountdownBegun() external view returns (bool);\\n\\n    function scout() external payable;\\n\\n    function settle() external;\\n\\n    function burn(uint256 _settlement) external;\\n\\n    function commenceWarCountdown() external;\\n\\n    function redeemableGold(uint256 _settlement) external view returns (uint256);\\n\\n    function redeemGold(uint256[] calldata _settlements) external;\\n\\n    function armyCost(uint32 _soldiers, uint32 _towers, uint32 _catapults) external pure returns (uint256);\\n\\n    function buildArmy(uint256 _settlement, uint32 _soldiers, uint32 _towers, uint32 _catapults) external;\\n\\n    function moveArmy(uint256 _sourceSettlement, uint256 _destinationSettlement, uint32 _soldiers, uint32 _catapults) external;\\n\\n    function multiMoveArmy(ArmyMove[] calldata _moves) external;\\n\\n    function attack(uint256 _attackingSettlement, uint256 _defendingSettlement, uint32 _soldiers, uint32 _catapults) external;\\n\\n    function blocksUntilSanctuaryEnds(uint256 _settlement) external view returns (uint256);\\n\\n    function blocksUntilWarBegins() external view returns (uint256);\\n\\n    function changeMotto(uint256 _settlement, string memory _newMotto) external;\\n\\n    function redeemFundsToOneWarTreasury() external;\\n\\n    function settlementTraits(uint256 _settlement) external view returns (Settlement memory);\\n\\n    function isRulerOrCoruler(address _address, uint256 _settlement) external view returns (bool);\\n\\n    function isSettled(uint256 _settlement) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/OneWarGold.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IOneWarGold} from \\\"./interfaces/IOneWarGold.sol\\\";\\n\\ncontract OneWarGold is IOneWarGold, ERC20 {\\n    address public oneWar;\\n\\n    constructor() ERC20(\\\"OneWar Gold\\\", \\\"GOLD\\\") {\\n        oneWar = msg.sender;\\n    }\\n\\n    function mint(address _to, uint256 _value) public override {\\n        require(msg.sender == oneWar, \\\"unauthorized caller\\\");\\n        _mint(_to, _value);\\n    }\\n\\n    function burn(address _from, uint256 _value) public override {\\n        require(msg.sender == _from || msg.sender == oneWar, \\\"unauthorized caller\\\");\\n        _burn(_from, _value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OneWarCouncil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IOneWar} from \\\"./interfaces/IOneWar.sol\\\";\\nimport {IOneWarCouncil} from \\\"./interfaces/IOneWarCouncil.sol\\\";\\n\\ncontract OneWarCouncil is IOneWarCouncil, ERC20 {\\n    IOneWar public oneWar;\\n    mapping(uint256 => bool) public redeemed;\\n\\n    uint8 public constant GOLD_DECIMALS = 18;\\n    uint256 public constant GOLD_DENOMINATION = 10**GOLD_DECIMALS;\\n\\n    constructor(IOneWar _oneWar) ERC20(\\\"OneWar Council\\\", \\\"OWC\\\") {\\n        oneWar = _oneWar;\\n    }\\n\\n    function burn(uint256 _value) public override {\\n        _burn(msg.sender, _value);\\n    }\\n\\n    function redeemableCouncilTokens(uint256[] calldata _settlements) public view override returns (uint256) {\\n        uint256 amount = 0;\\n        for (uint256 i = 0; i < _settlements.length; ++i) {\\n            require(oneWar.isSettled(_settlements[i]), \\\"location is not settled\\\");\\n            if (!redeemed[_settlements[i]]) {\\n                amount += 1;\\n            }\\n        }\\n\\n        return amount;\\n    }\\n\\n    function redeemCouncilTokens(uint256[] calldata _settlements) public override {\\n        uint256 amount = 0;\\n        for (uint256 i = 0; i < _settlements.length; ++i) {\\n            require(oneWar.isSettled(_settlements[i]), \\\"location is not settled\\\");\\n            require(oneWar.isRulerOrCoruler(msg.sender, _settlements[i]), \\\"caller is not settlement ruler or co-ruler\\\");\\n            require(!redeemed[_settlements[i]], \\\"council tokens have already been redeemed\\\");\\n            redeemed[_settlements[i]] = true;\\n            amount += 1;\\n        }\\n\\n        _mint(msg.sender, amount * GOLD_DENOMINATION);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OneWarModifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IOneWarDescriptor} from \\\"./interfaces/IOneWarDescriptor.sol\\\";\\nimport {IOneWarModifier} from \\\"./interfaces/IOneWarModifier.sol\\\";\\n\\ncontract OneWarModifier is IOneWarModifier, Ownable {\\n    address payable public override treasury;\\n    bool public isDescriptorLocked;\\n    IOneWarDescriptor public override descriptor;\\n\\n    modifier onlyTreasury() {\\n        require(msg.sender == treasury, \\\"sender is not OneWar Treasury\\\");\\n        _;\\n    }\\n\\n    modifier whenDescriptorNotLocked() {\\n        require(!isDescriptorLocked, \\\"descriptor is locked\\\");\\n        _;\\n    }\\n\\n    constructor(address payable _treasury) {\\n        treasury = _treasury;\\n    }\\n\\n    function setTreasury(address payable _treasury) external override onlyTreasury {\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    function setDescriptor(IOneWarDescriptor _descriptor) external override onlyTreasury whenDescriptorNotLocked {\\n        descriptor = _descriptor;\\n        emit DescriptorUpdated(_descriptor);\\n    }\\n\\n    function lockDescriptor() external override onlyTreasury whenDescriptorNotLocked {\\n        isDescriptorLocked = true;\\n        emit DescriptorLocked();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OneWarDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport {IOneWarDescriptor} from \\\"./interfaces/IOneWarDescriptor.sol\\\";\\nimport {IOneWar} from \\\"./interfaces/IOneWar.sol\\\";\\nimport {NFTDescriptor} from \\\"./libs/NFTDescriptor.sol\\\";\\nimport {Strings} from \\\"./libs/Strings.sol\\\";\\n\\ncontract OneWarDescriptor is IOneWarDescriptor {\\n    IOneWar public oneWar;\\n\\n    constructor(IOneWar _oneWar) {\\n        oneWar = _oneWar;\\n    }\\n\\n    function tokenURI(uint256 _settlement) external view override returns (string memory) {\\n        bool hasWarCountdownBegun = oneWar.hasWarCountdownBegun();\\n        NFTDescriptor.TokenURIParams memory params = NFTDescriptor.TokenURIParams({\\n            name: string(abi.encodePacked(\\\"Settlement #\\\", Strings.toString(_settlement))),\\n            description: string(\\n                abi.encodePacked(\\\"Settlement #\\\", Strings.toString(_settlement), \\\" is a location in OneWar.\\\")\\n            ),\\n            attributes: oneWar.settlementTraits(_settlement),\\n            extraAttributes: NFTDescriptor.ExtraAttributes({\\n                redeemableGold: oneWar.redeemableGold(_settlement),\\n                hasWarCountdownBegun: hasWarCountdownBegun,\\n                blocksUntilSanctuaryEnds: hasWarCountdownBegun ? oneWar.blocksUntilSanctuaryEnds(_settlement) : 0\\n            })\\n        });\\n\\n        return NFTDescriptor.constructTokenURI(params);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Seeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary Seeder {\\n    function pluck(string memory _prefix, uint256 _seed) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_prefix, _seed)));\\n    }\\n\\n    function generateNumber(uint256 _average, uint256 _seed) internal pure returns (uint256) {\\n        uint256 c = 0;\\n        uint256 lower = 4;\\n        uint256 upper = 10;\\n\\n        while (_seed > 0) {\\n            uint256 x = _seed & 0xffffffff;\\n            x = x - ((x >> 1) & 0x55555555);\\n            x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\\n            x = (x + (x >> 4)) & 0x0F0F0F0F;\\n            x = x + (x >> 8);\\n            x = x + (x >> 16);\\n            c += x & 0x0000003F;\\n            _seed >>= 32;\\n        }\\n\\n        uint256 n = (c * _average) / 128;\\n\\n        if (n < _average) {\\n            uint256 lhs = lower * n;\\n            uint256 rhs = (lower - 1) * _average;\\n            if (lhs < rhs) {\\n                return 0;\\n            }\\n\\n            return lhs - rhs;\\n        }\\n\\n        return upper * n - (upper - 1) * _average;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    function max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a >= _b ? _a : _b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneWarGold.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IOneWarGold {\\n    function mint(address _to, uint256 _value) external;\\n\\n    function burn(address _from, uint256 _value) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneWarCouncil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IOneWarCouncil {\\n    function burn(uint256 _value) external;\\n\\n    function redeemableCouncilTokens(uint256[] calldata _settlements) external view returns (uint256);\\n\\n    function redeemCouncilTokens(uint256[] calldata _settlements) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneWarDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport {IOneWar} from \\\"./IOneWar.sol\\\";\\n\\ninterface IOneWarDescriptor {\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneWarModifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport {IOneWarDescriptor} from \\\"./IOneWarDescriptor.sol\\\";\\n\\ninterface IOneWarModifier {\\n    event TreasuryUpdated(address payable _treasury);\\n\\n    event DescriptorUpdated(IOneWarDescriptor _descriptor);\\n\\n    event DescriptorLocked();\\n\\n    function treasury() external view returns (address payable);\\n\\n    function setTreasury(address payable _treasury) external;\\n\\n    function descriptor() external view returns (IOneWarDescriptor);\\n\\n    function setDescriptor(IOneWarDescriptor _descriptor) external;\\n\\n    function lockDescriptor() external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/NFTDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IOneWar} from \\\"../interfaces/IOneWar.sol\\\";\\nimport {Strings} from \\\"./Strings.sol\\\";\\n\\nlibrary NFTDescriptor {\\n    uint8 public constant GOLD_DECIMALS = 18;\\n    uint256 public constant GOLD_DENOMINATION = 10**GOLD_DECIMALS;\\n\\n    struct ExtraAttributes {\\n        uint256 redeemableGold;\\n        bool hasWarCountdownBegun;\\n        uint256 blocksUntilSanctuaryEnds;\\n    }\\n\\n    struct TokenURIParams {\\n        string name;\\n        string description;\\n        IOneWar.Settlement attributes;\\n        ExtraAttributes extraAttributes;\\n    }\\n\\n    enum AttributeType {\\n        PROPERTY,\\n        RANKING,\\n        STAT\\n    }\\n\\n    struct Attribute {\\n        AttributeType attributeType;\\n        string svgHeading;\\n        string attributeHeading;\\n        string value;\\n        bool onSVG;\\n    }\\n\\n    function constructTokenURI(TokenURIParams memory _params) internal pure returns (string memory) {\\n        Attribute[] memory formattedAttributes = formatAttributes(_params.attributes, _params.extraAttributes);\\n        string memory motto = _params.attributes.motto;\\n        string memory image = generateSVGImage(formattedAttributes, motto);\\n        string memory attributes = generateAttributes(formattedAttributes, motto);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                _params.name,\\n                                '\\\",\\\"description\\\":\\\"',\\n                                _params.description,\\n                                '\\\",\\\"image\\\": \\\"',\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                image,\\n                                '\\\",\\\"attributes\\\":',\\n                                attributes,\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function formatGold(uint256 _gold) internal pure returns (string memory) {\\n        string memory integer = string(abi.encodePacked(Strings.toString(_gold / GOLD_DENOMINATION)));\\n        string memory decimal;\\n        for (uint8 i = 0; i < GOLD_DECIMALS; i++) {\\n            uint256 digit = (_gold / 10**i) % 10;\\n            if (digit != 0 || bytes(decimal).length != 0) {\\n                decimal = string(abi.encodePacked(Strings.toString(digit), decimal));\\n            }\\n        }\\n\\n        if (bytes(decimal).length != 0) {\\n            return string(abi.encodePacked(integer, \\\".\\\", decimal));\\n        }\\n\\n        return integer;\\n    }\\n\\n    function formatAttributes(IOneWar.Settlement memory _attributes, ExtraAttributes memory _extraAttributes)\\n        internal\\n        pure\\n        returns (Attribute[] memory)\\n    {\\n        Attribute[] memory attributes = new Attribute[](_extraAttributes.hasWarCountdownBegun ? 12 : 11);\\n        attributes[0] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Soldiers\\\",\\n            \\\"Soldiers\\\",\\n            Strings.toString(_attributes.soldiers),\\n            true\\n        );\\n        attributes[1] = Attribute(AttributeType.STAT, \\\"Towers\\\", \\\"Towers\\\", Strings.toString(_attributes.towers), true);\\n        attributes[2] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Catapults\\\",\\n            \\\"Catapults\\\",\\n            Strings.toString(_attributes.catapults),\\n            true\\n        );\\n        attributes[3] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Treasure\\\",\\n            \\\"$GOLD Treasure\\\",\\n            formatGold(_attributes.treasure),\\n            true\\n        );\\n        attributes[4] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Miners\\\",\\n            \\\"$GOLD Miners\\\",\\n            Strings.toString(_attributes.miners),\\n            true\\n        );\\n        attributes[5] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Redeemed\\\",\\n            \\\"$GOLD Redeemed\\\",\\n            formatGold(_attributes.goldRedeemed),\\n            false\\n        );\\n        attributes[6] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Redeemable\\\",\\n            \\\"$GOLD Redeemable\\\",\\n            formatGold(_extraAttributes.redeemableGold),\\n            true\\n        );\\n        attributes[7] = Attribute(\\n            AttributeType.PROPERTY,\\n            \\\"Genesis\\\",\\n            \\\"Genesis Block\\\",\\n            Strings.toString(_attributes.genesis),\\n            true\\n        );\\n        attributes[8] = Attribute(\\n            AttributeType.PROPERTY,\\n            \\\"Founder\\\",\\n            \\\"Founder\\\",\\n            Strings.toString(_attributes.founder),\\n            true\\n        );\\n        attributes[9] = Attribute(AttributeType.RANKING, \\\"Glory\\\", \\\"Glory\\\", Strings.toString(_attributes.glory), true);\\n        attributes[10] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Sanctuary\\\",\\n            \\\"Sanctuary Duration\\\",\\n            Strings.toString(_attributes.sanctuary),\\n            false\\n        );\\n\\n        if (_extraAttributes.hasWarCountdownBegun) {\\n            attributes[11] = Attribute(\\n                AttributeType.STAT,\\n                \\\"Sanctuary Remaining\\\",\\n                \\\"Blocks Until Sanctuary Ends\\\",\\n                Strings.toString(_extraAttributes.blocksUntilSanctuaryEnds),\\n                false\\n            );\\n        }\\n\\n        return attributes;\\n    }\\n\\n    function generateSVGImage(Attribute[] memory _attributes, string memory _motto)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory svg = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" '\\n        'preserveAspectRatio=\\\"xMinYMin meet\\\" '\\n        'viewBox=\\\"0 0 300 300\\\">'\\n        \\\"<style>\\\"\\n        'text { fill: #646464; font-family: \\\"Courier New\\\", monospace; font-size: 12px; } '\\n        \\\".motto { font-size: 8px; text-anchor: middle; font-style: italic; font-weight: bold; } \\\"\\n        \\\".right { text-transform: uppercase; } \\\"\\n        \\\".left > text { text-anchor: end; }\\\"\\n        \\\"</style>\\\"\\n        \\\"<rect \\\"\\n        'width=\\\"100%\\\" '\\n        'height=\\\"100%\\\" '\\n        'fill=\\\"#eee\\\"'\\n        \\\"/>\\\";\\n\\n        if (bytes(_motto).length > 0) {\\n            svg = string(abi.encodePacked(svg, '<text x=\\\"150\\\" y=\\\"22\\\" class=\\\"motto\\\">', _motto, \\\"</text>\\\"));\\n        }\\n\\n        string memory headings = '<g class=\\\"right\\\" transform=\\\"translate(170,55)\\\">';\\n        string memory values = '<g class=\\\"left\\\" transform=\\\"translate(130,55)\\\">';\\n\\n        uint16 _y = 0;\\n        for (uint8 i = 0; i < _attributes.length; i++) {\\n            Attribute memory attribute = _attributes[i];\\n            if (!attribute.onSVG) {\\n                continue;\\n            }\\n\\n            string memory textOpen = string(abi.encodePacked('<text y=\\\"', Strings.toString(_y), '\\\">'));\\n\\n            headings = string(abi.encodePacked(headings, textOpen, attribute.svgHeading, \\\"</text>\\\"));\\n\\n            string memory value = Strings.equal(attribute.svgHeading, \\\"Founder\\\")\\n                ? Strings.truncateAddressString(attribute.value)\\n                : attribute.value;\\n\\n            values = string(abi.encodePacked(values, textOpen, value, \\\"</text>\\\"));\\n\\n            _y += 25;\\n        }\\n\\n        headings = string(abi.encodePacked(headings, \\\"</g>\\\"));\\n        values = string(abi.encodePacked(values, \\\"</g>\\\"));\\n\\n        svg = string(\\n            abi.encodePacked(\\n                svg,\\n                \\\"<path \\\"\\n                'stroke=\\\"#696969\\\" '\\n                'stroke-width=\\\"1.337\\\" '\\n                'stroke-dasharray=\\\"10,15\\\" '\\n                'stroke-linecap=\\\"round\\\" '\\n                'd=\\\"M150 46 L150 256\\\"'\\n                \\\"/>\\\",\\n                headings,\\n                values,\\n                \\\"</svg>\\\"\\n            )\\n        );\\n\\n        return Base64.encode(bytes(svg));\\n    }\\n\\n    /**\\n     * @notice Parse Settlement attributes into a string.\\n     */\\n    function generateAttributes(Attribute[] memory _attributes, string memory _motto)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory attributes = \\\"[\\\";\\n        for (uint8 i = 0; i < _attributes.length; i++) {\\n            Attribute memory attribute = _attributes[i];\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    \\\"{\\\",\\n                    AttributeType.STAT == attribute.attributeType ? '\\\"display_type\\\":\\\"number\\\",' : \\\"\\\",\\n                    '\\\"trait_type\\\":\\\"',\\n                    attribute.attributeHeading,\\n                    '\\\",\\\"value\\\":',\\n                    AttributeType.STAT == attribute.attributeType || AttributeType.RANKING == attribute.attributeType\\n                        ? attribute.value\\n                        : string(abi.encodePacked('\\\"', attribute.value, '\\\"')),\\n                    \\\"},\\\"\\n                )\\n            );\\n        }\\n\\n        attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\":\\\"Motto\\\",\\\"value\\\":\\\"', _motto, '\\\"}]'));\\n\\n        return attributes;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol) - MODIFIED\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    function toString(uint256 _value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n        if (_value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 temp = _value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n        while (_value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(_value % 10)));\\n            _value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    // Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string (MODIFIED)\\n    function toString(address _addr) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(40);\\n        for (uint8 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(_addr)) / (2**(8 * (19 - i)))));\\n            bytes1 high = bytes1(uint8(b) / 16);\\n            bytes1 low = bytes1(uint8(b) - 16 * uint8(high));\\n            buffer[2 * i] = char(high);\\n            buffer[2 * i + 1] = char(low);\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", string(buffer)));\\n    }\\n\\n    function char(bytes1 _byte) internal pure returns (bytes1) {\\n        if (uint8(_byte) < 10) {\\n            return bytes1(uint8(_byte) + 0x30);\\n        } else {\\n            return bytes1(uint8(_byte) + 0x57);\\n        }\\n    }\\n\\n    function truncateAddressString(string memory _str) internal pure returns (string memory) {\\n        bytes memory b = bytes(_str);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    string(abi.encodePacked(b[0], b[1], b[2], b[3], b[4], b[5])),\\n                    \\\"...\\\",\\n                    string(abi.encodePacked(b[36], b[37], b[38], b[39], b[40], b[41]))\\n                )\\n            );\\n    }\\n\\n    function equal(string memory _a, string memory _b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_soldiers\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_towers\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_catapults\",\"type\":\"uint32\"}],\"name\":\"BuildArmy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_motto\",\"type\":\"string\"}],\"name\":\"ChangeMotto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DescriptorLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOneWarDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"DescriptorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_attackingSettlement\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_defendingSettlement\",\"type\":\"uint256\"}],\"name\":\"FailedAttack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_sourceSettlement\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_destinationSettlement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_soldiers\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_catapults\",\"type\":\"uint32\"}],\"name\":\"MoveArmy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Scout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_attackingSettlement\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_defendingSettlement\",\"type\":\"uint256\"}],\"name\":\"SuccessfulAttack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVERAGE_MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVERAGE_SANCTUARY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVERAGE_TREASURE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CATAPULT_COST\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CATAPULT_STRENGTH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_DENOMINATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SCOUTING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOTTO_CHANGE_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOTTO_CHARACTER_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREWAR_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCOUTING_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCOUTING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLDIER_COST\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLDIER_STRENGTH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOWER_COST\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOWER_STRENGTH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_soldiers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_towers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_catapults\",\"type\":\"uint32\"}],\"name\":\"armyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_attackingSettlement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defendingSettlement\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_soldiers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_catapults\",\"type\":\"uint32\"}],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"blocksUntilSanctuaryEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksUntilWarBegins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_soldiers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_towers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_catapults\",\"type\":\"uint32\"}],\"name\":\"buildArmy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newMotto\",\"type\":\"string\"}],\"name\":\"changeMotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commenceWarCountdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"council\",\"outputs\":[{\"internalType\":\"contract OneWarCouncil\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptor\",\"outputs\":[{\"internalType\":\"contract IOneWarDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gold\",\"outputs\":[{\"internalType\":\"contract OneWarGold\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasWarCountdownBegun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDescriptorLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"isRulerOrCoruler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"isSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sourceSettlement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destinationSettlement\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_soldiers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_catapults\",\"type\":\"uint32\"}],\"name\":\"moveArmy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"source\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destination\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"soldiers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"catapults\",\"type\":\"uint32\"}],\"internalType\":\"struct IOneWar.ArmyMove[]\",\"name\":\"_moves\",\"type\":\"tuple[]\"}],\"name\":\"multiMoveArmy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFundsToOneWarTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_settlements\",\"type\":\"uint256[]\"}],\"name\":\"redeemGold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"redeemableGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"scoutingEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOneWarDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"setDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"settlementTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"soldiers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"towers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"catapults\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"goldRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"founder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"motto\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"glory\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sanctuary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"}],\"internalType\":\"struct IOneWar.Settlement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settlements\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"soldiers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"towers\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"catapults\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"goldRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"founder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"motto\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"glory\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sanctuary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warBegins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OneWar", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000fdaa1e72a51e69e5908066b0f2cdd724c25ff4dc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}