{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n* Generated by @Thrasher66099\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IByteContract {\r\n    function burn(address _from, uint256 _amount) external;\r\n    function getReward(address _to) external;\r\n    function updateRewardOnMint(address _user, uint256 tokenId) external;\r\n    function updateReward(address _from, address _to, uint256 _tokenId) external;\r\n}\r\n\r\ninterface ICitizen {\r\n\tfunction getRewardRate(address _user) external view returns(uint256);\r\n    function getRewardsRateForTokenId(uint256) external view returns(uint256);\r\n    function getCurrentOrFinalTime() external view returns(uint256);\r\n    function reduceRewards(uint256, address) external;\r\n    function increaseRewards(uint256, address) external;\r\n    function getEnd() external returns(uint256);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract NTBytesBridge is Ownable {\r\n\r\n    ICitizen public citizenContract;\r\n    IByteContract public bytesContract;\r\n\r\n    mapping(address=>uint256) correctionMapping;\r\n\r\n    /*bytes functions\r\n    function burn(address _from, uint256 _amount) external;\r\n    function getReward(address _to) external;\r\n    function updateRewardOnMint(address _user, uint256 tokenId) external;\r\n    function updateReward(address _from, address _to, uint256 _tokenId) external;*/\r\n\r\n    /*CITIZEN FUNCTIONS\r\n\tfunction getRewardRate(address _user) external view returns(uint256);\r\n    function getRewardsRateForTokenId(uint256) external view returns(uint256);\r\n    function getCurrentOrFinalTime() external view returns(uint256);\r\n    function reduceRewards(uint256, address) external;\r\n    function increaseRewards(uint256, address) external;\r\n    function getEnd() external returns(uint256);*/\r\n\r\n    function setCitizenContract(address _address) public onlyOwner\r\n    {\r\n        citizenContract = ICitizen(_address);\r\n    }\r\n\r\n    function setBytesContract(address _address) public onlyOwner\r\n    {\r\n        bytesContract = IByteContract(_address);\r\n    }\r\n\r\n\r\n    function burn(address _from, uint256 _amount) external\r\n    {\r\n        require(msg.sender == address(citizenContract), \"You are not approved to burn tokens\");\r\n        bytesContract.burn(_from, _amount);\r\n    }\r\n\r\n    function getReward(address _to) external\r\n    {\r\n        require(msg.sender == address(citizenContract), \"Citizen contract must get rewards\");\r\n        bytesContract.getReward(_to);\r\n    }\r\n\r\n    function updateRewardOnMint(address _user, uint256 tokenId) external\r\n    {\r\n        require(msg.sender == address(citizenContract), \"You cannot update rewards on mint\");\r\n        //Set correctionMapping here to be used in next getRewardRate call\r\n        correctionMapping[_user] = citizenContract.getRewardsRateForTokenId(tokenId);\r\n        bytesContract.updateRewardOnMint(_user, tokenId);\r\n    }\r\n\r\n    function updateReward(address _from, address _to, uint256 _tokenId) external\r\n    {\r\n        require(msg.sender == address(citizenContract), \"You cannot update rewards\");\r\n        bytesContract.updateReward(_from, _to, _tokenId);\r\n    }\r\n\r\n    function getRewardRate(address _user) external view returns(uint256)\r\n    {\r\n        uint256 _value = citizenContract.getRewardRate(_user);\r\n        //The first time getRewardRate is called after a mint we adjust for the error case\r\n        if(correctionMapping[_user] > 0)\r\n        {\r\n            _value -= correctionMapping[_user];\r\n        }\r\n\r\n        return _value;\r\n    }\r\n    function getRewardsRateForTokenId(uint256 tokenId) external view returns(uint256)\r\n    {\r\n        return citizenContract.getRewardsRateForTokenId(tokenId);\r\n    }\r\n\r\n    function getCurrentOrFinalTime() external view returns(uint256)\r\n    {\r\n        return citizenContract.getCurrentOrFinalTime();\r\n    }\r\n\r\n    function reduceRewards(uint256 _obsolete, address _user) external\r\n    {\r\n        //Do nothing. This is now an obsolete call that only exists for call handling in older functions.\r\n    }\r\n\r\n    //The uint256 signature parameter is no longer used inside the function, but is needed for legacy call handling\r\n    function increaseRewards(uint256 _obsolete, address _user) external\r\n    {\r\n        if(correctionMapping[_user] > 0)\r\n        {\r\n            //IncreaseRewards is called at the end of the updateRewardOnMint call and thus is the perfect place to remove the correction mapping\r\n            //data after it has been utilized\r\n            delete correctionMapping[_user];\r\n        }\r\n    }\r\n    function getEnd() external returns(uint256)\r\n    {\r\n        return citizenContract.getEnd();\r\n    }\r\n    \r\n    constructor() Ownable() {\r\n        setCitizenContract(0xb668beB1Fa440F6cF2Da0399f8C28caB993Bdd65);\r\n        setBytesContract(0x7d647b1A0dcD5525e9C6B3D14BE58f27674f8c95);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bytesContract\",\"outputs\":[{\"internalType\":\"contract IByteContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citizenContract\",\"outputs\":[{\"internalType\":\"contract ICitizen\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentOrFinalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardsRateForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_obsolete\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"increaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_obsolete\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"reduceRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBytesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCitizenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateRewardOnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NTBytesBridge", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b5da762bfb5e3ab092ecbab1941d39a04fc6e3601c502aea8af7f7aac34e1b1d"}]}