{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\n/**\r\n    Rarity.Garden Opensea Sweeper 1.01\r\n\r\n    Input data packing not as efficient but overall gas consumption comparable to gem.xyz (June, 2022).\r\n\r\n    Created in the hope to be useful.\r\n*/\r\n\r\ncontract OpenseaSweeper\r\n{\r\n    event Sale(address buyer, bool protected, uint256 refund);\r\n    event Refund(address indexed sender, address indexed receiver, uint256 amount);\r\n    event RefundAdded(address indexed receiver, uint256 amount);\r\n    event EthRecovered(uint256 amount);\r\n\r\n    struct Params{\r\n\r\n        uint8 ss;\r\n        uint256 value;\r\n        uint256 msgValue;\r\n        uint256 refund;\r\n        uint256 gas_use;\r\n        address wyvernAddress;\r\n        address sender;\r\n        bytes32[2][] rssMetadata;\r\n        uint8[8] feeMethodsSidesKindsHowToCalls;\r\n        address[14] addrs;\r\n        uint256[18] uints;\r\n        bytes collection;\r\n        bytes msgSender;\r\n        bytes calldataBuy;\r\n        bytes calldataSell;\r\n        bytes token_id;\r\n    }\r\n\r\n    mapping( address => uint256 ) public refunds;\r\n    address public owner;\r\n\r\n    constructor()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n        address: collection address\r\n        uint256: fee (e.g. \"250\")\r\n        uint8[]: sss (\"ss\" field as of OS order)\r\n        address[]: takers (corresponding seller)\r\n        integers[5][]: base_price, listing_time, salt, expiration_time, token_id\r\n        bytes32[2][]: rssMetadata (first 2 as of OS order),\r\n        bool : protected (if enabled, it will drop the entire order)\r\n    */\r\n    function atomicMatches(\r\n        address collection,\r\n        uint256 fee,\r\n        uint8[] calldata sss,\r\n        address[] calldata takers,\r\n        uint256[5][] calldata integers,\r\n        bytes32[2][] calldata rssMetadata,\r\n        bool protected\r\n    )\r\n    external payable\r\n    {\r\n        require(integers.length == takers.length && integers.length == sss.length && integers.length == rssMetadata.length, \"array lengths must be equal\");\r\n\r\n        Params memory params = Params({\r\n            wyvernAddress : 0x7f268357A8c2552623316e2562D90e642bB538E5,\r\n            collection : abi.encode(collection),\r\n            sender : msg.sender,\r\n            msgValue : msg.value,\r\n            rssMetadata : rssMetadata,\r\n            addrs : [address(0),address(0),address(0),address(0),address(0),address(0),address(0),address(0),address(0),address(0),address(0),address(0),address(0),address(0)],\r\n            uints : [uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0)],\r\n            feeMethodsSidesKindsHowToCalls : [1,0,0,1,1,1,0,1],\r\n            calldataBuy : hex'',\r\n            calldataSell : hex'',\r\n            token_id : hex'',\r\n            msgSender : hex'',\r\n            ss : 0,\r\n            value : 0,\r\n            refund : 0,\r\n            gas_use: 0\r\n        });\r\n\r\n        for(uint256 i = 0; i < integers.length; i++)\r\n        {\r\n\r\n            params.value += integers[i][0];\r\n        }\r\n\r\n        require(params.msgValue == params.value, \"Please send the exact value\");\r\n\r\n        params.msgSender = abi.encode(params.sender);\r\n\r\n        if(!protected)\r\n        {\r\n            params.gas_use = ( ( ( ( gasleft() * 10**18 ) / 100 ) * 9000 ) / integers.length ) / 10**20;\r\n        }\r\n\r\n        for(uint256 i = 0; i < integers.length; i++)\r\n        {\r\n            params.addrs = [\r\n\r\n                params.wyvernAddress, // exchange\r\n                address(this), // maker\r\n                takers[i], // taker\r\n                address(0), // feeRecipient\r\n                0xBAf2127B49fC93CbcA6269FAdE0F7F31dF4c88a7, // target\r\n                address(0), // static target\r\n                address(0), // payment token\r\n                params.wyvernAddress, // exchange\r\n                takers[i], // maker (=taker)\r\n                address(0), // taker\r\n                0x5b3256965e7C3cF26E11FCAf296DfC8807C01073, // feeRecipient\r\n                0xBAf2127B49fC93CbcA6269FAdE0F7F31dF4c88a7, // target\r\n                address(0), // static target\r\n                address(0) // payment token\r\n            ];\r\n\r\n            params.uints = [\r\n\r\n                fee, // maker relayer fee\r\n                0, // taker relayer fee\r\n                0, // maker protocol fee\r\n                0, // taker protocol fee\r\n                integers[i][0], // base_price\r\n                0, // extra\r\n                integers[i][1], // listing_time\r\n                0,\r\n                integers[i][2], // salt\r\n                fee, // maker relayer fee,\r\n                0, // taler relayer fee\r\n                0, // maker protocol fee\r\n                0, // taker protocl fee\r\n                integers[i][0], // base_price\r\n                0, // extra\r\n                integers[i][1], // listing_time\r\n                integers[i][3], // expiration_time\r\n                integers[i][2] // salt\r\n            ];\r\n\r\n            params.token_id = abi.encode(integers[i][4]);\r\n\r\n            params.calldataSell =\r\n                bytes.concat(\r\n                    hex'fb16a595',\r\n                    abi.encode(takers[i]),\r\n                    hex'0000000000000000000000000000000000000000000000000000000000000000',\r\n                    params.collection,\r\n                    params.token_id,\r\n                    hex'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000'\r\n                );\r\n\r\n            params.calldataBuy =\r\n                bytes.concat(\r\n                    hex'fb16a595',\r\n                    hex'0000000000000000000000000000000000000000000000000000000000000000',\r\n                    params.msgSender,\r\n                    params.collection,\r\n                    params.token_id,\r\n                    hex'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000'\r\n                );\r\n\r\n            params.ss = sss[i];\r\n\r\n            if(!protected)\r\n            {\r\n                try WyvernExchange(params.wyvernAddress).atomicMatch_{value: integers[i][0], gas: params.gas_use}\r\n                    (\r\n                        params.addrs,\r\n                        params.uints,\r\n                        params.feeMethodsSidesKindsHowToCalls,\r\n                        params.calldataBuy,\r\n                        params.calldataSell,\r\n                        hex'00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n                        hex'000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n                        hex'',\r\n                        hex'',\r\n                        [params.ss, params.ss],\r\n                        [params.rssMetadata[i][0], params.rssMetadata[i][1], params.rssMetadata[i][0], params.rssMetadata[i][1], hex'']\r\n                    )\r\n                {\r\n                    // nothing, we are fine\r\n                }\r\n                catch Error(string memory reason)\r\n                {\r\n                    params.refund += integers[i][0];\r\n                }\r\n                catch\r\n                {\r\n                    params.refund += integers[i][0];\r\n                }\r\n            }\r\n            else\r\n            {\r\n                WyvernExchange(params.wyvernAddress).atomicMatch_{value: integers[i][0]}\r\n                (\r\n                    params.addrs,\r\n                    params.uints,\r\n                    params.feeMethodsSidesKindsHowToCalls,\r\n                    params.calldataBuy,\r\n                    params.calldataSell,\r\n                    hex'00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n                    hex'000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n                    hex'',\r\n                    hex'',\r\n                    [params.ss, params.ss],\r\n                    [params.rssMetadata[i][0], params.rssMetadata[i][1], params.rssMetadata[i][0], params.rssMetadata[i][1], hex'']\r\n                );\r\n            }\r\n        }\r\n\r\n        emit Sale(params.sender, protected, params.refund);\r\n\r\n        if(params.refund != 0)\r\n        {\r\n            require(params.msgValue != params.refund, \"Couldn't sweep anything\");\r\n\r\n            (bool success,) = payable(params.sender).call{value: params.refund}(\"\");\r\n\r\n            if(!success)\r\n            {\r\n                refunds[params.sender] += params.refund;\r\n                emit RefundAdded(params.sender, params.refund);\r\n            }\r\n        }\r\n    }\r\n\r\n    function performRefundUser() external\r\n    {\r\n        address msgSender = msg.sender;\r\n        uint256 tmp = refunds[msgSender];\r\n        refunds[msgSender] = 0;\r\n\r\n        (bool success,) = payable(msgSender).call{value: tmp}(\"\");\r\n\r\n        if(success)\r\n        {\r\n            emit Refund(msgSender, msgSender, tmp);\r\n        }\r\n    }\r\n\r\n    function performRefundAdmin(address user) external\r\n    {\r\n        address msgSender = msg.sender;\r\n\r\n        require(msgSender == owner, \"Not the owner\");\r\n\r\n        uint256 tmp = refunds[user];\r\n        refunds[user] = 0;\r\n\r\n        (bool success,) = payable(user).call{value: tmp}(\"\");\r\n\r\n        if(success)\r\n        {\r\n            emit Refund(msgSender, user, tmp);\r\n        }\r\n    }\r\n\r\n    function performEthRecover(uint256 amount) external\r\n    {\r\n        address msgSender = msg.sender;\r\n\r\n        require(msgSender == owner, \"Not the owner\");\r\n\r\n        (bool success,) = payable(msgSender).call{value: amount}(\"\");\r\n\r\n        if(success)\r\n        {\r\n            emit EthRecovered(amount);\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external\r\n    {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface WyvernExchange\r\n{\r\n\r\n    function atomicMatch_(\r\n        address[14] memory addrs,\r\n        uint[18] memory uints,\r\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\r\n        bytes memory calldataBuy,\r\n        bytes memory calldataSell,\r\n        bytes memory replacementPatternBuy,\r\n        bytes memory replacementPatternSell,\r\n        bytes memory staticExtradataBuy,\r\n        bytes memory staticExtradataSell,\r\n        uint8[2] memory vs,\r\n        bytes32[5] memory rssMetadata\r\n    )\r\n    external\r\n    payable;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"protected\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"sss\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"takers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[5][]\",\"name\":\"integers\",\"type\":\"uint256[5][]\"},{\"internalType\":\"bytes32[2][]\",\"name\":\"rssMetadata\",\"type\":\"bytes32[2][]\"},{\"internalType\":\"bool\",\"name\":\"protected\",\"type\":\"bool\"}],\"name\":\"atomicMatches\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performEthRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"performRefundAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performRefundUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OpenseaSweeper", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34fd9426721e5f2631aa615c4146de8e895d24e26b98eab4540b6f37e44e8eb7"}]}