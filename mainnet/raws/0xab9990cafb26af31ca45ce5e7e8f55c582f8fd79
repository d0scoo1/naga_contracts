{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary BiggestBuyer {\r\n    struct Data {\r\n        uint256 initHour;\r\n        uint256 rewardFactor;\r\n        mapping(uint256 => address) biggestBuyerAccount;\r\n        mapping(uint256 => uint256) biggestBuyerAmount;\r\n        mapping(uint256 => uint256) biggestBuyerPaid;\r\n    }\r\n\r\n    uint256 private constant FACTOR_MAX = 10000;\r\n\r\n    event UpdateBiggestBuyerRewordFactor(uint256 value);\r\n\r\n    event BiggestBuyerPayout(uint256 hour, address indexed account, uint256 value);\r\n\r\n    function init(Data storage data) public {\r\n        data.initHour = getCurrentHour();\r\n        updateRewardFactor(data, 500); //5% from liquidity\r\n    }\r\n\r\n    function updateRewardFactor(Data storage data, uint256 value) public {\r\n        require(value <= 1000, \"invalid biggest buyer reward percent\"); //max 10%\r\n        data.rewardFactor = value;\r\n        emit UpdateBiggestBuyerRewordFactor(value);\r\n    }\r\n\r\n    function getCurrentHour() private view returns (uint256) {\r\n        return block.timestamp / (1 hours);\r\n    }\r\n\r\n    // starts at 0 and increments at the turn of the hour every hour\r\n    function getHour(Data storage data) public view returns (uint256) {\r\n        uint256 currentHour = getCurrentHour();\r\n        return currentHour - data.initHour;\r\n    }\r\n\r\n    function handleBuy(Data storage data, address account, uint256 amount) public {\r\n        uint256 hour = getHour(data);\r\n\r\n        if(amount > data.biggestBuyerAmount[hour]) {\r\n            data.biggestBuyerAmount[hour] = amount;\r\n            data.biggestBuyerAccount[hour] = account;\r\n        }\r\n    }\r\n\r\n    function calculateBiggestBuyerReward(Data storage data, uint256 liquidityTokenBalance) public view returns (uint256) {\r\n        return liquidityTokenBalance * data.rewardFactor / FACTOR_MAX;\r\n    }\r\n\r\n    function payBiggestBuyer(Data storage data, uint256 hour, uint256 liquidityTokenBalance) public returns (address, uint256) {\r\n        require(hour < getHour(data), \"Hour is not complete\");\r\n        if(\r\n            data.biggestBuyerAmount[hour] == 0 ||\r\n            data.biggestBuyerPaid[hour] > 0) {\r\n            return (address(0), 0);\r\n        }\r\n\r\n        address winner = data.biggestBuyerAccount[hour];\r\n\r\n        uint256 amountWon = calculateBiggestBuyerReward(data, liquidityTokenBalance);\r\n\r\n        //Set to 1 so the check for if payment occurred will succeed\r\n        if(amountWon == 0) {\r\n            amountWon = 1;\r\n        }\r\n\r\n        data.biggestBuyerPaid[hour] = amountWon;\r\n\r\n        emit BiggestBuyerPayout(hour, winner, amountWon);\r\n\r\n        return (winner, amountWon);\r\n    }\r\n\r\n    function getBiggestBuyer(Data storage data, uint256 hour) public view returns (address, uint256, uint256) {\r\n        return (\r\n            data.biggestBuyerAccount[hour],\r\n            data.biggestBuyerAmount[hour],\r\n            data.biggestBuyerPaid[hour]);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hour\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BiggestBuyerPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdateBiggestBuyerRewordFactor\",\"type\":\"event\"}]", "ContractName": "BiggestBuyer", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://73d3bcb32376f94a6cd736130e652de301647c41db7eb1a7af5d19136cdd17dd"}]}