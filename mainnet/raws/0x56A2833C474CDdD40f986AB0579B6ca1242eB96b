{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/ixnp9z85s69jvfxw5dmz7lixp28fkil1-geb-protocol-token-authority/dapp/geb-protocol-token-authority/src/ProtocolTokenAuthority.sol\npragma solidity >=0.6.7 <0.7.0;\n\n////// /nix/store/ixnp9z85s69jvfxw5dmz7lixp28fkil1-geb-protocol-token-authority/dapp/geb-protocol-token-authority/src/ProtocolTokenAuthority.sol\n/// ProtocolTokenAuthority -- custom authority for protocol token access control\n\n// Copyright (C) 2019 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published\n// by the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.7; */\n\ncontract ProtocolTokenAuthority {\n  address public root;\n  address public owner;\n\n  modifier isRootCalling { require(msg.sender == root); _; }\n  modifier isRootOrOwnerCalling { require(msg.sender == root || owner == msg.sender); _; }\n\n  event SetRoot(address indexed newRoot);\n  event SetOwner(address indexed newOwner);\n\n  function setRoot(address usr) public isRootCalling {\n    root = usr;\n    emit SetRoot(usr);\n  }\n  function setOwner(address usr) public isRootOrOwnerCalling {\n    owner = usr;\n    emit SetOwner(usr);\n  }\n\n  mapping (address => uint) public authorizedAccounts;\n\n  event AddAuthorization(address indexed usr);\n  function addAuthorization(address usr) public isRootOrOwnerCalling { authorizedAccounts[usr] = 1; emit AddAuthorization(usr); }\n  event RemoveAuthorization(address indexed usr);\n  function removeAuthorization(address usr) public isRootOrOwnerCalling { authorizedAccounts[usr] = 0; emit RemoveAuthorization(usr); }\n\n  constructor() public {\n    root = msg.sender;\n    emit SetRoot(msg.sender);\n  }\n\n  // bytes4(keccak256(abi.encodePacked('burn(uint256)')))\n  bytes4 constant burn = bytes4(0x42966c68);\n  // bytes4(keccak256(abi.encodePacked('burn(address,uint256)')))\n  bytes4 constant burnFrom = bytes4(0x9dc29fac);\n  // bytes4(keccak256(abi.encodePacked('mint(address,uint256)')))\n  bytes4 constant mint = bytes4(0x40c10f19);\n\n  function canCall(address src, address, bytes4 sig)\n      public view returns (bool)\n  {\n    if (sig == burn || sig == burnFrom || src == root || src == owner) {\n      return true;\n    } else if (sig == mint) {\n      return (authorizedAccounts[src] == 1);\n    } else {\n      return false;\n    }\n  }\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoot\",\"type\":\"address\"}],\"name\":\"SetRoot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtocolTokenAuthority", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}