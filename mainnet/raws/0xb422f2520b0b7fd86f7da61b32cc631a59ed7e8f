{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: LGPL-3.0-or-later\r\npragma solidity ^0.8;\r\n\r\ncontract VouchRegister {\r\n    event Vouch(\r\n        address indexed solver,\r\n        address indexed bondingPool,\r\n        address cowRewardTarget,\r\n        address indexed sender\r\n    );\r\n    event InvalidateVouch(\r\n        address indexed solver,\r\n        address indexed bondingPool,\r\n        address indexed sender\r\n    );\r\n\r\n    constructor() {}\r\n\r\n    /// @dev Allows a bonding pool to officially vouch for a solver\r\n    /// Anyone can call this function, but only the events where the sender is the owner\r\n    /// of the referenced bondingPool will be officially indexed\r\n    /// The owner of a bonding pool is identified by the address sending the full initial funding to the bonding pool\r\n    /// @param solver The solver for whom the bonding pool will cover potential losses/penalities\r\n    /// @param bondingPool Address of the bonding pool from which a potential loss will be covered\r\n    /// @param cowRewardTarget Address to which the solver COW Token reward should be send for the particular solver\r\n    function vouch(\r\n        address[] calldata solver,\r\n        address[] calldata bondingPool,\r\n        address[] calldata cowRewardTarget\r\n    ) public {\r\n        for (uint256 i = 0; i < solver.length; i++) {\r\n            emit Vouch(\r\n                solver[i],\r\n                bondingPool[i],\r\n                cowRewardTarget[i],\r\n                msg.sender\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Invalidates the vouching for a solver by a bonding pool\r\n    /// Anyone can call this function, but only the events where the sender is the owner\r\n    /// of the referenced bondingPool will be officially indexed\r\n    /// The owner of a bonding pool is identified by the address sending the full initial funding to the bonding pool\r\n    /// @param solver The solver for whom the bonding pool will no longer cover any losses/penalities\r\n    /// @param bondingPool Address of the official bonding pool, from which a potential loss will no longer be covered\r\n    function invalidateVouching(\r\n        address[] calldata solver,\r\n        address[] calldata bondingPool\r\n    ) public {\r\n        for (uint256 i = 0; i < solver.length; i++) {\r\n            emit InvalidateVouch(solver[i], bondingPool[i], msg.sender);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondingPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InvalidateVouch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondingPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cowRewardTarget\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Vouch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"solver\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bondingPool\",\"type\":\"address[]\"}],\"name\":\"invalidateVouching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"solver\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bondingPool\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cowRewardTarget\",\"type\":\"address[]\"}],\"name\":\"vouch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VouchRegister", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://07b3367344f777d004e21fb6e77c675e1c8226056fb25ca8bad5794de7c9aa1c"}]}