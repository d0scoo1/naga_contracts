{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"CryptoadzChecker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./CryptoadzInterface.sol\\\";\\r\\n\\r\\ncontract CryptoadzChecker {\\r\\n    CryptoadzInterface private cryptoadz = CryptoadzInterface(0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6);\\r\\n\\r\\n    function isToadHolder(address _address) public view returns(bool) {\\r\\n      return cryptoadz.balanceOf(_address) \\u003e 0;\\r\\n    }\\r\\n}\"},\"CryptoadzInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface CryptoadzInterface {\\r\\n  function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  function baseURI() external view returns (string memory);\\r\\n\\r\\n  function contractURI() external view returns (string memory);\\r\\n\\r\\n  function devMintLocked() external view returns (bool);\\r\\n\\r\\n  function getApproved(uint256 tokenId) external view returns (address);\\r\\n\\r\\n  function initializePaymentSplitter(\\r\\n    address[] memory payees,\\r\\n    uint256[] memory shares_\\r\\n  ) external;\\r\\n\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function lockDevMint() external;\\r\\n\\r\\n  function maxMintsPerTx() external view returns (uint256);\\r\\n\\r\\n  function maxTokens() external view returns (uint256);\\r\\n\\r\\n  function mint(uint256 quantity) external;\\r\\n\\r\\n  function mintSpecial(address[] memory recipients, uint256[] memory specialId) external;\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function nextTokenId() external view returns (uint256);\\r\\n\\r\\n  function owner() external view returns (address);\\r\\n\\r\\n  function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n  function payee(uint256 index) external view returns (address);\\r\\n\\r\\n  function provenance() external view returns (string memory);\\r\\n\\r\\n  function release(address account) external;\\r\\n\\r\\n  function released(address account) external view returns (uint256);\\r\\n\\r\\n  function renounceOwnership() external;\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) external;\\r\\n\\r\\n  function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n  function setBaseURI(string memory _baseURI) external;\\r\\n\\r\\n  function setContractURI(string memory contractURI_) external;\\r\\n\\r\\n  function setProvenance(string memory _provenance) external;\\r\\n\\r\\n  function setStartingBlock(uint256 _startingBlock) external;\\r\\n\\r\\n  function shares(address account) external view returns (uint256);\\r\\n\\r\\n  function startingBlock() external view returns (uint256);\\r\\n\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function tokenPrice() external view returns (uint256);\\r\\n\\r\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n  function totalReleased() external view returns (uint256);\\r\\n\\r\\n  function totalShares() external view returns (uint256);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  function transferOwnership(address newOwner) external;\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isToadHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CryptoadzChecker", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f268bc4cb12f43dca6817e7aeb8016e6f6c733f6ea51a11f94be6877fd5cc273"}]}