{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.13;\r\n\r\nlibrary Counters {\r\n  struct Counter {\r\n    uint256 _value;\r\n  }\r\n  function current(Counter storage counter) internal view returns (uint256) {\r\n    return counter._value;\r\n  }\r\n  function increment(Counter storage counter) internal {\r\n    unchecked {\r\n      counter._value += 1;\r\n    }\r\n  }\r\n  function decrement(Counter storage counter) internal {\r\n    uint256 value = counter._value;\r\n    require(value > 0, \"Counter: decrement overflow\");\r\n    unchecked {\r\n      counter._value = value - 1;\r\n    }\r\n  }\r\n  function reset(Counter storage counter) internal {\r\n    counter._value = 0;\r\n  }\r\n}\r\n\r\nlibrary Strings {\r\n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    if (value == 0) {\r\n      return \"0\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a + b;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a - b;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a * b;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a % b;\r\n  }\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b <= a, errorMessage);\r\n      return a - b;\r\n    }\r\n  }\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b > 0, errorMessage);\r\n      return a / b;\r\n    }\r\n  }\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b > 0, errorMessage);\r\n      return a % b;\r\n    }\r\n  }\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\nabstract contract ContextMixin {\r\n  function msgSender() internal view returns (address payable sender) {\r\n    if (msg.sender == address(this)) {\r\n      bytes memory array = msg.data;\r\n      uint256 index = msg.data.length;\r\n      assembly {\r\n        sender := and(\r\n          mload(add(array, index)),\r\n          0xffffffffffffffffffffffffffffffffffffffff\r\n        )\r\n      }\r\n    } else {\r\n      sender = payable(msg.sender);\r\n    }\r\n    return sender;\r\n  }\r\n}\r\n\r\ncontract Initializable {\r\n  bool inited = false;\r\n  modifier initializer() {\r\n    require(!inited, \"already inited\");\r\n    _;\r\n    inited = true;\r\n  }\r\n}\r\n\r\ncontract EIP712Base is Initializable {\r\n  struct EIP712Domain {\r\n    string name;\r\n    string version;\r\n    address verifyingContract;\r\n    bytes32 salt;\r\n  }\r\n  string constant public ERC712_VERSION = \"1\";\r\n  bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\r\n    bytes(\r\n      \"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"\r\n    )\r\n  );\r\n  bytes32 internal domainSeperator;\r\n\r\n  function _initializeEIP712(string memory name) internal initializer {\r\n    _setDomainSeperator(name);\r\n  }\r\n  function _setDomainSeperator(string memory name) internal {\r\n    domainSeperator = keccak256(\r\n      abi.encode(\r\n        EIP712_DOMAIN_TYPEHASH,\r\n        keccak256(bytes(name)),\r\n        keccak256(bytes(ERC712_VERSION)),\r\n        address(this),\r\n        bytes32(getChainId())\r\n      )\r\n    );\r\n  }\r\n  function getDomainSeperator() public view returns (bytes32) {\r\n    return domainSeperator;\r\n  }\r\n  function getChainId() public view returns (uint256) {\r\n    uint256 id;\r\n    assembly {\r\n      id := chainid()\r\n    }\r\n    return id;\r\n  }\r\n  function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\r\n    return\r\n      keccak256(\r\n        abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\r\n      );\r\n  }\r\n}\r\n\r\ncontract NativeMetaTransaction is EIP712Base {\r\n  using SafeMath for uint256;\r\n  bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\r\n    bytes(\r\n      \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\r\n    )\r\n  );\r\n  event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\r\n  mapping(address => uint256) nonces;\r\n  struct MetaTransaction {\r\n    uint256 nonce;\r\n    address from;\r\n    bytes functionSignature;\r\n  }\r\n\r\n  function executeMetaTransaction(address userAddress, bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) public payable returns (bytes memory) {\r\n    MetaTransaction memory metaTx = MetaTransaction({\r\n      nonce: nonces[userAddress],\r\n      from: userAddress,\r\n      functionSignature: functionSignature\r\n    });\r\n    require(\r\n      verify(userAddress, metaTx, sigR, sigS, sigV),\r\n      \"Signer and signature do not match\"\r\n    );\r\n    nonces[userAddress] = nonces[userAddress].add(1);\r\n    emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\r\n    (bool success, bytes memory returnData) = address(this).call(\r\n      abi.encodePacked(functionSignature, userAddress)\r\n    );\r\n    require(success, \"Function call not successful\");\r\n    return returnData;\r\n  }\r\n  function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\r\n    return\r\n      keccak256(\r\n        abi.encode(\r\n          META_TRANSACTION_TYPEHASH,\r\n          metaTx.nonce,\r\n          metaTx.from,\r\n          keccak256(metaTx.functionSignature)\r\n        )\r\n      );\r\n  }\r\n  function getNonce(address user) public view returns (uint256 nonce) {\r\n    nonce = nonces[user];\r\n  }\r\n  function verify(address signer, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV) internal view returns (bool) {\r\n    require(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\r\n    return\r\n      signer ==\r\n      ecrecover(\r\n        toTypedMessageHash(hashMetaTransaction(metaTx)),\r\n        sigV,\r\n        sigR,\r\n        sigS\r\n      );\r\n  }\r\n}\r\n\r\ninterface IERC165 {\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n    return interfaceId == type(IERC165).interfaceId;\r\n  }\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n  function approve(address to, uint256 tokenId) external;\r\n  function getApproved(uint256 tokenId) external view returns (address operator);\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n  function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n  }\r\n  function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n  function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ninterface IERC721Receiver {\r\n  function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n  using Address for address;\r\n  using Strings for uint256;\r\n  string private _name;\r\n  string private _symbol;\r\n  mapping(uint256 => address) private _owners;\r\n  mapping(address => uint256) private _balances;\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n  function balanceOf(address owner) public view virtual override returns (uint256) {\r\n    require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n    return _balances[owner];\r\n  }\r\n  function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n    address owner = _owners[tokenId];\r\n    require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n    return owner;\r\n  }\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n  function approve(address to, uint256 tokenId) public virtual override {\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    require(to != owner, \"ERC721: approval to current owner\");\r\n    require(\r\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n      \"ERC721: approve caller is not owner nor approved for all\"\r\n    );\r\n    _approve(to, tokenId);\r\n  }\r\n  function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n    require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n  function setApprovalForAll(address operator, bool approved) public virtual override {\r\n    _setApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n  function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    _transfer(from, to, tokenId);\r\n  }\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    _safeTransfer(from, to, tokenId, _data);\r\n  }\r\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n    _transfer(from, to, tokenId);\r\n    require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n  }\r\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n    return _owners[tokenId] != address(0);\r\n  }\r\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n    require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n  }\r\n  function _safeMint(address to, uint256 tokenId) internal virtual {\r\n    _safeMint(to, tokenId, \"\");\r\n  }\r\n  function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n    _mint(to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(address(0), to, tokenId, _data),\r\n      \"ERC721: transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n  function _mint(address to, uint256 tokenId) internal virtual {\r\n    require(to != address(0), \"ERC721: mint to the zero address\");\r\n    require(!_exists(tokenId), \"ERC721: token already minted\");\r\n    _beforeTokenTransfer(address(0), to, tokenId);\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n  function _burn(uint256 tokenId) internal virtual {\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    _beforeTokenTransfer(owner, address(0), tokenId);\r\n    _approve(address(0), tokenId);\r\n    _balances[owner] -= 1;\r\n    delete _owners[tokenId];\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n  function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n    require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n    require(to != address(0), \"ERC721: transfer to the zero address\");\r\n    _beforeTokenTransfer(from, to, tokenId);\r\n    _approve(address(0), tokenId);\r\n    _balances[from] -= 1;\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n  function _approve(address to, uint256 tokenId) internal virtual {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n  }\r\n  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n    require(owner != operator, \"ERC721: approve to caller\");\r\n    _operatorApprovals[owner][operator] = approved;\r\n    emit ApprovalForAll(owner, operator, approved);\r\n  }\r\n  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n        return retval == IERC721Receiver.onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\r\n}\r\n\r\ncontract Escrow is Ownable {\r\n  using Address for address payable;\r\n  event Deposited(address indexed payee, uint256 weiAmount);\r\n  event Withdrawn(address indexed payee, uint256 weiAmount);\r\n  mapping(address => uint256) private _deposits;\r\n\r\n  function depositsOf(address payee) public view returns (uint256) {\r\n    return _deposits[payee];\r\n  }\r\n  function deposit(address payee) public payable virtual onlyOwner {\r\n    uint256 amount = msg.value;\r\n    _deposits[payee] += amount;\r\n    emit Deposited(payee, amount);\r\n  }\r\n  function withdraw(address payable payee) public virtual onlyOwner {\r\n    uint256 payment = _deposits[payee];\r\n    _deposits[payee] = 0;\r\n    payee.sendValue(payment);\r\n    emit Withdrawn(payee, payment);\r\n  }\r\n}\r\n\r\nabstract contract PullPayment {\r\n  Escrow private immutable _escrow;\r\n  constructor() {\r\n    _escrow = new Escrow();\r\n  }\r\n  function withdrawPayments(address payable payee) public virtual {\r\n    _escrow.withdraw(payee);\r\n  }\r\n  function payments(address dest) public view returns (uint256) {\r\n    return _escrow.depositsOf(dest);\r\n  }\r\n  function _asyncTransfer(address dest, uint256 amount) internal virtual {\r\n    _escrow.deposit{value: amount}(dest);\r\n  }\r\n}\r\n\r\ncontract OwnableDelegateProxy {}\r\ncontract ProxyRegistry {\r\n  mapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\ncontract LastDragonsGen1 is ERC721, PullPayment, ContextMixin, NativeMetaTransaction, Ownable {\r\n  using SafeMath for uint256;\r\n  using Counters for Counters.Counter;\r\n\r\n  uint256 public constant TOTAL_SUPPLY = 2222;\r\n  uint256 public constant MINT_PRICE = 0.08 ether;\r\n\r\n  Counters.Counter private _nextTokenId;\r\n  address proxyRegistryAddress;\r\n  string public baseTokenURI;\r\n  \r\n  constructor() ERC721(\"LastDragons Gen1\", \"LDG1\") {\r\n    baseTokenURI = \"\";\r\n    _initializeEIP712(\"LastDragons Gen1\");\r\n  }\r\n  function mintToAdmin(address recipient) public onlyOwner returns (uint256) {\r\n    uint256 tokenId = _nextTokenId.current();\r\n    require(tokenId < TOTAL_SUPPLY, \"Max supply reached\");\r\n    _nextTokenId.increment();\r\n    uint256 newItemId = _nextTokenId.current();\r\n    _safeMint(recipient, newItemId);\r\n    return newItemId;\r\n  }\r\n  function mintTo(address recipient) public payable returns (uint256) {\r\n    uint256 tokenId = _nextTokenId.current();\r\n    require(tokenId < TOTAL_SUPPLY, \"Max supply reached\");\r\n    require(msg.value == MINT_PRICE, \"Transaction value did not equal the mint price\");\r\n    _nextTokenId.increment();\r\n    uint256 newItemId = _nextTokenId.current();\r\n    _safeMint(recipient, newItemId);\r\n    return newItemId;\r\n  }\r\n  function totalSupply() public view returns (uint256) {\r\n    return _nextTokenId.current();\r\n  }\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n    require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n    string memory baseURI = baseTokenURI;\r\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, Strings.toString(_tokenId))) : \"\";\r\n  }\r\n  function setProxyRegistryAddress(address _proxyRegistryAddress) public onlyOwner() {\r\n    proxyRegistryAddress = _proxyRegistryAddress;\r\n  }\r\n  function setBaseTokenURI(string memory _baseTokenURI) public onlyOwner {\r\n    baseTokenURI = _baseTokenURI;\r\n  }\r\n  function isApprovedForAll(address owner, address operator) override public view returns (bool) {\r\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n    if (address(proxyRegistry.proxies(owner)) == operator) {\r\n      return true;\r\n    }\r\n    return super.isApprovedForAll(owner, operator);\r\n  }\r\n  function _msgSender() internal override view returns (address sender) {\r\n    return ContextMixin.msgSender();\r\n  }\r\n  function withdrawPayments(address payable payee) public override onlyOwner virtual {\r\n    super.withdrawPayments(payee);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintToAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LastDragonsGen1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://926258c88a25a02e8a6049ec9a40396d0be61062793149b7939fd1167d3c6feb"}]}