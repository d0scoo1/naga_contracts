{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/whitelist/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\nimport \\\"../interfaces/IAPContract.sol\\\";\\r\\n\\r\\ncontract Whitelist {\\r\\n    uint256 groupId; // Id of the latest whitelist group created.\\r\\n    address public whiteListManager; // Address of the WhiteList Manager.\\r\\n    address public apContract;\\r\\n    address public yieldsterDAO;\\r\\n\\r\\n    struct WhitelistGroup {\\r\\n        mapping(address => bool) members;\\r\\n        mapping(address => bool) whitelistGroupAdmin;\\r\\n        bool created;\\r\\n    }\\r\\n    mapping(uint256 => WhitelistGroup) private whitelistGroups; // Mapping of groupId to Whitelist group.\\r\\n    event GroupCreated(address, uint256);\\r\\n\\r\\n    constructor(address _apContract){\\r\\n        apContract = _apContract;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to change the aps contract of Yieldster.\\r\\n    /// @param _apContract Address of the aps.\\r\\n    function changeAPContract(address _apContract) public {\\r\\n        require(\\r\\n            msg.sender == IAPContract(apContract).yieldsterGOD(),\\r\\n            \\\"unauthorized\\\"\\r\\n        );\\r\\n        apContract = _apContract;\\r\\n    }\\r\\n\\r\\n    /// @dev Function that returns if a whitelist group is exist.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    function _isGroup(uint256 _groupId) private view returns (bool) {\\r\\n        return whitelistGroups[_groupId].created;\\r\\n    }\\r\\n\\r\\n    /// @dev Function that returns if the msg.sender is the whitelist group admin.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    function _isGroupAdmin(uint256 _groupId) public view returns (bool) {\\r\\n        return whitelistGroups[_groupId].whitelistGroupAdmin[msg.sender];\\r\\n    }\\r\\n\\r\\n    /// @dev Function to create a new whitelist group.\\r\\n    /// @param _whitelistGroupAdmin Address of the whitelist group admin.\\r\\n    function createGroup(address _whitelistGroupAdmin)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(IAPContract(apContract).vaultsCount(msg.sender)>0,\\\"Not a vault admin\\\");\\r\\n        groupId += 1;\\r\\n        require(!whitelistGroups[groupId].created, \\\"Group already exists\\\");\\r\\n        WhitelistGroup storage newGroup = whitelistGroups[groupId];\\r\\n        whitelistGroups[groupId].members[_whitelistGroupAdmin] = true;\\r\\n        whitelistGroups[groupId].whitelistGroupAdmin[\\r\\n            _whitelistGroupAdmin\\r\\n        ] = true;\\r\\n        newGroup.created = true;\\r\\n\\r\\n        whitelistGroups[groupId].members[msg.sender] = true;\\r\\n        emit GroupCreated(msg.sender, groupId);\\r\\n        return groupId;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to delete a whitelist group.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    function deleteGroup(uint256 _groupId) public {\\r\\n        require(_isGroup(_groupId), \\\"Group doesn't exist!\\\");\\r\\n        require(\\r\\n            _isGroupAdmin(_groupId),\\r\\n            \\\"Only Whitelist Group admin is permitted for this operation\\\"\\r\\n        );\\r\\n        delete whitelistGroups[_groupId];\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add members to a whitelist group.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    /// @param _memberAddress List of address to be added to the whitelist group.\\r\\n    function addMembersToGroup(\\r\\n        uint256 _groupId,\\r\\n        address[] memory _memberAddress\\r\\n    ) public {\\r\\n        require(_isGroup(_groupId), \\\"Group doesn't exist!\\\");\\r\\n        require(\\r\\n            _isGroupAdmin(_groupId),\\r\\n            \\\"Only goup admin is permitted for this operation\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _memberAddress.length; i++) {\\r\\n            whitelistGroups[_groupId].members[_memberAddress[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to remove members from a whitelist group.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    /// @param _memberAddress List of address to be removed from the whitelist group.\\r\\n    function removeMembersFromGroup(\\r\\n        uint256 _groupId,\\r\\n        address[] memory _memberAddress\\r\\n    ) public {\\r\\n        require(_isGroup(_groupId), \\\"Group doesn't exist!\\\");\\r\\n        require(\\r\\n            _isGroupAdmin(_groupId),\\r\\n            \\\"Only Whitelist Group admin is permitted for this operation\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _memberAddress.length; i++) {\\r\\n            whitelistGroups[_groupId].members[_memberAddress[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to check if an address is a whitelisted address.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    /// @param _memberAddress Address to check.\\r\\n    function isMember(uint256 _groupId, address _memberAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_isGroup(_groupId), \\\"Group doesn't exist!\\\");\\r\\n        return whitelistGroups[_groupId].members[_memberAddress];\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add the whitelist admin of a group.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    /// @param _whitelistGroupAdmin Address of the new whitelist admin.\\r\\n    function addWhitelistAdmin(uint256 _groupId, address _whitelistGroupAdmin)\\r\\n        public\\r\\n    {\\r\\n        require(_isGroup(_groupId), \\\"Group doesn't exist!\\\");\\r\\n        require(\\r\\n            _isGroupAdmin(_groupId),\\r\\n            \\\"Only existing whitelist admin can perform this operation\\\"\\r\\n        );\\r\\n        whitelistGroups[_groupId].whitelistGroupAdmin[\\r\\n            _whitelistGroupAdmin\\r\\n        ] = true;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to remove the whitelist admin of a group.\\r\\n    /// @param _groupId Group Id of the whitelist group.\\r\\n    /// @param _whitelistGroupAdmin Address of the whitelist admin.\\r\\n    function removeWhitelistAdmin(\\r\\n        uint256 _groupId,\\r\\n        address _whitelistGroupAdmin\\r\\n    ) public {\\r\\n        require(_isGroup(_groupId), \\\"Group doesn't exist!\\\");\\r\\n        require(_whitelistGroupAdmin != msg.sender, \\\"Cannot remove yourself\\\");\\r\\n        require(\\r\\n            _isGroupAdmin(_groupId),\\r\\n            \\\"Only existing whitelist admin can perform this operation\\\"\\r\\n        );\\r\\n        delete whitelistGroups[_groupId].whitelistGroupAdmin[\\r\\n            _whitelistGroupAdmin\\r\\n        ];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAPContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IAPContract {\\r\\n    \\r\\n\\r\\n    function getUSDPrice(address) external view returns (uint256);\\r\\n    function stringUtils() external view returns (address);\\r\\n    function yieldsterGOD() external view returns (address);\\r\\n    function emergencyVault() external view returns (address);\\r\\n    function whitelistModule() external view returns (address);\\r\\n    function addVault(address,uint256[] calldata) external;\\r\\n    function setVaultSlippage(uint256) external;\\r\\n    function setVaultAssets(address[] calldata,address[] calldata,address[] calldata,address[] calldata) external;\\r\\n    function changeVaultAdmin(address _vaultAdmin) external;\\r\\n    function yieldsterDAO() external view returns (address);\\r\\n    function exchangeRegistry() external view returns (address);\\r\\n    function getVaultSlippage() external view returns (uint256);\\r\\n    function _isVaultAsset(address) external view returns (bool);\\r\\n    function yieldsterTreasury() external view returns (address);\\r\\n    function setVaultStatus(address) external;\\r\\n    function setVaultSmartStrategy(address, uint256) external;\\r\\n    function getWithdrawStrategy() external returns (address);\\r\\n    function getDepositStrategy() external returns (address);\\r\\n    function isDepositAsset(address) external view returns (bool);\\r\\n    function isWithdrawalAsset(address) external view returns (bool);\\r\\n    function getVaultManagementFee() external returns (address[] memory);\\r\\n    function safeMinter() external returns (address);\\r\\n    function safeUtils() external returns (address);\\r\\n    function getStrategyFromMinter(address) external view returns (address);\\r\\n    function sdkContract() external returns (address);\\r\\n    function getWETH()external view returns(address);\\r\\n    function calculateSlippage(address ,address, uint256, uint256)external view returns(uint256);\\r\\n    function vaultsCount(address) external view returns(uint256);\\r\\n    function getPlatformFeeStorage() external view returns(address);\\r\\n    function checkWalletAddress(address _walletAddress) external view returns(bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_apContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"_isGroupAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_memberAddress\",\"type\":\"address[]\"}],\"name\":\"addMembersToGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_whitelistGroupAdmin\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_apContract\",\"type\":\"address\"}],\"name\":\"changeAPContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistGroupAdmin\",\"type\":\"address\"}],\"name\":\"createGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_memberAddress\",\"type\":\"address[]\"}],\"name\":\"removeMembersFromGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_whitelistGroupAdmin\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldsterDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Whitelist", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000037b13dd88508a20601573bd97e74279ff38191f", "EVMVersion": "petersburg", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}