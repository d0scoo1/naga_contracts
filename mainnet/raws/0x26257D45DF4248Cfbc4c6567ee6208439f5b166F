{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTGrid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:  CC-BY-NC-4.0\\n// email \\\"licensing [at] pyxelchain.com\\\" for licensing information\\n// Pyxelchain Technologies v1.0.0 (NFTGrid.sol)\\n\\npragma solidity =0.8.7;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Billion Pyxel Project\\n * @author Nik Cimino @ncimino\\n *\\n * @dev the 1 billion pixels are arranged in a 32768 x 32768 = 1,073,741,824 pixel matrix\\n * to address all 1 billion pixels we break them into 256 pixel tiles which are 16 pixels x 16 pixels\\n * this infers a grid based addressing sytem of dimensions: 32768 / 16 = 2048 x 2048 = 4,194,304 tiles\\n *\\n * @custom:websites https://billionpyxelproject.com https://billionpixelproject.net\\n *   \\n * @notice to _significantly_ reduce gas we require that purchases are some increment of the layers defined above\\n *\\n * @notice this cotnract does not make use of ERC721Enumerable as the tokenIDs are not sequential\\n */\\n\\n/*\\n * this contract is not concerned with the individual pixels, but with the tiles that can be addressed and sold\\n * each tile is represented as an NFT, but each NFT can be different dimensions in layer 1 they are 1 tile each, but in layer 4 they are 16 tiles each\\n *   layer 1:    1 x    1 =         1 tile / index\\n *   layer 2:    2 x    2 =         4 tiles / index\\n *   layer 3:    4 x    4 =        16 tiles / index\\n *   layer 4:    8 x    8 =        64 tiles / index\\n *   layer 5:   16 x   16 =       256 tiles / index\\n *   layer 6:   32 x   32 =     1,024 tiles / index\\n *   layer 7:   64 x   64 =     4,096 tiles / index\\n *   layer 8:  128 x  128 =    16,384 tiles / index\\n *   layer 9:  256 x  256 =    65,536 tiles / index\\n *  layer 10:  512 x  512 =   262,144 tiles / index\\n *  layer 11: 1024 x 1024 = 1,048,576 tiles / index\\n *  layer 12: 2048 x 2048 = 4,194,304 tiles / index\\n * \\n * quad alignment:\\n *\\n *      layer 11    layer 12\\n *      ____N___   ________\\n *     /   /   /  /       /\\n *   W/---+---/E /       /\\n *   /___/___/  /_______/\\n *       S\\n */\\n\\ncontract NFTGrid is ERC721, Ownable, ReentrancyGuard {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n\\n    //// TYPES & STRUCTS\\n\\n    /**\\n     * @dev symetric: should be kept up-to-date with JS implementation\\n     * @notice layers enum interger value is used as 2 ^ Layer e.g. 2 ^ (x4=2) = 5, 2 ^ (x16=4) = 16\\n     *  there are a total of 12 sizes (0-11)\\n     * @dev these enums are uint256 / correct?\\n     */\\n    enum Size {\\n        X1,\\n        X2,\\n        X4,\\n        X8,\\n        X16,\\n        X32,\\n        X64,\\n        X128,\\n        X256,\\n        X512,\\n        X1024,\\n        X2048\\n    } // 2048 = 2^11 = 1 << 11\\n\\n    /**\\n     * @notice we model our grid system in the same what that the front-end displays are modeled, this is with 0,0 in the top left corner\\n     * x increases as we move to the right, but y increases as we move done\\n     * @dev max x and y is 2048 = 2 ^ 11 which can fit in a uint16, and since we need 4 values using 64 bits packs them all tight\\n     * @dev we model this so that we have logical coherency between our internal logic and the display systems of this logic\\n     * @dev x & y are the center of the quad\\n     */\\n    struct Rectangle {\\n        uint16 x;\\n        uint16 y;\\n        uint16 w;\\n        uint16 h;\\n    }\\n\\n    /**\\n     * @notice a quad cannot be owned after it has been divided\\n     * @dev the quads are the tokenIds which are an encoding of x,y,w,h\\n     */\\n    struct QuadTree {\\n        uint64 northeast;   // quads max index is 2 ^ 64 = 18,446,744,073,709,551,616\\n        uint64 northwest;   // however, this allows us to pack all 4 into a 256 bit slot\\n        uint64 southeast;\\n        uint64 southwest;\\n        Rectangle boundary; // 16 * 4 = 64 bits\\n        address owner;      // address are 20 bytes = 160 bits\\n        bool divided;       // bools are 1 byte = 8 bits  ... should also pack into a 256 bit slot, right? so 2 total?\\n        uint24 ownedCount;  // need 22 bits to represent full 2048x2048 count - total number of grid tiles owned under this quad (recursively)\\n    }\\n\\n    //// EVENTS\\n\\n    event ETHPriceChanged (\\n        uint256 oldPrice, uint256 newPrice\\n    );\\n\\n    event TokensUpdated (\\n        address[] tokenAddresses, uint256[] tokenPrices\\n    );\\n\\n    event BuyCreditWithETH (\\n        address indexed buyer, address indexed receiver, uint256 amountETH, uint256 amountPixels\\n    );\\n\\n    event BuyCreditWithToken (\\n        address indexed buyer, address indexed token, address indexed receiver, uint256 amountToken, uint256 amountPixels\\n    );\\n\\n    event TransferCredit (\\n        address indexed sender, address indexed receiver, uint256 amount\\n    );\\n\\n    //// MODIFIERS\\n\\n    modifier placementNotLocked() {\\n        require(!placementLocked, \\\"NFTG: placement locked\\\");\\n        _;\\n    }\\n\\n    modifier reserveNotLocked() {\\n        require(!reserveLocked, \\\"NFTG: reserve locked\\\");\\n        _;\\n    }\\n\\n    //// MEMBERS\\n\\n    uint16 constant public GRID_W = 2048;\\n    uint16 constant public GRID_H = 2048;\\n    uint256 constant public PIXELS_PER_TILE = 256;\\n\\n    bool public placementLocked;\\n    bool public reserveLocked;\\n    bool public permanentlyAllowCustomURIs;\\n    bool public allowCustomURIs = true;\\n    uint64 immutable public rootTokenId;\\n    uint256 public pricePerPixelInETH = 0.00004 ether;\\n    address[] public tokenAddresses; // e.g. USDC can be passed in @ $0.10/pixel = $25.60 per tile\\n    address[] public receivedAddresses;\\n    mapping (uint64 => QuadTree) public qtrees;\\n    mapping (address => uint256) public pricePerPixelInTokens;\\n    mapping (address => bool) public addressExists;\\n    mapping (address => uint256) public pixelCredits;\\n    mapping (address => uint256) public ownedPixels;\\n    mapping (uint256 => string) public tokenURIs;\\n    string public defaultURI;\\n    uint256 public totalPixelsOwned;\\n\\n    //// CONTRACT\\n\\n    constructor(address[] memory _tokenAddresses, uint256[] memory _tokenPrices) ERC721(\\\"Billion Pixel Project\\\", \\\"BPP\\\") {\\n        updateTokens(_tokenAddresses, _tokenPrices);\\n        uint64 qtreeTokenId = _createQTNode(address(0x0), GRID_W/2-1, GRID_H/2-1, GRID_W, GRID_H);\\n        rootTokenId = qtreeTokenId;\\n        _subdivideQTNode(qtreeTokenId);\\n    }\\n\\n    function getTokens() external view returns(address[] memory addresses, uint256[] memory prices) {\\n        addresses = new address[](tokenAddresses.length);\\n        prices = new uint256[](tokenAddresses.length);\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            address current = tokenAddresses[i];\\n            addresses[i] = current;\\n            prices[i] = pricePerPixelInTokens[current];\\n        }\\n    }\\n\\n    /**\\n     * @notice let each token have an independent URI as these will be owned and controlled by their owner\\n     */\\n    function tokenURI(uint256 _tokenId) public view virtual override returns(string memory uri) {\\n        require(_exists(_tokenId), \\\"NFTG: non-existant token\\\");\\n        if (!allowCustomURIs) {\\n            uri = _getDefaultURI(_tokenId);\\n        } else {\\n            uri = tokenURIs[_tokenId];\\n            if (bytes(uri).length == 0) {\\n                uri = _getDefaultURI(_tokenId);\\n            }\\n        }\\n    }\\n\\n    function _getDefaultURI(uint256 _tokenId) private view returns(string memory uri) {\\n        uri = bytes(defaultURI).length > 0 ? string(abi.encodePacked(defaultURI, _tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    function setDefaultURI(string memory uri) external onlyOwner {\\n        defaultURI = uri;\\n    }\\n\\n    function setTokenURI(uint256 _tokenId, string calldata _tokenUri) external virtual {\\n        require(_exists(_tokenId), \\\"NFTG: non-existant token\\\");\\n        require(allowCustomURIs, \\\"NFTG: custom URIs disabled\\\");\\n        QuadTree storage qtree = qtrees[uint64(_tokenId)];\\n        require(qtree.owner == msg.sender, \\\"NFTG: only owner can set URI\\\");\\n        tokenURIs[_tokenId] = _tokenUri;\\n    }\\n\\n    function updateTokens(address[] memory _tokenAddresses, uint256[] memory _tokenPrices) public onlyOwner {\\n        require(_tokenAddresses.length == _tokenPrices.length, \\\"NFTG: array length mismatch\\\");\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            pricePerPixelInTokens[tokenAddresses[i]] = 0;\\n        }\\n        tokenAddresses = _tokenAddresses; // set new below this line - clear old above\\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\\n            require(_tokenAddresses[i] != address(0), \\\"NFTG: token address 0\\\");\\n            require(_tokenPrices[i] != 0, \\\"NFTG: token price 0\\\");\\n            pricePerPixelInTokens[_tokenAddresses[i]] = _tokenPrices[i];\\n        }\\n        emit TokensUpdated(_tokenAddresses, _tokenPrices);\\n    }\\n\\n    /**\\n     * @notice controls ability of placement\\n     */\\n    function togglePlacementLock() external onlyOwner {\\n        placementLocked = !placementLocked;\\n    }\\n\\n    /**\\n     * @notice controls ability of users to reserve pixels\\n     */\\n    function toggleReserveLock() external onlyOwner {\\n        reserveLocked = !reserveLocked;\\n    }\\n\\n    /**\\n     * @notice controls ability of users to set their own URI\\n     */\\n    function toggleCustomURIs() external onlyOwner {\\n        require(!permanentlyAllowCustomURIs, \\\"NFTG: permanently enabled\\\");\\n        allowCustomURIs = !allowCustomURIs;\\n    }\\n\\n    /**\\n     * @notice controls ability of users to set their own URI\\n     */\\n    function permanentlyEnableCustomURIs() external onlyOwner {\\n        permanentlyAllowCustomURIs = true;\\n        allowCustomURIs = true;\\n    }\\n\\n    function setETHPrice(uint256 _pricePerPixel) external onlyOwner {\\n        emit ETHPriceChanged(pricePerPixelInETH, _pricePerPixel);\\n        pricePerPixelInETH = _pricePerPixel;\\n    }\\n\\n    function getPixelCredits(uint256 _start, uint256 _count) external view returns(address[] memory addresses, uint256[] memory balances) {\\n        require(_count > 0, \\\"NFTG: count is 0\\\");\\n        require(_start < receivedAddresses.length, \\\"NFTG: start too high\\\");\\n        uint256 stop = _start + _count;\\n        stop = (stop > receivedAddresses.length) ? receivedAddresses.length : stop;\\n        uint256 actualCount = stop - _start;\\n        addresses = new address[](actualCount);\\n        balances = new uint256[](actualCount);\\n        for (uint256 i = _start; i < stop; i++) {\\n            address current = receivedAddresses[i];\\n            addresses[i - _start] = current;\\n            balances[i - _start] = pixelCredits[current];\\n        }\\n    }\\n\\n    function transferCredits(address _receiver, uint256 _amount) external reserveNotLocked {\\n        require(pixelCredits[msg.sender] >= _amount, \\\"NFTG: not enough credit\\\");\\n        require(_receiver != address(0), \\\"NFTG: address 0\\\");\\n        emit TransferCredit(msg.sender, _receiver, _amount);\\n        pixelCredits[msg.sender] -= _amount;\\n        pixelCredits[_receiver] += _amount;\\n    }\\n\\n    /**\\n     * @notice purchases are blocked if a child block is owned by current buyer\\n     * @param _tokenId the tokenId of the quad to buy using Tokens\\n     */\\n    function buyWithToken(address _tokenAddress, uint64 _tokenId) external nonReentrant placementNotLocked {\\n        _buyWithToken(_tokenAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @param _tokenIds the tokenIds of the quads to buy using Tokens\\n    */\\n    function multiBuyWithToken(address _tokenAddress, uint64[] calldata _tokenIds) external nonReentrant placementNotLocked {\\n        for(uint i = 0; i < _tokenIds.length; i++) {\\n            _buyWithToken(_tokenAddress, _tokenIds[i]);\\n        }\\n    }\\n\\n    function _buyWithToken(address _tokenAddress, uint64 _tokenId) private {\\n        uint256 pricePerPixel = pricePerPixelInTokens[_tokenAddress];\\n        require(pricePerPixel != 0, \\\"NFTG: token not supported\\\");\\n        Rectangle memory range = getRangeFromTokenId(_tokenId);\\n        uint256 price = _price(pricePerPixel, range);\\n        _buyCreditWithToken(_tokenAddress, msg.sender, price);\\n        _placeQTNode(_tokenId);\\n    }\\n\\n    /**\\n     * @notice purchases are blocked if a child block is owned by current buyer\\n     * @param _tokenId the tokenId of the quad to buy using ETH\\n     */\\n    function buyWithETH(uint64 _tokenId) external payable nonReentrant placementNotLocked {\\n        _buyCreditWithETH(msg.sender);\\n        _placeQTNode(_tokenId);\\n    }\\n\\n    /**\\n     * @param _tokenIds the tokenIds of the quads to buy using ETH\\n    */\\n    function multiBuyWithETH(uint64[] calldata _tokenIds) external payable nonReentrant placementNotLocked {\\n        _buyCreditWithETH(msg.sender);\\n        for(uint i = 0; i < _tokenIds.length; i++) {\\n            _placeQTNode(_tokenIds[i]);\\n        }\\n    }\\n\\n    function _placeQTNode(uint64 _tokenId) private {\\n        Rectangle memory range = getRangeFromTokenId(_tokenId);\\n        uint256 pixelsToPlace = uint256(range.w) * uint256(range.h) * PIXELS_PER_TILE;\\n        uint256 pixelBalance = pixelCredits[msg.sender];\\n        require(pixelsToPlace <= pixelBalance, \\\"NFTG: not enough credit\\\");\\n        pixelCredits[msg.sender] -= pixelsToPlace;\\n        _mintQTNode(_tokenId);\\n    }\\n\\n    /**\\n     * @notice the amount of {msg.value} is what will be used to convert into pixel credits\\n     * @param _receiveAddress is the address receiving the pixel credits\\n     */\\n    // slither-disable-next-line reentrancy-events\\n    function buyCreditWithETH(address _receiveAddress) external payable nonReentrant reserveNotLocked {\\n        _buyCreditWithETH(_receiveAddress);\\n    }\\n\\n    function _buyCreditWithETH(address _receiveAddress) private {\\n        uint256 credit = msg.value / pricePerPixelInETH;\\n        require(credit > 0, \\\"NFTG: not enough ETH sent\\\");\\n        emit BuyCreditWithETH(msg.sender, _receiveAddress, msg.value, credit);\\n        pixelCredits[_receiveAddress] += credit;\\n        ownedPixels[_receiveAddress] += credit;\\n        totalPixelsOwned += credit;\\n        if (!addressExists[_receiveAddress]) {\\n            receivedAddresses.push(_receiveAddress); \\n            addressExists[_receiveAddress] = true;\\n        }\\n        Address.sendValue(payable(owner()), msg.value);\\n    }\\n\\n    /**\\n     * @param _tokenAddress is the address of the token being used to purchase the pixels\\n     * @param _receiveAddress is the address receiving the pixel credits\\n     * @param _amount is the amount in tokens - if using a stable like USDC, then this represent dollar value in wei\\n     */\\n    function buyCreditWithToken(address _tokenAddress, address _receiveAddress, uint256 _amount) external nonReentrant reserveNotLocked {\\n        _buyCreditWithToken(_tokenAddress, _receiveAddress, _amount);\\n    }\\n\\n    function _buyCreditWithToken(address _tokenAddress, address _receiveAddress, uint256 _amount) private {\\n        uint256 pricePerPixel = pricePerPixelInTokens[_tokenAddress];\\n        require(pricePerPixel != 0, \\\"NFTG: token not supported\\\");\\n        uint256 credit = _amount / pricePerPixel;\\n        require(credit > 0, \\\"NFTG: not enough tokens sent\\\");\\n        emit BuyCreditWithToken(msg.sender, _tokenAddress, _receiveAddress, _amount, credit);\\n        pixelCredits[_receiveAddress] += credit;\\n        ownedPixels[_receiveAddress] += credit;\\n        totalPixelsOwned += credit;\\n        if (!addressExists[_receiveAddress]) {\\n            receivedAddresses.push(_receiveAddress); \\n            addressExists[_receiveAddress] = true;\\n        }\\n        IERC20(_tokenAddress).safeTransferFrom(msg.sender, owner(), _amount);\\n    }\\n\\n    /**\\n     * @notice allows already purchased pixels to be allocated to specific token IDs\\n     * @dev will fail if pixel balance is insufficient\\n     * @param _tokenIds the tokenIds of the quads to place\\n     */\\n    function placePixels(uint64[] calldata _tokenIds) external nonReentrant placementNotLocked {\\n        for(uint i = 0; i < _tokenIds.length; i++) {\\n            _placeQTNode(_tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev only the leafs can be purchased\\n     * @dev quads are only divided if someone has owns a child (via subdivde or buyWith*)\\n     */\\n    function _mintQTNode(uint64 _tokenId) private {\\n        QuadTree storage qtree = qtrees[uint64(_tokenId)];\\n        require(!qtree.divided, \\\"NFTG: cannot buy if divided\\\");\\n        require(qtree.owner == address(0x0), \\\"NFTG: already owned\\\");\\n        \\n        revertIfParentOwned(_tokenId);\\n        _revertIfChildOwned(qtree); // needed if burning\\n        Rectangle memory range = getRangeFromTokenId(_tokenId);\\n        uint24 increaseCount = uint24(range.w) * uint24(range.h);\\n        _divideAndCount(getParentTokenId(_tokenId), increaseCount);\\n        \\n        qtree.owner = msg.sender;\\n        qtree.ownedCount = increaseCount;\\n\\n        _safeMint(msg.sender, _tokenId);\\n    }\\n\\n    function _price(uint256 _pricePerPixel, Rectangle memory _rect) private pure returns(uint256 price) {\\n        price = _pricePerPixel * PIXELS_PER_TILE * uint256(_rect.w) * uint256(_rect.h);\\n    }\\n    \\n    /**\\n     * @notice override the ERC720 function so that we can update user credits\\n     * @dev this logic only executes if pixels are being transferred from one user to another\\n     * @dev this contract doesn't support burning of these NFTs so we don't need to subtract on burn (_to == 0)\\n     * @dev this contract increases the owned count on reserve not on minting (_from == 0) we ignores those as they are already added\\n     */\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override {\\n        if ((_from != address(0)) && (_to != address(0))) {\\n            Rectangle memory range = getRangeFromTokenId(uint64(_tokenId));\\n            uint256 credit = uint256(range.w) * uint256(range.h) * PIXELS_PER_TILE;\\n            ownedPixels[_from] -= credit;\\n            ownedPixels[_to] += credit;\\n        }\\n    }\\n\\n    /**\\n     * @notice calculates the price of multiple quads in ETH\\n     * @param _tokenIds the tokenIds of the quads to get the ETH prices of\\n     */\\n    // function getMultiETHPrice(uint64[] calldata _tokenIds) external view returns(uint price) {\\n    //     for(uint i = 0; i < _tokenIds.length; i++) {\\n    //         price += getETHPrice(_tokenIds[i]);\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice calculates the price of a quad in ETH\\n     * @param _tokenId the tokenId of the quad to get the ETH price of\\n     */\\n    function getETHPrice(uint64 _tokenId) external view returns(uint price) {\\n        Rectangle memory range = getRangeFromTokenId(_tokenId);\\n        price = _price(pricePerPixelInETH, range);\\n    }\\n\\n    /**\\n     * @notice calculates the price of multiple quads in tokens\\n     * @param _tokenIds the tokenIds of the quads to get the token prices of\\n     */\\n    // function getMultiTokenPrice(uint64[] calldata _tokenIds) external view returns(uint price) {\\n    //     for(uint i = 0; i < _tokenIds.length; i++) {\\n    //         price += getTokenPrice(_tokenIds[i]);\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice calculates the price of a quad in Tokens\\n     * @param _tokenId the tokenId of the quad to get the Token price of\\n     */\\n    function getTokenPrice(address _tokenAddress, uint64 _tokenId) external view returns(uint price) {\\n        uint256 pricePerPixel = pricePerPixelInTokens[_tokenAddress];\\n        require(pricePerPixel != 0, \\\"NFTG: token not supported\\\");\\n        Rectangle memory range = getRangeFromTokenId(_tokenId);\\n        price = _price(pricePerPixel, range);\\n    }\\n\\n    /**\\n     * @notice this function subdivides the quad \\n     * @dev don't need to check the qtree of X2048 was divided in ctor\\n     */\\n    function _divideAndCount(uint64 _tokenId, uint24 _increaseBy) private {\\n        QuadTree storage qtree = qtrees[_tokenId];\\n        if (_tokenId != rootTokenId) {\\n            uint64 parentTokenId = getParentTokenId(_tokenId);\\n            _divideAndCount(parentTokenId, _increaseBy);\\n        }\\n        if (!qtree.divided) {\\n            _subdivideQTNode(_tokenId);\\n        }\\n        qtree.ownedCount += _increaseBy;\\n    }\\n\\n    /**\\n     * useful for checking if any child is owned\\n     */\\n    function revertIfChildOwned(uint64 _tokenId) external view {\\n        QuadTree memory qtree = qtrees[_tokenId];\\n        _revertIfChildOwned(qtree);\\n    }\\n\\n    function _revertIfChildOwned(QuadTree memory _qtree) private pure {\\n        require(_qtree.ownedCount == 0, \\\"NFTG: child owned\\\");\\n    }\\n\\n    /**\\n     * useful for checking if any parent is owned\\n     */\\n    function revertIfParentOwned(uint64 _tokenId) public view {\\n        uint64 parentTokenId = _tokenId;\\n        while (parentTokenId != rootTokenId) { // NOTE: don't need to check the parent of X2048\\n            parentTokenId = getParentTokenId(parentTokenId);\\n            QuadTree memory parent = qtrees[parentTokenId];\\n            require(parent.owner == address(0x0), \\\"NFTG: parent owned\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev symetric: should be kept up-to-date with JS implementation\\n     * @notice calculates a parent tile tokenId from a child - it is known that the parents w/h will be 2x the child,\\n     * and from that we can determine the quad using it's x/y\\n     * @param _tokenId the tokenId of the quad to get the parent range of\\n     */\\n    function getParentRange(uint64 _tokenId) public pure returns(Rectangle memory parent) {\\n        // parent is child until assignment (to save gas)...\\n        parent = getRangeFromTokenId(_tokenId);\\n        uint16 width = 2 * parent.w;\\n        uint16 height = 2 * parent.h;\\n        uint16 tileIndexX = calculateIndex(parent.x, parent.w);\\n        uint16 tileIndexY = calculateIndex(parent.y, parent.h);\\n        // slither-disable-next-line divide-before-multiply\\n        parent.x = tileIndexX / 2 * width + width / 2 - 1; // note: division here truncates and this is intended when going to indexes\\n        // slither-disable-next-line divide-before-multiply\\n        parent.y = tileIndexY / 2 * height + height / 2 - 1;\\n        parent.w = width;\\n        parent.h = height;\\n        validate(parent);\\n    }\\n\\n    /**\\n     * index layout:\\n     *    layer 11    layer 12\\n     *      _0___1__   ____0___\\n     *   0 /   /   /  /       /\\n     *    /---+---/ 0/       /\\n     * 1 /___/___/  /_______/\\n     * x=127+256,y=127 w=256   x=0,y=0 w=1  special case for dimension of 1 since we move up and left\\n     * x=w/2-1+index*w         x=index*w\\n     * index*w=x-w/2+1\\n     * index=(x-w/2+1)/w\\n     */\\n\\n    /**\\n     * @dev this function does not check values - it is presumed that the values have already passed 'validate'\\n     * @param _value is x or y\\n     * @param _dimension is w or h (respectively)\\n     * @return index is the index starting at 0 and going to w/GRID_W - 1 or h/GRID_H - 1\\n     *      the indexes of the tiles are the tokenId of the column or row of that tile (based on dimension)\\n     */\\n\\n    function calculateIndex(uint16 _value, uint16 _dimension) public pure returns(uint16 index) {\\n        index = (_dimension == 1) ? (_value / _dimension) : ((_value + 1 - _dimension/2) / _dimension);\\n    }\\n\\n    /**\\n     * @dev symetric: should be kept up-to-date with JS implementation\\n     * @notice calculates a parent tile tokenId from a child\\n     * @param _tokenId the tokenId of the quad to get the parent range of\\n     */\\n    function getParentTokenId(uint64 _tokenId) public pure returns(uint64 parentTokenId) {\\n        parentTokenId = _getTokenIdFromRangeNoCheck(getParentRange(_tokenId));\\n    }\\n\\n    /**\\n     * @notice splits a tile into a quarter (a.k.a. quad)\\n     * @dev there are ne, nw, se, sw quads on the QuadTrees\\n     * @notice the quads are stored as tokenIds here not actual other QuadTrees\\n     */\\n    function subdivide(uint256 _tokenId) external placementNotLocked { \\n        QuadTree memory qtree = qtrees[uint64(_tokenId)];\\n        require(!qtree.divided, \\\"NFTG: already divided\\\");\\n        require(qtree.owner == msg.sender, \\\"NFTG: only owner can subdivide\\\");\\n        _subdivideQTNode(uint64(_tokenId));\\n    }\\n\\n    /**\\n     * @notice quad coordinates are at the center of the quad - this make dividing coords relative...\\n     * for root: x=1023, y=1023, w=2048, h=2048\\n     *  wChild = wParent/2 = 1024\\n     *  currently: xParent + wChild/2 = xParent + wParent/4 > 1023 + 512 = 1535\\n     * @dev special care was taken when writing this function so that this function does not transfer any ownership!\\n     */\\n    function _subdivideQTNode(uint64 _tokenId) private { \\n        QuadTree storage qtree = qtrees[_tokenId];\\n        uint16 x = qtree.boundary.x;\\n        uint16 y = qtree.boundary.y;\\n        uint16 w = qtree.boundary.w;\\n        uint16 h = qtree.boundary.h;\\n        require(w > 1 && h > 1, \\\"NFTG: cannot divide\\\"); // cannot divide w or h=1 and 0 is not expected\\n        if (qtree.owner != address(0x0)) {\\n            _burn(uint256(_tokenId));\\n        }\\n        // special case for w|h=2\\n        // X2:0,0:x,y = 1,0 & 0,0 & 1,1 & 0,1\\n        // X2:1,0:x,y = 2,0 & 2,0 & 2,2 & 0,2\\n        // X2:1,1:x,y = 2,1 & 1,1 & 2,2 & 1,2\\n        // X2:2,2:x,y = 4,3 & 3,3 & 4,4 & 3,4\\n        if ((w == 2) || (h==2)) {\\n            qtree.northeast = _createQTNode(qtree.owner, x + 1, y - 0, w/2, h/2);\\n            qtree.northwest = _createQTNode(qtree.owner, x - 0, y - 0, w/2, h/2);\\n            qtree.southeast = _createQTNode(qtree.owner, x + 1, y + 1, w/2, h/2);\\n            qtree.southwest = _createQTNode(qtree.owner, x - 0, y + 1, w/2, h/2);\\n        } else {\\n            qtree.northeast = _createQTNode(qtree.owner, x + w/4, y - h/4, w/2, h/2);\\n            qtree.northwest = _createQTNode(qtree.owner, x - w/4, y - h/4, w/2, h/2);\\n            qtree.southeast = _createQTNode(qtree.owner, x + w/4, y + h/4, w/2, h/2);\\n            qtree.southwest = _createQTNode(qtree.owner, x - w/4, y + h/4, w/2, h/2);\\n        }\\n        qtree.divided = true;\\n        qtree.owner = address(0x0);\\n    }\\n\\n    /**\\n     * @notice creates a QuadTree \\n     * @return tokenId the tokenId of the quad\\n     */\\n    function _createQTNode(address _owner, uint16 _x, uint16 _y, uint16 _w, uint16 _h) private returns(uint64 tokenId) {\\n        Rectangle memory boundary = Rectangle(_x, _y, _w, _h);\\n        // console.log(\\\"_x\\\", _x, \\\"_y\\\", _y);\\n        // console.log(\\\"_w\\\", _w, \\\"_h\\\", _h);\\n        tokenId = getTokenIdFromRange(boundary);\\n        QuadTree storage qtree = qtrees[tokenId];\\n        qtree.boundary = boundary;\\n        qtree.owner = _owner;\\n        if (_owner != address(0)) {\\n            _safeMint(_owner, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev symetric: should be kept up-to-date with JS implementation\\n     * entokenIdd tokenId: 0x<X:2 bytes>_<Y:2 bytes>_<W:2 bytes>_wers of 2 are 0x1 = 1, 0x10 = 2, 0x100 = 4, etc.\\n     *    4: 0x100 & (0x100 - 1) = 0x100 & 0x011 = 0x000\\n     * negative tests:\\n     *    7: 0x111 & (0x111 - 1) = 0x111 & 0x110 = 0x110\\n     *    5: 0x101 & (0x101 - 1) = 0x101 & 0x100 = 0x100\\n     * @notice for the x & y validation, these values are always in the middle of the first tile (0.5 * w, 0.5 * h) and are then at increments of w & h\\n     * therefor we can use the modulo operator and check that the remainder is precisely the offset:\\n     * @notice we offset x & y left one and up one so that for X1 the w=1/h=1 has x=0/y=0 and just as well for X2 w=2/h=2 has x=0,y=0\\n     *    the x & y values range from 0:w-1 and 0:h-1\\n     *    special care should be taken around w=1 and w=2 as the first tile for both is at x=0 and y=0 and\\n     *      for w=1 max x&y=2047 for w=2 max x&y=2046\\n     *<H:2 bytes> = 8 bytes = 64 bits (4 hex represent 2 bytes)\\n     * to get x we right shift by 6 bytes: 0x0000_0000_0000_<X:2 bytes>\\n     * to get y we right shift by 4 bytes & 0xFFFF: 0x0000_0000_<X:2 bytes>_<Y:2 bytes> & 0xFFFF = 0x0000_0000_0000_<Y:2 bytes>\\n     */\\n    function getRangeFromTokenId(uint64 _tokenId) public pure returns(Rectangle memory range) {\\n        uint16 mask = 0xFFFF;\\n        range.x = uint16((_tokenId >> 6 * 8) & mask);\\n        range.y = uint16((_tokenId >> 4 * 8) & mask);\\n        range.w = uint16((_tokenId >> 2 * 8) & mask);\\n        range.h = uint16(_tokenId & mask);\\n        validate(range);\\n    }\\n\\n    /**\\n     * @dev symetric: should be kept up-to-date with JS implementation\\n     * entokenIdd tokenId: 0x<X:2 bytes><Y:2 bytes><W:2 bytes><H:2 bytes> = 8 bytes = 64 bits\\n     */\\n    function getTokenIdFromRange(Rectangle memory _range) public pure returns(uint64 tokenId) {\\n        validate(_range);\\n        tokenId = _getTokenIdFromRangeNoCheck(_range);\\n    }\\n\\n    function _getTokenIdFromRangeNoCheck(Rectangle memory _range) private pure returns(uint64 tokenId) {\\n        tokenId = (uint64(_range.x) << 6 * 8) + (uint64(_range.y) << 4 * 8) + (uint64(_range.w) << 2 * 8) + uint64(_range.h);\\n    }\\n\\n    /**\\n     * @dev symetric: should be kept up-to-date with JS implementation\\n     * @notice the w and h must be a power of 2 and instead of comparing to all of the values in the enum, we just check it using:\\n     *    N & (N - 1)  this works because all powers of 2 are 0x1 = 1, 0x10 = 2, 0x100 = 4, etc.\\n     *    4: 0x100 & (0x100 - 1) = 0x100 & 0x011 = 0x000\\n     * negative tests:\\n     *    7: 0x111 & (0x111 - 1) = 0x111 & 0x110 = 0x110\\n     *    5: 0x101 & (0x101 - 1) = 0x101 & 0x100 = 0x100\\n     * @notice for the x & y validation, these values are always in the middle of the first tile (0.5 * w, 0.5 * h) and are then at increments of w & h\\n     * there for we can use the modulo operator and check that the remainder is precisely the offset:\\n     * @notice we offset x & y left one and up one so that for X1 the w=1/h=1 has x=0/y=0 and just as well for X2 w=2/h=2 has x=0,y=0\\n     *    the x & y values range from 0:w-1 and 0:h-1\\n     *    special care should be taken around w=1 and w=2 as the first tile for both is at x=0 and y=0 and\\n     *      for w=1 max x&y=2047 for w=2 max x&y=2046\\n     */\\n    function validate(Rectangle memory _range) public pure {\\n        require((_range.x <= GRID_W - 1), \\\"NFTG: x is out-of-bounds\\\");\\n        require((_range.y <= GRID_H - 1), \\\"NFTG: y is out-of-bounds\\\");\\n        require((_range.w > 0), \\\"NFTG: w must be greater than 0\\\");\\n        require((_range.h > 0), \\\"NFTG: h must be greater than 0\\\");\\n        require((_range.w <= GRID_W), \\\"NFTG: w is too large\\\");\\n        require((_range.h <= GRID_H), \\\"NFTG: h is too large\\\");\\n        require((_range.w & (_range.w - 1) == 0), \\\"NFTG: w is not a power of 2\\\"); \\n        require((_range.h & (_range.h - 1) == 0), \\\"NFTG: h is not a power of 2\\\");\\n        uint16 xMidOffset = _range.w / 2; // for w=1 xmid=0, w=2 xmid=1, w=4 xmid=2, etc.\\n        uint16 yMidOffset = _range.h / 2;\\n        // for w=1 and x=2047: (2047+1)%1=0, w=2 and x=1023: (1023+1)%2=0, w=4 and x=255: (255+1)%4=0\\n        require(((_range.x + 1) % _range.w) == xMidOffset, \\\"NFTG: x is not a multiple of w\\\");\\n        require(((_range.y + 1) % _range.h) == yMidOffset, \\\"NFTG: y is not a multiple of h\\\");\\n    }\\n\\n    //// BOILERPLATE\\n    \\n    // receive eth with no calldata\\n    // see: https://blog.soliditylang.org/2020/03/26/fallback-receive-split/\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    // receive eth with no function match\\n    fallback() external payable {}\\n\\n    function withdraw() external onlyOwner {\\n        address payable owner = payable(owner());\\n        owner.transfer(address(this).balance);\\n    }\\n\\n    function withdrawToken(address _token, uint _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(owner(), _amount);\\n    }\\n}\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPixels\",\"type\":\"uint256\"}],\"name\":\"BuyCreditWithETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPixels\",\"type\":\"uint256\"}],\"name\":\"BuyCreditWithToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ETHPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenPrices\",\"type\":\"uint256[]\"}],\"name\":\"TokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCredit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"GRID_H\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRID_W\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PIXELS_PER_TILE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowCustomURIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiveAddress\",\"type\":\"address\"}],\"name\":\"buyCreditWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCreditWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_value\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_dimension\",\"type\":\"uint16\"}],\"name\":\"calculateIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"getETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"getParentRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"w\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"}],\"internalType\":\"struct NFTGrid.Rectangle\",\"name\":\"parent\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"getParentTokenId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"parentTokenId\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getPixelCredits\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"getRangeFromTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"w\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"}],\"internalType\":\"struct NFTGrid.Rectangle\",\"name\":\"range\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"w\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"}],\"internalType\":\"struct NFTGrid.Rectangle\",\"name\":\"_range\",\"type\":\"tuple\"}],\"name\":\"getTokenIdFromRange\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"tokenId\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_tokenIds\",\"type\":\"uint64[]\"}],\"name\":\"multiBuyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_tokenIds\",\"type\":\"uint64[]\"}],\"name\":\"multiBuyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedPixels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyAllowCustomURIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyEnableCustomURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pixelCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_tokenIds\",\"type\":\"uint64[]\"}],\"name\":\"placePixels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placementLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerPixelInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pricePerPixelInTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"qtrees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"northeast\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"northwest\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"southeast\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"southwest\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"w\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"}],\"internalType\":\"struct NFTGrid.Rectangle\",\"name\":\"boundary\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"divided\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"ownedCount\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"revertIfChildOwned\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"revertIfParentOwned\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootTokenId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setDefaultURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerPixel\",\"type\":\"uint256\"}],\"name\":\"setETHPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"subdivide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCustomURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePlacementLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleReserveLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPixelsOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenPrices\",\"type\":\"uint256[]\"}],\"name\":\"updateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"w\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"}],\"internalType\":\"struct NFTGrid.Rectangle\",\"name\":\"_range\",\"type\":\"tuple\"}],\"name\":\"validate\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTGrid", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000016345785d8a0000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}