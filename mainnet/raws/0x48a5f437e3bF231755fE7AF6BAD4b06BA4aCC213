{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Fridge.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMWWNNNNXXX0KKKKKKKKKKKKKKKKXXNWWMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMWNXKK00KKKKKKKKKKKKKKKKKKKKKKKKKKKXNWMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMWNNNXKK000000KKKKKKKK0KKKK00KKKKKKKKKK00KXNWMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMWNXKKKKKKKK0000KKKKKK0000KK0000KKKKKKKKKKKKKKKKXNWMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMWNKK0OO0K00KKKKKKK00KKKK000KKK0000KKKKKKKKKKKKKKKKKKXNNWMMMMMMMMMMMMMMM\\n//MMMMMMMMNK00Oxdd0K0KKKK00KKKKKKKK00KKKKKKKKKKKKKKKKKK0KKKKKKKKKKKXWMMMMMMMMMMMMM\\n//MMMMMMMNK0Oxoolx0K000KK00KKKK00KKKKKKKKK0KKKKKKKKKKKKKKKKKKKKKKKK0KXWMMMMMMMMMMM\\n//MMMMMMWX0kolollxKK000KKKKK0KKK0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKkodOKNWMMMMMMMMM\\n//MMMMMMNKkolooolx0KKKK0KK000KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK00KKKo';k00KNMMMMMMMM\\n//MMMMMWXOxlllllld0KKK00K00KKKKKKKKKKKKKKKKK0KKKKK00KKKKKKKKKKKKKKd',x0000XWMMMMMM\\n//MMMMMN0xocccccclOK00OO00KKK000KKKKK00KKKKKKKKKKK0KKKKKKKKKKKK0KKx,,okxxxx0WMMMMM\\n//MMMMMNOxocccccclkKOolldOK000K000KKKKKKK0000KKKK000KK0KKKKKKK00KXk;'lkxxxxkXMMMMM\\n//MMMMMXkxdcccccccxKOoccoOKKK00KKK0KKKKKKKKKK00KKKK0KK00KKKKKKKKKKOl:oxxxxxkXMMMMM\\n//MMMMMKxxdcccccccd00dcclOK0KKKKKKKKKKKKKKKKKK0KKKKKK00KKKKKKKKKKK0xxxdxxxxxKWMMMM\\n//MMMMMKxxdcccccccd0KxlclkK00KKKKKKKKKKKKKKKKKKKKKKKKKKKKKK00KKKKK0kxxxxxxxx0WMMMM\\n//MMMMMKxdoccccccco0KklclkKKKKKKKKKKKKKKK00KKKKKKKKKKKKKKKKKKKKKKXKkxxxxxxxdONMMMM\\n//MMMMMKkxdlccccc:lOKOoclx0KKKKKKKKKKKKKKKKKXKKKKKKKKKKKKKKKKKKKKKKkxxxxxxxxONMMMM\\n//MMMMMKxxxlccccc:lkX0dclx0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK0kxkkxxxxxkNMMMM\\n//MMMMMXxdxl:ccccccxKKxlcd0KKKKKKKKK0KKKKKKKKKKKKKKKKKKKKKKKKKKK0K0kxkkkxxxxkNMMMM\\n//MMMMMXxddoc:cccccx0Kklcd0KKKKKKKKKKKKKKKKKKKKKKKK0KKKKKKKKKKKKKKKxclxxddxxkXMMMM\\n//MMMMMNkdxoccc:cc:d0KOocoOK0KKKKKKKKKKKKK0KKKKKKKKKKKKKKKKKKKKKKXKo';dkddxxkXMMMM\\n//MMMMMNOdxdcccccc:o0X0dclOK0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK0o';dkxxxdkNMMMM\\n//MMMMMWOdxdlccccc:lOKKOxk0KKKKKKKKKKK0KKKKKK00KKKKKKKKKK0KKKKKKKK0o';oxxxxxONMMMM\\n//MMMMMW0xxdlcccccclkK000KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK0KKKKKKKKKo',oxxkxxONMMMM\\n//MMMMMMXxxxoccccccckKKKKKKKKKKKKKKKKKKKKK00KKKKKKKKKKKKKKKKKKKKKXKdcldxxxxxONMMMM\\n//MMMMMMNOxxocccccccxKKKKKKK00KKKKKKKKKKK00KKKKKKKKKKKKKKKKK0KKKK0kxkkxxkxxx0WMMMM\\n//MMMMMMN0xxdlcccccco0KKKKKKKKKKKKKKKK0KKKKKKKKKKKKKKKKKKKKKKKK0Okxxxxxxkxxx0WMMMM\\n//MMMMMMWKkkxxxdddddodkOOOOOOOOOOO000OOOOOOOOOOOOOOkkkkkkxxkkOkkkkkkddxxddod0WMMMM\\n//MMMMMMMXkxkkkkkkkkkxxxddxxxxdxxkkkxxxxxxxxxxxxxxxxxdxxxdxxkkkOOkxxxxxxxddxKMMMMM\\n//MMMMMMMNkxkkkkkkkOkkkkxxkxxxkxxkkkxdodkkkkkkkkOOOOOOkOOO000000OxxkxxxkxxxOXMMMMM\\n//MMMMMMMW0xkkkkkkkkOkkkkkxkkOOkkOO0000000000000000000OO00K000KK0xxkkkxkkkkONMMMMM\\n//MMMMMMMMKkkOOOkxxddddddk00KKKK0KKKKK0K00K0000000000K0KKKK00KKKOookkkkkkkxONMMMMM\\n//MMMMMMMMXkxkxolc:::::cd0KKKKKKKKK00000KKK0000000000K000K00KKKKx,,dkxkkkkx0WMMMMM\\n//MMMMMMMMNOxdc::::::::d0Oxxxk0000K000KK00K000O000000K000KKKKKKKd',dxxxxkkxKWMMMMM\\n//MMMMMMMMW0xo:::::::::dOdcccoOK0000KK00KKK000000000KK00KKKKKKKKd';oddxxkkkKMMMMMM\\n//MMMMMMMMMKko:;:::::::oOxclclkK00000000KKKKK00K0000KK00K000KKKKo';dxxxxxxkXMMMMMM\\n//MMMMMMMMMXkdc;;;;;::;cOklcccx00000000K00000000K00000OO00000KK0d,:dxdodxxONMMMMMM\\n//MMMMMMMMMNkoc;;;;;;;;:xOocccd0000KKKK0000KK000K00KK0000K00K00KOdxxxxdxddOWMMMMMM\\n//MMMMMMMMMWOdl;;;,,,;;;oOdcccoO0K0KK00KK000KKKKK000KK00K000KK00Oxdddddxdd0WMMMMMM\\n//MMMMMMMMMMKdl:;;;,,,,,lOdcccoO0000KKK00000000000000000K0O0K000kxxddddddxKMMMMMMM\\n//MMMMMMMMMMXxoc;,;;;,,,ckklcclkOOOOOOOOO00000000000000000O00000kdddoooooxXMMMMMMM\\n//MMMMMMMMMMNkol;,,,,,,,:xOocclxOOOOOOO000000000000000KKK0000000koodoollokNMMMMMMM\\n//MMMMMMMMMMW0dd:;;;,,;;;oOxcccdO0OOO000000OO0000K0000KKKKKKK000kdoddooooOWMMMMMMM\\n//MMMMMMMMMMMKdoc;;;,;;;;lOklccdO00000000000O00KKK00KKKKKKKKKK00OdooddoooOWMMMMMMM\\n//MMMMMMMMMMMXxol;;;;;;;;ckOoccoO00KKK0000000KKKKKK0KKKKKKKKKKKKOdddddxdxXMMMMMMMM\\n//MMMMMMMMMMMWOdo:,;;;;;;;dOdccoO00KKK000KK0000KKK00KK000KKKKKKKOxddxkkxONMMMMMMMM\\n//MMMMMMMMMMMWKddl;;;;;;;;o0klcoO00K00000000000KKKKKKK00KKKKKK0K0kxxxkkx0WMMMMMMMM\\n//MMMMMMMMMMMMXxxdc;:::;;;l00oclk00000000000000000KKKK00KK000K00OxdodxxxKMMMMMMMMM\\n//MMMMMMMMMMMMNOxxl::::;;,:k0dclx0000000000000000000KK0000000000kddddddkXMMMMMMMMM\\n//MMMMMMMMMMMMWKxko:::::;,;x0xlcd00O0000000000000000K000000000KKOxxxxxxONMMMMMMMMM\\n//MMMMMMMMMMMMMXxxxc::::;;;dK0xok0K0000000000000000KK0000KKKK0Okkddxxxx0WMMMMMMMMM\\n//MMMMMMMMMMMMMXxdxl::::;,,o0K00KK0KK00000K000KKKK00K00K00KKKOc'lxxxxxkKMMMMMMMMMM\\n//MMMMMMMMMMMMMNOxxl::::::;cOKKKKKK00000000000000K00KKKKKKK0Kx;'lxdxxxONMMMMMMMMMM\\n//MMMMMMMMMMMMMMXkxd:;:;;:::xKKKKKKKKKKK0000K000KKKKKKKKKK00Kd',oxxddx0WMMMMMMMMMM\\n//MMMMMMMMMMMMMMNkddl:;;::;;dKKKKKKKKKKKK0000000KKKKKKKKKKKK0l':dxdddxKMMMMMMMMMMM\\n//MMMMMMMMMMMMMMW0dddoc::::;o0KKKK0KKKKKKKKKK00KKKKK0KKK00KKOl,lxxxxdkXMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMXkkkkxdl:;;cOKKKK0KKKKKKKKKKKK000KK00KKKKKK00xxxxxxxOWMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMNOxkkkxxdc::xKKKKKKKKKKKKKKKK0000KK00000KK0K0kdxxddkXMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMW0xxkkxxxdoodOKKKKKKKKKKKKKK000K00KK000K0KK0OxodxxkXMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMXxdxxxxxddddxO0K0K000KK000KKKK00000000000OkxkxxxKWMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMW0xxxxxxkxxddxk0K0000KKKKKKKK00K00000OkkkkkkkdxKWMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMWKOkxxxkxxxxxxkO0KKKKKKKKKKKKKK000Okxxxkkkxo:dNMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMNX0OkkxxxxxxxxkOOOOOOOOOOOOkOkkxxxdxkkk0x',OMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMWWKocllox0O0000000O0000000OxodddkO0KNWXodNMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMWd...,OMMMMMMMMMMMMMMMMWNo''.cKWWMMMMWWMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMXc..oNMMMMMMMMMMMMMMMMMMK:.'xWMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMM0;;0MMMMMMMMMMMMMMMMMMMWk,lXMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMWXXWMMMMMMMMMMMMMMMMMMMMWXNMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n\\ncontract Fridge is Context, Ownable {\\n    /*\\n        The Fridge takes in WETH and reinforces DC. This first version can buy\\n        DC and add DC-WETH LP for price stability.\\n    */\\n\\n    IUniswapV2Pair dcPair;\\n    IUniswapV2Router02 uniRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address WETH;\\n    address DC;\\n    struct PriceReading { \\n        uint128 dcWeth;\\n        uint128 block;\\n    }\\n    PriceReading reading1 = PriceReading(800000, 0);\\n    PriceReading reading2 = PriceReading(800000, 1); \\n    address dev1;\\n    address dev2;\\n    uint32 lastWithdrawal;\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n    using SafeMath for uint32;\\n\\n    constructor (address DogCatcher, address pair) {\\n        DC = DogCatcher;\\n        dcPair = IUniswapV2Pair(pair);\\n        WETH = uniRouter.WETH();\\n        lastWithdrawal = uint32(block.timestamp);\\n        IERC20(WETH).approve(address(uniRouter), type(uint256).max);\\n        IERC20(DC).approve(address(uniRouter), type(uint256).max);\\n    }\\n\\n    function setDevs(address new_dev1, address new_dev2) public onlyOwner() {\\n        // Operators who call the snack & preserve functions.\\n        dev1 = new_dev1;\\n        dev2 = new_dev2;\\n    }\\n\\n    function updatePrice() external {\\n        // The DC/WETH exchange rate is recorded in two alternating buckets,\\n        // so the effective mint price is always taken from a prior block.\\n        (uint reserve0, uint reserve1,) = dcPair.getReserves();\\n        (uint256 wethReserves, uint256 dcReserves) = WETH < DC ? (reserve0, reserve1) : (reserve1, reserve0);\\n        uint128 new_dcWeth = uint128(dcReserves.mul(10**9) / wethReserves);\\n        if (reading1.block < reading2.block && reading2.block < block.number) {\\n            reading1.dcWeth = new_dcWeth; \\n            reading1.block = uint128(block.number);\\n        } else if (reading1.block > reading2.block && reading1.block < block.number) {\\n            reading2.dcWeth = new_dcWeth; \\n            reading2.block = uint128(block.number);\\n        }\\n    }\\n\\n    function valuate(uint256 ethAmount) public view returns (uint256 dcAmount) {\\n        // Calculate an amount of DC to mint given ETH.\\n        PriceReading memory toRead = reading1.block < reading2.block ? reading1 : reading2;\\n        dcAmount = ethAmount.mul(toRead.dcWeth) / 10**9;\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'Zero input');\\n        require(reserveIn > 0 && reserveOut > 0, 'Zero liquidity');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function snack(uint256 amountIn, uint256 amountOutMin, uint deadline) public {\\n        require(block.timestamp < deadline, \\\"Expired.\\\");\\n        require(_msgSender() == dev1 || _msgSender() == dev2, \\\"Permission denied!\\\");\\n        uint amountOutput;\\n        {\\n        (uint reserve0, uint reserve1,) = dcPair.getReserves();\\n        (uint reserveInput, uint reserveOutput) = WETH < DC ? (reserve0, reserve1) : (reserve1, reserve0);\\n        IERC20(WETH).transfer(address(dcPair), amountIn);\\n        amountOutput = getAmountOut(amountIn, reserveInput, reserveOutput);\\n        require(amountOutput>= amountOutMin, 'Slipped.');\\n        }\\n        (uint amount0Out, uint amount1Out) = WETH < DC ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n        dcPair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\n    }\\n\\n    function preserve(uint256 amountWETHDesired, uint256 amountDCDesired, uint256 amountWETHMin, uint256 amountDCMin,  uint256 deadline) public { \\n        // Add WETH+DC LP.\\n        require(_msgSender() == dev1 || _msgSender() == dev2, \\\"Permission denied!\\\");\\n        uniRouter.addLiquidity(WETH, DC, amountWETHDesired, amountDCDesired, amountWETHMin, amountDCMin, address(this), deadline);\\n    }\\n\\n    function raid() public {\\n        // Contract creators can each withdraw 1% of liquidity every 30 days.\\n        // This is a dev fee that helps cover ongoing gas fees for calls to\\n        // snack() and preserve().\\n        require(lastWithdrawal < (block.timestamp - 30 days), \\\"Don't be greedy!\\\");\\n        uint256 ruggableLPBalance = dcPair.balanceOf(address(this)).div(50);\\n        IERC20(address(dcPair)).transfer(dev1, ruggableLPBalance.div(2));\\n        IERC20(address(dcPair)).transfer(dev2, ruggableLPBalance.div(2));\\n        lastWithdrawal = uint32(block.timestamp);\\n    }\\n\\n    //Fail-safe functions for releasing tokens we don't care about, not meant to be used.\\n    function release(address token) public {\\n        require (token != WETH);\\n        require (token != DC);\\n        require (token != address(dcPair));\\n        IERC20(token).transfer(owner(), \\n            IERC20(token).balanceOf(address(this)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DogCatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWETHDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDCDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDCMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"preserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"new_dev2\",\"type\":\"address\"}],\"name\":\"setDevs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"snack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"valuate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Fridge", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000679a0b65a14b06b44a0cc879d92b8bb46a81863300000000000000000000000001ed9cf4290646b0b62795f48fa99de2b514bf60", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}