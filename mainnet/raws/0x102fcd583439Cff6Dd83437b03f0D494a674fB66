{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/NiftyEtherDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Withdrawable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ncontract NiftyEtherDistributor is Withdrawable, ReentrancyGuard {\\n\\n    constructor(address niftyRegistryContract_) {\\n        initializeNiftyEntity(niftyRegistryContract_);\\n    }    \\n\\n    function distributeEther(address[] calldata wallets, uint256[] calldata amounts) external payable nonReentrant {        \\n        require(wallets.length == amounts.length, \\\"Input array size mismatch\\\");        \\n\\n        uint256 remainingEthValue = msg.value;\\n        uint256 i = 0;\\n        uint256 amount = 0;                \\n\\n        while(i < wallets.length) {            \\n            amount = amounts[i];\\n            remainingEthValue -= amount;                        \\n            (bool success,) = wallets[i].call{value: amount}(\\\"\\\");            \\n            require(success, \\\"Transfer ETH Failed\\\");\\n            ++i;\\n        }\\n                        \\n        (bool refundSuccess,) = msg.sender.call{value: remainingEthValue}(\\\"\\\");\\n        require(refundSuccess, \\\"Refund ETH Failed\\\");        \\n    }           \\n}\"\r\n    },\r\n    \"contracts/utils/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./RejectEther.sol\\\";\\nimport \\\"./NiftyPermissions.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\n\\nabstract contract Withdrawable is RejectEther, NiftyPermissions {\\n\\n    /**\\n     * @dev Slither identifies an issue with sending ETH to an arbitrary destianation.\\n     * https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations\\n     * Recommended mitigation is to \\\"Ensure that an arbitrary user cannot withdraw unauthorized funds.\\\"\\n     * This mitigation has been performed, as only the contract admin can call 'withdrawETH' and they should\\n     * verify the recipient should receive the ETH first.\\n     */\\n    function withdrawETH(address payable recipient, uint256 amount) external {\\n        _requireOnlyValidSender();\\n        require(amount > 0, ERROR_ZERO_ETH_TRANSFER);\\n        require(recipient != address(0), \\\"Transfer to zero address\\\");\\n\\n        uint256 currentBalance = address(this).balance;\\n        require(amount <= currentBalance, ERROR_INSUFFICIENT_BALANCE);\\n\\n        //slither-disable-next-line arbitrary-send        \\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, ERROR_WITHDRAW_UNSUCCESSFUL);\\n    }\\n        \\n    function withdrawERC20(address tokenContract, address recipient, uint256 amount) external {\\n        _requireOnlyValidSender();\\n        bool success = IERC20(tokenContract).transfer(recipient, amount);\\n        require(success, ERROR_WITHDRAW_UNSUCCESSFUL);\\n    }\\n    \\n    function withdrawERC721(address tokenContract, address recipient, uint256 tokenId) external {\\n        _requireOnlyValidSender();\\n        IERC721(tokenContract).safeTransferFrom(address(this), recipient, tokenId, \\\"\\\");\\n    }    \\n}\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/RejectEther.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title A base contract that may be inherited in order to protect a contract from having its fallback function \\n * invoked and to block the receipt of ETH by a contract.\\n * @author Nathan Gang\\n * @notice This contract bestows on inheritors the ability to block ETH transfers into the contract\\n * @dev ETH may still be forced into the contract - it is impossible to block certain attacks, but this protects from accidental ETH deposits\\n */\\n // For more info, see: \\\"https://medium.com/@alexsherbuck/two-ways-to-force-ether-into-a-contract-1543c1311c56\\\"\\nabstract contract RejectEther {    \\n\\n    /**\\n     * @dev For most contracts, it is safest to explicitly restrict the use of the fallback function\\n     * This would generally be invoked if sending ETH to this contract with a 'data' value provided\\n     */\\n    fallback() external payable {        \\n        revert(\\\"Fallback function not permitted\\\");\\n    }\\n\\n    /**\\n     * @dev This is the standard path where ETH would land if sending ETH to this contract without a 'data' value\\n     * In our case, we don't want our contract to receive ETH, so we restrict it here\\n     */\\n    receive() external payable {\\n        revert(\\\"Receiving ETH not permitted\\\");\\n    }    \\n}\"\r\n    },\r\n    \"contracts/utils/NiftyPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./GenericErrors.sol\\\";\\nimport \\\"../interfaces/INiftyEntityCloneable.sol\\\";\\nimport \\\"../interfaces/INiftyRegistry.sol\\\";\\nimport \\\"../libraries/Context.sol\\\";\\n\\nabstract contract NiftyPermissions is Context, ERC165, GenericErrors, INiftyEntityCloneable {    \\n\\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\\n\\n    // Only allow Nifty Entity to be initialized once\\n    bool internal initializedNiftyEntity;\\n\\n    // If address(0), use enable Nifty Gateway permissions - otherwise, specifies the address with permissions\\n    address public admin;\\n\\n    // To prevent a mistake, transferring admin rights will be a two step process\\n    // First, the current admin nominates a new admin\\n    // Second, the nominee accepts admin\\n    address public nominatedAdmin;\\n\\n    // Nifty Registry Contract\\n    INiftyRegistry internal permissionsRegistry;    \\n\\n    function initializeNiftyEntity(address niftyRegistryContract_) public {\\n        require(!initializedNiftyEntity, ERROR_REINITIALIZATION_NOT_PERMITTED);\\n        permissionsRegistry = INiftyRegistry(niftyRegistryContract_);\\n        initializedNiftyEntity = true;\\n    }       \\n    \\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return         \\n        interfaceId == type(INiftyEntityCloneable).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }        \\n\\n    function renounceAdmin() external {\\n        _requireOnlyValidSender();\\n        _transferAdmin(address(0));\\n    }    \\n\\n    function nominateAdmin(address nominee) external {\\n        _requireOnlyValidSender();\\n        nominatedAdmin = nominee;\\n    }\\n\\n    function acceptAdmin() external {\\n        address nominee = nominatedAdmin;\\n        require(_msgSender() == nominee, ERROR_INVALID_MSG_SENDER);\\n        _transferAdmin(nominee);\\n    }\\n    \\n    function _requireOnlyValidSender() internal view {       \\n        address currentAdmin = admin;     \\n        if(currentAdmin == address(0)) {\\n            require(permissionsRegistry.isValidNiftySender(_msgSender()), ERROR_INVALID_MSG_SENDER);\\n        } else {\\n            require(_msgSender() == currentAdmin, ERROR_INVALID_MSG_SENDER);\\n        }\\n    }        \\n\\n    function _transferAdmin(address newAdmin) internal {\\n        address oldAdmin = admin;\\n        admin = newAdmin;\\n        delete nominatedAdmin;        \\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/utils/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nabstract contract GenericErrors {\\n    string internal constant ERROR_INPUT_ARRAY_EMPTY = \\\"Input array empty\\\";\\n    string internal constant ERROR_INPUT_ARRAY_SIZE_MISMATCH = \\\"Input array size mismatch\\\";\\n    string internal constant ERROR_INVALID_MSG_SENDER = \\\"Invalid msg.sender\\\";\\n    string internal constant ERROR_UNEXPECTED_DATA_SIGNER = \\\"Unexpected data signer\\\";\\n    string internal constant ERROR_INSUFFICIENT_BALANCE = \\\"Insufficient balance\\\";\\n    string internal constant ERROR_WITHDRAW_UNSUCCESSFUL = \\\"Withdraw unsuccessful\\\";\\n    string internal constant ERROR_CONTRACT_IS_FINALIZED = \\\"Contract is finalized\\\";\\n    string internal constant ERROR_CANNOT_CHANGE_DEFAULT_OWNER = \\\"Cannot change default owner\\\";\\n    string internal constant ERROR_UNCLONEABLE_REFERENCE_CONTRACT = \\\"Uncloneable reference contract\\\";\\n    string internal constant ERROR_BIPS_OVER_100_PERCENT = \\\"Bips over 100%\\\";\\n    string internal constant ERROR_NO_ROYALTY_RECEIVER = \\\"No royalty receiver\\\";\\n    string internal constant ERROR_REINITIALIZATION_NOT_PERMITTED = \\\"Re-initialization not permitted\\\";\\n    string internal constant ERROR_ZERO_ETH_TRANSFER = \\\"Zero ETH Transfer\\\";\\n}\"\r\n    },\r\n    \"contracts/interfaces/INiftyEntityCloneable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface INiftyEntityCloneable is IERC165 {\\n    function initializeNiftyEntity(address niftyRegistryContract_) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/INiftyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INiftyRegistry {\\n   function isValidNiftySender(address sendingKey) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"niftyRegistryContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"niftyRegistryContract_\",\"type\":\"address\"}],\"name\":\"initializeNiftyEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"nominateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NiftyEtherDistributor", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "0000000000000000000000006e53130ddff21e3bc963ee902005223b9a202106", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}