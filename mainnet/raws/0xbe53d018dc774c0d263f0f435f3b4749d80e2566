{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"},\"OCMRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./VRFConsumerBase.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n//\\n//   \\n//    ______     __   __     ______     __  __     ______     __     __   __    \\n//   /\\\\  __ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\  ___\\\\   /\\\\ \\\\_\\\\ \\\\   /\\\\  __ \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   \\n//   \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\____  \\\\ \\\\  __ \\\\  \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\n//    \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\n//     \\\\/_____/   \\\\/_/ \\\\/_/   \\\\/_____/   \\\\/_/\\\\/_/   \\\\/_/\\\\/_/   \\\\/_/   \\\\/_/ \\\\/_/ \\n//                                                                              \\n//    __    __     ______     __   __     __  __     ______     __  __          \\n//   /\\\\ \\\"-./  \\\\   /\\\\  __ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\/ /    /\\\\  ___\\\\   /\\\\ \\\\_\\\\ \\\\         \\n//   \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\  _\\\"-.  \\\\ \\\\  __\\\\   \\\\ \\\\____ \\\\        \\n//    \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\/\\\\_____\\\\       \\n//     \\\\/_/  \\\\/_/   \\\\/_____/   \\\\/_/ \\\\/_/   \\\\/_/\\\\/_/   \\\\/_____/   \\\\/_____/       \\n//                                                                              \\n//   \\n// \\n// OnChainMonkey (OCM) Genesis was the first 100% On-Chain PFP collection in 1 transaction \\n// (contract: 0x960b7a6BCD451c9968473f7bbFd9Be826EFd549A)\\n// \\n// created by Metagood\\n//\\n// OCM Desserts will be an On-Chain collection that OCM Genesis can eat (burn) to create the\\n// new Karma collection.\\n//\\n// OCM Desserts, being 100% On-Chain, will also live forever, just like OCM Genesis. However,\\n// the Desserts will need to be burned to create Karma, so the Dessert supply will be \\n// decreasing over time.\\n//\\n// This is not the OCM Dessert contract, but the official OCM randomizer. This smart contract\\n// will be the fair and transparent way to generate randomness on chain by using the Chainlink \\n// VRF (Verifiable Random Function).\\n//\\n// The first call will generate the OCM Dessert distribution.\\n//\\n//....................................................................................................\\n//....................................................................................................\\n//....................................................................................................\\n//....................................................................................................\\n//......................................\\u0027:ldk0KNWWMMMMWWNK0kdl:\\u0027......................................\\n//..................................:oONMMMMMMMMMMMMMMMMMMMMMMMMNOo;..................................\\n//..............................\\u0027lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOl\\u0027..............................\\n//............................cOWMMMMMMMMMMWX0kdolllcllodk0XWMMMMMMMMMMWOc............................\\n//..........................dXMMMMMMMMWKxl,..................,lxKWMMMMMMMMXd..........................\\n//........................oNMMMMMMMWOl\\u0027..........................\\u0027lOWMMMMMMMNo........................\\n//......................lXMMMMMMW0l..................................l0MMMMMMMXl......................\\n//....................\\u00270MMMMMMMO;......................................;OMMMMMMMO\\u0027....................\\n//...................,XMMMMMMX:..........................................:XMMMMMMX,...................\\n//..................;NMMMMMMO..............................................OMMMMMMN;..................\\n//.................\\u0027XMMMMMMx...kKKKKKKKKKKKKKKKKc........\\u0027KKKKKKKKKKKKKKk...xMMMMMMX\\u0027.................\\n//..........\\u0027coxkOkKMMMMMMx....kXXXXXXXXXXXXXXXXc........\\u0027XXXXXXXXXXXXXXk....xMMMMMMKkOkxoc,..........\\n//.......\\u0027dXMMMMMMMMMMMMM0....................................................0MMMMMMMMMMMMMXd\\u0027.......\\n//.....\\u0027kWMMMMMMMMMMMMMMW,......,ooc...loc...loo\\u0027........\\u0027l...col...cooc......;WMMMMMMMMMMMMMMWk......\\n//....,XMMMMMMWKOKMMMMMMk.......\\u0027XMW:..\\u0027:...dMMO.........,Wd...:\\u0027..cWMMO.......kMMMMMMKkKWMMMMMMX\\u0027....\\n//....OMMMMMMO,..oMMMMMMl........\\u0027kWWOl;;:oKMNo...........cWKo:;:lOWMM0\\u0027.......lMMMMMMd..,OMMMMMMO....\\n//...\\u0027WMMMMMK....xMMMMMM:..........\\u0027lkKXNX0xc..............\\u0027dXMMMMMW0c.........:MMMMMMx....KMMMMMW\\u0027...\\n//...\\u0027WMMMMMX....xMMMMMM:.....................................\\u0027;:;,............:MMMMMMx....XMMMMMW\\u0027...\\n//....kMMMMMM0:..oMMMMMMo......................................................oMMMMMMo..:0MMMMMMk....\\n//.....KMMMMMMMNKXMMMMMMO......................................................OMMMMMMXKNMMMMMMMK\\u0027....\\n//......dNMMMMMMMMMMMMMMW:................\\u0027,:clooddddddoolc:,\\u0027................:WMMMMMMMMMMMMMMNd......\\n//........l0WMMMMMMMMMMMMK...........:dOXWMMMMXokMMMMMMkoXMMMMWXOd:...........KMMMMMMMMMMMMW0l........\\n//...........;coddd0MMMMMMk.......l0WMMMMMMMMMXokMMMMMMkoXMMMMMMMMMW0l.......OMMMMMM0dddoc;...........\\n//..................KMMMMMMO....\\u0027XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK\\u0027....kMMMMMMK..................\\n//..................,XMMMMMM0\\u0027..cMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc..\\u00270MMMMMMX\\u0027..................\\n//...................\\u0027KMMMMMMNo..oNMMMMWWWWWWWWWWWWWWWWWWWWWWWWWWMMMMNo..lNMMMMMMK\\u0027...................\\n//.....................kMMMMMMMKc..ckXWxllllllllllllllllllllllllxWXkc..cKMMMMMMMk.....................\\n//......................:KMMMMMMMXd,..\\u0027;ldkOKXNWWMMMMMMWWNXKOkdl;...,dXMMMMMMMK:......................\\n//........................cXMMMMMMMMKd;..........................;dKMMMMMMMMXc........................\\n//..........................cKMMMMMMMMMNOd:,................,:dONMMMMMMMMMKc..........................\\n//............................;xNMMMMMMMMMMMWX0kxddddddxk0XWMMMMMMMMMMMNx;............................\\n//...............................:xXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx:...............................\\n//..................................\\u0027cx0NMMMMMMMMMMMMMMMMMMMMMMN0xc\\u0027..................................\\n//.......................................,:ldkO0KXNNNNXXKOkdl:,.......................................\\n//....................................................................................................\\n//....................................................................................................\\n//....................................................................................................\\n\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\n//\\n// Use ChainLink\\u0027s VRF to distribute the Desserts for OnChainMonkey\\n//\\n// First call sets the Desserts\\n// Later calls to the VRF generate random numbers to be used in future features\\n//\\ncontract OCMRandomizer is VRFConsumerBase, Ownable {\\n    using Strings for uint256;\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    \\n    uint256[] public randomResults; // track all random numbers, first random number is used for Desserts\\n    uint256 public counter = 0;     // counter of random numbers generated\\n    uint256 public offset;          // offset of Desserts, set once and locked after first random number\\n\\n    event RandomRequested(bytes32 indexed requestId, address indexed requester);\\n    event RandomFullfilled(bytes32 indexed requestId, uint256 indexed result);\\n\\n    /**\\n     * Constructor inherits VRFConsumerBase\\n     * \\n     * Network: Kovan\\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\\n     * Request testnet LINK and ETH here: https://faucets.chain.link/\\n     *\\n     * retreived from: https://docs.chain.link/docs/vrf-contracts/\\n     * Network: Mainnet\\n     * LINK Token  0x514910771AF9Ca656af840dff83E8264EcF986CA\\n     * VRF Coordinator  0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\\n     * Key Hash  0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\\n     */\\n    constructor() \\n        VRFConsumerBase(\\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator\\n            0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token\\n        )\\n    {\\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\\n        fee = 2 * 10 ** 18; // 2 LINK (Varies by network)\\n    }\\n    \\n    /** \\n     * Requests randomness, first call is used for Desserts \\n     */\\n    function getRandomNumber() external onlyOwner returns (bytes32 requestId) {\\n        require(block.number \\u003e 14181581, \\\"Not time yet\\\");\\n        require(LINK.balanceOf(address(this)) \\u003e= fee, \\\"Not enough LINK\\\");\\n        requestId = requestRandomness(keyHash, fee);\\n        emit RandomRequested(requestId, msg.sender);\\n        return requestId;\\n    }\\n\\n    //\\n    // Dessert distribution for each OCM# (j)\\n    //\\n    // If offset is 0, 15 Dessert3s at j = 364, 1301, 1453, 1527, 1601, 1629, 2214, 4097, 5227, 5956, 6694, 6754, 7442, 9132, 9850\\n    // Overall distribution of Desserts is 15 Dessert3, 4485 Dessert2, 5500 Dessert1\\n    //\\n    function dessert(uint256 j) public view returns (uint256) {\\n        require(counter \\u003e 0, \\\"Dessert not served\\\");\\n        require(j\\u003e0 \\u0026\\u0026 j\\u003c10001, \\u0027error\\u0027);\\n        j = (j + offset) % 10000; // this is the fair and random offset from the VRF\\n        uint256 r = (uint256(keccak256(abi.encode(j.toString())))) % 10000; // this is the fixed sequence with the desired rarity distribution\\n        if (r \\u003c 8) {\\n            return 3; // Dessert3\\n        } else if (r \\u003e= 5538) {\\n            return 2; // Dessert2\\n        } else {\\n            return 1; // Dessert1\\n        }\\n    }    \\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        randomResults.push(randomness);\\n        if (counter == 0) {\\n            offset = randomness % 10000; // There is very minor bias in ideal uniform probability distribution because randomness 2**256 % 10000 != 0\\n        }\\n        counter++; // Counter could wrap around to 2**256 in theory, but not in practice\\n        emit RandomFullfilled(requestId, randomness);        \\n    }\\n\\n    // Withdraw function to avoid locking LINK in the contract\\n    function withdrawLink() external onlyOwner {\\n        LINK.transfer(owner(), LINK.balanceOf(address(this)));\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he\\u0027s not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase\\u0027s attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(\\u003cother arguments\\u003e, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         \\u003cinitialization with other arguments goes here\\u003e\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let\\u0027s call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle\\u0027s response\\n * @dev to your request, it will call your contract\\u0027s fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it\\u0027s critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract\\u0027s random behavior is free\\n * @dev from malicious interference, it\\u0027s best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract\\u0027s user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it\\u0027s provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can\\u0027t *hurt* to mix in some of\\n   * @dev your own randomness, here, but it\\u0027s not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 =\\u003e uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"},\"VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RandomFullfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"RandomRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"dessert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OCMRandomizer", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ddc7b51d4fd0f5ad889649c1e22358adde31c38810d6b58afb414ef867dccb72"}]}