{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/uniswap/v3_auto_router/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title UniswapV3_autoRouter.\\n * @dev DEX.\\n */\\n\\n// import files from common directory\\nimport { TokenInterface, MemoryInterface } from \\\"../../../common/interfaces.sol\\\";\\nimport { Stores } from \\\"../../../common/stores.sol\\\";\\nimport { SwapData } from \\\"./interface.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\nabstract contract AutoRouter is Helpers, Events {\\n\\t/**\\n\\t * @dev Sell ETH/ERC20_Token using uniswap v3 auto router.\\n\\t * @notice Swap tokens from getting an optimized trade routes\\n\\t * @param buyAddr The address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param sellAddr The address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param sellAmt The amount of the token to sell.\\n\\t * @param unitAmt The amount of buyAmt/sellAmt with slippage.\\n\\t * @param callData Data from Uniswap V3 auto router SDK.\\n\\t * @param setId ID stores the amount of token brought.\\n\\t */\\n\\tfunction sell(\\n\\t\\taddress buyAddr,\\n\\t\\taddress sellAddr,\\n\\t\\tuint256 sellAmt,\\n\\t\\tuint256 unitAmt,\\n\\t\\tbytes calldata callData,\\n\\t\\tuint256 setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tSwapData memory swapData = SwapData({\\n\\t\\t\\tbuyToken: TokenInterface(buyAddr),\\n\\t\\t\\tsellToken: TokenInterface(sellAddr),\\n\\t\\t\\tunitAmt: unitAmt,\\n\\t\\t\\tcallData: callData,\\n\\t\\t\\t_sellAmt: sellAmt,\\n\\t\\t\\t_buyAmt: 0\\n\\t\\t});\\n\\n\\t\\tswapData = _swap(swapData, setId);\\n\\n\\t\\t_eventName = \\\"LogSwap(address,address,uint256,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\tbuyAddr,\\n\\t\\t\\tsellAddr,\\n\\t\\t\\tswapData._buyAmt,\\n\\t\\t\\tswapData._sellAmt,\\n\\t\\t\\t0,\\n\\t\\t\\tsetId\\n\\t\\t);\\n\\t}\\n}\\n\\ncontract ConnectV2UniswapV3AutoRouter is AutoRouter {\\n\\tstring public name = \\\"UniswapV3-Auto-Router-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/uniswap/v3_auto_router/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../../common/interfaces.sol\\\";\\n\\nstruct SwapData {\\n\\tTokenInterface sellToken;\\n\\tTokenInterface buyToken;\\n\\tuint256 _sellAmt;\\n\\tuint256 _buyAmt;\\n\\tuint256 unitAmt;\\n\\tbytes callData;\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/uniswap/v3_auto_router/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../../common/interfaces.sol\\\";\\nimport { DSMath } from \\\"../../../common/math.sol\\\";\\nimport { Basic } from \\\"../../../common/basic.sol\\\";\\nimport { SwapData } from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n\\t/**\\n\\t * @dev UniswapV3 Swap Router Address\\n\\t */\\n\\taddress internal constant V3_SWAP_ROUTER_ADDRESS =\\n\\t\\t0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n\\n\\t/**\\n\\t * @dev UniswapV3 swapHelper\\n\\t * @param swapData - Struct defined in interfaces.sol\\n\\t */\\n\\tfunction _swapHelper(SwapData memory swapData)\\n\\t\\tinternal\\n\\t\\treturns (uint256 buyAmt)\\n\\t{\\n\\t\\t(uint256 _buyDec, uint256 _sellDec) = getTokensDec(\\n\\t\\t\\tswapData.buyToken,\\n\\t\\t\\tswapData.sellToken\\n\\t\\t);\\n\\t\\tuint256 _sellAmt18 = convertTo18(_sellDec, swapData._sellAmt);\\n\\t\\tuint256 _slippageAmt = convert18ToDec(\\n\\t\\t\\t_buyDec,\\n\\t\\t\\twmul(swapData.unitAmt, _sellAmt18)\\n\\t\\t);\\n\\n\\t\\tuint256 initalBal = getTokenBal(swapData.buyToken);\\n\\n\\t\\t// solium-disable-next-line security/no-call-value\\n\\t\\t(bool success, ) = V3_SWAP_ROUTER_ADDRESS.call(swapData.callData);\\n\\t\\tif (!success) revert(\\\"uniswapV3-swap-failed\\\");\\n\\n\\t\\tuint256 finalBal = getTokenBal(swapData.buyToken);\\n\\n\\t\\tbuyAmt = sub(finalBal, initalBal);\\n\\t\\trequire(_slippageAmt <= buyAmt, \\\"Too much slippage\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the swapping data from auto router sdk\\n\\t * @param swapData Struct with multiple swap data defined in interfaces.sol\\n\\t * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n\\t */\\n\\tfunction _swap(SwapData memory swapData, uint256 setId)\\n\\t\\tinternal\\n\\t\\treturns (SwapData memory)\\n\\t{\\n\\t\\tbool isEthSellToken = address(swapData.sellToken) == ethAddr;\\n\\t\\tbool isEthBuyToken = address(swapData.buyToken) == ethAddr;\\n\\n\\t\\tswapData.sellToken = isEthSellToken\\n\\t\\t\\t? TokenInterface(wethAddr)\\n\\t\\t\\t: swapData.sellToken;\\n\\t\\tswapData.buyToken = isEthBuyToken\\n\\t\\t\\t? TokenInterface(wethAddr)\\n\\t\\t\\t: swapData.buyToken;\\n\\n\\t\\tconvertEthToWeth(isEthSellToken, swapData.sellToken, swapData._sellAmt);\\n\\n\\t\\tapprove(\\n\\t\\t\\tTokenInterface(swapData.sellToken),\\n\\t\\t\\tV3_SWAP_ROUTER_ADDRESS,\\n\\t\\t\\tswapData._sellAmt\\n\\t\\t);\\n\\n\\t\\tswapData._buyAmt = _swapHelper(swapData);\\n\\n\\t\\tconvertWethToEth(isEthBuyToken, swapData.buyToken, swapData._buyAmt);\\n\\n\\t\\tsetUint(setId, swapData._buyAmt);\\n\\n\\t\\treturn swapData;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/uniswap/v3_auto_router/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n\\tevent LogSwap(\\n\\t\\taddress indexed buyToken,\\n\\t\\taddress indexed sellToken,\\n\\t\\tuint256 buyAmt,\\n\\t\\tuint256 sellAmt,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function changeEthAddrToWethAddr(address token) internal pure returns(address tokenAddr){\\n        tokenAddr = token == ethAddr ? wethAddr : token;\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ConnectV2UniswapV3AutoRouter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}