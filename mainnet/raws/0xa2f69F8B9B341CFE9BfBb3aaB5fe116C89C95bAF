{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// DssProxyActionsCropper.sol\r\n\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface GemLike {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n    function transferFrom(address, address, uint256) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ninterface CropperLike {\r\n    function getOrCreateProxy(address) external returns (address);\r\n    function join(address, address, uint256) external;\r\n    function exit(address, address, uint256) external;\r\n    function flee(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function quit(bytes32, address, address) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint256);\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint256);\r\n    function gem() external returns (GemLike);\r\n    function ilk() external returns (bytes32);\r\n    function bonus() external returns (GemLike);\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function dai() external returns (GemLike);\r\n    function join(address, uint256) external payable;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface EndLike {\r\n    function fix(bytes32) external view returns (uint256);\r\n    function cash(bytes32, uint256) external;\r\n    function free(bytes32) external;\r\n    function pack(uint256) external;\r\n    function skim(bytes32, address) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface HopeLike {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n}\r\n\r\ninterface CdpRegistryLike {\r\n    function owns(uint256) external view returns (address);\r\n    function ilks(uint256) external view returns (bytes32);\r\n    function open(bytes32, address) external returns (uint256);\r\n}\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\ncontract Common {\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n    address immutable public vat;\r\n    address immutable public cropper;\r\n    address immutable public cdpRegistry;\r\n\r\n    constructor(address vat_, address cropper_, address cdpRegistry_) public {\r\n        vat = vat_;\r\n        cropper = cropper_;\r\n        cdpRegistry = cdpRegistry_;\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function _mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function daiJoin_join(address daiJoin, address u, uint256 wad) public {\r\n        GemLike dai = DaiJoinLike(daiJoin).dai();\r\n        // Gets DAI from the user's wallet\r\n        dai.transferFrom(msg.sender, address(this), wad);\r\n        // Approves adapter to take the DAI amount\r\n        dai.approve(daiJoin, wad);\r\n        // Joins DAI into the vat\r\n        DaiJoinLike(daiJoin).join(u, wad);\r\n    }\r\n}\r\n\r\ncontract DssProxyActionsCropper is Common {\r\n\r\n    constructor(address vat_, address cropper_, address cdpRegistry_) public Common(vat_, cropper_, cdpRegistry_) {}\r\n\r\n    // Internal functions\r\n\r\n    function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function _divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x != 0 ? ((x - 1) / y) + 1 : 0;\r\n    }\r\n\r\n    function _toInt256(uint256 x) internal pure returns (int256 y) {\r\n        y = int256(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function _convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\r\n        // For those collaterals that have less than 18 decimals precision we\r\n        //   need to do the conversion before passing to frob function\r\n        // Adapters will automatically handle the difference of precision\r\n        wad = _mul(\r\n            amt,\r\n            10 ** (18 - GemJoinLike(gemJoin).dec())\r\n        );\r\n    }\r\n\r\n    function _getDrawDart(\r\n        address jug,\r\n        address u,\r\n        bytes32 ilk,\r\n        uint256 wad\r\n    ) internal returns (int256 dart) {\r\n        // Updates stability fee rate\r\n        uint256 rate = JugLike(jug).drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = VatLike(vat).dai(u);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        uint256 rad = _mul(wad, RAY);\r\n        if (dai < rad) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = _toInt256(_divup(rad - dai, rate)); // safe since dai < rad\r\n        }\r\n    }\r\n\r\n    function _getWipeDart(\r\n        uint256 dai,\r\n        address u,\r\n        bytes32 ilk\r\n    ) internal returns (int256 dart) {\r\n        // Gets actual rate from the vat\r\n        (, uint256 rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint256 art) = VatLike(vat).urns(ilk, CropperLike(cropper).getOrCreateProxy(u));\r\n\r\n        // Uses the whole dai balance in the vat to reduce the debt\r\n        dart = _toInt256(dai / rate);\r\n        // Checks the calculated dart is not higher than urn.art (total debt),\r\n        //    otherwise uses its value\r\n        dart = uint256(dart) <= art ? - dart : - _toInt256(art);\r\n    }\r\n\r\n    function _getWipeAllWad(\r\n        address u,\r\n        address urp,\r\n        bytes32 ilk\r\n    ) internal view returns (uint256 wad) {\r\n        // Gets actual rate from the vat\r\n        (, uint256 rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urp);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = VatLike(vat).dai(u);\r\n\r\n        // If there was already enough DAI in the vat balance, no need to join more\r\n        uint256 debt = _mul(art, rate);\r\n        if (debt > dai) {\r\n            wad = _divup(debt - dai, RAY); // safe since debt > dai\r\n        }\r\n    }\r\n\r\n    function _frob(\r\n        bytes32 ilk,\r\n        address u,\r\n        int256 dink,\r\n        int256 dart\r\n    ) internal {\r\n        CropperLike(cropper).frob(ilk, u, u, u, dink, dart);\r\n    }\r\n\r\n    function _ethJoin_join(address ethJoin, address u) internal {\r\n        GemLike gem = GemJoinLike(ethJoin).gem();\r\n        // Wraps ETH in WETH\r\n        gem.deposit{value: msg.value}();\r\n        // Approves adapter to take the WETH amount\r\n        gem.approve(cropper, msg.value);\r\n        // Joins WETH collateral into the vat\r\n        CropperLike(cropper).join(ethJoin, u, msg.value);\r\n    }\r\n\r\n    function _gemJoin_join(address gemJoin, address u, uint256 amt) internal {\r\n        GemLike gem = GemJoinLike(gemJoin).gem();\r\n        // Gets token from the user's wallet\r\n        gem.transferFrom(msg.sender, address(this), amt);\r\n        // Approves adapter to take the token amount\r\n        gem.approve(cropper, amt);\r\n        // Joins token collateral into the vat\r\n        CropperLike(cropper).join(gemJoin, u, amt);\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function transfer(address gem, address dst, uint256 amt) external {\r\n        GemLike(gem).transfer(dst, amt);\r\n    }\r\n\r\n    function hope(\r\n        address obj,\r\n        address usr\r\n    ) external {\r\n        HopeLike(obj).hope(usr);\r\n    }\r\n\r\n    function nope(\r\n        address obj,\r\n        address usr\r\n    ) external {\r\n        HopeLike(obj).nope(usr);\r\n    }\r\n\r\n    function open(\r\n        bytes32 ilk,\r\n        address usr\r\n    ) external returns (uint256 cdp) {\r\n        cdp = CdpRegistryLike(cdpRegistry).open(ilk, usr);\r\n    }\r\n\r\n    function lockETH(\r\n        address ethJoin,\r\n        uint256 cdp\r\n    ) external payable {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        _ethJoin_join(ethJoin, owner);\r\n        // Locks WETH amount into the CDP\r\n        _frob(CdpRegistryLike(cdpRegistry).ilks(cdp), owner, _toInt256(msg.value), 0);\r\n    }\r\n\r\n    function lockGem(\r\n        address gemJoin,\r\n        uint256 cdp,\r\n        uint256 amt\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        _gemJoin_join(gemJoin, owner, amt);\r\n        // Locks token amount into the CDP\r\n        _frob(CdpRegistryLike(cdpRegistry).ilks(cdp), owner, _toInt256(_convertTo18(gemJoin, amt)), 0);\r\n    }\r\n\r\n    function freeETH(\r\n        address ethJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external {\r\n        // Unlocks WETH amount from the CDP\r\n        _frob(\r\n            CdpRegistryLike(cdpRegistry).ilks(cdp),\r\n            CdpRegistryLike(cdpRegistry).owns(cdp),\r\n            -_toInt256(wad),\r\n            0\r\n        );\r\n        // Exits WETH amount to proxy address as a token\r\n        CropperLike(cropper).exit(ethJoin, address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeGem(\r\n        address gemJoin,\r\n        uint256 cdp,\r\n        uint256 amt\r\n    ) external {\r\n        // Unlocks token amount from the CDP\r\n        _frob(\r\n            CdpRegistryLike(cdpRegistry).ilks(cdp),\r\n            CdpRegistryLike(cdpRegistry).owns(cdp),\r\n            -_toInt256(_convertTo18(gemJoin, amt)),\r\n            0\r\n        );\r\n        // Exits token amount to proxy address as a token\r\n        CropperLike(cropper).exit(gemJoin, address(this), amt);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).gem().transfer(msg.sender, amt);\r\n    }\r\n\r\n    function exitETH(\r\n        address ethJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external {\r\n        require(CdpRegistryLike(cdpRegistry).owns(cdp) == address(this), \"wrong-cdp\");\r\n        require(CdpRegistryLike(cdpRegistry).ilks(cdp) == GemJoinLike(ethJoin).ilk(), \"wrong-ilk\");\r\n\r\n        // Exits WETH amount to proxy address as a token\r\n        CropperLike(cropper).exit(ethJoin, address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function exitGem(\r\n        address gemJoin,\r\n        uint256 cdp,\r\n        uint256 amt\r\n    ) external {\r\n        require(CdpRegistryLike(cdpRegistry).owns(cdp) == address(this), \"wrong-cdp\");\r\n        require(CdpRegistryLike(cdpRegistry).ilks(cdp) == GemJoinLike(gemJoin).ilk(), \"wrong-ilk\");\r\n\r\n        // Exits token amount to proxy address as a token\r\n        CropperLike(cropper).exit(gemJoin, address(this), amt);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).gem().transfer(msg.sender, amt);\r\n    }\r\n\r\n    function fleeETH(\r\n        address ethJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external {\r\n        require(CdpRegistryLike(cdpRegistry).owns(cdp) == address(this), \"wrong-cdp\");\r\n        require(CdpRegistryLike(cdpRegistry).ilks(cdp) == GemJoinLike(ethJoin).ilk(), \"wrong-ilk\");\r\n        // Exits WETH to proxy address as a token\r\n        CropperLike(cropper).flee(ethJoin, address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function fleeGem(\r\n        address gemJoin,\r\n        uint256 cdp,\r\n        uint256 amt\r\n    ) external {\r\n        require(CdpRegistryLike(cdpRegistry).owns(cdp) == address(this), \"wrong-cdp\");\r\n        require(CdpRegistryLike(cdpRegistry).ilks(cdp) == GemJoinLike(gemJoin).ilk(), \"wrong-ilk\");\r\n\r\n        // Exits token amount to the user's wallet as a token\r\n        CropperLike(cropper).flee(gemJoin, msg.sender, amt);\r\n    }\r\n\r\n    function draw(\r\n        address jug,\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        // Generates debt in the CDP\r\n        _frob(ilk, owner, 0, _getDrawDart(jug, owner, ilk, wad));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wad);\r\n    }\r\n\r\n    function wipe(\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, owner, wad);\r\n        // Allows cropper to access to proxy's DAI balance in the vat\r\n        VatLike(vat).hope(cropper);\r\n        // Paybacks debt to the CDP\r\n        _frob(\r\n            ilk,\r\n            owner,\r\n            0,\r\n            _getWipeDart(\r\n                VatLike(vat).dai(owner),\r\n                owner,\r\n                ilk\r\n            )\r\n        );\r\n        // Denies cropper to access to proxy's DAI balance in the vat after execution\r\n        VatLike(vat).nope(cropper);\r\n    }\r\n\r\n    function wipeAll(\r\n        address daiJoin,\r\n        uint256 cdp\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        address urp = CropperLike(cropper).getOrCreateProxy(owner);\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, owner, _getWipeAllWad(owner, urp, ilk));\r\n        // Allows cropper to access to proxy's DAI balance in the vat\r\n        VatLike(vat).hope(cropper);\r\n        // Paybacks debt to the CDP\r\n        _frob(ilk, owner, 0, -_toInt256(art));\r\n        // Denies cropper to access to proxy's DAI balance in the vat after execution\r\n        VatLike(vat).nope(cropper);\r\n    }\r\n\r\n    function lockETHAndDraw(\r\n        address jug,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 wadD\r\n    ) public payable {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        _ethJoin_join(ethJoin, owner);\r\n        // Locks WETH amount into the CDP and generates debt\r\n        _frob(\r\n            ilk,\r\n            owner,\r\n            _toInt256(msg.value),\r\n            _getDrawDart(\r\n                jug,\r\n                owner,\r\n                ilk,\r\n                wadD\r\n            )\r\n        );\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function openLockETHAndDraw(\r\n        address jug,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint256 wadD\r\n    ) public payable returns (uint256 cdp) {\r\n        cdp = CdpRegistryLike(cdpRegistry).open(ilk, address(this));\r\n        lockETHAndDraw(jug, ethJoin, daiJoin, cdp, wadD);\r\n    }\r\n\r\n    function lockGemAndDraw(\r\n        address jug,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 amtC,\r\n        uint256 wadD\r\n    ) public {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        _gemJoin_join(gemJoin, owner, amtC);\r\n        // Locks token amount into the CDP and generates debt\r\n        _frob(\r\n            ilk,\r\n            owner,\r\n            _toInt256(_convertTo18(gemJoin, amtC)),\r\n            _getDrawDart(\r\n                jug,\r\n                owner,\r\n                ilk,\r\n                wadD\r\n            )\r\n        );\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function openLockGemAndDraw(\r\n        address jug,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint256 amtC,\r\n        uint256 wadD\r\n    ) public returns (uint256 cdp) {\r\n        cdp = CdpRegistryLike(cdpRegistry).open(ilk, address(this));\r\n        lockGemAndDraw(jug, gemJoin, daiJoin, cdp, amtC, wadD);\r\n    }\r\n\r\n    function wipeAndFreeETH(\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 wadC,\r\n        uint256 wadD\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, owner, wadD);\r\n        // Allows cropper to access to proxy's DAI balance in the vat\r\n        VatLike(vat).hope(cropper);\r\n        // Paybacks debt to the CDP and unlocks WETH amount from it\r\n        _frob(\r\n            ilk,\r\n            owner,\r\n            -_toInt256(wadC),\r\n            _getWipeDart(\r\n                VatLike(vat).dai(owner),\r\n                owner,\r\n                ilk\r\n            )\r\n        );\r\n        // Denies cropper to access to proxy's DAI balance in the vat after execution\r\n        VatLike(vat).nope(cropper);\r\n        // Exits WETH amount to proxy address as a token\r\n        CropperLike(cropper).exit(ethJoin, address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function wipeAllAndFreeETH(\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 wadC\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        address urp = CropperLike(cropper).getOrCreateProxy(owner);\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, owner, _getWipeAllWad(owner, urp, ilk));\r\n        // Allows cropper to access to proxy's DAI balance in the vat\r\n        VatLike(vat).hope(cropper);\r\n        // Paybacks debt to the CDP and unlocks WETH amount from it\r\n        _frob(ilk, owner, -_toInt256(wadC), -_toInt256(art));\r\n        // Denies cropper to access to proxy's DAI balance in the vat after execution\r\n        VatLike(vat).nope(cropper);\r\n        // Exits WETH amount to proxy address as a token\r\n        CropperLike(cropper).exit(ethJoin, address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function wipeAndFreeGem(\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 amtC,\r\n        uint256 wadD\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, owner, wadD);\r\n        // Allows cropper to access to proxy's DAI balance in the vat\r\n        VatLike(vat).hope(cropper);\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        _frob(\r\n            ilk,\r\n            owner,\r\n            -_toInt256(_convertTo18(gemJoin, amtC)),\r\n            _getWipeDart(\r\n                VatLike(vat).dai(owner),\r\n                owner,\r\n                ilk\r\n            )\r\n        );\r\n        // Denies cropper to access to proxy's DAI balance in the vat after execution\r\n        VatLike(vat).nope(cropper);\r\n        // Exits token amount to proxy address as a token\r\n        CropperLike(cropper).exit(gemJoin, address(this), amtC);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).gem().transfer(msg.sender, amtC);\r\n    }\r\n\r\n    function wipeAllAndFreeGem(\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 amtC\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        bytes32 ilk = CdpRegistryLike(cdpRegistry).ilks(cdp);\r\n\r\n        address urp = CropperLike(cropper).getOrCreateProxy(owner);\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, owner, _getWipeAllWad(owner, urp, ilk));\r\n        // Allows cropper to access to proxy's DAI balance in the vat\r\n        VatLike(vat).hope(cropper);\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        _frob(ilk, owner, -_toInt256(_convertTo18(gemJoin, amtC)), -_toInt256(art));\r\n        // Denies cropper to access to proxy's DAI balance in the vat after execution\r\n        VatLike(vat).nope(cropper);\r\n        // Exits token amount to proxy address as a token\r\n        CropperLike(cropper).exit(gemJoin, address(this), amtC);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).gem().transfer(msg.sender, amtC);\r\n    }\r\n\r\n    function crop(\r\n        address gemJoin,\r\n        uint256 cdp\r\n    ) external {\r\n        address owner = CdpRegistryLike(cdpRegistry).owns(cdp);\r\n        require(CdpRegistryLike(cdpRegistry).ilks(cdp) == GemJoinLike(gemJoin).ilk(), \"wrong-ilk\");\r\n\r\n        CropperLike(cropper).join(gemJoin, owner, 0);\r\n        GemLike bonus = GemJoinLike(gemJoin).bonus();\r\n        bonus.transfer(msg.sender, bonus.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ncontract DssProxyActionsEndCropper is Common {\r\n\r\n    constructor(address vat_, address cropper_, address cdpRegistry_) public Common(vat_, cropper_, cdpRegistry_) {}\r\n\r\n    // Internal functions\r\n\r\n    function _free(\r\n        address end,\r\n        address u,\r\n        bytes32 ilk\r\n    ) internal returns (uint256 ink) {\r\n        address urp = CropperLike(cropper).getOrCreateProxy(u);\r\n        uint256 art;\r\n        (ink, art) = VatLike(vat).urns(ilk, urp);\r\n\r\n        // If CDP still has debt, it needs to be paid\r\n        if (art > 0) {\r\n            EndLike(end).skim(ilk, urp);\r\n            (ink,) = VatLike(vat).urns(ilk, urp);\r\n        }\r\n        // Approves the cropper to transfer the position to proxy's address in the vat\r\n        VatLike(vat).hope(cropper);\r\n        // Transfers position from CDP to the proxy address\r\n        CropperLike(cropper).quit(ilk, u, address(this));\r\n        // Denies cropper to access to proxy's position in the vat after execution\r\n        VatLike(vat).nope(cropper);\r\n        // Frees the position and recovers the collateral in the vat registry\r\n        EndLike(end).free(ilk);\r\n        // Fluxs to the proxy's cropper proxy, so it can be pulled out with the managed gem join\r\n        VatLike(vat).flux(\r\n            ilk,\r\n            address(this),\r\n            urp,\r\n            ink\r\n        );\r\n    }\r\n\r\n    // Public functions\r\n    function freeETH(\r\n        address ethJoin,\r\n        address end,\r\n        uint256 cdp\r\n    ) external {\r\n        // Frees the position through the end contract\r\n        uint256 wad = _free(end, CdpRegistryLike(cdpRegistry).owns(cdp), CdpRegistryLike(cdpRegistry).ilks(cdp));\r\n        // Exits WETH amount to proxy address as a token\r\n        CropperLike(cropper).exit(ethJoin, address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeGem(\r\n        address gemJoin,\r\n        address end,\r\n        uint256 cdp\r\n    ) external {\r\n        // Frees the position through the end contract\r\n        uint256 wad = _free(end, CdpRegistryLike(cdpRegistry).owns(cdp), CdpRegistryLike(cdpRegistry).ilks(cdp));\r\n        // Exits token amount to the user's wallet as a token\r\n        uint256 amt = wad / 10 ** (18 - GemJoinLike(gemJoin).dec());\r\n        // Exits token amount to proxy address as a token\r\n        CropperLike(cropper).exit(gemJoin, address(this), amt);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).gem().transfer(msg.sender, amt);\r\n    }\r\n\r\n    function pack(\r\n        address daiJoin,\r\n        address end,\r\n        uint256 wad\r\n    ) external {\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, address(this), wad);\r\n        // Approves the end to take out DAI from the proxy's balance in the vat\r\n        if (VatLike(vat).can(address(this), address(end)) == 0) {\r\n            VatLike(vat).hope(end);\r\n        }\r\n        EndLike(end).pack(wad);\r\n    }\r\n\r\n    function cashETH(\r\n        address ethJoin,\r\n        address end,\r\n        uint256 wad\r\n    ) external {\r\n        bytes32 ilk = GemJoinLike(ethJoin).ilk();\r\n        EndLike(end).cash(ilk, wad);\r\n        uint256 wadC = _mul(wad, EndLike(end).fix(ilk)) / RAY;\r\n        // Flux to the proxy's UrnProxy in cropper, so it can be pulled out with the managed gem join\r\n        VatLike(vat).flux(\r\n            ilk,\r\n            address(this),\r\n            CropperLike(cropper).getOrCreateProxy(address(this)),\r\n            wadC\r\n        );\r\n        // Exits WETH amount to proxy address as a token\r\n        CropperLike(cropper).flee(ethJoin, address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function cashGem(\r\n        address gemJoin,\r\n        address end,\r\n        uint256 wad\r\n    ) external {\r\n        bytes32 ilk = GemJoinLike(gemJoin).ilk();\r\n        EndLike(end).cash(ilk, wad);\r\n        uint256 wadC = _mul(wad, EndLike(end).fix(ilk)) / RAY;\r\n        // Flux to the proxy's UrnProxy in cropper, so it can be pulled out with the managed gem join\r\n        VatLike(vat).flux(\r\n            ilk,\r\n            address(this),\r\n            CropperLike(cropper).getOrCreateProxy(address(this)),\r\n            wadC\r\n        );\r\n        // Exits token amount to the user's wallet as a token\r\n        uint256 amt = wadC / 10 ** (18 - GemJoinLike(gemJoin).dec());\r\n        CropperLike(cropper).flee(gemJoin, msg.sender, amt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cropper_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cdpRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"crop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cropper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"daiJoin_join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exitETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"exitGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"fleeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"fleeGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"freeGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"obj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"lockETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"lockETHAndDraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"lockGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"lockGemAndDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"obj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockETHAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockGemAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"wipeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"}],\"name\":\"wipeAllAndFreeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"}],\"name\":\"wipeAllAndFreeGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"wipeAndFreeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"wipeAndFreeGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DssProxyActionsCropper", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b0000000000000000000000008377cd01a5834a6ead3b7efb482f678f2092b77e000000000000000000000000be0274664ca7a68d6b5df826fb3ccb7c620badf3", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2d58d554ec17768a74910d5ed15b757b77b51c22b528741a4c7451a1e24b00b4"}]}