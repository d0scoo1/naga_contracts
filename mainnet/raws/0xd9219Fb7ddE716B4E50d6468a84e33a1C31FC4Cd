{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/veDF/veDF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../library/SafeRatioMath.sol\\\";\\r\\nimport \\\"../library/Ownable.sol\\\";\\r\\nimport \\\"../library/ERC20Permit.sol\\\";\\r\\nimport \\\"./GovernanceToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\r\\n\\r\\ncontract veDF is Initializable, Ownable, ReentrancyGuardUpgradeable, GovernanceToken, ERC20Permit {\\r\\n    using SafeRatioMath for uint256;\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\r\\n\\r\\n    /// @dev Calc the base value\\r\\n    uint256 internal constant BASE = 1e18;\\r\\n    /// @dev Calc the double of the base value\\r\\n    // uint256 internal constant DOUBLE_BASE = 1e36;\\r\\n\\r\\n    /// @dev Min lock step (seconds of a week).\\r\\n    uint256 internal constant MIN_STEP = 1 weeks;\\r\\n\\r\\n    /// @dev Max lock step (seconds of 208 week).\\r\\n    uint256 internal constant MAX_STEP = 4 * 52 weeks;\\r\\n\\r\\n    /// @dev StakedDF address.\\r\\n    IERC20Upgradeable internal stakedDF;\\r\\n\\r\\n    /// @dev veDF total amount.\\r\\n    uint96 public totalSupply;\\r\\n\\r\\n    /// @dev Information of the locker\\r\\n    struct Locker {\\r\\n        uint32 dueTime;\\r\\n        uint32 duration;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @dev veDF holder's lock information\\r\\n    mapping(address => Locker) internal lockers;\\r\\n\\r\\n    /// @dev EnumerableSet of minters\\r\\n    EnumerableSetUpgradeable.AddressSet internal minters;\\r\\n\\r\\n    /// @dev Emitted when `lockers` is changed.\\r\\n    event Lock(\\r\\n        address caller,\\r\\n        address recipient,\\r\\n        uint256 underlyingAmount,\\r\\n        uint96 tokenAmount,\\r\\n        uint32 dueTime,\\r\\n        uint32 duration\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when `lockers` is removed.\\r\\n    event UnLock(\\r\\n        address caller,\\r\\n        address from,\\r\\n        uint256 underlyingAmount,\\r\\n        uint96 tokenAmount\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when `minter` is added as `minter`.\\r\\n    event MinterAdded(address minter);\\r\\n\\r\\n    /// @dev Emitted when `minter` is removed from `minters`.\\r\\n    event MinterRemoved(address minter);\\r\\n\\r\\n    /**\\r\\n     * @notice Only for the implementation contract, as for the proxy pattern,\\r\\n     *            should call `initialize()` separately.\\r\\n     * @param _stakedDF Staked DF token address.\\r\\n     */\\r\\n    constructor(IERC20Upgradeable _stakedDF) public {\\r\\n        initialize(_stakedDF);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize contract to set some configs.\\r\\n     * @param _stakedDF Staked DF token address.\\r\\n     */\\r\\n    function initialize(IERC20Upgradeable _stakedDF) public initializer {\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n\\r\\n        stakedDF = _stakedDF;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Duration should be 1. within the range of (0, max_step]\\r\\n     *                          2. integral multiple of min_step\\r\\n     * @param _dur Lock duration,in seconds.\\r\\n     */\\r\\n    modifier isDurationValid(uint256 _dur) {\\r\\n        require(\\r\\n            _dur > 0 && _dur <= MAX_STEP,\\r\\n            \\\"duration is not valid.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the due time is valid.\\r\\n     * @param _due Due greenwich timestamp.\\r\\n     */\\r\\n    modifier isDueTimeValid(uint256 _due) {\\r\\n        require(_due > block.timestamp, \\\"due time is not valid.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /******** Owner functions ********/\\r\\n    /*********************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the minters.\\r\\n     */\\r\\n    modifier onlyMinter() {\\r\\n        require(minters.contains(msg.sender), \\\"caller is not minter.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add `minter` into minters.\\r\\n     * If `minter` have not been a minter, emits a `MinterAdded` event.\\r\\n     *\\r\\n     * @param _minter The minter to add\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - the caller must be `owner`.\\r\\n     */\\r\\n    function _addMinter(address _minter) external onlyOwner {\\r\\n        require(_minter != address(0), \\\"_minter not accepted zero address.\\\");\\r\\n        if (minters.add(_minter)) {\\r\\n            emit MinterAdded(_minter);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove `minter` from minters.\\r\\n     * If `minter` is a minter, emits a `MinterRemoved` event.\\r\\n     *\\r\\n     * @param _minter The minter to remove\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - the caller must be `owner`.\\r\\n     */\\r\\n    function _removeMinter(address _minter) external onlyOwner {\\r\\n        require(_minter != address(0), \\\"invalid minter address.\\\");\\r\\n        if (minters.remove(_minter)) {\\r\\n            emit MinterRemoved(_minter);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /******** Security Check *********/\\r\\n    /*********************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Ensure this is the veDF contract.\\r\\n     * @return The return value is always true.\\r\\n     */\\r\\n    function isvDF() external pure returns (bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /****** Internal functions *******/\\r\\n    /*********************************/\\r\\n\\r\\n    /** @dev Mint balance in `_amount` to `_account`\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * @param _account Account address, cannot be zero address.\\r\\n     * @param _amount veDF amount, cannot be zero.\\r\\n     */\\r\\n    function _mint(address _account, uint96 _amount) internal {\\r\\n        require(_account != address(0), \\\"not allowed to mint to zero address.\\\");\\r\\n\\r\\n        totalSupply = add96(totalSupply, _amount, \\\"total supply overflows.\\\");\\r\\n        balances[_account] = add96(\\r\\n            balances[_account],\\r\\n            _amount,\\r\\n            \\\"amount overflows.\\\"\\r\\n        );\\r\\n        emit Transfer(address(0), _account, _amount);\\r\\n\\r\\n        _moveDelegates(delegates[address(0)], delegates[_account], _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn balance in `_amount` from `_account`\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * @param _account Account address, cannot be zero address.\\r\\n     * @param _amount veDF amount, must have at least balance in `_amount`.\\r\\n     */\\r\\n    function _burn(address _account, uint96 _amount) internal {\\r\\n        require(_account != address(0), \\\"_burn: Burn from the zero address!\\\");\\r\\n\\r\\n        balances[_account] = sub96(\\r\\n            balances[_account],\\r\\n            _amount,\\r\\n            \\\"burn amount exceeds balance.\\\"\\r\\n        );\\r\\n        totalSupply = sub96(totalSupply, _amount, \\\"total supply underflows.\\\");\\r\\n        emit Transfer(_account, address(0), _amount);\\r\\n\\r\\n        _moveDelegates(delegates[_account], delegates[address(0)], _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn balance in `_amount` on behalf of `from` account\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * @param _from Account address.\\r\\n     * @param _caller Caller address, the caller must be allowed at least balance in `_amount` from `from` account.\\r\\n     * @param _amount veDF amount, must have at least balance in `_amount`.\\r\\n     */\\r\\n    function _burnFrom(\\r\\n        address _from,\\r\\n        address _caller,\\r\\n        uint96 _amount\\r\\n    ) internal {\\r\\n        if (_caller != _from) {\\r\\n            uint96 _spenderAllowance = allowances[_from][_caller];\\r\\n\\r\\n            if (_spenderAllowance != uint96(-1)) {\\r\\n                uint96 _newAllowance = sub96(\\r\\n                    _spenderAllowance,\\r\\n                    _amount,\\r\\n                    \\\"burn amount exceeds spender's allowance.\\\"\\r\\n                );\\r\\n                allowances[_from][_caller] = _newAllowance;\\r\\n\\r\\n                emit Approval(_from, _caller, _newAllowance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n\\r\\n    function _approveERC20(address _owner, address _spender, uint256 _rawAmount) internal override {\\r\\n        uint96 _amount;\\r\\n        if (_rawAmount == uint256(-1)) {\\r\\n            _amount = uint96(-1);\\r\\n        } else {\\r\\n            _amount = safe96(_rawAmount, \\\"veDF::approve: amount exceeds 96 bits\\\");\\r\\n        }\\r\\n\\r\\n        allowances[_owner][_spender] = _amount;\\r\\n\\r\\n        emit Approval(_owner, _spender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate weight rate on duration.\\r\\n     * @param _d Duration, in seconds.\\r\\n     * @param _multipier weight rate.\\r\\n     */\\r\\n    function _weightedRate(uint256 _d)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 _multipier)\\r\\n    {\\r\\n        // Linear_rate = _d / MAX_STEP\\r\\n        // curve_rate = (1 + Linear_rate) ^ 2 * Linear_rate\\r\\n        // uint256 _l = (_d * BASE) / MAX_STEP;\\r\\n        // _multipier = (((BASE + _l)**2) * _l) / DOUBLE_BASE;\\r\\n        _multipier = (_d * BASE) / MAX_STEP;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate weight rate on duration.\\r\\n     * @param _amount Staked DF token amount.\\r\\n     * @param _duration Duration, in seconds.\\r\\n     * @return veDF amount.\\r\\n     */\\r\\n    function _weightedExchange(uint256 _amount, uint256 _duration)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint96)\\r\\n    {\\r\\n        return\\r\\n            safe96(\\r\\n                _amount.rmul(_weightedRate(_duration)),\\r\\n                \\\"weighted rate overflow.\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lock Staked DF and harvest veDF.\\r\\n     * @dev Create lock-up information and mint veDF on lock-up amount and duration.\\r\\n     * @param _caller Caller address.\\r\\n     * @param _recipient veDF recipient address.\\r\\n     * @param _amount Staked DF token amount.\\r\\n     * @param _duration Duration, in seconds.\\r\\n     * @param _minted The amount of veDF minted.\\r\\n     */\\r\\n    function _lock(\\r\\n        address _caller,\\r\\n        address _recipient,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) internal isDurationValid(_duration) returns (uint96 _minted) {\\r\\n        require(_amount > 0, \\\"not allowed zero amount.\\\");\\r\\n\\r\\n        Locker storage _locker = lockers[_recipient];\\r\\n        require(\\r\\n            _locker.dueTime == 0,\\r\\n            \\\"due time refuses to create a new lock.\\\"\\r\\n        );\\r\\n\\r\\n        _minted = _weightedExchange(_amount, _duration);\\r\\n\\r\\n        _locker.dueTime = safe32(\\r\\n            (block.timestamp).add(_duration),\\r\\n            \\\"due time overflow.\\\"\\r\\n        );\\r\\n        _locker.duration = safe32(_duration, \\\"duration overflow.\\\");\\r\\n        _locker.amount = safe96(_amount, \\\"locked amount overflow.\\\");\\r\\n\\r\\n        emit Lock(\\r\\n            _caller,\\r\\n            _recipient,\\r\\n            _amount,\\r\\n            _minted,\\r\\n            _locker.dueTime,\\r\\n            _locker.duration\\r\\n        );\\r\\n\\r\\n        _mint(_recipient, _minted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unlock Staked DF and burn veDF.\\r\\n     * @dev Burn veDF and clear lock information.\\r\\n     * @param _caller Caller address.\\r\\n     * @param _from veDF holder's address.\\r\\n     * @param _burned The amount of veDF burned.\\r\\n     */\\r\\n    function _unLock(address _caller, address _from)\\r\\n        internal\\r\\n        returns (uint96 _burned)\\r\\n    {\\r\\n        Locker storage _locker = lockers[_from];\\r\\n        require(\\r\\n            uint256(_locker.dueTime) < block.timestamp,\\r\\n            \\\"due time not meeted.\\\"\\r\\n        );\\r\\n\\r\\n        _burned = balances[_from];\\r\\n        _burnFrom(_from, _caller, _burned);\\r\\n\\r\\n        uint256 _amount = uint256(_locker.amount);\\r\\n        delete lockers[_from];\\r\\n\\r\\n        emit UnLock(_caller, _from, _amount, _burned);\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /******* Users functions *********/\\r\\n    /*********************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Lock Staked DF and harvest veDF.\\r\\n     * @dev Create lock-up information and mint veDF on lock-up amount and duration.\\r\\n     * @param _recipient veDF recipient address.\\r\\n     * @param _amount Staked DF token amount.\\r\\n     * @param _duration Duration, in seconds.\\r\\n     * @return The amount of veDF minted.\\r\\n     */\\r\\n    function create(\\r\\n        address _recipient,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external onlyMinter nonReentrant returns (uint96) {\\r\\n        stakedDF.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        return _lock(msg.sender, _recipient, _amount, _duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Increased locked staked DF and harvest veDF.\\r\\n     * @dev According to the expiration time in the lock information, the minted veDF.\\r\\n     * @param _recipient veDF recipient address.\\r\\n     * @param _amount Staked DF token amount.\\r\\n     * @param _refilled The amount of veDF minted.\\r\\n     */\\r\\n    function refill(address _recipient, uint256 _amount)\\r\\n        external\\r\\n        onlyMinter\\r\\n        nonReentrant\\r\\n        isDueTimeValid(lockers[_recipient].dueTime)\\r\\n        returns (uint96 _refilled)\\r\\n    {\\r\\n        require(_amount > 0, \\\"not allowed to add zero amount in lock-up\\\");\\r\\n\\r\\n        stakedDF.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        Locker storage _locker = lockers[_recipient];\\r\\n        _refilled = _weightedExchange(\\r\\n            _amount,\\r\\n            uint256(_locker.dueTime).sub(block.timestamp)\\r\\n        );\\r\\n        _locker.amount = safe96(\\r\\n            uint256(_locker.amount).add(_amount),\\r\\n            \\\"refilled amount overflow.\\\"\\r\\n        );\\r\\n        emit Lock(\\r\\n            msg.sender,\\r\\n            _recipient,\\r\\n            _amount,\\r\\n            _refilled,\\r\\n            _locker.dueTime,\\r\\n            _locker.duration\\r\\n        );\\r\\n\\r\\n        _mint(_recipient, _refilled);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Increase the lock duration and harvest veDF.\\r\\n     * @dev According to the amount of locked staked DF and expansion time, the minted veDF.\\r\\n     * @param _recipient veDF recipient address.\\r\\n     * @param _duration Duration, in seconds.\\r\\n     * @param _extended The amount of veDF minted.\\r\\n     */\\r\\n    function extend(address _recipient, uint256 _duration)\\r\\n        external\\r\\n        onlyMinter\\r\\n        nonReentrant\\r\\n        isDueTimeValid(lockers[_recipient].dueTime)\\r\\n        isDurationValid(uint256(lockers[_recipient].duration).add(_duration))\\r\\n        returns (uint96 _extended)\\r\\n    {\\r\\n        Locker storage _locker = lockers[_recipient];\\r\\n        _extended = _weightedExchange(uint256(_locker.amount), _duration);\\r\\n        _locker.dueTime = safe32(\\r\\n            uint256(_locker.dueTime).add(_duration),\\r\\n            \\\"extended due time overflow.\\\"\\r\\n        );\\r\\n        _locker.duration = safe32(\\r\\n            uint256(_locker.duration).add(_duration),\\r\\n            \\\"extended duration overflow.\\\"\\r\\n        );\\r\\n        emit Lock(\\r\\n            msg.sender,\\r\\n            _recipient,\\r\\n            0,\\r\\n            _extended,\\r\\n            _locker.dueTime,\\r\\n            _locker.duration\\r\\n        );\\r\\n\\r\\n        _mint(_recipient, _extended);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unlock Staked DF and burn veDF.(transfer to msg.sender)\\r\\n     * @dev Burn veDF and clear lock information.\\r\\n     * @param _from veDF holder's address.\\r\\n     * @param _unlocked The amount of veDF burned.\\r\\n     */\\r\\n    function withdraw(address _from)\\r\\n        external\\r\\n        onlyMinter\\r\\n        nonReentrant\\r\\n        returns (uint96 _unlocked)\\r\\n    {\\r\\n        uint256 _amount = lockers[_from].amount;\\r\\n        _unlocked = _unLock(msg.sender, _from);\\r\\n        stakedDF.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unlock Staked DF and burn veDF.(transfer to _from)\\r\\n     * @dev Burn veDF and clear lock information.\\r\\n     * @param _from veDF holder's address.\\r\\n     * @param _unlocked The amount of veDF burned.\\r\\n     */\\r\\n    function withdraw2(address _from)\\r\\n        external\\r\\n        onlyMinter\\r\\n        nonReentrant\\r\\n        returns (uint96 _unlocked)\\r\\n    {\\r\\n        uint256 _amount = lockers[_from].amount;\\r\\n        _unlocked = _unLock(msg.sender, _from);\\r\\n        stakedDF.safeTransfer(_from, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lock Staked DF and and update veDF balance.(transfer to msg.sender)\\r\\n     * @dev Update the lockup information and veDF balance, return the excess sDF to the user or receive transfer increased amount.\\r\\n     * @param _recipient veDF recipient address.\\r\\n     * @param _amount Staked DF token new amount.\\r\\n     * @param _duration New duration, in seconds.\\r\\n     * @param _refreshed veDF new balance.\\r\\n     */\\r\\n    function refresh(\\r\\n        address _recipient,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external onlyMinter nonReentrant returns (uint96 _refreshed, uint256 _refund) {\\r\\n        uint256 outstanding = uint256(lockers[_recipient].amount);\\r\\n        if (_amount > outstanding) {\\r\\n            stakedDF.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amount - outstanding\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _unLock(msg.sender, _recipient);\\r\\n        _refreshed = _lock(msg.sender, _recipient, _amount, _duration);\\r\\n\\r\\n        if (_amount < outstanding) {\\r\\n            _refund = outstanding - _amount;\\r\\n            stakedDF.safeTransfer(msg.sender, _refund);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lock Staked DF and and update veDF balance.(transfer to _recipient)\\r\\n     * @dev Update the lockup information and veDF balance, return the excess sDF to the user or receive transfer increased amount.\\r\\n     * @param _recipient veDF recipient address.\\r\\n     * @param _amount Staked DF token new amount.\\r\\n     * @param _duration New duration, in seconds.\\r\\n     * @param _refreshed veDF new balance.\\r\\n     */\\r\\n    function refresh2(\\r\\n        address _recipient,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external onlyMinter nonReentrant returns (uint96 _refreshed) {\\r\\n        uint256 outstanding = uint256(lockers[_recipient].amount);\\r\\n        if (_amount > outstanding) {\\r\\n            stakedDF.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amount - outstanding\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _unLock(msg.sender, _recipient);\\r\\n        _refreshed = _lock(msg.sender, _recipient, _amount, _duration);\\r\\n\\r\\n        if (_amount < outstanding)\\r\\n            stakedDF.safeTransfer(_recipient, outstanding - _amount);\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /******** Query function *********/\\r\\n    /*********************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Return all minters\\r\\n     * @return _minters The list of minter addresses\\r\\n     */\\r\\n    function getMinters() external view returns (address[] memory _minters) {\\r\\n        uint256 _len = minters.length();\\r\\n        _minters = new address[](_len);\\r\\n        for (uint256 i = 0; i < _len; i++) {\\r\\n            _minters[i] = minters.at(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to query the information of the locker.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @return Information of the locker.\\r\\n     *         due time;\\r\\n     *         Lock up duration;\\r\\n     *         Lock up sDF amount;\\r\\n     */\\r\\n    function getLocker(address _lockerAddress) external view returns (uint32 ,uint32 ,uint96) {\\r\\n        Locker storage _locker = lockers[_lockerAddress];\\r\\n        return (_locker.dueTime, _locker.duration, _locker.amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the expected amount of users.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @param _amount Staked DF token amount.\\r\\n     * @param _duration Duration, in seconds.\\r\\n     * @return veDF amount.\\r\\n     */\\r\\n    function calcBalanceReceived(address _lockerAddress, uint256 _amount, uint256 _duration)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Locker storage _locker = lockers[_lockerAddress];\\r\\n        if (_locker.dueTime < block.timestamp)\\r\\n            return _amount.rmul(_weightedRate(_duration));\\r\\n\\r\\n        uint256 _receiveAmount = uint256(_locker.amount).rmul(_weightedRate(_duration));\\r\\n        return _receiveAmount.add(_amount.rmul(_weightedRate(uint256(_locker.dueTime).add(_duration).sub(block.timestamp))));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/veDF/GovernanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ncontract GovernanceToken {\\r\\n    /// @notice EIP-20 token name for this token\\r\\n    string public constant name = \\\"dForce Vote Escrow Token\\\";\\r\\n\\r\\n    /// @notice EIP-20 token symbol for this token\\r\\n    string public constant symbol = \\\"veDF\\\";\\r\\n\\r\\n    /// @notice EIP-20 token decimals for this token\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    /// @dev Allowance amounts on behalf of others\\r\\n    mapping (address => mapping (address => uint96)) internal allowances;\\r\\n\\r\\n    /// @dev Official record of token balances for each account\\r\\n    mapping (address => uint96) internal balances;\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping (address => address) public delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping (address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address => uint256) public nonces;\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\r\\n\\r\\n    /// @notice The standard EIP-20 transfer event\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /// @notice The standard EIP-20 approval event\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\r\\n     * @param account The address of the account holding the funds\\r\\n     * @param spender The address of the account spending the funds\\r\\n     * @return The number of tokens approved\\r\\n     */\\r\\n    function allowance(address account, address spender) external view returns (uint256) {\\r\\n        return allowances[account][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 rawAmount) external returns (bool) {\\r\\n        uint96 amount;\\r\\n        if (rawAmount == uint256(-1)) {\\r\\n            amount = uint96(-1);\\r\\n        } else {\\r\\n            amount = safe96(rawAmount, \\\"veDF::approve: amount exceeds 96 bits\\\");\\r\\n        }\\r\\n\\r\\n        allowances[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens held by the `account`\\r\\n     * @param account The address of the account to get the balance of\\r\\n     * @return The number of tokens held\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    // function transfer(address dst, uint256 rawAmount) external returns (bool) {\\r\\n    //     uint96 amount = safe96(rawAmount, \\\"veDF::transfer: amount exceeds 96 bits\\\");\\r\\n    //     _transferTokens(msg.sender, dst, amount);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    // function transferFrom(address src, address dst, uint256 rawAmount) external returns (bool) {\\r\\n    //     address spender = msg.sender;\\r\\n    //     uint96 spenderAllowance = allowances[src][spender];\\r\\n    //     uint96 amount = safe96(rawAmount, \\\"veDF::approve: amount exceeds 96 bits\\\");\\r\\n\\r\\n    //     if (spender != src && spenderAllowance != uint96(-1)) {\\r\\n    //         uint96 newAllowance = sub96(spenderAllowance, amount, \\\"veDF::transferFrom: transfer amount exceeds spender allowance\\\");\\r\\n    //         allowances[src][spender] = newAllowance;\\r\\n\\r\\n    //         emit Approval(src, spender, newAllowance);\\r\\n    //     }\\r\\n\\r\\n    //     _transferTokens(src, dst, amount);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) public {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public {\\r\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\r\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"veDF::delegateBySig: invalid signature\\\");\\r\\n        require(nonce == nonces[signatory]++, \\\"veDF::delegateBySig: invalid nonce\\\");\\r\\n        require(now <= expiry, \\\"veDF::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account) external view returns (uint96) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\r\\n        require(blockNumber < block.number, \\\"veDF::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates[delegator];\\r\\n        uint96 delegatorBalance = balances[delegator];\\r\\n        delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    // function _transferTokens(address src, address dst, uint96 amount) internal {\\r\\n    //     require(src != address(0), \\\"veDF::_transferTokens: cannot transfer from the zero address\\\");\\r\\n    //     require(dst != address(0), \\\"veDF::_transferTokens: cannot transfer to the zero address\\\");\\r\\n\\r\\n    //     balances[src] = sub96(balances[src], amount, \\\"veDF::_transferTokens: transfer amount exceeds balance\\\");\\r\\n    //     balances[dst] = add96(balances[dst], amount, \\\"veDF::_transferTokens: transfer amount overflows\\\");\\r\\n    //     emit Transfer(src, dst, amount);\\r\\n\\r\\n    //     _moveDelegates(delegates[src], delegates[dst], amount);\\r\\n    // }\\r\\n\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\r\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"veDF::_moveVotes: vote amount underflows\\\");\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\r\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"veDF::_moveVotes: vote amount overflows\\\");\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\r\\n        uint32 blockNumber = safe32(block.number, \\\"veDF::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n\\r\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(n < 2**96, errorMessage);\\r\\n        return uint96(n);\\r\\n    }\\r\\n\\r\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        uint96 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint256) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n *\\r\\n */\\r\\nabstract contract ERC20Permit {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 chainId, uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH =\\r\\n        0x576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf;\\r\\n    mapping(address => uint256) public erc20Nonces;\\r\\n\\r\\n    /**\\r\\n     * @dev EIP2612 permit function. For more details, please look at here:\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612\\r\\n     * @param _owner The owner of the funds.\\r\\n     * @param _spender The spender.\\r\\n     * @param _value The amount.\\r\\n     * @param _deadline The deadline timestamp, type(uint256).max for max deadline.\\r\\n     * @param _v Signature param.\\r\\n     * @param _s Signature param.\\r\\n     * @param _r Signature param.\\r\\n     */\\r\\n    function permit(\\r\\n        address _owner,\\r\\n        address _spender,\\r\\n        uint256 _value,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external virtual {\\r\\n        require(_deadline >= block.timestamp, \\\"permit: EXPIRED!\\\");\\r\\n        uint256 _currentNonce = erc20Nonces[_owner];\\r\\n\\r\\n        bytes32 _digest =\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    \\\"\\\\x19\\\\x01\\\",\\r\\n                    DOMAIN_SEPARATOR,\\r\\n                    keccak256(\\r\\n                        abi.encode(\\r\\n                            PERMIT_TYPEHASH,\\r\\n                            _owner,\\r\\n                            _spender,\\r\\n                            _getChainId(),\\r\\n                            _value,\\r\\n                            _currentNonce,\\r\\n                            _deadline\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        address _recoveredAddress = ecrecover(_digest, _v, _r, _s);\\r\\n        require(\\r\\n            _recoveredAddress != address(0) && _recoveredAddress == _owner,\\r\\n            \\\"permit: INVALID_SIGNATURE!\\\"\\r\\n        );\\r\\n        erc20Nonces[_owner] = _currentNonce.add(1);\\r\\n        _approveERC20(_owner, _spender, _value);\\r\\n    }\\r\\n\\r\\n    function _getChainId() internal pure virtual returns (uint256) {\\r\\n        uint256 _chainId;\\r\\n        assembly {\\r\\n            _chainId := chainid()\\r\\n        }\\r\\n        return _chainId;\\r\\n    }\\r\\n\\r\\n    function _approveERC20(address _owner, address _spender, uint256 _amount) internal virtual;\\r\\n}\"\r\n    },\r\n    \"contracts/library/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\r\\n */\\r\\ncontract Ownable {\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    address payable public owner;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current pending owner.\\r\\n     */\\r\\n    address payable public pendingOwner;\\r\\n\\r\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\r\\n    event NewPendingOwner(\\r\\n        address indexed oldPendingOwner,\\r\\n        address indexed newPendingOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal {\\r\\n        owner = msg.sender;\\r\\n        emit NewOwner(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\r\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\r\\n     * @param newPendingOwner New pending owner.\\r\\n     */\\r\\n    function _setPendingOwner(address payable newPendingOwner)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\r\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\r\\n        );\\r\\n\\r\\n        // Gets current owner.\\r\\n        address oldPendingOwner = pendingOwner;\\r\\n\\r\\n        // Sets new pending owner.\\r\\n        pendingOwner = newPendingOwner;\\r\\n\\r\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\r\\n     */\\r\\n    function _acceptOwner() external {\\r\\n        require(\\r\\n            msg.sender == pendingOwner,\\r\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\r\\n        );\\r\\n\\r\\n        // Gets current values for events.\\r\\n        address oldOwner = owner;\\r\\n        address oldPendingOwner = pendingOwner;\\r\\n\\r\\n        // Set the new contract owner.\\r\\n        owner = pendingOwner;\\r\\n\\r\\n        // Clear the pendingOwner.\\r\\n        pendingOwner = address(0);\\r\\n\\r\\n        emit NewOwner(oldOwner, owner);\\r\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/SafeRatioMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeRatioMath {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    uint256 private constant BASE = 10**18;\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a.mul(BASE).div(b);\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a.mul(b).div(BASE);\\r\\n    }\\r\\n\\r\\n    function rdivup(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a.mul(BASE).add(b.sub(1)).div(b);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakedDF\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dueTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"}],\"name\":\"UnLock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"_addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"_removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"calcBalanceReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc20Nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"_extended\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerAddress\",\"type\":\"address\"}],\"name\":\"getLocker\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakedDF\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isvDF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"_refilled\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"refresh\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"_refreshed\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"refresh2\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"_refreshed\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"_unlocked\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"withdraw2\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"_unlocked\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "veDF", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000041602ccf9b1f63ea1d0ab0f0a1d2f4fd0da53f60", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}