{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-05-04\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface ILegendsOfAtlantis {\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Staking is IERC721Receiver, ReentrancyGuard {\r\n\r\n    address public owner;\r\n\r\n    struct Stake {\r\n        uint256 tokenId;\r\n        address owner;\r\n        uint256 startTime;\r\n    }\r\n\r\n    event stakeAdded(uint256 _id);\r\n    event stakeRemoved(uint256 _id);\r\n\r\n    mapping(uint256 => Stake) public stakes;\r\n    mapping(address => uint256[]) public stakesByOwner;\r\n\r\n    ILegendsOfAtlantis legendsOfAtlantis;\r\n\r\n    constructor() {\r\n        legendsOfAtlantis = ILegendsOfAtlantis(0x7746B7eF168547B61890E6B7Ce2CC6a1FE40C872);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function stake(uint256 _id) public nonReentrant {\r\n        address caller = msg.sender;\r\n        require(msg.sender == tx.origin, \"Only EOA!\");\r\n        // check if caller is owner of nft\r\n        require(legendsOfAtlantis.ownerOf(_id) == caller, \"Not an owner of NFT!\");\r\n        // update stakes & stakes by owner\r\n        stakes[_id] = Stake({\r\n            tokenId: _id,\r\n            owner: caller,\r\n            startTime: block.timestamp\r\n        });\r\n        // stakesByOwner[caller].push(_id);\r\n        for (uint256 j=0; j<stakesByOwner[caller].length + 1; j++) {\r\n            if (stakesByOwner[caller].length == j) {\r\n                stakesByOwner[caller].push(_id);\r\n                break;\r\n            } else if (stakesByOwner[caller][j] == 0) {\r\n                stakesByOwner[caller][j] = _id;\r\n                break;\r\n            }\r\n        }\r\n        // transfer nft to smart contract\r\n        legendsOfAtlantis.safeTransferFrom(caller, address(this), _id);\r\n\r\n        emit stakeAdded(_id);\r\n    }\r\n\r\n    function stakeMany(uint256[] memory _wallet) public nonReentrant {\r\n        address caller = msg.sender;\r\n        require(msg.sender == tx.origin, \"Only EOA!\");\r\n        // iterate over caller IDs\r\n        for (uint256 i=0; i<_wallet.length; i++) {\r\n            uint256 _id = _wallet[i];\r\n            // check if caller is owner of nft\r\n            require(legendsOfAtlantis.ownerOf(_id) == caller, \"Not an owner of NFT!\");\r\n            // update stakes & stakes by owner\r\n            stakes[_id] = Stake({\r\n                tokenId: _id,\r\n                owner: caller,\r\n                startTime: block.timestamp\r\n            });\r\n            // stakesByOwner[caller].push(_id);\r\n            for (uint256 j=0; j<stakesByOwner[caller].length + 1; j++) {\r\n                if (stakesByOwner[caller].length == j) {\r\n                    stakesByOwner[caller].push(_id);\r\n                    break;\r\n                } else if (stakesByOwner[caller][j] == 0) {\r\n                    stakesByOwner[caller][j] = _id;\r\n                    break;\r\n                }\r\n            }\r\n            // transfer nft to smart contract\r\n            legendsOfAtlantis.safeTransferFrom(caller, address(this), _id);\r\n\r\n            emit stakeAdded(_id);\r\n        }\r\n    }\r\n\r\n    function unstake(uint256 _id) public nonReentrant {\r\n        address caller = msg.sender;\r\n        require(msg.sender == tx.origin, \"Only EOA!\");\r\n        // check if caller is owner of nft & time staked longer than 2 days\r\n        require(stakes[_id].owner == msg.sender, \"Not an owner of NFT!\");\r\n        require(getStakeTime(_id) > 172_800, \"You can unstake only after 2 days\");\r\n        // update stakes & stakes by owner\r\n        delete stakes[_id];\r\n        for (uint256 j=0; j<stakesByOwner[caller].length; j++) {\r\n            if (stakesByOwner[caller][j] == _id) {\r\n                delete stakesByOwner[caller][j];\r\n            }\r\n        }\r\n        // transfer nft to caller\r\n        legendsOfAtlantis.safeTransferFrom(address(this), caller, _id);\r\n\r\n        emit stakeRemoved(_id);\r\n    }\r\n\r\n    function unstakeMany(uint256[] memory _wallet) public nonReentrant {\r\n        address caller = msg.sender;\r\n        require(msg.sender == tx.origin, \"Only EOA!\");\r\n        // iterate over caller IDs\r\n        for (uint256 i=0; i<_wallet.length; i++) {\r\n            uint256 _id = _wallet[i];\r\n            // check if caller is owner of nft & time staked longer than 2 days\r\n            require(stakes[_id].owner == caller, \"Not an owner of NFT!\");\r\n            require(getStakeTime(_id) > 172_800, \"You can unstake only after 2 days!\");\r\n            // update stakes & stakes by owner\r\n            delete stakes[_id];\r\n            for (uint256 j=0; j<stakesByOwner[caller].length; j++) {\r\n                if (stakesByOwner[caller][j] == _id) {\r\n                    delete stakesByOwner[caller][j];\r\n                }\r\n            }\r\n            // transfer nft to caller\r\n            legendsOfAtlantis.safeTransferFrom(address(this), caller, _id);\r\n\r\n            emit stakeRemoved(_id);\r\n        }\r\n    }\r\n\r\n    function emergencyUnstake(uint256 _id) public {\r\n        require(msg.sender == owner, \"You are not an owner!\");\r\n        address stakeOwner = stakes[_id].owner;\r\n        delete stakes[_id];\r\n        for (uint256 j=0; j<stakesByOwner[stakeOwner].length; j++) {\r\n                if (stakesByOwner[stakeOwner][j] == _id) {\r\n                    delete stakesByOwner[stakeOwner][j];\r\n                }\r\n            }\r\n        legendsOfAtlantis.safeTransferFrom(address(this), owner, _id);\r\n    }\r\n\r\n    function getStakeTime(uint256 _id) public view returns(uint256) {\r\n        return (block.timestamp - stakes[_id].startTime);\r\n    }\r\n\r\n    function getStakeOwner(uint256 _id) public view returns(address) {\r\n        return stakes[_id].owner;\r\n    }\r\n\r\n    function getStakesByOwner(address _owner) public view returns(uint256[] memory) {\r\n        return stakesByOwner[_owner];\r\n    }\r\n\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) pure external override returns(bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"stakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"stakeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStakeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakesByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_wallet\",\"type\":\"uint256[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_wallet\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7603443190afaa96c411f44133e58a0d6489b4ff90059bf3a56c6a955e46b3b8"}]}