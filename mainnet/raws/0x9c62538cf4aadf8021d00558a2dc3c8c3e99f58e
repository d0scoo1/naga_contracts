{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12;\r\n\r\n////// src/CropJoin.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\ncontract CropJoin {\r\n    address public implementation;\r\n    mapping (address => uint256) public wards;\r\n    uint256 public live;\r\n\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event SetImplementation(address indexed);\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"CropJoin/not-authed\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n        live = 1;\r\n    }\r\n\r\n    function rely(address usr) external auth {\r\n        wards[usr] = 1;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    function deny(address usr) external auth {\r\n        wards[usr] = 0;\r\n        emit Deny(msg.sender);\r\n    }\r\n\r\n    function setImplementation(address implementation_) external auth {\r\n        implementation = implementation_;\r\n        emit SetImplementation(implementation_);\r\n    }\r\n\r\n    fallback() external {\r\n        address _impl = implementation;\r\n        require(_impl != address(0));\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\ninterface VatLike_14 {\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function slip(bytes32, address, int256) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address dst, uint256 amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\n// receives tokens and shares them among holders\r\ncontract CropJoinImp {\r\n    bytes32 slot0;\r\n    mapping (address => uint256) wards;\r\n    uint256 live;\r\n\r\n    VatLike_14     public immutable vat;    // cdp engine\r\n    bytes32     public immutable ilk;    // collateral type\r\n    ERC20       public immutable gem;    // collateral token\r\n    uint256     public immutable dec;    // gem decimals\r\n    ERC20       public immutable bonus;  // rewards token\r\n\r\n    uint256     public share;  // crops per gem    [bonus decimals * ray / wad]\r\n    uint256     public total;  // total gems       [wad]\r\n    uint256     public stock;  // crop balance     [bonus decimals]\r\n\r\n    mapping (address => uint256) public crops; // crops per user  [bonus decimals]\r\n    mapping (address => uint256) public stake; // gems per user   [wad]\r\n\r\n    uint256 immutable internal to18ConversionFactor;\r\n    uint256 immutable internal toGemConversionFactor;\r\n\r\n    // --- Events ---\r\n    event Join(address indexed urn, address indexed usr, uint256 val);\r\n    event Exit(address indexed urn, address indexed usr, uint256 val);\r\n    event Flee(address indexed urn, address indexed usr, uint256 val);\r\n    event Tack(address indexed src, address indexed dst, uint256 wad);\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"CropJoin/not-authed\");\r\n        _;\r\n    }\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_, address bonus_) public {\r\n        vat = VatLike_14(vat_);\r\n        ilk = ilk_;\r\n        gem = ERC20(gem_);\r\n        uint256 dec_ = ERC20(gem_).decimals();\r\n        require(dec_ <= 18);\r\n        dec = dec_;\r\n        to18ConversionFactor = 10 ** (18 - dec_);\r\n        toGemConversionFactor = 10 ** dec_;\r\n        bonus = ERC20(bonus_);\r\n    }\r\n\r\n    function add(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(x, sub(y, 1)) / y;\r\n    }\r\n    uint256 constant WAD  = 10 ** 18;\r\n    function wmul(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        z = mul(x, y) / WAD;\r\n    }\r\n    function wdiv(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        z = mul(x, WAD) / y;\r\n    }\r\n    function wdivup(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        z = divup(mul(x, WAD), y);\r\n    }\r\n    uint256 constant RAY  = 10 ** 27;\r\n    function rmul(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        z = mul(x, y) / RAY;\r\n    }\r\n    function rmulup(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        z = divup(mul(x, y), RAY);\r\n    }\r\n    function rdiv(uint256 x, uint256 y) public pure returns (uint256 z) {\r\n        z = mul(x, RAY) / y;\r\n    }\r\n\r\n    // Net Asset Valuation [wad]\r\n    function nav() public virtual view returns (uint256) {\r\n        uint256 _nav = gem.balanceOf(address(this));\r\n        return mul(_nav, to18ConversionFactor);\r\n    }\r\n\r\n    // Net Assets per Share [wad]\r\n    function nps() public view returns (uint256) {\r\n        if (total == 0) return WAD;\r\n        else return wdiv(nav(), total);\r\n    }\r\n\r\n    function crop() internal virtual returns (uint256) {\r\n        return sub(bonus.balanceOf(address(this)), stock);\r\n    }\r\n\r\n    function harvest(address from, address to) internal {\r\n        if (total > 0) share = add(share, rdiv(crop(), total));\r\n\r\n        uint256 last = crops[from];\r\n        uint256 curr = rmul(stake[from], share);\r\n        if (curr > last) require(bonus.transfer(to, curr - last));\r\n        stock = bonus.balanceOf(address(this));\r\n    }\r\n\r\n    function join(address urn, address usr, uint256 val) public auth virtual {\r\n        require(live == 1, \"CropJoin/not-live\");\r\n\r\n        harvest(urn, usr);\r\n        if (val > 0) {\r\n            uint256 wad = wdiv(mul(val, to18ConversionFactor), nps());\r\n\r\n            // Overflow check for int256(wad) cast below\r\n            // Also enforces a non-zero wad\r\n            require(int256(wad) > 0);\r\n\r\n            require(gem.transferFrom(msg.sender, address(this), val));\r\n            vat.slip(ilk, urn, int256(wad));\r\n\r\n            total = add(total, wad);\r\n            stake[urn] = add(stake[urn], wad);\r\n        }\r\n        crops[urn] = rmulup(stake[urn], share);\r\n        emit Join(urn, usr, val);\r\n    }\r\n\r\n    function exit(address urn, address usr, uint256 val) public auth virtual {\r\n        harvest(urn, usr);\r\n        if (val > 0) {\r\n            uint256 wad = wdivup(mul(val, to18ConversionFactor), nps());\r\n\r\n            // Overflow check for int256(wad) cast below\r\n            // Also enforces a non-zero wad\r\n            require(int256(wad) > 0);\r\n\r\n            require(gem.transfer(usr, val));\r\n            vat.slip(ilk, urn, -int256(wad));\r\n\r\n            total = sub(total, wad);\r\n            stake[urn] = sub(stake[urn], wad);\r\n        }\r\n        crops[urn] = rmulup(stake[urn], share);\r\n        emit Exit(urn, usr, val);\r\n    }\r\n\r\n    function flee(address urn, address usr, uint256 val) public auth virtual {\r\n        uint256 wad = wdivup(mul(val, to18ConversionFactor), nps());\r\n\r\n        // Overflow check for int256(wad) cast below\r\n        // Also enforces a non-zero wad\r\n        require(int256(wad) > 0);\r\n\r\n        require(gem.transfer(usr, val));\r\n        vat.slip(ilk, urn, -int256(wad));\r\n\r\n        total = sub(total, wad);\r\n        stake[urn] = sub(stake[urn], wad);\r\n        crops[urn] = rmulup(stake[urn], share);\r\n\r\n        emit Flee(urn, usr, val);\r\n    }\r\n\r\n    function tack(address src, address dst, uint256 wad) public {\r\n        uint256 ss = stake[src];\r\n        stake[src] = sub(ss, wad);\r\n        stake[dst] = add(stake[dst], wad);\r\n\r\n        uint256 cs     = crops[src];\r\n        uint256 dcrops = mul(cs, wad) / ss;\r\n\r\n        // safe since dcrops <= crops[src]\r\n        crops[src] = cs - dcrops;\r\n        crops[dst] = add(crops[dst], dcrops);\r\n\r\n        (uint256 ink,) = vat.urns(ilk, src);\r\n        require(stake[src] >= add(vat.gem(ilk, src), ink));\r\n        (ink,) = vat.urns(ilk, dst);\r\n        require(stake[dst] <= add(vat.gem(ilk, dst), ink));\r\n\r\n        emit Tack(src, dst, wad);\r\n    }\r\n\r\n    function cage() public auth virtual {\r\n        live = 0;\r\n    }\r\n}\r\n\r\n////// src/SynthetixJoin.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\n/* import \"./CropJoin.sol\"; */\r\n\r\ninterface StakingRewardsLike_1 {\r\n    function rewardsToken() external view returns (address);\r\n    function stakingToken() external view returns (address);\r\n    function stake(uint256) external;\r\n    function withdraw(uint256) external;\r\n    function getReward() external;\r\n}\r\n\r\n// Join adapter for the Synthetix Staking Rewards contract (used by Uniswap V2, LIDO, etc)\r\ncontract SynthetixJoinImp is CropJoinImp {\r\n\r\n    StakingRewardsLike_1 immutable public pool;\r\n\r\n    /**\r\n        @param vat_                 MCD_VAT DSS core accounting module\r\n        @param ilk_                 Collateral type\r\n        @param gem_                 The collateral LP token address\r\n        @param bonus_               The rewards token contract address.\r\n        @param pool_                The staking rewards pool.\r\n    */\r\n    constructor(\r\n        address vat_,\r\n        bytes32 ilk_,\r\n        address gem_,\r\n        address bonus_,\r\n        address pool_\r\n    )\r\n        public\r\n        CropJoinImp(vat_, ilk_, gem_, bonus_)\r\n    {\r\n        // Sanity checks\r\n        require(StakingRewardsLike_1(pool_).rewardsToken() == bonus_, \"SynthetixJoin/bonus-mismatch\");\r\n        require(StakingRewardsLike_1(pool_).stakingToken() == gem_, \"SynthetixJoin/gem-mismatch\");\r\n\r\n        pool = StakingRewardsLike_1(pool_);\r\n    }\r\n\r\n    function init() external {\r\n        gem.approve(address(pool), type(uint256).max);\r\n    }\r\n\r\n    function nav() public override view returns (uint256) {\r\n        return total;\r\n    }\r\n\r\n    function crop() internal override returns (uint256) {\r\n        if (live == 1) {\r\n            pool.getReward();\r\n        }\r\n        return super.crop();\r\n    }\r\n\r\n    function join(address urn, address usr, uint256 val) public override {\r\n        super.join(urn, usr, val);\r\n        if (val > 0) pool.stake(val);\r\n    }\r\n\r\n    function exit(address urn, address usr, uint256 val) public override {\r\n        if (live == 1) {\r\n            if (val > 0) pool.withdraw(val);\r\n        }\r\n        super.exit(urn, usr, val);\r\n    }\r\n\r\n    function flee(address urn, address usr, uint256 val) public override {\r\n        if (live == 1) {\r\n            if (val > 0) pool.withdraw(val);\r\n        }\r\n        super.flee(urn, usr, val);\r\n    }\r\n    function cage() override public auth {\r\n        require(live == 1, \"SynthetixJoin/not-live\");\r\n\r\n        if (total > 0) pool.withdraw(total);\r\n        live = 0;\r\n    }\r\n    function uncage() external auth {\r\n        require(live == 0, \"SynthetixJoin/live\");\r\n\r\n        if (total > 0) pool.stake(total);\r\n        live = 1;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gem_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bonus_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Flee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Tack\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"flee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"mul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract StakingRewardsLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmulup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"tack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uncage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike_14\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SynthetixJoinImp", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b435256563145544853544554482d41000000000000000000000000000000000000000000000000000000000006325440d014e39736583c165c2963ba99faf14e0000000000000000000000005a98fcbea516cf06857215779fd812ca3bef1b3200000000000000000000000099ac10631f69c753ddb595d074422a0922d9056b", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c0f2731cae659045d060a56e1f427fd6349c7cd478a2c437d4a682987773af4f"}]}