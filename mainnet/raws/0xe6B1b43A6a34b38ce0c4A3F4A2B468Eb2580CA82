{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// This library is used to check merkle proofs very efficiently. Each additional proof element adds ~1000 gas\r\nlibrary MerkleLib {\r\n\r\n    // This is the main function that will be called by contracts. It assumes the leaf is already hashed, as in,\r\n    // it is not raw data but the hash of that. This is because the leaf data could be any combination of hashable\r\n    // datatypes, so we let contracts hash the data themselves to keep this function simple\r\n    function verifyProof(bytes32 root, bytes32 leaf, bytes32[] memory proof) public pure returns (bool) {\r\n        bytes32 currentHash = leaf;\r\n\r\n        // the proof is all siblings of the ancestors of the leaf (including the sibling of the leaf itself)\r\n        // each iteration of this loop steps one layer higher in the merkle tree\r\n        for (uint i = 0; i < proof.length; i += 1) {\r\n            currentHash = parentHash(currentHash, proof[i]);\r\n        }\r\n\r\n        // does the result match the expected root? if so this leaf was committed to when the root was posted\r\n        // else we must assume the data was not included\r\n        return currentHash == root;\r\n    }\r\n\r\n    function parentHash(bytes32 a, bytes32 b) public pure returns (bytes32) {\r\n        // the convention is that the inputs are sorted, this removes ambiguity about tree structure\r\n        if (a < b) {\r\n            return keccak256(abi.encode(a, b));\r\n        } else {\r\n            return keccak256(abi.encode(b, a));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// This contract is for user-chosen vesting schedules, within parameters selected by the tree creator\r\ncontract MerkleResistor {\r\n    using MerkleLib for bytes32;\r\n\r\n    // tree (vesting schedule) counter\r\n    uint public numTrees = 0;\r\n\r\n    // this represents a user chosen vesting schedule, post initiation\r\n    struct Tranche {\r\n        uint totalCoins; // total coins released after vesting complete\r\n        uint currentCoins; // unclaimed coins remaining in the contract, waiting to be vested\r\n        uint startTime; // start time of the vesting schedule\r\n        uint endTime;   // end time of the vesting schedule\r\n        uint coinsPerSecond;  // how many coins are emitted per second, this value is cached to avoid recomputing it\r\n        uint lastWithdrawalTime; // keep track of last time user claimed coins to compute coins owed for this withdrawal\r\n    }\r\n\r\n    // this represents an arbitrarily large set of token recipients with partially-initialized vesting schedules\r\n    struct MerkleTree {\r\n        bytes32 merkleRoot; // merkle root of tree whose leaves are ranges of vesting schedules for each recipient\r\n        bytes32 ipfsHash; // ipfs hash of the entire data set represented by the merkle root, in case our servers go down\r\n        uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\r\n        uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\r\n        uint pctUpFront; // percent of vested coins that will be available and withdrawn upon initialization\r\n        address tokenAddress; // address of token to be distributed\r\n        uint tokenBalance; // amount of tokens allocated to this tree (this prevents trees from sharing tokens)\r\n    }\r\n\r\n    // initialized[recipient][treeIndex] = hasUserChosenVestingSchedule\r\n    // could have reused tranches (see below) for this but loading a bool is cheaper than loading an entire struct\r\n    // NOTE: if a user appears in the same tree multiple times, the first leaf initialized will prevent the others from initializing\r\n    mapping (address => mapping (uint => bool)) public initialized;\r\n\r\n    // basically an array of vesting schedules, but without annoying solidity array syntax\r\n    mapping (uint => MerkleTree) public merkleTrees;\r\n\r\n    // tranches[recipient][treeIndex] = chosenVestingSchedule\r\n    mapping (address => mapping (uint => Tranche)) public tranches;\r\n\r\n    // precision factory used to handle floating point arithmetic\r\n    uint constant public PRECISION = 1000000;\r\n\r\n    // every time a withdrawal occurs\r\n    event WithdrawalOccurred(address indexed destination, uint numTokens, uint tokensLeft, uint indexed merkleIndex);\r\n    // every time a tree is added\r\n    event MerkleTreeAdded(uint indexed index, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\r\n    // every time a tree is topped up\r\n    event TokensDeposited(uint indexed index, address indexed tokenAddress, uint amount);\r\n\r\n    // anyone can add a tree\r\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address depositToken, uint tokenBalance) public {\r\n        // check basic coherence of request\r\n        require(pctUpFront < 100, 'pctUpFront >= 100');\r\n        require(minEndTime < maxEndTime, 'minEndTime must be less than maxEndTime');\r\n\r\n        // prefix operator ++ increments then evaluates\r\n        merkleTrees[++numTrees] = MerkleTree(\r\n            newRoot,\r\n            ipfsHash,\r\n            minEndTime,\r\n            maxEndTime,\r\n            pctUpFront,\r\n            depositToken,\r\n            0    // tokenBalance is 0 at first because no tokens have been deposited\r\n        );\r\n\r\n        // pull tokens from user to fund the tree\r\n        // if tree is insufficiently funded, then some users may not be able to be paid out, this is the responsibility\r\n        // of the tree creator, if trees are not funded, then the UI will not display the tree\r\n        depositTokens(numTrees, tokenBalance);\r\n        emit MerkleTreeAdded(numTrees, depositToken, newRoot, ipfsHash);\r\n    }\r\n\r\n    // anyone can fund any tree\r\n    function depositTokens(uint treeIndex, uint value) public {\r\n        // storage because we edit\r\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\r\n\r\n        // bookkeeping to make sure trees do not share tokens\r\n        merkleTree.tokenBalance += value;\r\n\r\n        // do the transfer from the caller\r\n        // NOTE: it is possible for user to overfund the tree and there is no mechanism to reclaim excess tokens\r\n        // this is because there is no way for the contract to know when a tree has had all leaves claimed\r\n        // there is also no way for the contract to know the minimum or maximum liabilities represented by the leaves\r\n        // in short, there is no on-chain inspection of the leaves except at initialization time\r\n        // NOTE: a malicious token contract could cause merkleTree.tokenBalance to be out of sync with the token contract\r\n        // this is an unavoidable possibility, and it could render the tree unusable, while leaving other trees unharmed\r\n        require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\r\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, value);\r\n    }\r\n\r\n    // user calls this to choose and start their vesting schedule\r\n    // merkle proof confirms they are passing data previously committed to by tree creator\r\n    // vestingTime is chosen by the user, min/max TotalPayments is committed to by the merkleRoot\r\n    function initialize(uint merkleIndex, address destination, uint vestingTime, uint minTotalPayments, uint maxTotalPayments, bytes32[] memory proof) external {\r\n        // user selects own vesting schedule, not others\r\n        require(msg.sender == destination, 'Can only initialize your own tranche');\r\n        // can only initialize once\r\n        require(!initialized[destination][merkleIndex], \"Already initialized\");\r\n        // compute merkle leaf, this is first element of proof\r\n        bytes32 leaf = keccak256(abi.encode(destination, minTotalPayments, maxTotalPayments));\r\n        // memory because we do not edit\r\n        MerkleTree memory tree = merkleTrees[merkleIndex];\r\n        // this calls into MerkleLib, super cheap ~1000 gas per proof element\r\n        require(tree.merkleRoot.verifyProof(leaf, proof), \"The proof could not be verified.\");\r\n        // mark tree as initialized, preventing re-entrance or multiple initializations\r\n        initialized[destination][merkleIndex] = true;\r\n\r\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(merkleIndex, vestingTime, minTotalPayments, maxTotalPayments);\r\n        require(valid, 'Invalid vesting schedule');\r\n\r\n        // fill out the struct for the address' vesting schedule\r\n        // don't have to mark as storage here, it's implied (why isn't it always implied when written to? solc-devs?)\r\n        tranches[destination][merkleIndex] = Tranche(\r\n            totalCoins,    // this is just a cached number for UI, not used\r\n            totalCoins,    // starts out full\r\n            startTime,     // start time will usually be in the past, if pctUpFront > 0\r\n            block.timestamp + vestingTime,  // vesting starts from initialization time\r\n            coinsPerSecond,  // cached value to avoid recomputation\r\n            startTime      // this is lastWithdrawalTime, set to startTime to indicate no withdrawals have occurred yet\r\n        );\r\n        withdraw(merkleIndex, destination);\r\n    }\r\n\r\n    // user calls this to claim available (unclaimed, unlocked) tokens\r\n    // NOTE: anyone can withdraw tokens for anyone else, but they always go to intended destination\r\n    // msg.sender is not used in this function ;)\r\n    function withdraw(uint merkleIndex, address destination) public {\r\n        // initialize first, no operations on empty structs, I don't care if the values are \"probably zero\"\r\n        require(initialized[destination][merkleIndex], \"You must initialize your account first.\");\r\n        // storage, since we are editing\r\n        Tranche storage tranche = tranches[destination][merkleIndex];\r\n        // if it's empty, don't bother\r\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\r\n        uint currentWithdrawal = 0;\r\n\r\n        // if after vesting period ends, give them the remaining coins, also avoids dust from rounding errors\r\n        if (block.timestamp >= tranche.endTime) {\r\n            currentWithdrawal = tranche.currentCoins;\r\n        } else {\r\n            // compute allowed withdrawal\r\n            // secondsElapsedSinceLastWithdrawal * coinsPerSecond == coinsAccumulatedSinceLastWithdrawal\r\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\r\n        }\r\n        // muto? servo\r\n        MerkleTree storage tree = merkleTrees[merkleIndex];\r\n\r\n        // update struct, modern solidity will catch underflow and prevent currentWithdrawal from exceeding currentCoins\r\n        // but it's computed internally anyway, not user generated\r\n        tranche.currentCoins -= currentWithdrawal;\r\n        // move the time counter up so users can't double-withdraw allocated coins\r\n        // this also works as a re-entrance gate, so currentWithdrawal would be 0 upon re-entrance\r\n        tranche.lastWithdrawalTime = block.timestamp;\r\n        // handle the bookkeeping so trees don't share tokens, do it before transferring to create one more re-entrance gate\r\n        tree.tokenBalance -= currentWithdrawal;\r\n\r\n        // transfer the tokens, brah\r\n        // NOTE: if this is a malicious token, what could happen?\r\n        // 1/ token doesn't transfer given amount to recipient, this is bad for user, but does not effect other trees\r\n        // 2/ token fails for some reason, again bad for user, but this does not effect other trees\r\n        // 3/ token re-enters this function (or other, but this is the only one that transfers tokens out)\r\n        // in which case, lastWithdrawalTime == block.timestamp, so currentWithdrawal == 0\r\n        // besides msg.sender is not used in this function, so who calls it is irrelevant...\r\n        require(IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal), 'Token transfer failed');\r\n        emit WithdrawalOccurred(destination, currentWithdrawal, tranche.currentCoins, merkleIndex);\r\n    }\r\n\r\n    // used to determine whether the vesting schedule is legit\r\n    function verifyVestingSchedule(uint merkleIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\r\n        // vesting schedules for non-existing trees are invalid, I don't care how much you like uninitialized structs\r\n        if (merkleIndex > numTrees) {\r\n            return (false, 0, 0, 0);\r\n        }\r\n\r\n        // memory not storage, since we do not edit the tree, and it's a view function anyways\r\n        MerkleTree memory tree = merkleTrees[merkleIndex];\r\n\r\n        // vesting time must sit within the closed interval of [minEndTime, maxEndTime]\r\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\r\n            return (false, 0, 0, 0);\r\n        }\r\n\r\n        uint totalCoins;\r\n        if (vestingTime == tree.maxEndTime) {\r\n            // this is to prevent dust accumulation from rounding errors\r\n            // maxEndTime results in max payments, no further computation necessary\r\n            totalCoins = maxTotalPayments;\r\n        } else {\r\n            // remember grade school algebra? slope = \u0394y / \u0394x\r\n            // this is the slope of eligible vesting schedules. In general, 0 < m < 1,\r\n            // (longer vesting schedules should result in less coins per second, hence \"resistor\")\r\n            // so we multiply by a precision factor to reduce rounding errors\r\n            // y axis = total coins released after vesting completed\r\n            // x axis = length of vesting schedule\r\n            // this is the line of valid end-points for the chosen vesting schedule line, see below\r\n            // NOTE: this reverts if minTotalPayments > maxTotalPayments, which is a good thing\r\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\r\n\r\n            // y = mx + b = paymentSlope * (x - x0) + y0\r\n            // divide by precision factor here since we have completed the rounding error sensitive operations\r\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\r\n        }\r\n\r\n        // this is a different slope, the slope of their chosen vesting schedule\r\n        // y axis = cumulative coins emitted\r\n        // x axis = time elapsed\r\n        // NOTE: vestingTime starts from block.timestamp, so doesn't include coins already available from pctUpFront\r\n        // totalCoins / vestingTime is wrong, we have to multiple by the proportion of the coins that are indexed\r\n        // by vestingTime, which is (100 - pctUpFront) / 100\r\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\r\n\r\n        // vestingTime is relative to initialization point\r\n        // endTime = block.timestamp + vestingTime\r\n        // vestingLength = totalCoins / coinsPerSecond\r\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\r\n\r\n        return (true, totalCoins, coinsPerSecond, startTime);\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"name\":\"MerkleTreeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensLeft\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"merkleIndex\",\"type\":\"uint256\"}],\"name\":\"WithdrawalOccurred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctUpFront\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"addMerkleTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalPayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayments\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleTrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctUpFront\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTrees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalPayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayments\",\"type\":\"uint256\"}],\"name\":\"verifyVestingSchedule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MerkleResistor", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "MerkleLib:458efd41740ffb27d86a9157050c0707b41e9520", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://687cdc8caf4759b312e18c50f8c293a8cd99dd62cbf7a80817e3194be09a1507"}]}