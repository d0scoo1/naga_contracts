{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Doom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract Doom {\\r\\n  /// @notice EIP-20 token name for this token\\r\\n  string public constant name = \\\"Doom\\\";\\r\\n\\r\\n  /// @notice EIP-20 token symbol for this token\\r\\n  string public constant symbol = \\\"DOOM\\\";\\r\\n\\r\\n  /// @notice EIP-20 token decimals for this token\\r\\n  uint8 public constant decimals = 18;\\r\\n\\r\\n  /// @notice Address which may mint new tokens\\r\\n  address public minter;\\r\\n\\r\\n  /// @notice The timestamp after which minting may occur\\r\\n  uint256 public mintingAllowedAfter;\\r\\n\\r\\n  /// @notice Cap on the percentage of totalSupply that can be minted at each mint\\r\\n  uint8 public constant mintCap = 0;\\r\\n\\r\\n  /// @notice Minimum time between mints\\r\\n  uint32 public constant minimumTimeBetweenMints = 1337 days;\\r\\n\\r\\n  /// @notice Total number of tokens in circulation\\r\\n  uint256 public totalSupply = 272_305e18;\\r\\n\\r\\n  mapping(address =\\u003e mapping(address =\\u003e uint96)) internal allowances;\\r\\n\\r\\n  mapping(address =\\u003e uint96) internal balances;\\r\\n\\r\\n  mapping(address =\\u003e address) public delegates;\\r\\n\\r\\n  struct Checkpoint {\\r\\n    uint32 fromBlock;\\r\\n    uint96 votes;\\r\\n  }\\r\\n\\r\\n  mapping(address =\\u003e mapping(uint32 =\\u003e Checkpoint)) public checkpoints;\\r\\n\\r\\n  mapping(address =\\u003e uint32) public numCheckpoints;\\r\\n\\r\\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\r\\n    \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\r\\n  );\\r\\n\\r\\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\r\\n    \\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\"\\r\\n  );\\r\\n\\r\\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\\r\\n    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n  );\\r\\n\\r\\n  mapping(address =\\u003e uint256) public nonces;\\r\\n\\r\\n  /// @notice An event thats emitted when the minter address is changed\\r\\n  event MinterChanged(address minter, address newMinter);\\r\\n\\r\\n  event DelegateChanged(\\r\\n    address indexed delegator,\\r\\n    address indexed fromDelegate,\\r\\n    address indexed toDelegate\\r\\n  );\\r\\n\\r\\n  event DelegateVotesChanged(\\r\\n    address indexed delegate,\\r\\n    uint256 previousBalance,\\r\\n    uint256 newBalance\\r\\n  );\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  constructor(address account, address minter_, uint256 mintingAllowedAfter_) public {\\r\\n    require(\\r\\n      mintingAllowedAfter_ \\u003e= block.timestamp,\\r\\n      \\\"Doom::constructor: minting can only begin after deployment\\\"\\r\\n    );\\r\\n    balances[account] = uint96(totalSupply);\\r\\n    emit Transfer(address(0), account, totalSupply);\\r\\n    minter = minter_;\\r\\n    emit MinterChanged(address(0), minter);\\r\\n    mintingAllowedAfter = 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Change the minter address\\r\\n   * @param minter_ The address of the new minter\\r\\n   */\\r\\n  function setMinter(address minter_) external {\\r\\n    require(msg.sender == minter, \\\"Doom::setMinter: only the minter can change the minter address\\\");\\r\\n    emit MinterChanged(minter, minter_);\\r\\n    minter = minter_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mint new tokens\\r\\n   * @param dst The address of the destination account\\r\\n   * @param rawAmount The number of tokens to be minted\\r\\n   */\\r\\n  function mint(address dst, uint rawAmount) external {\\r\\n    require(msg.sender == minter, \\\"Doom::mint: only the minter can mint\\\");\\r\\n    require(block.timestamp \\u003e= mintingAllowedAfter, \\\"Doom::mint: minting not allowed yet\\\");\\r\\n    require(dst != address(0), \\\"Doom::mint: cannot transfer to the zero address\\\");\\r\\n\\r\\n    // record the mint\\r\\n    mintingAllowedAfter = SafeMath.add(block.timestamp, minimumTimeBetweenMints);\\r\\n\\r\\n    // mint the amount\\r\\n    uint96 amount = safe96(rawAmount, \\\"Doom::mint: amount exceeds 96 bits\\\");\\r\\n    require(amount \\u003c= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100), \\\"Doom::mint: exceeded mint cap\\\");\\r\\n    totalSupply = safe96(SafeMath.add(totalSupply, amount), \\\"Doom::mint: totalSupply exceeds 96 bits\\\");\\r\\n\\r\\n    // transfer the amount to the recipient\\r\\n    balances[dst] = add96(balances[dst], amount, \\\"Doom::mint: transfer amount overflows\\\");\\r\\n    emit Transfer(address(0), dst, amount);\\r\\n\\r\\n    // move delegates\\r\\n    _moveDelegates(address(0), delegates[dst], amount);\\r\\n  }\\r\\n\\r\\n  function allowance(address account, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return allowances[account][spender];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\\r\\n    uint96 amount;\\r\\n    if (rawAmount == uint256(-1)) {\\r\\n      amount = uint96(-1);\\r\\n    } else {\\r\\n      amount = safe96(rawAmount, \\\"Doom::approve: amount exceeds 96 bits\\\");\\r\\n    }\\r\\n\\r\\n    allowances[msg.sender][spender] = amount;\\r\\n\\r\\n    emit Approval(msg.sender, spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 rawAmount,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external {\\r\\n    uint96 amount;\\r\\n    if (rawAmount == uint256(-1)) {\\r\\n      amount = uint96(-1);\\r\\n    } else {\\r\\n      amount = safe96(rawAmount, \\\"Doom::permit: amount exceeds 96 bits\\\");\\r\\n    }\\r\\n\\r\\n    bytes32 domainSeparator = keccak256(\\r\\n      abi.encode(\\r\\n        DOMAIN_TYPEHASH,\\r\\n        keccak256(bytes(name)),\\r\\n        getChainId(),\\r\\n        address(this)\\r\\n      )\\r\\n    );\\r\\n    bytes32 structHash = keccak256(\\r\\n      abi.encode(\\r\\n        PERMIT_TYPEHASH,\\r\\n        owner,\\r\\n        spender,\\r\\n        rawAmount,\\r\\n        nonces[owner]++,\\r\\n        deadline\\r\\n      )\\r\\n    );\\r\\n    bytes32 digest = keccak256(\\r\\n      abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\r\\n    );\\r\\n    address signatory = ecrecover(digest, v, r, s);\\r\\n    require(signatory != address(0), \\\"Doom::permit: invalid signature\\\");\\r\\n    require(signatory == owner, \\\"Doom::permit: unauthorized\\\");\\r\\n    require(now \\u003c= deadline, \\\"Doom::permit: signature expired\\\");\\r\\n\\r\\n    allowances[owner][spender] = amount;\\r\\n\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return balances[account];\\r\\n  }\\r\\n\\r\\n  function nonceOf(address account) external view returns (uint256) {\\r\\n    return nonces[account];\\r\\n  }\\r\\n\\r\\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\\r\\n    uint96 amount = safe96(rawAmount, \\\"Doom::transfer: amount exceeds 96 bits\\\");\\r\\n    _transferTokens(msg.sender, dst, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address src,\\r\\n    address dst,\\r\\n    uint256 rawAmount\\r\\n  ) external returns (bool) {\\r\\n    address spender = msg.sender;\\r\\n    uint96 spenderAllowance = allowances[src][spender];\\r\\n    uint96 amount = safe96(rawAmount, \\\"Doom::approve: amount exceeds 96 bits\\\");\\r\\n\\r\\n    if (spender != src \\u0026\\u0026 spenderAllowance != uint96(-1)) {\\r\\n      uint96 newAllowance = sub96(\\r\\n        spenderAllowance,\\r\\n        amount,\\r\\n        \\\"Doom::transferFrom: transfer amount exceeds spender allowance\\\"\\r\\n      );\\r\\n      allowances[src][spender] = newAllowance;\\r\\n\\r\\n      emit Approval(src, spender, newAllowance);\\r\\n    }\\r\\n\\r\\n    _transferTokens(src, dst, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function delegate(address delegatee) public {\\r\\n    return _delegate(msg.sender, delegatee);\\r\\n  }\\r\\n\\r\\n  function delegateBySig(\\r\\n    address delegatee,\\r\\n    uint256 nonce,\\r\\n    uint256 expiry,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) public {\\r\\n    bytes32 domainSeparator = keccak256(\\r\\n      abi.encode(\\r\\n        DOMAIN_TYPEHASH,\\r\\n        keccak256(bytes(name)),\\r\\n        getChainId(),\\r\\n        address(this)\\r\\n      )\\r\\n    );\\r\\n    bytes32 structHash = keccak256(\\r\\n      abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\r\\n    );\\r\\n    bytes32 digest = keccak256(\\r\\n      abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\r\\n    );\\r\\n    address signatory = ecrecover(digest, v, r, s);\\r\\n    require(signatory != address(0), \\\"Doom::delegateBySig: invalid signature\\\");\\r\\n    require(nonce == nonces[signatory]++, \\\"Doom::delegateBySig: invalid nonce\\\");\\r\\n    require(now \\u003c= expiry, \\\"Doom::delegateBySig: signature expired\\\");\\r\\n    return _delegate(signatory, delegatee);\\r\\n  }\\r\\n\\r\\n  function getCurrentVotes(address account) external view returns (uint96) {\\r\\n    uint32 nCheckpoints = numCheckpoints[account];\\r\\n    return nCheckpoints \\u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n  }\\r\\n\\r\\n  function getPriorVotes(address account, uint256 blockNumber)\\r\\n    public\\r\\n    view\\r\\n    returns (uint96)\\r\\n  {\\r\\n    require(\\r\\n      blockNumber \\u003c block.number,\\r\\n      \\\"Doom::getPriorVotes: not yet determined\\\"\\r\\n    );\\r\\n\\r\\n    uint32 nCheckpoints = numCheckpoints[account];\\r\\n    if (nCheckpoints == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock \\u003c= blockNumber) {\\r\\n      return checkpoints[account][nCheckpoints - 1].votes;\\r\\n    }\\r\\n\\r\\n    if (checkpoints[account][0].fromBlock \\u003e blockNumber) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint32 lower = 0;\\r\\n    uint32 upper = nCheckpoints - 1;\\r\\n    while (upper \\u003e lower) {\\r\\n      uint32 center = upper - (upper - lower) / 2;\\r\\n      Checkpoint memory cp = checkpoints[account][center];\\r\\n      if (cp.fromBlock == blockNumber) {\\r\\n        return cp.votes;\\r\\n      } else if (cp.fromBlock \\u003c blockNumber) {\\r\\n        lower = center;\\r\\n      } else {\\r\\n        upper = center - 1;\\r\\n      }\\r\\n    }\\r\\n    return checkpoints[account][lower].votes;\\r\\n  }\\r\\n\\r\\n  function _delegate(address delegator, address delegatee) internal {\\r\\n    address currentDelegate = delegates[delegator];\\r\\n    uint96 delegatorBalance = balances[delegator];\\r\\n    delegates[delegator] = delegatee;\\r\\n\\r\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n  }\\r\\n\\r\\n  function _transferTokens(\\r\\n    address src,\\r\\n    address dst,\\r\\n    uint96 amount\\r\\n  ) internal {\\r\\n    require(\\r\\n      src != address(0),\\r\\n      \\\"Doom::_transferTokens: cannot transfer from the zero address\\\"\\r\\n    );\\r\\n    require(\\r\\n      dst != address(0),\\r\\n      \\\"Doom::_transferTokens: cannot transfer to the zero address\\\"\\r\\n    );\\r\\n\\r\\n    balances[src] = sub96(\\r\\n      balances[src],\\r\\n      amount,\\r\\n      \\\"Doom::_transferTokens: transfer amount exceeds balance\\\"\\r\\n    );\\r\\n    balances[dst] = add96(\\r\\n      balances[dst],\\r\\n      amount,\\r\\n      \\\"Doom::_transferTokens: transfer amount overflows\\\"\\r\\n    );\\r\\n    emit Transfer(src, dst, amount);\\r\\n\\r\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\r\\n  }\\r\\n\\r\\n  function _moveDelegates(\\r\\n    address srcRep,\\r\\n    address dstRep,\\r\\n    uint96 amount\\r\\n  ) internal {\\r\\n    if (srcRep != dstRep \\u0026\\u0026 amount \\u003e 0) {\\r\\n      if (srcRep != address(0)) {\\r\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n        uint96 srcRepOld = srcRepNum \\u003e 0\\r\\n          ? checkpoints[srcRep][srcRepNum - 1].votes\\r\\n          : 0;\\r\\n        uint96 srcRepNew = sub96(\\r\\n          srcRepOld,\\r\\n          amount,\\r\\n          \\\"Doom::_moveVotes: vote amount underflows\\\"\\r\\n        );\\r\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n      }\\r\\n\\r\\n      if (dstRep != address(0)) {\\r\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n        uint96 dstRepOld = dstRepNum \\u003e 0\\r\\n          ? checkpoints[dstRep][dstRepNum - 1].votes\\r\\n          : 0;\\r\\n        uint96 dstRepNew = add96(\\r\\n          dstRepOld,\\r\\n          amount,\\r\\n          \\\"Doom::_moveVotes: vote amount overflows\\\"\\r\\n        );\\r\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _writeCheckpoint(\\r\\n    address delegatee,\\r\\n    uint32 nCheckpoints,\\r\\n    uint96 oldVotes,\\r\\n    uint96 newVotes\\r\\n  ) internal {\\r\\n    uint32 blockNumber = safe32(\\r\\n      block.number,\\r\\n      \\\"Doom::_writeCheckpoint: block number exceeds 32 bits\\\"\\r\\n    );\\r\\n\\r\\n    if (\\r\\n      nCheckpoints \\u003e 0 \\u0026\\u0026\\r\\n      checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\r\\n    ) {\\r\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n    } else {\\r\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n    }\\r\\n\\r\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n  }\\r\\n\\r\\n  function safe32(uint256 n, string memory errorMessage)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint32)\\r\\n  {\\r\\n    require(n \\u003c 2**32, errorMessage);\\r\\n    return uint32(n);\\r\\n  }\\r\\n\\r\\n  function safe96(uint256 n, string memory errorMessage)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint96)\\r\\n  {\\r\\n    require(n \\u003c 2**96, errorMessage);\\r\\n    return uint96(n);\\r\\n  }\\r\\n\\r\\n  function add96(\\r\\n    uint96 a,\\r\\n    uint96 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint96) {\\r\\n    uint96 c = a + b;\\r\\n    require(c \\u003e= a, errorMessage);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub96(\\r\\n    uint96 a,\\r\\n    uint96 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint96) {\\r\\n    require(b \\u003c= a, errorMessage);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function getChainId() internal pure returns (uint256) {\\r\\n    uint256 chainId;\\r\\n    assembly {\\r\\n      chainId := chainid()\\r\\n    }\\r\\n    return chainId;\\r\\n  }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingAllowedAfter_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTimeBetweenMints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingAllowedAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Doom", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f2396447d54e8ee0e89592bfeb4734b3b56c41a8000000000000000000000000f2396447d54e8ee0e89592bfeb4734b3b56c41a80000000000000000000000000000000000000000000000000000000062843c35", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1674687058ad88736a25d8538f5a98aca0392bcab998d85c5e937c87e027814a"}]}