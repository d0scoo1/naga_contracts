{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/**** \r\n***** this code and any deployments of this code are strictly provided as-is; no guarantee, representation or warranty is being made, express or implied, as to the safety or correctness of the code \r\n***** or any smart contracts or other software deployed from these files, in accordance with the disclosures and licenses found here: https://github.com/ErichDylus/Open-Source-Law/tree/main/solidity#readme\r\n***** this code is not audited, and users, developers, or adapters of these files should proceed with caution and use at their own risk.\r\n***** deployed by varia.eth at 0x3A3bBa660CFE4AB05fcC52829245583b913c740C\r\n****/\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Pay In DAI\r\n/// @dev uses Sushiswap router to swap incoming DAI for USDC tokens, then sends to deployer address\r\n/// @notice permits payment for services denominated in DAI but receiving USDC, avoiding additional unnecessary de minimus taxable event by deployer to cash out USDC\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract PayInDAI {\r\n    \r\n    address constant DAI_TOKEN_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // DAI mainnet token contract address\r\n    address constant USDC_TOKEN_ADDR = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC mainnet token contract address\r\n    address constant SUSHI_ROUTER_ADDR = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // Sushiswap router contract address\r\n    address receiver; \r\n\r\n    IUniswapV2Router02 public sushiRouter;\r\n    IERC20 public ierc20;\r\n\r\n    error CallerNotCurrentReceiver();\r\n\r\n    constructor() payable {\r\n        sushiRouter = IUniswapV2Router02(SUSHI_ROUTER_ADDR);\r\n        ierc20 = IERC20(DAI_TOKEN_ADDR);\r\n        receiver = msg.sender;\r\n    }\r\n\r\n    /// @notice receives DAI payment and swaps to USDC via Sushiswap router, which is then sent to receiver.\r\n    /// @dev sender must approve address(this) for amount of DAI\r\n    /// @param amount of DAI tokens\r\n    function payDAI(uint256 amount) external {\r\n        ierc20.transferFrom(msg.sender, address(this), amount);\r\n        sushiRouter.swapExactTokensForTokens(amount, 0, _getPathForDAItoUSDC(), receiver, block.timestamp);\r\n    }\r\n\r\n    /// @return the router path for DAI/USDC swap\r\n    function _getPathForDAItoUSDC() internal pure returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = DAI_TOKEN_ADDR;\r\n        path[1] = USDC_TOKEN_ADDR;\r\n        return path;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotCurrentReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ierc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PayInDAI", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d8c28f28fc8cd87e53311d9cd9bf278b84b932a6104c3be4ba3e1216b206d2a9"}]}