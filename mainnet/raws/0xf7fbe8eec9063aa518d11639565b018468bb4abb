{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external ;\\r\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external ;\\r\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external  returns(bytes32);\\r\\n    function setResolver(bytes32 node, address resolver) external ;\\r\\n    function setOwner(bytes32 node, address owner) external ;\\r\\n    function setTTL(bytes32 node, uint64 ttl) external ;\\r\\n    function setApprovalForAll(address operator, bool approved) external ;\\r\\n    function owner(bytes32 node) external  view returns (address);\\r\\n    function resolver(bytes32 node) external  view returns (address);\\r\\n    function ttl(bytes32 node) external  view returns (uint64);\\r\\n    function recordExists(bytes32 node) external  view returns (bool);\\r\\n    function isApprovedForAll(address owner, address operator) external  view returns (bool);\\r\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\"},\"KoteEnsMapper.sol\":{\"content\":\"/*\\r\\n//SPDX-License-Identifier: MIT\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./ENS.sol\\\";\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Enumerable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n\\tfunction balanceOf(address account) external view returns (uint256);\\r\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract KoteEnsMapper is Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    ENS private ens;    \\r\\n    IERC721Enumerable public nft;\\r\\n    bytes32 public domainHash;\\r\\n    mapping(bytes32 =\\u003e mapping(string =\\u003e string)) public texts;\\r\\n   \\r\\n    mapping(address =\\u003e uint256) public nextRegisterTimestamp;\\r\\n\\r\\n    string public domainLabel = \\\"kote\\\";\\r\\n    string public nftImageBaseUri = \\\"https://ipfs.io/ipfs/QmbQTvwHbZjciMHLpPFYb8NFBzAjEftdAm3i9PBjwZ7NzN/\\\";\\r\\n    bool public useEIP155 = true;\\r\\n    \\r\\n    mapping(bytes32 =\\u003e uint256) public hashToIdMap;\\r\\n    mapping(uint256 =\\u003e bytes32) public tokenHashmap;\\r\\n    mapping(bytes32 =\\u003e string) public hashToDomainMap;\\r\\n\\r\\n    uint256 public reset_period = 7257600; //12 weeks\\r\\n\\r\\n    bool public publicClaimOpen = false;\\r\\n    mapping(address =\\u003e bool) public address_whitelist;\\r\\n\\r\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\r\\n    event RegisterSubdomain(address indexed registrar, uint256 indexed token_id, string indexed label);\\r\\n\\r\\n    constructor(){\\r\\n        ens = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\\r\\n        nft = IERC721Enumerable(0x32A322C7C77840c383961B8aB503c9f45440c81f);\\r\\n        domainHash = getDomainHash();\\r\\n    }\\r\\n\\r\\n    //\\u003cinterface-functions\\u003e\\r\\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\r\\n        return interfaceID == 0x3b3b57de //addr\\r\\n        || interfaceID == 0x59d1d43c //text\\r\\n        || interfaceID == 0x691f3431 //name\\r\\n        || interfaceID == 0x01ffc9a7; //supportsInterface \\u003c\\u003c [inception]\\r\\n    }\\r\\n\\r\\n    function text(bytes32 node, string calldata key) external view returns (string memory) {\\r\\n        uint256 token_id = hashToIdMap[node];\\r\\n        require(token_id \\u003e 0 \\u0026\\u0026 tokenHashmap[token_id] != 0x0, \\\"Invalid address\\\");\\r\\n        if(keccak256(abi.encodePacked(key)) == keccak256(\\\"avatar\\\")){\\r\\n            //eip155 string did not seem to work in any supported dapps during testing despite the returned string being properly\\r\\n            //formatted. So the toggle was added so that we can direct link the image using http:// if this still does not work on \\r\\n            //mainnet\\r\\n            return useEIP155 ? string(abi.encodePacked(\\\"eip155:1/erc721:\\\", addressToString(address(nft)), \\\"/\\\", token_id.toString()))\\r\\n                             : string(abi.encodePacked(nftImageBaseUri, token_id.toString(),\\\".png\\\"));            \\r\\n        }\\r\\n        else{\\r\\n            return texts[node][key];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addr(bytes32 nodeID) public view returns (address) {\\r\\n        uint256 token_id = hashToIdMap[nodeID];\\r\\n        require(token_id \\u003e 0 \\u0026\\u0026 tokenHashmap[token_id] != 0x0, \\\"Invalid address\\\");\\r\\n        return nft.ownerOf(token_id);\\r\\n    }  \\r\\n\\r\\n    function name(bytes32 node) view public returns (string memory){\\r\\n        return (hashToIdMap[node] == 0) \\r\\n        ? \\\"\\\" \\r\\n        : string(abi.encodePacked(hashToDomainMap[node], \\\".\\\", domainLabel, \\\".eth\\\"));\\r\\n    }\\r\\n    //\\u003c/interface-functions\\u003e  \\r\\n\\r\\n    //--------------------------------------------------------------------------------------------//\\r\\n\\r\\n    //\\u003cread-functions\\u003e\\r\\n    function domainMap(string calldata label) public view returns(bytes32){\\r\\n        bytes32 encoded_label = keccak256(abi.encodePacked(label));\\r\\n        bytes32 big_hash = keccak256(abi.encodePacked(domainHash, encoded_label));\\r\\n        return hashToIdMap[big_hash] \\u003e 0 ? big_hash : bytes32(0x0);\\r\\n    }\\r\\n\\r\\n    function getClaimableIdsForAddress(address addy) public view returns(uint256[] memory){\\r\\n        if(((address_whitelist[addy] || publicClaimOpen) \\r\\n        \\u0026\\u0026 block.timestamp \\u003e nextRegisterTimestamp[addy]) \\r\\n        || owner() == addy){\\r\\n            return getAllIds(addy);\\r\\n        }\\r\\n        else{\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAllIds(address addy) private view returns(uint256[] memory){\\r\\n        uint256 balance = nft.balanceOf(addy);\\r\\n        uint256[] memory ids = new uint256[](balance);\\r\\n        uint256 count;\\r\\n        for(uint256 i; i \\u003c balance; i++){\\r\\n            uint256 id = nft.tokenOfOwnerByIndex(addy, i);\\r\\n            if(tokenHashmap[id] == 0x0){\\r\\n                ids[count++] = id;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory trim_ids = new uint256[](count);\\r\\n        for(uint256 i; i \\u003c count; i++){\\r\\n            trim_ids[i] = ids[i];\\r\\n        }\\r\\n\\r\\n        return trim_ids;\\r\\n    }\\r\\n\\r\\n   function getTokenDomain(uint256 token_id) private view returns(string memory uri){\\r\\n        require(tokenHashmap[token_id] != 0x0, \\\"Token does not have an ENS register\\\");\\r\\n        uri = string(abi.encodePacked(hashToDomainMap[tokenHashmap[token_id]] ,\\\".\\\" ,domainLabel, \\\".eth\\\"));\\r\\n    }\\r\\n\\r\\n    function getTokensDomains(uint256[] memory token_ids) public view returns(string[] memory){\\r\\n        string[] memory uris = new string[](token_ids.length);\\r\\n        for(uint256 i; i \\u003c token_ids.length; i++){\\r\\n           uris[i] = getTokenDomain(token_ids[i]);\\r\\n        }\\r\\n        return uris;\\r\\n    }\\r\\n\\r\\n    function getAllCatsWithDomains(address addy) public view returns(uint256[] memory){\\r\\n        uint256 balance = nft.balanceOf(addy);\\r\\n        uint256[] memory ids = new uint256[](balance);\\r\\n        uint256 count;\\r\\n        for(uint256 i; i \\u003c balance; i++){\\r\\n            uint256 id = nft.tokenOfOwnerByIndex(addy, i);\\r\\n            if(tokenHashmap[id] != 0x0){\\r\\n                ids[count++] = id;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory trim_ids = new uint256[](count);\\r\\n        for(uint256 i; i \\u003c count; i++){\\r\\n            trim_ids[i] = ids[i];\\r\\n        }\\r\\n\\r\\n        return trim_ids;\\r\\n    }\\r\\n    //\\u003c/read-functions\\u003e\\r\\n\\r\\n    //--------------------------------------------------------------------------------------------//\\r\\n\\r\\n    //\\u003chelper-functions\\u003e\\r\\n    function addressToString(address _addr) private pure returns(string memory) {\\r\\n    bytes32 value = bytes32(uint256(uint160(_addr)));\\r\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    bytes memory str = new bytes(51);\\r\\n    str[0] = \\\"0\\\";\\r\\n    str[1] = \\\"x\\\";\\r\\n    for (uint i = 0; i \\u003c 20; i++) {\\r\\n        str[2+i*2] = alphabet[uint(uint8(value[i + 12] \\u003e\\u003e 4))];\\r\\n        str[3+i*2] = alphabet[uint(uint8(value[i + 12] \\u0026 0x0f))];\\r\\n        }\\r\\n    return string(str);\\r\\n    }\\r\\n\\r\\n    //this is the correct method for creating a 2 level ENS namehash\\r\\n    function getDomainHash() private view returns (bytes32 namehash) {\\r\\n            namehash = 0x0;\\r\\n            namehash = keccak256(abi.encodePacked(namehash, keccak256(abi.encodePacked(\\u0027eth\\u0027))));\\r\\n            namehash = keccak256(abi.encodePacked(namehash, keccak256(abi.encodePacked(domainLabel))));\\r\\n    }\\r\\n    //\\u003c/helper-functions\\u003e\\r\\n\\r\\n    //--------------------------------------------------------------------------------------------//\\r\\n\\r\\n    //\\u003cauthorised-functions\\u003e\\r\\n    function setDomain(string calldata label, uint256 token_id) public isAuthorised(token_id) {     \\r\\n        require(tokenHashmap[token_id] == 0x0, \\\"Token has already been set\\\");\\r\\n        require(address_whitelist[msg.sender] || publicClaimOpen || owner() == msg.sender, \\\"Not authorised\\\");\\r\\n        require(block.timestamp \\u003e nextRegisterTimestamp[msg.sender], \\\"Wallet must wait more time to register\\\");\\r\\n           \\r\\n        bytes32 encoded_label = keccak256(abi.encodePacked(label));\\r\\n        bytes32 big_hash = keccak256(abi.encodePacked(domainHash, encoded_label));\\r\\n\\r\\n        //contract owner can update / overwrite records. \\u003c\\u003c this may be changed in the future with an updated method but as this is still \\r\\n        //an experiment we\\u0027d like to retain some level of control over the sub-domains\\r\\n        //\\r\\n        //ens.recordExists seems to not be reliable (tested removing records through ENS control panel and this still returns true)\\r\\n        require(!ens.recordExists(big_hash) || msg.sender == owner(), \\\"sub-domain already exists\\\");\\r\\n        \\r\\n        ens.setSubnodeRecord(domainHash, encoded_label, owner(), address(this), 0);\\r\\n\\r\\n        hashToIdMap[big_hash] = token_id;        \\r\\n        tokenHashmap[token_id] = big_hash;\\r\\n        hashToDomainMap[big_hash] = label;\\r\\n\\r\\n        if (owner() != msg.sender){                 \\r\\n            nextRegisterTimestamp[msg.sender] = block.timestamp + reset_period;\\r\\n\\r\\n            //if user is on whitelist then remove\\r\\n            if (address_whitelist[msg.sender]){\\r\\n                address_whitelist[msg.sender] = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit RegisterSubdomain(nft.ownerOf(token_id), token_id, label);     \\r\\n    }\\r\\n\\r\\n    function setText(bytes32 node, string calldata key, string calldata value) external isAuthorised(hashToIdMap[node]) {\\r\\n        uint256 token_id = hashToIdMap[node];\\r\\n        require(token_id \\u003e 0 \\u0026\\u0026 tokenHashmap[token_id] != 0x0, \\\"Invalid address\\\");\\r\\n        require(keccak256(abi.encodePacked(key)) != keccak256(\\\"avatar\\\"), \\\"cannot set avatar\\\");\\r\\n\\r\\n        texts[node][key] = value;\\r\\n        emit TextChanged(node, key, key);\\r\\n    }\\r\\n        \\r\\n    function resetHash(uint256 token_id) public isAuthorised(token_id) {\\r\\n        \\r\\n        bytes32 domain = tokenHashmap[token_id];\\r\\n        require(ens.recordExists(domain), \\\"Sub-domain does not exist\\\");\\r\\n        \\r\\n        //reset domain mappings\\r\\n        hashToDomainMap[domain] = \\\"\\\";      \\r\\n        hashToIdMap[domain] = 0;\\r\\n        tokenHashmap[token_id] = 0x0;\\r\\n\\r\\n        //allow sender to reclaim (if public == true)\\r\\n        if(nextRegisterTimestamp[msg.sender] \\u003e block.timestamp \\u0026\\u0026 msg.sender != owner()){\\r\\n            nextRegisterTimestamp[msg.sender] = block.timestamp + (60 * 30); //30 minute cooldown\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    //\\u003c/authorised-functions\\u003e\\r\\n\\r\\n    //--------------------------------------------------------------------------------------------//\\r\\n\\r\\n    // \\u003cowner-functions\\u003e\\r\\n    function addAddressWhitelist(address[] calldata addresses) public onlyOwner {\\r\\n        for(uint256 i; i \\u003c addresses.length; i++){\\r\\n           address_whitelist[addresses[i]] = true;     \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setDomainLabel(string calldata label) public onlyOwner {\\r\\n        domainLabel = label;\\r\\n        domainHash = getDomainHash();\\r\\n    }\\r\\n\\r\\n    function setNftAddress(address addy) public onlyOwner{\\r\\n        nft = IERC721Enumerable(addy);\\r\\n    }\\r\\n\\r\\n    function toggleNftImageLink() public onlyOwner{\\r\\n        useEIP155 = !useEIP155;\\r\\n    }\\r\\n\\r\\n    function setNftImageBaseUri(string memory _uri) public onlyOwner{\\r\\n        nftImageBaseUri = _uri;\\r\\n    }\\r\\n\\r\\n    function setEnsAddress(address addy) public onlyOwner {\\r\\n        ens = ENS(addy);\\r\\n    }\\r\\n\\r\\n    function resetAddressForClaim(address addy) public onlyOwner {\\r\\n        nextRegisterTimestamp[addy] = 0;\\r\\n    }\\r\\n\\r\\n    function togglePublicClaim() public onlyOwner {\\r\\n        publicClaimOpen = !publicClaimOpen;\\r\\n    }\\r\\n\\r\\n    function updateResetPeriod(uint256 time) public onlyOwner {\\r\\n        reset_period = time;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public override onlyOwner {\\r\\n        require(false, \\\"ENS is responsibility. You cannot renounce ownership.\\\");\\r\\n        super.renounceOwnership();\\r\\n    }\\r\\n\\r\\n    //just never know.. do you.\\r\\n\\tfunction withdraw() public onlyOwner {\\r\\n\\t\\tuint256 balance = address(this).balance;\\r\\n\\t\\tpayable(msg.sender).transfer(balance);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawTokens(IERC20 token) public onlyOwner {\\r\\n\\t\\trequire(address(token) != address(0));\\r\\n\\t\\tuint256 balance = token.balanceOf(address(this));\\r\\n\\t\\ttoken.transfer(msg.sender, balance);\\r\\n\\t}\\r\\n\\r\\n    //\\u003c/owner-functions\\u003e\\r\\n\\r\\n    modifier isAuthorised(uint256 tokenId) {\\r\\n        require(owner() == msg.sender || nft.ownerOf(tokenId) == msg.sender, \\\"Not authorised\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"RegisterSubdomain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addAddressWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeID\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"address_whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainLabel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"domainMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"getAllCatsWithDomains\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"getClaimableIdsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"token_ids\",\"type\":\"uint256[]\"}],\"name\":\"getTokensDomains\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToDomainMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextRegisterTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftImageBaseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicClaimOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"resetAddressForClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"}],\"name\":\"resetHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"}],\"name\":\"setDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"setDomainLabel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setEnsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setNftImageBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"texts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleNftImageLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHashmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"updateResetPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useEIP155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KoteEnsMapper", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://875096a4f8d2f70debd1410afa3fef20294f4f8d92133bfcd52211cab77d88ef"}]}