{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.10;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IWhitelist {\r\n  function useDiscount(address account) external;\r\n\r\n  function getDiscount(address account) external view returns (uint256);\r\n  function deadline() external view returns (uint256);\r\n  function isExpired() external view returns (bool);\r\n  function exists(address account) external view returns (bool);\r\n}\r\n\r\ncontract Whitelist is Ownable, IWhitelist {\r\n\r\n  struct Coupon {\r\n    address account;\r\n    uint256[] items;\r\n    uint256 count;\r\n  }\r\n\r\n  uint256 private constant MAX_COUNT = 172;\r\n\r\n  uint256 private _deadline;\r\n  address private _consumer;\r\n  uint256 private _count;\r\n\r\n  mapping(address => Coupon) _coupons;\r\n  mapping(address => bool) _existed;\r\n\r\n  event UseDiscount(address account, uint256 discount);\r\n\r\n  constructor(uint256 deadline_) {\r\n    _deadline = deadline_;\r\n  }\r\n\r\n  function add(address[] calldata accounts, uint256[] calldata discounts) external onlyOwner {\r\n    require(!_isExpired(), \"Whitelist: expired\");\r\n    require(accounts.length == discounts.length, \"Whitelist: length mismatch\");\r\n    require(_count + accounts.length <= MAX_COUNT, \"Whitelist: cap exceeded\");\r\n\r\n    uint256 length = accounts.length;\r\n    address account;\r\n    for(uint256 i = 0; i < length; i++) {\r\n      account = accounts[i];\r\n      if(_exists(account)) {\r\n        _coupons[account].items.push(discounts[i]);\r\n      } else {\r\n        Coupon storage coupon = _coupons[account];\r\n        coupon.account = account;\r\n        coupon.items.push(discounts[i]);\r\n\r\n        _existed[account] = true;\r\n      }\r\n    }\r\n\r\n    _count += length;\r\n  }\r\n\r\n  function setConsumer(address consumer_) external onlyOwner {\r\n    require(!_isExpired(), \"Whitelist: expired\");\r\n    require(_consumer == address(0), \"Whitelist: consumer already set\");\r\n\r\n    _consumer = consumer_;\r\n  }\r\n\r\n  function useDiscount(address account) external override {\r\n    require(_consumer == _msgSender(), \"Whitelist: not the consumer\");\r\n\r\n    require(!_isExpired(), \"Whitelist: expired\");\r\n    require(_exists(account), \"Whitelist: not on the whitelist\");\r\n    require(_hasDiscount(account), \"Whitelist: discount used\");\r\n\r\n    uint256 discount = _getDiscount(account);\r\n    _coupons[account].count += 1;\r\n\r\n    emit UseDiscount(account, discount);\r\n  }\r\n\r\n  function getDiscount(address account) external view override returns (uint256) {\r\n    return !_isExpired() && _exists(account) && _hasDiscount(account) ? _getDiscount(account) : 0;\r\n  }\r\n\r\n  function deadline() external view override returns (uint256) {\r\n    return _deadline;\r\n  }\r\n\r\n  function consumer() external view returns (address) {\r\n    return _consumer;\r\n  }\r\n\r\n  function count() external view returns (uint256) {\r\n    return _count;\r\n  }\r\n\r\n  function isExpired() external view override returns (bool) {\r\n    return _isExpired();\r\n  }\r\n\r\n  function exists(address account) external view override returns (bool) {\r\n    return _exists(account);\r\n  }\r\n\r\n  function _isExpired() private view returns (bool) {\r\n    return block.timestamp > _deadline;\r\n  }\r\n\r\n  function _exists(address account) private view returns (bool) {\r\n    return _existed[account];\r\n  }\r\n\r\n  function _hasDiscount(address account) private view returns (bool) {\r\n    return _coupons[account].count < _coupons[account].items.length;\r\n  }\r\n\r\n  function _getDiscount(address account) private view returns (uint256) {\r\n    return _coupons[account].items[_coupons[account].count];\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"UseDiscount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"discounts\",\"type\":\"uint256[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer_\",\"type\":\"address\"}],\"name\":\"setConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"useDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Whitelist", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000624a6d40", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9cbeb48f4ba2462f3ad70b1ebbd9c91dcb3c5d2d252d6f523d28bcf1cf5e09bf"}]}