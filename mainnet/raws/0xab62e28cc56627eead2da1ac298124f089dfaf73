{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/LoanHealthChecker.sol\r\n// SPDX-License-Identifier: Unlicense\r\npragma solidity =0.8.7;\r\n\r\n////// src/LoanHealthChecker.sol\r\n/* pragma solidity 0.8.7; */\r\n\r\ninterface IERC20Like_2 {\r\n    function balanceOf(address account_) external view returns (uint256 balance_);\r\n}\r\n\r\ninterface IMapleLoanLike {\r\n    function claimableFunds() external view returns (uint256 claimableFunds_);\r\n    function collateral() external view returns (uint256 collateral_);\r\n    function collateralAsset() external view returns (address collateralAsset_);\r\n    function collateralRequired() external view returns (uint256 collateralRequired_);\r\n    function drawableFunds() external view returns (uint256 drawableFunds_);\r\n    function fundsAsset() external view returns (address fundsAsset_);\r\n    function principal() external view returns (uint256 principal_);\r\n    function principalRequested() external view returns (uint256 principalRequested_);\r\n}\r\n\r\n\r\ncontract LoanHealthChecker {\r\n\r\n    function checkLoanAccounting(address loan_)\r\n        external view\r\n        returns (\r\n            uint256 collateralAssetBalance_,\r\n            uint256 fundsAssetBalance_,\r\n            uint256 collateral_,\r\n            uint256 claimableFunds_,\r\n            uint256 drawableFunds_,\r\n            bool    collateralAssetSafe_,\r\n            bool    fundsAssetSafe_\r\n        )\r\n    {\r\n        IMapleLoanLike loan            = IMapleLoanLike(loan_);\r\n        IERC20Like_2     collateralAsset = IERC20Like_2(loan.collateralAsset());\r\n        IERC20Like_2     fundsAsset      = IERC20Like_2(loan.fundsAsset());\r\n\r\n        collateralAssetBalance_ = collateralAsset.balanceOf(loan_);\r\n        fundsAssetBalance_      = fundsAsset.balanceOf(loan_);\r\n\r\n        collateral_     = loan.collateral();\r\n        claimableFunds_ = loan.claimableFunds();\r\n        drawableFunds_  = loan.drawableFunds();\r\n\r\n        if (address(collateralAsset) != address(fundsAsset)) {\r\n            collateralAssetSafe_ = collateralAssetBalance_ >= collateral_;\r\n            fundsAssetSafe_      = fundsAssetBalance_      >= (claimableFunds_ + drawableFunds_);\r\n        } else {\r\n            collateralAssetSafe_ = fundsAssetSafe_ = fundsAssetBalance_ >= (collateral_ + claimableFunds_ + drawableFunds_);\r\n        }\r\n    }\r\n\r\n    function isCollateralMaintained(address loan_)\r\n        external view\r\n        returns (\r\n            uint256 collateral_,\r\n            uint256 principal_,\r\n            uint256 drawableFunds_,\r\n            uint256 principalRequested_,\r\n            uint256 collateralRequired_,\r\n            bool    collateralMaintained_\r\n        )\r\n    {\r\n        IMapleLoanLike loan = IMapleLoanLike(loan_);\r\n\r\n        collateral_         = loan.collateral();\r\n        principal_          = loan.principal();\r\n        drawableFunds_      = loan.drawableFunds();\r\n        principalRequested_ = loan.principalRequested();\r\n        collateralRequired_ = loan.collateralRequired();\r\n\r\n        // Where (collateral / outstandingPrincipal) should be greater or equal to (collateralRequired / principalRequested).\r\n        // NOTE: principalRequested_ cannot be 0, which is reasonable, since it means this was never a loan.\r\n        uint256 currentCollateralRequired =\r\n            principal_ <= drawableFunds_ ?\r\n                uint256(0) :\r\n                (collateralRequired_ * (principal_ - drawableFunds_)) / principalRequested_;\r\n\r\n        collateralMaintained_ = collateral_ >= currentCollateralRequired;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loan_\",\"type\":\"address\"}],\"name\":\"checkLoanAccounting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAssetBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsAssetBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableFunds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawableFunds_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"collateralAssetSafe_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fundsAssetSafe_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loan_\",\"type\":\"address\"}],\"name\":\"isCollateralMaintained\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawableFunds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalRequested_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRequired_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"collateralMaintained_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LoanHealthChecker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b062a8066ae4047d743d8597c84ade2568daeb57b590b4a0e8bf3d832d6a2ad"}]}