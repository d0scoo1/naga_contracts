{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@v4.5.0/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: rrok.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ICollectibles {\r\n    function burn(address account, uint256 id, uint256 value) external;\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n}\r\n\r\ninterface IHeroes {\r\n    function mintAdminSingle(address to, uint256 tokenType) external;\r\n}\r\n\r\n// ragnarok v3\r\ncontract RagnarokS1 is Ownable, ERC721, VRFConsumerBaseV2 {\r\n    // Chainlink info\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    LinkTokenInterface LINKTOKEN;\r\n    uint64 s_subscriptionId;\r\n    \r\n    // mainnet\r\n    address vrfCoordinator = 0x271682DEB8C4E0901D1a1550aD2e64D568E69909;\r\n    address link = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\r\n    bytes32 keyHash = 0x9fe0eebf5e446e3c998ec9bb19951541aee00bb90ea201ae456421a2ded86805;\r\n\r\n    uint32 callbackGasLimit = 100000;\r\n    uint16 requestConfirmations = 3;\r\n    uint32 numWords =  1;\r\n    uint256 public s_requestId;\r\n\r\n    using Address for address;\r\n\r\n    uint256 public totalSupply;\r\n    bool public mintingLockedForAll;\r\n    bool public mintingPaused = true;\r\n    bool public presaleEnded;\r\n    mapping (address => bool) public allowedToMint;\r\n    event AllowedToMint(address indexed addr, bool value);\r\n\r\n    uint256 public currentRound;\r\n    uint256 public firstGameRound;\r\n    mapping (uint256 => uint256) public gameSeeds;\r\n    mapping (uint256 => mapping (uint256 => uint256)) public roundToWinners;\r\n    \r\n    /* Warrior information (faction, rarity, blessing usage) are stored as uint256 bitsets for read+write gas optimization. \r\n     * When the bit count doesn't exactly divide 256, we only store int(256/bitcount) elements in the uint256, so as not to split elements across multiple uints.\r\n     * All of them stored as mappings for further gas optimization over arrays.\r\n     *\r\n     * Information details:\r\n     *  - faction (per tokenId): 8 possible values - odin, thor, fenrir, hel, jormungand, loki, surtr, ymir\r\n     *  - rarity (per tokenId): 4 possible values - common, uncommon, epic, legendary\r\n     *  - blessing (perRound & per tokenId): 2 possible values - blessing not used, blessing used\r\n     * \r\n     * Bitset implementations:\r\n     *  - faction: 8 possible values - 3 bits per item - 85 items per uint256 - 49 uints necessary\r\n     *  - rarity: 4 possible values - 2 bits per item - 128 items per uint256 - 32 uints necessary\r\n     *  - blessing: 2 possible values - 1 bit per item - 256 items per uint256 - 16 uints necessary\r\n     */\r\n    mapping (uint256 => uint256) public factions;\r\n    mapping (uint256 => uint256) public rarities;\r\n    mapping (uint256 => mapping (uint256 => uint256)) public roundToBlessings;\r\n    mapping (uint256 => bool) public blessingsLocked;\r\n    bool public raritiesLocked;\r\n    uint256 public raritiesGenerationHash;\r\n\r\n    /* Further optimization - loading values from storage uses the SLOAD instruction which consumes a lot of gas on the first access per slot \r\n     * (2100gas for first access + 100gas for subsequent accesses for the same slot, since EIP-2929) \r\n     * This is bad for us since we need to access most of the storage slots for each round.\r\n     *\r\n     * The solution is to cache the necessary info into memory arrays (which is expensive due to memory allocation and takes about 300,000 gas)\r\n     * and then capitalize on the cheap memory read ops\r\n     */\r\n    struct StorageClone {\r\n        uint256[49] factions;\r\n        uint256[32] rarities;\r\n        uint256[16] blessings;\r\n    }\r\n\r\n    // round info struct to save up on local vars\r\n    struct RoundInfo {\r\n        uint256 token1;\r\n        uint256 token2;\r\n        uint256 temp;\r\n        uint256 faction1;\r\n        uint256 faction2;\r\n        uint256 rand;\r\n        uint256 score;\r\n        uint256 round;\r\n        uint256 permuteSeed;\r\n        uint256 fightSeed;\r\n    }\r\n\r\n    // contract configs\r\n    ICollectibles public collectiblesContract;\r\n    IHeroes public heroesContract;\r\n\r\n    uint256 public constant MAX_PER_FACTION = 512;\r\n    uint256 public maxHeimdallPackages = 100;\r\n    mapping (uint256 => uint256) public mintedByFaction;\r\n    uint256 public mintedPackages;\r\n    uint256 public price = 0.44 ether;\r\n\r\n    bool public metadataLocked;\r\n    string public baseURI;\r\n\r\n    // --------------- CONSTRUCTOR --------------\r\n    \r\n    constructor(address collectiblesContractAddress, address heroesContractAddress, uint64 subscriptionId, string memory uri)\r\n        ERC721(\"RagnarokS1\", \"ROKS1\") VRFConsumerBaseV2(vrfCoordinator)\r\n    {\r\n        collectiblesContract = ICollectibles(collectiblesContractAddress);\r\n        heroesContract = IHeroes(heroesContractAddress);\r\n\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        LINKTOKEN = LinkTokenInterface(link);\r\n        s_subscriptionId = subscriptionId;\r\n\r\n        baseURI = uri;\r\n    }\r\n\r\n    // --------------- MINTING ----------------\r\n\r\n    /**\r\n     * @dev Set contract addresses for Collectibles (holds WL runes) and Heroes (holds Heimdalls)\r\n     */\r\n    function setContracts(address collectiblesContractAddress, address heroesContractAddress) external onlyOwner {\r\n        collectiblesContract = ICollectibles(collectiblesContractAddress);\r\n        heroesContract = IHeroes(heroesContractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Lock minting for owner and public\r\n     */\r\n    function lockMintingForeverForOwnerAndPublic(uint256 powerOfTwo) external onlyOwner {\r\n        require(!mintingLockedForAll);\r\n        require(totalSupply == 2**powerOfTwo);\r\n        mintingLockedForAll = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle pause minting temporarily\r\n     */\r\n    function togglePausePublicMinting() external onlyOwner {\r\n        mintingPaused = !mintingPaused;\r\n    }\r\n\r\n    /**\r\n     * @dev End presale and start sale\r\n     */\r\n    function endPresale() external onlyOwner {\r\n        require(!presaleEnded);\r\n        presaleEnded = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set max Heimdall packages\r\n     */\r\n    function setMaxHeimdallPackages(uint256 value) external onlyOwner {\r\n        maxHeimdallPackages = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Set price point per mint\r\n     */\r\n    function setPrice(uint256 value) external onlyOwner {\r\n        price = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Mark address as allowed to mint\r\n     */\r\n    function setAllowedToMint(address addr, bool value) external onlyOwner {\r\n        allowedToMint[addr] = value;\r\n        emit AllowedToMint(addr, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint from faction (internal)\r\n     */\r\n    function mintInternal(address to, uint256 faction) internal {\r\n        _mint(to, totalSupply);\r\n        setFaction(totalSupply, faction);\r\n        totalSupply++;\r\n        mintedByFaction[faction]++;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint from faction (internal)\r\n     */\r\n    function mintPackageInternal(address to) internal {\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            mintInternal(to, i);\r\n        }\r\n        mintedPackages++;\r\n        heroesContract.mintAdminSingle(to, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Public mint during sale\r\n     */\r\n    function mintOwner(address[] calldata mintAddresses, uint256[] calldata mintFactions) external onlyOwner {\r\n        require(!mintingLockedForAll, \"Minting is over\");\r\n        require(mintAddresses.length == mintFactions.length, \"Bad lengths\");\r\n        \r\n        for (uint256 i=0; i<mintAddresses.length; i++) {\r\n            uint256 faction = mintFactions[i];\r\n\r\n            require(0 <= faction && faction <= 8, \"Unknown faction\");\r\n\r\n            if (faction == 8) {\r\n                // Heimdall package minting\r\n                mintPackageInternal(mintAddresses[i]);\r\n            } else {\r\n                // Regular warrior minting\r\n                uint256 reservedForHeimdall = mintedPackages < maxHeimdallPackages ? (maxHeimdallPackages-mintedPackages) : 0;\r\n                require(mintedByFaction[faction]+reservedForHeimdall+1 <= MAX_PER_FACTION, \"Supply exceeded\");\r\n\r\n                mintInternal(msg.sender, faction);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Public mint during sale\r\n     */\r\n    function mintPublicSale(uint256 faction) public payable {\r\n        require(0 <= faction && faction <= 8, \"Unknown faction\");\r\n        require(!mintingLockedForAll, \"Minting is over\");\r\n        require(!mintingPaused, \"Minting paused\");\r\n        require(presaleEnded, \"Public sale not activated\");\r\n\r\n        if (faction == 8) {\r\n            // Heimdall package minting\r\n            require(msg.value == 8*price, \"Wrong ETH value\");\r\n            require(mintedPackages+1 <= maxHeimdallPackages, \"Supply exceeded\");\r\n\r\n            mintPackageInternal(msg.sender);\r\n        } else {\r\n            // Regular warrior minting\r\n            require(msg.value == price, \"Wrong ETH value\");\r\n            \r\n            uint256 reservedForHeimdall = mintedPackages < maxHeimdallPackages ? (maxHeimdallPackages-mintedPackages) : 0;\r\n            require(mintedByFaction[faction]+reservedForHeimdall+1 <= MAX_PER_FACTION, \"Supply exceeded\");\r\n\r\n            mintInternal(msg.sender, faction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Public mint during presale\r\n     */\r\n    function mintPublicPresale(uint256 faction) public payable {\r\n        require(0 <= faction && faction <= 8, \"Unknown faction\");\r\n        require(!mintingLockedForAll, \"Minting is over\");\r\n        require(!mintingPaused, \"Minting paused\");\r\n        require(!presaleEnded, \"Presale ended\");\r\n\r\n        if (faction == 8) {\r\n            // Heimdall package minting\r\n            require(msg.value == 8*price, \"Wrong ETH value\");\r\n            require(mintedPackages+1 <= maxHeimdallPackages, \"Supply exceeded\");\r\n\r\n            mintPackageInternal(msg.sender);\r\n\r\n            collectiblesContract.burn(msg.sender, 17, 1);\r\n        } else {\r\n            // Regular warrior minting\r\n            require(msg.value == price, \"Wrong ETH value\");\r\n            \r\n            uint256 reservedForHeimdall = mintedPackages < maxHeimdallPackages ? (maxHeimdallPackages-mintedPackages) : 0;\r\n            require(mintedByFaction[faction]+reservedForHeimdall+1 <= MAX_PER_FACTION, \"Supply exceeded\");\r\n\r\n            mintInternal(msg.sender, faction);\r\n\r\n            uint256 wlRune;\r\n            if (faction == 0) {\r\n                wlRune = 15;\r\n            } else if (faction == 1) {\r\n                wlRune = 1;\r\n            } else if (faction == 2) {\r\n                wlRune = 9;\r\n            } else if (faction == 3) {\r\n                wlRune = 7;\r\n            } else if (faction == 4) {\r\n                wlRune = 5;\r\n            } else if (faction == 5) {\r\n                wlRune = 3;\r\n            } else if (faction == 6) {\r\n                wlRune = 13;\r\n            } else if (faction == 7) {\r\n                wlRune = 11;\r\n            }\r\n\r\n            collectiblesContract.burn(msg.sender, wlRune, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Batch burn Collectible tokens\r\n     */\r\n    function batchBurnCollectibles(address[] calldata owners, uint256[] calldata ids) external onlyOwner {\r\n        for (uint256 i = 0; i < owners.length; i++) { \r\n            collectiblesContract.burn(owners[i], ids[i], collectiblesContract.balanceOf(owners[i], ids[i]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ether from this contract, callable by owner\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    // --------------- METADATA ---------------\r\n    \r\n    /**\r\n     * @dev Sets base metadata URI, callable by owner\r\n     */\r\n    function setBaseUri(string memory _uri) external onlyOwner {\r\n        require(metadataLocked == false);\r\n        baseURI = _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev Lock metadata URI forever, callable by owner\r\n     */\r\n    function lockMetadata() external onlyOwner {\r\n        require(metadataLocked == false);\r\n        metadataLocked = true;\r\n    }\r\n\r\n    /**\r\n     * @dev _baseURI override, called by tokenURI\r\n     */\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    // --------------- FACTIONS ----------------\r\n    \r\n    /**\r\n     * @dev Set the faction of a token\r\n     */\r\n    function setFaction(uint256 tokenId, uint256 faction) internal {\r\n        uint256 batch = tokenId / 85;\r\n        uint256 offset = (tokenId % 85) * 3;\r\n        factions[batch] |= faction << offset;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the faction of a token\r\n     */\r\n    function getFaction(uint256 tokenId) public view returns (uint256){\r\n        uint256 batch = tokenId / 85;\r\n        uint256 offset = (tokenId % 85) * 3;\r\n\r\n        return (factions[batch] >> offset) & 7;\r\n    }\r\n\r\n    // --------------- BLESSINGS ----------------\r\n\r\n    /**\r\n     * @dev Set whether blessing has been used on a token in a specific round\r\n     */\r\n    function setBlessingsInBatch(uint256[] calldata values) external onlyOwner {\r\n        require(currentRound+1 >= 2, \"Round < 2\");\r\n        require(values.length == 16, \"e12\");\r\n        require(!blessingsLocked[currentRound+1]);\r\n        for (uint256 i=0; i < values.length; i++) {\r\n            roundToBlessings[currentRound+1][i] = values[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get whether blessing has been used on a token in a specific round\r\n     */\r\n    function getBlessingInRound(uint256 tokenId, uint256 round) public view returns (bool) {\r\n        uint256 batch = tokenId / 256;\r\n        uint256 offset = tokenId % 256;\r\n\r\n        return ((roundToBlessings[round][batch] >> offset) & 1) == 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Lock blessings for current round\r\n     * Round parameter only used to confirm the action - must be equal to the current round\r\n     */\r\n    function lockBlessingsInRound(uint256 round) external onlyOwner {\r\n        require(round == currentRound+1, \"Invalid\");\r\n        require(!blessingsLocked[round]);\r\n        blessingsLocked[round] = true;\r\n    }\r\n\r\n    // --------------- RARITIES ----------------\r\n    \r\n    /**\r\n     * @dev Set rarity generation hash - callable only once\r\n     */\r\n    function setRaritiesHash(uint256 hash) external onlyOwner {\r\n        require(raritiesGenerationHash == 0);\r\n        raritiesGenerationHash = hash;\r\n    }\r\n\r\n    /**\r\n     * @dev Set token rarities in batch\r\n     */\r\n    function setRaritiesInBatch(uint256[] calldata values) external onlyOwner {\r\n        require(!raritiesLocked, \"Locked\");\r\n        require(mintingLockedForAll, \"Invalid\");\r\n        require(values.length == 32, \"e12\");\r\n        for (uint256 i=0; i < values.length; i++) {\r\n            rarities[i] = values[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the rarity of a token\r\n     */\r\n    function getRarity(uint256 tokenId) public view returns (uint256){\r\n        uint256 batch = tokenId / 128;\r\n        uint256 offset = (tokenId % 128) * 2;\r\n\r\n        return (rarities[batch] >> offset) & 3;\r\n    }\r\n\r\n    /**\r\n     * @dev Lock rarities\r\n     */\r\n    function lockRarities() external onlyOwner {\r\n        require(!raritiesLocked);\r\n        raritiesLocked = true;\r\n    }\r\n\r\n    // --------------- PERMUTATIONS ----------------\r\n\r\n    /**\r\n     * @dev Permute index forward using seed\r\n     */\r\n    function randomPermuteFw(uint256 index, uint256 total, uint256 seed) public pure returns (uint256) {\r\n        uint256 reverseThreshold;\r\n\r\n        for (uint256 k = 1; k <= 2; k++) {\r\n            reverseThreshold = ((seed >> (k * 24)) & 4095) % total;\r\n            index = (index + ((seed >> (k * 24 + 12)) & 4095)) % total;\r\n\r\n            if (index > reverseThreshold) {\r\n                index = total - (index-reverseThreshold);\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev Permute index backwards using seed\r\n     */\r\n    function randomPermuteBw(uint256 index, uint256 total, uint256 seed) public pure returns (uint256) {\r\n        uint256 reverseThreshold;\r\n\r\n        for (uint256 k = 2; k >= 1; k--) {\r\n            reverseThreshold = ((seed >> (k * 24)) & 4095) % total;\r\n\r\n            if (index > reverseThreshold) {\r\n                index = total - (index-reverseThreshold);\r\n            }\r\n\r\n            index = (index + total - (((seed >> (k * 24 + 12)) & 4095) % total)) % total;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    // --------------- ROUND VIEW ----------------\r\n\r\n    /**\r\n     * @dev Get index in next round from prev pos\r\n     */\r\n    function posToRoundMatchIndex(uint256 pos, uint256 round) public view returns (uint256) {\r\n        require(gameSeeds[round-1] != 0, \"e11\");\r\n        return randomPermuteFw(pos, 2**(13-round), gameSeeds[round-1]);\r\n    }\r\n\r\n    /**\r\n     * @dev Get prev pos from index in next round\r\n     */\r\n    function roundMatchIndexToPrevPos(uint256 index, uint256 round) public view returns (uint256) {\r\n        require(gameSeeds[round-1] != 0, \"e11\");\r\n        return randomPermuteBw(index, 2**(13-round), gameSeeds[round-1]);\r\n    }\r\n\r\n    /**\r\n     * @dev Get index of opponent\r\n     */\r\n    function getMatchupIndexOfIndex(uint256 index, uint256 round) public pure returns (uint256) {\r\n        return (index+(2**(12-round)))%(2**(13-round));\r\n    }\r\n\r\n    /**\r\n     * @dev Get total participants in round (only half will remain alive)\r\n     */\r\n    function getTotalParticipantsInRound(uint256 round) public pure returns (uint256) {\r\n        return 2**(13-round);\r\n    }\r\n\r\n    /**\r\n     * @dev Get fight result between two tokens (only valid if seed is in)\r\n     */\r\n    function getRoundResultBetweenTokens(uint256 round, uint256 token1, uint256 token2) public view returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(gameSeeds[round], token1, token2))) % 1000;\r\n    }\r\n\r\n    /**\r\n     * @dev View odds for a given fight\r\n     */\r\n    function computeScore(uint256 index, uint256 round) public view returns (uint256) {\r\n        RoundInfo memory rinfo;\r\n\r\n        rinfo.round = round;\r\n        require(rinfo.round > 0 && rinfo.round <= 12, \"e10\");\r\n\r\n        (rinfo.token1, rinfo.token2) = getParticipantsInRoundAtIndex(round, index);\r\n\r\n        uint[4] memory typeScores = [uint256(0), uint256(25), uint256(100), uint256(250)];\r\n\r\n        rinfo.score = 500;\r\n\r\n        rinfo.faction1 = (factions[rinfo.token1/85] >> ((rinfo.token1%85)*3)) & 7;\r\n        rinfo.faction2 = (factions[rinfo.token2/85] >> ((rinfo.token2%85)*3)) & 7;\r\n\r\n        if ((rinfo.faction2+1)%8==rinfo.faction1) {\r\n            rinfo.score -= 50;\r\n        }\r\n        if ((rinfo.faction1+1)%8==rinfo.faction2) {\r\n            rinfo.score += 50;\r\n        }\r\n\r\n        rinfo.score += typeScores[(rarities[rinfo.token1/128] >> ((rinfo.token1%128)*2)) & 3];\r\n        rinfo.score -= typeScores[(rarities[rinfo.token2/128] >> ((rinfo.token2%128)*2)) & 3];\r\n        \r\n        if ((roundToBlessings[rinfo.round][rinfo.token1/256] >> (rinfo.token1%256)) & 1 == 1) {\r\n            rinfo.score += 50;\r\n        }\r\n        if ((roundToBlessings[rinfo.round][rinfo.token2/256] >> (rinfo.token2%256)) & 1 == 1) {\r\n            rinfo.score -= 50;\r\n        }\r\n\r\n        return rinfo.score;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the two tokens participating in a specific fight\r\n     */\r\n    function getParticipantsInRoundAtIndex(uint256 round, uint256 index) public view returns (uint256, uint256) {\r\n        RoundInfo memory rinfo;\r\n\r\n        rinfo.round = round;\r\n        require(rinfo.round > 0 && rinfo.round <= 12, \"e10\");\r\n\r\n        rinfo.permuteSeed = gameSeeds[rinfo.round-1];\r\n        require(rinfo.permuteSeed != 0, \"e9\");\r\n\r\n        uint[] memory ind1 = new uint[](1);\r\n        uint[] memory ind2 = new uint[](1);\r\n\r\n        ind1[0] = index;\r\n        ind2[0] = (index+(2**(12-rinfo.round)))%(2**(13-rinfo.round));\r\n\r\n        randomPermuteMemoryArraysBw(ind1, ind2, 2**(13-rinfo.round), rinfo.permuteSeed);\r\n\r\n        if (rinfo.round == firstGameRound) {\r\n            rinfo.token1 = ind1[0] < ind2[0] ? ind1[0] : ind2[0];\r\n            rinfo.token2 = ind1[0] < ind2[0] ? ind2[0] : ind1[0];\r\n        } else {\r\n            rinfo.token1 = (roundToWinners[rinfo.round-1][ind1[0]/21] >> ((ind1[0]%21)*12)) & 4095;\r\n            rinfo.token2 = (roundToWinners[rinfo.round-1][ind2[0]/21] >> ((ind2[0]%21)*12)) & 4095;\r\n            if (rinfo.token1 > rinfo.token2) {\r\n                rinfo.temp = rinfo.token1;\r\n                rinfo.token1 = rinfo.token2;\r\n                rinfo.token2 = rinfo.temp;\r\n            }\r\n        }\r\n\r\n        return (rinfo.token1, rinfo.token2);\r\n    }\r\n\r\n    // --------------- ROUND PROCEDURE ----------------\r\n\r\n    /** \r\n     * @dev Randomly permute two arrays of indexes (backwards)\r\n     */\r\n    function randomPermuteMemoryArraysBw(uint256[] memory indexes, uint256[] memory indexes2, uint256 total, uint256 seed) internal pure {\r\n        uint256 reverseThreshold;\r\n\r\n        for (uint256 k = 2; k >= 1; k--) {\r\n            reverseThreshold = ((seed >> (k * 24)) & 4095) % total;\r\n\r\n            for (uint256 i = 0; i < indexes.length; i++) {\r\n                uint256 val = total - (((seed >> (k * 24 + 12)) & 4095) % total);\r\n\r\n                if (indexes[i] > reverseThreshold) {\r\n                    indexes[i] = total - (indexes[i]-reverseThreshold);\r\n                }\r\n\r\n                indexes[i] = (indexes[i] + val) % total;\r\n\r\n                if (indexes2[i] > reverseThreshold) {\r\n                    indexes2[i] = total - (indexes2[i]-reverseThreshold);\r\n                }\r\n\r\n                indexes2[i] = (indexes2[i] + val) % total;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Memoize winners of round for gas efficient access further down the line\r\n     * fills from `from` to `to` (inclusive at both ends)\r\n     */\r\n    function fillRoundWinners(uint256 from, uint256 to, bool cloneMemory) public onlyOwner {\r\n        RoundInfo memory rinfo;\r\n\r\n        rinfo.round = currentRound;\r\n        require(rinfo.round > 0 && rinfo.round <= 12, \"e10\");\r\n        // require(to < 2**(12-rinfo.round) && ((to+1)%21 == 0 || to == 2**(12-rinfo.round)-1), \"Invalid to\");\r\n\r\n        require(blessingsLocked[rinfo.round]);\r\n\r\n        rinfo.permuteSeed = gameSeeds[rinfo.round-1];\r\n        rinfo.fightSeed = gameSeeds[rinfo.round];\r\n        require(rinfo.permuteSeed != 0 && rinfo.fightSeed != 0, \"e9\");\r\n\r\n        uint[] memory ind1 = new uint[](to-from+1);\r\n        uint[] memory ind2 = new uint[](to-from+1);\r\n        uint[4] memory typeScores = [uint256(0), uint256(25), uint256(100), uint256(250)];\r\n\r\n        for (uint256 i=from; i<=to; i++) {\r\n            ind1[i-from] = i;\r\n            ind2[i-from] = (i+(2**(12-rinfo.round)))%(2**(13-rinfo.round));\r\n        }\r\n\r\n        randomPermuteMemoryArraysBw(ind1, ind2, 2**(13-rinfo.round), rinfo.permuteSeed);\r\n\r\n        if (cloneMemory) {\r\n            uint[] memory cloneRoundToWinners;\r\n            if (rinfo.round > firstGameRound) {\r\n                cloneRoundToWinners = new uint[](((2**(13-rinfo.round))+20)/21); \r\n                for (uint256 i=0; i < cloneRoundToWinners.length; i++) {\r\n                    cloneRoundToWinners[i] = roundToWinners[rinfo.round-1][i];\r\n                }\r\n            }\r\n\r\n            StorageClone memory sclone;\r\n\r\n            for (uint256 i=0; i < 49; i++) {\r\n                sclone.factions[i] = factions[i];\r\n            }\r\n            for (uint256 i=0; i < 16; i++) {\r\n                sclone.blessings[i] = roundToBlessings[rinfo.round][i];\r\n            }\r\n            for (uint256 i=0; i < 32; i++) {\r\n                sclone.rarities[i] = rarities[i];\r\n            }\r\n\r\n            for (uint256 i=from; i <=to; i++) {\r\n                if (rinfo.round == firstGameRound) {\r\n                    rinfo.token1 = ind1[i-from] < ind2[i-from] ? ind1[i-from] : ind2[i-from];\r\n                    rinfo.token2 = ind1[i-from] < ind2[i-from] ? ind2[i-from] : ind1[i-from];\r\n                } else {\r\n                    rinfo.token1 = (cloneRoundToWinners[ind1[i-from]/21] >> ((ind1[i-from]%21)*12)) & 4095;\r\n                    rinfo.token2 = (cloneRoundToWinners[ind2[i-from]/21] >> ((ind2[i-from]%21)*12)) & 4095;\r\n                    if (rinfo.token1 > rinfo.token2) {\r\n                        rinfo.temp = rinfo.token1;\r\n                        rinfo.token1 = rinfo.token2;\r\n                        rinfo.token2 = rinfo.temp;\r\n                    }\r\n                }\r\n\r\n                rinfo.score = 500;\r\n\r\n                rinfo.faction1 = (sclone.factions[rinfo.token1/85] >> ((rinfo.token1%85)*3)) & 7;\r\n                rinfo.faction2 = (sclone.factions[rinfo.token2/85] >> ((rinfo.token2%85)*3)) & 7;\r\n\r\n                if ((rinfo.faction2+1)%8==rinfo.faction1) {\r\n                    rinfo.score -= 50;\r\n                }\r\n                if ((rinfo.faction1+1)%8==rinfo.faction2) {\r\n                    rinfo.score += 50;\r\n                }\r\n\r\n                rinfo.score += typeScores[(sclone.rarities[rinfo.token1/128] >> ((rinfo.token1%128)*2)) & 3];\r\n                rinfo.score -= typeScores[(sclone.rarities[rinfo.token2/128] >> ((rinfo.token2%128)*2)) & 3];\r\n                \r\n                if ((sclone.blessings[rinfo.token1/256] >> (rinfo.token1%256)) & 1 == 1) {\r\n                    rinfo.score += 50;\r\n                }\r\n                if ((sclone.blessings[rinfo.token2/256] >> (rinfo.token2%256)) & 1 == 1) {\r\n                    rinfo.score -= 50;\r\n                }\r\n\r\n                rinfo.rand = uint256(keccak256(abi.encodePacked(rinfo.fightSeed, rinfo.token1, rinfo.token2))) % 1000;\r\n\r\n                if (rinfo.rand < rinfo.score) {\r\n                    roundToWinners[currentRound][i/21] |= rinfo.token1 << ((i%21)*12);\r\n                } else {\r\n                    roundToWinners[currentRound][i/21] |= rinfo.token2 << ((i%21)*12);\r\n                }\r\n                roundToWinners[currentRound][i/21] |= 1 << 255;\r\n            }\r\n        } else {\r\n            for (uint256 i=from; i <=to; i++) {\r\n                if (rinfo.round == firstGameRound) {\r\n                    rinfo.token1 = ind1[i-from] < ind2[i-from] ? ind1[i-from] : ind2[i-from];\r\n                    rinfo.token2 = ind1[i-from] < ind2[i-from] ? ind2[i-from] : ind1[i-from];\r\n                } else {\r\n                    rinfo.token1 = (roundToWinners[rinfo.round-1][ind1[i-from]/21] >> ((ind1[i-from]%21)*12)) & 4095;\r\n                    rinfo.token2 = (roundToWinners[rinfo.round-1][ind2[i-from]/21] >> ((ind2[i-from]%21)*12)) & 4095;\r\n                    if (rinfo.token1 > rinfo.token2) {\r\n                        rinfo.temp = rinfo.token1;\r\n                        rinfo.token1 = rinfo.token2;\r\n                        rinfo.token2 = rinfo.temp;\r\n                    }\r\n                }\r\n\r\n                rinfo.score = 500;\r\n\r\n                rinfo.faction1 = (factions[rinfo.token1/85] >> ((rinfo.token1%85)*3)) & 7;\r\n                rinfo.faction2 = (factions[rinfo.token2/85] >> ((rinfo.token2%85)*3)) & 7;\r\n\r\n                if ((rinfo.faction2+1)%8==rinfo.faction1) {\r\n                    rinfo.score -= 50;\r\n                }\r\n                if ((rinfo.faction1+1)%8==rinfo.faction2) {\r\n                    rinfo.score += 50;\r\n                }\r\n\r\n                rinfo.score += typeScores[(rarities[rinfo.token1/128] >> ((rinfo.token1%128)*2)) & 3];\r\n                rinfo.score -= typeScores[(rarities[rinfo.token2/128] >> ((rinfo.token2%128)*2)) & 3];\r\n                \r\n                if ((roundToBlessings[rinfo.round][rinfo.token1/256] >> (rinfo.token1%256)) & 1 == 1) {\r\n                    rinfo.score += 50;\r\n                }\r\n                if ((roundToBlessings[rinfo.round][rinfo.token2/256] >> (rinfo.token2%256)) & 1 == 1) {\r\n                    rinfo.score -= 50;\r\n                }\r\n\r\n                rinfo.rand = uint256(keccak256(abi.encodePacked(rinfo.fightSeed, rinfo.token1, rinfo.token2))) % 1000;\r\n\r\n                if (rinfo.rand < rinfo.score) {\r\n                    roundToWinners[currentRound][i/21] |= rinfo.token1 << ((i%21)*12);\r\n                } else {\r\n                    roundToWinners[currentRound][i/21] |= rinfo.token2 << ((i%21)*12);\r\n                }\r\n                roundToWinners[currentRound][i/21] |= 1 << 255;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @dev Check all winner batches have been filled\r\n     */\r\n    function checkFill() public view returns (bool) {\r\n        uint256 totalIndexes = getTotalParticipantsInRound(currentRound)/2;\r\n        for (uint256 t=0; t < (totalIndexes+20)/21; t++) {\r\n            if (roundToWinners[currentRound][t] == 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets winning token at round and index\r\n     */\r\n    function getWinnerAtRound(uint256 round, uint256 i) public view returns (uint256) {\r\n        uint256 batch = i / 21;\r\n        uint256 offset = i % 21;\r\n\r\n        return (roundToWinners[round][batch] >> (offset*12)) & 4095;\r\n    }\r\n\r\n    // --------------- ROUND TRIGGERING ----------------\r\n\r\n    /** \r\n     * @dev Gets next fight seed\r\n     */\r\n    function advanceToRound(uint256 round) public onlyOwner {\r\n        require(firstGameRound > 0, \"e1\");\r\n        require(round == currentRound+1, \"e2\");\r\n        require(currentRound < 13, \"e3\");\r\n        require(gameSeeds[currentRound] != 0, \"e4\");\r\n        require(blessingsLocked[currentRound+1], \"e5\");\r\n\r\n        if (round > firstGameRound) {\r\n            require(checkFill(), \"e6\");\r\n        }\r\n        \r\n        currentRound = round;\r\n        triggerChainlinkVRF();\r\n    } \r\n\r\n    /** \r\n     * @dev Triggers first game round, potentially skipping first (round-1) rounds\r\n     */\r\n    function triggerFirstRound(uint256 round) public onlyOwner {\r\n        require(round > 0, \"e10\");\r\n        require(totalSupply == 2**(13-round), \"Invalid supply\");\r\n        require(raritiesLocked && mintingLockedForAll, \"e8\");\r\n        require(firstGameRound == 0, \"e7\");\r\n        \r\n        currentRound = round-1;\r\n        firstGameRound = round;\r\n\r\n        triggerChainlinkVRF();\r\n    }\r\n\r\n    // --------------- CHAINLINK ----------------\r\n\r\n    /** \r\n     * @dev Trigger Chainlink VRF (random word is only stored the first time it arrives)\r\n     */\r\n    function triggerChainlinkVRF() public onlyOwner {\r\n        s_requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );\r\n    }\r\n\r\n    /** \r\n     * @dev Fulfill random words (called by Chainlink contract)\r\n     */\r\n    function fulfillRandomWords(\r\n        uint256,\r\n        uint256[] memory randomWords\r\n    ) internal override {\r\n        if (gameSeeds[currentRound] == 0) {\r\n            gameSeeds[currentRound] = randomWords[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update Chainlink subscription id and gas lane\r\n     */\r\n    function updateChainlinkInfo(uint64 subscriptionId, bytes32 _keyHash) external onlyOwner {\r\n        s_subscriptionId = subscriptionId;\r\n        keyHash = _keyHash;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectiblesContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"heroesContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AllowedToMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PER_FACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"advanceToRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnCollectibles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blessingsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkFill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectiblesContract\",\"outputs\":[{\"internalType\":\"contract ICollectibles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"computeScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cloneMemory\",\"type\":\"bool\"}],\"name\":\"fillRoundWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstGameRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameSeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getBlessingInRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getMatchupIndexOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipantsInRoundAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"}],\"name\":\"getRoundResultBetweenTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getTotalParticipantsInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getWinnerAtRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heroesContract\",\"outputs\":[{\"internalType\":\"contract IHeroes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"lockBlessingsInRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"powerOfTwo\",\"type\":\"uint256\"}],\"name\":\"lockMintingForeverForOwnerAndPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRarities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHeimdallPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"mintAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mintFactions\",\"type\":\"uint256[]\"}],\"name\":\"mintOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"faction\",\"type\":\"uint256\"}],\"name\":\"mintPublicPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"faction\",\"type\":\"uint256\"}],\"name\":\"mintPublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedByFaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingLockedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"posToRoundMatchIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomPermuteBw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomPermuteFw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raritiesGenerationHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raritiesLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"roundMatchIndexToPrevPos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundToBlessings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundToWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllowedToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setBlessingsInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectiblesContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"heroesContractAddress\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxHeimdallPackages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"setRaritiesHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setRaritiesInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePausePublicMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerChainlinkVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"triggerFirstRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"updateChainlinkInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RagnarokS1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e117f11e1fd875a33332f54b67e1aa64dc05d490000000000000000000000003e117f11e1fd875a33332f54b67e1aa64dc05d49000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be92fb53de742a9189836e5baf2f62f72c9fa748d85a200d6d5a443986632886"}]}