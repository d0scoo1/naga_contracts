{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/RedeemHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"../libs/DaoOwnable.sol\\\";\\r\\nimport \\\"../libs/interface/IBond.sol\\\";\\r\\n\\r\\ncontract RedeemHelper is DaoOwnable {\\r\\n\\r\\n    address[] public bonds;\\r\\n\\r\\n    function redeemAll( address _recipient, bool _stake ) external {\\r\\n        for( uint i = 0; i < bonds.length; i++ ) {\\r\\n            if ( bonds[i] != address(0) ) {\\r\\n                if ( IBond( bonds[i] ).pendingPayoutFor( _recipient ) > 0 ) {\\r\\n                    IBond( bonds[i] ).redeem( _recipient, _stake );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addBondContract( address _bond ) external onlyManager() {\\r\\n        require( _bond != address(0) );\\r\\n        bonds.push( _bond );\\r\\n    }\\r\\n\\r\\n    function removeBondContract( uint _index ) external onlyManager() {\\r\\n        bonds[ _index ] = address(0);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libs/DaoOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ncontract DaoOwnable{\\r\\n\\r\\n    address internal _owner;\\r\\n    address internal _newOwner;\\r\\n\\r\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\r\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipPushed( address(0), _owner );\\r\\n    }\\r\\n\\r\\n    function manager() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceManagement() public onlyManager() {\\r\\n        emit OwnershipPushed( _owner, address(0) );\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function pushManagement( address newOwner_ ) public onlyManager() {\\r\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipPushed( _owner, newOwner_ );\\r\\n        _newOwner = newOwner_;\\r\\n    }\\r\\n    \\r\\n    function pullManagement() public {\\r\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\r\\n        emit OwnershipPulled( _owner, _newOwner );\\r\\n        _owner = _newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libs/interface/IBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IBond {\\r\\n\\tfunction principle() external returns (address); \\r\\n    function bondPrice() external view returns ( uint price_ );\\r\\n    function deposit( uint _amount, uint _maxPrice, address _depositor) external returns ( uint );\\r\\n\\tfunction redeem( address _recipient, bool _stake ) external returns ( uint );\\r\\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ );\\r\\n\\t\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"name\":\"addBondContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeBondContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RedeemHelper", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}