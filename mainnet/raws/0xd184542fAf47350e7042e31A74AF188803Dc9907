{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EvabaseConfig.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by Openflow.network core team.\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IEvabaseConfig.sol\\\";\\n\\nimport {KeepNetWork} from \\\"./lib/EvabaseHelper.sol\\\";\\nimport {IEvaSafesFactory} from \\\"./interfaces/IEvaSafesFactory.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EvabaseConfig is IEvabaseConfig, Ownable {\\n    event ItemChanged(bytes32 indexed key, bytes32 newValue);\\n\\n    mapping(address => KeepInfo) private _keepBotExists;\\n    mapping(KeepNetWork => uint32) public override keepBotSizes;\\n\\n    address public override control;\\n    uint32 public override batchFlowNum = 60;\\n\\n    mapping(bytes32 => bytes32) private _bytes32items;\\n\\n    function setBatchFlowNum(uint32 num) external onlyOwner {\\n        batchFlowNum = num;\\n        emit SetBatchFlowNum(msg.sender, num);\\n    }\\n\\n    function addKeeper(address _keeper, KeepNetWork keepNetWork) external {\\n        require(msg.sender == owner(), \\\"only owner can add keeper\\\");\\n        require(!_keepBotExists[_keeper].isActive, \\\"keeper exist\\\");\\n\\n        _keepBotExists[_keeper] = KeepInfo(true, keepNetWork);\\n\\n        // require(keepBots.contains(_keeper), \\\"keeper exist\\\");\\n        // keepBots.add(_keeper);\\n        keepBotSizes[keepNetWork] = keepBotSizes[keepNetWork] + 1;\\n        emit AddKeeper(msg.sender, _keeper, keepNetWork);\\n    }\\n\\n    function removeBatchKeeper(address[] memory arr) external onlyOwner {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (_keepBotExists[arr[i]].isActive) {\\n                keepBotSizes[_keepBotExists[arr[i]].keepNetWork] = keepBotSizes[_keepBotExists[arr[i]].keepNetWork] - 1;\\n                delete _keepBotExists[arr[i]];\\n            }\\n        }\\n\\n        emit RemoveBatchKeeper(msg.sender, arr);\\n    }\\n\\n    function addBatchKeeper(address[] memory arr, KeepNetWork[] memory keepNetWorks) external onlyOwner {\\n        require(arr.length == keepNetWorks.length, \\\"invalid length\\\");\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (!_keepBotExists[arr[i]].isActive) {\\n                _keepBotExists[arr[i]] = KeepInfo(true, keepNetWorks[i]);\\n                keepBotSizes[keepNetWorks[i]] = keepBotSizes[keepNetWorks[i]] + 1;\\n            }\\n        }\\n\\n        emit AddBatchKeeper(msg.sender, arr, keepNetWorks);\\n    }\\n\\n    function removeKeeper(address _keeper) external onlyOwner {\\n        require(_keepBotExists[_keeper].isActive, \\\"keeper not exist\\\");\\n\\n        KeepNetWork _keepNetWork = _keepBotExists[_keeper].keepNetWork;\\n        keepBotSizes[_keepNetWork] = keepBotSizes[_keepNetWork] - 1;\\n        delete _keepBotExists[_keeper];\\n        emit RemoveKeeper(msg.sender, _keeper);\\n    }\\n\\n    function isKeeper(address _query) external view override returns (bool) {\\n        return _keepBotExists[_query].isActive;\\n    }\\n\\n    function getKeepBot(address _query) external view override returns (KeepInfo memory) {\\n        return _keepBotExists[_query];\\n    }\\n\\n    function setControl(address _control) external onlyOwner {\\n        control = _control;\\n        emit SetControl(msg.sender, _control);\\n    }\\n\\n    function isActiveControler(address add) external view override returns (bool) {\\n        return control == add;\\n    }\\n\\n    function setBytes32Item(bytes32 key, bytes32 value) external onlyOwner {\\n        _bytes32items[key] = value;\\n\\n        emit ItemChanged(key, value);\\n    }\\n\\n    function getBytes32Item(bytes32 key) external view override returns (bytes32) {\\n        return _bytes32items[key];\\n    }\\n\\n    function getAddressItem(bytes32 key) external view override returns (address) {\\n        return address(uint160(uint256(_bytes32items[key])));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvabaseConfig.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\nimport {KeepNetWork} from \\\"../lib/EvabaseHelper.sol\\\";\\n\\nstruct KeepInfo {\\n    bool isActive;\\n    KeepNetWork keepNetWork;\\n}\\n\\ninterface IEvabaseConfig {\\n    event AddKeeper(address indexed user, address keeper, KeepNetWork keepNetWork);\\n    event RemoveKeeper(address indexed user, address keeper);\\n    event AddBatchKeeper(address indexed user, address[] keeper, KeepNetWork[] keepNetWork);\\n    event RemoveBatchKeeper(address indexed user, address[] keeper);\\n\\n    event SetControl(address indexed user, address control);\\n    event SetBatchFlowNum(address indexed user, uint32 num);\\n\\n    function getBytes32Item(bytes32 key) external view returns (bytes32);\\n\\n    function getAddressItem(bytes32 key) external view returns (address);\\n\\n    function control() external view returns (address);\\n\\n    function isKeeper(address query) external view returns (bool);\\n\\n    function batchFlowNum() external view returns (uint32);\\n\\n    function keepBotSizes(KeepNetWork keepNetWork) external view returns (uint32);\\n\\n    function getKeepBot(address add) external view returns (KeepInfo memory);\\n\\n    function isActiveControler(address add) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/EvabaseHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\n\\nenum CompareOperator {\\n    Eq,\\n    Ne,\\n    Ge,\\n    Gt,\\n    Le,\\n    Lt\\n}\\n\\nenum FlowStatus {\\n    Active, //\u53ef\u6267\u884c\\n    Closed,\\n    Expired,\\n    Completed,\\n    Unknown\\n}\\n\\nenum KeepNetWork {\\n    ChainLink,\\n    Evabase,\\n    Gelato,\\n    Others\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaSafesFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\n\\ninterface IEvaSafesFactory {\\n    event ConfigChanged(address indexed newConfig);\\n\\n    event WalletCreated(address indexed user, address wallet);\\n\\n    function get(address user) external view returns (address wallet);\\n\\n    function create(address user) external returns (address wallet);\\n\\n    function calcSafes(address user) external view returns (address wallet);\\n\\n    function changeConfig(address _config) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keeper\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"enum KeepNetWork[]\",\"name\":\"keepNetWork\",\"type\":\"uint8[]\"}],\"name\":\"AddBatchKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum KeepNetWork\",\"name\":\"keepNetWork\",\"type\":\"uint8\"}],\"name\":\"AddKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newValue\",\"type\":\"bytes32\"}],\"name\":\"ItemChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keeper\",\"type\":\"address[]\"}],\"name\":\"RemoveBatchKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"RemoveKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"SetBatchFlowNum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"control\",\"type\":\"address\"}],\"name\":\"SetControl\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"arr\",\"type\":\"address[]\"},{\"internalType\":\"enum KeepNetWork[]\",\"name\":\"keepNetWorks\",\"type\":\"uint8[]\"}],\"name\":\"addBatchKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"enum KeepNetWork\",\"name\":\"keepNetWork\",\"type\":\"uint8\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchFlowNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"control\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getAddressItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32Item\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_query\",\"type\":\"address\"}],\"name\":\"getKeepBot\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"enum KeepNetWork\",\"name\":\"keepNetWork\",\"type\":\"uint8\"}],\"internalType\":\"struct KeepInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"isActiveControler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_query\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum KeepNetWork\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"keepBotSizes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"arr\",\"type\":\"address[]\"}],\"name\":\"removeBatchKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"setBatchFlowNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32Item\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_control\",\"type\":\"address\"}],\"name\":\"setControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EvabaseConfig", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}