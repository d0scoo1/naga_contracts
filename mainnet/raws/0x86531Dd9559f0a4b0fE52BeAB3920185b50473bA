{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.7;\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ncontract ERC20Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"ERC20Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"ERC20Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\ncontract GAWK is Context, IERC20, ERC20Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _tokenName = \"GAWK\";\r\n    string private constant _tokenSymbol = \"GAWK\";\r\n    uint8 private constant _tokenDecimal = 18;\r\n\r\n    uint256 private constant tMAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1e11 * 10**18;\r\n    uint256 private _rTotal = (tMAX - (tMAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 public maxTokens;\r\n\tuint256 private minTokensForTaxSwap;\r\n    address payable private MarketingAddress; //Marketing Wallet Address\r\n    address payable private AppDevelopAddress; //Other Misc Wallet Address\r\n    address payable private DevAddress; //Dev Wallet Address\r\n    address payable public LiquidityAddress; //Liquidity Pool Token Owner. Gets set to BURN after inital LP is created.\r\n    address dead = address(0xdead);\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address[] private _excluded;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private Excluded;\r\n\tmapping(address => bool) private ExcludedFromTax;\r\n    mapping(address => bool) private MaxWalletExclude;\r\n    mapping (address => bool) public isBotAddress;\r\n    mapping(address => bool) public isSniperAddress;\r\n\tuint256 private MarketingTokens;\r\n\tuint256 private LiquidityTokens;\r\n    uint256 private AppDevelopmentTokens;\r\n    uint256 private totalBurnedTokens;\r\n    uint256 private MarketingTax = 6;\r\n    uint256 private prevMarketingTax = MarketingTax;\r\n    uint256 private AppDevelopmentTax = 2;\r\n    uint256 private prevAppDevelopmentTax = AppDevelopmentTax;\r\n    uint256 private LiquidityTax = 2; \r\n    uint256 private prevLiquidityTax = LiquidityTax;\r\n    uint256 private ReflectionsTax = 0; \r\n    uint256 private prevReflectionsTax = ReflectionsTax;\r\n    uint256 private taxDivision = MarketingTax + AppDevelopmentTax + LiquidityTax;\r\n    uint256 private buyMarketingTax = 6;\r\n    uint256 private buyAppDevelopmentTax = 2; \r\n    uint256 private buyLiquidityTax = 2;\r\n    uint256 private buyReflectionsTax = 0; \r\n    uint256 private sellMarketingTax = 6; \r\n    uint256 private sellAppDevelopmentTax = 2; \r\n    uint256 private sellLiquidityTax = 2;\r\n    uint256 private sellReflectionsTax = 0; \r\n    uint256 private maxTokenPercent = 1;\r\n    uint256 public ActiveTradeBlock = 0;\r\n    uint256 public SniperPenaltyEndTime;\r\n    bool public maxWallet = false;\r\n    bool public limitsInEffect = false;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    bool public live = false;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    constructor() payable {\r\n        _rOwned[_msgSender()] = _rTotal / 100 * 5;\r\n        _rOwned[address(this)] = _rTotal / 100 * 95;\r\n        maxTokens = _tTotal * maxTokenPercent / 100;\r\n        minTokensForTaxSwap = _tTotal * 5 / 10000; \r\n        MarketingAddress = payable(0xf4Fe4C3cF688Ae1eC71609Ea60dD1b4b0Cc4EBd0); \r\n        AppDevelopAddress = payable(0x83cD2e03378B59A0dc9707a5b1cfC379114f2eA2); \r\n        DevAddress = payable(0xeF01d68bEc0BC57575c525f15cE9707A75e2296f); \r\n        // LEAVE AS OWNER\r\n        LiquidityAddress = payable(owner()); //Liquidity Pool Token Owner. Gets set to BURN after inital LP is created.\r\n        Excluded[dead] = true;\r\n        ExcludedFromTax[_msgSender()] = true;\r\n        ExcludedFromTax[dead] = true;\r\n        ExcludedFromTax[address(this)] = true;\r\n        ExcludedFromTax[MarketingAddress] = true;\r\n        ExcludedFromTax[AppDevelopAddress] = true;\r\n        ExcludedFromTax[DevAddress] = true;\r\n        MaxWalletExclude[address(this)] = true;\r\n        MaxWalletExclude[_msgSender()] = true;\r\n        MaxWalletExclude[dead] = true;\r\n        MaxWalletExclude[MarketingAddress] = true;\r\n        MaxWalletExclude[AppDevelopAddress] = true;\r\n        MaxWalletExclude[DevAddress] = true;\r\n        AddBot(0x41B0320bEb1563A048e2431c8C1cC155A0DFA967);\r\n        AddBot(0x91B305F0890Fd0534B66D8d479da6529C35A3eeC);\r\n        AddBot(0x7F5622afb5CEfbA39f96CA3b2814eCF0E383AAA4);\r\n        AddBot(0xfcf6a3d7eb8c62a5256a020e48f153c6D5Dd6909);\r\n        AddBot(0x74BC89a9e831ab5f33b90607Dd9eB5E01452A064);\r\n        AddBot(0x1F53592C3aA6b827C64C4a3174523182c52Ece84);\r\n        AddBot(0x460545C01c4246194C2e511F166D84bbC8a07608);\r\n        AddBot(0x2E5d67a1d15ccCF65152B3A8ec5315E73461fBcd);\r\n        AddBot(0xb5aF12B837aAf602298B3385640F61a0fF0F4E0d);\r\n        AddBot(0xEd3e444A30Bd440FBab5933dCCC652959DfCB5Ba);\r\n        AddBot(0xEC366bbA6266ac8960198075B14FC1D38ea7de88);\r\n        AddBot(0x10Bf6836600D7cFE1c06b145A8Ac774F8Ba91FDD);\r\n        AddBot(0x44ae54e28d082C98D53eF5593CE54bB231e565E7);\r\n        AddBot(0xa3e820006F8553d5AC9F64A2d2B581501eE24FcF);\r\n\t\tAddBot(0x2228476AC5242e38d5864068B8c6aB61d6bA2222);\r\n\t\tAddBot(0xcC7e3c4a8208172CA4c4aB8E1b8B4AE775Ebd5a8);\r\n\t\tAddBot(0x5b3EE79BbBDb5B032eEAA65C689C119748a7192A);\r\n\t\tAddBot(0x4ddA45d3E9BF453dc95fcD7c783Fe6ff9192d1BA);\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal * 5 / 100);\r\n        emit Transfer(address(0), address(this), _tTotal * 95 / 100);\r\n    }\r\n    receive() external payable {}\r\n    function name() public pure override returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n    function symbol() public pure override returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n    function decimals() public pure override returns (uint8) {\r\n        return _tokenDecimal;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (Excluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),\r\n        _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amt must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amt must be less than tot refl\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    function _getValues(uint256 tAmount) private view returns (uint256,uint256,uint256,uint256,uint256,uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n    function _getTValues(uint256 tAmount)private view returns (uint256,uint256,uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n    function _getRValues(uint256 tAmount,uint256 tFee,uint256 tLiquidity,uint256 currentRate) private pure returns (uint256,uint256,uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        MarketingTokens += tLiquidity * MarketingTax / taxDivision;\r\n        AppDevelopmentTokens += tLiquidity * AppDevelopmentTax / taxDivision;\r\n        LiquidityTokens += tLiquidity * LiquidityTax / taxDivision;\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (Excluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(ReflectionsTax).div(10**2);\r\n    }\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(MarketingTax + AppDevelopmentTax + LiquidityTax).div(10**2);\r\n    }\r\n    function GoLive() external onlyOwner returns (bool){\r\n        require(!live, \"Trades already Live!\");\r\n        maxWallet = true;\r\n        swapAndLiquifyEnabled = true;\r\n        limitsInEffect = true;\r\n        live = true;\r\n        ActiveTradeBlock = block.number;\r\n        SniperPenaltyEndTime = block.timestamp + 96 hours;\r\n        IUniswapV2Router02 _uniV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniV2Router;\r\n        MaxWalletExclude[address(uniswapV2Router)] = true;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniV2Router.factory()).createPair(address(this), _uniV2Router.WETH());\r\n        MaxWalletExclude[address(uniswapV2Pair)] = true;\r\n        require(address(this).balance > 0, \"Must have ETH on contract to Open Market!\");\r\n        addLiquidity(balanceOf(address(this)), address(this).balance);\r\n        setLiquidityAddress(dead);\r\n        return true;\r\n    }\r\n    function _approve(address owner,address spender,uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from zero address\");\r\n        require(spender != address(0), \"ERC20: approve to zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!isBotAddress[from]);\r\n        if(!live){\r\n            require(ExcludedFromTax[from] || ExcludedFromTax[to], \"Trading Is Not Live!\");\r\n        }\r\n        if (maxWallet && !MaxWalletExclude[to]) {\r\n            require(balanceOf(to) + amount <= maxTokens, \"Max amount of tokens for wallet reached!\");\r\n        }\r\n        if(limitsInEffect){\r\n            if (from != owner() && to != owner() && to != address(0) && to != dead && !inSwapAndLiquify) {\r\n                if(from != owner() && to != uniswapV2Pair) {\r\n                    for (uint x = 0; x < 3; x++) {\r\n                    if(block.number == ActiveTradeBlock + x) {\r\n                        isSniperAddress[to] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        uint256 totalTokensToSwap = LiquidityTokens.add(MarketingTokens).add(AppDevelopmentTokens);\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minTokensForTaxSwap;\r\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && balanceOf(uniswapV2Pair) > 0 && totalTokensToSwap > 0 && !ExcludedFromTax[to] && !ExcludedFromTax[from] && to == uniswapV2Pair && overMinimumTokenBalance) {\r\n            swapTaxTokens();\r\n            }\r\n        bool takeFee = true;\r\n        if (ExcludedFromTax[from] || ExcludedFromTax[to]) {\r\n            takeFee = false;\r\n        } else {\r\n            if (from == uniswapV2Pair) {\r\n                removeAllFee();\r\n                MarketingTax = buyMarketingTax;\r\n                AppDevelopmentTax = buyAppDevelopmentTax;\r\n                ReflectionsTax = buyReflectionsTax;\r\n                LiquidityTax = buyLiquidityTax;\r\n            } \r\n            else if (to == uniswapV2Pair) {\r\n                removeAllFee();\r\n                MarketingTax = sellMarketingTax;\r\n                AppDevelopmentTax = sellAppDevelopmentTax;\r\n                ReflectionsTax = sellReflectionsTax;\r\n                LiquidityTax = sellLiquidityTax;\r\n                if(isSniperAddress[from] && SniperPenaltyEndTime > block.timestamp) {\r\n                    MarketingTax = 95;\r\n                }\r\n            } else {\r\n                require(!isSniperAddress[from] || SniperPenaltyEndTime <= block.timestamp);\r\n                removeAllFee();\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n    function swapTaxTokens() private lockTheSwap {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = MarketingTokens + AppDevelopmentTokens + LiquidityTokens;\r\n        uint256 swapLiquidityTokens = LiquidityTokens.div(2);\r\n        uint256 amountToSwapForETH = contractBalance.sub(swapLiquidityTokens);\r\n        uint256 initialETHBalance = address(this).balance;\r\n        swapTokensForETH(amountToSwapForETH); \r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n        uint256 ethForMarketing = ethBalance.mul(MarketingTokens).div(totalTokensToSwap);\r\n        uint256 ethForAppDev = ethBalance.mul(AppDevelopmentTokens).div(totalTokensToSwap);\r\n        uint256 ethForLiquidity = ethBalance.sub(ethForMarketing).sub(ethForAppDev);\r\n        MarketingTokens = 0;\r\n        AppDevelopmentTokens = 0;\r\n        LiquidityTokens = 0;\r\n        (bool success,) = address(MarketingAddress).call{value: ethForMarketing}(\"\");\r\n        (success,) = address(AppDevelopAddress).call{value: ethForAppDev}(\"\");\r\n        addLiquidity(swapLiquidityTokens, ethForLiquidity);\r\n        if(address(this).balance > 5 * 10**17){\r\n            (success,) = address(DevAddress).call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            LiquidityAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function removeAllFee() private {\r\n        if (LiquidityTax == 0 && MarketingTax == 0 && AppDevelopmentTax == 0 && ReflectionsTax == 0) return;\r\n        prevLiquidityTax = LiquidityTax;\r\n        prevMarketingTax = MarketingTax;\r\n        prevAppDevelopmentTax = AppDevelopmentTax;\r\n        prevReflectionsTax = ReflectionsTax;\r\n\r\n        LiquidityTax = 0;\r\n        MarketingTax = 0;\r\n        AppDevelopmentTax = 0;\r\n        ReflectionsTax = 0;\r\n    }\r\n    function restoreAllFee() private {\r\n        MarketingTax = prevMarketingTax;\r\n        AppDevelopmentTax = prevAppDevelopmentTax;\r\n        ReflectionsTax = prevReflectionsTax;\r\n        LiquidityTax = prevLiquidityTax;\r\n    }\r\n    function _tokenTransfer(address sender,address recipient,uint256 amount,bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        if (Excluded[sender] && !Excluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!Excluded[sender] && Excluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!Excluded[sender] && !Excluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (Excluded[sender] && Excluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n    function _transferStandard(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferToExcluded(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferFromExcluded(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferBothExcluded(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _tokenTransferNoFee(address sender,address recipient,uint256 amount) private {\r\n        _rOwned[sender] = _rOwned[sender].sub(amount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(amount);\r\n\r\n        if (Excluded[sender]) {\r\n            _tOwned[sender] = _tOwned[sender].sub(amount);\r\n        }\r\n        if (Excluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function setLiquidityAddress(address _LPAddress) internal {\r\n        LiquidityAddress = payable(_LPAddress);\r\n        ExcludedFromTax[LiquidityAddress] = true;\r\n    }\r\n    function ownerSetLiquidityAddress(address _LPAddress) external onlyOwner {\r\n        LiquidityAddress = payable(_LPAddress);\r\n        ExcludedFromTax[LiquidityAddress] = true;\r\n    }\r\n    function excludeFromTax(address account) external onlyOwner {\r\n        ExcludedFromTax[account] = true;\r\n    }\r\n    function includeInTax(address account) external onlyOwner {\r\n        ExcludedFromTax[account] = false;\r\n    }\r\n    function excludeFromMaxTokens(address account) external onlyOwner {\r\n        MaxWalletExclude[account] = true;\r\n    }\r\n    function includeInMaxTokens(address account) external onlyOwner {\r\n        MaxWalletExclude[account] = false;\r\n    }\r\n    function AddBot(address _user) public onlyOwner {\r\n        require(!isBotAddress[_user]);\r\n        isBotAddress[_user] = true;\r\n    }\r\n\tfunction RemoveBot(address _user) public onlyOwner {\r\n        require(isBotAddress[_user]);\r\n        isBotAddress[_user] = false;\r\n    }\r\n    function removeSniper(address account) external onlyOwner {\r\n        require(isSniperAddress[account]);\r\n        isSniperAddress[account] = false;\r\n    }\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = true;\r\n    }\r\n    function resumeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n    }\r\n    function TaxSwapEnable() external onlyOwner {\r\n        swapAndLiquifyEnabled = true;\r\n    }\r\n    function TaxSwapDisable() external onlyOwner {\r\n        swapAndLiquifyEnabled = false;\r\n    }\r\n    function enableMaxWallet() external onlyOwner {\r\n        maxWallet = true;\r\n    }\r\n    function disableMaxWallet() external onlyOwner {\r\n        maxWallet = false;\r\n    }\r\n    function setMaxWallet(uint256 _percent) external onlyOwner {\r\n        maxTokens = _tTotal * _percent / 100;\r\n        require(maxTokens <= _tTotal * 3 / 100, \"Cannot set max wallet to more then 3% of total supply\");\r\n    }\r\n    function ManualTaxSwap() external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        require(contractBalance >= _tTotal * 1 / 10000, \"Can only swap back if more than 0.01% of tokens stuck on contract\");\r\n        swapTaxTokens();\r\n    }\r\n    function withdrawETH() public onlyOwner {\r\n        bool success;\r\n        (success,) = address(DevAddress).call{value: address(this).balance}(\"\");\r\n    }\r\n    function withdrawTokens(uint256 _percent, address _address) public onlyOwner {\r\n        MarketingTokens = 0;\r\n        AppDevelopmentTokens = 0;\r\n        LiquidityTokens = 0;\r\n        uint256 amount = balanceOf(address(this)) * _percent / 10**2;\r\n        require(amount > 0, \"Must have Tokens on CA\");\r\n        _transfer(address(this), _address, amount);\r\n    }\r\n    function setBuyTaxes(uint256 _buyMarketingTax, uint256 _buyAppDevelopmentTax, uint256 _buyLiquidityTax, uint256 _buyReflectionsTax) external onlyOwner {\r\n        buyMarketingTax = _buyMarketingTax;\r\n        buyAppDevelopmentTax = _buyAppDevelopmentTax;\r\n        buyLiquidityTax = _buyLiquidityTax;\r\n        buyReflectionsTax = _buyReflectionsTax;\r\n    }\r\n    function setSellTaxes(uint256 _sellMarketingTax, uint256 _sellAppDevelopmentTax, uint256 _sellLiquidityTax, uint256 _sellReflectionsTax) external onlyOwner {\r\n        sellMarketingTax = _sellMarketingTax;\r\n        sellAppDevelopmentTax = _sellAppDevelopmentTax;\r\n        sellLiquidityTax = _sellLiquidityTax;\r\n        sellReflectionsTax = _sellReflectionsTax;\r\n    }\r\n    function viewBuyTaxes() public view returns(uint256 BuyMarketing, uint256 buyAppDevelopment, uint256 buyLiquidity, uint256 buyReflections) {\r\n        return(buyMarketingTax,buyAppDevelopmentTax,buyLiquidityTax,buyReflections);\r\n    }\r\n    function viewSellTaxes() public view returns(uint256 sellMarketing, uint256 sellAppDevelopment, uint256 sellLiquidity, uint256 sellReflections) {\r\n        return (sellMarketingTax,sellAppDevelopmentTax,sellLiquidityTax,sellReflections);\r\n    }\r\n    function manualBurnTokens(uint256 percent) external onlyOwner returns (bool){\r\n        require(percent <= 10, \"May not nuke more than 10% of tokens in LP\");\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n        uint256 amountToBurn = liquidityPairBalance * percent / 10**2;\r\n        if (amountToBurn > 0){\r\n            _transfer(uniswapV2Pair, dead, amountToBurn);\r\n        }\r\n        totalBurnedTokens = balanceOf(dead);\r\n        require(totalBurnedTokens <= _tTotal * 50 / 10**2, \"Can not burn more then 50% of supply\");\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        return true;\r\n    }\r\n    function AirDrop(address[] memory wallets, uint256[] memory percent) external onlyOwner{\r\n        require(wallets.length < 10, \"Can only airdrop 100 wallets per txn due to gas limits\");\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            address wallet = wallets[i];\r\n            uint256 amount = _tTotal * percent[i] / 100;\r\n            _transfer(msg.sender, wallet, amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ActiveTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percent\",\"type\":\"uint256[]\"}],\"name\":\"AirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GoLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ManualTaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemoveBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SniperPenaltyEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TaxSwapDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TaxSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBotAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSniperAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LPAddress\",\"type\":\"address\"}],\"name\":\"ownerSetLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyAppDevelopmentTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyReflectionsTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellAppDevelopmentTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellReflectionsTax\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBuyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BuyMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAppDevelopment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyReflections\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAppDevelopment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellReflections\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GAWK", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ced5982964f50a0d9802adc61992190c7097b4965da89d1f8974a93f12a40e11"}]}