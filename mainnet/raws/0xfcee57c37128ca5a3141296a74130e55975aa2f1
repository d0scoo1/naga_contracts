{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Unlicense\r\n// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\npragma solidity ^0.8.4;\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.2\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.4.2\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MHDCDistributor.sol\r\n// MHDC Distributor Contract\r\n\r\ncontract MHDCDistributor is Ownable {\r\n    // primary distributions\r\n    struct Dist {\r\n        uint256 share;\r\n        uint256 loc;\r\n        string name;\r\n    }\r\n\r\n    mapping(address => Dist) private _distMap;\r\n    address[] private _distList;\r\n    uint256 private _shareTotal = 0;\r\n\r\n    event Distribution(uint256 amount);\r\n    event DistributionListChange(address indexed target, bool isIncluded);\r\n\r\n    constructor(\r\n        address[] memory addresses,\r\n        string[] memory names,\r\n        uint256[] memory shares\r\n    ) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            addDist(addresses[i], names[i], shares[i]);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    function getShareTotal() public view returns (uint256) {\r\n        return _shareTotal;\r\n    }\r\n\r\n    function getShare(address account) public view returns (uint256) {\r\n        return _distMap[account].share;\r\n    }\r\n\r\n    function getName(address account) public view returns (string memory) {\r\n        return _distMap[account].name;\r\n    }\r\n\r\n    function allDist() public view returns (address[] memory) {\r\n        return _distList;\r\n    }\r\n\r\n    function isDist(address account) public view returns (bool) {\r\n        return (getShare(account) > 0);\r\n    }\r\n\r\n    function shareTotal() private {\r\n        uint256 sum;\r\n        for (uint256 i = 0; i < _distList.length; i++) {\r\n            sum += _distMap[_distList[i]].share;\r\n        }\r\n        _shareTotal = sum;\r\n    }\r\n\r\n    function addDist(\r\n        address _address,\r\n        string memory _Name,\r\n        uint256 _share\r\n    ) public onlyOwner {\r\n        require(_address != address(0), \"Invalid address\");\r\n        require(_share > 0, \"Share must be greater than zero\");\r\n        Dist storage d = _distMap[_address];\r\n        require(d.share == 0, \"Address already in distribution list\");\r\n\r\n        d.share = _share;\r\n        d.loc = _distList.length;\r\n        d.name = _Name;\r\n\r\n        _distList.push(_address);\r\n        emit DistributionListChange(_address, true);\r\n        shareTotal();\r\n    }\r\n\r\n    function removeDist(address _address) public onlyOwner {\r\n        Dist storage d = _distMap[_address];\r\n        require(d.share > 0, \"Address not in distribution list\");\r\n        d.share = 0;\r\n\r\n        address _last = _distList[_distList.length - 1];\r\n        _distMap[_last].loc = d.loc;\r\n        _distList[d.loc] = _last;\r\n        _distList.pop();\r\n\r\n        emit DistributionListChange(_address, false);\r\n        shareTotal();\r\n    }\r\n\r\n    function editDistName(address _address, string memory _Name)\r\n        external\r\n        onlyOwner\r\n    {\r\n        Dist storage d = _distMap[_address];\r\n        require(d.share > 0, \"Address not in distribution list\");\r\n        d.name = _Name;\r\n    }\r\n\r\n    function editDistShare(address _address, uint256 _share)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_share > 0, \"To set share to zero, use removeDist()\");\r\n        Dist storage d = _distMap[_address];\r\n        require(d.share > 0, \"Address not in distribution list\");\r\n\r\n        d.share = _share;\r\n        shareTotal();\r\n    }\r\n\r\n    function editDistAddress(string memory _Name, address _newAddress)\r\n\texternal\r\n\tonlyOwner\r\n    {\r\n\taddress _oldAddress;\r\n\tDist memory d;\r\n\r\n\tfor (uint256 i = 0; i < _distList.length; i++) {\r\n\t_oldAddress = _distList[i];\r\n\td = _distMap[_oldAddress];\r\n\r\n\t    if (keccak256(bytes(d.name)) == keccak256(bytes(_Name))) {\r\n\t\tremoveDist(_oldAddress);\r\n\t\taddDist(_newAddress, _Name, d.share);\r\n\t    }\r\n\t}\r\n    }\r\n\r\n    function distribute() external onlyOwner {\r\n        if (_distList.length > 0) {\r\n            uint256 balance = address(this).balance;\r\n            uint256 unit = balance / _shareTotal;\r\n            address _address;\r\n\r\n            for (uint256 i = 0; i < _distList.length; i++) {\r\n                _address = _distList[i];\r\n                payable(_address).transfer(_distMap[_address].share * unit);\r\n            }\r\n            emit Distribution(balance);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isIncluded\",\"type\":\"bool\"}],\"name\":\"DistributionListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"addDist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allDist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"editDistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"}],\"name\":\"editDistName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"editDistShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeDist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MHDCDistributor", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000005000000000000000000000000e4c1818b7172e37a2da8ce8db16cfa2f17304967000000000000000000000000e8083be6691974869b14f7ba41c9ed8959fbbe0400000000000000000000000077b351c8223847e9f1d40a6b03b06833d1dbe917000000000000000000000000b8d1997e953e1bbb8f8e9a69051723f1b10ae9bb000000000000000000000000d2b44e0cd14518e239920338078d34ccc15b64c1000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000024c4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054f50454e3300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034445560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644455349474e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000457494c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000006b6c000000000000000000000000000000000000000000000000000000000000591c8000000000000000000000000000000000000000000000000000000000000ea600000000000000000000000000000000000000000000000000000000000003a98000000000000000000000000000000000000000000000000000000000001d4c0", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://426c81814fa8ab674af2c5c67d9aac45dff6c0d24e07ed6c5a21bc316d0b38d1"}]}