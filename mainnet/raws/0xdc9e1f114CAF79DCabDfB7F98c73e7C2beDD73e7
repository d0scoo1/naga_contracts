{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/operator/OpClaimAaveV2StakedRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OpCommon.sol\\\";\\n\\nimport {AccountCenterInterface} from \\\"../interfaces/IAccountCenter.sol\\\";\\n\\ncontract OpClaimAaveV2StakedRewards is OpCommon {\\n    address public immutable aaveIncentivesAddress;\\n    address public immutable aaveStakeRewardClaimer;\\n\\n    event ClaimStkAaveReward(address[], uint256, address);\\n    constructor(address _aaveIncentivesAddress, address _aaveStakeRewardClaimer)\\n    {\\n        aaveIncentivesAddress = _aaveIncentivesAddress;\\n        aaveStakeRewardClaimer = _aaveStakeRewardClaimer;\\n    }\\n\\n    function claimDsaAaveStakeReward(address[] calldata atokens) public {\\n        address EOA = AccountCenterInterface(accountCenter).getEOA(\\n            address(this)\\n        );\\n\\n        _fakeClaimRewards(\\n                atokens,\\n                type(uint256).max,\\n                EOA\\n        );\\n        // AaveStakedTokenIncentivesController(aaveIncentivesAddress).claimRewards(\\n        //         atokens,\\n        //         type(uint256).max,\\n        //         EOA\\n        //     );\\n    }\\n\\n    function _fakeClaimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) public {\\n\\n        emit ClaimStkAaveReward(assets, amount, to);\\n    }\\n}\\n\\ninterface AaveStakedTokenIncentivesController {\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/operator/OpCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract OpCommon {\\n    // auth is shared storage with AccountProxy and any OpCode.\\n    mapping(address => bool) internal _auth;\\n    address internal accountCenter;\\n\\n    receive() external payable {}\\n\\n    modifier onlyAuth() {\\n        require(_auth[msg.sender], \\\"CHFRY: Permission Denied\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccountCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AccountCenterInterface {\\n    function accountCount() external view returns (uint256);\\n\\n    function accountTypeCount() external view returns (uint256);\\n\\n    function createAccount(uint256 accountTypeID)\\n        external\\n        returns (address _account);\\n\\n    function getAccount(uint256 accountTypeID)\\n        external\\n        view\\n        returns (address _account);\\n\\n    function getEOA(address account)\\n        external\\n        view\\n        returns (address payable _eoa);\\n\\n    function isSmartAccount(address _address)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function isSmartAccountofTypeN(address _address, uint256 accountTypeID)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function getAccountCountOfTypeN(uint256 accountTypeID)\\n        external\\n        view\\n        returns (uint256 count);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveIncentivesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveStakeRewardClaimer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ClaimStkAaveReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"_fakeClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentivesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveStakeRewardClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"atokens\",\"type\":\"address[]\"}],\"name\":\"claimDsaAaveStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OpClaimAaveV2StakedRewards", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d784927ff2f95ba542bfc824c8a8a98f3495f6b500000000000000000000000070f15834a8ccd67337b75e759e4335074793858b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}