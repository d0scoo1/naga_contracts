{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/JaxPlanet.sol\": {\r\n      \"content\": \"\\r\\n // SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IJaxAdmin.sol\\\";\\r\\nimport \\\"./JaxOwnable.sol\\\";\\r\\nimport \\\"./JaxProtection.sol\\\";\\r\\n\\r\\ninterface IJaxPlanet {\\r\\n\\r\\n  struct Colony {\\r\\n    uint128 level;\\r\\n    uint128 transaction_tax;\\r\\n    bytes32 _policy_hash;\\r\\n    string _policy_link;\\r\\n  }\\r\\n\\r\\n  function ubi_tax_wallet() external view returns (address);\\r\\n  function ubi_tax() external view returns (uint);\\r\\n  function jaxcorp_dao_wallet() external view returns (address);\\r\\n  function getMotherColonyAddress(address) external view returns(address);\\r\\n  function getColony(address addr) external view returns(Colony memory);\\r\\n  function getUserColonyAddress(address user) external view returns(address);\\r\\n}\\r\\n\\r\\ncontract JaxPlanet is Initializable, IJaxPlanet, JaxOwnable, JaxProtection {\\r\\n  \\r\\n  IJaxAdmin public jaxAdmin;\\r\\n\\r\\n  address public ubi_tax_wallet;\\r\\n  address public jaxcorp_dao_wallet;\\r\\n  \\r\\n  // ubi tax\\r\\n  uint public ubi_tax;\\r\\n  \\r\\n  uint128 public min_transaction_tax;\\r\\n\\r\\n  mapping (address => address) private mother_colony_addresses;\\r\\n  mapping (address => address) private user_colony_addresses;\\r\\n  mapping (address => Colony) private colonies;\\r\\n\\r\\n\\r\\n  event Set_Jax_Admin(address old_admin, address new_admin);\\r\\n  event Set_Ubi_Tax(uint ubi_tax, address ubi_tax_wallet);\\r\\n  event Register_Colony(address colony_external_key, uint128 tx_tax, string colony_policy_link, bytes32 colony_policy_hash, address mother_colony_external_key);\\r\\n  event Set_Colony_Address(address addr, address colony);\\r\\n  event Set_Jax_Corp_Dao(address jax_corp_dao_wallet, uint128 tx_tax, string policy_link, bytes32 policy_hash);\\r\\n  event Set_Min_Transaction_Tax(uint min_tx_tax);\\r\\n\\r\\n  modifier onlyAdmin() {\\r\\n    require(jaxAdmin.userIsAdmin(msg.sender) || msg.sender == owner, \\\"Not_Admin\\\"); //Only Admin can perform this operation.\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyAjaxPrime() {\\r\\n    require(jaxAdmin.userIsAjaxPrime(msg.sender) || msg.sender == owner, \\\"Not_AjaxPrime\\\"); //Only AjaxPrime can perform this operation.\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier checkZeroAddress(address account) {\\r\\n    require(account != address(0x0), \\\"Only non-zero address\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setJaxAdmin(address newJaxAdmin) external onlyAdmin runProtection {\\r\\n    address oldAdmin = address(jaxAdmin);\\r\\n    jaxAdmin = IJaxAdmin(newJaxAdmin);\\r\\n    require(jaxAdmin.system_status() >= 0, \\\"Invalid Jax Admin\\\");\\r\\n    emit Set_Jax_Admin(oldAdmin, newJaxAdmin);\\r\\n  }\\r\\n\\r\\n  function setUbiTax(uint _ubi_tax, address wallet) external checkZeroAddress(wallet) onlyAjaxPrime runProtection {\\r\\n      require(_ubi_tax <= 1e8 * 10 / 100 , \\\"UBI tax can't be more than 10.\\\");\\r\\n      ubi_tax = _ubi_tax;\\r\\n      ubi_tax_wallet = wallet;\\r\\n      emit Set_Ubi_Tax(_ubi_tax, wallet);\\r\\n  }\\r\\n\\r\\n  function registerColony(uint128 tx_tax, string memory colony_policy_link, bytes32 colony_policy_hash, address mother_colony_external_key) external {\\r\\n\\r\\n    require(tx_tax <= (1e8) * 20 / 100, \\\"Tx tax can't be more than 20%\\\");\\r\\n    require(msg.sender != mother_colony_external_key, \\\"Mother colony can't be set\\\");\\r\\n    require(user_colony_addresses[msg.sender] == address(0), \\\"Colony can't be a user\\\");\\r\\n    \\r\\n    if (colonies[mother_colony_external_key].level == 0) {\\r\\n      mother_colony_addresses[msg.sender] = address(0);\\r\\n      colonies[msg.sender].level = 2;\\r\\n    } else {\\r\\n      if (colonies[mother_colony_external_key].level < colonies[msg.sender].level || colonies[msg.sender].level == 0) {\\r\\n        mother_colony_addresses[msg.sender] = mother_colony_external_key;\\r\\n        colonies[msg.sender].level = colonies[mother_colony_external_key].level + 1;\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    colonies[msg.sender].transaction_tax = tx_tax;\\r\\n    colonies[msg.sender]._policy_link = colony_policy_link;\\r\\n    colonies[msg.sender]._policy_hash = colony_policy_hash;\\r\\n    emit Register_Colony(msg.sender, tx_tax, colony_policy_link, colony_policy_hash, mother_colony_external_key);\\r\\n  }\\r\\n\\r\\n  function getColony(address addr) external view returns(Colony memory) {\\r\\n      Colony memory colony = colonies[addr];\\r\\n      if(colony.transaction_tax < min_transaction_tax)\\r\\n        colony.transaction_tax = min_transaction_tax;\\r\\n      return colony;\\r\\n  }\\r\\n\\r\\n  function getUserColonyAddress(address addr) external view returns(address) {\\r\\n      return user_colony_addresses[addr];\\r\\n  }\\r\\n\\r\\n  function getMotherColonyAddress(address account) external view returns(address) {\\r\\n    return mother_colony_addresses[account];\\r\\n  }\\r\\n\\r\\n  function setColonyAddress(address colony) external {\\r\\n    require(mother_colony_addresses[msg.sender] == address(0) && colonies[msg.sender].level == 0, \\\"Colony can't be a user\\\");\\r\\n    require(user_colony_addresses[colony] == address(0), \\\"Colony can't be a user\\\");\\r\\n    require(msg.sender != colony && colonies[colony].level != 0, \\\"Mother Colony is invalid\\\");\\r\\n    user_colony_addresses[msg.sender] = colony;\\r\\n    emit Set_Colony_Address(msg.sender, colony);\\r\\n  }\\r\\n\\r\\n  function setJaxCorpDAO(address jaxCorpDao_wallet, uint128 tx_tax, string memory policy_link, bytes32 policy_hash) external checkZeroAddress(jaxCorpDao_wallet) onlyAjaxPrime runProtection {\\r\\n      require(tx_tax <= (1e8) * 20 / 100, \\\"Tx tax can't be more than 20%\\\");\\r\\n      jaxcorp_dao_wallet = jaxCorpDao_wallet;\\r\\n\\r\\n      colonies[address(0)].transaction_tax = tx_tax;\\r\\n      colonies[address(0)]._policy_link = policy_link;\\r\\n      colonies[address(0)]._policy_hash = policy_hash;\\r\\n      colonies[address(0)].level = 1;\\r\\n\\r\\n      emit Set_Jax_Corp_Dao(jaxCorpDao_wallet, tx_tax, policy_link, policy_hash);\\r\\n  }\\r\\n\\r\\n  function setMinTransactionTax(uint128 min_tx_tax) external onlyAjaxPrime runProtection {\\r\\n    require(min_tx_tax <= 2e7, \\\"min transaction tax is higher than 20%\\\");\\r\\n    min_transaction_tax = min_tx_tax;\\r\\n    emit Set_Min_Transaction_Tax(min_tx_tax);\\r\\n  }\\r\\n\\r\\n  function initialize(address _jaxAdmin) external initializer {\\r\\n    jaxAdmin = IJaxAdmin(_jaxAdmin);\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() initializer {}\\r\\n\\r\\n  \\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IJaxAdmin.sol\": {\r\n      \"content\": \" // SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IJaxAdmin {\\r\\n\\r\\n  function userIsAdmin (address _user) external view returns (bool);\\r\\n  function userIsGovernor (address _user) external view returns (bool);\\r\\n  function userIsAjaxPrime (address _user) external view returns (bool);\\r\\n  function userIsOperator (address _user) external view returns (bool);\\r\\n  function jaxSwap() external view returns (address);\\r\\n  function system_status () external view returns (uint);\\r\\n  function electGovernor (address _governor) external;  \\r\\n  function blacklist(address _user) external view returns (bool);\\r\\n  function priceImpactLimit() external view returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/JaxOwnable.sol\": {\r\n      \"content\": \"\\r\\n // SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ncontract JaxOwnable {\\r\\n\\r\\n  address public owner;\\r\\n  address public new_owner;\\r\\n  uint public new_owner_locktime;\\r\\n  \\r\\n  event Set_New_Owner(address newOwner, uint newOwnerLocktime);\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n      require(owner == msg.sender, \\\"JaxOwnable: caller is not the owner\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  function setNewOwner(address newOwner) external onlyOwner {\\r\\n    require(newOwner != address(0x0), \\\"New owner cannot be zero address\\\");\\r\\n    new_owner = newOwner;\\r\\n    new_owner_locktime = block.timestamp + 2 days;\\r\\n    emit Set_New_Owner(newOwner, new_owner_locktime);\\r\\n  }\\r\\n\\r\\n  function updateOwner() external {\\r\\n    require(msg.sender == new_owner, \\\"Only new owner\\\");\\r\\n    require(block.timestamp >= new_owner_locktime, \\\"New admin is not unlocked yet\\\");\\r\\n    _transferOwnership(new_owner);\\r\\n    new_owner = address(0x0);\\r\\n  }\\r\\n\\r\\n  function renounceOwnership() external onlyOwner {\\r\\n    _transferOwnership(address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n  * Internal function without access restriction.\\r\\n  */\\r\\n  function _transferOwnership(address newOwner) internal virtual {\\r\\n    address oldOwner = owner;\\r\\n    owner = newOwner;\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/JaxProtection.sol\": {\r\n      \"content\": \"\\n // SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ncontract JaxProtection {\\n\\n    struct RunProtection {\\n        bytes32 data_hash;\\n        uint64 request_timestamp;\\n        address sender;\\n        bool executed;\\n    }\\n\\n    mapping(bytes4 => RunProtection) run_protection_info;\\n\\n    event Request_Update(bytes4 sig, bytes data);\\n\\n    modifier runProtection() {\\n        RunProtection storage protection = run_protection_info[msg.sig];\\n        bytes32 data_hash = keccak256(msg.data);\\n        if(data_hash != protection.data_hash || protection.sender != msg.sender) {\\n        protection.sender = msg.sender;\\n        protection.data_hash = keccak256(msg.data);\\n            protection.request_timestamp = uint64(block.timestamp);\\n            protection.executed = false;\\n            emit Request_Update(msg.sig, msg.data);\\n            return;\\n        }\\n        require(protection.executed == false, \\\"Already executed\\\");\\n        require(block.timestamp >= uint(protection.request_timestamp) + 2 days, \\\"Running is Locked\\\");\\n        _;\\n        protection.executed = true;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"colony_external_key\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tx_tax\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"colony_policy_link\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"colony_policy_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mother_colony_external_key\",\"type\":\"address\"}],\"name\":\"Register_Colony\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Request_Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"}],\"name\":\"Set_Colony_Address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"old_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"new_admin\",\"type\":\"address\"}],\"name\":\"Set_Jax_Admin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jax_corp_dao_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tx_tax\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policy_link\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"policy_hash\",\"type\":\"bytes32\"}],\"name\":\"Set_Jax_Corp_Dao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min_tx_tax\",\"type\":\"uint256\"}],\"name\":\"Set_Min_Transaction_Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOwnerLocktime\",\"type\":\"uint256\"}],\"name\":\"Set_New_Owner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ubi_tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ubi_tax_wallet\",\"type\":\"address\"}],\"name\":\"Set_Ubi_Tax\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getColony\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"level\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"transaction_tax\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"_policy_hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_policy_link\",\"type\":\"string\"}],\"internalType\":\"struct IJaxPlanet.Colony\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMotherColonyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserColonyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jaxAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jaxAdmin\",\"outputs\":[{\"internalType\":\"contract IJaxAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jaxcorp_dao_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_transaction_tax\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"new_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"new_owner_locktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tx_tax\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"colony_policy_link\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"colony_policy_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"mother_colony_external_key\",\"type\":\"address\"}],\"name\":\"registerColony\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"}],\"name\":\"setColonyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newJaxAdmin\",\"type\":\"address\"}],\"name\":\"setJaxAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jaxCorpDao_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tx_tax\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"policy_link\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"policy_hash\",\"type\":\"bytes32\"}],\"name\":\"setJaxCorpDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"min_tx_tax\",\"type\":\"uint128\"}],\"name\":\"setMinTransactionTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ubi_tax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setUbiTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ubi_tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ubi_tax_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JaxPlanet", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}