{"status": "1", "message": "OK", "result": [{"SourceCode": "// Cosmic Kiss Bridge\r\n// https://cosmickiss.io/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract CosmicBridgeETH {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public tax;\r\n    address public relayer;\r\n    address public operator;\r\n    uint256 public minAmount;\r\n    mapping(address => mapping(uint => bool)) public processedNonces;\r\n\r\n    enum State { Deposit, Withdraw }\r\n    \r\n    event Transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint date,\r\n        uint256 nonce,\r\n        bytes signature,\r\n        State indexed state\r\n    );\r\n\r\n    constructor(address _relayer,uint256 _tax,uint256 _minAmount) {\r\n        minAmount = _minAmount;\r\n        operator = msg.sender;\r\n        tax = _tax;\r\n        relayer = _relayer;\r\n    }\r\n\r\n\r\n\r\nfunction transferOperator(address newOperator) public returns(bool){\r\n        require(msg.sender==operator,\"only owner can call this function\");\r\n        operator = newOperator;        \r\n        return true;\r\n    }\r\n    function updateRelayer(address newRelayer) public returns(bool) {\r\n        require(msg.sender==operator,\"only owner can call this function\");\r\n        relayer = newRelayer;        \r\n        return true;\r\n    }\r\n    function updateTax(uint256 newTax) public returns(bool) {\r\n        require(msg.sender==operator,\"only owner can call this function\");\r\n        tax = newTax;\r\n        return true;\r\n    }\r\n\r\n  function updateMinAmount(uint256 newMinAmount) public returns(bool) {\r\n        require(msg.sender==operator,\"only owner can call this function\");\r\n        minAmount = newMinAmount;\r\n        return true;\r\n    }\r\n    \r\n  function deposit(address to, uint amount, uint nonce, bytes calldata signature) external payable {\r\n    require(msg.value>=minAmount,\"insufficient amount\");\r\n    require(processedNonces[msg.sender][nonce] == false, 'transfer already processed');\r\n    require(msg.value>=amount,\"insufficient amount\");\r\n    processedNonces[msg.sender][nonce] = true;\r\n        \r\n    emit Transfer(\r\n      msg.sender,\r\n      to,\r\n      amount,\r\n      block.timestamp,\r\n      nonce,\r\n      signature,\r\n      State.Deposit\r\n    );\r\n  }\r\n\r\n  function processedNonceses(address[] memory addresses,uint256[] memory nonces) public view returns(bool[] memory){\r\n    bool[] memory toReturn = new bool[](addresses.length);\r\n\r\n    if(addresses.length==nonces.length){\r\n      for(uint256 i=0;i<nonces.length;i++){\r\n        toReturn[i]= processedNonces[addresses[i]][nonces[i]]; \r\n      }\r\n    }\r\n    return toReturn;    \r\n  }\r\n\r\n\r\n\r\n  function withdraw(\r\n        address from, \r\n        address payable to, \r\n        uint256 amount, \r\n        uint nonce,\r\n        bytes calldata signature,\r\n        uint256 _gas\r\n    ) external {\r\n      \r\n        require(msg.sender==relayer,\"Only relayer can call this function\");\r\n        uint256 _tax = amount.mul(tax).div(10000);\r\n        require((amount.sub(_tax).sub(_gas))>0,\"wrong amount\");\r\n        require(processedNonces[from][nonce] == false, 'transfer already processed');\r\n        bytes32 message = prefixed(keccak256(abi.encodePacked(\r\n            from, \r\n            to, \r\n            amount,\r\n            nonce\r\n        )));\r\n        require(recoverSigner(message, signature) == from , 'wrong signature');\r\n        require(address(this).balance>amount,\"insufficient balance\");\r\n        processedNonces[from][nonce] = true;\r\n\r\n        to.transfer(amount.sub(_tax).sub(_gas));\r\n\r\n        emit Transfer(\r\n            from,\r\n            to,\r\n            amount,\r\n            block.timestamp,\r\n            nonce,\r\n            signature,\r\n            State.Withdraw\r\n        );    \r\n    }\r\n\r\n    function addFunds() public payable {} \r\n\r\n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\r\n      '\\x19Ethereum Signed Message:\\n32', \r\n      hash\r\n    ));\r\n  }\r\n\r\n  function recoverSigner(bytes32 message, bytes memory sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n  \r\n    (v, r, s) = splitSignature(sig);\r\n  \r\n    return ecrecover(message, v, r, s);\r\n  }\r\n\r\n  function splitSignature(bytes memory sig)\r\n    internal\r\n    pure\r\n    returns (uint8, bytes32, bytes32)\r\n  {\r\n    require(sig.length == 65);\r\n  \r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n  \r\n    assembly {\r\n        // first 32 bytes, after the length prefix\r\n        r := mload(add(sig, 32))\r\n        // second 32 bytes\r\n        s := mload(add(sig, 64))\r\n        // final byte (first byte of the next 32 bytes)\r\n        v := byte(0, mload(add(sig, 96)))\r\n    }\r\n  \r\n    return (v, r, s);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum CosmicBridgeETH.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"processedNonceses\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRelayer\",\"type\":\"address\"}],\"name\":\"updateRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CosmicBridgeETH", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000471253e4233b4095eafc802074d7f92d0aa449b700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f5611d3dd8126c912941bbb77810a4b5205615ca4ace13006c8de9a6baf51050"}]}