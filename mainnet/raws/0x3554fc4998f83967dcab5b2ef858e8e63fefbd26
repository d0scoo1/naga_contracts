{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDFV {\r\n    function deposit(uint256 numberRLP, uint256 numberDELTA) external;\r\n    function addNewRewards(uint256 amountDELTA, uint256 amountWETH) external;\r\n}\r\n\r\ncontract StableYield {\r\n\r\n    address constant DEV_ADDRESS = 0x5A16552f59ea34E44ec81E58b3817833E9fD5436;\r\n    IERC20 constant DELTA = IERC20(0x9EA3b5b4EC044b70375236A281986106457b20EF);\r\n    address constant DFV_ADDRESS = 0x9fE9Bb6B66958f2271C4B0aD23F6E8DDA8C221BE;\r\n    IDFV constant DFV = IDFV(DFV_ADDRESS);\r\n\r\n    address public dao_address;\r\n\r\n    modifier onlyDev() {\r\n        require(msg.sender == DEV_ADDRESS || msg.sender == dao_address, \"Nope\");\r\n        _;\r\n    }\r\n\r\n    uint256 weeklyDELTAToSend;\r\n    uint256 lastDistributionTime;\r\n    bool enabled;\r\n    uint256 constant MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant SECONDS_PER_WEEK = 604800;\r\n\r\n    uint256 weeklyTip; // Amount of DELTA you get per block for calling distribute()\r\n\r\n    constructor() {\r\n        lastDistributionTime = 1645115480;\r\n        dao_address = msg.sender;\r\n    }\r\n\r\n    function setDAO(address _dao_address) public onlyDev {\r\n        dao_address = _dao_address;\r\n    }\r\n\r\n    function enableWithDefaults() external onlyDev {\r\n        enable(25000e18, 20e18);\r\n    }\r\n\r\n    function enable(uint256 weeklyAmount, uint256 weeklyIncentiveAmount) public onlyDev {\r\n        weeklyDELTAToSend = weeklyAmount;\r\n        weeklyTip = weeklyIncentiveAmount;\r\n        enabled = true;\r\n    }\r\n    function approveDFV() external {\r\n        DELTA.approve(DFV_ADDRESS, MAX_INT);\r\n    }\r\n    function disable() external onlyDev {\r\n        enabled = false;\r\n    }\r\n\r\n    function distribute() external {\r\n        require(block.timestamp > lastDistributionTime + 120, \"Too soon\");\r\n        require(enabled, \"Distributions disabled\");\r\n        uint256 timeDelta = block.timestamp - lastDistributionTime;\r\n        if(timeDelta >= SECONDS_PER_WEEK) {\r\n            // Capped at one week worth of rewards per distribution. Better call it :o\r\n            timeDelta = SECONDS_PER_WEEK;\r\n        }\r\n        uint256 percentageOfAWeekPassede4 = (timeDelta * 1e4) / SECONDS_PER_WEEK;\r\n        uint256 distribution = (weeklyDELTAToSend * percentageOfAWeekPassede4) / 1e4;\r\n        uint256 tip = (weeklyTip * percentageOfAWeekPassede4) / 1e4;\r\n        require(distribution > 0);\r\n        \r\n        DFV.addNewRewards(distribution, 0);\r\n        DELTA.transfer(msg.sender, tip);\r\n        DFV.deposit(0,1);\r\n        lastDistributionTime = block.timestamp;\r\n    }\r\n\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external virtual onlyDev {\r\n        IERC20(tokenAddress).transfer(DEV_ADDRESS, tokenAmount);\r\n    }\r\n\r\n    function die(uint256 nofuckery) external onlyDev payable {\r\n        require(nofuckery==175, \"Oooops\");\r\n        selfdestruct(payable(DEV_ADDRESS));\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"approveDFV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nofuckery\",\"type\":\"uint256\"}],\"name\":\"die\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weeklyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weeklyIncentiveAmount\",\"type\":\"uint256\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWithDefaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao_address\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StableYield", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce1cb1c4abaf093a22b9903a4d5c028e501cf4d98d6e895acd9177aba98fe478"}]}