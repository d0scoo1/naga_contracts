{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ClaimFeesHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport { IFeeDistributor } from \\\"./mocks/balancer/MockFeeDistro.sol\\\";\\n\\ninterface IBooster {\\n    function earmarkFees(address _feeDistro) external returns (bool);\\n}\\n\\n/**\\n * @title   ClaimFeesHelper\\n * @author  ConvexFinance\\n * @notice  Claim vecrv fees and distribute\\n * @dev     Allows anyone to call `claimFees` that will basically collect any 3crv and distribute to cvxCrv\\n *          via the booster.\\n */\\ncontract ClaimFeesHelper {\\n    IBooster public immutable booster;\\n    address public immutable voterProxy;\\n\\n    mapping(address => uint256) public lastTokenTimes;\\n    IFeeDistributor public feeDistro;\\n\\n    /**\\n     * @param _booster      Booster.sol, e.g. 0xF403C135812408BFbE8713b5A23a04b3D48AAE31\\n     * @param _voterProxy   CVX VoterProxy e.g. 0x989AEb4d175e16225E39E87d0D97A3360524AD80\\n     * @param _feeDistro    FeeDistro e.g. 0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc\\n     */\\n    constructor(\\n        address _booster,\\n        address _voterProxy,\\n        address _feeDistro\\n    ) {\\n        booster = IBooster(_booster);\\n        voterProxy = _voterProxy;\\n        feeDistro = IFeeDistributor(_feeDistro);\\n    }\\n\\n    /**\\n     * @dev Claims fees from fee claimer, and pings the booster to distribute\\n     */\\n    function claimFees(IERC20 _token) external {\\n        uint256 tokenTime = feeDistro.getTokenTimeCursor(_token);\\n        require(tokenTime > lastTokenTimes[address(_token)], \\\"not time yet\\\");\\n\\n        uint256 bal = IERC20(_token).balanceOf(voterProxy);\\n        feeDistro.claimToken(voterProxy, _token);\\n\\n        // Loop through until something is transferred\\n        while (IERC20(_token).balanceOf(voterProxy) <= bal) {\\n            feeDistro.claimToken(voterProxy, _token);\\n        }\\n\\n        booster.earmarkFees(address(_token));\\n        lastTokenTimes[address(_token)] = tokenTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/balancer/MockFeeDistro.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeeDistributor {\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n\\n    function getTokenTimeCursor(IERC20 token) external view returns (uint256);\\n}\\n\\n// @dev - Must be funded by transferring crv to this contract post deployment, as opposed to minting directly\\ncontract MockFeeDistributor is IFeeDistributor {\\n    mapping(address => uint256) private tokenRates;\\n\\n    constructor(address[] memory _tokens, uint256[] memory _rates) {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokenRates[_tokens[i]] = _rates[i];\\n        }\\n    }\\n\\n    function claimToken(address user, IERC20 token) external returns (uint256) {\\n        return _claimToken(user, token);\\n    }\\n\\n    function _claimToken(address user, IERC20 token) internal returns (uint256) {\\n        uint256 rate = tokenRates[address(token)];\\n        if (rate > 0) {\\n            token.transfer(user, rate);\\n        }\\n        return rate;\\n    }\\n\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory) {\\n        uint256[] memory rates = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            rates[i] = _claimToken(user, tokens[i]);\\n        }\\n        return rates;\\n    }\\n\\n    function getTokenTimeCursor(\\n        IERC20 /* token */\\n    ) external pure returns (uint256) {\\n        return 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voterProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistro\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistro\",\"outputs\":[{\"internalType\":\"contract IFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTokenTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClaimFeesHelper", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000007818a1da7bd1e64c199029e86ba244a9798eee10000000000000000000000000af52695e1bb01a16d33d7194c28c42b10e0dbec200000000000000000000000026743984e3357efc59f2fd6c1afdc310335a61c9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}