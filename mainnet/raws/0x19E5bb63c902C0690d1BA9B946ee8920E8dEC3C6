{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n   Find us on Twitter https://twitter.com/JPEGMorganCap\r\n   https://jpegmorgan.capital/\r\n   https://t.me/jpegmorgan\r\n\r\n   A labor of love for @sodefi from Misa. \r\n   WGMI\r\n    \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.10 >=0.8.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n   \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract jpegMorgan is Ownable, IERC20 {\r\n    address UNISWAPROUTER = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string private _name = \"JPEG MORGAN\";\r\n    string private _symbol = \"JPG\";\r\n\r\n    uint256 public jpgBankFee = 800;\r\n    uint256 private previousJPGBankFee = jpgBankFee;\r\n\r\n    uint256 public liquidityFee = 200;\r\n    uint256 private previousLiquidityFee = liquidityFee;\r\n\r\n    uint256 public dividendFee = 300;\r\n    uint256 private previousDividendFee = dividendFee;\r\n\r\n    uint256 public totalFee = 1300;\r\n    uint256 private previousTotalFee = totalFee;\r\n\r\n    uint256 public swapTokensAtAmount = 1000 * 1e18;\r\n    uint256 public lastSwapTime;\r\n    bool swapAllToken = true;\r\n\r\n    bool public misa = true;\r\n    bool public taxEnabled = true; //check\r\n    bool public compoundingEnabled = false;\r\n\r\n    bool private boughtEarly = true; //added\r\n    mapping(address => uint256) private _lastTrans;\r\n    uint256 private _firstBlock;\r\n    uint256 private _botBlocks;\r\n    bool public timeRugEnabled = true;\r\n\r\n    uint256 private _totalSupply;\r\n    bool private swapping;\r\n\r\n    address payable jpgBankWallet;\r\n    address payable liquidityWallet;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => bool) private _whiteList;\r\n    mapping(address => bool) isBlacklisted;\r\n    mapping (address => bool) private snipe; //added\r\n\r\n\r\n    event SwapAndAddLiquidity(\r\n        uint256 tokensSwapped,\r\n        uint256 nativeReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event Misa(bool enabled);\r\n    event TaxEnabled(bool enabled);\r\n    event CompoundingEnabled(bool enabled);\r\n    event BlacklistEnabled(bool enabled);\r\n    event EndedBoughtEarly(bool boughtEarly); //added\r\n\r\n\r\n    DividendTracker public dividendTracker;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    uint256 public maxTx = 9991 * 1e18;\r\n    uint256 public maxWallet = 50000 * 1e18;\r\n\r\n    bool isOpen = false;\r\n\r\n    mapping(address => bool) private _isExcludedFromMaxTx;\r\n    mapping(address => bool) private _isExcludedFromMaxWallet;\r\n\r\n    constructor(\r\n        address payable _jpgBankWallet,\r\n        address[] memory whitelistAddress\r\n    ) {\r\n        jpgBankWallet = _jpgBankWallet;\r\n        liquidityWallet = payable(0x0B9d6b075e2e8816545d8b24e4651F4C8643f234); \r\n        includeToWhiteList(whitelistAddress);\r\n\r\n        dividendTracker = new DividendTracker(address(this), UNISWAPROUTER);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\r\n\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        dividendTracker.excludeFromDividends(address(dividendTracker), true);\r\n        dividendTracker.excludeFromDividends(address(this), true);\r\n        dividendTracker.excludeFromDividends(owner(), true);\r\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router), true);\r\n\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(dividendTracker), true);\r\n        excludeFromFees(address(jpgBankWallet), true);\r\n\r\n\r\n        excludeFromMaxTx(owner(), true);\r\n        excludeFromMaxTx(address(this), true);\r\n        excludeFromMaxTx(address(dividendTracker), true);\r\n        excludeFromMaxTx(address(jpgBankWallet), true);\r\n        excludeFromMaxTx(address(liquidityWallet), true);\r\n\r\n\r\n        excludeFromMaxWallet(owner(), true);\r\n        excludeFromMaxWallet(address(this), true);\r\n        excludeFromMaxWallet(address(dividendTracker), true);\r\n        excludeFromMaxWallet(address(jpgBankWallet), true);\r\n        excludeFromMaxWallet(address(liquidityWallet), true);\r\n\r\n        _mint(owner(), 10000000 * 1e18); // 10,000,000\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"JPG: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"JPG: transfer amount exceeds allowance\"\r\n        );\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function partyBegins(uint256 botBlocks) private {\r\n        _firstBlock = block.number;\r\n        _botBlocks = botBlocks;\r\n    }\r\n\r\n    function addFizz(uint256 botBlocks) external onlyOwner {\r\n        require(botBlocks < 1, \"don't catch humans\");\r\n        isOpen = true;\r\n        require(boughtEarly == true, \"done\");\r\n        boughtEarly = false;\r\n        partyBegins(botBlocks);\r\n        emit EndedBoughtEarly(boughtEarly);\r\n    }\r\n\r\n    function setSnipeFee() private {\r\n        previousJPGBankFee = jpgBankFee;\r\n        previousLiquidityFee = liquidityFee;\r\n        previousDividendFee = dividendFee;\r\n        previousTotalFee = totalFee;\r\n        \r\n        jpgBankFee = 9000; // block 0\r\n        liquidityFee = 0; // divided by 10000\r\n        dividendFee = 0;\r\n        totalFee = 9000; //snipers get rekt\r\n    }\r\n\r\n    function removeFee() private {\r\n        previousJPGBankFee = jpgBankFee;\r\n        previousLiquidityFee = liquidityFee;\r\n        previousDividendFee = dividendFee;\r\n        previousTotalFee = totalFee;\r\n\r\n        jpgBankFee = 0; // removes fees for transfers\r\n        liquidityFee = 0; // and those excluded from taxes\r\n        dividendFee = 0; // divided by 10000\r\n        totalFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        jpgBankFee = previousJPGBankFee;\r\n        liquidityFee = previousLiquidityFee;\r\n        dividendFee = previousDividendFee;\r\n        totalFee = previousTotalFee;\r\n    }\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTimeRug() external onlyOwner returns (bool){\r\n        timeRugEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(\r\n            isOpen ||\r\n                sender == owner() ||\r\n                recipient == owner() ||\r\n                _whiteList[sender] ||\r\n                _whiteList[recipient],\r\n            \"Not Open\"\r\n        );\r\n\r\n        require(!isBlacklisted[sender], \"JPG: Sender is blacklisted\");\r\n        require(!isBlacklisted[recipient], \"JPG: Recipient is blacklisted\");\r\n\r\n        require(sender != address(0), \"JPG: transfer from the zero address\");\r\n        require(recipient != address(0), \"JPG: transfer to the zero address\");\r\n\r\n        uint256 _maxTxAmount = maxTx;\r\n        uint256 _maxWallet = maxWallet;\r\n        require(\r\n            amount <= _maxTxAmount || _isExcludedFromMaxTx[sender],\r\n            \"TX Limit Exceeded\"\r\n        );\r\n\r\n        if (\r\n                sender != owner() &&\r\n                recipient != owner() &&\r\n                recipient != address(0) &&\r\n                recipient != address(0xdead) &&\r\n                !swapping\r\n            ){\r\n                if (sender == uniswapV2Pair && sender != address(uniswapV2Router)) {\r\n                \r\n                    if (block.number <= _firstBlock + (_botBlocks)) {\r\n                        snipe[recipient] = true;\r\n                    }                        \r\n\r\n                }\r\n\r\n                if (timeRugEnabled){\r\n                    if (recipient != owner() && recipient != address(uniswapV2Router) && recipient != address(uniswapV2Pair)){\r\n                        require(_lastTrans[tx.origin] < block.number, \"One buy per block allowed.\");\r\n                        _lastTrans[tx.origin] = block.number;\r\n                    }\r\n                }\r\n        }\r\n\r\n        if (\r\n            sender != owner() &&\r\n            recipient != address(this) &&\r\n            recipient != address(DEAD) &&\r\n            recipient != uniswapV2Pair\r\n         ) {\r\n            uint256 currentBalance = balanceOf(recipient);\r\n            require(\r\n                _isExcludedFromMaxWallet[recipient] ||\r\n                    (currentBalance + amount <= _maxWallet)\r\n            );\r\n        }\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"JPG: transfer amount exceeds balance\"\r\n        );\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 contractNativeBalance = address(this).balance;\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            misa && // True\r\n            canSwap && // true\r\n            !swapping && // swapping=false !false true\r\n            !automatedMarketMakerPairs[sender] && // no swap on remove liquidity step 1 or DEX buy\r\n            sender != address(uniswapV2Router) && // no swap on remove liquidity step 2\r\n            sender != owner() &&\r\n            recipient != owner()\r\n         ) {\r\n            swapping = true;\r\n\r\n            if (!swapAllToken) {\r\n                contractTokenBalance = swapTokensAtAmount;\r\n            }\r\n            _executeSwap(contractTokenBalance, contractNativeBalance);\r\n\r\n            lastSwapTime = block.timestamp;\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (sender == address(uniswapV2Pair)) { //buy\r\n            takeFee = true;\r\n        }\r\n\r\n        if (recipient == address(uniswapV2Pair)) { //sell\r\n            takeFee = true;\r\n        }\r\n\r\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (swapping || !taxEnabled) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n\r\n        if (takeFee && snipe[recipient]) {\r\n            setSnipeFee();\r\n            fees = (amount * totalFee) / 10000;\r\n            amount -= fees;\r\n            _executeTransfer(sender, address(this), fees);\r\n        }\r\n\r\n        if(takeFee && !snipe[recipient]){\r\n            fees = (amount * totalFee) / 10000;\r\n            amount -= fees;\r\n            _executeTransfer(sender, address(this), fees);\r\n        }\r\n\r\n        _executeTransfer(sender, recipient, amount);\r\n\r\n        dividendTracker.setBalance(payable(sender), balanceOf(sender));\r\n        dividendTracker.setBalance(payable(recipient), balanceOf(recipient));\r\n\r\n        restoreAllFee();\r\n    }\r\n\r\n    function _executeTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(sender != address(0), \"JPG: transfer from the zero address\");\r\n        require(recipient != address(0), \"JPG: transfer to the zero address\");\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"JPG: transfer amount exceeds balance\"\r\n        );\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"JPG: approve from the zero address\");\r\n        require(spender != address(0), \"JPG: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n        require(account != address(0), \"JPG: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) private {\r\n        require(account != address(0), \"JPG: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"JPG: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function swapTokensForNative(uint256 tokens) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokens);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokens,\r\n            0, // accept any amount of native\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokens, uint256 native) private {\r\n        _approve(address(this), address(uniswapV2Router), tokens);\r\n        uniswapV2Router.addLiquidityETH{value: native}(\r\n            address(this),\r\n            tokens,\r\n            0, // slippage unavoidable\r\n            0, // slippage unavoidable\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function includeToWhiteList(address[] memory _users) private {\r\n        for (uint8 i = 0; i < _users.length; i++) {\r\n            _whiteList[_users[i]] = true;\r\n        }\r\n    }\r\n\r\n    function _executeSwap(uint256 tokens, uint256 native) private {\r\n        if (tokens <= 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 swapTokensMarketing;\r\n        if (address(jpgBankWallet) != address(0)) {\r\n            swapTokensMarketing = (tokens * jpgBankFee) / totalFee;\r\n        }\r\n\r\n        uint256 swapTokensDividends;\r\n        if (dividendTracker.totalSupply() > 0) {\r\n            swapTokensDividends = (tokens * dividendFee) / totalFee;\r\n        }\r\n\r\n        uint256 tokensForLiquidity = tokens -\r\n            swapTokensMarketing -\r\n            swapTokensDividends;\r\n        uint256 swapTokensLiquidity = tokensForLiquidity / 2;\r\n        uint256 addTokensLiquidity = tokensForLiquidity - swapTokensLiquidity;\r\n        uint256 swapTokensTotal = swapTokensMarketing +\r\n            swapTokensDividends +\r\n            swapTokensLiquidity;\r\n\r\n        uint256 initNativeBal = address(this).balance;\r\n        swapTokensForNative(swapTokensTotal);\r\n        uint256 nativeSwapped = (address(this).balance - initNativeBal) +\r\n            native;\r\n\r\n        uint256 nativeMarketing = (nativeSwapped * swapTokensMarketing) /\r\n            swapTokensTotal;\r\n        uint256 nativeDividends = (nativeSwapped * swapTokensDividends) /\r\n            swapTokensTotal;\r\n        uint256 nativeLiquidity = nativeSwapped -\r\n            nativeMarketing -\r\n            nativeDividends;\r\n\r\n        if (nativeMarketing > 0) {\r\n            payable(jpgBankWallet).transfer(nativeMarketing);\r\n        }\r\n\r\n        addLiquidity(addTokensLiquidity, nativeLiquidity);\r\n        emit SwapAndAddLiquidity(\r\n            swapTokensLiquidity,\r\n            nativeLiquidity,\r\n            addTokensLiquidity\r\n        );\r\n\r\n        if (nativeDividends > 0) {\r\n            (bool success, ) = address(dividendTracker).call{\r\n                value: nativeDividends\r\n            }(\"\");\r\n            if (success) {\r\n                emit SendDividends(swapTokensDividends, nativeDividends);\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"JPG: account is already set to requested state\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function manualSendDividend(uint256 amount, address holder)\r\n        external\r\n        onlyOwner\r\n    {\r\n        dividendTracker.manualSendDividend(amount, holder);\r\n    }\r\n\r\n    function excludeFromDividends(address account, bool excluded)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dividendTracker.excludeFromDividends(account, excluded);\r\n    }\r\n\r\n    function isExcludedFromDividends(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return dividendTracker.isExcludedFromDividends(account);\r\n    }\r\n\r\n    function setWallet(\r\n        address payable _jpgBankWallet,\r\n        address payable _liquidityWallet\r\n    ) external onlyOwner {\r\n        jpgBankWallet = _jpgBankWallet;\r\n        liquidityWallet = _liquidityWallet;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(pair != uniswapV2Pair, \"JPG: DEX pair can not be removed\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function setFee(\r\n        uint256 _treasuryFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _dividendFee\r\n    ) external onlyOwner {\r\n        jpgBankFee = _treasuryFee;\r\n        liquidityFee = _liquidityFee;\r\n        dividendFee = _dividendFee;\r\n        totalFee = _treasuryFee + _liquidityFee + _dividendFee;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"JPG: automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair, true);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(\r\n            newAddress != address(uniswapV2Router),\r\n            \"JPG: the router is already set to the new address\"\r\n        );\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n    }\r\n\r\n    function claim() public {\r\n        dividendTracker.processAccount(payable(_msgSender()));\r\n    }\r\n\r\n    function compound() public {\r\n        require(compoundingEnabled, \"JPG: compounding is not enabled\");\r\n        dividendTracker.compoundAccount(payable(_msgSender()));\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function withdrawnDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawnDividendOf(account);\r\n    }\r\n\r\n    function accumulativeDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.accumulativeDividendOf(account);\r\n    }\r\n\r\n    function getAccountInfo(address account)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return dividendTracker.getAccountInfo(account);\r\n    }\r\n\r\n    function getLastClaimTime(address account) public view returns (uint256) {\r\n        return dividendTracker.getLastClaimTime(account);\r\n    }\r\n\r\n    function setMisa(bool _enabled) external onlyOwner {\r\n        misa = _enabled;\r\n        emit Misa(_enabled);\r\n    }\r\n\r\n    function setTaxEnabled(bool _enabled) external onlyOwner {\r\n        taxEnabled = _enabled;\r\n        emit TaxEnabled(_enabled);\r\n    }\r\n\r\n    function setCompoundingEnabled(bool _enabled) external onlyOwner {\r\n        compoundingEnabled = _enabled;\r\n        emit CompoundingEnabled(_enabled);\r\n    }\r\n\r\n    function updateDividendSettings(\r\n        bool _misa,\r\n        uint256 _swapTokensAtAmount,\r\n        bool _swapAllToken\r\n    ) external onlyOwner {\r\n        misa = _misa;\r\n        swapTokensAtAmount = _swapTokensAtAmount;\r\n        swapAllToken = _swapAllToken;\r\n    }\r\n\r\n    function setMaxTx(uint256 amount) external onlyOwner {\r\n        maxTx = amount;\r\n    }\r\n\r\n    function excludeFromMaxTx(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromMaxTx[account] = excluded;\r\n    }\r\n\r\n    function isExcludedFromMaxTx(address account) public view returns (bool) {\r\n        return _isExcludedFromMaxTx[account];\r\n    }\r\n\r\n    function setMaxWallet(uint256 amount) external onlyOwner {\r\n        maxWallet = amount;\r\n    }\r\n\r\n    function excludeFromMaxWallet(address account, bool excluded)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromMaxWallet[account] = excluded;\r\n    }\r\n\r\n    function isExcludedFromMaxWallet(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromMaxWallet[account];\r\n    }\r\n\r\n    function rescueToken(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function rescueETH(uint256 _amount) external onlyOwner {\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    function blackList(address _user) public onlyOwner {\r\n        require(!isBlacklisted[_user], \"user already blacklisted\");\r\n        isBlacklisted[_user] = true;\r\n        // events?\r\n    }\r\n\r\n    function removeFromBlacklist(address _user) public onlyOwner {\r\n        require(isBlacklisted[_user], \"user already whitelisted\");\r\n        isBlacklisted[_user] = false;\r\n        //events?\r\n    }\r\n\r\n    function openTrading(address[] memory _users) public onlyOwner {\r\n        for (uint8 i = 0; i < _users.length; i++) {\r\n            isBlacklisted[_users[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unBlackListMany(address[] memory _users) public onlyOwner {\r\n        for (uint8 i = 0; i < _users.length; i++) {\r\n            isBlacklisted[_users[i]] = false;\r\n        }\r\n    }\r\n\r\n    function airdrop(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner {\r\n        require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop\r\n        for(uint256 i = 0; i < airdropWallets.length; i++){\r\n            address wallet = airdropWallets[i];\r\n            uint256 amount = amounts[i];\r\n            _transfer(msg.sender, wallet, amount);\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\ncontract DividendTracker is Ownable, IERC20 {\r\n    address UNISWAPROUTER;\r\n\r\n    string private _name = \"JPG_DividendTracker\";\r\n    string private _symbol = \"JPG_DT\";\r\n\r\n    uint256 public lastProcessedIndex;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    uint256 private constant magnitude = 2**128;\r\n    uint256 public immutable minTokenBalanceForDividends;\r\n    uint256 private magnifiedDividendPerShare;\r\n    uint256 public totalDividendsDistributed;\r\n    uint256 public totalDividendsWithdrawn;\r\n\r\n    address public tokenAddress;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n    mapping(address => int256) private magnifiedDividendCorrections;\r\n    mapping(address => uint256) private withdrawnDividends;\r\n    mapping(address => uint256) private lastClaimTimes;\r\n\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n    event ExcludeFromDividends(address indexed account, bool excluded);\r\n    event Claim(address indexed account, uint256 amount);\r\n    event Compound(address indexed account, uint256 amount, uint256 tokens);\r\n\r\n    struct AccountInfo {\r\n        address account;\r\n        uint256 withdrawableDividends;\r\n        uint256 totalDividends;\r\n        uint256 lastClaimTime;\r\n    }\r\n\r\n    constructor(address _tokenAddress, address _uniswapRouter) {\r\n        minTokenBalanceForDividends = 100 * (1e18);\r\n        tokenAddress = _tokenAddress;\r\n        UNISWAPROUTER = _uniswapRouter;\r\n    }\r\n\r\n    receive() external payable {\r\n        distributeDividends();\r\n    }\r\n\r\n    function distributeDividends() public payable {\r\n        require(_totalSupply > 0);\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare =\r\n                magnifiedDividendPerShare +\r\n                ((msg.value * magnitude) / _totalSupply);\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n            totalDividendsDistributed += msg.value;\r\n        }\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n        if (newBalance >= minTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n        } else {\r\n            _setBalance(account, 0);\r\n        }\r\n    }\r\n\r\n    function excludeFromDividends(address account, bool excluded)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            excludedFromDividends[account] != excluded,\r\n            \"JPG_DividendTracker: account already set to requested state\"\r\n        );\r\n        excludedFromDividends[account] = excluded;\r\n        if (excluded) {\r\n            _setBalance(account, 0);\r\n        } else {\r\n            uint256 newBalance = IERC20(tokenAddress).balanceOf(account);\r\n            if (newBalance >= minTokenBalanceForDividends) {\r\n                _setBalance(account, newBalance);\r\n            } else {\r\n                _setBalance(account, 0);\r\n            }\r\n        }\r\n        emit ExcludeFromDividends(account, excluded);\r\n    }\r\n\r\n    function isExcludedFromDividends(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return excludedFromDividends[account];\r\n    }\r\n\r\n    function manualSendDividend(uint256 amount, address holder)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(holder).transfer(amount > 0 ? amount : contractETHBalance);\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = _balances[account];\r\n        if (newBalance > currentBalance) {\r\n            uint256 addAmount = newBalance - currentBalance;\r\n            _mint(account, addAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 subAmount = currentBalance - newBalance;\r\n            _burn(account, subAmount);\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n        require(\r\n            account != address(0),\r\n            \"JPG_DividendTracker: mint to the zero address\"\r\n        );\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        magnifiedDividendCorrections[account] =\r\n            magnifiedDividendCorrections[account] -\r\n            int256(magnifiedDividendPerShare * amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) private {\r\n        require(\r\n            account != address(0),\r\n            \"JPG_DividendTracker: burn from the zero address\"\r\n        );\r\n        uint256 accountBalance = _balances[account];\r\n        require(\r\n            accountBalance >= amount,\r\n            \"JPG_DividendTracker: burn amount exceeds balance\"\r\n        );\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        magnifiedDividendCorrections[account] =\r\n            magnifiedDividendCorrections[account] +\r\n            int256(magnifiedDividendPerShare * amount);\r\n    }\r\n\r\n    function processAccount(address payable account)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable account)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[account] += _withdrawableDividend;\r\n            totalDividendsWithdrawn += _withdrawableDividend;\r\n            emit DividendWithdrawn(account, _withdrawableDividend);\r\n            (bool success, ) = account.call{\r\n                value: _withdrawableDividend,\r\n                gas: 3000\r\n            }(\"\");\r\n            if (!success) {\r\n                withdrawnDividends[account] -= _withdrawableDividend;\r\n                totalDividendsWithdrawn -= _withdrawableDividend;\r\n                return 0;\r\n            }\r\n            return _withdrawableDividend;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function compoundAccount(address payable account)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        (uint256 amount, uint256 tokens) = _compoundDividendOfUser(account);\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Compound(account, amount, tokens);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _compoundDividendOfUser(address payable account)\r\n        private\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[account] += _withdrawableDividend;\r\n            totalDividendsWithdrawn += _withdrawableDividend;\r\n            emit DividendWithdrawn(account, _withdrawableDividend);\r\n\r\n            IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(\r\n                UNISWAPROUTER\r\n            );\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = uniswapV2Router.WETH();\r\n            path[1] = address(tokenAddress);\r\n\r\n            bool success;\r\n            uint256 tokens;\r\n\r\n            uint256 initTokenBal = IERC20(tokenAddress).balanceOf(account);\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                    value: _withdrawableDividend\r\n                }(0, path, address(account), block.timestamp)\r\n            {\r\n                success = true;\r\n                tokens = IERC20(tokenAddress).balanceOf(account) - initTokenBal;\r\n            } catch Error(\r\n                string memory /*err*/\r\n            ) {\r\n                success = false;\r\n            }\r\n\r\n            if (!success) {\r\n                withdrawnDividends[account] -= _withdrawableDividend;\r\n                totalDividendsWithdrawn -= _withdrawableDividend;\r\n                return (0, 0);\r\n            }\r\n\r\n            return (_withdrawableDividend, tokens);\r\n        }\r\n        return (0, 0);\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(account) - withdrawnDividends[account];\r\n    }\r\n\r\n    function withdrawnDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return withdrawnDividends[account];\r\n    }\r\n\r\n    function accumulativeDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        int256 a = int256(magnifiedDividendPerShare * balanceOf(account));\r\n        int256 b = magnifiedDividendCorrections[account]; // this is an explicit int256 (signed)\r\n        return uint256(a + b) / magnitude;\r\n    }\r\n\r\n    function getAccountInfo(address account)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        AccountInfo memory info;\r\n        info.account = account;\r\n        info.withdrawableDividends = withdrawableDividendOf(account);\r\n        info.totalDividends = accumulativeDividendOf(account);\r\n        info.lastClaimTime = lastClaimTimes[account];\r\n        return (\r\n            info.account,\r\n            info.withdrawableDividends,\r\n            info.totalDividends,\r\n            info.lastClaimTime,\r\n            totalDividendsWithdrawn\r\n        );\r\n    }\r\n\r\n    function getLastClaimTime(address account) public view returns (uint256) {\r\n        return lastClaimTimes[account];\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address, uint256) public pure override returns (bool) {\r\n        revert(\"JPG_DividendTracker: method not implemented\");\r\n    }\r\n\r\n    function allowance(address, address)\r\n        public\r\n        pure\r\n        override\r\n        returns (uint256)\r\n    {\r\n        revert(\"JPG_DividendTracker: method not implemented\");\r\n    }\r\n\r\n    function approve(address, uint256) public pure override returns (bool) {\r\n        revert(\"JPG_DividendTracker: method not implemented\");\r\n    }\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public pure override returns (bool) {\r\n        revert(\"JPG_DividendTracker: method not implemented\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_jpgBankWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BlacklistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CompoundingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"boughtEarly\",\"type\":\"bool\"}],\"name\":\"EndedBoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Misa\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botBlocks\",\"type\":\"uint256\"}],\"name\":\"addFizz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTimeRug\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jpgBankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"manualSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"misa\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCompoundingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividendFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setMisa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_jpgBankWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_liquidityWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeRugEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"unBlackListMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_misa\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapAllToken\",\"type\":\"bool\"}],\"name\":\"updateDividendSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "jpegMorgan", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "0000000000000000000000000b9d6b075e2e8816545d8b24e4651f4c8643f234000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000430000000000000000000000003ae7263b9ca36f2da0b393a9b467cc33977e98450000000000000000000000003eece4dd5d965a1836ed264b21a0fc958a3f250c000000000000000000000000c12aa05b77efb47eef8bb6dd6cb453d7fcba6d82000000000000000000000000188b99a92cd32b1c2c68abb7819fdf567ba6075b00000000000000000000000043163cb67b970a0e09df45cacc2092f8da2896950000000000000000000000001a3b19aacc482ca24b0a2eae0689519e8b314d6b0000000000000000000000002d1bdc590cb736097bc5577c8974e28dc48f5ecc000000000000000000000000cf934fe35e63d2c4b0aef93d9c79e831230b7da0000000000000000000000000f0b18e615c6efae670c798d31f90eb1baa4fbbf2000000000000000000000000121d0d7ce5b22a489dac5ec37827c324a251baa40000000000000000000000002b8ab5548b604b1b705449f89169cb44c24a9bac000000000000000000000000a005402cd9f05653af1d717dc56b6155970b2669000000000000000000000000d6d289a73c0804878086f9eb38b7ceaf64c06718000000000000000000000000991ca5c0bb3e4c28ad661798894942a04c659542000000000000000000000000cf0c4401f61902bfff4e91e13fff8384d7cbf0d300000000000000000000000049dd2aef2d93ab30b674e9f380ad781f820872a4000000000000000000000000d1288dede59a193a6d4ad25644adbb4607b0359700000000000000000000000000b4a07c96393ec9b6498d02806aad5729e46dfb0000000000000000000000007291047f830022c5bad74dde960b6f0684752bae000000000000000000000000a2869eae6120c8f6093324cad2b57c2a642420760000000000000000000000005a79be7df93c876860f94c1ae541b12ef3db706f00000000000000000000000070ef6bbaebb7f8d1959cb32d3fbd552ef8866e05000000000000000000000000f8b20b54faa9c9fc6902b00f56085481709264420000000000000000000000003049b83edc77ddae90c709f7677bd6d2dbb821ed0000000000000000000000009e4b9fe607ebd34e1b204649dcd048df8ba8c8f00000000000000000000000007045a0282f1e2a5c6b05bb3e4f2dcb5fe20aa0be0000000000000000000000003d70f058e1d0d367e23de7958cf80d39671e0f900000000000000000000000009773981ec823008d5b213f9ed8cde21d313aab01000000000000000000000000766ac3100341cc2d0a9d3d37457d4b79774c7cca0000000000000000000000004d94ec225f98426ff485c0d9b7863b56f065e7c0000000000000000000000000dc3d84ec0440c505e6487093bcfc18e7f325740d00000000000000000000000085c4b658ae01b9e445cc941a618389475859866800000000000000000000000079ba8f077928db9a56b22fdaad2a68e07697d69c0000000000000000000000000c7d85ca164248eb75e0a762bc7795b18ffa4b44000000000000000000000000916040ad2265e6ba217023d90137a8ff5c74967c00000000000000000000000000c49e922825266a51912bf4dde5dd9798b26f4b0000000000000000000000004f4e622b8c48a1f36c5130b1b401fc595f92a9f8000000000000000000000000880a3769d82d63ee014195b758854d5750bb30ca0000000000000000000000007ec62a083b1391002b91e90dd1e3e9f8881d3d3f000000000000000000000000515ace4ede711e03c90ad145bf67752b0f19a2140000000000000000000000002eb16c0ff5cf5595b82111341642c502d1a169b5000000000000000000000000ec40fac848b199900870a77804a7b50082ffc411000000000000000000000000210670598e5dc384e582c2244c92e3a5748202e9000000000000000000000000fe8b1168fa27a2a7b0228bd30cdf2dd3a991e118000000000000000000000000aec661a58928e60f52976f1886cd27845789d90f000000000000000000000000fbd9123f3ca030632c5fc5948dfebb38b0b115f20000000000000000000000005734fc1f7b8b43d23d8d737dccb4a1ede91915e200000000000000000000000058d5db759585542f5fc3305c20915e9cd06b37ef000000000000000000000000c13068ef06024bbf669b5394d30cc1c511d974990000000000000000000000001ed0a6469382da8af133a5726f3778720fddb996000000000000000000000000024accc7a293adc682ddebab1600402d677badc300000000000000000000000092c8e2011b08d268d80302cd18209f69c0dfa0e600000000000000000000000059c1a1293aac8a343070d6f6368b55215c40abd50000000000000000000000005f6835a4bfbf03f6416f119a97769a737e319fbc0000000000000000000000003672823b30c3d3f86ae3fff253d24475ee4fe4d500000000000000000000000069cc2480f25d69bc28a4ece7729ad9b38b4dbe040000000000000000000000001b89e6d37bd2730db5a6e9c119dbca264f5c3eb3000000000000000000000000f3c5975f4072e3a0e46884a2c6ae7dcfcc0732fb000000000000000000000000bcb5dc467d09d518a0eba0bd968a3ecfb37768c8000000000000000000000000ec91c0ef336a065f7e8b47f34c5fb76942b52de400000000000000000000000005ae0683d8b39d13950c053e70538f5810737bc50000000000000000000000001cb27369c538c47591b19ab1e5ec2fab408724b700000000000000000000000001f9d72f6f3963828c45328f4e09fd4bab9492db00000000000000000000000001f9d72f6f3963828c45328f4e09fd4bab9492db000000000000000000000000ce8f8e677509d5309b16363998c4a945c84a7b280000000000000000000000004abc5b72483590face3940ecfe91ebdda1ad696b000000000000000000000000a053dbafba05e307a7bddede09c7feb235dc34b1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://422535b3226890afc091115ecc241b88d5e2e29a5edd48ded097b179c7703cbe"}]}