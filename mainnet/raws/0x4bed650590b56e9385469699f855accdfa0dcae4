{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b,  \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n       \r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,  \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n* @title interface of ERC 20 token\r\n* \r\n*/\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Propose the new Owner of the smart contract \r\n     */\r\n    function proposeOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept the ownership of the smart contract as a new Owner\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \"Ownable: caller is not the new owner\");\r\n        require(_owner != address(0), \"Ownable: ownership is renounched already\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract DGMVTokenVesting is Ownable{\r\n    \r\n    using SafeMath for uint256; \r\n    \r\n    address public immutable DGMV_TOKEN; // Contract Address of DGMV Token\r\n    \r\n    struct VestedToken{\r\n        uint256 cliff;\r\n        uint256 start;\r\n        uint256 duration;\r\n        uint256 releasedToken;\r\n        uint256 totalToken;\r\n        bool revoked;\r\n    }\r\n    \r\n    mapping (address => VestedToken) public vestedUser; \r\n    event TokenReleased(address indexed account, uint256 amount);\r\n    event VestingRevoked(address indexed account);\r\n    \r\n    constructor (address dgmv_token){\r\n        require(dgmv_token != address(0));\r\n        DGMV_TOKEN = dgmv_token;\r\n    }\r\n  \r\n     /**\r\n     * @dev this will set the beneficiary with vesting \r\n     * parameters provided\r\n     * @param account address of the beneficiary for vesting\r\n     * @param amount  totalToken to be vested\r\n     * @param cliff In seconds of one period in vesting\r\n     * @param duration In seconds of total vesting \r\n     * @param startAt UNIX timestamp in seconds from where vesting will start\r\n     */\r\n     function setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt ) external returns(bool){\r\n         VestedToken storage vested = vestedUser[account];\r\n         if(vested.start > 0){\r\n             require(vested.revoked);\r\n             uint unclaimedTokens = _vestedAmount(account).sub(vested.releasedToken);\r\n             require(unclaimedTokens == 0);\r\n         }\r\n         IERC20(DGMV_TOKEN).transferFrom(_msgSender(), address(this) ,amount);\r\n         _setVesting(account, amount, cliff, duration, startAt);\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param account address of the user\r\n     */\r\n     function vestedToken(address account) external view returns (uint256) {\r\n       return _vestedAmount(account);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param account address of user\r\n     */\r\n     function releasableToken(address account) external view returns (uint256) {\r\n       return _vestedAmount(account).sub(vestedUser[account].releasedToken);\r\n    }\r\n     \r\n     /**\r\n      * @dev Internal function to set default vesting parameters\r\n      * @param account address of the beneficiary for vesting\r\n      * @param amount  totalToken to be vested\r\n      * @param cliff In seconds of one period in vestin\r\n      * @param duration In seconds of total vesting duration\r\n      * @param startAt UNIX timestamp in seconds from where vesting will start\r\n      *\r\n      */\r\n     function _setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt) internal {\r\n         require(account!=address(0));\r\n         require(startAt >= block.timestamp);\r\n         require(cliff<=duration);\r\n         VestedToken storage vested = vestedUser[account];\r\n         vested.cliff = cliff;\r\n         vested.start = startAt;\r\n         vested.duration = duration;\r\n         vested.totalToken = amount;\r\n         vested.releasedToken = 0;\r\n         vested.revoked = false;\r\n     }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * anyone can release their token \r\n     */\r\n    function releaseMyToken() external returns(bool) {\r\n        releaseToken(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n     * @notice Transfers vested tokens to the given account.\r\n     * @param account address of the vested user\r\n     */\r\n    function releaseToken(address account) public {\r\n       require(account != address(0));\r\n       VestedToken storage vested = vestedUser[account];\r\n       uint256 unreleasedToken = _releasableAmount(account);  // total releasable token currently\r\n       require(unreleasedToken>0);\r\n       vested.releasedToken = vested.releasedToken.add(unreleasedToken);\r\n       IERC20(DGMV_TOKEN).transfer(account,unreleasedToken);\r\n       emit TokenReleased(account, unreleasedToken);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param account address of user\r\n     */\r\n    function _releasableAmount(address account) internal view returns (uint256) {\r\n        return _vestedAmount(account).sub(vestedUser[account].releasedToken);\r\n    }\r\n\r\n  \r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param account address of the user\r\n     */\r\n    function _vestedAmount(address account) internal view returns (uint256) {\r\n        VestedToken storage vested = vestedUser[account];\r\n        uint256 totalToken = vested.totalToken;\r\n        if(block.timestamp <  vested.start.add(vested.cliff)){\r\n            return 0;\r\n        }else if(block.timestamp >= vested.start.add(vested.duration) || vested.revoked){\r\n            return totalToken;\r\n        }else{\r\n            uint256 numberOfPeriods = (block.timestamp.sub(vested.start)).div(vested.cliff);\r\n            return totalToken.mul(numberOfPeriods.mul(vested.cliff)).div(vested.duration);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param account address in which the vesting is revoked\r\n     */\r\n    function revoke(address account) external onlyOwner returns(bool) {\r\n        VestedToken storage vested = vestedUser[account];\r\n        require(!vested.revoked);\r\n        uint256 balance = vested.totalToken;\r\n        uint256 vestedAmount = _vestedAmount(account);\r\n        uint256 refund = balance.sub(vestedAmount);\r\n        require(refund > 0);\r\n        vested.revoked = true;\r\n        vested.totalToken = vestedAmount;\r\n        IERC20(DGMV_TOKEN).transfer(owner(), refund);\r\n        emit VestingRevoked(account);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dgmv_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VestingRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DGMV_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DGMVTokenVesting", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008eedefe828a0f16c8fc80e46a87bc0f1de2d960c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://96976b2502c7f6ea733649514130d7a245589ab7fba8107dbb80029b76917e29"}]}