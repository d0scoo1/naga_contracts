{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FieldGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport './interfaces/IFieldGenerator.sol';\\nimport './interfaces/IFieldSVGs.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n/// @dev Generate Field SVG and properties\\ncontract FieldGenerator is IFieldGenerator {\\n    using Strings for uint16;\\n\\n    mapping(uint24 => Color) private _colors;\\n\\n    IFieldSVGs immutable fieldSVGs1;\\n    IFieldSVGs immutable fieldSVGs2;\\n    IFieldSVGs immutable fieldSVGs3;\\n    IFieldSVGs immutable fieldSVGs4;\\n    IFieldSVGs immutable fieldSVGs5;\\n    IFieldSVGs immutable fieldSVGs6;\\n    IFieldSVGs immutable fieldSVGs7;\\n    IFieldSVGs immutable fieldSVGs8;\\n    IFieldSVGs immutable fieldSVGs9;\\n    IFieldSVGs immutable fieldSVGs10;\\n    IFieldSVGs immutable fieldSVGs11;\\n    IFieldSVGs immutable fieldSVGs12;\\n    IFieldSVGs immutable fieldSVGs13;\\n    IFieldSVGs immutable fieldSVGs14;\\n    IFieldSVGs immutable fieldSVGs15;\\n    IFieldSVGs immutable fieldSVGs16;\\n    IFieldSVGs immutable fieldSVGs17;\\n    IFieldSVGs immutable fieldSVGs18;\\n    IFieldSVGs immutable fieldSVGs19;\\n    IFieldSVGs immutable fieldSVGs20;\\n    IFieldSVGs immutable fieldSVGs21;\\n    IFieldSVGs immutable fieldSVGs22;\\n    IFieldSVGs immutable fieldSVGs23;\\n    IFieldSVGs immutable fieldSVGs24;\\n\\n    constructor(\\n        uint24[] memory __colors,\\n        string[] memory titles,\\n        FieldSVGs memory svgs\\n    ) {\\n        require(__colors.length == titles.length, 'invalid array lengths');\\n        for (uint256 i = 0; i < __colors.length; i++) {\\n            require(__colors[i] != 0, 'FieldGenerator: colors cannot be 0');\\n            _colors[__colors[i]] = Color({title: titles[i], exists: true});\\n            emit ColorAdded(__colors[i], titles[i]);\\n        }\\n\\n        fieldSVGs1 = svgs.fieldSVGs1;\\n        fieldSVGs2 = svgs.fieldSVGs2;\\n        fieldSVGs3 = svgs.fieldSVGs3;\\n        fieldSVGs4 = svgs.fieldSVGs4;\\n        fieldSVGs5 = svgs.fieldSVGs5;\\n        fieldSVGs6 = svgs.fieldSVGs6;\\n        fieldSVGs7 = svgs.fieldSVGs7;\\n        fieldSVGs8 = svgs.fieldSVGs8;\\n        fieldSVGs9 = svgs.fieldSVGs9;\\n        fieldSVGs10 = svgs.fieldSVGs10;\\n        fieldSVGs11 = svgs.fieldSVGs11;\\n        fieldSVGs12 = svgs.fieldSVGs12;\\n        fieldSVGs13 = svgs.fieldSVGs13;\\n        fieldSVGs14 = svgs.fieldSVGs14;\\n        fieldSVGs15 = svgs.fieldSVGs15;\\n        fieldSVGs16 = svgs.fieldSVGs16;\\n        fieldSVGs17 = svgs.fieldSVGs17;\\n        fieldSVGs18 = svgs.fieldSVGs18;\\n        fieldSVGs19 = svgs.fieldSVGs19;\\n        fieldSVGs20 = svgs.fieldSVGs20;\\n        fieldSVGs21 = svgs.fieldSVGs21;\\n        fieldSVGs22 = svgs.fieldSVGs22;\\n        fieldSVGs23 = svgs.fieldSVGs23;\\n        fieldSVGs24 = svgs.fieldSVGs24;\\n    }\\n\\n    function colorExists(uint24 color) public view override returns (bool) {\\n        return _colors[color].exists;\\n    }\\n\\n    function colorTitle(uint24 color) public view override returns (string memory) {\\n        return _colors[color].title;\\n    }\\n\\n    function callFieldSVGs(\\n        IFieldSVGs target,\\n        uint16 field,\\n        uint24[4] memory colors\\n    ) internal view returns (IFieldSVGs.FieldData memory) {\\n        bytes memory functionSelector = abi.encodePacked('field_', uint16(field).toString(), '(uint24[4])');\\n\\n        bool success;\\n        bytes memory result;\\n        (success, result) = address(target).staticcall(\\n            abi.encodeWithSelector(bytes4(keccak256(functionSelector)), colors)\\n        );\\n\\n        return abi.decode(result, (IFieldSVGs.FieldData));\\n    }\\n\\n    function generateField(uint16 field, uint24[4] memory colors)\\n        external\\n        view\\n        override\\n        returns (IFieldSVGs.FieldData memory)\\n    {\\n        if (field <= 27) {\\n            return callFieldSVGs(fieldSVGs1, field, colors);\\n        }\\n\\n        if (field <= 50) {\\n            return callFieldSVGs(fieldSVGs2, field, colors);\\n        }\\n\\n        if (field <= 66) {\\n            return callFieldSVGs(fieldSVGs3, field, colors);\\n        }\\n\\n        if (field <= 89) {\\n            return callFieldSVGs(fieldSVGs4, field, colors);\\n        }\\n\\n        if (field <= 110) {\\n            return callFieldSVGs(fieldSVGs5, field, colors);\\n        }\\n\\n        if (field <= 132) {\\n            return callFieldSVGs(fieldSVGs6, field, colors);\\n        }\\n\\n        if (field <= 150) {\\n            return callFieldSVGs(fieldSVGs7, field, colors);\\n        }\\n\\n        if (field <= 170) {\\n            return callFieldSVGs(fieldSVGs8, field, colors);\\n        }\\n\\n        if (field <= 177) {\\n            return callFieldSVGs(fieldSVGs9, field, colors);\\n        }\\n\\n        if (field <= 193) {\\n            return callFieldSVGs(fieldSVGs10, field, colors);\\n        }\\n\\n        if (field <= 198) {\\n            return callFieldSVGs(fieldSVGs11, field, colors);\\n        }\\n\\n        if (field <= 205) {\\n            return callFieldSVGs(fieldSVGs12, field, colors);\\n        }\\n\\n        if (field <= 211) {\\n            return callFieldSVGs(fieldSVGs13, field, colors);\\n        }\\n\\n        if (field <= 217) {\\n            return callFieldSVGs(fieldSVGs14, field, colors);\\n        }\\n\\n        if (field <= 223) {\\n            return callFieldSVGs(fieldSVGs15, field, colors);\\n        }\\n\\n        if (field <= 227) {\\n            return callFieldSVGs(fieldSVGs16, field, colors);\\n        }\\n\\n        if (field <= 233) {\\n            return callFieldSVGs(fieldSVGs17, field, colors);\\n        }\\n\\n        if (field <= 243) {\\n            return callFieldSVGs(fieldSVGs18, field, colors);\\n        }\\n\\n        if (field <= 262) {\\n            return callFieldSVGs(fieldSVGs19, field, colors);\\n        }\\n\\n        if (field <= 275) {\\n            return callFieldSVGs(fieldSVGs20, field, colors);\\n        }\\n\\n        if (field <= 284) {\\n            return callFieldSVGs(fieldSVGs21, field, colors);\\n        }\\n\\n        if (field <= 289) {\\n            return callFieldSVGs(fieldSVGs22, field, colors);\\n        }\\n\\n        if (field <= 298) {\\n            return callFieldSVGs(fieldSVGs23, field, colors);\\n        }\\n\\n        if (field == 299) {\\n            return callFieldSVGs(fieldSVGs24, field, colors);\\n        }\\n\\n        revert('invalid field selection');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFieldGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport './IFieldSVGs.sol';\\nimport './IColors.sol';\\n\\n/// @dev Generate Field SVG\\ninterface IFieldGenerator {\\n    /// @param field uint representing field selection\\n    /// @param colors to be rendered in the field svg\\n    /// @return FieldData containing svg snippet and field title\\n    function generateField(uint16 field, uint24[4] memory colors) external view returns (IFieldSVGs.FieldData memory);\\n\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n\\n    struct FieldSVGs {\\n        IFieldSVGs fieldSVGs1;\\n        IFieldSVGs fieldSVGs2;\\n        IFieldSVGs fieldSVGs3;\\n        IFieldSVGs fieldSVGs4;\\n        IFieldSVGs fieldSVGs5;\\n        IFieldSVGs fieldSVGs6;\\n        IFieldSVGs fieldSVGs7;\\n        IFieldSVGs fieldSVGs8;\\n        IFieldSVGs fieldSVGs9;\\n        IFieldSVGs fieldSVGs10;\\n        IFieldSVGs fieldSVGs11;\\n        IFieldSVGs fieldSVGs12;\\n        IFieldSVGs fieldSVGs13;\\n        IFieldSVGs fieldSVGs14;\\n        IFieldSVGs fieldSVGs15;\\n        IFieldSVGs fieldSVGs16;\\n        IFieldSVGs fieldSVGs17;\\n        IFieldSVGs fieldSVGs18;\\n        IFieldSVGs fieldSVGs19;\\n        IFieldSVGs fieldSVGs20;\\n        IFieldSVGs fieldSVGs21;\\n        IFieldSVGs fieldSVGs22;\\n        IFieldSVGs fieldSVGs23;\\n        IFieldSVGs fieldSVGs24;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFieldSVGs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport './ICategories.sol';\\n\\ninterface IFieldSVGs {\\n    struct FieldData {\\n        string title;\\n        ICategories.FieldCategories fieldType;\\n        string svgString;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IColors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IColors {\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICategories.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface ICategories {\\n    enum FieldCategories {\\n        MYTHIC,\\n        HERALDIC\\n    }\\n\\n    enum HardwareCategories {\\n        STANDARD,\\n        SPECIAL\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint24[]\",\"name\":\"__colors\",\"type\":\"uint24[]\"},{\"internalType\":\"string[]\",\"name\":\"titles\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs1\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs2\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs3\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs4\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs5\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs6\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs7\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs8\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs9\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs10\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs11\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs12\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs13\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs14\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs15\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs16\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs17\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs18\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs19\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs20\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs21\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs22\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs23\",\"type\":\"address\"},{\"internalType\":\"contract IFieldSVGs\",\"name\":\"fieldSVGs24\",\"type\":\"address\"}],\"internalType\":\"struct IFieldGenerator.FieldSVGs\",\"name\":\"svgs\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"color\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"ColorAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"color\",\"type\":\"uint24\"}],\"name\":\"colorExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"color\",\"type\":\"uint24\"}],\"name\":\"colorTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"}],\"name\":\"generateField\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"enum ICategories.FieldCategories\",\"name\":\"fieldType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"svgString\",\"type\":\"string\"}],\"internalType\":\"struct IFieldSVGs.FieldData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FieldGenerator", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000bac486f6db3953812f6854c9dd09765794109bdb0000000000000000000000004f664346c42e3095377d1767f44321b219acf9ec0000000000000000000000000d2ad11f09a4ddd4286fd063f542fd811f1c7f6f00000000000000000000000088bba3060962a832a31f69e3d7ed420d5b8293f300000000000000000000000000fc2fdd9a99c684aa6768363502284ebbcf4269000000000000000000000000c1ca003b6e0660c77b573620d2d6a81b4b5f979300000000000000000000000003d485b8a4f504f38b662067a2c84c89d50c3c2b000000000000000000000000fff5e2209f8d5bb58ba51d6c257301522abef471000000000000000000000000a2c53930962a883d030bcf8f7ee3bd12610e52c60000000000000000000000009ccbdebbbc72bfde33f1c9f17eb796510e7064b4000000000000000000000000112dd5a5301479b2f831bd240161b63a1aa1e09b0000000000000000000000000ad30a591f813893471ab6a630f42efc2079d11800000000000000000000000019369e65ff78344d8472f8691085a125015fd9ff00000000000000000000000036d9a6d581b347db53aebf8947942dbfafcfae960000000000000000000000000a0f4b28a679ce4b2c08e46bc690dd35917c362b000000000000000000000000aae15a0e3f0f9b4264cd5dafdb08c036c7208ec2000000000000000000000000ea0082e7678fd16cce596824a552d9d38f2c6096000000000000000000000000760737a2d3dab4e65939e10384b2da1ebe3e34d00000000000000000000000006dcb8e749a3491c21487ef733713d353425cec81000000000000000000000000fadb4b43671aa379d443ffc4ec98d2af2808ebe5000000000000000000000000a5bfc8dfcaf5581726621dc8ddc0f1ca24ea95a7000000000000000000000000fb0923a34453543c10e224d60e5130f75a17c9fc000000000000000000000000fbe0d022e288a28aff0d8ceaf2bf4a35b04e177b00000000000000000000000019eb0b13501c0176f81acbcce4d6d32083c5adad000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000ff007a00000000000000000000000000000000000000000000000000000000006c28a20000000000000000000000000000000000000000000000000000000000fe7fff0000000000000000000000000000000000000000000000000000000000d3d3d30000000000000000000000000000000000000000000000000000000000323232000000000000000000000000000000000000000000000000000000000078503c0000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000b5000a0000000000000000000000000000000000000000000000000000000000ff6b000000000000000000000000000000000000000000000000000000000000ffb30000000000000000000000000000000000000000000000000000000000000063510000000000000000000000000000000000000000000000000000000000ceff00000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000000450696e6b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b556c74726176696f6c65740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004526f7365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004477261790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f6e797800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000542726f776e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003536b79000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074372696d736f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000743697472696e65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004476f6c6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000945766572677265656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648692d5669730000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}