{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DexManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IDex.sol\\\";\\nimport \\\"../interfaces/IDexManager.sol\\\";\\nimport \\\"../libraries/OperationsLib.sol\\\";\\n\\n//TODO:\\n// - tests (+ mocked wrapper)\\n\\n/// @title Interface for the DEX manager\\n/// @author Cosmin Grigore (@gcosmintech)\\ncontract DexManager is Ownable, ReentrancyGuard, IDexManager {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Mapping for registered AMM wrappers\\n    mapping(uint256 => address) public override AMMs;\\n    /// @notice Mapping for registered AMM wrappers pause status\\n    mapping(uint256 => bool) public override isAMMPaused;\\n    /// @notice Indicates if the contract is paused or not\\n    bool public isPaused;\\n    /// @notice Last registered id\\n    uint256 private _lastId;\\n\\n    /// @notice Constructor\\n    /// @param _paused Pause state of the contract\\n    constructor(bool _paused) {\\n        isPaused = _paused;\\n        _lastId = 0;\\n    }\\n\\n    //-----------------\\n    //----------------- View methods -----------------\\n    //-----------------\\n    /// @notice View method to return the next id in line\\n    function getNextId() public view override returns (uint256) {\\n        return _lastId + 1;\\n    }\\n\\n    /// @notice Returns the amount one would obtain from a swap\\n    /// @param _ammId AMM id\\n    /// @param _tokenIn Token in address\\n    /// @param _tokenOut Token to be obtained from swap address\\n    /// @param _amountIn Amount to be used for swap\\n    /// @return Token out amount\\n    function getAmountsOut(\\n        uint256 _ammId,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        bytes calldata data\\n    ) external override payable returns (uint256) {\\n        require(msg.value == 0, \\\"ERR: NO VALUE\\\");\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n        return\\n            IDex(AMMs[_ammId]).getAmountsOut(\\n                _tokenIn,\\n                _tokenOut,\\n                _amountIn,\\n                data\\n            );\\n    }\\n\\n    //-----------------\\n    //----------------- Owner methods -----------------\\n    //-----------------\\n    /// @notice Register a new AMM to be used with by the manager\\n    /// @param _amm AMM wrapper address\\n    function registerAMM(address _amm)\\n        external\\n        onlyOwner\\n        validAddress(_amm)\\n        returns (uint256)\\n    {\\n        uint256 id = getNextId();\\n        require(AMMs[id] == address(0), \\\"ERR: ID ALREADY ASSIGNED\\\");\\n        AMMs[id] = _amm;\\n        _lastId += 1;\\n        emit AMMRegistered(msg.sender, _amm, id);\\n        return id;\\n    }\\n\\n    /// @notice Pause an already registered AMM\\n    /// @param _id AMM id\\n    function pauseAMM(uint256 _id) external onlyOwner {\\n        require(AMMs[_id] != address(0), \\\"ERR: ID NOT ASSIGNED\\\");\\n        require(!isAMMPaused[_id], \\\"ERR: AMM already paused\\\");\\n        isAMMPaused[_id] = true;\\n        emit AMMPaused(msg.sender);\\n    }\\n\\n    /// @notice Unpause an already registered AMM\\n    /// @param _id AMM id\\n    function unpauseAMM(uint256 _id) external onlyOwner {\\n        require(AMMs[_id] != address(0), \\\"ERR: ID NOT ASSIGNED\\\");\\n        require(isAMMPaused[_id], \\\"ERR: AMM not paused\\\");\\n        isAMMPaused[_id] = false;\\n        emit AMMUnpaused(msg.sender);\\n    }\\n\\n    //-----------------\\n    //----------------- Non-view methods -----------------\\n    //-----------------\\n    /// @notice Removes liquidity and sends obtained tokens to sender\\n    /// @param _ammId AMM id\\n    /// @param _tokenA Token A address\\n    /// @param _tokenB Token B address\\n    /// @param amountParams Amount info (Min amount for token A, Min amount for token B, LP amount to be burnt)\\n    /// @param _data AMM specific data\\n    function removeLiquidity(\\n        uint256 _ammId,\\n        address _tokenA,\\n        address _tokenB,\\n        RemoveLiquidityData calldata amountParams,\\n        bytes calldata _data\\n    )\\n        external\\n        override\\n        validAMM(_ammId)\\n        nonReentrant\\n        returns (uint256, uint256)\\n    {\\n        require(_tokenA != address(0), \\\"ERR: INVALID TOKEN_A ADDRESS\\\");\\n        require(_tokenB != address(0), \\\"ERR: INVALID TOKEN_B ADDRESS\\\");\\n        require(amountParams._lpAmount > 0, \\\"ERR: INVALID LP_AMOUNT\\\");\\n\\n        bytes memory amountsData = abi.encode(\\n            amountParams._lpAmount,\\n            amountParams._amountAMin,\\n            amountParams._amountBMin\\n        );\\n        (uint256 obtainedA, uint256 obtainedB) = IDex(AMMs[_ammId])\\n            .removeLiquidity(_tokenA, _tokenB, msg.sender, amountsData, _data);\\n        require(obtainedA > 0 || obtainedB > 0, \\\"ERR: SWAP FAILED\\\");\\n\\n        emit RemovedLiquidityPerformed(\\n            msg.sender,\\n            amountParams._lpAmount,\\n            obtainedA,\\n            obtainedB\\n        );\\n        return (obtainedA, obtainedB);\\n    }\\n\\n    /// @notice Adds liquidity and sends obtained LP & leftovers to sender\\n    /// @param _ammId AMM id\\n    /// @param _tokenA Token A address\\n    /// @param _tokenB Token B address\\n    /// @param amountParams Amount info (Desired amount for token A, Desired amount for token B, Min amount for token A, Min amount for token B)\\n    /// @param _data AMM specific data\\n    function addLiquidity(\\n        uint256 _ammId,\\n        address _tokenA,\\n        address _tokenB,\\n        AddLiquidityParams calldata amountParams,\\n        bytes calldata _data\\n    )\\n        external\\n        override\\n        validAMM(_ammId)\\n        nonReentrant\\n        returns (\\n            uint256, //amountADesired-usedA\\n            uint256, //amountBDesired-usedB\\n            uint256 //amountLP\\n        )\\n    {\\n        require(_tokenA != address(0), \\\"ERR: INVALID TOKEN_A ADDRESS\\\");\\n        require(_tokenB != address(0), \\\"ERR: INVALID TOKEN_B ADDRESS\\\");\\n        require(\\n            amountParams._amountADesired > 0,\\n            \\\"ERR: INVALID AMOUNT_A_DESIRED\\\"\\n        );\\n        require(amountParams._amountAMin > 0, \\\"ERR: INVALID AMOUNT_A_MIN\\\");\\n        require(\\n            amountParams._amountBDesired > 0,\\n            \\\"ERR: INVALID AMOUNT_B_DESIRED\\\"\\n        );\\n        require(amountParams._amountBMin > 0, \\\"ERR: INVALID AMOUNT_B_MIN\\\");\\n\\n        _performAddLiquidityApprovals(\\n            _tokenA,\\n            _tokenB,\\n            amountParams._amountADesired,\\n            amountParams._amountBDesired,\\n            _ammId\\n        );\\n\\n        AddLiquidityTemporaryData memory data;\\n        bytes memory amountsData = abi.encode(\\n            amountParams._amountADesired,\\n            amountParams._amountBDesired,\\n            amountParams._amountAMin,\\n            amountParams._amountBMin\\n        );\\n        (data.usedA, data.usedB, data.obtainedLP) = IDex(AMMs[_ammId])\\n            .addLiquidity(_tokenA, _tokenB, msg.sender, amountsData, _data);\\n        require(data.obtainedLP > 0, \\\"ERR: ADD LIQUIDITY FAILED\\\");\\n\\n        emit AddLiquidityPerformed(\\n            _tokenA,\\n            _tokenB,\\n            _ammId,\\n            amountParams._amountADesired,\\n            amountParams._amountBDesired,\\n            data.usedA,\\n            data.usedB,\\n            data.obtainedLP\\n        );\\n        return (\\n            amountParams._amountADesired - data.usedA,\\n            amountParams._amountBDesired - data.usedB,\\n            data.obtainedLP\\n        );\\n    }\\n\\n    /// @notice Performs a swap\\n    /// @param _ammId AMM id\\n    /// @param _tokenA Token A address\\n    /// @param _tokenB Token B address\\n    /// @param _amountIn Token A amount\\n    /// @param _amountOutMin Min amount for Token B\\n    /// @param _data AMM specific data\\n    function swap(\\n        uint256 _ammId,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes calldata _data\\n    ) external override validAMM(_ammId) nonReentrant returns (uint256) {\\n        require(_tokenA != address(0), \\\"ERR: INVALID TOKEN_A ADDRESS\\\");\\n        require(_tokenB != address(0), \\\"ERR: INVALID TOKEN_B ADDRESS\\\");\\n        require(_amountIn > 0, \\\"ERR: INVALID AMOUNT_IN\\\");\\n        require(_amountOutMin > 0, \\\"ERR: INVALID AMOUNT_OUT_MIN\\\");\\n\\n        _performSwapApprovals(_tokenA, _amountIn, _ammId);\\n        bytes memory amountsData = abi.encode(_amountIn, _amountOutMin);\\n        // perform swap\\n        uint256 amountToSend = IDex(AMMs[_ammId]).swap(\\n            _tokenA,\\n            _tokenB,\\n            amountsData,\\n            _data\\n        );\\n        require(amountToSend > 0, \\\"ERR: INVALID SWAP\\\");\\n        require(amountToSend >= _amountOutMin, \\\"ERR: SWAP MIN AMOUNT\\\");\\n\\n        //transfer swapped token to sender\\n        IERC20(_tokenB).safeTransfer(msg.sender, amountToSend);\\n\\n        emit SwapPerformed(\\n            msg.sender,\\n            _tokenA,\\n            _tokenB,\\n            _ammId,\\n            _amountIn,\\n            amountToSend\\n        );\\n        return amountToSend;\\n    }\\n\\n    //-----------------\\n    //----------------- Private methods -----------------\\n    //-----------------\\n\\n    /// @notice Peforms approvals and pre-transfers for the swap operation\\n    /// @param _tokenA Token A address\\n    /// @param _amountIn Amount of token A\\n    /// @param _ammId Registered AMM wrapper id\\n    function _performSwapApprovals(\\n        address _tokenA,\\n        uint256 _amountIn,\\n        uint256 _ammId\\n    ) private {\\n        IERC20(_tokenA).safeTransferFrom(msg.sender, address(this), _amountIn);\\n        OperationsLib.safeApprove(_tokenA, AMMs[_ammId], _amountIn);\\n    }\\n\\n    /// @notice Peforms approvals and pre-transfers for the add liquidity operation\\n    /// @param _tokenA Token A address\\n    /// @param _tokenB Token B address\\n    /// @param _amountADesired Amount of token A used in the operation\\n    /// @param _amountBDesired Amount of token B used in the operation\\n    /// @param _ammId Registered AMM wrapper id\\n    function _performAddLiquidityApprovals(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _ammId\\n    ) private {\\n        IERC20(_tokenA).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountADesired\\n        );\\n        OperationsLib.safeApprove(_tokenA, AMMs[_ammId], _amountADesired);\\n        IERC20(_tokenB).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountBDesired\\n        );\\n        OperationsLib.safeApprove(_tokenB, AMMs[_ammId], _amountBDesired);\\n    }\\n\\n    //-----------------\\n    //----------------- Modifiers -----------------\\n    //-----------------\\n    modifier validAddress(address _address) {\\n        require(_address != address(0), \\\"ERR: INVALID ADDRESS\\\");\\n        _;\\n    }\\n\\n    modifier validAMM(uint256 _ammId) {\\n        require(AMMs[_ammId] != address(0), \\\"ERR: AMM NOT REGISTERED\\\");\\n        require(!isAMMPaused[_ammId], \\\"ERR: AMM IS PAUSED\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"interfaces/IDex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Common interface for AMMs\\n/// @author Cosmin Grigore (@gcosmintech)\\ninterface IDex {\\n    event AllowManager(address indexed owner);\\n    event AllowEveryone(address indexed owner);\\n    event ManagerChanged(\\n        address indexed owner,\\n        address indexed oldManager,\\n        address indexed newManager\\n    );\\n    event RouterChanged(\\n        address indexed owner,\\n        address indexed oldRouter,\\n        address indexed newRouter\\n    );\\n    event FactoryChanged(\\n        address indexed owner,\\n        address indexed oldFactory,\\n        address indexed newFactory\\n    );\\n    event Swapped(\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 _amountIn,\\n        uint256 _amountOut\\n    );\\n    event AddedLiquidity(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 usedA,\\n        uint256 usedB,\\n        uint256 obtainedLP\\n    );\\n\\n    event RemovedLiquidity(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 liquidity,\\n        uint256 obtainedA,\\n        uint256 obtainedB\\n    );\\n\\n    function getAmountsOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        bytes calldata _data\\n    ) external payable returns (uint256);\\n\\n    function swap(\\n        address _tokenA,\\n        address _tokenB,\\n        bytes calldata _amountsData,\\n        bytes calldata _data\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        address _recipient,\\n        bytes calldata _amountsData,\\n        bytes calldata _data\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        address _recipient,\\n        bytes calldata _amountsData,\\n        bytes calldata _data\\n    ) external returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/IDexManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Interface for the DEX manager\\n/// @author Cosmin Grigore (@gcosmintech)\\ninterface IDexManager {\\n    /// @notice Event emitted when a new AMM wrapper has been registered\\n    event AMMRegistered(\\n        address indexed owner,\\n        address indexed ammWrapper,\\n        uint256 id\\n    );\\n    /// @notice Event emitted when a registered AMM is paused\\n    event AMMPaused(address indexed owner);\\n    /// @notice Event emitted when a registered AMM is unpaused\\n    event AMMUnpaused(address indexed owner);\\n    /// @notice Event emitted when a swap has been performed\\n    event SwapPerformed(\\n        address sender,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 ammId,\\n        uint256 amountIn,\\n        uint256 amountOutObtained\\n    );\\n    event AddLiquidityPerformed(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 ammId,\\n        uint256 amountAIn,\\n        uint256 amountBIn,\\n        uint256 usedA,\\n        uint256 usedB,\\n        uint256 liquidityObtained\\n    );\\n    event RemovedLiquidityPerformed(\\n        address sender,\\n        uint256 lpAmount,\\n        uint256 obtainedA,\\n        uint256 obtainedB\\n    );\\n\\n    /// @notice Amount data needed for an add liquidity operation\\n    struct AddLiquidityParams {\\n        uint256 _amountADesired;\\n        uint256 _amountBDesired;\\n        uint256 _amountAMin;\\n        uint256 _amountBMin;\\n    }\\n    /// @notice Amount data needed for a remove liquidity operation\\n    struct RemoveLiquidityData {\\n        uint256 _amountAMin;\\n        uint256 _amountBMin;\\n        uint256 _lpAmount;\\n    }\\n\\n    /// @notice Internal data used only in the add liquidity method\\n    struct AddLiquidityTemporaryData {\\n        uint256 lpBalanceBefore;\\n        uint256 lpBalanceAfter;\\n        uint256 usedA;\\n        uint256 usedB;\\n        uint256 obtainedLP;\\n    }\\n\\n    function AMMs(uint256 id) external view returns (address);\\n\\n    function isAMMPaused(uint256 id) external view returns (bool);\\n\\n    /// @notice View method to return the next id in line\\n    function getNextId() external view returns (uint256);\\n\\n    /// @notice Returns the amount one would obtain from a swap\\n    /// @param _ammId AMM id\\n    /// @param _tokenIn Token in address\\n    /// @param _tokenOut Token to be ontained from swap address\\n    /// @param _amountIn Amount to be used for swap\\n    /// @return Token out amount\\n    function getAmountsOut(\\n        uint256 _ammId,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /// @notice Removes liquidity and sends obtained tokens to sender\\n    /// @param _ammId AMM id\\n    /// @param _tokenA Token A address\\n    /// @param _tokenB Token B address\\n    /// @param amountParams Amount info (Min amount for token A, Min amount for token B, LP amount to be burnt)\\n    /// @param _data AMM specific data\\n    function removeLiquidity(\\n        uint256 _ammId,\\n        address _tokenA,\\n        address _tokenB,\\n        RemoveLiquidityData calldata amountParams,\\n        bytes calldata _data\\n    ) external returns (uint256, uint256);\\n\\n    /// @notice Adds liquidity and sends obtained LP & leftovers to sender\\n    /// @param _ammId AMM id\\n    /// @param _tokenA Token A address\\n    /// @param _tokenB Token B address\\n    /// @param amountParams Amount info (Desired amount for token A, Desired amount for token B, Min amount for token A, Min amount for token B)\\n    /// @param _data AMM specific data\\n    function addLiquidity(\\n        uint256 _ammId,\\n        address _tokenA,\\n        address _tokenB,\\n        AddLiquidityParams calldata amountParams,\\n        bytes calldata _data\\n    )\\n        external\\n        returns (\\n            uint256, //amountADesired-usedA\\n            uint256, //amountBDesired-usedB\\n            uint256 //amountLP\\n        );\\n\\n    /// @notice Performs a swap\\n    /// @param _ammId AMM id\\n    /// @param _tokenA Token A address\\n    /// @param _tokenB Token B address\\n    /// @param _amountIn Token A amount\\n    /// @param _amountOutMin Min amount for Token B\\n    /// @param _data AMM specific data\\n    function swap(\\n        uint256 _ammId,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes calldata _data\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"libraries/OperationsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OperationsLib {\\n\\tfunction safeApprove(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), \\\"OperationsLib::safeApprove: approve failed\\\");\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AMMPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ammWrapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AMMRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AMMUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ammId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityObtained\",\"type\":\"uint256\"}],\"name\":\"AddLiquidityPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"obtainedA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"obtainedB\",\"type\":\"uint256\"}],\"name\":\"RemovedLiquidityPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ammId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutObtained\",\"type\":\"uint256\"}],\"name\":\"SwapPerformed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AMMs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ammId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct IDexManager.AddLiquidityParams\",\"name\":\"amountParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ammId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isAMMPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pauseAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"registerAMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ammId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDexManager.RemoveLiquidityData\",\"name\":\"amountParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ammId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unpauseAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DexManager", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}