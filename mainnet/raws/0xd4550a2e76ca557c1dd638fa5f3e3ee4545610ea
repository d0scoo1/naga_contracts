{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n */\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract TeamVesting is ReentrancyGuard {\r\n    IERC20 public token;\r\n    address public teamWallet = 0xBEED5427b0E728AC7EfAaD279c51d511472f9ee2; // team wallet\r\n    uint256 private balance;   \r\n    uint public cooldownTime = 7 days; // cooldown time\r\n    uint public claimReady; //save claim  time\r\n    bool private tokenAvailable = false;\r\n    uint public initialContractBalance = 500000*10**18; \r\n    constructor() {\r\n         \r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == teamWallet, 'You must be the owner.');\r\n        _;\r\n    }\r\n\r\n    //add the token can only happen once\r\n    function setToken(IERC20 _token) public onlyOwner {\r\n        require(!tokenAvailable, \"Token is already inserted.\");\r\n        token = _token;\r\n        tokenAvailable = true;\r\n    }\r\n\r\n    //% calculator\r\n    function mulScale (uint x, uint y, uint128 scale) internal pure returns (uint) {\r\n        uint a = x / scale;\r\n        uint b = x % scale;\r\n        uint c = y / scale;\r\n        uint d = y % scale;\r\n\r\n        return a * c * scale + a * d + b * c + b * d / scale;\r\n    }\r\n\r\n    //team claim\r\n    function claimTokens() public onlyOwner nonReentrant {\r\n        require(claimReady <= block.timestamp, \"You can't claim now.\");\r\n        require(token.balanceOf(address(this)) > 0, \"Insufficient Balance.\");\r\n\r\n        uint _withdrawableBalance = mulScale(initialContractBalance, 1000, 10000); // 1000 basis points = 10%.\r\n\r\n        if(token.balanceOf(address(this)) <= _withdrawableBalance) {\r\n            token.transfer(teamWallet, token.balanceOf(address(this)));\r\n        } else {\r\n            claimReady = block.timestamp + cooldownTime;\r\n\r\n            token.transfer(teamWallet, _withdrawableBalance); \r\n        }\r\n    }\r\n\r\n    receive() external payable{\r\n        balance += msg.value;\r\n    }\r\n\r\n    fallback() external payable{\r\n        balance += msg.value;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function onERC20Received(address _operator, address _from, uint256 _value, bytes calldata _data) external returns(bytes4);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"claimReady\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TeamVesting", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a366ec7db5506d0af96ddad13f51ed12fa7ca64afd9db43db8fec70e4664e0a"}]}