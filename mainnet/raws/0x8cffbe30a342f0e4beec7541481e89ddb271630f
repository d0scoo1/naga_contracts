{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"GenArt721Minter_DoodleLabs_Whitelist.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./IGenArt721CoreV2.sol\\u0027;\\n\\ncontract GenArt721Minter_DoodleLabs_Whitelist {\\n    using SafeMath for uint256;\\n\\n    event AddMinterWhitelist(address minterAddress);\\n    event RemoveMinterWhitelist(address minterAddress);\\n    event SetMerkleRoot(uint256 indexed projectId, bytes32 indexed merkleRoot);\\n\\n    IGenArt721CoreV2 genArtCoreContract;\\n    mapping(address =\\u003e bool) public minterWhitelist;\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) public whitelist;\\n    mapping(uint256 =\\u003e bytes32) private _merkleRoot;\\n\\n    modifier onlyWhitelisted() {\\n        require(genArtCoreContract.isWhitelisted(msg.sender), \\u0027can only be set by admin\\u0027);\\n        _;\\n    }\\n\\n    modifier onlyMintWhitelisted() {\\n        require(minterWhitelist[msg.sender], \\u0027only callable by minter\\u0027);\\n        _;\\n    }\\n\\n    constructor(address _genArtCore, address _minterAddress) public {\\n        genArtCoreContract = IGenArt721CoreV2(_genArtCore);\\n        minterWhitelist[_minterAddress] = true;\\n    }\\n\\n    function getMerkleRoot(uint256 projectId) external view returns (bytes32 merkleRoot) {\\n        return _merkleRoot[projectId];\\n    }\\n\\n    function setMerkleRoot(uint256 projectId, bytes32 merkleRoot) public onlyWhitelisted {\\n        _merkleRoot[projectId] = merkleRoot;\\n        emit SetMerkleRoot(projectId, merkleRoot);\\n    }\\n\\n    function addMinterWhitelist(address _minterAddress) public onlyWhitelisted {\\n        minterWhitelist[_minterAddress] = true;\\n        emit AddMinterWhitelist(_minterAddress);\\n    }\\n\\n    function removeMinterWhitelist(address _minterAddress) public onlyWhitelisted {\\n        minterWhitelist[_minterAddress] = false;\\n        emit RemoveMinterWhitelist(_minterAddress);\\n    }\\n\\n    function getWhitelisted(uint256 projectId, address user)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        return whitelist[projectId][user];\\n    }\\n\\n    function increaseAmount(\\n        uint256 projectId,\\n        address to,\\n        uint256 quantity\\n    ) public onlyMintWhitelisted {\\n        whitelist[projectId][to] = whitelist[projectId][to].add(quantity);\\n    }\\n}\\n\"},\"IGenArt721CoreV2.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ninterface IGenArt721CoreV2 {\\n    function isWhitelisted(address sender) external view returns (bool);\\n\\n    function admin() external view returns (address);\\n\\n    function projectIdToCurrencySymbol(uint256 _projectId) external view returns (string memory);\\n\\n    function projectIdToCurrencyAddress(uint256 _projectId) external view returns (address);\\n\\n    function projectIdToArtistAddress(uint256 _projectId) external view returns (address payable);\\n\\n    function projectIdToPricePerTokenInWei(uint256 _projectId) external view returns (uint256);\\n\\n    function projectIdToAdditionalPayee(uint256 _projectId) external view returns (address payable);\\n\\n    function projectIdToAdditionalPayeePercentage(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function projectTokenInfo(uint256 _projectId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            address,\\n            uint256,\\n            string memory,\\n            address\\n        );\\n\\n    function renderProviderAddress() external view returns (address payable);\\n\\n    function renderProviderPercentage() external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        uint256 _projectId,\\n        address _by\\n    ) external returns (uint256 tokenId);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenIdToProjectId(uint256 tokenId) external view returns (uint256);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.4.0/contracts/math/SafeMath.sol\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"},{\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWhitelisted\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"removeMinterWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"addMinterWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_genArtCore\",\"type\":\"address\"},{\"name\":\"_minterAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minterAddress\",\"type\":\"address\"}],\"name\":\"AddMinterWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minterAddress\",\"type\":\"address\"}],\"name\":\"RemoveMinterWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"SetMerkleRoot\",\"type\":\"event\"}]", "ContractName": "GenArt721Minter_DoodleLabs_Whitelist", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000028f2d3805652fb5d359486dffb7d08320d403240000000000000000000000000bcf07086c7c9791d22e665a3454704e6c4017831", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d1f345d26817e5f1f48e8ceb9e9d4d9fd8e210aef7fb991b159aa4252fe8ddb2"}]}