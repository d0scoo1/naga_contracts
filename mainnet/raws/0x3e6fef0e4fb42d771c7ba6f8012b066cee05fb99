{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC721Receiver {\r\n  // Checks if contract can receive ERC721 - reverts if not\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\n\r\ncontract KungFuTigers {\r\n  address public _admin;\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  uint256 public maxSupply = 2000;\r\n  uint256 public mintCount = 1;\r\n\r\n  // Cost to mint\r\n  uint256 public mintRate = 0.001 ether;\r\n  uint256 public freeMintCount = 100;\r\n\r\n  function changeFreeMintCount(uint256 _count) external isAdmin {\r\n    freeMintCount = _count;\r\n  }\r\n\r\n  function changeMintRate(uint256 _price) external isAdmin {\r\n    mintRate = _price;\r\n  }\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n  // Mapping from token ID to owner address\r\n  mapping(uint256 => address) private _owners;\r\n\r\n  // Mapping owner address to token count\r\n  mapping(address => uint256) private _balances;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _admin = msg.sender;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n    return _balances[owner];\r\n  }\r\n\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _owners[tokenId];\r\n    require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n    return owner;\r\n  }\r\n\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n    require(_exists(tokenId), \"URI query for nonexistent token\");\r\n\r\n    string memory baseURI = _baseURI();\r\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, toString(tokenId), \".json\")) : \"\";\r\n  }\r\n\r\n  // Set as the directory URL -- each mint URI looks like <uri>/<tokenId>\r\n  function _baseURI() internal pure returns (string memory) {\r\n    return \"https://nftstorage.link/ipfs/bafybeicvyvhvx6etc2vvetgrehle66ogxs4swvuvrnr2tmm64mnumskmvi/\";\r\n  }\r\n\r\n  function safeMint(address to) public payable {\r\n    require(mintCount <= maxSupply, \"Can not mint more\");\r\n    uint256 tokenId = mintCount;\r\n    if (mintCount <= freeMintCount) {\r\n      _safeMint(to, tokenId);\r\n    } else {\r\n      require(msg.value >= mintRate, \"Not enough ether sent\");\r\n      _safeMint(to, tokenId);\r\n    }\r\n    mintCount += 1;\r\n  }\r\n\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner, \"Approval to current owner\");\r\n    require(\r\n      msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n      \"Approve caller is not owner nor approved for all\"\r\n    );\r\n    _approve(to, tokenId);\r\n  }\r\n\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId), \"Approved query for nonexistent token\");\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  function setApprovalForAll(address operator, bool approved) public {\r\n    _setApprovalForAll(msg.sender, operator, approved);\r\n  }\r\n\r\n  function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId), \"Transfer caller is not owner nor approved\");\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId), \"Transfer caller is not owner nor approved\");\r\n    _safeTransfer(from, to, tokenId, _data);\r\n  }\r\n\r\n  function _safeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) internal {\r\n    _transfer(from, to, tokenId);\r\n    require(_checkOnERC721Received(from, to, tokenId, _data), \"Transfer to non ERC721Receiver implementer\");\r\n  }\r\n\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    return _owners[tokenId] != address(0);\r\n  }\r\n\r\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n    require(_exists(tokenId), \"Operator query for nonexistent token\");\r\n    address owner = ownerOf(tokenId);\r\n    return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n  }\r\n\r\n  function _safeMint(address to, uint256 tokenId) internal {\r\n    _safeMint(to, tokenId, \"\");\r\n  }\r\n\r\n  function _safeMint(\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) internal {\r\n    _mint(to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(address(0), to, tokenId, _data),\r\n      \"Transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0), \"ERC721: mint to the zero address\");\r\n    require(!_exists(tokenId), \"ERC721: token already minted\");\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  function _burn(uint256 tokenId) internal {\r\n    address owner = ownerOf(tokenId);\r\n    // Clear approvals\r\n    _approve(address(0), tokenId);\r\n    _balances[owner] -= 1;\r\n    delete _owners[tokenId];\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal {\r\n    require(ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n    require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId);\r\n\r\n    _balances[from] -= 1;\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  function _approve(address to, uint256 tokenId) internal {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(ownerOf(tokenId), to, tokenId);\r\n  }\r\n\r\n  function _setApprovalForAll(\r\n    address owner,\r\n    address operator,\r\n    bool approved\r\n  ) internal {\r\n    require(owner != operator, \"ERC721: approve to caller\");\r\n    _operatorApprovals[owner][operator] = approved;\r\n    emit ApprovalForAll(owner, operator, approved);\r\n  }\r\n\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (isContract(to)) {\r\n      try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n        return retval == IERC721Receiver.onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"Transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // ERC165 compliant\r\n  // Tell everyone we support erc1155\r\n  // interfaceId == 0x80ac58cd for erc721\r\n  function supportsInterface(bytes4 interfaceId)\r\n  public\r\n  pure\r\n  virtual\r\n  returns (bool)\r\n  {\r\n    return interfaceId == 0x80ac58cd;\r\n  }\r\n\r\n  function isContract(address _addr) private view returns (bool _isContract){\r\n    uint32 size;\r\n    assembly {\r\n      size := extcodesize(_addr)\r\n    }\r\n    return (size > 0);\r\n  }\r\n\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    if (value == 0) {\r\n      return \"0\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n\r\n  modifier isAdmin() {\r\n    require(tx.origin == msg.sender, \"Sender not admin\");\r\n    require(msg.sender == _admin, \"Sender not admin\");\r\n    _;\r\n  }\r\n\r\n  function withdraw() public isAdmin {\r\n    require(address(this).balance > 0, \"Balance is 0\");\r\n    payable(_admin).transfer(address(this).balance);\r\n  }\r\n\r\n  receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"changeFreeMintCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changeMintRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KungFuTigers", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e4b756e672046752054696765727300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b46550000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f584e438268d9949022a9a1f502ac6b1867fce7a89316583c115cfeb9a26dba2"}]}