{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/Base64.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Clarity.sol\r\n\r\n\r\npragma solidity >=0.8.11 <0.9.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721 {}\r\n\r\ncontract Clarity is ERC721, IERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    uint256 private _price1 = 1;\r\n    uint256 private _price2 = 10;\r\n    uint256 private _price3 = 100;\r\n    uint256 private _price4 = 500;\r\n    uint256 private _price5 = 900;\r\n    uint256 private _price6 = 5000;\r\n\r\n    constructor() {\r\n        for (uint256 tokenId = 1; tokenId <= 6; tokenId++) {\r\n            _mint(msg.sender, tokenId);\r\n        }\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId;\r\n    }\r\n\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(owner != address(0), \"Err\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"Err\");\r\n        return owner;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return \"Clarity\";\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return \"CLRT\";\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"Err\");\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"Err\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(_exists(tokenId), \"Err\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        _setApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"Err\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"Err\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"Err\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(_exists(tokenId), \"Err\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"Err\");\r\n        require(to != address(0), \"Err\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"Err\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    msg.sender,\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"Err\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function tokenSvg(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory output)\r\n    {\r\n        if (tokenId == 1) {\r\n            output = string(\r\n                abi.encodePacked(\r\n                    '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><text x=\"50%\" y=\"50%\" font-weight=\"bold\" text-align=\"center\" text-anchor=\"middle\" font-size=\"100\" font-family=\"Courier New\">&#x2666;',\r\n                    _uint2str(_price1),\r\n                    \"</text></svg>\"\r\n                )\r\n            );\r\n        } else if (tokenId == 2) {\r\n            output = string(\r\n                abi.encodePacked(\r\n                    '<svg height=\"100%\" version=\"1.1\" viewBox=\"0 0 254 254\" xmlns=\"http://www.w3.org/2000/svg\"><style>.t{font: bold 14px Courier New;}</style><g><rect x=\"4.5\" y=\"4.5\" width=\"245\" height=\"245\" fill=\"#fff\" stroke=\"#d6f6f7\" stroke-width=\"9\"/><circle cx=\"127\" cy=\"127\" r=\"41\" fill=\"#ffe5e6\"/><text x=\"50%\" y=\"131.28694\" class=\"t\" text-anchor=\"middle\">',\r\n                    _uint2str(_price2),\r\n                    '</text><text x=\"169.81233\" y=\"129.92375\" font-size=\"10\">&#x2666;</text></g></svg>'\r\n                )\r\n            );\r\n        } else if (tokenId == 3) {\r\n            output = string(\r\n                abi.encodePacked(\r\n                    '<svg height=\"100%\" version=\"1.1\" viewBox=\"0 0 271 271\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><style>.t{font: bold 14px Courier New;}</style><defs><linearGradient id=\"a\" x1=\"99\" x2=\"169\" y1=\"127\" y2=\"127\" gradientTransform=\"translate(5.7 6.6)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ffe5e6\" offset=\"0\"/><stop stop-color=\"#83e5e6\" offset=\"1\"/></linearGradient></defs><g><rect x=\"4.8\" y=\"4.8\" width=\"261\" height=\"261\" fill=\"#fff\" stroke=\"#f5dada\" stroke-width=\"9.6\"/><circle cx=\"131\" cy=\"134\" r=\"44\" fill=\"url(#a)\"/><text x=\"130.76468\" y=\"138.62802\" class=\"t\" text-anchor=\"middle\" text-align=\"center\">&#x2666;',\r\n                    _uint2str(_price3),\r\n                    '</text><path d=\"m80 119c9.2-21 34-24 54-24 40-0.98 69 66 26 84-23 9.6-94-41-80-60z\" fill=\"none\" stroke=\"#000\" stroke-dasharray=\"4.33228, 4.33228\" stroke-width=\".36\"/><circle cx=\"189\" cy=\"142\" r=\"5\" fill=\"#ffe700\"/><circle cx=\"183\" cy=\"122\" r=\"5\" fill=\"#ff6900\"/><circle cx=\"82\" cy=\"159\" r=\"4.8\" fill=\"#ccc\"/><rect x=\"83\" y=\"98\" width=\"5.4\" height=\"5.4\" fill=\"#0000a3\"/></g></svg>'\r\n                )\r\n            );\r\n        } else if (tokenId == 4) {\r\n            output = string(\r\n                abi.encodePacked(\r\n                    '<svg height=\"100%\" version=\"1.1\" viewBox=\"0 0 271 271\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><style>.t{font: bold 14px Courier New;}</style><defs><linearGradient id=\"g\" x1=\"111.1\" x2=\"162.1\" y1=\"130\" y2=\"130.6\" gradientTransform=\"matrix(1.364 0 0 1.364 -56.62 -73.05)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ffe5e6\" offset=\"0\"/><stop stop-color=\"#83e5e6\" offset=\"1\"/></linearGradient><linearGradient id=\"e\" x1=\"145.4\" x2=\"89.91\" y1=\"126.5\" y2=\"140.7\" gradientTransform=\"matrix(1.106 0 0 1.106 26.74 -51.78)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ffe5ff\" offset=\"0\"/><stop stop-color=\"#6ee5e6\" offset=\"1\"/></linearGradient><linearGradient id=\"c\" x1=\"164.6\" x2=\"171.9\" y1=\"122\" y2=\"122\" gradientTransform=\"matrix(1.364 0 0 1.364 -56.62 -73.05)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ff6900\" offset=\"0\"/><stop stop-color=\"#ffc300\" offset=\"1\"/></linearGradient><linearGradient id=\"b\" x1=\"169.1\" x2=\"176.6\" y1=\"135.2\" y2=\"139.3\" gradientTransform=\"matrix(1.364 0 0 1.364 -56.62 -73.05)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ffe700\" offset=\"0\"/><stop stop-color=\"#fc0\" offset=\"1\"/></linearGradient><linearGradient id=\"h\" x1=\"64.51\" x2=\"50\" y1=\"161.6\" y2=\"119.9\" gradientTransform=\"matrix(.6552 1.197 -1.197 .6552 330.2 5.513)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ffb9ff\" offset=\"0\"/><stop stop-color=\"#b090ff\" offset=\"1\"/></linearGradient><linearGradient id=\"f\" x1=\"-26.45\" x2=\"64.51\" y1=\"191.7\" y2=\"161.6\" gradientTransform=\"matrix(-.417 .8632 -.7742 -.5184 269.8 282.5)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#00e2ff\" offset=\"0\"/><stop stop-color=\"#3fe5e6\" offset=\"1\"/></linearGradient><linearGradient id=\"d\" x1=\"129.2\" x2=\"137.2\" y1=\"136.1\" y2=\"136.1\" gradientTransform=\"matrix(1.767 0 0 1.767 -106.5 -121.6)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#f00\" offset=\"0\"/><stop stop-color=\"#ff7aff\" offset=\"1\"/></linearGradient><linearGradient id=\"a\" x2=\"0\" y2=\"1\" gradientTransform=\"matrix(135.5 0 0 271 .0005541 .002772)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#d2e3d2\" offset=\"0\"/><stop stop-color=\"#c1fff4\" offset=\"1\"/></linearGradient><linearGradient id=\"k\" x1=\"-4.274\" x2=\"276.7\" y1=\"135.8\" y2=\"135.8\" gradientTransform=\"matrix(.9644 0 0 .9644 4.122 4.472)\" gradientUnits=\"userSpaceOnUse\" xlink:href=\"#a\"/><linearGradient id=\"j\" x1=\"4.822\" x2=\"262.5\" y1=\"244.2\" y2=\"244.2\" gradientTransform=\"translate(-.3095 -.3746)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ffe4ee\" offset=\"0\"/><stop stop-color=\"#ffffe2\" stop-opacity=\"0\" offset=\"1\"/></linearGradient><linearGradient id=\"i\" x1=\"9.956\" x2=\"66.43\" y1=\"108.5\" y2=\"108.5\" gradientTransform=\"translate(-.3095 -.3746)\" gradientUnits=\"userSpaceOnUse\" xlink:href=\"#a\"/></defs><g><rect x=\"4.822\" y=\"4.822\" width=\"261.3\" height=\"261.3\" fill=\"#fff\" stroke=\"url(#k)\" stroke-width=\"9.64\"/><path d=\"m66.12 206.4 194.8 19-0.5134 35.41-250.7 0.5134z\" fill=\"url(#j)\" stroke-width=\"9\"/><circle cx=\"170.6\" cy=\"92.61\" r=\"35.38\" fill=\"url(#e)\"/><circle cx=\"120.9\" cy=\"105.1\" r=\"43.66\" fill=\"url(#g)\"/><text x=\"134.6772\" y=\"106.2739\" class=\"t\" text-anchor=\"end\">&#x2666;',\r\n                    _uint2str(_price4),\r\n                    '</text><path d=\"m69.89 90.51c9.193-20.71 34.17-23.77 54.05-24.26 40.2-0.9805 68.91 66.44 25.92 84.07-23.35 9.575-94.06-41.46-79.97-59.81z\" fill=\"none\" stroke=\"#000\" stroke-dasharray=\"4.33228, 4.33228\" stroke-width=\".36\"/><circle cx=\"179.1\" cy=\"113.5\" r=\"5.049\" fill=\"url(#b)\"/><circle cx=\"172.9\" cy=\"93.35\" r=\"5.049\" fill=\"url(#c)\"/><circle cx=\"71.85\" cy=\"129.7\" r=\"4.776\" fill=\"#ccc\"/><rect x=\"72.8\" y=\"68.7\" width=\"5.393\" height=\"5.393\" fill=\"#0000a3\"/><path d=\"m203.6 176.5-0.1851-34.61-24.33 46.7-9.956-37z\" fill=\"url(#h)\"/><path d=\"m117.8 254.5 16.51-20.12-7.781-68.29-6.04 1.078-2.685 87.33\" fill=\"url(#f)\"/><circle cx=\"128.9\" cy=\"119\" r=\"7.07\" fill=\"url(#d)\"/><path d=\"m106 22.87c9.226 0.8628-17.95-1.938-14.88 0.363 6.074 4.555 7.742 3.429 15.61 3.63 3.671 0.09413 12.47-2.21 9.439-3.993-5.033-2.96-26.56-4.111-28.68-0.7261-2.626 4.202 14.69 3.63 16.7 3.63 1.698 0 6.284 0.838 5.083-0.363-5.731-5.731-35.26-1.297-41.02 0.363-1.677 0.4828-4.545 3.763-2.904 4.356 13.27 4.8 59.02 1.815 75.87 1.815 5.088 0-10.16-0.5973-15.25-0.7261-21.74-0.5504-50.96-3.336-71.52 3.993-4.194 1.495-9.987 4.627-9.802 9.076 0.1865 4.475 6.148 7.413 10.53 8.35 16.31 3.488 55.81 4.294 74.06 0 2.504-0.5893 7.307-4.517 5.083-5.809-5.981-3.473-22.76-1.02-29.04 2.904\" fill=\"none\" stroke=\"#000\" stroke-width=\".26\"/><path d=\"m163.4 39.57c0.6051-0.8471 0.8405-2.907 1.815-2.541 1.183 0.4436-0.1743 3.63 1.089 3.63 3.146 0 8.713-6.777 8.713-3.63 0 33.54-39.24 0.9874-24.69-7.624 5.32-3.149 30.69-5.926 36.67-0.363 9.63 8.965-14.1 10.89-18.15 10.89-4.184 0-6.976-1.163-10.89-1.815\" fill=\"none\" stroke=\"#000\" stroke-width=\".26\"/><path d=\"m66.12 206.4-56.48 54.92-0.002098-251.6 33.97 76.75 22.5 120\" fill=\"#fce7e7\"/><path d=\"m9.645 9.642 33.95 76.72 22.5 120v-134.5z\" fill=\"url(#i)\" opacity=\".13\"/></g></svg>'\r\n                )\r\n            );\r\n        } else if (tokenId == 5) {\r\n            output = string(\r\n                abi.encodePacked(\r\n                    '<svg height=\"100%\" version=\"1.1\" viewBox=\"0 0 271 271\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><style>.t{font: bold 14px Courier New;}</style><defs><linearGradient id=\"a\" x1=\"4.822\" x2=\"262.5\" y1=\"244.2\" y2=\"244.2\" gradientTransform=\"translate(-.31 -.36)\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#ffe4ee\" offset=\"0\"/><stop stop-color=\"#ffffe2\" stop-opacity=\"0\" offset=\"1\"/></linearGradient></defs><g><rect x=\"4.822\" y=\"4.822\" width=\"261.3\" height=\"261.3\" stroke=\"#e02d2d\" stroke-width=\"9.6\"/><path d=\"m66.12 206.4 194.8 19 0.4126 35.89-251.6 0.0339z\" fill=\"url(#a)\" stroke-width=\"9\"/><circle cx=\"170.6\" cy=\"92.61\" r=\"35.38\" fill=\"#08ff04\"/><circle cx=\"120.9\" cy=\"105.1\" r=\"43.66\" fill=\"#d800dc\"/><text x=\"134.6772\" y=\"106.2739\" class=\"t\" text-anchor=\"end\">&#x2666;',\r\n                    _uint2str(_price5),\r\n                    '</text><path d=\"m69.89 90.51c9.193-20.71 34.17-23.77 54.05-24.26 40.2-0.9805 68.91 66.44 25.92 84.07-23.35 9.575-94.06-41.46-79.97-59.81z\" fill=\"none\" stroke=\"#fff\" stroke-dasharray=\"4.33228, 4.33228\" stroke-width=\".36\"/><circle cx=\"179.1\" cy=\"113.5\" r=\"5.049\" fill=\"#fbff15\"/><circle cx=\"172.9\" cy=\"93.35\" r=\"5.049\" fill=\"#2acf57\"/><circle cx=\"71.85\" cy=\"129.7\" r=\"4.776\" fill=\"#ccc\"/><rect x=\"72.8\" y=\"68.7\" width=\"5.393\" height=\"5.393\" fill=\"#0000a3\"/><path d=\"m203.6 176.5-0.1851-34.61-24.33 46.7-9.956-37z\" fill=\"#1000f5\"/><path d=\"m117.8 254.5 16.51-20.12-7.781-68.29-6.04 1.078-2.685 87.33\" fill=\"#f50000\"/><circle cx=\"128.9\" cy=\"119\" r=\"7.07\" fill=\"#ff1515\"/><path d=\"m106 22.87c9.226 0.8628-17.95-1.938-14.88 0.363 6.074 4.555 7.742 3.429 15.61 3.63 3.671 0.09413 12.47-2.21 9.439-3.993-5.033-2.96-26.56-4.111-28.68-0.7261-2.626 4.202 14.69 3.63 16.7 3.63 1.698 0 6.284 0.838 5.083-0.363-5.731-5.731-35.26-1.297-41.02 0.363-1.677 0.4828-4.545 3.763-2.904 4.356 13.27 4.8 59.02 1.815 75.87 1.815 5.088 0-10.16-0.5973-15.25-0.7261-21.74-0.5504-50.96-3.336-71.52 3.993-4.194 1.495-9.987 4.627-9.802 9.076 0.1865 4.475 6.148 7.413 10.53 8.35 16.31 3.488 55.81 4.294 74.06 0 2.504-0.5893 7.307-4.517 5.083-5.809-5.981-3.473-22.76-1.02-29.04 2.904\" fill=\"none\" stroke=\"#fff\" stroke-width=\".26\"/><path d=\"m163.4 39.57c0.6051-0.8471 0.8405-2.907 1.815-2.541 1.183 0.4436-0.1743 3.63 1.089 3.63 3.146 0 8.713-6.777 8.713-3.63 0 33.54-39.24 0.9874-24.69-7.624 5.32-3.149 30.69-5.926 36.67-0.363 9.63 8.965-14.1 10.89-18.15 10.89-4.184 0-6.976-1.163-10.89-1.815\" fill=\"none\" stroke=\"#0c6900\" stroke-width=\".26\"/><path d=\"m66.12 206.4-56.48 54.92 0.003101-251.7 33.97 76.76 22.5 120\" fill=\"#18c5ca\"/><path d=\"m9.644 9.642 33.97 76.76 22.5 120v-134.5z\" fill=\"#fff944\"/></g></svg>'\r\n                )\r\n            );\r\n        } else if (tokenId == 6) {\r\n            output = string(\r\n                abi.encodePacked(\r\n                    '<svg height=\"100%\" version=\"1.1\" viewBox=\"0 0 271 271\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><style>.t{font: bold 23px Courier New;}</style><defs><linearGradient id=\"a\" x1=\"-144.4\" x2=\"-106.9\" y1=\"-90.63\" y2=\"-93.98\" gradientTransform=\"matrix(1.614 0 0 1.614 55.35 29.3)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\"0\"/><stop stop-color=\"#ea00d8\" offset=\".29\"/><stop stop-color=\"#00f93e\" stop-opacity=\".35\" offset=\".67\"/><stop stop-opacity=\"0\" offset=\"1\"/></linearGradient></defs><text transform=\"rotate(185.1)\" x=\"-146.4395\" y=\"-109.63757\" fill=\"url(#a)\" class=\"t\" text-anchor=\"middle\">&#x2666;',\r\n                    _uint2str(_price6),\r\n                    \"</text></svg>\"\r\n                )\r\n            );\r\n        } else {\r\n            output = \"\";\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address, /*to*/\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        if (from == address(0)) return;\r\n\r\n        if (tokenId == 1) {\r\n            _price1 += 1;\r\n        } else if (tokenId == 2) {\r\n            _price2 += 10;\r\n        } else if (tokenId == 3) {\r\n            _price3 += 50;\r\n        } else if (tokenId == 4) {\r\n            _price4 += 100;\r\n        } else if (tokenId == 5) {\r\n            _price5 += 200;\r\n        } else if (tokenId == 6) {\r\n            _price6 += 1000;\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory uri)\r\n    {\r\n        require(_exists(tokenId), \"Err\");\r\n\r\n        string memory tname;\r\n        string memory description;\r\n\r\n        if (tokenId == 1) {\r\n            tname = \"Counter. Clarity 1/6\";\r\n            description = \"The price in the picture increases by 1 eth on each transfer\";\r\n        } else if (tokenId == 2) {\r\n            tname = \"Unstable coin. Clarity 2/6\";\r\n            description = \"The price in the picture increases by 10 eth on each transfer\";\r\n        } else if (tokenId == 3) {\r\n            tname = \"Life. Clarity 3/6\";\r\n            description = \"The price in the picture increases by 50 eth on each transfer\";\r\n        } else if (tokenId == 4) {\r\n            tname = \"Crypto clowns. Clarity 4/6\";\r\n            description = \"The price in the picture increases by 100 eth on each transfer\";\r\n        } else if (tokenId == 5) {\r\n            tname = \"Nightmare. Clarity 5/6\";\r\n            description = \"The price in the picture increases by 200 eth on each transfer\";\r\n        } else if (tokenId == 6) {\r\n            tname = \"Clarity? Clarity 6/6\";\r\n            description = \"The price in the picture increases by 1000 eth on each transfer\";\r\n        }\r\n\r\n        string memory image = tokenSvg(tokenId);\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    Base64.encode(\r\n                        bytes(\r\n                            abi.encodePacked(\r\n                                '{\"name\":\"',\r\n                                tname,\r\n                                '\", \"description\":\"',\r\n                                description,\r\n                                '\", \"image\":\"data:image/svg+xml;base64,',\r\n                                Base64.encode(bytes(image)),\r\n                                '\"}'\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function _uint2str(uint256 i) private pure returns (string memory str) {\r\n        if (i == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        uint256 j = i;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length;\r\n        j = i;\r\n        while (j != 0) {\r\n            bstr[--k] = bytes1(uint8(48 + (j % 10)));\r\n            j /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Clarity", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://420fa8f10500b67b02c1df55dbcca6974d5aeb706bc2813884e0ded5a837b644"}]}