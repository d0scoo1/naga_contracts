{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/facets/BaseNFTFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {ERC721AFacet, ERC721ALib} from \\\"./ERC721A/ERC721AFacet.sol\\\";\\nimport {AccessControlModifiers, AccessControlLib} from \\\"./AccessControl/AccessControlModifiers.sol\\\";\\nimport {BaseNFTLib} from \\\"./BaseNFTLib.sol\\\";\\nimport {SaleStateModifiers} from \\\"./BaseNFTModifiers.sol\\\";\\nimport {URIStorageLib} from \\\"./URIStorage/URIStorageLib.sol\\\";\\nimport {URIStorageFacet} from \\\"./URIStorage/URIStorageFacet.sol\\\";\\nimport {PaymentSplitterFacet} from \\\"./PaymentSplitter/PaymentSplitterFacet.sol\\\";\\nimport {RoyaltyStandardFacet} from \\\"./RoyaltyStandard/RoyaltyStandardFacet.sol\\\";\\nimport {RoyaltyStandardLib} from \\\"./RoyaltyStandard/RoyaltyStandardLib.sol\\\";\\n\\nerror NonExistentToken();\\nerror AlreadyInitialized();\\n\\n// Inherit from other facets in the BaseNFTFacet\\n// Why inherit to one facet instead of deploying Each Facet Separately?\\n// Because its cheaper for end customers to just store / cut one facet address\\n\\ncontract BaseNFTFacet is\\n    SaleStateModifiers,\\n    AccessControlModifiers,\\n    ERC721AFacet,\\n    RoyaltyStandardFacet,\\n    URIStorageFacet\\n{\\n    function setTokenMeta(\\n        string memory _name,\\n        string memory _symbol,\\n        uint96 _defaultRoyalty\\n    ) public onlyOwner whenNotPaused {\\n        ERC721ALib.ERC721AStorage storage s = ERC721ALib.erc721AStorage();\\n        s._name = _name;\\n        s._symbol = _symbol;\\n        RoyaltyStandardLib._setDefaultRoyalty(_defaultRoyalty);\\n    }\\n\\n    function devMint(address to, uint256 quantity)\\n        public\\n        payable\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        BaseNFTLib._safeMint(to, quantity);\\n    }\\n\\n    function devMintUnsafe(address to, uint256 quantity)\\n        public\\n        payable\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        BaseNFTLib._unsafeMint(to, quantity);\\n    }\\n\\n    function devMintWithTokenURI(address to, string memory _tokenURI)\\n        public\\n        payable\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        uint256 tokenId = BaseNFTLib._safeMint(to, 1);\\n        URIStorageLib.setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function saleState() public view returns (uint256) {\\n        return BaseNFTLib.saleState();\\n    }\\n\\n    function setSaleState(uint256 _saleState)\\n        public\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        BaseNFTLib.setSaleState(_saleState);\\n    }\\n\\n    function setMaxMintable(uint256 _maxMintable)\\n        public\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        return BaseNFTLib.setMaxMintable(_maxMintable);\\n    }\\n\\n    function maxMintable() public view returns (uint256) {\\n        return BaseNFTLib.maxMintable();\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!ERC721ALib._exists(tokenId)) {\\n            revert NonExistentToken();\\n        }\\n\\n        return URIStorageLib.tokenURI(tokenId);\\n    }\\n\\n    function allOwners() external view returns (address[] memory) {\\n        return BaseNFTLib.allOwners();\\n    }\\n\\n    function allTokensForOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return BaseNFTLib.allTokensForOwner(_owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/ERC721A/ERC721AFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC721ALib.sol\\\";\\nimport {PausableModifiers} from \\\"../Pausable/PausableModifiers.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at ERC721ALib._startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\nabstract contract ERC721AFacet is IERC721Metadata, PausableModifiers {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        ERC721ALib.ERC721AStorage storage s = ERC721ALib.erc721AStorage();\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return s._currentIndex - s._burnCounter - 1;\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function totalMinted() public view returns (uint256) {\\n        return ERC721ALib.totalMinted();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return ERC721ALib.balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ERC721ALib._ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return ERC721ALib.erc721AStorage()._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return ERC721ALib.erc721AStorage()._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId)\\n        public\\n        override\\n        whenNotPaused\\n    {\\n        address owner = ERC721AFacet.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        ERC721ALib._approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return ERC721ALib._getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n        whenNotPaused\\n    {\\n        if (operator == msg.sender) revert ApproveToCaller();\\n\\n        ERC721ALib.erc721AStorage()._operatorApprovals[msg.sender][\\n            operator\\n        ] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return ERC721ALib._isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override whenNotPaused {\\n        ERC721ALib._transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override whenNotPaused {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override whenNotPaused {\\n        ERC721ALib._transfer(from, to, tokenId);\\n        if (\\n            to.isContract() &&\\n            !ERC721ALib._checkContractOnERC721Received(from, to, tokenId, _data)\\n        ) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    function burn(uint256 tokenId) public whenNotPaused {\\n        ERC721ALib._burn(tokenId);\\n    }\\n\\n    function startTokenId() public pure returns (uint256) {\\n        return ERC721ALib._startTokenId();\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return ERC721ALib._exists(tokenId);\\n    }\\n\\n    function numberMinted(address tokenOwner) public view returns (uint256) {\\n        return ERC721ALib._numberMinted(tokenOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AccessControl/AccessControlModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlLib.sol\\\";\\n\\nabstract contract AccessControlModifiers {\\n    modifier onlyOperator() {\\n        AccessControlLib._checkRole(AccessControlLib.OPERATOR_ROLE, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        AccessControlLib._enforceOwner();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/BaseNFTLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {ERC721ALib} from \\\"./ERC721A/ERC721ALib.sol\\\";\\n\\nerror ExceedsMaxMintable();\\nerror MaxMintableTooSmall();\\nerror MaxMintableLocked();\\n\\nlibrary BaseNFTLib {\\n    struct BaseNFTStorage {\\n        uint256 saleState;\\n        uint256 maxMintable; // the max number of tokens able to be minted\\n        bool maxMintableLocked;\\n    }\\n\\n    function baseNFTStorage()\\n        internal\\n        pure\\n        returns (BaseNFTStorage storage es)\\n    {\\n        bytes32 position = keccak256(\\\"base.nft.diamond.storage\\\");\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    function saleState() internal view returns (uint256) {\\n        return baseNFTStorage().saleState;\\n    }\\n\\n    function setSaleState(uint256 _saleState) internal {\\n        baseNFTStorage().saleState = _saleState;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity)\\n        internal\\n        returns (uint256 initialTokenId)\\n    {\\n        // if max mintable is zero, unlimited mints are allowed\\n        uint256 max = baseNFTStorage().maxMintable;\\n        if (max != 0 && max < (ERC721ALib.totalMinted() + quantity)) {\\n            revert ExceedsMaxMintable();\\n        }\\n\\n        // returns the id of the first token minted!\\n        initialTokenId = ERC721ALib.currentIndex();\\n        ERC721ALib._safeMint(to, quantity);\\n    }\\n\\n    // skips checks about sending to contract addresses\\n    function _unsafeMint(address to, uint256 quantity)\\n        internal\\n        returns (uint256 initialTokenId)\\n    {\\n        // if max mintable is zero, unlimited mints are allowed\\n        uint256 max = baseNFTStorage().maxMintable;\\n        if (max != 0 && max < (ERC721ALib.totalMinted() + quantity)) {\\n            revert ExceedsMaxMintable();\\n        }\\n\\n        // returns the id of the first token minted!\\n        initialTokenId = ERC721ALib.currentIndex();\\n        ERC721ALib._mint(to, quantity, \\\"\\\", false);\\n    }\\n\\n    function maxMintable() internal view returns (uint256) {\\n        return baseNFTStorage().maxMintable;\\n    }\\n\\n    function setMaxMintable(uint256 _maxMintable) internal {\\n        if (_maxMintable < ERC721ALib.totalMinted()) {\\n            revert MaxMintableTooSmall();\\n        }\\n        if (baseNFTStorage().maxMintableLocked) {\\n            revert MaxMintableLocked();\\n        }\\n\\n        baseNFTStorage().maxMintable = _maxMintable;\\n    }\\n\\n    // NOTE: this returns an array of owner addresses for each token\\n    // this may return duplicate addresses if one address owns multiple\\n    // tokens. The client should de-doop as needed\\n    function allOwners() internal view returns (address[] memory) {\\n        uint256 currIndex = ERC721ALib.erc721AStorage()._currentIndex;\\n\\n        address[] memory _allOwners = new address[](currIndex - 1);\\n\\n        for (uint256 i = 0; i < currIndex - 1; i++) {\\n            uint256 tokenId = i + 1;\\n            if (ERC721ALib._exists(tokenId)) {\\n                address owner = ERC721ALib._ownershipOf(tokenId).addr;\\n                _allOwners[i] = owner;\\n            } else {\\n                _allOwners[i] = address(0x0);\\n            }\\n        }\\n\\n        return _allOwners;\\n    }\\n\\n    function allTokensForOwner(address _owner)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 balance = ERC721ALib.balanceOf(_owner);\\n        uint256 currIndex = ERC721ALib.erc721AStorage()._currentIndex;\\n\\n        uint256[] memory tokens = new uint256[](balance);\\n        uint256 tokenCount = 0;\\n\\n        for (uint256 i = 1; i < currIndex; i++) {\\n            if (ERC721ALib._exists(i)) {\\n                address ownerOfToken = ERC721ALib._ownershipOf(i).addr;\\n\\n                if (ownerOfToken == _owner) {\\n                    tokens[tokenCount] = i;\\n                    tokenCount++;\\n                }\\n            }\\n        }\\n\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/BaseNFTModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {BaseNFTLib} from \\\"./BaseNFTLib.sol\\\";\\n\\n// sale states\\n// 0 - closed\\n// 1 - public sale\\n// 2 - allow list sale\\n\\nerror IncorrectSaleState();\\n\\nabstract contract SaleStateModifiers {\\n    modifier onlyAtSaleState(uint256 _gatedSaleState) {\\n        if (_gatedSaleState != BaseNFTLib.saleState()) {\\n            revert IncorrectSaleState();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAtOneOfSaleStates(uint256[] calldata _gatedSaleStates) {\\n        uint256 currState = BaseNFTLib.saleState();\\n        for (uint256 i; i < _gatedSaleStates.length; i++) {\\n            if (_gatedSaleStates[i] == currState) {\\n                _;\\n                return;\\n            }\\n        }\\n\\n        revert IncorrectSaleState();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/URIStorage/URIStorageLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DiamondCloneLib} from \\\"../DiamondClone/DiamondCloneLib.sol\\\";\\nimport {Strings} from \\\"../ERC721A/ERC721ALib.sol\\\";\\nimport {DiamondSaw} from \\\"../../DiamondSaw.sol\\\";\\n\\nerror MetaDataLocked();\\n\\nlibrary URIStorageLib {\\n    using Strings for uint256;\\n\\n    struct URIStorage {\\n        mapping(uint256 => string) _tokenURIs;\\n        string folderStorageBaseURI;\\n        string tokenStorageBaseURI;\\n        bytes4 tokenURIOverrideSelector;\\n        bool metadataLocked;\\n    }\\n\\n    function uriStorage() internal pure returns (URIStorage storage s) {\\n        bytes32 position = keccak256(\\\"uri.storage.facet.storage\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    function setFolderStorageBaseURI(string memory _baseURI) internal {\\n        URIStorage storage s = uriStorage();\\n        if (s.metadataLocked) revert MetaDataLocked();\\n        s.folderStorageBaseURI = _baseURI;\\n    }\\n\\n    function setTokenStorageBaseURI(string memory _baseURI) internal {\\n        URIStorage storage s = uriStorage();\\n        if (s.metadataLocked) revert MetaDataLocked();\\n        s.tokenStorageBaseURI = _baseURI;\\n    }\\n\\n    function tokenURIFromStorage(uint256 tokenId)\\n        internal\\n        view\\n        returns (string storage)\\n    {\\n        return uriStorage()._tokenURIs[tokenId];\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\\n        URIStorage storage s = uriStorage();\\n        if (s.metadataLocked) revert MetaDataLocked();\\n        s._tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    function _burn(uint256 tokenId) internal {\\n        URIStorage storage s = uriStorage();\\n        if (bytes(s._tokenURIs[tokenId]).length != 0) {\\n            delete s._tokenURIs[tokenId];\\n        }\\n    }\\n\\n    function setTokenURIOverrideSelector(bytes4 selector) internal {\\n        URIStorage storage s = uriStorage();\\n        if (s.metadataLocked) revert MetaDataLocked();\\n\\n        address sawAddress = DiamondCloneLib\\n            .diamondCloneStorage()\\n            .diamondSawAddress;\\n        bool isApproved = DiamondSaw(sawAddress).isTokenURISelectorApproved(\\n            selector\\n        );\\n        require(isApproved, \\\"selector not approved\\\");\\n        s.tokenURIOverrideSelector = selector;\\n    }\\n\\n    function removeTokenURIOverrideSelector() internal {\\n        URIStorage storage s = uriStorage();\\n        if (s.metadataLocked) revert MetaDataLocked();\\n        s.tokenURIOverrideSelector = bytes4(0);\\n    }\\n\\n    // Check for\\n    // 1. tokenURIOverride (approved override function)\\n    // 2. if individual token uri is set\\n    // 3. folder storage\\n    function tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        URIStorage storage s = uriStorage();\\n\\n        // the override is set, use that\\n        if (s.tokenURIOverrideSelector != bytes4(0)) {\\n            (bool success, bytes memory result) = address(this).staticcall(\\n                abi.encodeWithSelector(s.tokenURIOverrideSelector, tokenId)\\n            );\\n            require(success, \\\"Token URI Override Failed\\\");\\n\\n            string memory uri = abi.decode(result, (string));\\n            return uri;\\n        }\\n\\n        // fall back on \\\"normal\\\" token storage\\n        string storage individualTokenURI = tokenURIFromStorage(tokenId);\\n        string storage folderStorageBaseURI = s.folderStorageBaseURI;\\n        string storage tokenStorageBaseURI = s.tokenStorageBaseURI;\\n\\n        return\\n            bytes(individualTokenURI).length != 0\\n                ? string(\\n                    abi.encodePacked(tokenStorageBaseURI, individualTokenURI)\\n                )\\n                : string(\\n                    abi.encodePacked(folderStorageBaseURI, tokenId.toString())\\n                );\\n    }\\n\\n    function lockMetadata() internal {\\n        uriStorage().metadataLocked = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/URIStorage/URIStorageFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {URIStorageLib} from \\\"./URIStorageLib.sol\\\";\\nimport {AccessControlModifiers} from \\\"../AccessControl/AccessControlModifiers.sol\\\";\\nimport {PausableModifiers} from \\\"../Pausable/PausableModifiers.sol\\\";\\n\\ncontract URIStorageFacet is AccessControlModifiers, PausableModifiers {\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        external\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        URIStorageLib.setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function setFolderStorageBaseURI(string memory _baseURI)\\n        public\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        URIStorageLib.setFolderStorageBaseURI(_baseURI);\\n    }\\n\\n    function setTokenStorageBaseURI(string memory _baseURI)\\n        public\\n        onlyOperator\\n        whenNotPaused\\n    {\\n        URIStorageLib.setTokenStorageBaseURI(_baseURI);\\n    }\\n\\n    function lockMetadata() public onlyOwner whenNotPaused {\\n        URIStorageLib.lockMetadata();\\n    }\\n\\n    function metadataLocked() public view returns (bool) {\\n        return URIStorageLib.uriStorage().metadataLocked;\\n    }\\n\\n    function folderStorageBaseURI() public view returns (string memory) {\\n        return URIStorageLib.uriStorage().folderStorageBaseURI;\\n    }\\n\\n    function tokenStorageBaseURI() public view returns (string memory) {\\n        return URIStorageLib.uriStorage().tokenStorageBaseURI;\\n    }\\n\\n    function setTokenURIOverrideSelector(bytes4 selector)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        URIStorageLib.setTokenURIOverrideSelector(selector);\\n    }\\n\\n    function removeTokenURIOverrideSelector() external onlyOwner whenNotPaused {\\n        URIStorageLib.removeTokenURIOverrideSelector();\\n    }\\n\\n    function tokenURIOverrideSelector() public view returns (bytes4) {\\n        return URIStorageLib.uriStorage().tokenURIOverrideSelector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/PaymentSplitter/PaymentSplitterFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PaymentSplitterLib, IERC20} from \\\"./PaymentSplitterLib.sol\\\";\\nimport {AccessControlModifiers} from \\\"../AccessControl/AccessControlModifiers.sol\\\";\\nimport {DiamondInitializable} from \\\"../../utils/DiamondInitializable.sol\\\";\\nimport {PausableModifiers} from \\\"../Pausable/PausableModifiers.sol\\\";\\n\\ncontract PaymentSplitterFacet is\\n    AccessControlModifiers,\\n    DiamondInitializable,\\n    PausableModifiers\\n{\\n    function setPaymentSplits(address[] memory payees, uint256[] memory shares_)\\n        external\\n        onlyOwner\\n        initializer(\\\"payment.splitter\\\")\\n        whenNotPaused\\n    {\\n        PaymentSplitterLib.setPaymentSplits(payees, shares_);\\n    }\\n\\n    function releaseToken(IERC20 token, address account)\\n        external\\n        whenNotPaused\\n    {\\n        PaymentSplitterLib.release(token, account);\\n    }\\n\\n    function release(address payable account) external whenNotPaused {\\n        PaymentSplitterLib.release(account);\\n    }\\n\\n    function payee(uint256 index) public view returns (address) {\\n        return PaymentSplitterLib.payee(index);\\n    }\\n\\n    function releasedToken(IERC20 token, address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return PaymentSplitterLib.released(token, account);\\n    }\\n\\n    function released(address account) public view returns (uint256) {\\n        return PaymentSplitterLib.released(account);\\n    }\\n\\n    function shares(address account) public view returns (uint256) {\\n        return PaymentSplitterLib.shares(account);\\n    }\\n\\n    function totalReleasedToken(IERC20 token) public view returns (uint256) {\\n        return PaymentSplitterLib.totalReleased(token);\\n    }\\n\\n    function totalReleased() public view returns (uint256) {\\n        return PaymentSplitterLib.totalReleased();\\n    }\\n\\n    function totalShares() public view returns (uint256) {\\n        return PaymentSplitterLib.totalShares();\\n    }\\n\\n    function getPaymentSplits()\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        return PaymentSplitterLib.getPaymentSplits();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/RoyaltyStandard/RoyaltyStandardFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\n\\nimport {AccessControlModifiers} from \\\"../AccessControl/AccessControlModifiers.sol\\\";\\nimport {PausableModifiers} from \\\"../Pausable/PausableModifiers.sol\\\";\\nimport {RoyaltyStandardLib} from \\\"./RoyaltyStandardLib.sol\\\";\\n\\ncontract RoyaltyStandardFacet is\\n    IERC2981,\\n    AccessControlModifiers,\\n    PausableModifiers\\n{\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        require(tokenId > 0, \\\"tokenId may not exist\\\"); // to please compiler warning\\n        return RoyaltyStandardLib.royaltyInfo(salePrice);\\n    }\\n\\n    function setDefaultRoyalty(uint96 feeNumerator)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        RoyaltyStandardLib._setDefaultRoyalty(feeNumerator);\\n    }\\n\\n    function deleteDefaultRoyalty() external onlyOwner whenNotPaused {\\n        RoyaltyStandardLib._deleteDefaultRoyalty();\\n    }\\n\\n    function defaultRoyaltyFraction() external view returns (uint256) {\\n        return\\n            RoyaltyStandardLib\\n                .royaltyStandardStorage()\\n                ._defaultRoyaltyInfo\\n                .royaltyFraction;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/RoyaltyStandard/RoyaltyStandardLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Simplified version of royalty standard that only supports default royalties\\n * We plan to support token based royalties, but the royalties will always\\n * flow through the main contract first. This is so we can support more complex\\n * rev shares, as well as marketplaces such as OpenSea that don't currently support\\n * the royalty standard\\n */\\nlibrary RoyaltyStandardLib {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    struct RoyaltyStandardStorage {\\n        RoyaltyInfo _defaultRoyaltyInfo;\\n    }\\n\\n    function royaltyStandardStorage()\\n        internal\\n        pure\\n        returns (RoyaltyStandardStorage storage s)\\n    {\\n        bytes32 position = keccak256(\\\"royalty.standard.facet.storage\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    function royaltyInfo(uint256 _salePrice)\\n        internal\\n        view\\n        returns (address, uint256)\\n    {\\n        RoyaltyStandardStorage storage s = royaltyStandardStorage();\\n\\n        RoyaltyInfo memory royalty = s._defaultRoyaltyInfo;\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) /\\n            _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     * - receiver is always the contract address where payment splitting is implemented\\n     */\\n    function _setDefaultRoyalty(uint96 feeNumerator) internal {\\n        require(\\n            feeNumerator <= _feeDenominator(),\\n            \\\"ERC2981: royalty fee will exceed salePrice\\\"\\n        );\\n\\n        royaltyStandardStorage()._defaultRoyaltyInfo = RoyaltyInfo(\\n            address(this),\\n            feeNumerator\\n        );\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal {\\n        delete royaltyStandardStorage()._defaultRoyaltyInfo;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/ERC721A/ERC721ALib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../../interfaces/IERC721Metadata.sol\\\";\\nimport {TransferHooksLib} from \\\"../TransferHooks/TransferHooksLib.sol\\\";\\n\\npragma solidity ^0.8.4;\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\nlibrary ERC721ALib {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    bytes32 constant ERC721A_STORAGE_POSITION =\\n        keccak256(\\\"erc721a.facet.storage\\\");\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux; // NOTE - this is unused in Juice implementation\\n    }\\n\\n    struct ERC721AStorage {\\n        // The tokenId of the next token to be minted.\\n        uint256 _currentIndex;\\n        // The number of tokens burned.\\n        uint256 _burnCounter;\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to ownership details\\n        // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n        mapping(uint256 => TokenOwnership) _ownerships;\\n        // Mapping owner address to address data\\n        mapping(address => AddressData) _addressData;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    function erc721AStorage()\\n        internal\\n        pure\\n        returns (ERC721AStorage storage es)\\n    {\\n        bytes32 position = ERC721A_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        ERC721ALib.ERC721AStorage storage s = ERC721ALib.erc721AStorage();\\n\\n        uint256 startTokenId = s._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        TransferHooksLib.beforeTokenTransfers(\\n            address(0),\\n            to,\\n            startTokenId,\\n            quantity\\n        );\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            s._addressData[to].balance += uint64(quantity);\\n            s._addressData[to].numberMinted += uint64(quantity);\\n\\n            s._ownerships[startTokenId].addr = to;\\n            s._ownerships[startTokenId].startTimestamp = uint64(\\n                block.timestamp\\n            );\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (\\n                        !_checkContractOnERC721Received(\\n                            address(0),\\n                            to,\\n                            updatedIndex++,\\n                            _data\\n                        )\\n                    ) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (s._currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            s._currentIndex = updatedIndex;\\n        }\\n        TransferHooksLib.afterTokenTransfers(\\n            address(0),\\n            to,\\n            startTokenId,\\n            quantity\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        try\\n            IERC721Receiver(to).onERC721Received(\\n                msg.sender,\\n                from,\\n                tokenId,\\n                _data\\n            )\\n        returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    function _startTokenId() internal pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function currentIndex() internal view returns (uint256) {\\n        return erc721AStorage()._currentIndex;\\n    }\\n\\n    function totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to ERC721ALib._startTokenId()\\n        unchecked {\\n            return erc721AStorage()._currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            ERC721ALib._startTokenId() <= tokenId &&\\n            tokenId < ERC721ALib.erc721AStorage()._currentIndex &&\\n            !ERC721ALib.erc721AStorage()._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (ERC721ALib.TokenOwnership memory)\\n    {\\n        uint256 curr = tokenId;\\n\\n        ERC721ALib.ERC721AStorage storage s = ERC721ALib.erc721AStorage();\\n        unchecked {\\n            if (ERC721ALib._startTokenId() <= curr && curr < s._currentIndex) {\\n                ERC721ALib.TokenOwnership memory ownership = s._ownerships[\\n                    curr\\n                ];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = s._ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    function balanceOf(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(ERC721ALib.erc721AStorage()._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) internal {\\n        ERC721ALib.erc721AStorage()._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        ERC721ALib.ERC721AStorage storage s = ERC721ALib.erc721AStorage();\\n        ERC721ALib.TokenOwnership memory prevOwnership = ERC721ALib\\n            ._ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (msg.sender == from ||\\n            _isApprovedForAll(from, msg.sender) ||\\n            _getApproved(tokenId) == msg.sender);\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        TransferHooksLib.beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            s._addressData[from].balance -= 1;\\n            s._addressData[to].balance += 1;\\n\\n            ERC721ALib.TokenOwnership storage currSlot = s._ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            ERC721ALib.TokenOwnership storage nextSlot = s._ownerships[\\n                nextTokenId\\n            ];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != s._currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        TransferHooksLib.afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, true)\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        _burn(tokenId, true);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return\\n            uint256(\\n                ERC721ALib.erc721AStorage()._addressData[owner].numberMinted\\n            );\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return\\n            uint256(\\n                ERC721ALib.erc721AStorage()._addressData[owner].numberBurned\\n            );\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal {\\n        ERC721ALib.TokenOwnership memory prevOwnership = ERC721ALib\\n            ._ownershipOf(tokenId);\\n        ERC721ALib.ERC721AStorage storage s = ERC721ALib.erc721AStorage();\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (msg.sender == from ||\\n                _isApprovedForAll(from, msg.sender) ||\\n                _getApproved(tokenId) == msg.sender);\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        TransferHooksLib.beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            ERC721ALib.AddressData storage addressData = s._addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            ERC721ALib.TokenOwnership storage currSlot = s._ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            ERC721ALib.TokenOwnership storage nextSlot = s._ownerships[\\n                nextTokenId\\n            ];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != s._currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        TransferHooksLib.afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            s._burnCounter++;\\n        }\\n    }\\n\\n    function _isApprovedForAll(address owner, address operator)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return ERC721ALib.erc721AStorage()._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function _getApproved(uint256 tokenId) internal view returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return ERC721ALib.erc721AStorage()._tokenApprovals[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/Pausable/PausableModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PausableLib} from \\\"./PausableLib.sol\\\";\\n\\nabstract contract PausableModifiers {\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        PausableLib.enforceUnpaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        PausableLib.enforcePaused();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/TransferHooks/TransferHooksLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DiamondCloneLib} from \\\"../DiamondClone/DiamondCloneLib.sol\\\";\\nimport {DiamondSaw} from \\\"../../DiamondSaw.sol\\\";\\n\\nlibrary TransferHooksLib {\\n    struct TransferHooksStorage {\\n        bytes4 beforeTransfersHook; // selector of before transfer hook\\n        bytes4 afterTransfersHook; // selector of after transfer hook\\n    }\\n\\n    function transferHooksStorage()\\n        internal\\n        pure\\n        returns (TransferHooksStorage storage s)\\n    {\\n        bytes32 position = keccak256(\\\"transfer.hooks.facet.storage\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    function setBeforeTransfersHook(bytes4 _beforeTransfersHook) internal {\\n        address sawAddress = DiamondCloneLib\\n            .diamondCloneStorage()\\n            .diamondSawAddress;\\n\\n        bool isApproved = DiamondSaw(sawAddress).isTransferHookSelectorApproved(\\n            _beforeTransfersHook\\n        );\\n        require(isApproved, \\\"selector not approved\\\");\\n        transferHooksStorage().beforeTransfersHook = _beforeTransfersHook;\\n    }\\n\\n    function setAfterTransfersHook(bytes4 _afterTransfersHook) internal {\\n        address sawAddress = DiamondCloneLib\\n            .diamondCloneStorage()\\n            .diamondSawAddress;\\n        bool isApproved = DiamondSaw(sawAddress).isTransferHookSelectorApproved(\\n            _afterTransfersHook\\n        );\\n        require(isApproved, \\\"selector not approved\\\");\\n        transferHooksStorage().afterTransfersHook = _afterTransfersHook;\\n    }\\n\\n    function maybeCallTransferHook(\\n        bytes4 selector,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {\\n        if (selector == bytes4(0)) {\\n            return;\\n        }\\n\\n        (bool success, ) = address(this).call(\\n            abi.encodeWithSelector(selector, from, to, startTokenId, quantity)\\n        );\\n\\n        require(success, \\\"Transfer hook failed\\\");\\n    }\\n\\n    function beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {\\n        bytes4 selector = transferHooksStorage().beforeTransfersHook;\\n        maybeCallTransferHook(selector, from, to, startTokenId, quantity);\\n    }\\n\\n    function afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {\\n        bytes4 selector = transferHooksStorage().afterTransfersHook;\\n        maybeCallTransferHook(selector, from, to, startTokenId, quantity);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/DiamondCloneLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DiamondSaw} from \\\"../../DiamondSaw.sol\\\";\\nimport {IDiamondLoupe} from \\\"./IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"./IDiamondCut.sol\\\";\\n\\nlibrary DiamondCloneLib {\\n    bytes32 constant DIAMOND_CLONE_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.clone.storage\\\");\\n\\n    bytes32 constant ERC721A_STORAGE_POSITION =\\n        keccak256(\\\"erc721a.facet.storage\\\");\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    struct DiamondCloneStorage {\\n        // address of the diamond saw contract\\n        address diamondSawAddress;\\n        // mapping to all the facets this diamond implements.\\n        mapping(address => bool) facetAddresses;\\n        // number of facets supported\\n        uint256 numFacets;\\n        // optional gas cache for highly trafficked write selectors\\n        mapping(bytes4 => address) selectorGasCache;\\n        // immutability window\\n        uint256 immutableUntilBlock;\\n    }\\n\\n    // minimal copy  of ERC721AStorage for initialization\\n    struct ERC721AStorage {\\n        // The tokenId of the next token to be minted.\\n        uint256 _currentIndex;\\n    }\\n\\n    function diamondCloneStorage()\\n        internal\\n        pure\\n        returns (DiamondCloneStorage storage s)\\n    {\\n        bytes32 position = DIAMOND_CLONE_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    // calls externally to the saw to find the appropriate facet to delegate to\\n    function _getFacetAddressForCall() internal view returns (address addr) {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        addr = s.selectorGasCache[msg.sig];\\n        if (addr != address(0)) {\\n            return addr;\\n        }\\n\\n        (bool success, bytes memory res) = s.diamondSawAddress.staticcall(\\n            abi.encodeWithSelector(0x14bc7560, msg.sig)\\n        );\\n        require(success, \\\"Failed to fetch facet address for call\\\");\\n\\n        assembly {\\n            addr := mload(add(res, 32))\\n        }\\n\\n        return s.facetAddresses[addr] ? addr : address(0);\\n    }\\n\\n    function initNFT() internal {\\n        ERC721AStorage storage es;\\n        bytes32 position = ERC721A_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n\\n        es._currentIndex = 1;\\n    }\\n\\n    function initializeDiamondClone(\\n        address diamondSawAddress,\\n        address[] calldata _facetAddresses\\n    ) internal {\\n        DiamondCloneLib.DiamondCloneStorage storage s = DiamondCloneLib\\n            .diamondCloneStorage();\\n\\n        require(diamondSawAddress != address(0), \\\"Must set saw addy\\\");\\n        require(s.diamondSawAddress == address(0), \\\"Already inited\\\");\\n\\n        initNFT();\\n\\n        s.diamondSawAddress = diamondSawAddress;\\n        IDiamondCut.FacetCut[] memory cuts = new IDiamondCut.FacetCut[](\\n            _facetAddresses.length\\n        );\\n\\n        // emit the diamond cut event\\n        for (uint256 i; i < _facetAddresses.length; i++) {\\n            address facetAddress = _facetAddresses[i];\\n            bytes4[] memory selectors = DiamondSaw(diamondSawAddress)\\n                .functionSelectorsForFacetAddress(facetAddress);\\n            require(selectors.length > 0, \\\"Facet is not supported by the saw\\\");\\n            cuts[i].facetAddress = _facetAddresses[i];\\n            cuts[i].functionSelectors = selectors;\\n            s.facetAddresses[facetAddress] = true;\\n        }\\n\\n        emit DiamondCut(cuts, address(0), \\\"\\\");\\n\\n        s.numFacets = _facetAddresses.length;\\n    }\\n\\n    function _purgeGasCache(bytes4[] memory selectors) internal {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        for (uint256 i; i < selectors.length; i++) {\\n            if (s.selectorGasCache[selectors[i]] != address(0)) {\\n                delete s.selectorGasCache[selectors[i]];\\n            }\\n        }\\n    }\\n\\n    function cutWithDiamondSaw(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) internal {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        uint256 newNumFacets = s.numFacets;\\n\\n        // emit the diamond cut event\\n        for (uint256 i; i < _diamondCut.length; i++) {\\n            IDiamondCut.FacetCut memory cut = _diamondCut[i];\\n            bytes4[] memory selectors = DiamondSaw(s.diamondSawAddress)\\n                .functionSelectorsForFacetAddress(cut.facetAddress);\\n\\n            require(selectors.length > 0, \\\"Facet is not supported by the saw\\\");\\n            require(\\n                selectors.length == cut.functionSelectors.length,\\n                \\\"You can only modify all selectors at once with diamond saw\\\"\\n            );\\n\\n            // NOTE we override the passed selectors after validating the length matches\\n            // With diamond saw we can only add / remove all selectors for a given facet\\n            cut.functionSelectors = selectors;\\n\\n            // if the address is already in the facet map\\n            // remove it and remove all the selectors\\n            // otherwise add the selectors\\n            if (s.facetAddresses[cut.facetAddress]) {\\n                require(\\n                    cut.action == IDiamondCut.FacetCutAction.Remove,\\n                    \\\"Can only remove existing facet selectors\\\"\\n                );\\n                delete s.facetAddresses[cut.facetAddress];\\n                _purgeGasCache(selectors);\\n                newNumFacets -= 1;\\n            } else {\\n                require(\\n                    cut.action == IDiamondCut.FacetCutAction.Add,\\n                    \\\"Can only add non-existing facet selectors\\\"\\n                );\\n                s.facetAddresses[cut.facetAddress] = true;\\n                newNumFacets += 1;\\n            }\\n        }\\n\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n\\n        // call the init function\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCloneLib: _init function reverted\\\");\\n            }\\n        }\\n\\n        s.numFacets = newNumFacets;\\n    }\\n\\n    function upgradeDiamondSaw(\\n        address _upgradeSawAddress,\\n        address[] calldata _oldFacetAddresses,\\n        address[] calldata _newFacetAddresses,\\n        address _init,\\n        bytes calldata _calldata\\n    ) internal {\\n        require(\\n            !isImmutable(),\\n            \\\"Cannot upgrade saw during immutability window\\\"\\n        );\\n        require(\\n            _upgradeSawAddress != address(0),\\n            \\\"Cannot set saw to zero address\\\"\\n        );\\n\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        require(\\n            _oldFacetAddresses.length == s.numFacets,\\n            \\\"Must remove all facets to upgrade saw\\\"\\n        );\\n\\n        DiamondSaw oldSawInstance = DiamondSaw(s.diamondSawAddress);\\n\\n        require(\\n            oldSawInstance.isUpgradeSawSupported(_upgradeSawAddress),\\n            \\\"Upgrade saw is not supported\\\"\\n        );\\n        DiamondSaw newSawInstance = DiamondSaw(_upgradeSawAddress);\\n\\n        IDiamondCut.FacetCut[] memory cuts = new IDiamondCut.FacetCut[](\\n            _oldFacetAddresses.length + _newFacetAddresses.length\\n        );\\n\\n        for (\\n            uint256 i;\\n            i < _oldFacetAddresses.length + _newFacetAddresses.length;\\n            i++\\n        ) {\\n            if (i < _oldFacetAddresses.length) {\\n                address facetAddress = _oldFacetAddresses[i];\\n                require(\\n                    s.facetAddresses[facetAddress],\\n                    \\\"Cannot remove facet that is not supported\\\"\\n                );\\n                bytes4[] memory selectors = oldSawInstance\\n                    .functionSelectorsForFacetAddress(facetAddress);\\n                require(\\n                    selectors.length > 0,\\n                    \\\"Facet is not supported by the saw\\\"\\n                );\\n\\n                cuts[i].action = IDiamondCut.FacetCutAction.Remove;\\n                cuts[i].facetAddress = facetAddress;\\n                cuts[i].functionSelectors = selectors;\\n\\n                _purgeGasCache(selectors);\\n                delete s.facetAddresses[facetAddress];\\n            } else {\\n                address facetAddress = _newFacetAddresses[\\n                    i - _oldFacetAddresses.length\\n                ];\\n                bytes4[] memory selectors = newSawInstance\\n                    .functionSelectorsForFacetAddress(facetAddress);\\n                require(\\n                    selectors.length > 0,\\n                    \\\"Facet is not supported by the new saw\\\"\\n                );\\n\\n                cuts[i].action = IDiamondCut.FacetCutAction.Add;\\n                cuts[i].facetAddress = facetAddress;\\n                cuts[i].functionSelectors = selectors;\\n\\n                s.facetAddresses[facetAddress] = true;\\n            }\\n        }\\n\\n        emit DiamondCut(cuts, _init, _calldata);\\n\\n        // actually update the diamond saw address\\n        s.numFacets = _newFacetAddresses.length;\\n        s.diamondSawAddress = _upgradeSawAddress;\\n\\n        // call the init function\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCloneLib: _init function reverted\\\");\\n            }\\n        }\\n    }\\n\\n    function setGasCacheForSelector(bytes4 selector) internal {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        address facetAddress = DiamondSaw(s.diamondSawAddress)\\n            .facetAddressForSelector(selector);\\n        require(facetAddress != address(0), \\\"Facet not supported\\\");\\n        require(s.facetAddresses[facetAddress], \\\"Facet not included in clone\\\");\\n\\n        s.selectorGasCache[selector] = facetAddress;\\n    }\\n\\n    function setImmutableUntilBlock(uint256 blockNum) internal {\\n        diamondCloneStorage().immutableUntilBlock = blockNum;\\n    }\\n\\n    function isImmutable() internal view returns (bool) {\\n        return block.number < diamondCloneStorage().immutableUntilBlock;\\n    }\\n\\n    function immutableUntilBlock() internal view returns (uint256) {\\n        return diamondCloneStorage().immutableUntilBlock;\\n    }\\n\\n    /**\\n     * LOUPE FUNCTIONALITY BELOW\\n     */\\n\\n    function facets()\\n        internal\\n        view\\n        returns (IDiamondLoupe.Facet[] memory facets_)\\n    {\\n        DiamondCloneLib.DiamondCloneStorage storage ds = DiamondCloneLib\\n            .diamondCloneStorage();\\n        IDiamondLoupe.Facet[] memory allSawFacets = DiamondSaw(\\n            ds.diamondSawAddress\\n        ).allFacetsWithSelectors();\\n\\n        uint256 copyIndex = 0;\\n\\n        facets_ = new IDiamondLoupe.Facet[](ds.numFacets);\\n\\n        for (uint256 i; i < allSawFacets.length; i++) {\\n            if (ds.facetAddresses[allSawFacets[i].facetAddress]) {\\n                facets_[copyIndex] = allSawFacets[i];\\n                copyIndex++;\\n            }\\n        }\\n    }\\n\\n    function facetAddresses()\\n        internal\\n        view\\n        returns (address[] memory facetAddresses_)\\n    {\\n        DiamondCloneLib.DiamondCloneStorage storage ds = DiamondCloneLib\\n            .diamondCloneStorage();\\n\\n        address[] memory allSawFacetAddresses = DiamondSaw(ds.diamondSawAddress)\\n            .allFacetAddresses();\\n        facetAddresses_ = new address[](ds.numFacets);\\n\\n        uint256 copyIndex = 0;\\n\\n        for (uint256 i; i < allSawFacetAddresses.length; i++) {\\n            if (ds.facetAddresses[allSawFacetAddresses[i]]) {\\n                facetAddresses_[copyIndex] = allSawFacetAddresses[i];\\n                copyIndex++;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DiamondSaw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IDiamondCut} from \\\"./facets/DiamondClone/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"./facets/DiamondClone/IDiamondLoupe.sol\\\";\\nimport {DiamondSawLib} from \\\"./libraries/DiamondSawLib.sol\\\";\\nimport {BasicAccessControlFacet} from \\\"./facets/AccessControl/BasicAccessControlFacet.sol\\\";\\nimport {AccessControlModifiers} from \\\"./facets/AccessControl/AccessControlModifiers.sol\\\";\\nimport {AccessControlLib} from \\\"./facets/AccessControl/AccessControlLib.sol\\\";\\nimport {PausableFacet} from \\\"./facets/Pausable/PausableFacet.sol\\\";\\nimport {PausableModifiers} from \\\"./facets/Pausable/PausableModifiers.sol\\\";\\n\\n/**\\n * DiamondSaw is meant to be used as a\\n * Singleton to \\\"cut\\\" many minimal diamond clones\\n * In a gas efficient manner for deployments.\\n *\\n * This is accomplished by handling the storage intensive\\n * selector mappings in one contract, \\\"the saw\\\" instead of in each diamond.\\n *\\n * Adding a new facet to the saw enables new diamond \\\"patterns\\\"\\n *\\n * This should be used if you\\n *\\n * 1. Need cheap deployments of many similar cloned diamonds that\\n * utilize the same pre-deployed facets\\n *\\n * 2. Are okay with gas overhead on write txn to the diamonds\\n * to communicate with the singleton (saw) to fetch selectors\\n *\\n */\\ncontract DiamondSaw is\\n    BasicAccessControlFacet,\\n    AccessControlModifiers,\\n    PausableFacet,\\n    PausableModifiers\\n{\\n    constructor() {\\n        AccessControlLib._transferOwnership(msg.sender);\\n    }\\n\\n    function addFacetPattern(\\n        IDiamondCut.FacetCut[] calldata _facetAdds,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external onlyOwner whenNotPaused {\\n        DiamondSawLib.diamondCutAddOnly(_facetAdds, _init, _calldata);\\n    }\\n\\n    // if a facet has no selectors, it is not supported\\n    function checkFacetSupported(address _facetAddress) external view {\\n        DiamondSawLib.checkFacetSupported(_facetAddress);\\n    }\\n\\n    function facetAddressForSelector(bytes4 selector)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return\\n            DiamondSawLib\\n                .diamondSawStorage()\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n    }\\n\\n    function functionSelectorsForFacetAddress(address facetAddress)\\n        external\\n        view\\n        returns (bytes4[] memory)\\n    {\\n        return\\n            DiamondSawLib\\n                .diamondSawStorage()\\n                .facetFunctionSelectors[facetAddress]\\n                .functionSelectors;\\n    }\\n\\n    function allFacetAddresses() external view returns (address[] memory) {\\n        return DiamondSawLib.diamondSawStorage().facetAddresses;\\n    }\\n\\n    function allFacetsWithSelectors()\\n        external\\n        view\\n        returns (IDiamondLoupe.Facet[] memory _facetsWithSelectors)\\n    {\\n        DiamondSawLib.DiamondSawStorage storage ds = DiamondSawLib\\n            .diamondSawStorage();\\n\\n        uint256 numFacets = ds.facetAddresses.length;\\n        _facetsWithSelectors = new IDiamondLoupe.Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            _facetsWithSelectors[i].facetAddress = facetAddress_;\\n            _facetsWithSelectors[i].functionSelectors = ds\\n                .facetFunctionSelectors[facetAddress_]\\n                .functionSelectors;\\n        }\\n    }\\n\\n    function facetAddressForInterface(bytes4 _interface)\\n        external\\n        view\\n        returns (address)\\n    {\\n        DiamondSawLib.DiamondSawStorage storage ds = DiamondSawLib\\n            .diamondSawStorage();\\n        return ds.interfaceToFacet[_interface];\\n    }\\n\\n    function setFacetForERC165Interface(bytes4 _interface, address _facet)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.checkFacetSupported(_facet);\\n        require(\\n            DiamondSawLib.diamondSawStorage().interfaceToFacet[_interface] ==\\n                address(0),\\n            \\\"Only one facet can implement an interface\\\"\\n        );\\n        DiamondSawLib.diamondSawStorage().interfaceToFacet[_interface] = _facet;\\n    }\\n\\n    function approveTransferHookSelector(bytes4 selector)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.approveTransferHookSelector(selector);\\n    }\\n\\n    function approveTokenURISelector(bytes4 selector)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.approveTokenURISelector(selector);\\n    }\\n\\n    function isTokenURISelectorApproved(bytes4 selector)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            DiamondSawLib.diamondSawStorage().approvedTokenURIFunctionSelectors[\\n                selector\\n            ];\\n    }\\n\\n    function isTransferHookSelectorApproved(bytes4 selector)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            DiamondSawLib\\n                .diamondSawStorage()\\n                .approvedTransferHookFunctionSelectors[selector];\\n    }\\n\\n    function setUpgradeSawAddress(address _upgradeSaw)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.setUpgradeSawAddress(_upgradeSaw);\\n    }\\n\\n    function isUpgradeSawSupported(address _upgradeSaw)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            DiamondSawLib.diamondSawStorage().supportedSawAddresses[\\n                _upgradeSaw\\n            ];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DiamondSawLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDiamondCut} from \\\"../facets/DiamondClone/IDiamondCut.sol\\\";\\n\\nlibrary DiamondSawLib {\\n    bytes32 constant DIAMOND_SAW_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.saw.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondSawStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a facet implements a given interface\\n        // Note: this works because no interface can be implemented by\\n        // two different facets with diamond saw because no\\n        // selector overlap is permitted!!\\n        mapping(bytes4 => address) interfaceToFacet;\\n        // for transfer hooks, selectors must be approved in the saw\\n        mapping(bytes4 => bool) approvedTransferHookFunctionSelectors;\\n        // for tokenURI overrides, selectors must be approved in the saw\\n        mapping(bytes4 => bool) approvedTokenURIFunctionSelectors;\\n        // Saw contracts which clients can upgrade to\\n        mapping(address => bool) supportedSawAddresses;\\n    }\\n\\n    function diamondSawStorage()\\n        internal\\n        pure\\n        returns (DiamondSawStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_SAW_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    // only supports adding new selectors\\n    function diamondCutAddOnly(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            require(\\n                _diamondCut[facetIndex].action ==\\n                    IDiamondCut.FacetCutAction.Add,\\n                \\\"Only add action supported in saw\\\"\\n            );\\n            require(\\n                !isFacetSupported(_diamondCut[facetIndex].facetAddress),\\n                \\\"Facet already exists in saw\\\"\\n            );\\n            addFunctions(\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondSawStorage storage ds = diamondSawStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"Cannot add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function addFacet(DiamondSawStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondSawStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    function setFacetSupportsInterface(bytes4 _interface, address _facetAddress)\\n        internal\\n    {\\n        checkFacetSupported(_facetAddress);\\n        DiamondSawStorage storage ds = diamondSawStorage();\\n        ds.interfaceToFacet[_interface] = _facetAddress;\\n    }\\n\\n    function isFacetSupported(address _facetAddress)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            diamondSawStorage()\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors\\n                .length > 0;\\n    }\\n\\n    function checkFacetSupported(address _facetAddress) internal view {\\n        require(isFacetSupported(_facetAddress), \\\"Facet not supported\\\");\\n    }\\n\\n    function approveTransferHookSelector(bytes4 transferHookSelector) internal {\\n        DiamondSawStorage storage s = diamondSawStorage();\\n        address facetImplementation = s\\n            .selectorToFacetAndPosition[transferHookSelector]\\n            .facetAddress;\\n\\n        require(\\n            facetImplementation != address(0),\\n            \\\"Cannot set transfer hook to unsupported selector\\\"\\n        );\\n\\n        s.approvedTransferHookFunctionSelectors[transferHookSelector] = true;\\n    }\\n\\n    function approveTokenURISelector(bytes4 tokenURISelector) internal {\\n        DiamondSawStorage storage s = diamondSawStorage();\\n        address facetImplementation = s\\n            .selectorToFacetAndPosition[tokenURISelector]\\n            .facetAddress;\\n        require(\\n            facetImplementation != address(0),\\n            \\\"Cannot set token uri override to unsupported selector\\\"\\n        );\\n        s.approvedTokenURIFunctionSelectors[tokenURISelector] = true;\\n    }\\n\\n    function setUpgradeSawAddress(address _upgradeSaw) internal {\\n        diamondSawStorage().supportedSawAddresses[_upgradeSaw] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AccessControl/BasicAccessControlFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./AccessControlLib.sol\\\";\\nimport {PausableLib} from \\\"../Pausable/PausableLib.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract BasicAccessControlFacet is Context {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return AccessControlLib.accessControlStorage()._owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n        AccessControlLib._transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        AccessControlLib._transferOwnership(newOwner);\\n    }\\n\\n    function grantOperator(address _operator) public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n\\n        AccessControlLib.grantRole(AccessControlLib.OPERATOR_ROLE, _operator);\\n    }\\n\\n    function revokeOperator(address _operator) public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n        AccessControlLib.revokeRole(AccessControlLib.OPERATOR_ROLE, _operator);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AccessControl/AccessControlLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AccessControlLib {\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 constant OPERATOR_ROLE = keccak256(\\\"operator.role\\\");\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        address _owner;\\n        mapping(bytes32 => RoleData) _roles;\\n    }\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION =\\n        keccak256(\\\"Access.Control.library.storage\\\");\\n\\n    function accessControlStorage()\\n        internal\\n        pure\\n        returns (AccessControlStorage storage s)\\n    {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return accessControlStorage()._owner == msg.sender;\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return accessControlStorage()._owner;\\n    }\\n\\n    function _enforceOwner() internal view {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = accessControlStorage()._owner;\\n        accessControlStorage()._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return accessControlStorage()._roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * NOTE: Modified to always pass if the account is the owner\\n     * and to always fail if ownership is revoked!\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        address ownerAddress = accessControlStorage()._owner;\\n        require(ownerAddress != address(0), \\\"Admin functionality revoked\\\");\\n        if (!hasRole(role, account) && account != ownerAddress) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return accessControlStorage()._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        internal\\n        onlyRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        internal\\n        onlyRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) internal {\\n        require(\\n            account == msg.sender,\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        accessControlStorage()._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            accessControlStorage()._roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            accessControlStorage()._roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/Pausable/PausableFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlModifiers} from \\\"../AccessControl/AccessControlModifiers.sol\\\";\\nimport {PausableLib} from \\\"./PausableLib.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableFacet is AccessControlModifiers {\\n    function pause() public onlyOwner {\\n        PausableLib._pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        PausableLib._unpause();\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return PausableLib._paused();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/Pausable/PausableLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nerror ContractPaused();\\nerror ContractUnpaused();\\n\\nlibrary PausableLib {\\n    bytes32 constant PAUSABLE_STORAGE_POSITION =\\n        keccak256(\\\"pausable.facet.storage\\\");\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    function pausableStorage()\\n        internal\\n        pure\\n        returns (PausableStorage storage s)\\n    {\\n        bytes32 position = PAUSABLE_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function _paused() internal view returns (bool) {\\n        return pausableStorage()._paused;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal {\\n        PausableStorage storage s = pausableStorage();\\n        if (s._paused) revert ContractPaused();\\n        s._paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal {\\n        PausableStorage storage s = pausableStorage();\\n        if (!s._paused) revert ContractUnpaused();\\n        s._paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    function enforceUnpaused() internal view {\\n        if (pausableStorage()._paused) revert ContractPaused();\\n    }\\n\\n    function enforcePaused() internal view {\\n        if (!pausableStorage()._paused) revert ContractUnpaused();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/PaymentSplitter/PaymentSplitterLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This library allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\nlibrary PaymentSplitterLib {\\n    bytes32 constant PAYMENT_SPLITTER_STORAGE_POSITION =\\n        keccak256(\\\"payment.splitter.facet.storage\\\");\\n\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(\\n        IERC20 indexed token,\\n        address to,\\n        uint256 amount\\n    );\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    struct PaymentSplitterStorage {\\n        uint256 _totalShares;\\n        uint256 _totalReleased;\\n        mapping(address => uint256) _shares;\\n        mapping(address => uint256) _released;\\n        address[] _payees;\\n        mapping(IERC20 => uint256) _erc20TotalReleased;\\n        mapping(IERC20 => mapping(address => uint256)) _erc20Released;\\n    }\\n\\n    function paymentSplitterStorage()\\n        internal\\n        pure\\n        returns (PaymentSplitterStorage storage s)\\n    {\\n        bytes32 position = PAYMENT_SPLITTER_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function setPaymentSplits(address[] memory payees, uint256[] memory shares_)\\n        internal\\n    {\\n        require(\\n            payees.length == shares_.length,\\n            \\\"PaymentSplitter: payees and shares length mismatch\\\"\\n        );\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    function getPaymentSplits()\\n        internal\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        PaymentSplitterStorage storage s = paymentSplitterStorage();\\n        uint256[] memory allShares = new uint256[](s._payees.length);\\n\\n        for (uint256 i; i < s._payees.length; i++) {\\n            allShares[i] = s._shares[s._payees[i]];\\n        }\\n\\n        return (s._payees, allShares);\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    function receivePayment() internal {\\n        emit PaymentReceived(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() internal view returns (uint256) {\\n        return paymentSplitterStorage()._totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() internal view returns (uint256) {\\n        return paymentSplitterStorage()._totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) internal view returns (uint256) {\\n        return paymentSplitterStorage()._erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) internal view returns (uint256) {\\n        return paymentSplitterStorage()._shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) internal view returns (uint256) {\\n        return paymentSplitterStorage()._released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return paymentSplitterStorage()._erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) internal view returns (address) {\\n        return paymentSplitterStorage()._payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) internal {\\n        PaymentSplitterStorage storage s = paymentSplitterStorage();\\n        require(\\n            s._shares[account] > 0,\\n            \\\"PaymentSplitter: account has no shares\\\"\\n        );\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(\\n            account,\\n            totalReceived,\\n            released(account)\\n        );\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        s._released[account] += payment;\\n        s._totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) internal {\\n        PaymentSplitterStorage storage s = paymentSplitterStorage();\\n        require(\\n            s._shares[account] > 0,\\n            \\\"PaymentSplitter: account has no shares\\\"\\n        );\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) +\\n            totalReleased(token);\\n        uint256 payment = _pendingPayment(\\n            account,\\n            totalReceived,\\n            released(token, account)\\n        );\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        s._erc20Released[token][account] += payment;\\n        s._erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) internal view returns (uint256) {\\n        PaymentSplitterStorage storage s = paymentSplitterStorage();\\n        return\\n            (totalReceived * s._shares[account]) /\\n            s._totalShares -\\n            alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) internal {\\n        require(\\n            account != address(0),\\n            \\\"PaymentSplitter: account is the zero address\\\"\\n        );\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        PaymentSplitterStorage storage s = paymentSplitterStorage();\\n        require(\\n            s._shares[account] == 0,\\n            \\\"PaymentSplitter: account already has shares\\\"\\n        );\\n\\n        s._payees.push(account);\\n        s._shares[account] = shares_;\\n        s._totalShares = s._totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DiamondInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * Author: Zac Denham\\n *\\n * This is a modification of Open Zeppelin's Initializable Util\\n * that works with diamond storage, you must pass a unique string to the\\n * modifier to avoid storage conflicts across contracts\\n *\\n * Usage: function yourInitializer() public initializer(\\\"super.unique.string\\\") {}\\n *\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract DiamondInitializable {\\n    struct DiamondInitializableStorage {\\n        bool _initialized;\\n        bool _initializing;\\n    }\\n\\n    /**\\n     * @dev Warning, you must pass a unique storage string\\n     * for each facet that inherits diamondInitializeable\\n     * or you may risk storage conflicts\\n     */\\n    function getDiamondInitializableStorage(string memory uniqueStorageString) internal pure returns (DiamondInitializableStorage storage s) {\\n        bytes32 position = keccak256(abi.encodePacked(\\\"diamond.initializable.\\\", uniqueStorageString));\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer(string memory uniqueStorageString) {\\n        DiamondInitializableStorage storage s = getDiamondInitializableStorage(uniqueStorageString);\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(s._initializing ? _isConstructor() : !s._initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !s._initializing;\\n        if (isTopLevelCall) {\\n            s._initializing = true;\\n            s._initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            s._initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing(string memory uniqueStorageString) {\\n        require(getDiamondInitializableStorage(uniqueStorageString)._initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxMintable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxMintableLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxMintableTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetaDataLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allTokensForOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyaltyFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"devMintUnsafe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"devMintWithTokenURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"folderStorageBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTokenURIOverrideSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setFolderStorageBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintable\",\"type\":\"uint256\"}],\"name\":\"setMaxMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleState\",\"type\":\"uint256\"}],\"name\":\"setSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"_defaultRoyalty\",\"type\":\"uint96\"}],\"name\":\"setTokenMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setTokenStorageBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"setTokenURIOverrideSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorageBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIOverrideSelector\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BaseNFTFacet", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}