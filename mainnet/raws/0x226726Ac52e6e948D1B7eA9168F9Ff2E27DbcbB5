{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Snapshot.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Arrays.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/implementation/ExpandedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./MultiRole.sol\\\";\\nimport \\\"../interfaces/ExpandedIERC20.sol\\\";\\n\\n/**\\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\\n * be the owner who is capable of adding new roles.\\n */\\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\\n    enum Roles {\\n        // Can set the minter and burner.\\n        Owner,\\n        // Addresses that can mint new tokens.\\n        Minter,\\n        // Addresses that can burn tokens that address owns.\\n        Burner\\n    }\\n\\n    uint8 _decimals;\\n\\n    /**\\n     * @notice Constructs the ExpandedERC20.\\n     * @param _tokenName The name which describes the new token.\\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\n     * @param _tokenDecimals The number of decimals to define token precision.\\n     */\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 _tokenDecimals\\n    ) ERC20(_tokenName, _tokenSymbol) {\\n        _decimals = _tokenDecimals;\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\\n    }\\n\\n    function decimals() public view virtual override(ERC20) returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\\n     * @param recipient address to mint to.\\n     * @param value amount of tokens to mint.\\n     * @return True if the mint succeeded, or False.\\n     */\\n    function mint(address recipient, uint256 value)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.Minter))\\n        returns (bool)\\n    {\\n        _mint(recipient, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `msg.sender`.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\\n        _burn(msg.sender, value);\\n    }\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     * @return True if the burn succeeded, or False.\\n     */\\n    function burnFrom(address recipient, uint256 value)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.Burner))\\n        returns (bool)\\n    {\\n        _burn(recipient, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add Minter role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The address to which the Minter role is added.\\n     */\\n    function addMinter(address account) external virtual override {\\n        addMember(uint256(Roles.Minter), account);\\n    }\\n\\n    /**\\n     * @notice Add Burner role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The address to which the Burner role is added.\\n     */\\n    function addBurner(address account) external virtual override {\\n        addMember(uint256(Roles.Burner), account);\\n    }\\n\\n    /**\\n     * @notice Reset Owner role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The new holder of the Owner role.\\n     */\\n    function resetOwner(address account) external virtual override {\\n        resetMember(uint256(Roles.Owner), account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/implementation/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/implementation/Lockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n */\\ncontract Lockable {\\n    bool private _notEntered;\\n\\n    constructor() {\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\n        // refund coming into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\n     * function that does the actual state modification.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\n    // then call `_postEntranceReset()`.\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/implementation/MultiRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Exclusive {\\n    struct RoleMembership {\\n        address member;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.member == memberToCheck;\\n    }\\n\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\n        roleMembership.member = newMember;\\n    }\\n\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\n        return roleMembership.member;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\n        resetMember(roleMembership, initialMember);\\n    }\\n}\\n\\nlibrary Shared {\\n    struct RoleMembership {\\n        mapping(address => bool) members;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.members[memberToCheck];\\n    }\\n\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\n        roleMembership.members[memberToAdd] = true;\\n    }\\n\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\n        roleMembership.members[memberToRemove] = false;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\n            addMember(roleMembership, initialMembers[i]);\\n        }\\n    }\\n}\\n\\n/**\\n * @title Base class to manage permissions for the derived class.\\n */\\nabstract contract MultiRole {\\n    using Exclusive for Exclusive.RoleMembership;\\n    using Shared for Shared.RoleMembership;\\n\\n    enum RoleType { Invalid, Exclusive, Shared }\\n\\n    struct Role {\\n        uint256 managingRole;\\n        RoleType roleType;\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\n        Shared.RoleMembership sharedRoleMembership;\\n    }\\n\\n    mapping(uint256 => Role) private roles;\\n\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\n     */\\n    modifier onlyRoleHolder(uint256 roleId) {\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\n     */\\n    modifier onlyRoleManager(uint256 roleId) {\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\n     */\\n    modifier onlyExclusive(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\n     */\\n    modifier onlyShared(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Whether `memberToCheck` is a member of roleId.\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\n     * @param roleId the Role to check.\\n     * @param memberToCheck the address to check.\\n     * @return True if `memberToCheck` is a member of `roleId`.\\n     */\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\n        Role storage role = roles[roleId];\\n        if (role.roleType == RoleType.Exclusive) {\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\n        } else if (role.roleType == RoleType.Shared) {\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\n        }\\n        revert(\\\"Invalid roleId\\\");\\n    }\\n\\n    /**\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\n     * initialized, ExclusiveRole.\\n     * @param roleId the ExclusiveRole membership to modify.\\n     * @param newMember the new ExclusiveRole member.\\n     */\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\n     * @param roleId the ExclusiveRole membership to check.\\n     * @return the address of the current ExclusiveRole member.\\n     */\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\n    }\\n\\n    /**\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param newMember the new SharedRole member.\\n     */\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param memberToRemove the current SharedRole member to remove.\\n     */\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes caller from the role, `roleId`.\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\n     * initialized, SharedRole.\\n     * @param roleId the SharedRole membership to modify.\\n     */\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is not initialized.\\n     */\\n    modifier onlyValidRole(uint256 roleId) {\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is initialized.\\n     */\\n    modifier onlyInvalidRole(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMembers` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createSharedRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address[] memory initialMembers\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Shared;\\n        role.managingRole = managingRoleId;\\n        role.sharedRoleMembership.init(initialMembers);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMember` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createExclusiveRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address initialMember\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Exclusive;\\n        role.managingRole = managingRoleId;\\n        role.exclusiveRoleMembership.init(initialMember);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/implementation/Testable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view virtual returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/implementation/Timer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() {\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the currentTime variable set in the Timer.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/ExpandedIERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes burn and mint methods.\\n */\\nabstract contract ExpandedIERC20 is IERC20 {\\n    /**\\n     * @notice Burns a specific amount of the caller's tokens.\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\n     */\\n    function burn(uint256 value) external virtual;\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\n\\n    /**\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n     */\\n    function mint(address to, uint256 value) external virtual returns (bool);\\n\\n    function addMinter(address account) external virtual;\\n\\n    function addBurner(address account) external virtual;\\n\\n    function resetOwner(address account) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/AdminIdentifierLib.sol\": {\r\n      \"content\": \"/**\\n * @title Library to construct admin identifiers.\\n */\\nlibrary AdminIdentifierLib {\\n    // Returns a UTF-8 identifier representing a particular admin proposal.\\n    // The identifier is of the form \\\"Admin n\\\", where n is the proposal id provided.\\n    function _constructIdentifier(uint256 id) internal pure returns (bytes32) {\\n        bytes32 bytesId = _uintToUtf8(id);\\n        return _addPrefix(bytesId, \\\"Admin \\\", 6);\\n    }\\n\\n    // This method converts the integer `v` into a base-10, UTF-8 representation stored in a `bytes32` type.\\n    // If the input cannot be represented by 32 base-10 digits, it returns only the highest 32 digits.\\n    // This method is based off of this code: https://ethereum.stackexchange.com/a/6613/47801.\\n    function _uintToUtf8(uint256 v) internal pure returns (bytes32) {\\n        bytes32 ret;\\n        if (v == 0) {\\n            // Handle 0 case explicitly.\\n            ret = \\\"0\\\";\\n        } else {\\n            // Constants.\\n            uint256 bitsPerByte = 8;\\n            uint256 base = 10; // Note: the output should be base-10. The below implementation will not work for bases > 10.\\n            uint256 utf8NumberOffset = 48;\\n            while (v > 0) {\\n                // Downshift the entire bytes32 to allow the new digit to be added at the \\\"front\\\" of the bytes32, which\\n                // translates to the beginning of the UTF-8 representation.\\n                ret = ret >> bitsPerByte;\\n\\n                // Separate the last digit that remains in v by modding by the base of desired output representation.\\n                uint256 leastSignificantDigit = v % base;\\n\\n                // Digits 0-9 are represented by 48-57 in UTF-8, so an offset must be added to create the character.\\n                bytes32 utf8Digit = bytes32(leastSignificantDigit + utf8NumberOffset);\\n\\n                // The top byte of ret has already been cleared to make room for the new digit.\\n                // Upshift by 31 bytes to put it in position, and OR it with ret to leave the other characters untouched.\\n                ret |= utf8Digit << (31 * bitsPerByte);\\n\\n                // Divide v by the base to remove the digit that was just added.\\n                v /= base;\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    // This method takes two UTF-8 strings represented as bytes32 and outputs one as a prefixed by the other.\\n    // `input` is the UTF-8 that should have the prefix prepended.\\n    // `prefix` is the UTF-8 that should be prepended onto input.\\n    // `prefixLength` is number of UTF-8 characters represented by `prefix`.\\n    // Notes:\\n    // 1. If the resulting UTF-8 is larger than 32 characters, then only the first 32 characters will be represented\\n    //    by the bytes32 output.\\n    // 2. If `prefix` has more characters than `prefixLength`, the function will produce an invalid result.\\n    function _addPrefix(\\n        bytes32 input,\\n        bytes32 prefix,\\n        uint256 prefixLength\\n    ) internal pure returns (bytes32) {\\n        // Downshift `input` to open space at the \\\"front\\\" of the bytes32\\n        bytes32 shiftedInput = input >> (prefixLength * 8);\\n        return shiftedInput | prefix;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\n */\\nlibrary OracleInterfaces {\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\n    bytes32 public constant Store = \\\"Store\\\";\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\n    bytes32 public constant Registry = \\\"Registry\\\";\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\n}\\n\\n/**\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\n */\\nlibrary OptimisticOracleConstraints {\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/Finder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples of interfaces with implementations that Finder locates are the Oracle and Store interfaces.\\n */\\ncontract Finder is FinderInterface, Ownable {\\n    mapping(bytes32 => address) public interfacesImplemented;\\n\\n    event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress);\\n\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the implementation contract.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        interfacesImplemented[interfaceName] = implementationAddress;\\n\\n        emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n    }\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the defined interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view override returns (address) {\\n        address implementationAddress = interfacesImplemented[interfaceName];\\n        require(implementationAddress != address(0x0), \\\"Implementation not found\\\");\\n        return implementationAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/Governor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\nimport \\\"../../common/implementation/Testable.sol\\\";\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./AdminIdentifierLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Takes proposals for certain governance actions and allows UMA token holders to vote on them.\\n */\\ncontract Governor is MultiRole, Testable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    /****************************************\\n     *     INTERNAL VARIABLES AND STORAGE   *\\n     ****************************************/\\n\\n    enum Roles {\\n        Owner, // Can set the proposer.\\n        Proposer // Address that can make proposals.\\n    }\\n\\n    struct Transaction {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    struct Proposal {\\n        Transaction[] transactions;\\n        uint256 requestTime;\\n    }\\n\\n    FinderInterface private finder;\\n    Proposal[] public proposals;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    // Emitted when a new proposal is created.\\n    event NewProposal(uint256 indexed id, Transaction[] transactions);\\n\\n    // Emitted when an existing proposal is executed.\\n    event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);\\n\\n    /**\\n     * @notice Construct the Governor contract.\\n     * @param _finderAddress keeps track of all contracts within the system based on their interfaceName.\\n     * @param _startingId the initial proposal id that the contract will begin incrementing from.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(\\n        address _finderAddress,\\n        uint256 _startingId,\\n        address _timerAddress\\n    ) Testable(_timerAddress) {\\n        finder = FinderInterface(_finderAddress);\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        _createExclusiveRole(uint256(Roles.Proposer), uint256(Roles.Owner), msg.sender);\\n\\n        // Ensure the startingId is not set unreasonably high to avoid it being set such that new proposals overwrite\\n        // other storage slots in the contract.\\n        uint256 maxStartingId = 10**18;\\n        require(_startingId <= maxStartingId, \\\"Cannot set startingId larger than 10^18\\\");\\n\\n        // This just sets the initial length of the array to the startingId since modifying length directly has been\\n        // disallowed in solidity 0.6.\\n        assembly {\\n            sstore(proposals.slot, _startingId)\\n        }\\n    }\\n\\n    /****************************************\\n     *          PROPOSAL ACTIONS            *\\n     ****************************************/\\n\\n    /**\\n     * @notice Proposes a new governance action. Can only be called by the holder of the Proposer role.\\n     * @param transactions list of transactions that are being proposed.\\n     * @dev You can create the data portion of each transaction by doing the following:\\n     * ```\\n     * const truffleContractInstance = await TruffleContract.deployed()\\n     * const data = truffleContractInstance.methods.methodToCall(arg1, arg2).encodeABI()\\n     * ```\\n     * Note: this method must be public because of a solidity limitation that\\n     * disallows structs arrays to be passed to external functions.\\n     */\\n    function propose(Transaction[] memory transactions) public onlyRoleHolder(uint256(Roles.Proposer)) {\\n        uint256 id = proposals.length;\\n        uint256 time = getCurrentTime();\\n\\n        // Note: doing all of this array manipulation manually is necessary because directly setting an array of\\n        // structs in storage to an an array of structs in memory is currently not implemented in solidity :/.\\n\\n        // Add a zero-initialized element to the proposals array.\\n        proposals.push();\\n\\n        // Initialize the new proposal.\\n        Proposal storage proposal = proposals[id];\\n        proposal.requestTime = time;\\n\\n        // Initialize the transaction array.\\n        for (uint256 i = 0; i < transactions.length; i++) {\\n            require(transactions[i].to != address(0), \\\"The `to` address cannot be 0x0\\\");\\n            // If the transaction has any data with it the recipient must be a contract, not an EOA.\\n            if (transactions[i].data.length > 0) {\\n                require(transactions[i].to.isContract(), \\\"EOA can't accept tx with data\\\");\\n            }\\n            proposal.transactions.push(transactions[i]);\\n        }\\n\\n        bytes32 identifier = AdminIdentifierLib._constructIdentifier(id);\\n\\n        // Request a vote on this proposal in the DVM.\\n        OracleInterface oracle = _getOracle();\\n        IdentifierWhitelistInterface supportedIdentifiers = _getIdentifierWhitelist();\\n        supportedIdentifiers.addSupportedIdentifier(identifier);\\n\\n        oracle.requestPrice(identifier, time);\\n        supportedIdentifiers.removeSupportedIdentifier(identifier);\\n\\n        emit NewProposal(id, transactions);\\n    }\\n\\n    /**\\n     * @notice Executes a proposed governance action that has been approved by voters.\\n     * @dev This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\\n     * @param id unique id for the executed proposal.\\n     * @param transactionIndex unique transaction index for the executed proposal.\\n     */\\n    function executeProposal(uint256 id, uint256 transactionIndex) external payable {\\n        Proposal storage proposal = proposals[id];\\n        int256 price = _getOracle().getPrice(AdminIdentifierLib._constructIdentifier(id), proposal.requestTime);\\n\\n        Transaction memory transaction = proposal.transactions[transactionIndex];\\n\\n        require(\\n            transactionIndex == 0 || proposal.transactions[transactionIndex.sub(1)].to == address(0),\\n            \\\"Previous tx not yet executed\\\"\\n        );\\n        require(transaction.to != address(0), \\\"Tx already executed\\\");\\n        require(price != 0, \\\"Proposal was rejected\\\");\\n        require(msg.value == transaction.value, \\\"Must send exact amount of ETH\\\");\\n\\n        // Delete the transaction before execution to avoid any potential re-entrancy issues.\\n        delete proposal.transactions[transactionIndex];\\n\\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \\\"Tx execution failed\\\");\\n\\n        emit ProposalExecuted(id, transactionIndex);\\n    }\\n\\n    /****************************************\\n     *       GOVERNOR STATE GETTERS         *\\n     ****************************************/\\n\\n    /**\\n     * @notice Gets the total number of proposals (includes executed and non-executed).\\n     * @return uint256 representing the current number of proposals.\\n     */\\n    function numProposals() external view returns (uint256) {\\n        return proposals.length;\\n    }\\n\\n    /**\\n     * @notice Gets the proposal data for a particular id.\\n     * @dev after a proposal is executed, its data will be zeroed out, except for the request time.\\n     * @param id uniquely identify the identity of the proposal.\\n     * @return proposal struct containing transactions[] and requestTime.\\n     */\\n    function getProposal(uint256 id) external view returns (Proposal memory) {\\n        return proposals[id];\\n    }\\n\\n    /****************************************\\n     *      PRIVATE GETTERS AND FUNCTIONS   *\\n     ****************************************/\\n\\n    function _executeCall(\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private returns (bool) {\\n        // Mostly copied from:\\n        // solhint-disable-next-line max-line-length\\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\\n        // solhint-disable-next-line no-inline-assembly\\n\\n        bool success;\\n        assembly {\\n            let inputData := add(data, 0x20)\\n            let inputDataSize := mload(data)\\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\\n        }\\n        return success;\\n    }\\n\\n    function _getOracle() private view returns (OracleInterface) {\\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\n    }\\n\\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/Proposer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Finder.sol\\\";\\nimport \\\"./Governor.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./Voting.sol\\\";\\nimport \\\"./AdminIdentifierLib.sol\\\";\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Proposer contract that allows anyone to make governance proposals with a bond.\\n */\\ncontract Proposer is Ownable, Testable, Lockable {\\n    using SafeERC20 for IERC20;\\n    IERC20 public token;\\n    uint256 public bond;\\n    Governor public governor;\\n    Finder public finder;\\n\\n    struct BondedProposal {\\n        address sender;\\n        // 64 bits to save a storage slot.\\n        uint64 time;\\n        uint256 lockedBond;\\n    }\\n    mapping(uint256 => BondedProposal) public bondedProposals;\\n\\n    event BondSet(uint256 bond);\\n    event ProposalResolved(uint256 indexed id, bool success);\\n\\n    /**\\n     * @notice Construct the Proposer contract.\\n     * @param _token the ERC20 token that the bond is paid in.\\n     * @param _bond the bond amount.\\n     * @param _governor the governor contract that this contract makes proposals to.\\n     * @param _finder the finder contract used to look up addresses.\\n     * @param _timer the timer contract to control the output of getCurrentTime(). Set to 0x0 if in production.\\n     */\\n    constructor(\\n        IERC20 _token,\\n        uint256 _bond,\\n        Governor _governor,\\n        Finder _finder,\\n        address _timer\\n    ) Testable(_timer) {\\n        token = _token;\\n        governor = _governor;\\n        finder = _finder;\\n        setBond(_bond);\\n        transferOwnership(address(_governor));\\n    }\\n\\n    /**\\n     * @notice Propose a new set of governance transactions for vote.\\n     * @dev Pulls bond from the caller.\\n     * @param transactions list of transactions for the governor to execute.\\n     * @return id the id of the governor proposal.\\n     */\\n    function propose(Governor.Transaction[] memory transactions) external nonReentrant() returns (uint256 id) {\\n        id = governor.numProposals();\\n        token.safeTransferFrom(msg.sender, address(this), bond);\\n        bondedProposals[id] = BondedProposal({ sender: msg.sender, lockedBond: bond, time: uint64(getCurrentTime()) });\\n        governor.propose(transactions);\\n    }\\n\\n    /**\\n     * @notice Resolves a proposal by checking the status of the request in the Voting contract.\\n     * @dev For the resolution to work correctly, this contract must be a registered contract in the DVM.\\n     * @param id proposal id.\\n     */\\n    function resolveProposal(uint256 id) external nonReentrant() {\\n        BondedProposal storage bondedProposal = bondedProposals[id];\\n        Voting voting = Voting(finder.getImplementationAddress(OracleInterfaces.Oracle));\\n        require(\\n            voting.hasPrice(AdminIdentifierLib._constructIdentifier(id), bondedProposal.time, \\\"\\\"),\\n            \\\"No price resolved\\\"\\n        );\\n        if (voting.getPrice(AdminIdentifierLib._constructIdentifier(id), bondedProposal.time, \\\"\\\") != 0) {\\n            token.safeTransfer(bondedProposal.sender, bondedProposal.lockedBond);\\n            emit ProposalResolved(id, true);\\n        } else {\\n            token.safeTransfer(finder.getImplementationAddress(OracleInterfaces.Store), bondedProposal.lockedBond);\\n            emit ProposalResolved(id, false);\\n        }\\n        delete bondedProposals[id];\\n    }\\n\\n    /**\\n     * @notice Admin method to set the bond amount.\\n     * @dev Admin is intended to be the governance system, itself.\\n     * @param _bond the new bond.\\n     */\\n    function setBond(uint256 _bond) public nonReentrant() onlyOwner() {\\n        bond = _bond;\\n        emit BondSet(_bond);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\nimport \\\"../interfaces/RegistryInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Registry for financial contracts and approved financial contract creators.\\n * @dev Maintains a whitelist of financial contract creators that are allowed\\n * to register new financial contracts and stores party members of a financial contract.\\n */\\ncontract Registry is RegistryInterface, MultiRole {\\n    using SafeMath for uint256;\\n\\n    /****************************************\\n     *    INTERNAL VARIABLES AND STORAGE    *\\n     ****************************************/\\n\\n    enum Roles {\\n        Owner, // The owner manages the set of ContractCreators.\\n        ContractCreator // Can register financial contracts.\\n    }\\n\\n    // This enum is required because a `WasValid` state is required\\n    // to ensure that financial contracts cannot be re-registered.\\n    enum Validity { Invalid, Valid }\\n\\n    // Local information about a contract.\\n    struct FinancialContract {\\n        Validity valid;\\n        uint128 index;\\n    }\\n\\n    struct Party {\\n        address[] contracts; // Each financial contract address is stored in this array.\\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\\n        mapping(address => uint256) contractIndex;\\n    }\\n\\n    // Array of all contracts that are approved to use the UMA Oracle.\\n    address[] public registeredContracts;\\n\\n    // Map of financial contract contracts to the associated FinancialContract struct.\\n    mapping(address => FinancialContract) public contractMap;\\n\\n    // Map each party member to their their associated Party struct.\\n    mapping(address => Party) private partyMap;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\\n    event PartyAdded(address indexed contractAddress, address indexed party);\\n    event PartyRemoved(address indexed contractAddress, address indexed party);\\n\\n    /**\\n     * @notice Construct the Registry contract.\\n     */\\n    constructor() {\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        // Start with no contract creators registered.\\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\\n    }\\n\\n    /****************************************\\n     *        REGISTRATION FUNCTIONS        *\\n     ****************************************/\\n\\n    /**\\n     * @notice Registers a new financial contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties array of addresses who become parties in the contract.\\n     * @param contractAddress address of the contract against which the parties are registered.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.ContractCreator))\\n    {\\n        FinancialContract storage financialContract = contractMap[contractAddress];\\n        require(contractMap[contractAddress].valid == Validity.Invalid, \\\"Can only register once\\\");\\n\\n        // Store contract address as a registered contract.\\n        registeredContracts.push(contractAddress);\\n\\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\\n        financialContract.index = uint128(registeredContracts.length.sub(1));\\n\\n        // For all parties in the array add them to the contract's parties.\\n        financialContract.valid = Validity.Valid;\\n        for (uint256 i = 0; i < parties.length; i = i.add(1)) {\\n            _addPartyToContract(parties[i], contractAddress);\\n        }\\n\\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\\n    }\\n\\n    /**\\n     * @notice Adds a party member to the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is added to.\\n     * @param party new party for the calling contract.\\n     */\\n    function addPartyToContract(address party) external override {\\n        address contractAddress = msg.sender;\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Can only add to valid contract\\\");\\n\\n        _addPartyToContract(party, contractAddress);\\n    }\\n\\n    /**\\n     * @notice Removes a party member from the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\\n     * @param partyAddress address to be removed from the calling contract.\\n     */\\n    function removePartyFromContract(address partyAddress) external override {\\n        address contractAddress = msg.sender;\\n        Party storage party = partyMap[partyAddress];\\n        uint256 numberOfContracts = party.contracts.length;\\n\\n        require(numberOfContracts != 0, \\\"Party has no contracts\\\");\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Remove only from valid contract\\\");\\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \\\"Can only remove existing party\\\");\\n\\n        // Index of the current location of the contract to remove.\\n        uint256 deleteIndex = party.contractIndex[contractAddress];\\n\\n        // Store the last contract's address to update the lookup map.\\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\\n\\n        // Swap the contract to be removed with the last contract.\\n        party.contracts[deleteIndex] = lastContractAddress;\\n\\n        // Update the lookup index with the new location.\\n        party.contractIndex[lastContractAddress] = deleteIndex;\\n\\n        // Pop the last contract from the array and update the lookup map.\\n        party.contracts.pop();\\n        delete party.contractIndex[contractAddress];\\n\\n        emit PartyRemoved(contractAddress, partyAddress);\\n    }\\n\\n    /****************************************\\n     *         REGISTRY STATE GETTERS       *\\n     ****************************************/\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the financial contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view override returns (bool) {\\n        return contractMap[contractAddress].valid == Validity.Valid;\\n    }\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view override returns (address[] memory) {\\n        return partyMap[party].contracts;\\n    }\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view override returns (address[] memory) {\\n        return registeredContracts;\\n    }\\n\\n    /**\\n     * @notice checks if an address is a party of a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) public view override returns (bool) {\\n        uint256 index = partyMap[party].contractIndex[contractAddress];\\n        return partyMap[party].contracts.length > index && partyMap[party].contracts[index] == contractAddress;\\n    }\\n\\n    /****************************************\\n     *           INTERNAL FUNCTIONS         *\\n     ****************************************/\\n\\n    function _addPartyToContract(address party, address contractAddress) internal {\\n        require(!isPartyMemberOfContract(party, contractAddress), \\\"Can only register a party once\\\");\\n        uint256 contractIndex = partyMap[party].contracts.length;\\n        partyMap[party].contracts.push(contractAddress);\\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\\n\\n        emit PartyAdded(contractAddress, party);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/ResultComputation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Computes vote results.\\n * @dev The result is the mode of the added votes. Otherwise, the vote is unresolved.\\n */\\nlibrary ResultComputation {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /****************************************\\n     *   INTERNAL LIBRARY DATA STRUCTURE    *\\n     ****************************************/\\n\\n    struct Data {\\n        // Maps price to number of tokens that voted for that price.\\n        mapping(int256 => FixedPoint.Unsigned) voteFrequency;\\n        // The total votes that have been added.\\n        FixedPoint.Unsigned totalVotes;\\n        // The price that is the current mode, i.e., the price with the highest frequency in `voteFrequency`.\\n        int256 currentMode;\\n    }\\n\\n    /****************************************\\n     *            VOTING FUNCTIONS          *\\n     ****************************************/\\n\\n    /**\\n     * @notice Adds a new vote to be used when computing the result.\\n     * @param data contains information to which the vote is applied.\\n     * @param votePrice value specified in the vote for the given `numberTokens`.\\n     * @param numberTokens number of tokens that voted on the `votePrice`.\\n     */\\n    function addVote(\\n        Data storage data,\\n        int256 votePrice,\\n        FixedPoint.Unsigned memory numberTokens\\n    ) internal {\\n        data.totalVotes = data.totalVotes.add(numberTokens);\\n        data.voteFrequency[votePrice] = data.voteFrequency[votePrice].add(numberTokens);\\n        if (\\n            votePrice != data.currentMode &&\\n            data.voteFrequency[votePrice].isGreaterThan(data.voteFrequency[data.currentMode])\\n        ) {\\n            data.currentMode = votePrice;\\n        }\\n    }\\n\\n    /****************************************\\n     *        VOTING STATE GETTERS          *\\n     ****************************************/\\n\\n    /**\\n     * @notice Returns whether the result is resolved, and if so, what value it resolved to.\\n     * @dev `price` should be ignored if `isResolved` is false.\\n     * @param data contains information against which the `minVoteThreshold` is applied.\\n     * @param minVoteThreshold min (exclusive) number of tokens that must have voted for the result to be valid. Can be\\n     * used to enforce a minimum voter participation rate, regardless of how the votes are distributed.\\n     * @return isResolved indicates if the price has been resolved correctly.\\n     * @return price the price that the dvm resolved to.\\n     */\\n    function getResolvedPrice(Data storage data, FixedPoint.Unsigned memory minVoteThreshold)\\n        internal\\n        view\\n        returns (bool isResolved, int256 price)\\n    {\\n        FixedPoint.Unsigned memory modeThreshold = FixedPoint.fromUnscaledUint(50).div(100);\\n\\n        if (\\n            data.totalVotes.isGreaterThan(minVoteThreshold) &&\\n            data.voteFrequency[data.currentMode].div(data.totalVotes).isGreaterThan(modeThreshold)\\n        ) {\\n            // `modeThreshold` and `minVoteThreshold` are exceeded, so the current mode is the resolved price.\\n            isResolved = true;\\n            price = data.currentMode;\\n        } else {\\n            isResolved = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether a `voteHash` is considered correct.\\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\\n     * @param data contains information against which the `voteHash` is checked.\\n     * @param voteHash committed hash submitted by the voter.\\n     * @return bool true if the vote was correct.\\n     */\\n    function wasVoteCorrect(Data storage data, bytes32 voteHash) internal view returns (bool) {\\n        return voteHash == keccak256(abi.encode(data.currentMode));\\n    }\\n\\n    /**\\n     * @notice Gets the total number of tokens whose votes are considered correct.\\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\\n     * @param data contains all votes against which the correctly voted tokens are counted.\\n     * @return FixedPoint.Unsigned which indicates the frequency of the correctly voted tokens.\\n     */\\n    function getTotalCorrectlyVotedTokens(Data storage data) internal view returns (FixedPoint.Unsigned memory) {\\n        return data.voteFrequency[data.currentMode];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/VoteTiming.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/VotingInterface.sol\\\";\\n\\n/**\\n * @title Library to compute rounds and phases for an equal length commit-reveal voting cycle.\\n */\\nlibrary VoteTiming {\\n    using SafeMath for uint256;\\n\\n    struct Data {\\n        uint256 phaseLength;\\n    }\\n\\n    /**\\n     * @notice Initializes the data object. Sets the phase length based on the input.\\n     */\\n    function init(Data storage data, uint256 phaseLength) internal {\\n        // This should have a require message but this results in an internal Solidity error.\\n        require(phaseLength > 0);\\n        data.phaseLength = phaseLength;\\n    }\\n\\n    /**\\n     * @notice Computes the roundID based off the current time as floor(timestamp/roundLength).\\n     * @dev The round ID depends on the global timestamp but not on the lifetime of the system.\\n     * The consequence is that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one.\\n     * @param data input data object.\\n     * @param currentTime input unix timestamp used to compute the current roundId.\\n     * @return roundId defined as a function of the currentTime and `phaseLength` from `data`.\\n     */\\n    function computeCurrentRoundId(Data storage data, uint256 currentTime) internal view returns (uint256) {\\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER));\\n        return currentTime.div(roundLength);\\n    }\\n\\n    /**\\n     * @notice compute the round end time as a function of the round Id.\\n     * @param data input data object.\\n     * @param roundId uniquely identifies the current round.\\n     * @return timestamp unix time of when the current round will end.\\n     */\\n    function computeRoundEndTime(Data storage data, uint256 roundId) internal view returns (uint256) {\\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER));\\n        return roundLength.mul(roundId.add(1));\\n    }\\n\\n    /**\\n     * @notice Computes the current phase based only on the current time.\\n     * @param data input data object.\\n     * @param currentTime input unix timestamp used to compute the current roundId.\\n     * @return current voting phase based on current time and vote phases configuration.\\n     */\\n    function computeCurrentPhase(Data storage data, uint256 currentTime)\\n        internal\\n        view\\n        returns (VotingAncillaryInterface.Phase)\\n    {\\n        // This employs some hacky casting. We could make this an if-statement if we're worried about type safety.\\n        return\\n            VotingAncillaryInterface.Phase(\\n                currentTime.div(data.phaseLength).mod(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER))\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/Voting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\nimport \\\"../../common/implementation/Testable.sol\\\";\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\nimport \\\"../interfaces/OracleAncillaryInterface.sol\\\";\\nimport \\\"../interfaces/VotingInterface.sol\\\";\\nimport \\\"../interfaces/VotingAncillaryInterface.sol\\\";\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\nimport \\\"./Registry.sol\\\";\\nimport \\\"./ResultComputation.sol\\\";\\nimport \\\"./VoteTiming.sol\\\";\\nimport \\\"./VotingToken.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @title Voting system for Oracle.\\n * @dev Handles receiving and resolving price requests via a commit-reveal voting scheme.\\n */\\ncontract Voting is\\n    Testable,\\n    Ownable,\\n    OracleInterface,\\n    OracleAncillaryInterface, // Interface to support ancillary data with price requests.\\n    VotingInterface,\\n    VotingAncillaryInterface // Interface to support ancillary data with voting rounds.\\n{\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeMath for uint256;\\n    using VoteTiming for VoteTiming.Data;\\n    using ResultComputation for ResultComputation.Data;\\n\\n    /****************************************\\n     *        VOTING DATA STRUCTURES        *\\n     ****************************************/\\n\\n    // Identifies a unique price request for which the Oracle will always return the same value.\\n    // Tracks ongoing votes as well as the result of the vote.\\n    struct PriceRequest {\\n        bytes32 identifier;\\n        uint256 time;\\n        // A map containing all votes for this price in various rounds.\\n        mapping(uint256 => VoteInstance) voteInstances;\\n        // If in the past, this was the voting round where this price was resolved. If current or the upcoming round,\\n        // this is the voting round where this price will be voted on, but not necessarily resolved.\\n        uint256 lastVotingRound;\\n        // The index in the `pendingPriceRequests` that references this PriceRequest. A value of UINT_MAX means that\\n        // this PriceRequest is resolved and has been cleaned up from `pendingPriceRequests`.\\n        uint256 index;\\n        bytes ancillaryData;\\n    }\\n\\n    struct VoteInstance {\\n        // Maps (voterAddress) to their submission.\\n        mapping(address => VoteSubmission) voteSubmissions;\\n        // The data structure containing the computed voting results.\\n        ResultComputation.Data resultComputation;\\n    }\\n\\n    struct VoteSubmission {\\n        // A bytes32 of `0` indicates no commit or a commit that was already revealed.\\n        bytes32 commit;\\n        // The hash of the value that was revealed.\\n        // Note: this is only used for computation of rewards.\\n        bytes32 revealHash;\\n    }\\n\\n    struct Round {\\n        uint256 snapshotId; // Voting token snapshot ID for this round.  0 if no snapshot has been taken.\\n        FixedPoint.Unsigned inflationRate; // Inflation rate set for this round.\\n        FixedPoint.Unsigned gatPercentage; // Gat rate set for this round.\\n        uint256 rewardsExpirationTime; // Time that rewards for this round can be claimed until.\\n    }\\n\\n    // Represents the status a price request has.\\n    enum RequestStatus {\\n        NotRequested, // Was never requested.\\n        Active, // Is being voted on in the current round.\\n        Resolved, // Was resolved in a previous round.\\n        Future // Is scheduled to be voted on in a future round.\\n    }\\n\\n    // Only used as a return value in view methods -- never stored in the contract.\\n    struct RequestState {\\n        RequestStatus status;\\n        uint256 lastVotingRound;\\n    }\\n\\n    /****************************************\\n     *          INTERNAL TRACKING           *\\n     ****************************************/\\n\\n    // Maps round numbers to the rounds.\\n    mapping(uint256 => Round) public rounds;\\n\\n    // Maps price request IDs to the PriceRequest struct.\\n    mapping(bytes32 => PriceRequest) private priceRequests;\\n\\n    // Price request ids for price requests that haven't yet been marked as resolved.\\n    // These requests may be for future rounds.\\n    bytes32[] internal pendingPriceRequests;\\n\\n    VoteTiming.Data public voteTiming;\\n\\n    // Percentage of the total token supply that must be used in a vote to\\n    // create a valid price resolution. 1 == 100%.\\n    FixedPoint.Unsigned public gatPercentage;\\n\\n    // Global setting for the rate of inflation per vote. This is the percentage of the snapshotted total supply that\\n    // should be split among the correct voters.\\n    // Note: this value is used to set per-round inflation at the beginning of each round. 1 = 100%.\\n    FixedPoint.Unsigned public inflationRate;\\n\\n    // Time in seconds from the end of the round in which a price request is\\n    // resolved that voters can still claim their rewards.\\n    uint256 public rewardsExpirationTimeout;\\n\\n    // Reference to the voting token.\\n    VotingToken public votingToken;\\n\\n    // Reference to the Finder.\\n    FinderInterface private finder;\\n\\n    // If non-zero, this contract has been migrated to this address. All voters and\\n    // financial contracts should query the new address only.\\n    address public migratedAddress;\\n\\n    // Max value of an unsigned integer.\\n    uint256 private constant UINT_MAX = ~uint256(0);\\n\\n    // Max length in bytes of ancillary data that can be appended to a price request.\\n    // As of December 2020, the current Ethereum gas limit is 12.5 million. This requestPrice function's gas primarily\\n    // comes from computing a Keccak-256 hash in _encodePriceRequest and writing a new PriceRequest to\\n    // storage. We have empirically determined an ancillary data limit of 8192 bytes that keeps this function\\n    // well within the gas limit at ~8 million gas. To learn more about the gas limit and EVM opcode costs go here:\\n    // - https://etherscan.io/chart/gaslimit\\n    // - https://github.com/djrtwo/evm-opcode-gas-costs\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    bytes32 public snapshotMessageHash = ECDSA.toEthSignedMessageHash(keccak256(bytes(\\\"Sign For Snapshot\\\")));\\n\\n    /***************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event VoteCommitted(\\n        address indexed voter,\\n        uint256 indexed roundId,\\n        bytes32 indexed identifier,\\n        uint256 time,\\n        bytes ancillaryData\\n    );\\n\\n    event EncryptedVote(\\n        address indexed voter,\\n        uint256 indexed roundId,\\n        bytes32 indexed identifier,\\n        uint256 time,\\n        bytes ancillaryData,\\n        bytes encryptedVote\\n    );\\n\\n    event VoteRevealed(\\n        address indexed voter,\\n        uint256 indexed roundId,\\n        bytes32 indexed identifier,\\n        uint256 time,\\n        int256 price,\\n        bytes ancillaryData,\\n        uint256 numTokens\\n    );\\n\\n    event RewardsRetrieved(\\n        address indexed voter,\\n        uint256 indexed roundId,\\n        bytes32 indexed identifier,\\n        uint256 time,\\n        bytes ancillaryData,\\n        uint256 numTokens\\n    );\\n\\n    event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time);\\n\\n    event PriceResolved(\\n        uint256 indexed roundId,\\n        bytes32 indexed identifier,\\n        uint256 time,\\n        int256 price,\\n        bytes ancillaryData\\n    );\\n\\n    /**\\n     * @notice Construct the Voting contract.\\n     * @param _phaseLength length of the commit and reveal phases in seconds.\\n     * @param _gatPercentage of the total token supply that must be used in a vote to create a valid price resolution.\\n     * @param _inflationRate percentage inflation per round used to increase token supply of correct voters.\\n     * @param _rewardsExpirationTimeout timeout, in seconds, within which rewards must be claimed.\\n     * @param _votingToken address of the UMA token contract used to commit votes.\\n     * @param _finder keeps track of all contracts within the system based on their interfaceName.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(\\n        uint256 _phaseLength,\\n        FixedPoint.Unsigned memory _gatPercentage,\\n        FixedPoint.Unsigned memory _inflationRate,\\n        uint256 _rewardsExpirationTimeout,\\n        address _votingToken,\\n        address _finder,\\n        address _timerAddress\\n    ) Testable(_timerAddress) {\\n        voteTiming.init(_phaseLength);\\n        require(_gatPercentage.isLessThanOrEqual(1), \\\"GAT percentage must be <= 100%\\\");\\n        gatPercentage = _gatPercentage;\\n        inflationRate = _inflationRate;\\n        votingToken = VotingToken(_votingToken);\\n        finder = FinderInterface(_finder);\\n        rewardsExpirationTimeout = _rewardsExpirationTimeout;\\n    }\\n\\n    /***************************************\\n                    MODIFIERS\\n    ****************************************/\\n\\n    modifier onlyRegisteredContract() {\\n        if (migratedAddress != address(0)) {\\n            require(msg.sender == migratedAddress, \\\"Caller must be migrated address\\\");\\n        } else {\\n            Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\\n            require(registry.isContractRegistered(msg.sender), \\\"Called must be registered\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyIfNotMigrated() {\\n        require(migratedAddress == address(0), \\\"Only call this if not migrated\\\");\\n        _;\\n    }\\n\\n    /****************************************\\n     *  PRICE REQUEST AND ACCESS FUNCTIONS  *\\n     ****************************************/\\n\\n    /**\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\n     * @dev Time must be in the past and the identifier must be supported. The length of the ancillary data\\n     * is limited such that this method abides by the EVM transaction gas limit.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public override onlyRegisteredContract() {\\n        uint256 blockTime = getCurrentTime();\\n        require(time <= blockTime, \\\"Can only request in past\\\");\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \\\"Unsupported identifier request\\\");\\n        require(ancillaryData.length <= ancillaryBytesLimit, \\\"Invalid ancillary data\\\");\\n\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\\n        PriceRequest storage priceRequest = priceRequests[priceRequestId];\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\\n\\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\\n\\n        if (requestStatus == RequestStatus.NotRequested) {\\n            // Price has never been requested.\\n            // Price requests always go in the next round, so add 1 to the computed current round.\\n            uint256 nextRoundId = currentRoundId.add(1);\\n\\n            PriceRequest storage newPriceRequest = priceRequests[priceRequestId];\\n            newPriceRequest.identifier = identifier;\\n            newPriceRequest.time = time;\\n            newPriceRequest.lastVotingRound = nextRoundId;\\n            newPriceRequest.index = pendingPriceRequests.length;\\n            newPriceRequest.ancillaryData = ancillaryData;\\n\\n            pendingPriceRequests.push(priceRequestId);\\n            emit PriceRequestAdded(nextRoundId, identifier, time);\\n        }\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function requestPrice(bytes32 identifier, uint256 time) public override {\\n        requestPrice(identifier, time, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Whether the price for `identifier` and `time` is available.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp of for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @return _hasPrice bool if the DVM has resolved to a price for the given identifier and timestamp.\\n     */\\n    function hasPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view override onlyRegisteredContract() returns (bool) {\\n        (bool _hasPrice, , ) = _getPriceOrError(identifier, time, ancillaryData);\\n        return _hasPrice;\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function hasPrice(bytes32 identifier, uint256 time) public view override returns (bool) {\\n        return hasPrice(identifier, time, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\n     * @dev If the price is not available, the method reverts.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp of for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\n     */\\n    function getPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view override onlyRegisteredContract() returns (int256) {\\n        (bool _hasPrice, int256 price, string memory message) = _getPriceOrError(identifier, time, ancillaryData);\\n\\n        // If the price wasn't available, revert with the provided message.\\n        require(_hasPrice, message);\\n        return price;\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function getPrice(bytes32 identifier, uint256 time) public view override returns (int256) {\\n        return getPrice(identifier, time, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Gets the status of a list of price requests, identified by their identifier and time.\\n     * @dev If the status for a particular request is NotRequested, the lastVotingRound will always be 0.\\n     * @param requests array of type PendingRequest which includes an identifier and timestamp for each request.\\n     * @return requestStates a list, in the same order as the input list, giving the status of each of the specified price requests.\\n     */\\n    function getPriceRequestStatuses(PendingRequestAncillary[] memory requests)\\n        public\\n        view\\n        returns (RequestState[] memory)\\n    {\\n        RequestState[] memory requestStates = new RequestState[](requests.length);\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\n        for (uint256 i = 0; i < requests.length; i++) {\\n            PriceRequest storage priceRequest =\\n                _getPriceRequest(requests[i].identifier, requests[i].time, requests[i].ancillaryData);\\n\\n            RequestStatus status = _getRequestStatus(priceRequest, currentRoundId);\\n\\n            // If it's an active request, its true lastVotingRound is the current one, even if it hasn't been updated.\\n            if (status == RequestStatus.Active) {\\n                requestStates[i].lastVotingRound = currentRoundId;\\n            } else {\\n                requestStates[i].lastVotingRound = priceRequest.lastVotingRound;\\n            }\\n            requestStates[i].status = status;\\n        }\\n        return requestStates;\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function getPriceRequestStatuses(PendingRequest[] memory requests) public view returns (RequestState[] memory) {\\n        PendingRequestAncillary[] memory requestsAncillary = new PendingRequestAncillary[](requests.length);\\n\\n        for (uint256 i = 0; i < requests.length; i++) {\\n            requestsAncillary[i].identifier = requests[i].identifier;\\n            requestsAncillary[i].time = requests[i].time;\\n            requestsAncillary[i].ancillaryData = \\\"\\\";\\n        }\\n        return getPriceRequestStatuses(requestsAncillary);\\n    }\\n\\n    /****************************************\\n     *            VOTING FUNCTIONS          *\\n     ****************************************/\\n\\n    /**\\n     * @notice Commit a vote for a price request for `identifier` at `time`.\\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\\n     * Commits can be changed.\\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system\u2019s expected behavior,\\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\\n     * they can determine the vote pre-reveal.\\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\\n     * @param time unix timestamp of the price being voted on.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\\n     */\\n    function commitVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData,\\n        bytes32 hash\\n    ) public override onlyIfNotMigrated() {\\n        require(hash != bytes32(0), \\\"Invalid provided hash\\\");\\n        // Current time is required for all vote timing queries.\\n        uint256 blockTime = getCurrentTime();\\n        require(\\n            voteTiming.computeCurrentPhase(blockTime) == VotingAncillaryInterface.Phase.Commit,\\n            \\\"Cannot commit in reveal phase\\\"\\n        );\\n\\n        // At this point, the computed and last updated round ID should be equal.\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\\n\\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\\n        require(\\n            _getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active,\\n            \\\"Cannot commit inactive request\\\"\\n        );\\n\\n        priceRequest.lastVotingRound = currentRoundId;\\n        VoteInstance storage voteInstance = priceRequest.voteInstances[currentRoundId];\\n        voteInstance.voteSubmissions[msg.sender].commit = hash;\\n\\n        emit VoteCommitted(msg.sender, currentRoundId, identifier, time, ancillaryData);\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function commitVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes32 hash\\n    ) public override onlyIfNotMigrated() {\\n        commitVote(identifier, time, \\\"\\\", hash);\\n    }\\n\\n    /**\\n     * @notice Snapshot the current round's token balances and lock in the inflation rate and GAT.\\n     * @dev This function can be called multiple times, but only the first call per round into this function or `revealVote`\\n     * will create the round snapshot. Any later calls will be a no-op. Will revert unless called during reveal period.\\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\\n     * snapshot.\\n     */\\n    function snapshotCurrentRound(bytes calldata signature)\\n        external\\n        override(VotingInterface, VotingAncillaryInterface)\\n        onlyIfNotMigrated()\\n    {\\n        uint256 blockTime = getCurrentTime();\\n        require(voteTiming.computeCurrentPhase(blockTime) == Phase.Reveal, \\\"Only snapshot in reveal phase\\\");\\n        // Require public snapshot require signature to ensure caller is an EOA.\\n        require(ECDSA.recover(snapshotMessageHash, signature) == msg.sender, \\\"Signature must match sender\\\");\\n        uint256 roundId = voteTiming.computeCurrentRoundId(blockTime);\\n        _freezeRoundVariables(roundId);\\n    }\\n\\n    /**\\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\n     * @param time specifies the unix timestamp of the price being voted on.\\n     * @param price voted on during the commit phase.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @param salt value used to hide the commitment price during the commit phase.\\n     */\\n    function revealVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        int256 price,\\n        bytes memory ancillaryData,\\n        int256 salt\\n    ) public override onlyIfNotMigrated() {\\n        require(voteTiming.computeCurrentPhase(getCurrentTime()) == Phase.Reveal, \\\"Cannot reveal in commit phase\\\");\\n        // Note: computing the current round is required to disallow people from revealing an old commit after the round is over.\\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\n\\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\\n        VoteInstance storage voteInstance = priceRequest.voteInstances[roundId];\\n        VoteSubmission storage voteSubmission = voteInstance.voteSubmissions[msg.sender];\\n\\n        // Scoping to get rid of a stack too deep error.\\n        {\\n            // 0 hashes are disallowed in the commit phase, so they indicate a different error.\\n            // Cannot reveal an uncommitted or previously revealed hash\\n            require(voteSubmission.commit != bytes32(0), \\\"Invalid hash reveal\\\");\\n            require(\\n                keccak256(abi.encodePacked(price, salt, msg.sender, time, ancillaryData, roundId, identifier)) ==\\n                    voteSubmission.commit,\\n                \\\"Revealed data != commit hash\\\"\\n            );\\n            // To protect against flash loans, we require snapshot be validated as EOA.\\n            require(rounds[roundId].snapshotId != 0, \\\"Round has no snapshot\\\");\\n        }\\n\\n        // Get the frozen snapshotId\\n        uint256 snapshotId = rounds[roundId].snapshotId;\\n\\n        delete voteSubmission.commit;\\n\\n        // Get the voter's snapshotted balance. Since balances are returned pre-scaled by 10**18, we can directly\\n        // initialize the Unsigned value with the returned uint.\\n        FixedPoint.Unsigned memory balance = FixedPoint.Unsigned(votingToken.balanceOfAt(msg.sender, snapshotId));\\n\\n        // Set the voter's submission.\\n        voteSubmission.revealHash = keccak256(abi.encode(price));\\n\\n        // Add vote to the results.\\n        voteInstance.resultComputation.addVote(price, balance);\\n\\n        emit VoteRevealed(msg.sender, roundId, identifier, time, price, ancillaryData, balance.rawValue);\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function revealVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        int256 price,\\n        int256 salt\\n    ) public override {\\n        revealVote(identifier, time, price, \\\"\\\", salt);\\n    }\\n\\n    /**\\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\\n     * @param time unix timestamp of for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\\n     */\\n    function commitAndEmitEncryptedVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData,\\n        bytes32 hash,\\n        bytes memory encryptedVote\\n    ) public override {\\n        commitVote(identifier, time, ancillaryData, hash);\\n\\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\n        emit EncryptedVote(msg.sender, roundId, identifier, time, ancillaryData, encryptedVote);\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function commitAndEmitEncryptedVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes32 hash,\\n        bytes memory encryptedVote\\n    ) public override {\\n        commitVote(identifier, time, \\\"\\\", hash);\\n\\n        commitAndEmitEncryptedVote(identifier, time, \\\"\\\", hash, encryptedVote);\\n    }\\n\\n    /**\\n     * @notice Submit a batch of commits in a single transaction.\\n     * @dev Using `encryptedVote` is optional. If included then commitment is emitted in an event.\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\\n     * commitments that can fit in one transaction.\\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\n     */\\n    function batchCommit(CommitmentAncillary[] memory commits) public override {\\n        for (uint256 i = 0; i < commits.length; i++) {\\n            if (commits[i].encryptedVote.length == 0) {\\n                commitVote(commits[i].identifier, commits[i].time, commits[i].ancillaryData, commits[i].hash);\\n            } else {\\n                commitAndEmitEncryptedVote(\\n                    commits[i].identifier,\\n                    commits[i].time,\\n                    commits[i].ancillaryData,\\n                    commits[i].hash,\\n                    commits[i].encryptedVote\\n                );\\n            }\\n        }\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function batchCommit(Commitment[] memory commits) public override {\\n        CommitmentAncillary[] memory commitsAncillary = new CommitmentAncillary[](commits.length);\\n\\n        for (uint256 i = 0; i < commits.length; i++) {\\n            commitsAncillary[i].identifier = commits[i].identifier;\\n            commitsAncillary[i].time = commits[i].time;\\n            commitsAncillary[i].ancillaryData = \\\"\\\";\\n            commitsAncillary[i].hash = commits[i].hash;\\n            commitsAncillary[i].encryptedVote = commits[i].encryptedVote;\\n        }\\n        batchCommit(commitsAncillary);\\n    }\\n\\n    /**\\n     * @notice Reveal multiple votes in a single transaction.\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\\n     * that can fit in one transaction.\\n     * @dev For more info on reveals, review the comment for `revealVote`.\\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\\n     */\\n    function batchReveal(RevealAncillary[] memory reveals) public override {\\n        for (uint256 i = 0; i < reveals.length; i++) {\\n            revealVote(\\n                reveals[i].identifier,\\n                reveals[i].time,\\n                reveals[i].price,\\n                reveals[i].ancillaryData,\\n                reveals[i].salt\\n            );\\n        }\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function batchReveal(Reveal[] memory reveals) public override {\\n        RevealAncillary[] memory revealsAncillary = new RevealAncillary[](reveals.length);\\n\\n        for (uint256 i = 0; i < reveals.length; i++) {\\n            revealsAncillary[i].identifier = reveals[i].identifier;\\n            revealsAncillary[i].time = reveals[i].time;\\n            revealsAncillary[i].price = reveals[i].price;\\n            revealsAncillary[i].ancillaryData = \\\"\\\";\\n            revealsAncillary[i].salt = reveals[i].salt;\\n        }\\n        batchReveal(revealsAncillary);\\n    }\\n\\n    /**\\n     * @notice Retrieves rewards owed for a set of resolved price requests.\\n     * @dev Can only retrieve rewards if calling for a valid round and if the call is done within the timeout threshold\\n     * (not expired). Note that a named return value is used here to avoid a stack to deep error.\\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\\n     * @param roundId the round from which voting rewards will be retrieved from.\\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\\n     * @return totalRewardToIssue total amount of rewards returned to the voter.\\n     */\\n    function retrieveRewards(\\n        address voterAddress,\\n        uint256 roundId,\\n        PendingRequestAncillary[] memory toRetrieve\\n    ) public override returns (FixedPoint.Unsigned memory totalRewardToIssue) {\\n        if (migratedAddress != address(0)) {\\n            require(msg.sender == migratedAddress, \\\"Can only call from migrated\\\");\\n        }\\n        require(roundId < voteTiming.computeCurrentRoundId(getCurrentTime()), \\\"Invalid roundId\\\");\\n\\n        Round storage round = rounds[roundId];\\n        bool isExpired = getCurrentTime() > round.rewardsExpirationTime;\\n        FixedPoint.Unsigned memory snapshotBalance =\\n            FixedPoint.Unsigned(votingToken.balanceOfAt(voterAddress, round.snapshotId));\\n\\n        // Compute the total amount of reward that will be issued for each of the votes in the round.\\n        FixedPoint.Unsigned memory snapshotTotalSupply =\\n            FixedPoint.Unsigned(votingToken.totalSupplyAt(round.snapshotId));\\n        FixedPoint.Unsigned memory totalRewardPerVote = round.inflationRate.mul(snapshotTotalSupply);\\n\\n        // Keep track of the voter's accumulated token reward.\\n        totalRewardToIssue = FixedPoint.Unsigned(0);\\n\\n        for (uint256 i = 0; i < toRetrieve.length; i++) {\\n            PriceRequest storage priceRequest =\\n                _getPriceRequest(toRetrieve[i].identifier, toRetrieve[i].time, toRetrieve[i].ancillaryData);\\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\\n            // Only retrieve rewards for votes resolved in same round\\n            require(priceRequest.lastVotingRound == roundId, \\\"Retrieve for votes same round\\\");\\n\\n            _resolvePriceRequest(priceRequest, voteInstance);\\n\\n            if (voteInstance.voteSubmissions[voterAddress].revealHash == 0) {\\n                continue;\\n            } else if (isExpired) {\\n                // Emit a 0 token retrieval on expired rewards.\\n                emit RewardsRetrieved(\\n                    voterAddress,\\n                    roundId,\\n                    toRetrieve[i].identifier,\\n                    toRetrieve[i].time,\\n                    toRetrieve[i].ancillaryData,\\n                    0\\n                );\\n            } else if (\\n                voteInstance.resultComputation.wasVoteCorrect(voteInstance.voteSubmissions[voterAddress].revealHash)\\n            ) {\\n                // The price was successfully resolved during the voter's last voting round, the voter revealed\\n                // and was correct, so they are eligible for a reward.\\n                // Compute the reward and add to the cumulative reward.\\n\\n                FixedPoint.Unsigned memory reward =\\n                    snapshotBalance.mul(totalRewardPerVote).div(\\n                        voteInstance.resultComputation.getTotalCorrectlyVotedTokens()\\n                    );\\n                totalRewardToIssue = totalRewardToIssue.add(reward);\\n\\n                // Emit reward retrieval for this vote.\\n                emit RewardsRetrieved(\\n                    voterAddress,\\n                    roundId,\\n                    toRetrieve[i].identifier,\\n                    toRetrieve[i].time,\\n                    toRetrieve[i].ancillaryData,\\n                    reward.rawValue\\n                );\\n            } else {\\n                // Emit a 0 token retrieval on incorrect votes.\\n                emit RewardsRetrieved(\\n                    voterAddress,\\n                    roundId,\\n                    toRetrieve[i].identifier,\\n                    toRetrieve[i].time,\\n                    toRetrieve[i].ancillaryData,\\n                    0\\n                );\\n            }\\n\\n            // Delete the submission to capture any refund and clean up storage.\\n            delete voteInstance.voteSubmissions[voterAddress].revealHash;\\n        }\\n\\n        // Issue any accumulated rewards.\\n        if (totalRewardToIssue.isGreaterThan(0)) {\\n            require(votingToken.mint(voterAddress, totalRewardToIssue.rawValue), \\\"Voting token issuance failed\\\");\\n        }\\n    }\\n\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\n    function retrieveRewards(\\n        address voterAddress,\\n        uint256 roundId,\\n        PendingRequest[] memory toRetrieve\\n    ) public override returns (FixedPoint.Unsigned memory) {\\n        PendingRequestAncillary[] memory toRetrieveAncillary = new PendingRequestAncillary[](toRetrieve.length);\\n\\n        for (uint256 i = 0; i < toRetrieve.length; i++) {\\n            toRetrieveAncillary[i].identifier = toRetrieve[i].identifier;\\n            toRetrieveAncillary[i].time = toRetrieve[i].time;\\n            toRetrieveAncillary[i].ancillaryData = \\\"\\\";\\n        }\\n\\n        return retrieveRewards(voterAddress, roundId, toRetrieveAncillary);\\n    }\\n\\n    /****************************************\\n     *        VOTING GETTER FUNCTIONS       *\\n     ****************************************/\\n\\n    /**\\n     * @notice Gets the queries that are being voted on this round.\\n     * @return pendingRequests array containing identifiers of type `PendingRequest`.\\n     * and timestamps for all pending requests.\\n     */\\n    function getPendingRequests()\\n        external\\n        view\\n        override(VotingInterface, VotingAncillaryInterface)\\n        returns (PendingRequestAncillary[] memory)\\n    {\\n        uint256 blockTime = getCurrentTime();\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\\n\\n        // Solidity memory arrays aren't resizable (and reading storage is expensive). Hence this hackery to filter\\n        // `pendingPriceRequests` only to those requests that have an Active RequestStatus.\\n        PendingRequestAncillary[] memory unresolved = new PendingRequestAncillary[](pendingPriceRequests.length);\\n        uint256 numUnresolved = 0;\\n\\n        for (uint256 i = 0; i < pendingPriceRequests.length; i++) {\\n            PriceRequest storage priceRequest = priceRequests[pendingPriceRequests[i]];\\n            if (_getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active) {\\n                unresolved[numUnresolved] = PendingRequestAncillary({\\n                    identifier: priceRequest.identifier,\\n                    time: priceRequest.time,\\n                    ancillaryData: priceRequest.ancillaryData\\n                });\\n                numUnresolved++;\\n            }\\n        }\\n\\n        PendingRequestAncillary[] memory pendingRequests = new PendingRequestAncillary[](numUnresolved);\\n        for (uint256 i = 0; i < numUnresolved; i++) {\\n            pendingRequests[i] = unresolved[i];\\n        }\\n        return pendingRequests;\\n    }\\n\\n    /**\\n     * @notice Returns the current voting phase, as a function of the current time.\\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\\n     */\\n    function getVotePhase() external view override(VotingInterface, VotingAncillaryInterface) returns (Phase) {\\n        return voteTiming.computeCurrentPhase(getCurrentTime());\\n    }\\n\\n    /**\\n     * @notice Returns the current round ID, as a function of the current time.\\n     * @return uint256 representing the unique round ID.\\n     */\\n    function getCurrentRoundId() external view override(VotingInterface, VotingAncillaryInterface) returns (uint256) {\\n        return voteTiming.computeCurrentRoundId(getCurrentTime());\\n    }\\n\\n    /****************************************\\n     *        OWNER ADMIN FUNCTIONS         *\\n     ****************************************/\\n\\n    /**\\n     * @notice Disables this Voting contract in favor of the migrated one.\\n     * @dev Can only be called by the contract owner.\\n     * @param newVotingAddress the newly migrated contract address.\\n     */\\n    function setMigrated(address newVotingAddress)\\n        external\\n        override(VotingInterface, VotingAncillaryInterface)\\n        onlyOwner\\n    {\\n        migratedAddress = newVotingAddress;\\n    }\\n\\n    /**\\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\n     * @param newInflationRate sets the next round's inflation rate.\\n     */\\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate)\\n        public\\n        override(VotingInterface, VotingAncillaryInterface)\\n        onlyOwner\\n    {\\n        inflationRate = newInflationRate;\\n    }\\n\\n    /**\\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\n     * @param newGatPercentage sets the next round's Gat percentage.\\n     */\\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage)\\n        public\\n        override(VotingInterface, VotingAncillaryInterface)\\n        onlyOwner\\n    {\\n        require(newGatPercentage.isLessThan(1), \\\"GAT percentage must be < 100%\\\");\\n        gatPercentage = newGatPercentage;\\n    }\\n\\n    /**\\n     * @notice Resets the rewards expiration timeout.\\n     * @dev This change only applies to rounds that have not yet begun.\\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\\n     */\\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout)\\n        public\\n        override(VotingInterface, VotingAncillaryInterface)\\n        onlyOwner\\n    {\\n        rewardsExpirationTimeout = NewRewardsExpirationTimeout;\\n    }\\n\\n    /****************************************\\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\\n     ****************************************/\\n\\n    // Returns the price for a given identifer. Three params are returns: bool if there was an error, int to represent\\n    // the resolved price and a string which is filled with an error message, if there was an error or \\\"\\\".\\n    function _getPriceOrError(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    )\\n        private\\n        view\\n        returns (\\n            bool,\\n            int256,\\n            string memory\\n        )\\n    {\\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\n\\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\\n        if (requestStatus == RequestStatus.Active) {\\n            return (false, 0, \\\"Current voting round not ended\\\");\\n        } else if (requestStatus == RequestStatus.Resolved) {\\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\\n            (, int256 resolvedPrice) =\\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\\n            return (true, resolvedPrice, \\\"\\\");\\n        } else if (requestStatus == RequestStatus.Future) {\\n            return (false, 0, \\\"Price is still to be voted on\\\");\\n        } else {\\n            return (false, 0, \\\"Price was never requested\\\");\\n        }\\n    }\\n\\n    function _getPriceRequest(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) private view returns (PriceRequest storage) {\\n        return priceRequests[_encodePriceRequest(identifier, time, ancillaryData)];\\n    }\\n\\n    function _encodePriceRequest(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) private pure returns (bytes32) {\\n        return keccak256(abi.encode(identifier, time, ancillaryData));\\n    }\\n\\n    function _freezeRoundVariables(uint256 roundId) private {\\n        Round storage round = rounds[roundId];\\n        // Only on the first reveal should the snapshot be captured for that round.\\n        if (round.snapshotId == 0) {\\n            // There is no snapshot ID set, so create one.\\n            round.snapshotId = votingToken.snapshot();\\n\\n            // Set the round inflation rate to the current global inflation rate.\\n            rounds[roundId].inflationRate = inflationRate;\\n\\n            // Set the round gat percentage to the current global gat rate.\\n            rounds[roundId].gatPercentage = gatPercentage;\\n\\n            // Set the rewards expiration time based on end of time of this round and the current global timeout.\\n            rounds[roundId].rewardsExpirationTime = voteTiming.computeRoundEndTime(roundId).add(\\n                rewardsExpirationTimeout\\n            );\\n        }\\n    }\\n\\n    function _resolvePriceRequest(PriceRequest storage priceRequest, VoteInstance storage voteInstance) private {\\n        if (priceRequest.index == UINT_MAX) {\\n            return;\\n        }\\n        (bool isResolved, int256 resolvedPrice) =\\n            voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\\n        require(isResolved, \\\"Can't resolve unresolved request\\\");\\n\\n        // Delete the resolved price request from pendingPriceRequests.\\n        uint256 lastIndex = pendingPriceRequests.length - 1;\\n        PriceRequest storage lastPriceRequest = priceRequests[pendingPriceRequests[lastIndex]];\\n        lastPriceRequest.index = priceRequest.index;\\n        pendingPriceRequests[priceRequest.index] = pendingPriceRequests[lastIndex];\\n        pendingPriceRequests.pop();\\n\\n        priceRequest.index = UINT_MAX;\\n        emit PriceResolved(\\n            priceRequest.lastVotingRound,\\n            priceRequest.identifier,\\n            priceRequest.time,\\n            resolvedPrice,\\n            priceRequest.ancillaryData\\n        );\\n    }\\n\\n    function _computeGat(uint256 roundId) private view returns (FixedPoint.Unsigned memory) {\\n        uint256 snapshotId = rounds[roundId].snapshotId;\\n        if (snapshotId == 0) {\\n            // No snapshot - return max value to err on the side of caution.\\n            return FixedPoint.Unsigned(UINT_MAX);\\n        }\\n\\n        // Grab the snapshotted supply from the voting token. It's already scaled by 10**18, so we can directly\\n        // initialize the Unsigned value with the returned uint.\\n        FixedPoint.Unsigned memory snapshottedSupply = FixedPoint.Unsigned(votingToken.totalSupplyAt(snapshotId));\\n\\n        // Multiply the total supply at the snapshot by the gatPercentage to get the GAT in number of tokens.\\n        return snapshottedSupply.mul(rounds[roundId].gatPercentage);\\n    }\\n\\n    function _getRequestStatus(PriceRequest storage priceRequest, uint256 currentRoundId)\\n        private\\n        view\\n        returns (RequestStatus)\\n    {\\n        if (priceRequest.lastVotingRound == 0) {\\n            return RequestStatus.NotRequested;\\n        } else if (priceRequest.lastVotingRound < currentRoundId) {\\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\\n            (bool isResolved, ) =\\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\\n            return isResolved ? RequestStatus.Resolved : RequestStatus.Active;\\n        } else if (priceRequest.lastVotingRound == currentRoundId) {\\n            return RequestStatus.Active;\\n        } else {\\n            // Means than priceRequest.lastVotingRound > currentRoundId\\n            return RequestStatus.Future;\\n        }\\n    }\\n\\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/implementation/VotingToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/ExpandedERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\n\\n/**\\n * @title Ownership of this token allows a voter to respond to price requests.\\n * @dev Supports snapshotting and allows the Oracle to mint new tokens as rewards.\\n */\\ncontract VotingToken is ExpandedERC20, ERC20Snapshot {\\n    /**\\n     * @notice Constructs the VotingToken.\\n     */\\n    constructor() ExpandedERC20(\\\"UMA Voting Token v1\\\", \\\"UMA\\\", 18) ERC20Snapshot() {}\\n\\n    function decimals() public view virtual override(ERC20, ExpandedERC20) returns (uint8) {\\n        return super.decimals();\\n    }\\n\\n    /**\\n     * @notice Creates a new snapshot ID.\\n     * @return uint256 Thew new snapshot ID.\\n     */\\n    function snapshot() external returns (uint256) {\\n        return _snapshot();\\n    }\\n\\n    // _transfer, _mint and _burn are ERC20 internal methods that are overridden by ERC20Snapshot,\\n    // therefore the compiler will complain that VotingToken must override these methods\\n    // because the two base classes (ERC20 and ERC20Snapshot) both define the same functions\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal override(ERC20) {\\n        super._transfer(from, to, value);\\n    }\\n\\n    function _mint(address account, uint256 value) internal virtual override(ERC20) {\\n        super._mint(account, value);\\n    }\\n\\n    function _burn(address account, uint256 value) internal virtual override(ERC20) {\\n        super._burn(account, value);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Snapshot) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/FinderInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\n */\\ninterface IdentifierWhitelistInterface {\\n    /**\\n     * @notice Adds the provided identifier as a supported identifier.\\n     * @dev Price requests using this identifier will succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function addSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Removes the identifier from the whitelist.\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Checks whether an identifier is on the whitelist.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     * @return bool if the identifier is supported (or not).\\n     */\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/OracleAncillaryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OracleAncillaryInterface {\\n    /**\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @param time unix timestamp for the price request.\\n     */\\n\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public virtual;\\n\\n    /**\\n     * @notice Whether the price for `identifier` and `time` is available.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\n     */\\n    function hasPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    /**\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\n     * @dev If the price is not available, the method reverts.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\n     */\\n\\n    function getPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (int256);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OracleInterface {\\n    /**\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     */\\n    function requestPrice(bytes32 identifier, uint256 time) public virtual;\\n\\n    /**\\n     * @notice Whether the price for `identifier` and `time` is available.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\n     */\\n    function hasPrice(bytes32 identifier, uint256 time) public view virtual returns (bool);\\n\\n    /**\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\n     * @dev If the price is not available, the method reverts.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\n     */\\n    function getPrice(bytes32 identifier, uint256 time) public view virtual returns (int256);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/RegistryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for a registry of contracts and contract creators.\\n */\\ninterface RegistryInterface {\\n    /**\\n     * @notice Registers a new contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties an array of addresses who become parties in the contract.\\n     * @param contractAddress defines the address of the deployed contract.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress) external;\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Adds a party to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be added to the contract.\\n     */\\n    function addPartyToContract(address party) external;\\n\\n    /**\\n     * @notice Removes a party member to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be removed from the contract.\\n     */\\n    function removePartyFromContract(address party) external;\\n\\n    /**\\n     * @notice checks if an address is a party in a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/VotingAncillaryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Interface that voters must use to Vote on price request resolutions.\\n */\\nabstract contract VotingAncillaryInterface {\\n    struct PendingRequestAncillary {\\n        bytes32 identifier;\\n        uint256 time;\\n        bytes ancillaryData;\\n    }\\n\\n    // Captures the necessary data for making a commitment.\\n    // Used as a parameter when making batch commitments.\\n    // Not used as a data structure for storage.\\n    struct CommitmentAncillary {\\n        bytes32 identifier;\\n        uint256 time;\\n        bytes ancillaryData;\\n        bytes32 hash;\\n        bytes encryptedVote;\\n    }\\n\\n    // Captures the necessary data for revealing a vote.\\n    // Used as a parameter when making batch reveals.\\n    // Not used as a data structure for storage.\\n    struct RevealAncillary {\\n        bytes32 identifier;\\n        uint256 time;\\n        int256 price;\\n        bytes ancillaryData;\\n        int256 salt;\\n    }\\n\\n    // Note: the phases must be in order. Meaning the first enum value must be the first phase, etc.\\n    // `NUM_PHASES_PLACEHOLDER` is to get the number of phases. It isn't an actual phase, and it should always be last.\\n    enum Phase { Commit, Reveal, NUM_PHASES_PLACEHOLDER }\\n\\n    /**\\n     * @notice Commit a vote for a price request for `identifier` at `time`.\\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\\n     * Commits can be changed.\\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system\u2019s expected behavior,\\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\\n     * they can determine the vote pre-reveal.\\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\\n     * @param time unix timestamp of the price being voted on.\\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\\n     */\\n    function commitVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData,\\n        bytes32 hash\\n    ) public virtual;\\n\\n    /**\\n     * @notice Submit a batch of commits in a single transaction.\\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\\n     * commitments that can fit in one transaction.\\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\n     */\\n    function batchCommit(CommitmentAncillary[] memory commits) public virtual;\\n\\n    /**\\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\\n     * @param time unix timestamp of for the price request.\\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\\n     */\\n    function commitAndEmitEncryptedVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData,\\n        bytes32 hash,\\n        bytes memory encryptedVote\\n    ) public virtual;\\n\\n    /**\\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\\n     * time of calling `_freezeRoundVariables`.\\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\\n     * snapshot.\\n     */\\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\\n\\n    /**\\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\n     * @param time specifies the unix timestamp of the price is being voted on.\\n     * @param price voted on during the commit phase.\\n     * @param salt value used to hide the commitment price during the commit phase.\\n     */\\n    function revealVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        int256 price,\\n        bytes memory ancillaryData,\\n        int256 salt\\n    ) public virtual;\\n\\n    /**\\n     * @notice Reveal multiple votes in a single transaction.\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\\n     * that can fit in one transaction.\\n     * @dev For more information on reveals, review the comment for `revealVote`.\\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\\n     */\\n    function batchReveal(RevealAncillary[] memory reveals) public virtual;\\n\\n    /**\\n     * @notice Gets the queries that are being voted on this round.\\n     * @return pendingRequests `PendingRequest` array containing identifiers\\n     * and timestamps for all pending requests.\\n     */\\n    function getPendingRequests() external view virtual returns (PendingRequestAncillary[] memory);\\n\\n    /**\\n     * @notice Returns the current voting phase, as a function of the current time.\\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\\n     */\\n    function getVotePhase() external view virtual returns (Phase);\\n\\n    /**\\n     * @notice Returns the current round ID, as a function of the current time.\\n     * @return uint256 representing the unique round ID.\\n     */\\n    function getCurrentRoundId() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Retrieves rewards owed for a set of resolved price requests.\\n     * @dev Can only retrieve rewards if calling for a valid round and if the\\n     * call is done within the timeout threshold (not expired).\\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\\n     * @param roundId the round from which voting rewards will be retrieved from.\\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\\n     * @return total amount of rewards returned to the voter.\\n     */\\n    function retrieveRewards(\\n        address voterAddress,\\n        uint256 roundId,\\n        PendingRequestAncillary[] memory toRetrieve\\n    ) public virtual returns (FixedPoint.Unsigned memory);\\n\\n    // Voting Owner functions.\\n\\n    /**\\n     * @notice Disables this Voting contract in favor of the migrated one.\\n     * @dev Can only be called by the contract owner.\\n     * @param newVotingAddress the newly migrated contract address.\\n     */\\n    function setMigrated(address newVotingAddress) external virtual;\\n\\n    /**\\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\n     * @param newInflationRate sets the next round's inflation rate.\\n     */\\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\\n\\n    /**\\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\n     * @param newGatPercentage sets the next round's Gat percentage.\\n     */\\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\\n\\n    /**\\n     * @notice Resets the rewards expiration timeout.\\n     * @dev This change only applies to rounds that have not yet begun.\\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\\n     */\\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/VotingInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\nimport \\\"./VotingAncillaryInterface.sol\\\";\\n\\n/**\\n * @title Interface that voters must use to Vote on price request resolutions.\\n */\\nabstract contract VotingInterface {\\n    struct PendingRequest {\\n        bytes32 identifier;\\n        uint256 time;\\n    }\\n\\n    // Captures the necessary data for making a commitment.\\n    // Used as a parameter when making batch commitments.\\n    // Not used as a data structure for storage.\\n    struct Commitment {\\n        bytes32 identifier;\\n        uint256 time;\\n        bytes32 hash;\\n        bytes encryptedVote;\\n    }\\n\\n    // Captures the necessary data for revealing a vote.\\n    // Used as a parameter when making batch reveals.\\n    // Not used as a data structure for storage.\\n    struct Reveal {\\n        bytes32 identifier;\\n        uint256 time;\\n        int256 price;\\n        int256 salt;\\n    }\\n\\n    /**\\n     * @notice Commit a vote for a price request for `identifier` at `time`.\\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\\n     * Commits can be changed.\\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system\u2019s expected behavior,\\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\\n     * they can determine the vote pre-reveal.\\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\\n     * @param time unix timestamp of the price being voted on.\\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\\n     */\\n    function commitVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes32 hash\\n    ) external virtual;\\n\\n    /**\\n     * @notice Submit a batch of commits in a single transaction.\\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\\n     * commitments that can fit in one transaction.\\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\n     */\\n    function batchCommit(Commitment[] memory commits) public virtual;\\n\\n    /**\\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\\n     * @param time unix timestamp of for the price request.\\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\\n     */\\n    function commitAndEmitEncryptedVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes32 hash,\\n        bytes memory encryptedVote\\n    ) public virtual;\\n\\n    /**\\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\\n     * time of calling `_freezeRoundVariables`.\\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\\n     * snapshot.\\n     */\\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\\n\\n    /**\\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\n     * @param time specifies the unix timestamp of the price is being voted on.\\n     * @param price voted on during the commit phase.\\n     * @param salt value used to hide the commitment price during the commit phase.\\n     */\\n    function revealVote(\\n        bytes32 identifier,\\n        uint256 time,\\n        int256 price,\\n        int256 salt\\n    ) public virtual;\\n\\n    /**\\n     * @notice Reveal multiple votes in a single transaction.\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\\n     * that can fit in one transaction.\\n     * @dev For more information on reveals, review the comment for `revealVote`.\\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\\n     */\\n    function batchReveal(Reveal[] memory reveals) public virtual;\\n\\n    /**\\n     * @notice Gets the queries that are being voted on this round.\\n     * @return pendingRequests `PendingRequest` array containing identifiers\\n     * and timestamps for all pending requests.\\n     */\\n    function getPendingRequests()\\n        external\\n        view\\n        virtual\\n        returns (VotingAncillaryInterface.PendingRequestAncillary[] memory);\\n\\n    /**\\n     * @notice Returns the current voting phase, as a function of the current time.\\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\\n     */\\n    function getVotePhase() external view virtual returns (VotingAncillaryInterface.Phase);\\n\\n    /**\\n     * @notice Returns the current round ID, as a function of the current time.\\n     * @return uint256 representing the unique round ID.\\n     */\\n    function getCurrentRoundId() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Retrieves rewards owed for a set of resolved price requests.\\n     * @dev Can only retrieve rewards if calling for a valid round and if the\\n     * call is done within the timeout threshold (not expired).\\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\\n     * @param roundId the round from which voting rewards will be retrieved from.\\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\\n     * @return total amount of rewards returned to the voter.\\n     */\\n    function retrieveRewards(\\n        address voterAddress,\\n        uint256 roundId,\\n        PendingRequest[] memory toRetrieve\\n    ) public virtual returns (FixedPoint.Unsigned memory);\\n\\n    // Voting Owner functions.\\n\\n    /**\\n     * @notice Disables this Voting contract in favor of the migrated one.\\n     * @dev Can only be called by the contract owner.\\n     * @param newVotingAddress the newly migrated contract address.\\n     */\\n    function setMigrated(address newVotingAddress) external virtual;\\n\\n    /**\\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\n     * @param newInflationRate sets the next round's inflation rate.\\n     */\\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\\n\\n    /**\\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\n     * @param newGatPercentage sets the next round's Gat percentage.\\n     */\\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\\n\\n    /**\\n     * @notice Resets the rewards expiration timeout.\\n     * @dev This change only applies to rounds that have not yet begun.\\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\\n     */\\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"},{\"internalType\":\"contract Governor\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract Finder\",\"name\":\"_finder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"BondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ProposalResolved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondedProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"lockedBond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract Finder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract Governor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Governor.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"resolveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"setBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Proposer", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "00000000000000000000000004fa0d235c4abf4bcf4787af4cf447de572ef82800000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000592349f7dedb2b75f9d4f194d4b7c16d82e507dc00000000000000000000000040f941e48a552bf496b154af6bf55725f18d77c30000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}