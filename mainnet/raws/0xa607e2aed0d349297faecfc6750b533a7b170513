{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.7 https://hardhat.org\r\n\r\n// File contracts/interfaces/IUpgradable.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n// General interface for upgradable contracts\r\ninterface IUpgradable {\r\n    error NotOwner();\r\n    error InvalidOwner();\r\n    error InvalidCodeHash();\r\n    error InvalidImplementation();\r\n    error SetupFailed();\r\n    error NotProxy();\r\n\r\n    event Upgraded(address indexed newImplementation);\r\n    event OwnershipTransferred(address indexed newOwner);\r\n\r\n    // Get current owner\r\n    function owner() external view returns (address);\r\n\r\n    function contractId() external view returns (bytes32);\r\n\r\n    function upgrade(\r\n        address newImplementation,\r\n        bytes32 newImplementationCodeHash,\r\n        bytes calldata params\r\n    ) external;\r\n\r\n    function setup(bytes calldata data) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IAxelarGasService.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n// This should be owned by the microservice that is paying for gas.\r\ninterface IAxelarGasService is IUpgradable {\r\n    error NothingReceived();\r\n    error TransferFailed();\r\n\r\n    event GasPaidForContractCall(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event GasPaidForContractCallWithToken(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeGasPaidForContractCall(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeGasPaidForContractCallWithToken(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event GasAdded(bytes32 indexed txHash, uint256 indexed logIndex, address gasToken, uint256 gasFeeAmount, address refundAddress);\r\n\r\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\r\n\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payGasForContractCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payGasForContractCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payNativeGasForContractCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payNativeGasForContractCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    function addGas(\r\n        bytes32 txHash,\r\n        uint256 txIndex,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    function addNativeGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    function collectFees(address payable receiver, address[] calldata tokens) external;\r\n\r\n    function refund(\r\n        address payable receiver,\r\n        address token,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    error InvalidAccount();\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/util/Upgradable.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\nabstract contract Upgradable is IUpgradable {\r\n    // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n    // keccak256('owner')\r\n    bytes32 internal constant _OWNER_SLOT = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\r\n\r\n    modifier onlyOwner() {\r\n        if (owner() != msg.sender) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address owner_) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            owner_ := sload(_OWNER_SLOT)\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        if (newOwner == address(0)) revert InvalidOwner();\r\n\r\n        emit OwnershipTransferred(newOwner);\r\n        assembly {\r\n            sstore(_OWNER_SLOT, newOwner)\r\n        }\r\n    }\r\n\r\n    function implementation() public view returns (address implementation_) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            implementation_ := sload(_IMPLEMENTATION_SLOT)\r\n        }\r\n    }\r\n\r\n    function upgrade(\r\n        address newImplementation,\r\n        bytes32 newImplementationCodeHash,\r\n        bytes calldata params\r\n    ) external override onlyOwner {\r\n        if (IUpgradable(newImplementation).contractId() != IUpgradable(this).contractId()) revert InvalidImplementation();\r\n        if (newImplementationCodeHash != newImplementation.codehash) revert InvalidCodeHash();\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = newImplementation.delegatecall(abi.encodeWithSelector(this.setup.selector, params));\r\n\r\n        if (!success) revert SetupFailed();\r\n\r\n        emit Upgraded(newImplementation);\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(_IMPLEMENTATION_SLOT, newImplementation)\r\n        }\r\n    }\r\n\r\n    function setup(bytes calldata data) external override {\r\n        // Prevent setup from being called on the implementation\r\n        if (implementation() == address(0)) revert NotProxy();\r\n\r\n        _setup(data);\r\n    }\r\n\r\n    function _setup(bytes calldata data) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/gas-service/AxelarGasService.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n// This should be owned by the microservice that is paying for gas.\r\ncontract AxelarGasService is Upgradable, IAxelarGasService {\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payGasForContractCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external override {\r\n        _safeTransferFrom(gasToken, msg.sender, gasFeeAmount);\r\n\r\n        emit GasPaidForContractCall(\r\n            sender,\r\n            destinationChain,\r\n            destinationAddress,\r\n            keccak256(payload),\r\n            gasToken,\r\n            gasFeeAmount,\r\n            refundAddress\r\n        );\r\n    }\r\n\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payGasForContractCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string memory symbol,\r\n        uint256 amount,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external override {\r\n        {\r\n            _safeTransferFrom(gasToken, msg.sender, gasFeeAmount);\r\n        }\r\n\r\n        emit GasPaidForContractCallWithToken(\r\n            sender,\r\n            destinationChain,\r\n            destinationAddress,\r\n            keccak256(payload),\r\n            symbol,\r\n            amount,\r\n            gasToken,\r\n            gasFeeAmount,\r\n            refundAddress\r\n        );\r\n    }\r\n\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payNativeGasForContractCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address refundAddress\r\n    ) external payable override {\r\n        if (msg.value == 0) revert NothingReceived();\r\n\r\n        emit NativeGasPaidForContractCall(sender, destinationChain, destinationAddress, keccak256(payload), msg.value, refundAddress);\r\n    }\r\n\r\n    // This is called on the source chain before calling the gateway to execute a remote contract.\r\n    function payNativeGasForContractCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount,\r\n        address refundAddress\r\n    ) external payable override {\r\n        if (msg.value == 0) revert NothingReceived();\r\n\r\n        emit NativeGasPaidForContractCallWithToken(\r\n            sender,\r\n            destinationChain,\r\n            destinationAddress,\r\n            keccak256(payload),\r\n            symbol,\r\n            amount,\r\n            msg.value,\r\n            refundAddress\r\n        );\r\n    }\r\n\r\n    function addGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external override {\r\n        _safeTransferFrom(gasToken, msg.sender, gasFeeAmount);\r\n\r\n        emit GasAdded(txHash, logIndex, gasToken, gasFeeAmount, refundAddress);\r\n    }\r\n\r\n    function addNativeGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address refundAddress\r\n    ) external payable override {\r\n        if (msg.value == 0) revert NothingReceived();\r\n\r\n        emit NativeGasAdded(txHash, logIndex, msg.value, refundAddress);\r\n    }\r\n\r\n    function collectFees(address payable receiver, address[] calldata tokens) external onlyOwner {\r\n        for (uint256 i; i < tokens.length; i++) {\r\n            address token = tokens[i];\r\n\r\n            if (token == address(0)) {\r\n                receiver.transfer(address(this).balance);\r\n            } else {\r\n                uint256 amount = IERC20(token).balanceOf(address(this));\r\n                _safeTransfer(token, receiver, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function refund(\r\n        address payable receiver,\r\n        address token,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        if (token == address(0)) {\r\n            receiver.transfer(amount);\r\n        } else {\r\n            _safeTransfer(token, receiver, amount);\r\n        }\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address tokenAddress,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory returnData) = tokenAddress.call(abi.encodeWithSelector(IERC20.transfer.selector, receiver, amount));\r\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\r\n\r\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        address tokenAddress,\r\n        address from,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory returnData) = tokenAddress.call(\r\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, address(this), amount)\r\n        );\r\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\r\n\r\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\r\n    }\r\n\r\n    function contractId() public pure returns (bytes32) {\r\n        return keccak256('axelar-gas-service');\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidCodeHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetupFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"GasAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"GasPaidForContractCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"GasPaidForContractCallWithToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"NativeGasAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"NativeGasPaidForContractCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"NativeGasPaidForContractCallWithToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"addGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"addNativeGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"payGasForContractCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"payGasForContractCallWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"payNativeGasForContractCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"payNativeGasForContractCallWithToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"newImplementationCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AxelarGasService", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2bec435caf77233ba3fa3cc9235e8203173f7b25cf946d0c5b699242e6a47dc3"}]}