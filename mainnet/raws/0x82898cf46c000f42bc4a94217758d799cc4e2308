{"status": "1", "message": "OK", "result": [{"SourceCode": "// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28c0\u2824\u2824\u28a4\u2824\u2880\u2800\u2880\u2800\u28c0\u2814\u2804\u2800\u2810\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\u2804\u2880\u28ff\u285f\u2840\u2800\u2820\u28ed\u2815\u2800\u2800\u2800\u2808\u2831\u28ff\u28f6\u28f7\u2845\u2800\u2881\u2800\u2801\r\n// \u2800\u2800\u2800\u2840\u2800\u2802\u2801\u28c0\u28c0\u28fe\u28ff\u28e5\u28e4\u2874\u28ff\u284f\u28a0\u2886\u2800\u2800\u2880\u2800\u2819\u281f\u287b\u2803\u2800\u28b8\u2861\u2800\r\n// \u2800\u2840\u2808\u2800\u2800\u2800\u28e0\u2876\u281b\u28bb\u281b\u28ff\u28ba\u28c1\u2881\u2887\u28b8\u2800\u2806\u2804\u2808\u28c4\u28a4\u28f7\u2801\u2804\u2820\u283e\u288b\u2802\r\n// \u2800\u2800\u2800\u2800\u28e0\u28fe\u280f\u2800\u2800\u2844\u2800\u28b8\u2821\u283b\u2802\u2800\u2802\u2898\u28fe\u285c\u2844\u2887\u2820\u28ba\u2844\u2808\u2802\u2808\u2800\u2800\r\n// \u2801\u2840\u2800\u2808\u2809\u28f1\u2884\u2840\u2800\u2803\u2800\u2808\u2800\u2808\u2800\u2800\u2800\u2820\u280c\u2801\u287f\u282a\u2894\u28bf\u28ff\u28c4\u2811\u2813\u2800\u2800\r\n// \u2800\u2808\u2822\u2840\u28fc\u2833\u281f\u285b\u2802\u2834\u2880\u28a0\u28c4\u2800\u2800\u2810\u2800\u2800\u2848\u2810\u2845\u2806\u2848\u2800\u2819\u283f\u2821\u2826\u2814\u2800\r\n// \u2800\u2800\u2800\u2800\u2801\u2800\u2800\u2800\u2800\u2800\u28b8\u2846\u287f\u2837\u28c0\u2810\u2800\u28f8\u2804\u28f0\u2800\u28fc\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2810\u2810\u2884\u28a0\u28fe\u28cd\u2844\u2800\u2809\u281b\u280b\u2829\u281e\u281b\u28c3\u28fd\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bc\u28ee\u28f9\u28ff\u28cf\u28f7\u281f\u283f\u28fd\u28ef\u28f6\u285f\u2809\u2808\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ec\u28fd\u28ff\u28b0\u2876\u28ff\u28ff\u28b9\u28fe\u2800\u2800\u2800\u28b7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28c9\u2809\u285b\u281f\u28ee\u28e4\u28ff\u28ff\u2800\u2800\u28ec\u2808\u2882\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u289e\u287f\u283f\u283f\u2807\u2800\u28bf\u28fc\u28ff\u28ff\u28ff\u287f\u2812\u2816\u2848\u2886\u2808\u2804\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u287c\u2821\u2800\u28b7\u28f6\u28e4\u2844\u2800\u2800\u2819\u28fb\u28ff\u28df\u2881\u28e0\u2874\u2814\u2808\u2846\u2808\u2804\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2803\u2838\u2834\u283f\u28ff\u28c7\u28f0\u28f6\u28e4\u28c0\u28c1\u2840\u2819\u282f\u282a\u2826\u2800\u2812\u2812\u2800\u2800\u2800\u2800\u2800\r\n//\r\n// \r\n// Telegram: https://t.me/aquafinanceportal\r\n// Website: https://aquafinance.io\r\n// \r\n\r\n\r\n// SPDX-License-Identifier: Unlicensed                                                            \r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract AQUA is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"Liquid Finance\";\r\n    string private constant _symbol = \"AQUA\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping (address => uint256) private _buyMap;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1e12 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    mapping(address => bool) private _isSniper;\r\n    uint256 public launchTime;\r\n\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _taxFeeOnBuy = 11;\r\n    \r\n    uint256 private _redisFeeOnSell = 0;\r\n    uint256 private _taxFeeOnSell = 15;\r\n    \r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _taxFee = _taxFeeOnSell;\r\n    uint256 private _burnFee = 0;\r\n    \r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n    uint256 private _previousburnFee = _burnFee;\r\n    \r\n    address payable private _marketingAddress = payable(0xD9B638f1aaC77b13110Fce069D8a4BE9718Df6E7);\r\n    address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n    \r\n    uint256 public _maxTxAmount = 1e10 * 10**9; \r\n    uint256 public _maxWalletSize = 2e10 * 10**9;\r\n    uint256 public _swapTokensAtAmount = 1000 * 10**9;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        \r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n        _isExcludedFromFee[deadAddress] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function createNewPair() external onlyOwner() {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0 && _burnFee == 0) return;\r\n    \r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n        _previousburnFee = _burnFee;\r\n        \r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n        _burnFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n        _burnFee = _previousburnFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isSniper[to], 'Stop sniping!');\r\n        require(!_isSniper[from], 'Stop sniping!');\r\n        require(!_isSniper[_msgSender()], 'Stop sniping!');\r\n\r\n        if (from != owner() && to != owner()) {\r\n            \r\n            if (!tradingOpen) {\r\n                revert(\"Trading not yet enabled!\");\r\n            }\r\n            \r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                if (to != address(this) && from != address(this) && to != _marketingAddress && from != _marketingAddress) {\r\n                    require(amount <= _maxTxAmount);\r\n                }\r\n            }\r\n\r\n            if (to != uniswapV2Pair && to != _marketingAddress && to != address(this) && to != deadAddress) {\r\n                require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n                \r\n            }\r\n            \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance > _swapTokensAtAmount;\r\n            \r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                uint256 burntAmount = 0;\r\n                if (_burnFee > 0) {\r\n                    burntAmount = contractTokenBalance.mul(_burnFee).div(10**2);\r\n                    burnTokens(burntAmount);\r\n                }\r\n                swapTokensForEth(contractTokenBalance - burntAmount);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n        \r\n        bool takeFee = true;\r\n\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                    _buyMap[to] = block.timestamp;\r\n                    _redisFee = _redisFeeOnBuy;\r\n                    _taxFee = _taxFeeOnBuy;\r\n                    if (block.timestamp == launchTime) {\r\n                        _isSniper[to] = true;\r\n                    }\r\n            }\r\n    \r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                \r\n                    _redisFee = _redisFeeOnSell;\r\n                    _taxFee = _taxFeeOnSell;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function burnTokens(uint256 burntAmount) private {\r\n        _transfer(address(this), deadAddress, burntAmount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount);\r\n    }\r\n\r\n    function setTrading() public onlyOwner {\r\n        require(!tradingOpen);\r\n        tradingOpen = true;\r\n        launchTime = block.timestamp;\r\n    }\r\n\r\n\r\n    function setMarketingWallet(address marketingAddress) external {\r\n        require(_msgSender() == _marketingAddress);\r\n        _marketingAddress = payable(marketingAddress);\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n    }\r\n\r\n    \r\n    function manualswap(uint256 amount) external {\r\n        require(_msgSender() == _marketingAddress);\r\n        require(amount <= balanceOf(address(this)) && amount > 0, \"Wrong amount\");\r\n        swapTokensForEth(amount);\r\n    }\r\n\r\n    function addSniper(address[] memory snipers) external onlyOwner {\r\n        for(uint256 i= 0; i< snipers.length; i++){\r\n            _isSniper[snipers[i]] = true;\r\n            \r\n        }\r\n    }\r\n\r\n    function removeSniper(address sniper) external onlyOwner {\r\n        if (_isSniper[sniper]) {\r\n            _isSniper[sniper] = false;\r\n        }\r\n    }\r\n\r\n    function isSniper(address sniper) external view returns (bool){\r\n        return _isSniper[sniper];\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        \r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n    \r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n    \r\n    function setMaxTxnAmount(uint256 maxTxAmount) external onlyOwner {\r\n        require(maxTxAmount >= _maxTxAmount);\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n    \r\n    function setMaxWalletSize(uint256 maxWalletSize) external onlyOwner {\r\n        require(maxWalletSize >= _maxWalletSize);\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    function setTaxFee(uint256 amountBuy, uint256 amountSell) external onlyOwner {\r\n        _taxFeeOnBuy = amountBuy;\r\n        _taxFeeOnSell = amountSell;\r\n    }\r\n\r\n    function setRefFee(uint256 amountRefBuy, uint256 amountRefSell) external onlyOwner {\r\n        _redisFeeOnBuy = amountRefBuy;\r\n        _redisFeeOnSell = amountRefSell;\r\n    }\r\n\r\n    function setBurnFee(uint256 amount) external onlyOwner {\r\n        _burnFee = amount;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"snipers\",\"type\":\"address[]\"}],\"name\":\"addSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNewPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRefBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRefSell\",\"type\":\"uint256\"}],\"name\":\"setRefFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSell\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AQUA", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce0e5bde643ee1a7c256f8a6380753bf0f3f22a7e1eef9c502ce64dbd4d558ec"}]}