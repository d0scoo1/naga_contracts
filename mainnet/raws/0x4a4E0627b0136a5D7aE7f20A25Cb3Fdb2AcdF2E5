{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/src/contracts/GotToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Checks if a given address owns a token from a given ERC721 contract or the CryptoPunks contract (which does not implement ERC721)\\r\\n * @author nfttank.eth\\r\\n */\\r\\ncontract GotToken {\\r\\n    \\r\\n    /**\\r\\n     * @dev Checks whether a given address (possibleOwner) owns a given token by its contract address and the token id itself.\\r\\n     * This method can only check contracts implementing the ERC721 standard and in addition the CryptoPunks contract\\r\\n     * (with a custom implementation because CryptoPunks do not implement the ERC721 standard).\\r\\n     *\\r\\n     * Does not throw errors but returns false if the real token owner could not be found or the token does not exist.\\r\\n     *\\r\\n     * Sample contract addresses on Mainnet\\r\\n     *   CryptoPunks:           0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB     \\r\\n     *   Bored Ape Yacht Club:  0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\\r\\n     *   Cool Cats:             0x1A92f7381B9F03921564a437210bB9396471050C\\r\\n     *   CrypToadz:             0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6\\r\\n     */     \\r\\n    function ownsTokenOfContract(address possibleOwner, address contractAddress, uint256 tokenId) public view returns (bool) {\\r\\n        try this.unsafeOwnsTokenOfContract(possibleOwner, contractAddress, tokenId) returns (bool b) {\\r\\n            return b;\\r\\n        } catch { \\r\\n            return false; \\r\\n        }  \\r\\n    }\\r\\n        \\r\\n    /**\\r\\n     * @dev Checks whether a given address (possibleOwner) owns a given token by its contract address and the token id itself.\\r\\n     * This method can only check contracts implementing the ERC721 standard and in addition the CryptoPunks contract\\r\\n     * (with a custom implementation because CryptoPunks do not implement the ERC721 standard).\\r\\n     *\\r\\n     * Might revert execution if the contract address does not exist on the current net.\\r\\n     *\\r\\n     * Sample contract addresses on Mainnet\\r\\n     *   CryptoPunks:           0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB     \\r\\n     *   Bored Ape Yacht Club:  0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\\r\\n     *   Cool Cats:             0x1A92f7381B9F03921564a437210bB9396471050C\\r\\n     *   CrypToadz:             0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6\\r\\n     */ \\r\\n    function unsafeOwnsTokenOfContract(address possibleOwner, address contractAddress, uint256 tokenId) public view returns (bool) {\\r\\n\\r\\n        address CryptoPunksContractMainnet = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\r\\n        address realTokenOwner = address(0);\\r\\n\\r\\n        if (contractAddress == CryptoPunksContractMainnet) {\\r\\n            CryptoPunksInterface punksContract = CryptoPunksInterface(CryptoPunksContractMainnet);\\r\\n            realTokenOwner = punksContract.punkIndexToAddress(tokenId);\\r\\n        }\\r\\n        else {\\r\\n            IERC721 ercContract = IERC721(contractAddress);\\r\\n            realTokenOwner = ercContract.ownerOf(tokenId);\\r\\n        }\\r\\n\\r\\n        return possibleOwner == realTokenOwner && realTokenOwner != address(0);\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev Checks whether a given address (possibleOwner) owns a given token by given contract addresses and the token id itself.\\r\\n     * This method can only check contracts implementing the ERC721 standard and in addition the CryptoPunks contract\\r\\n     * (with a custom implementation because CryptoPunks do not implement the ERC721 standard).\\r\\n     * Does not throw errors but returns false if the real token owner could not be found or the token does not exist.\\r\\n     * \\r\\n     * Returns an array with the results at the given index of the array.\\r\\n     *\\r\\n     * Sample contract addresses on Mainnet\\r\\n     *   CryptoPunks:           0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB     \\r\\n     *   Bored Ape Yacht Club:  0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\\r\\n     *   Cool Cats:             0x1A92f7381B9F03921564a437210bB9396471050C\\r\\n     *   CrypToadz:             0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6\\r\\n     */ \\r\\n    function ownsTokenOfContracts(address possibleOwner, address[] calldata contractAddresses, uint256 tokenId) public view returns (bool[] memory) {\\r\\n\\r\\n        bool[] memory result = new bool[](contractAddresses.length);\\r\\n\\r\\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\\r\\n            result[i] = ownsTokenOfContract(possibleOwner, contractAddresses[i], tokenId);\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CryptoPunks contract doesn't implement the ERC721 standard so we have to use this interface to call their method punkIndexToAddress()\\r\\n */\\r\\ninterface CryptoPunksInterface {\\r\\n    function punkIndexToAddress(uint tokenId) external view returns(address);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"possibleOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownsTokenOfContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"possibleOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownsTokenOfContracts\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"possibleOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unsafeOwnsTokenOfContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GotToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}