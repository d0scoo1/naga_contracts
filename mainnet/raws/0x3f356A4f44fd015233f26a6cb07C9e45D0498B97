{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// Inspired by Solmate: https://github.com/Rari-Capital/solmate\r\n/// Developed by 0xBasset\r\n\r\ncontract Aura {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public impl_;\r\n    address public ruler;\r\n    address public yieldRater;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public startingTime;\r\n\r\n    bool public paused;\r\n\r\n    ERC721Like public ascended;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    mapping(address => bool) public isMinter;\r\n\r\n    mapping(uint256 => Claim) public claims;\r\n\r\n    struct Claim { uint128 time; uint128 rate; }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function name() external pure returns (string memory) {\r\n        return \"AURA\";\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"AURA\";\r\n    }\r\n    \r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    \r\n    function initialize(address ascended_, address rater_) external { \r\n        require(msg.sender == ruler);\r\n\r\n        startingTime = 1642092968;\r\n        ascended     = ERC721Like(ascended_);\r\n        yieldRater   = rater_;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        balanceOf[msg.sender] -= value;\r\n\r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != type(uint256).max) {\r\n            allowance[from][msg.sender] -= value;\r\n        }\r\n\r\n        balanceOf[from] -= value;\r\n\r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              CLAIM\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function claim(uint256 id_) public {\r\n        require(!paused, \"claims are paused\");\r\n\r\n        address owner = ascended.ownerOf(id_);\r\n        require(owner != address(0), \"token does not exist\");\r\n\r\n        (uint256 amount, uint256 rate) = _claimable(id_);\r\n        \r\n        claims[id_].time = uint128(block.timestamp);\r\n        claims[id_].rate = uint128(rate);\r\n\r\n        _mint(owner, amount);\r\n    }\r\n\r\n    function claimMany(uint256[] calldata ids_) external {\r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            claim(ids_[i]);\r\n        }\r\n    }\r\n\r\n    function claimable(uint256 id) public view returns (uint256 claimable_) {\r\n        (claimable_ , ) = _claimable(id);\r\n    }\r\n\r\n    function _claimable(uint256 id_) internal view returns (uint256 amount, uint256 dailyRate) {\r\n        Claim memory cl = claims[id_];\r\n\r\n        if (cl.rate != 0) {\r\n            dailyRate = cl.rate;\r\n        } else {\r\n            // dailyRate = 1 ether;\r\n            dailyRate = IYieldRater(yieldRater).getYieldFor(id_);\r\n        }\r\n\r\n        uint256 diff = block.timestamp - (cl.time == 0 ? startingTime : cl.time);\r\n        amount  = dailyRate * diff / 1 days;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ADMIN PRIVILEGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function mint(address to, uint256 value) external {\r\n        require(isMinter[msg.sender], \"FORBIDDEN TO MINT\");\r\n        _mint(to, value);\r\n    }\r\n\r\n    function burn(address from, uint256 value) external {\r\n        require(isMinter[msg.sender], \"FORBIDDEN TO BURN\");\r\n        _burn(from, value);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                         Ruler Function\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setMinter(address minter, bool status) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        isMinter[minter] = status;\r\n    }\r\n\r\n    function setRuler(address ruler_) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        ruler = ruler_;\r\n    }\r\n\r\n    function setPaused(bool paused_) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        paused = paused_;\r\n    }\r\n\r\n    function setYieldRateMany(uint256[] calldata ids_, uint256 rate_) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n        uint256 len = ids_.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            claims[ids_[i]].rate = uint128(rate_);   \r\n        }\r\n    }\r\n\r\n    function setYieldRate(uint256 id_, uint256 rate_) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        claims[id_].rate = uint128(rate_);\r\n    }\r\n\r\n    function setYieldRaterAddress(address ratings_) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        yieldRater = ratings_;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          INTERNAL UTILS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply += value;\r\n\r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] -= value;\r\n\r\n        // This is safe because a user won't ever\r\n        // have a balance larger than totalSupply!\r\n        unchecked {\r\n            totalSupply -= value;\r\n        }\r\n\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n}\r\n\r\ninterface ERC721Like {\r\n    function ownerOf(uint256 id_) external view returns(address);\r\n}\r\n\r\ninterface IYieldRater {\r\n    function getYieldFor(uint256 id) external pure returns (uint256);\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ascended\",\"outputs\":[{\"internalType\":\"contract ERC721Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"time\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ascended_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rater_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ruler_\",\"type\":\"address\"}],\"name\":\"setRuler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setYieldRateMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ratings_\",\"type\":\"address\"}],\"name\":\"setYieldRaterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Aura", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://309bbe5064d246d9cdff3e193cae64bf56659f99adae2abe532ff7fd5fb4343d"}]}