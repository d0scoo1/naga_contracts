{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IMTO is IERC721 {\r\n  function mint(address to, uint256 quantity) external;\r\n  function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract MintContract is Ownable, ReentrancyGuard {\r\n  enum MintPeriod {NONE, PRESALE_OT, PRESALE_WL, PUBLICSALE, FREE_MINT}\r\n  enum Role {NONE, OT, TL, WL}\r\n\r\n\tuint256 public constant MAX_PER_ADDRESS_OT = 4;\r\n  uint256 public constant MAX_PER_ADDRESS_TL = 2;\r\n  uint256 public constant MAX_PER_ADDRESS_WL = 2;\r\n  uint256 public constant MAX_PER_ADDRESS_PUBLIC = 4;\r\n  uint256 public constant MAX_PER_ADDRESS_FREE = 1;\r\n\r\n  uint256 public constant COLLECTION_SIZE = 6666;\r\n\r\n  uint256 public constant MINT_PRICE_OT = 0.04 ether;\r\n  uint256 public constant MINT_PRICE_WL = 0.05 ether;\r\n  uint256 public constant MINT_PRICE_PUBLIC = 0.06 ether;\r\n\r\n  MintPeriod public currentMintPeriod = MintPeriod.NONE;\r\n\r\n  IMTO public MTOContract;\r\n\r\n  mapping(address => uint256) private mintAmountOT;\r\n  mapping(address => uint256) private mintAmountTL;\r\n  mapping(address => uint256) private mintAmountWL;\r\n  mapping(address => uint256) private mintAmountFree;\r\n  mapping(address => uint256) private mintAmountPublic;\r\n\r\n  address private publicKey;\r\n  uint256 freeMintAmount;\r\n\r\n\tstruct Token {\r\n\t\tbytes32 r;\r\n\t\tbytes32 s;\r\n\t\tuint8 v;\r\n\t}\r\n\r\n  event UpdateMintPeriod(MintPeriod _period);\r\n\r\n  modifier callerIsUser() {\r\n    require(tx.origin == msg.sender, \"The caller is another contract\");\r\n    _;\r\n  }\r\n\r\n\tfunction _isVerifiedToken(bytes32 digest, Token memory token) internal view returns (bool) {\r\n\t\taddress signer = ecrecover(digest, token.v, token.r, token.s);\r\n\t\trequire(signer != address(0), 'ECDSA: invalid signature');\r\n\t\treturn signer == publicKey;\r\n\t}\r\n\r\n  function presaleMint(uint256 quantity, Role role, Token memory token) external payable callerIsUser {\r\n    require(currentMintPeriod == MintPeriod.PRESALE_OT, \"presale has not begun yet\");\r\n\r\n    uint256 _totalSupply = MTOContract.totalSupply();\r\n    require(_totalSupply + quantity * 2 + freeMintAmount < COLLECTION_SIZE, \"reached max supply\");\r\n    require(role == Role.OT || role == Role.TL, \"invalid role for this period\");\r\n\r\n    uint256 mintPrice;\r\n\r\n    if (role == Role.OT){\r\n      require(mintAmountOT[msg.sender] + quantity <= MAX_PER_ADDRESS_OT, \"can not mint this many\");\r\n      mintPrice = MINT_PRICE_OT;\r\n      mintAmountOT[msg.sender] += quantity;\r\n    } else if (role == Role.TL){\r\n      require(mintAmountTL[msg.sender] + quantity <= MAX_PER_ADDRESS_TL, \"can not mint this many\");\r\n      mintPrice = MINT_PRICE_WL;\r\n      mintAmountTL[msg.sender] += quantity;\r\n    }\r\n\r\n\t\tbytes32 digest = keccak256(\r\n      abi.encode(MintPeriod.PRESALE_OT, role, msg.sender)\r\n    );\r\n\r\n\t\trequire(_isVerifiedToken(digest, token), 'Invalid token'); // 4\r\n\r\n    MTOContract.mint(msg.sender, quantity * 2);\r\n    \r\n    refundIfOver(mintPrice * quantity);\r\n  }\r\n\r\n  function presaleMintForWL(uint256 quantity, Token memory token) external payable callerIsUser {\r\n    require(currentMintPeriod == MintPeriod.PRESALE_WL, \"presaleWL has not begun yet\");\r\n\r\n    uint256 _totalSupply = MTOContract.totalSupply();\r\n    require(_totalSupply + quantity * 2 + freeMintAmount < COLLECTION_SIZE, \"reached max supply\");\r\n\r\n    require(mintAmountWL[msg.sender] + quantity <= MAX_PER_ADDRESS_WL, \"can not mint this many\");\r\n    mintAmountWL[msg.sender] += quantity;\r\n\r\n    uint256 mintPrice = MINT_PRICE_WL;\r\n\r\n\t\tbytes32 digest = keccak256(\r\n      abi.encode(MintPeriod.PRESALE_WL, msg.sender)\r\n    );\r\n\r\n\t\trequire(_isVerifiedToken(digest, token), 'Invalid token');\r\n\r\n    MTOContract.mint(msg.sender, quantity * 2);\r\n    \r\n    refundIfOver(mintPrice * quantity);\r\n  }\r\n\r\n  function publicSaleMint(uint256 quantity) external payable callerIsUser {\r\n    require(currentMintPeriod == MintPeriod.PUBLICSALE, \"public sale has not begun yet\");\r\n\r\n    uint256 _totalSupply = MTOContract.totalSupply();\r\n    require(_totalSupply + quantity * 2 + freeMintAmount < COLLECTION_SIZE, \"reached max supply\");\r\n    \r\n    require(mintAmountPublic[msg.sender] + quantity <= MAX_PER_ADDRESS_PUBLIC, \"can not mint this many\");\r\n    mintAmountPublic[msg.sender] += quantity;\r\n\r\n    uint256 mintPrice = MINT_PRICE_PUBLIC;\r\n\r\n    MTOContract.mint(msg.sender, quantity * 2);\r\n    refundIfOver(mintPrice * quantity);\r\n  }\r\n\r\n  function freeMint(Token memory token) external payable callerIsUser {\r\n    require(currentMintPeriod == MintPeriod.FREE_MINT, \"free mint has not begun yet\");\r\n\r\n    uint256 _totalSupply = MTOContract.totalSupply();\r\n    require(_totalSupply + 2 < COLLECTION_SIZE, \"reached max supply\");\r\n\r\n    require(mintAmountFree[msg.sender] == 0, \"can not mint this many\");\r\n    mintAmountFree[msg.sender] = 1;\r\n\r\n\t\tbytes32 digest = keccak256(\r\n      abi.encode(MintPeriod.FREE_MINT, msg.sender)\r\n    );\r\n\r\n\t\trequire(_isVerifiedToken(digest, token), 'Invalid token');\r\n\r\n    MTOContract.mint(msg.sender, 2);\r\n  }\r\n\r\n  function refundIfOver(uint256 amount) private {\r\n    require(msg.value >= amount, \"Need to send more ETH.\");\r\n    if (msg.value > amount) {\r\n      payable(msg.sender).transfer(msg.value - amount);\r\n    }\r\n  }\r\n\r\n  function setPublicKey(address publicKey_) external onlyOwner {\r\n    publicKey = publicKey_;\r\n  }\r\n  \r\n  // For marketing etc.\r\n  function devMint(uint256 quantity, uint256 maxBatchSize) external onlyOwner {\r\n    uint256 _totalSupply = MTOContract.totalSupply();\r\n    require(\r\n      _totalSupply + quantity <= COLLECTION_SIZE,\r\n      \"too many already minted before dev mint\"\r\n    );\r\n\r\n    uint256 numChunks = quantity / maxBatchSize;\r\n\r\n    for (uint256 i = 0; i < numChunks; i++) {\r\n      MTOContract.mint(msg.sender, maxBatchSize);\r\n    }\r\n\r\n    uint256 remaining = quantity % maxBatchSize;\r\n    if (remaining > 0) {\r\n      MTOContract.mint(msg.sender, remaining);\r\n    }\r\n  }\r\n\r\n  function withdrawMoney() external onlyOwner nonReentrant {\r\n    (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n    require(success, \"Transfer failed.\");\r\n  }\r\n\r\n  function setMTOContract(address _mtoContract) external onlyOwner {\r\n    MTOContract = IMTO(_mtoContract);\r\n  }\r\n\r\n  function setCurrentMintPeriod(MintPeriod _period) external onlyOwner {\r\n    currentMintPeriod = _period;\r\n    emit UpdateMintPeriod(_period);\r\n  }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MintContract.MintPeriod\",\"name\":\"_period\",\"type\":\"uint8\"}],\"name\":\"UpdateMintPeriod\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLECTION_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS_FREE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS_OT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS_TL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS_WL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_OT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_WL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MTOContract\",\"outputs\":[{\"internalType\":\"contract IMTO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMintPeriod\",\"outputs\":[{\"internalType\":\"enum MintContract.MintPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBatchSize\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct MintContract.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"freeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"enum MintContract.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct MintContract.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct MintContract.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"presaleMintForWL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintContract.MintPeriod\",\"name\":\"_period\",\"type\":\"uint8\"}],\"name\":\"setCurrentMintPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mtoContract\",\"type\":\"address\"}],\"name\":\"setMTOContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"publicKey_\",\"type\":\"address\"}],\"name\":\"setPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintContract", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b694409000ab396eeaa20bfc7101bdac487ba51d022c1258e3c839b8889a403f"}]}