{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/interfaces/IFortFutures.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev Defines methods for Futures\r\ninterface IFortFutures {\r\n    \r\n    struct FutureView {\r\n        uint index;\r\n        address tokenAddress;\r\n        uint lever;\r\n        bool orientation;\r\n        \r\n        uint balance;\r\n        // Base price\r\n        uint basePrice;\r\n        // Base block\r\n        uint baseBlock;\r\n    }\r\n\r\n    /// @dev New future event\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param lever Lever of future\r\n    /// @param orientation true: call, false: put\r\n    /// @param index Index of the future\r\n    event New(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation,\r\n        uint index\r\n    );\r\n\r\n    /// @dev Buy future event\r\n    /// @param index Index of future\r\n    /// @param dcuAmount Amount of paid DCU\r\n    event Buy(\r\n        uint index,\r\n        uint dcuAmount,\r\n        address owner\r\n    );\r\n\r\n    /// @dev Sell future event\r\n    /// @param index Index of future\r\n    /// @param amount Amount to sell\r\n    /// @param owner The owner of future\r\n    /// @param value Amount of dcu obtained\r\n    event Sell(\r\n        uint index,\r\n        uint amount,\r\n        address owner,\r\n        uint value\r\n    );\r\n\r\n    /// @dev Settle future event\r\n    /// @param index Index of future\r\n    /// @param addr Target address\r\n    /// @param sender Address of settler\r\n    /// @param reward Liquidation reward\r\n    event Settle(\r\n        uint index,\r\n        address addr,\r\n        address sender,\r\n        uint reward\r\n    );\r\n    \r\n    /// @dev Returns the current value of the specified future\r\n    /// @param index Index of future\r\n    /// @param oraclePrice Current price from oracle\r\n    /// @param addr Target address\r\n    function balanceOf(uint index, uint oraclePrice, address addr) external view returns (uint);\r\n\r\n    /// @dev Find the futures of the target address (in reverse order)\r\n    /// @param start Find forward from the index corresponding to the given contract address \r\n    /// (excluding the record corresponding to start)\r\n    /// @param count Maximum number of records returned\r\n    /// @param maxFindCount Find records at most\r\n    /// @param owner Target address\r\n    /// @return futureArray Matched future array\r\n    function find(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view returns (FutureView[] memory futureArray);\r\n\r\n    /// @dev List futures\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return futureArray List of price sheets\r\n    function list(uint offset, uint count, uint order) external view returns (FutureView[] memory futureArray);\r\n\r\n    /// @dev Create future\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param levers Levers of future\r\n    /// @param orientation true: call, false: put\r\n    function create(address tokenAddress, uint[] calldata levers, bool orientation) external;\r\n\r\n    /// @dev Obtain the number of futures that have been opened\r\n    /// @return Number of futures opened\r\n    function getFutureCount() external view returns (uint);\r\n\r\n    /// @dev Get information of future\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param lever Lever of future\r\n    /// @param orientation true: call, false: put\r\n    /// @return Information of future\r\n    function getFutureInfo(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) external view returns (FutureView memory);\r\n\r\n    /// @dev Buy future\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param lever Lever of future\r\n    /// @param orientation true: call, false: put\r\n    /// @param dcuAmount Amount of paid DCU\r\n    function buy(\r\n        address tokenAddress,\r\n        uint lever,\r\n        bool orientation,\r\n        uint dcuAmount\r\n    ) external payable;\r\n\r\n    /// @dev Buy future direct\r\n    /// @param index Index of future\r\n    /// @param dcuAmount Amount of paid DCU\r\n    function buyDirect(uint index, uint dcuAmount) external payable;\r\n\r\n    /// @dev Sell future\r\n    /// @param index Index of future\r\n    /// @param amount Amount to sell\r\n    function sell(uint index, uint amount) external payable;\r\n\r\n    /// @dev Settle future\r\n    /// @param index Index of future\r\n    /// @param addresses Target addresses\r\n    function settle(uint index, address[] calldata addresses) external payable;\r\n\r\n    /// @dev K value is calculated by revised volatility\r\n    /// @param sigmaSQ sigmaSQ for token\r\n    /// @param p0 Last price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn0 Block number of the last price\r\n    /// @param p Latest price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn The block number when (ETH, TOKEN) price takes into effective\r\n    function calcRevisedK(uint sigmaSQ, uint p0, uint bn0, uint p, uint bn) external view returns (uint k);\r\n\r\n    /// @dev Calculate the impact cost\r\n    /// @param vol Trade amount in dcu\r\n    /// @return Impact cost\r\n    function impactCost(uint vol) external pure returns (uint);\r\n}\r\n\r\n\r\n// File contracts/custom/ChainParameter.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev Base contract of Hedge\r\ncontract ChainParameter {\r\n\r\n    // Block time. ethereum 14 seconds, BSC 3 seconds, polygon 2.2 seconds\r\n    uint constant BLOCK_TIME = 14;\r\n\r\n    // Minimal exercise block period. 180000\r\n    uint constant MIN_PERIOD = 180000;\r\n\r\n    uint constant MIN_EXERCISE_BLOCK = 180000;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value,gas:5000}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeDAO.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface IHedgeDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for Hedge builtin contract address mapping\r\ninterface IHedgeMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param dcuToken Address of dcu token contract\r\n    /// @param hedgeDAO IHedgeDAO implementation contract address\r\n    /// @param hedgeOptions IHedgeOptions implementation contract address\r\n    /// @param hedgeFutures IHedgeFutures implementation contract address\r\n    /// @param hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @param nestPriceFacade INestPriceFacade implementation contract address\r\n    function setBuiltinAddress(\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return dcuToken Address of dcu token contract\r\n    /// @return hedgeDAO IHedgeDAO implementation contract address\r\n    /// @return hedgeOptions IHedgeOptions implementation contract address\r\n    /// @return hedgeFutures IHedgeFutures implementation contract address\r\n    /// @return hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @return nestPriceFacade INestPriceFacade implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    );\r\n\r\n    /// @dev Get address of dcu token contract\r\n    /// @return Address of dcu token contract\r\n    function getDCUTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeDAO implementation contract address\r\n    /// @return IHedgeDAO implementation contract address\r\n    function getHedgeDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeOptions implementation contract address\r\n    /// @return IHedgeOptions implementation contract address\r\n    function getHedgeOptionsAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeFutures implementation contract address\r\n    /// @return IHedgeFutures implementation contract address\r\n    function getHedgeFuturesAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeVaultForStaking implementation contract address\r\n    /// @return IHedgeVaultForStaking implementation contract address\r\n    function getHedgeVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacade() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by Hedge system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface IHedgeGovernance is IHedgeMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/HedgeBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeBase {\r\n\r\n    /// @dev IHedgeGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Hedge:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IHedgeGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IHedgeGovernance(governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IHedgeGovernance(_governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/custom/HedgeFrequentlyUsed.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeFrequentlyUsed is HedgeBase {\r\n\r\n    // Address of DCU contract\r\n    address constant DCU_TOKEN_ADDRESS = 0xf56c6eCE0C0d6Fbb9A53282C0DF71dBFaFA933eF;\r\n\r\n    // Address of NestOpenPrice contract\r\n    address constant NEST_OPEN_PRICE = 0xE544cF993C7d477C7ef8E91D28aCA250D135aa03;\r\n    \r\n    // USDT base\r\n    uint constant USDT_BASE = 1 ether;\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestBatchPrice2.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This contract implemented the mining logic of nest\r\ninterface INestBatchPrice2 {\r\n\r\n    /// @dev Get the latest trigger price\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Price array, i * 2 is the block where the ith price is located, and i * 2 + 1 is the ith price\r\n    function triggeredPrice(\r\n        uint channelId,\r\n        uint[] calldata pairIndices, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Price array, i * 4 is the block where the ith price is located, i * 4 + 1 is the ith price,\r\n    /// i * 4 + 2 is the ith average price and i * 4 + 3 is the ith volatility\r\n    function triggeredPriceInfo(\r\n        uint channelId, \r\n        uint[] calldata pairIndices,\r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param height Destination block number\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Price array, i * 2 is the block where the ith price is located, and i * 2 + 1 is the ith price\r\n    function findPrice(\r\n        uint channelId,\r\n        uint[] calldata pairIndices, \r\n        uint height, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param count The number of prices that want to return\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Result array, i * count * 2 to (i + 1) * count * 2 - 1 are \r\n    /// the price results of group i quotation pairs\r\n    function lastPriceList(\r\n        uint channelId, \r\n        uint[] calldata pairIndices, \r\n        uint count, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Returns lastPriceList and triggered price info\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param count The number of prices that want to return\r\n    /// @param payback Address to receive refund\r\n    /// @return prices result of group i quotation pair. Among them, the first two count * are the latest prices, \r\n    /// and the last four are: trigger price block number, trigger price, average price and volatility\r\n    function lastPriceListAndTriggeredPriceInfo(\r\n        uint channelId, \r\n        uint[] calldata pairIndices,\r\n        uint count, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n}\r\n\r\n\r\n// File contracts/custom/FortPriceAdapter.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract FortPriceAdapter is HedgeFrequentlyUsed {\r\n    \r\n    // token configuration\r\n    struct TokenConfig {\r\n        // The channelId for call nest price\r\n        uint16 channelId;\r\n        // The pairIndex for call nest price\r\n        uint16 pairIndex;\r\n\r\n        // SigmaSQ for token\r\n        uint64 sigmaSQ;\r\n        // MIU_LONG for token\r\n        uint64 miuLong;\r\n        // MIU_SHORT for token\r\n        uint64 miuShort;\r\n    }\r\n\r\n    // Post unit: 2000usd\r\n    uint constant POST_UNIT = 2000 * USDT_BASE;\r\n\r\n    function _pairIndices(uint pairIndex) private pure returns (uint[] memory pairIndices) {\r\n        pairIndices = new uint[](1);\r\n        pairIndices[0] = pairIndex;\r\n    }\r\n\r\n    // Query latest 2 price\r\n    function _lastPriceList(\r\n        TokenConfig memory tokenConfig, \r\n        uint fee, \r\n        address payback\r\n    ) internal returns (uint[] memory prices) {\r\n        prices = INestBatchPrice2(NEST_OPEN_PRICE).lastPriceList {\r\n            value: fee\r\n        } (uint(tokenConfig.channelId), _pairIndices(uint(tokenConfig.pairIndex)), 2, payback);\r\n\r\n        prices[1] = _toUSDTPrice(prices[1]);\r\n        prices[3] = _toUSDTPrice(prices[3]);\r\n    }\r\n\r\n    // Query latest price\r\n    function _latestPrice(\r\n        TokenConfig memory tokenConfig, \r\n        uint fee, \r\n        address payback\r\n    ) internal returns (uint oraclePrice) {\r\n        uint[] memory prices = INestBatchPrice2(NEST_OPEN_PRICE).lastPriceList {\r\n            value: fee\r\n        } (uint(tokenConfig.channelId), _pairIndices(uint(tokenConfig.pairIndex)), 1, payback);\r\n\r\n        oraclePrice = _toUSDTPrice(prices[1]);\r\n    }\r\n\r\n    // Find price by blockNumber\r\n    function _findPrice(\r\n        TokenConfig memory tokenConfig, \r\n        uint blockNumber, \r\n        uint fee, \r\n        address payback\r\n    ) internal returns (uint oraclePrice) {\r\n        uint[] memory prices = INestBatchPrice2(NEST_OPEN_PRICE).findPrice {\r\n            value: fee\r\n        } (uint(tokenConfig.channelId), _pairIndices(uint(tokenConfig.pairIndex)), blockNumber, payback);\r\n\r\n        oraclePrice = _toUSDTPrice(prices[1]);\r\n    }\r\n\r\n    // Convert to usdt based price\r\n    function _toUSDTPrice(uint rawPrice) internal pure returns (uint) {\r\n        return POST_UNIT * 1 ether / rawPrice;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/DCU.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev DCU token\r\ncontract DCU is HedgeBase, ERC20(\"Decentralized Currency Unit\", \"DCU\") {\r\n\r\n    // Flags for account\r\n    mapping(address=>uint) _minters;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    modifier onlyMinter {\r\n        require(_minters[msg.sender] == 1, \"DCU:not minter\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Set mining permission flag\r\n    /// @param account Target address\r\n    /// @param flag Mining permission flag\r\n    function setMinter(address account, uint flag) external onlyGovernance {\r\n        _minters[account] = flag;\r\n    }\r\n\r\n    /// @dev Check mining permission flag\r\n    /// @param account Target address\r\n    /// @return flag Mining permission flag\r\n    function checkMinter(address account) external view returns (uint) {\r\n        return _minters[account];\r\n    }\r\n\r\n    /// @dev Mint DCU\r\n    /// @param to Target address\r\n    /// @param value Mint amount\r\n    function mint(address to, uint value) external onlyMinter {\r\n        _mint(to, value);\r\n    }\r\n\r\n    /// @dev Burn DCU\r\n    /// @param from Target address\r\n    /// @param value Burn amount\r\n    function burn(address from, uint value) external onlyMinter {\r\n        _burn(from, value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/FortFutures.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Futures\r\ncontract FortFutures is ChainParameter, HedgeFrequentlyUsed, FortPriceAdapter, IFortFutures {\r\n\r\n    /// @dev Account information\r\n    struct Account {\r\n        // Amount of margin\r\n        uint128 balance;\r\n        // Base price\r\n        uint64 basePrice;\r\n        // Base block\r\n        uint32 baseBlock;\r\n    }\r\n\r\n    /// @dev Future information\r\n    struct FutureInfo {\r\n        // Target token address\r\n        address tokenAddress; \r\n        // Lever of future\r\n        uint32 lever;\r\n        // true: call, false: put\r\n        bool orientation;\r\n\r\n        // Token index in _tokenConfigs\r\n        uint16 tokenIndex;\r\n        \r\n        // Account mapping\r\n        mapping(address=>Account) accounts;\r\n    }\r\n\r\n    // Minimum balance quantity. If the balance is less than this value, it will be liquidated\r\n    uint constant MIN_VALUE = 10 ether;\r\n\r\n    // Mapping from composite key to future index\r\n    mapping(uint=>uint) _futureMapping;\r\n\r\n    // PlaceHolder\r\n    mapping(address=>uint) _bases;\r\n\r\n    // Future array\r\n    FutureInfo[] _futures;\r\n\r\n    // token to index mapping\r\n    mapping(address=>uint) _tokenMapping;\r\n\r\n    // Token configs\r\n    TokenConfig[] _tokenConfigs;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public override {\r\n        super.initialize(governance);\r\n        _futures.push();\r\n    }\r\n\r\n    /// @dev Register token configuration\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param tokenConfig token configuration\r\n    function register(address tokenAddress, TokenConfig calldata tokenConfig) external onlyGovernance {\r\n\r\n        // Get index + 1 by tokenAddress\r\n        uint index = _tokenMapping[tokenAddress];\r\n        \r\n        // index == 0 means token not registered, add\r\n        if (index == 0) {\r\n            // Add tokenConfig to array\r\n            _tokenConfigs.push(tokenConfig);\r\n            // Record index + 1\r\n            index = _tokenConfigs.length;\r\n            require(index < 0x10000, \"FO:too much tokenConfigs\");\r\n            _tokenMapping[tokenAddress] = index;\r\n        } else {\r\n            _tokenConfigs[index - 1] = tokenConfig;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the current value of the specified future\r\n    /// @param index Index of future\r\n    /// @param oraclePrice Current price from oracle\r\n    /// @param addr Target address\r\n    function balanceOf(uint index, uint oraclePrice, address addr) external view override returns (uint) {\r\n        FutureInfo storage fi = _futures[index];\r\n        Account memory account = fi.accounts[addr];\r\n        return _balanceOf(\r\n            _tokenConfigs[fi.tokenIndex],\r\n            uint(account.balance), \r\n            _decodeFloat(account.basePrice), \r\n            uint(account.baseBlock),\r\n            oraclePrice, \r\n            fi.orientation, \r\n            uint(fi.lever)\r\n        );\r\n    }\r\n\r\n    /// @dev Find the futures of the target address (in reverse order)\r\n    /// @param start Find forward from the index corresponding to the given contract address \r\n    /// (excluding the record corresponding to start)\r\n    /// @param count Maximum number of records returned\r\n    /// @param maxFindCount Find records at most\r\n    /// @param owner Target address\r\n    /// @return futureArray Matched future array\r\n    function find(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view override returns (FutureView[] memory futureArray) {\r\n        \r\n        futureArray = new FutureView[](count);\r\n        \r\n        // Calculate search region\r\n        FutureInfo[] storage futures = _futures;\r\n        uint i = futures.length;\r\n        uint end = 0;\r\n        if (start > 0) {\r\n            i = start;\r\n        }\r\n        if (i > maxFindCount) {\r\n            end = i - maxFindCount;\r\n        }\r\n        \r\n        // Loop lookup to write qualified records to the buffer\r\n        for (uint index = 0; index < count && i > end;) {\r\n            FutureInfo storage fi = futures[--i];\r\n            if (uint(fi.accounts[owner].balance) > 0) {\r\n                futureArray[index++] = _toFutureView(fi, i, owner);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev List futures\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return futureArray List of price sheets\r\n    function list(\r\n        uint offset, \r\n        uint count, \r\n        uint order\r\n    ) external view override returns (FutureView[] memory futureArray) {\r\n\r\n        // Load futures\r\n        FutureInfo[] storage futures = _futures;\r\n        // Create result array\r\n        futureArray = new FutureView[](count);\r\n        uint length = futures.length;\r\n        uint i = 0;\r\n\r\n        // Reverse order\r\n        if (order == 0) {\r\n            uint index = length - offset;\r\n            uint end = index > count ? index - count : 0;\r\n            while (index > end) {\r\n                FutureInfo storage fi = futures[--index];\r\n                futureArray[i++] = _toFutureView(fi, index, msg.sender);\r\n            }\r\n        } \r\n        // Positive order\r\n        else {\r\n            uint index = offset;\r\n            uint end = index + count;\r\n            if (end > length) {\r\n                end = length;\r\n            }\r\n            while (index < end) {\r\n                futureArray[i++] = _toFutureView(futures[index], index, msg.sender);\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Create future\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param levers Levers of future\r\n    /// @param orientation true: call, false: put\r\n    function create(address tokenAddress, uint[] calldata levers, bool orientation) external override onlyGovernance {\r\n\r\n        // Get index by tokenAddress\r\n        uint16 tokenIndex = uint16(_tokenMapping[tokenAddress] - 1);\r\n\r\n        // Create futures\r\n        for (uint i = 0; i < levers.length; ++i) {\r\n            uint lever = levers[i];\r\n\r\n            // Check if the future exists\r\n            uint key = _getKey(tokenAddress, lever, orientation);\r\n            uint index = _futureMapping[key];\r\n            require(index == 0, \"HF:exists\");\r\n\r\n            // Create future\r\n            index = _futures.length;\r\n            FutureInfo storage fi = _futures.push();\r\n            fi.tokenAddress = tokenAddress;\r\n            fi.lever = uint32(lever);\r\n            fi.orientation = orientation;\r\n            fi.tokenIndex = tokenIndex;\r\n\r\n            _futureMapping[key] = index;\r\n\r\n            // emit New event\r\n            emit New(tokenAddress, lever, orientation, index);\r\n        }\r\n    }\r\n\r\n    /// @dev Obtain the number of futures that have been opened\r\n    /// @return Number of futures opened\r\n    function getFutureCount() external view override returns (uint) {\r\n        return _futures.length;\r\n    }\r\n\r\n    /// @dev Get information of future\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param lever Lever of future\r\n    /// @param orientation true: call, false: put\r\n    /// @return Information of future\r\n    function getFutureInfo(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) external view override returns (FutureView memory) {\r\n        uint index = _futureMapping[_getKey(tokenAddress, lever, orientation)];\r\n        return _toFutureView(_futures[index], index, msg.sender);\r\n    }\r\n\r\n    /// @dev Buy future\r\n    /// @param tokenAddress Target token address, 0 means eth\r\n    /// @param lever Lever of future\r\n    /// @param orientation true: call, false: put\r\n    /// @param dcuAmount Amount of paid DCU\r\n    function buy(\r\n        address tokenAddress,\r\n        uint lever,\r\n        bool orientation,\r\n        uint dcuAmount\r\n    ) external payable override {\r\n        return buyDirect(_futureMapping[_getKey(tokenAddress, lever, orientation)], dcuAmount);\r\n    }\r\n\r\n    /// @dev Buy future direct\r\n    /// @param index Index of future\r\n    /// @param dcuAmount Amount of paid DCU\r\n    function buyDirect(uint index, uint dcuAmount) public payable override {\r\n\r\n        require(index != 0, \"HF:not exist\");\r\n        require(dcuAmount >= 50 ether, \"HF:at least 50 dcu\");\r\n\r\n        // 1. Burn dcu from user\r\n        DCU(DCU_TOKEN_ADDRESS).burn(msg.sender, dcuAmount);\r\n\r\n        FutureInfo storage fi = _futures[index];\r\n        bool orientation = fi.orientation;\r\n        \r\n        // 2. Update account\r\n        // When call, the base price multiply (1 + k), and the sell price divide (1 + k)\r\n        // When put, the base price divide (1 + k), and the sell price multiply (1 + k)\r\n        // When merger, s0 use recorded price, s1 use corrected by k\r\n        TokenConfig memory tokenConfig = _tokenConfigs[uint(fi.tokenIndex)];\r\n        uint oraclePrice = _queryPrice(dcuAmount, tokenConfig, orientation, msg.sender);\r\n\r\n        Account memory account = fi.accounts[msg.sender];\r\n        uint basePrice = _decodeFloat(account.basePrice);\r\n        uint balance = uint(account.balance);\r\n        uint newPrice = oraclePrice;\r\n        \r\n        // Merger\r\n        if (uint(account.baseBlock) > 0) {\r\n            newPrice = (balance + dcuAmount) * oraclePrice * basePrice / (\r\n                basePrice * dcuAmount + (balance << 64) * oraclePrice / _expMiuT(\r\n                    uint(orientation ? tokenConfig.miuLong : tokenConfig.miuShort), \r\n                    uint(account.baseBlock)\r\n                )\r\n            );\r\n        }\r\n        \r\n        account.balance = _toUInt128(balance + dcuAmount);\r\n        account.basePrice = _encodeFloat(newPrice);\r\n        account.baseBlock = uint32(block.number);\r\n        fi.accounts[msg.sender] = account;\r\n\r\n        // emit Buy event\r\n        emit Buy(index, dcuAmount, msg.sender);\r\n    }\r\n\r\n    /// @dev Sell future\r\n    /// @param index Index of future\r\n    /// @param amount Amount to sell\r\n    function sell(uint index, uint amount) external payable override {\r\n\r\n        require(index != 0, \"HF:not exist\");\r\n        \r\n        // 1. Load the future\r\n        FutureInfo storage fi = _futures[index];\r\n        bool orientation = fi.orientation;\r\n\r\n        // When call, the base price multiply (1 + k), and the sell price divide (1 + k)\r\n        // When put, the base price divide (1 + k), and the sell price multiply (1 + k)\r\n        // When merger, s0 use recorded price, s1 use corrected by k\r\n        TokenConfig memory tokenConfig = _tokenConfigs[uint(fi.tokenIndex)];\r\n        uint oraclePrice = _queryPrice(0, tokenConfig, !orientation, msg.sender);\r\n\r\n        // Update account\r\n        Account memory account = fi.accounts[msg.sender];\r\n        account.balance -= _toUInt128(amount);\r\n        fi.accounts[msg.sender] = account;\r\n\r\n        // 2. Mint DCU to user\r\n        uint value = _balanceOf(\r\n            tokenConfig,\r\n            amount, \r\n            _decodeFloat(account.basePrice), \r\n            uint(account.baseBlock),\r\n            oraclePrice, \r\n            orientation, \r\n            uint(fi.lever)\r\n        );\r\n        DCU(DCU_TOKEN_ADDRESS).mint(msg.sender, value);\r\n\r\n        // emit Sell event\r\n        emit Sell(index, amount, msg.sender, value);\r\n    }\r\n\r\n    /// @dev Settle future\r\n    /// @param index Index of future\r\n    /// @param addresses Target addresses\r\n    function settle(uint index, address[] calldata addresses) external payable override {\r\n\r\n        require(index != 0, \"HF:not exist\");\r\n\r\n        // 1. Load the future\r\n        FutureInfo storage fi = _futures[index];\r\n        uint lever = uint(fi.lever);\r\n\r\n        if (lever > 1) {\r\n\r\n            bool orientation = fi.orientation;\r\n            // When call, the base price multiply (1 + k), and the sell price divide (1 + k)\r\n            // When put, the base price divide (1 + k), and the sell price multiply (1 + k)\r\n            // When merger, s0 use recorded price, s1 use corrected by k\r\n            TokenConfig memory tokenConfig = _tokenConfigs[uint(fi.tokenIndex)];\r\n            uint oraclePrice = _queryPrice(0, tokenConfig, !orientation, msg.sender);\r\n\r\n            uint reward = 0;\r\n            for (uint i = addresses.length; i > 0;) {\r\n                address acc = addresses[--i];\r\n\r\n                // Update account\r\n                Account memory account = fi.accounts[acc];\r\n                uint balance = _balanceOf(\r\n                    tokenConfig,\r\n                    uint(account.balance), \r\n                    _decodeFloat(account.basePrice), \r\n                    uint(account.baseBlock),\r\n                    oraclePrice, \r\n                    orientation, \r\n                    lever\r\n                );\r\n\r\n                // lever is great than 1, and balance less than a regular value, can be liquidated\r\n                // the regular value is: Max(balance * lever * 2%, MIN_VALUE)\r\n                uint minValue = uint(account.balance) * lever / 50;\r\n                if (balance < (minValue < MIN_VALUE ? MIN_VALUE : minValue)) {\r\n                    fi.accounts[acc] = Account(uint128(0), uint64(0), uint32(0));\r\n                    reward += balance;\r\n                    emit Settle(index, acc, msg.sender, balance);\r\n                }\r\n            }\r\n\r\n            // 2. Mint DCU to user\r\n            if (reward > 0) {\r\n                DCU(DCU_TOKEN_ADDRESS).mint(msg.sender, reward);\r\n            }\r\n        } else {\r\n            if (msg.value > 0) {\r\n                payable(msg.sender).transfer(msg.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Compose key by tokenAddress, lever and orientation\r\n    function _getKey(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) private pure returns (uint) {\r\n        //return keccak256(abi.encodePacked(tokenAddress, lever, orientation));\r\n        require(lever < 0x100000000, \"HF:lever too large\");\r\n        return (uint(uint160(tokenAddress)) << 96) | (lever << 8) | (orientation ? 1 : 0);\r\n    }\r\n\r\n    // Query price\r\n    function _queryPrice(\r\n        uint dcuAmount, \r\n        TokenConfig memory tokenConfig, \r\n        bool enlarge, \r\n        address payback\r\n    ) private returns (uint oraclePrice) {\r\n\r\n        // Query price from oracle\r\n        uint[] memory prices = _lastPriceList(tokenConfig, msg.value, payback);\r\n        \r\n        // Convert to usdt based price\r\n        oraclePrice = prices[1];\r\n        uint k = calcRevisedK(uint(tokenConfig.sigmaSQ), prices[3], prices[2], oraclePrice, prices[0]);\r\n\r\n        // When call, the base price multiply (1 + k), and the sell price divide (1 + k)\r\n        // When put, the base price divide (1 + k), and the sell price multiply (1 + k)\r\n        // When merger, s0 use recorded price, s1 use corrected by k\r\n        if (enlarge) {\r\n            oraclePrice = oraclePrice * (1 ether + k + impactCost(dcuAmount)) / 1 ether;\r\n        } else {\r\n            oraclePrice = oraclePrice * 1 ether / (1 ether + k + impactCost(dcuAmount));\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate the impact cost\r\n    /// @param vol Trade amount in dcu\r\n    /// @return Impact cost\r\n    function impactCost(uint vol) public pure override returns (uint) {\r\n        //impactCost = vol / 10000 / 1000;\r\n        return vol / 10000000;\r\n    }\r\n\r\n    /// @dev K value is calculated by revised volatility\r\n    /// @param sigmaSQ sigmaSQ for token\r\n    /// @param p0 Last price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn0 Block number of the last price\r\n    /// @param p Latest price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn The block number when (ETH, TOKEN) price takes into effective\r\n    function calcRevisedK(uint sigmaSQ, uint p0, uint bn0, uint p, uint bn) public view override returns (uint k) {\r\n        uint sigmaISQ = p * 1 ether / p0;\r\n        if (sigmaISQ > 1 ether) {\r\n            sigmaISQ -= 1 ether;\r\n        } else {\r\n            sigmaISQ = 1 ether - sigmaISQ;\r\n        }\r\n\r\n        // The left part change to: Max((p2 - p1) / p1, 0.002)\r\n        if (sigmaISQ > 0.002 ether) {\r\n            k = sigmaISQ;\r\n        } else {\r\n            k = 0.002 ether;\r\n        }\r\n\r\n        sigmaISQ = sigmaISQ * sigmaISQ / (bn - bn0) / BLOCK_TIME / 1 ether;\r\n\r\n        if (sigmaISQ > sigmaSQ) {\r\n            k += _sqrt(1 ether * BLOCK_TIME * sigmaISQ * (block.number - bn));\r\n        } else {\r\n            k += _sqrt(1 ether * BLOCK_TIME * sigmaSQ * (block.number - bn));\r\n        }\r\n    }\r\n\r\n    function _sqrt(uint256 x) private pure returns (uint256) {\r\n        unchecked {\r\n            if (x == 0) return 0;\r\n            else {\r\n                uint256 xx = x;\r\n                uint256 r = 1;\r\n                if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n                if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n                if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n                if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n                if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n                if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n                if (xx >= 0x8) { r <<= 1; }\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1; // Seven iterations should be enough\r\n                uint256 r1 = x / r;\r\n                return (r < r1 ? r : r1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Encode the uint value as a floating-point representation in the form of fraction * 16 ^ exponent\r\n    /// @param value Destination uint value\r\n    /// @return float format\r\n    function _encodeFloat(uint value) private pure returns (uint64) {\r\n\r\n        uint exponent = 0; \r\n        while (value > 0x3FFFFFFFFFFFFFF) {\r\n            value >>= 4;\r\n            ++exponent;\r\n        }\r\n        return uint64((value << 6) | exponent);\r\n    }\r\n\r\n    /// @dev Decode the floating-point representation of fraction * 16 ^ exponent to uint\r\n    /// @param floatValue fraction value\r\n    /// @return decode format\r\n    function _decodeFloat(uint64 floatValue) private pure returns (uint) {\r\n        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);\r\n    }\r\n\r\n    // Convert uint to uint128\r\n    function _toUInt128(uint value) private pure returns (uint128) {\r\n        require(value < 0x100000000000000000000000000000000, \"FEO:can't convert to uint128\");\r\n        return uint128(value);\r\n    }\r\n\r\n    // Convert uint to int128\r\n    function _toInt128(uint v) private pure returns (int128) {\r\n        require(v < 0x80000000000000000000000000000000, \"FEO:can't convert to int128\");\r\n        return int128(int(v));\r\n    }\r\n\r\n    // Convert int128 to uint\r\n    function _toUInt(int128 v) private pure returns (uint) {\r\n        require(v >= 0, \"FEO:can't convert to uint\");\r\n        return uint(int(v));\r\n    }\r\n    \r\n    // Calculate net worth\r\n    function _balanceOf(\r\n        TokenConfig memory tokenConfig,\r\n        uint balance,\r\n        uint basePrice,\r\n        uint baseBlock,\r\n        uint oraclePrice, \r\n        bool ORIENTATION, \r\n        uint LEVER\r\n    ) private view returns (uint) {\r\n\r\n        if (balance > 0) {\r\n            uint left;\r\n            uint right;\r\n            // Call\r\n            if (ORIENTATION) {\r\n                left = balance + (LEVER << 64) * balance * oraclePrice / basePrice\r\n                        / _expMiuT(uint(tokenConfig.miuLong), baseBlock);\r\n                right = balance * LEVER;\r\n            } \r\n            // Put\r\n            else {\r\n                left = balance * (1 + LEVER);\r\n                right = (LEVER << 64) * balance * oraclePrice / basePrice \r\n                        / _expMiuT(uint(tokenConfig.miuShort), baseBlock);\r\n            }\r\n\r\n            if (left > right) {\r\n                balance = left - right;\r\n            } else {\r\n                balance = 0;\r\n            }\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    // Calculate e^\u03bcT\r\n    function _expMiuT(uint miu, uint baseBlock) private view returns (uint) {\r\n        // return _toUInt(ABDKMath64x64.exp(\r\n        //     _toInt128((orientation ? MIU_LONG : MIU_SHORT) * (block.number - baseBlock) * BLOCK_TIME)\r\n        // ));\r\n\r\n        // Using approximate algorithm: x*(1+rt)\r\n        return miu * (block.number - baseBlock) * BLOCK_TIME + 0x10000000000000000;\r\n    }\r\n\r\n    // Convert FutureInfo to FutureView\r\n    function _toFutureView(FutureInfo storage fi, uint index, address owner) private view returns (FutureView memory) {\r\n        Account memory account = fi.accounts[owner];\r\n        return FutureView(\r\n            index,\r\n            fi.tokenAddress,\r\n            uint(fi.lever),\r\n            fi.orientation,\r\n            uint(account.balance),\r\n            _decodeFloat(account.basePrice),\r\n            uint(account.baseBlock)\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"New\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"}],\"name\":\"buyDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bn0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bn\",\"type\":\"uint256\"}],\"name\":\"calcRevisedK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"levers\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFindCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"find\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IFortFutures.FutureView[]\",\"name\":\"futureArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFutureCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"}],\"name\":\"getFutureInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IFortFutures.FutureView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"impactCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IFortFutures.FutureView[]\",\"name\":\"futureArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pairIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"sigmaSQ\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"miuLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"miuShort\",\"type\":\"uint64\"}],\"internalType\":\"struct FortPriceAdapter.TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FortFutures", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "8888", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e6a638db32d971f3ca7a1f0ccba575d4ed619861ec34f7f982bac5604c89cd7"}]}