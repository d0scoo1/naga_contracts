{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IAaveEcosystemReserveController {\r\n    /**\r\n     * @notice Proxy function for ERC20's approve(), pointing to a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param token The asset address\r\n     * @param recipient Allowance's recipient\r\n     * @param amount Allowance to approve\r\n     **/\r\n    function approve(\r\n        address collector,\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Proxy function for ERC20's transfer(), pointing to a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param token The asset address\r\n     * @param recipient Transfer's recipient\r\n     * @param amount Amount to transfer\r\n     **/\r\n    function transfer(\r\n        address collector,\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Proxy function to create a stream of token on a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param recipient The recipient of the stream of token\r\n     * @param deposit Total amount to be streamed\r\n     * @param tokenAddress The ERC20 token to use as streaming asset\r\n     * @param startTime The unix timestamp for when the stream starts\r\n     * @param stopTime The unix timestamp for when the stream stops\r\n     * @return uint256 The stream id created\r\n     **/\r\n    function createStream(\r\n        address collector,\r\n        address recipient,\r\n        uint256 deposit,\r\n        IERC20 tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Proxy function to withdraw from a stream of token on a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param streamId The id of the stream to withdraw tokens from\r\n     * @param funds Amount to withdraw\r\n     * @return bool If the withdrawal finished properly\r\n     **/\r\n    function withdrawFromStream(\r\n        address collector,\r\n        uint256 streamId,\r\n        uint256 funds\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @notice Proxy function to cancel a stream of token on a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param streamId The id of the stream to cancel\r\n     * @return bool If the cancellation happened correctly\r\n     **/\r\n    function cancelStream(address collector, uint256 streamId)\r\n        external\r\n        returns (bool);\r\n}\r\ninterface IStreamable {\r\n    struct Stream {\r\n        uint256 deposit;\r\n        uint256 ratePerSecond;\r\n        uint256 remainingBalance;\r\n        uint256 startTime;\r\n        uint256 stopTime;\r\n        address recipient;\r\n        address sender;\r\n        address tokenAddress;\r\n        bool isEntity;\r\n    }\r\n\r\n    event CreateStream(\r\n        uint256 indexed streamId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    );\r\n\r\n    event WithdrawFromStream(\r\n        uint256 indexed streamId,\r\n        address indexed recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    event CancelStream(\r\n        uint256 indexed streamId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 senderBalance,\r\n        uint256 recipientBalance\r\n    );\r\n\r\n    function balanceOf(uint256 streamId, address who)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function getStream(uint256 streamId)\r\n        external\r\n        view\r\n        returns (\r\n            address sender,\r\n            address recipient,\r\n            uint256 deposit,\r\n            address token,\r\n            uint256 startTime,\r\n            uint256 stopTime,\r\n            uint256 remainingBalance,\r\n            uint256 ratePerSecond\r\n        );\r\n\r\n    function createStream(\r\n        address recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external returns (uint256 streamId);\r\n\r\n    function withdrawFromStream(uint256 streamId, uint256 funds)\r\n        external\r\n        returns (bool);\r\n\r\n    function cancelStream(uint256 streamId) external returns (bool);\r\n\r\n    function initialize(address fundsAdmin) external;\r\n}\r\ninterface IInitializableAdminUpgradeabilityProxy {\r\n    function upgradeTo(address newImplementation) external;\r\n\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\r\n        external\r\n        payable;\r\n\r\n    function admin() external returns (address);\r\n\r\n    function implementation() external returns (address);\r\n}\r\ninterface IAdminControlledEcosystemReserve {\r\n    /** @notice Emitted when the funds admin changes\r\n     * @param fundsAdmin The new funds admin\r\n     **/\r\n    event NewFundsAdmin(address indexed fundsAdmin);\r\n\r\n    /** @notice Returns the mock ETH reference address\r\n     * @return address The address\r\n     **/\r\n    function ETH_MOCK_ADDRESS() external pure returns (address);\r\n\r\n    /**\r\n     * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\r\n     * @return address The address of the funds admin\r\n     **/\r\n    function getFundsAdmin() external view returns (address);\r\n\r\n    /**\r\n     * @dev Function for the funds admin to give ERC20 allowance to other parties\r\n     * @param token The address of the token to give allowance from\r\n     * @param recipient Allowance's recipient\r\n     * @param amount Allowance to approve\r\n     **/\r\n    function approve(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Function for the funds admin to transfer ERC20 tokens to other parties\r\n     * @param token The address of the token to transfer\r\n     * @param recipient Transfer's recipient\r\n     * @param amount Amount to transfer\r\n     **/\r\n    function transfer(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n\r\ncontract PayloadAaveBGD {\r\n    IInitializableAdminUpgradeabilityProxy public constant COLLECTOR_V2_PROXY =\r\n        IInitializableAdminUpgradeabilityProxy(\r\n            0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c\r\n        );\r\n\r\n    IInitializableAdminUpgradeabilityProxy\r\n        public constant AAVE_TOKEN_COLLECTOR_PROXY =\r\n        IInitializableAdminUpgradeabilityProxy(\r\n            0x25F2226B597E8F9514B3F68F00f494cF4f286491\r\n        );\r\n\r\n    address public constant GOV_SHORT_EXECUTOR =\r\n        0xEE56e2B3D491590B5b31738cC34d5232F378a8D5;\r\n\r\n    IAaveEcosystemReserveController public constant CONTROLLER_OF_COLLECTOR =\r\n        IAaveEcosystemReserveController(\r\n            0x3d569673dAa0575c936c7c67c4E6AedA69CC630C\r\n        );\r\n\r\n    IStreamable public constant ECOSYSTEM_RESERVE_V2_IMPL =\r\n        IStreamable(0x1aa435ed226014407Fa6b889e9d06c02B1a12AF3);\r\n\r\n    IERC20 public constant AUSDC =\r\n        IERC20(0xBcca60bB61934080951369a648Fb03DF4F96263C);\r\n    IERC20 public constant ADAI =\r\n        IERC20(0x028171bCA77440897B824Ca71D1c56caC55b68A3);\r\n    IERC20 public constant AUSDT =\r\n        IERC20(0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811);\r\n    IERC20 public constant AAVE =\r\n        IERC20(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\r\n\r\n    uint256 public constant AUSDC_UPFRONT_AMOUNT = 1200000 * 1e6; // 1'200'000 aUSDC\r\n    uint256 public constant ADAI_UPFRONT_AMOUNT = 1000000 ether; // 1'000'000 aDAI\r\n    uint256 public constant AUSDT_UPFRONT_AMOUNT = 1000000 * 1e6; // 1'000'000 aUSDT\r\n    uint256 public constant AAVE_UPFRONT_AMOUNT = 8400 ether; // 8'400 AAVE\r\n\r\n    uint256 public constant AUSDC_STREAM_AMOUNT = 4800008160000; // ~4'800'000 aUSDC. A bit more for the streaming requirements\r\n    uint256 public constant AAVE_STREAM_AMOUNT = 12600000000000074880000; // ~12'600 AAVE. A bit more for the streaming requirements\r\n    uint256 public constant STREAMS_DURATION = 450 days; // 15 months of 30 days\r\n\r\n    address public constant BGD_RECIPIENT =\r\n        0xb812d0944f8F581DfAA3a93Dda0d22EcEf51A9CF;\r\n\r\n    function execute() external {\r\n        // Upgrade of both treasuries' implementation\r\n        // We use a common implementation for both ecosystem's reserves\r\n        COLLECTOR_V2_PROXY.upgradeToAndCall(\r\n            address(ECOSYSTEM_RESERVE_V2_IMPL),\r\n            abi.encodeWithSelector(\r\n                IStreamable.initialize.selector,\r\n                address(CONTROLLER_OF_COLLECTOR)\r\n            )\r\n        );\r\n        AAVE_TOKEN_COLLECTOR_PROXY.upgradeToAndCall(\r\n            address(ECOSYSTEM_RESERVE_V2_IMPL),\r\n            abi.encodeWithSelector(\r\n                IStreamable.initialize.selector,\r\n                address(CONTROLLER_OF_COLLECTOR)\r\n            )\r\n        );\r\n        // We initialise the implementation, for security\r\n        ECOSYSTEM_RESERVE_V2_IMPL.initialize(address(CONTROLLER_OF_COLLECTOR));\r\n\r\n        // Transfer of the upfront payment, 40% of the total\r\n        CONTROLLER_OF_COLLECTOR.transfer(\r\n            address(COLLECTOR_V2_PROXY),\r\n            AUSDC,\r\n            BGD_RECIPIENT,\r\n            AUSDC_UPFRONT_AMOUNT\r\n        );\r\n        CONTROLLER_OF_COLLECTOR.transfer(\r\n            address(COLLECTOR_V2_PROXY),\r\n            ADAI,\r\n            BGD_RECIPIENT,\r\n            ADAI_UPFRONT_AMOUNT\r\n        );\r\n        CONTROLLER_OF_COLLECTOR.transfer(\r\n            address(COLLECTOR_V2_PROXY),\r\n            AUSDT,\r\n            BGD_RECIPIENT,\r\n            AUSDT_UPFRONT_AMOUNT\r\n        );\r\n        CONTROLLER_OF_COLLECTOR.transfer(\r\n            address(AAVE_TOKEN_COLLECTOR_PROXY),\r\n            AAVE,\r\n            BGD_RECIPIENT,\r\n            AAVE_UPFRONT_AMOUNT\r\n        );\r\n\r\n        // Creation of the streams\r\n        CONTROLLER_OF_COLLECTOR.createStream(\r\n            address(COLLECTOR_V2_PROXY),\r\n            BGD_RECIPIENT,\r\n            AUSDC_STREAM_AMOUNT,\r\n            AUSDC,\r\n            block.timestamp,\r\n            block.timestamp + STREAMS_DURATION\r\n        );\r\n        CONTROLLER_OF_COLLECTOR.createStream(\r\n            address(AAVE_TOKEN_COLLECTOR_PROXY),\r\n            BGD_RECIPIENT,\r\n            AAVE_STREAM_AMOUNT,\r\n            AAVE,\r\n            block.timestamp,\r\n            block.timestamp + STREAMS_DURATION\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_STREAM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_TOKEN_COLLECTOR_PROXY\",\"outputs\":[{\"internalType\":\"contract IInitializableAdminUpgradeabilityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_UPFRONT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADAI_UPFRONT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUSDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUSDC_STREAM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUSDC_UPFRONT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUSDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUSDT_UPFRONT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BGD_RECIPIENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLECTOR_V2_PROXY\",\"outputs\":[{\"internalType\":\"contract IInitializableAdminUpgradeabilityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTROLLER_OF_COLLECTOR\",\"outputs\":[{\"internalType\":\"contract IAaveEcosystemReserveController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ECOSYSTEM_RESERVE_V2_IMPL\",\"outputs\":[{\"internalType\":\"contract IStreamable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SHORT_EXECUTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STREAMS_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PayloadAaveBGD", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://549f3dd8e12919cc1593e38b08316af722175437e6977014671876a7a4329332"}]}