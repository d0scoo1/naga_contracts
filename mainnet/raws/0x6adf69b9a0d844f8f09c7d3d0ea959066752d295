{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Censor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @creator: Pak\\n/// @author: manifold.xyz\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                        //\\n//                                                                                                                        //\\n//       ,ad8888ba,   88888888888  888b      88   ad88888ba     ,ad8888ba,    88888888ba   88888888888  88888888ba,       //\\n//      d8\\\"'    `\\\"8b  88           8888b     88  d8\\\"     \\\"8b   d8\\\"'    `\\\"8b   88      \\\"8b  88           88      `\\\"8b      //\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  //\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  //\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  //\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  //\\n//      Y8a.    .a8P  88           88     `8888  Y8a     a8P   Y8a.    .a8P   88     `8b   88           88      .a8P      //\\n//       `\\\"Y8888Y\\\"'   88888888888  88      `888   \\\"Y88888P\\\"     `\\\"Y8888Y\\\"'    88      `8b  88888888888  88888888Y\\\"'       //\\n//                                                                                                                        //\\n//                                                                                                                        //\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract Censor {\\n\\n    using Strings for uint256;\\n    \\n    string constant private _MESSAGE_TAG = '<MESSAGE>';\\n    string[] private _imageParts;\\n\\n    constructor() {\\n        _imageParts.push(\\\"<svg xmlns='http://www.w3.org/2000/svg' width='1000' height='1000'>\\\");\\n            _imageParts.push(\\\"<defs><rect id='r' width='1000' height='1000'/></defs>\\\");\\n            _imageParts.push(\\\"<style>@font-face {font-family: 'DC';src: \\\");\\n            _imageParts.push(\\\"url('data:font/woff2;charset=utf-8;base64,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') format('woff2');\\\");\\n            _imageParts.push(\\\"font-weight: normal; font-style: normal; font-display: swap;}\\\");\\n            _imageParts.push(\\\"* { user-select: none; position: relative; }\\\");\\n            _imageParts.push(\\\".b { fill: #eee; }\\\");\\n            _imageParts.push(\\\".a { animation: f 2s ease-out forwards; }\\\");\\n            _imageParts.push(\\\"@keyframes f { 10% { opacity: 1; } 100% { opacity: 0; } }\\\");\\n            _imageParts.push(\\\".c { color: black; width: 1000px; height: 1000px; display: flex; justify-content: center; align-items: center; position: fixed; }\\\");\\n            _imageParts.push(\\\".t { font-family: 'DC'; font-size: 70px; line-height: 70px; text-align: center; text-transform: uppercase; width: 800px; }\\\");\\n            _imageParts.push(\\\".m { display: inline; word-wrap: break-word; }\\\");\\n            _imageParts.push(\\\".censor .m{ background: linear-gradient(black,black) 0% 54.5% / 100% 33% no-repeat; color: rgba(0,0,0,0); transform: scale(0.7); }\\\");\\n            _imageParts.push(\\\".censor { transform: scale(1.05, 1); }\\\");\\n            _imageParts.push(\\\".m::before { content: '\\\");\\n            _imageParts.push(_MESSAGE_TAG);\\n            _imageParts.push(\\\"'; }</style>\\\");\\n            _imageParts.push(\\\"<g><use class='b' href='%23r'/><foreignObject width='1000' height='1000'><div xmlns='http://www.w3.org/1999/xhtml'><div class='c'><div class='t'><div class='m'></div></div></div><div class='c censor'><div class='t'><div class='m'></div></div></div></div></foreignObject><use class='b a' href='%23r'/></g>\\\");\\n        _imageParts.push(\\\"</svg>\\\");\\n    }\\n\\n    function metadata(uint256 tokenId, string memory message, uint256 value) external view returns(string memory) {\\n        return string(abi.encodePacked('data:application/json;utf8,{\\\"name\\\":\\\"Censored #',tokenId.toString(),'\\\", \\\"description\\\":\\\"',_toUpperCase(message),'\\\", \\\"created_by\\\":\\\"Pak\\\", \\\"image\\\":\\\"data:image/svg+xml;utf8,',\\n            svg(tokenId, message, value),\\n            '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Censored\\\",\\\"value\\\":\\\"True\\\"},{\\\"trait_type\\\":\\\"Initial Price\\\",\\\"value\\\":',_valueString(value),'}]}'));\\n    }\\n\\n    function _toUpperCase(string memory message) private pure returns (string memory) {\\n        bytes memory messageBytes = bytes(message);\\n        bytes memory upperMessageBytes = new bytes(messageBytes.length);\\n        for (uint i = 0; i < messageBytes.length; i++) {\\n            bytes1 char = messageBytes[i];\\n            if (char >= 0x61 && char <= 0x7A) {\\n                // So we add 32 to make it lowercase\\n                upperMessageBytes[i] = bytes1(uint8(char) - 32);\\n            } else {\\n                upperMessageBytes[i] = char;\\n            }\\n        }\\n        return string(upperMessageBytes);\\n    }\\n\\n    function _valueString(uint256 value) private pure returns (string memory) {\\n        uint256 eth = value/10**18;\\n        uint256 decimal4 = value/10**14 - eth*10**4;\\n        return string(abi.encodePacked(eth.toString(), '.', _decimal4ToString(decimal4)));\\n    }\\n\\n    function _decimal4ToString(uint256 decimal4) private pure returns (string memory) {\\n        bytes memory decimal4Characters = new bytes(4);\\n        for (uint i = 0; i < 4; i++) {\\n            decimal4Characters[3 - i] = bytes1(uint8(0x30 + decimal4 % 10));\\n            decimal4 /= 10;\\n        }\\n        return string(abi.encodePacked(decimal4Characters));\\n    }\\n\\n    function svg(uint256, string memory message, uint256) public view returns(string memory) {\\n        bytes memory byteString;\\n        for (uint i = 0; i < _imageParts.length; i++) {\\n            if (_checkTag(_imageParts[i], _MESSAGE_TAG)) {\\n                byteString = abi.encodePacked(byteString, message);\\n            } else {\\n                byteString = abi.encodePacked(byteString, _imageParts[i]);\\n            }\\n        }\\n        return string(byteString);\\n    }\\n\\n    function _checkTag(string storage a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"svg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Censor", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}