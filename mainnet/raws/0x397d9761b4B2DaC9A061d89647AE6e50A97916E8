{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/DecentralistsMinimalDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n                                                                                               \\n                                       THE DECENTRALISTS                                       \\n                                                                                               \\n                                \u00b7.::::iiiiiiiiiiiiiiiiiii::::.\u00b7                                \\n                           .:::iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii::.\u00b7                          \\n                       .::iiiiiiiii:::::..\u00b7\u00b7\u00b7      \u00b7\u00b7..:::::iiiiiiiiii::\u00b7                      \\n                   .::iiiiiii:::.\u00b7                            .:::iiiiiii::.                   \\n                .:iiiiiii::                                         .:iiiiiii:.                \\n             \u00b7:iiiiii::\u00b7                                                ::iiiiii:\u00b7             \\n            :iiiiii:\u00b7                 \u00b7.::::::::::::::..                   :iiiiii:\u00b7           \\n          :iiiii::               .:::iiiii:::::::::::iiiii:::.               .:iiiii:\u00b7         \\n        :iiiii:\u00b7            \u00b7::iii:::\u00b7                   .:::iii::\u00b7             :iiiii:\u00b7       \\n      \u00b7iiiii:\u00b7            ::iii:\u00b7                             .::ii::            \u00b7:iiiii:      \\n     :iiiii:           \u00b7:ii::\u00b7                                   \u00b7:iii:\u00b7           .iiiii:     \\n    :iiiii\u00b7          \u00b7:ii:.                                         \u00b7:ii:           \u00b7:iiii:    \\n   :iiii:          \u00b7:ii:              \u00b7.:::::::i:::::::.\u00b7             \u00b7:ii:           :iiiii   \\n  :iiii:          \u00b7iii:            .::iiiiiiiiiiiiiiiiii:::\u00b7            .ii:           .iiii:  \\n \u00b7iiiii          \u00b7iii            .:ii:::::::iiiiiiiiiiiiiii::.           \u00b7:i:\u00b7          :iiii: \\n :iiii:         \u00b7:i:\u00b7          .:iii:      .:iiiiiiiiiiiiiiiii:.           iii           iiiii \\n:iiii:          :ii           :iiiii:\u00b7     ::iiiiiiiiiiiiiiiiiii:          \u00b7ii:          :iiii:\\niiiii\u00b7         \u00b7ii:          ::iiiiii::::::iiiiiiiiiiiiiiiiiiiiii.          :ii.         \u00b7iiiii\\niiiii          :ii           :iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:\u00b7         .ii:          :iiii\\niiiii          :ii          .iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii.          ii:          :iiii\\niiiii          :ii          .iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:.          ii:          :iiii\\niiiii          :ii           :iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:\u00b7         .ii:          :iiii\\niiiii\u00b7         \u00b7ii:          ::iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:.          :ii.         \u00b7iiiii\\n:iiii:          :ii           .:iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:          \u00b7ii:          :iiii:\\n :iiii:         \u00b7:i:\u00b7          \u00b7::iiiiiiiiiiiiiiiiiiiiiiiiiiii:\u00b7           ii:           iiiii \\n \u00b7iiiii           iii\u00b7           \u00b7::iiiiiiiiiiiiiiiiiiiiiii::.           .ii:\u00b7          :iiii: \\n  :iiii:           iii:            \u00b7:::iiiiiiiiiiiiiiiii:::\u00b7            :ii:           .iiii:  \\n   :iiii:           :ii:\u00b7              .::::::::::::::..              .:ii:           :iiii:   \\n    :iiiii\u00b7           :iii:                                         .:ii:           \u00b7:iiii:    \\n     :iiiii:            :iii:\u00b7                                   .:iii:\u00b7           .iiiii:     \\n      \u00b7iiiii:\u00b7            .:iii:.\u00b7                            ::iii::            \u00b7:iiiii:      \\n        :iiiii:\u00b7             .:iiii::.\u00b7                 \u00b7:::iiii:.              :iiiii:\u00b7       \\n          :iiiii::               \u00b7:::iiiiiii:::::::iiiiiii:::\u00b7               .:iiiii:\u00b7         \\n            :iiiiii:\u00b7                   ..:::::::::::..\u00b7                   :iiiiii:\u00b7           \\n             \u00b7:iiiiii::\u00b7                                                ::iiiiii:\u00b7             \\n                .:iiiiiii::                                         .:iiiiiii:.                \\n                   .::iiiiiii:::.\u00b7                            .:::iiiiiii::.                   \\n                       .::iiiiiiiii:::::..\u00b7\u00b7\u00b7      \u00b7\u00b7..:::::iiiiiiiiii::\u00b7                      \\n                           .:::iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii::.\u00b7                          \\n                                \u00b7.::::iiiiiiiiiiiiiiiiiii::::.\u00b7                                \\n\\n\\nA Decentralist is represented by a set of eight traits:\\n  0 - Base\\n    [0] Human Male Black       [8] Vampire Male       [10] Metahuman Male       [12] Ape Male\\n    [1] Human Female Black     [9] Vampire Female     [11] Metahuman Female\\n    [2] Human Male Dark\\n    [3] Human Female Dark\\n    [4] Human Male Pale\\n    [5] Human Female Pale\\n    [6] Human Male White\\n    [7] Human Female White\\n  1 - Necklace\\n    [0] None        [2] Golden\\n    [1] Diamond     [3] Silver\\n  2 - Facial Male\\n    [0] None             [10] Long Gray           [20] Sideburns Blonde\\n    [1] Chivo Black      [11] Long Red            [21] Sideburns Brown\\n    [2] Chivo Blonde     [12] Long White          [22] Sideburns Gray\\n    [3] Chivo Brown      [13] Regular Black       [23] Sideburns Red\\n    [4] Chivo Gray       [14] Regular Blonde      [24] Sideburns White\\n    [5] Chivo Red        [15] Regular Brown\\n    [6] Chivo White      [16] Regular Gray\\n    [7] Long Black       [17] Regular Red\\n    [8] Long Blonde      [18] Regular White\\n    [9] Long Brown       [19] Sideburns Black\\n  2 - Facial Female\\n    [0]  None\\n  3 - Earring\\n    [0]  None      [2]  Diamond     [4]  Silver\\n    [1]  Cross     [3]  Golden\\n  4 - Head Male\\n    [0] None                [10] CapFront Red     [20] Punky Brown      [30] Short White\\n    [1] Afro                [11] Hat Black        [21] Punky Gray       [31] Trapper\\n    [2] CapUp Green         [12] Long Black       [22] Punky Purple     [32] Wool Blue\\n    [3] CapUp Red           [13] Long Blonde      [23] Punky Red        [33] Wool Green\\n    [4] Kangaroo Black      [14] Long Brown       [24] Punky White      [34] Wool Red\\n    [5] CapBack Blue        [15] Long Gray        [25] Short Black\\n    [6] CapBack Orange      [16] Long Red         [26] Short Blonde\\n    [7] Conspiracist        [17] Long White       [27] Short Brown\\n    [8] Cop                 [18] Punky Black      [28] Short Gray\\n    [9] CapFront Purple     [19] Punky Blonde     [29] Short Red\\n  4 - Head Female\\n    [0] None                [10] CapFront Red     [20] Punky Brown      [30] Short White           [40] Trapper\\n    [1] Afro                [11] Hat Black        [21] Punky Gray       [31] Straight Black        [41] Wool Blue\\n    [2] CapUp Green         [12] Long Black       [22] Punky Purple     [32] Straight Blonde       [42] Wool Green\\n    [3] CapUp Red           [13] Long Blonde      [23] Punky Red        [33] Straight Brown        [43] Wool Red\\n    [4] Kangaroo Black      [14] Long Brown       [24] Punky White      [34] Straight Gray\\n    [5] CapBack Blue        [15] Long Gray        [25] Short Black      [35] Straight Orange\\n    [6] CapBack Orange      [16] Long Red         [26] Short Blonde     [36] Straight Platinum\\n    [7] Conspiracist        [17] Long White       [27] Short Brown      [37] Straight Purple\\n    [8] Cop                 [18] Punky Black      [28] Short Gray       [38] Straight Red\\n    [9] CapFront Purple     [19] Punky Blonde     [29] Short Red        [39] Straight White\\n  5 - Glasses\\n    [0] None       [2] Nerd      [4] Pilot     [6] VR\\n    [1] Beetle     [3] Patch     [5] Surf\\n  6 - Lipstick Male\\n    [0] None\\n  6 - Lipstick Female\\n    [0] None      [2] Orange     [4] Purple\\n    [1] Green     [3] Pink       [5] Red\\n  7 - Smoking\\n    [0] None      [2] Cigarette\\n    [1] Cigar     [3] E-Cigarette\\n\\n */\\n\\npragma solidity 0.8.10;\\n\\nimport {Base64} from '../utils/Base64.sol';\\nimport {IDescriptor} from './IDescriptor.sol';\\n\\ncontract DecentralistsMinimalDescriptor is IDescriptor {\\n  /**\\n   * @notice Returns the Uniform Resource Identifier (URI) given a set of traits\\n   * @param traits set of traits\\n   * @return token uri\\n   */\\n  function tokenURI(uint256[8] calldata traits) external pure override returns (string memory) {\\n    return _buildTokenURI(_buildAttributes(traits), _buildSvg(traits));\\n  }\\n\\n  /**\\n   * @notice Returns a base64 SVG given a set of traits\\n   * @param traits set of traits\\n   * @return SVG in base64 format\\n   */\\n  function _buildSvg(uint256[8] calldata traits) internal pure returns (string memory) {\\n    string memory firstPart = string(\\n      abi.encodePacked(\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"350\\\" height=\\\"350\\\" viewBox=\\\"0 0 350 350\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><rect width=\\\"350\\\" height=\\\"350\\\" fill=\\\"#12223B\\\"/><text fill=\\\"#EDBF5F\\\" font-family=\\\"RobotoMono-Bold, Roboto Mono\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" letter-spacing=\\\".085\\\"><tspan x=\\\"40\\\" y=\\\"173\\\">base: ',\\n        toString(traits[0]),\\n        '</tspan><tspan x=\\\"40\\\" y=\\\"192\\\">necklace: ',\\n        toString(traits[1]),\\n        '</tspan><tspan x=\\\"40\\\" y=\\\"211\\\">facial: ',\\n        toString(traits[2]),\\n        '</tspan><tspan x=\\\"40\\\" y=\\\"230\\\">earring: ',\\n        toString(traits[3])\\n      )\\n    );\\n    string memory secondPart = string(\\n      abi.encodePacked(\\n        '</tspan><tspan x=\\\"40\\\" y=\\\"249\\\">head: ',\\n        toString(traits[4]),\\n        '</tspan><tspan x=\\\"40\\\" y=\\\"268\\\">glasses: ',\\n        toString(traits[5]),\\n        '</tspan><tspan x=\\\"40\\\" y=\\\"287\\\">lipstick: ',\\n        toString(traits[6]),\\n        '</tspan><tspan x=\\\"40\\\" y=\\\"306\\\">smoking: ',\\n        toString(traits[7]),\\n        '</tspan></text><g transform=\\\"translate(260 40)\\\"><circle cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"23.795\\\" stroke=\\\"#FFF\\\" stroke-width=\\\"2.41\\\"/><circle cx=\\\"24.934\\\" cy=\\\"24.934\\\" r=\\\"16.284\\\" stroke=\\\"#FFF\\\" stroke-width=\\\"1.205\\\"/><circle cx=\\\"24.934\\\" cy=\\\"24.934\\\" r=\\\"9.894\\\" fill=\\\"#EDBF5F\\\"/><circle cx=\\\"21.154\\\" cy=\\\"19.872\\\" r=\\\"1.923\\\" fill=\\\"#FFF\\\"/></g></g></svg>'\\n      )\\n    );\\n    return Base64.encode(abi.encodePacked(firstPart, secondPart));\\n  }\\n\\n  /**\\n   * @notice Returns a stringify json of attributes given a set of traits\\n   * @param traits array of traits\\n   * @return stringify json of attributes\\n   */\\n  function _buildAttributes(uint256[8] calldata traits) internal pure returns (string memory) {\\n    string memory firstPart = string(\\n      abi.encodePacked(\\n        '\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Tier\\\",\\\"value\\\":\\\"',\\n        traits[0] < 8 ? 'Standard' : 'Premium',\\n        '\\\"},{\\\"trait_type\\\":\\\"Sex\\\",\\\"value\\\":\\\"',\\n        traits[0] % 2 == 0 ? 'Male' : 'Female',\\n        '\\\"},{\\\"trait_type\\\":\\\"Base\\\",\\\"value\\\":\\\"',\\n        toString(traits[0]),\\n        '\\\"},{\\\"trait_type\\\":\\\"Necklace\\\",\\\"value\\\":\\\"',\\n        toString(traits[1]),\\n        '\\\"},{\\\"trait_type\\\":\\\"Facial\\\",\\\"value\\\":\\\"',\\n        toString(traits[2])\\n      )\\n    );\\n    string memory secondPart = string(\\n      abi.encodePacked(\\n        '\\\"},{\\\"trait_type\\\":\\\"Earring\\\",\\\"value\\\":\\\"',\\n        toString(traits[3]),\\n        '\\\"},{\\\"trait_type\\\":\\\"Head\\\",\\\"value\\\":\\\"',\\n        toString(traits[4]),\\n        '\\\"},{\\\"trait_type\\\":\\\"Glasses\\\",\\\"value\\\":\\\"',\\n        toString(traits[5]),\\n        '\\\"},{\\\"trait_type\\\":\\\"Lipstick\\\",\\\"value\\\":\\\"',\\n        toString(traits[6]),\\n        '\\\"},{\\\"trait_type\\\":\\\"Smoking\\\",\\\"value\\\":\\\"',\\n        toString(traits[7]),\\n        '\\\"}]'\\n      )\\n    );\\n\\n    return string(abi.encodePacked(firstPart, secondPart));\\n  }\\n\\n  /**\\n   * @notice Returns the token uri\\n   * @param traits string array of traits\\n   * @param imageSVG SVG\\n   * @return token uri in base64\\n   */\\n  function _buildTokenURI(string memory traits, string memory imageSVG)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"Decentralists\\\",\\\"description\\\":\\\"Decentralists is the collection for those who believe in the revolutionary power of crypto technology. Each one represents a customizable and unique combination stored 100% in the Ethereum blockchain.\\\",',\\n                traits,\\n                ',\\\"background_color\\\":\\\"12223B\\\",\\\"image\\\":\\\"',\\n                'data:image/svg+xml;base64,',\\n                imageSVG,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Convert a uint256 to string\\n   * @param value uint256 to convert\\n   * @return converted string\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return '0';\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n  string internal constant TABLE =\\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return '';\\n\\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n\\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n\\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n\\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n\\n      // run over the input, 3 bytes at a time\\n      for {\\n\\n      } lt(dataPtr, endPtr) {\\n\\n      } {\\n        dataPtr := add(dataPtr, 3)\\n\\n        // read 3 bytes\\n        let input := mload(dataPtr)\\n\\n        // write 4 characters\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n      }\\n\\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/token/IDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IDescriptor {\\n  function tokenURI(uint256[8] calldata) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"traits\",\"type\":\"uint256[8]\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "DecentralistsMinimalDescriptor", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}