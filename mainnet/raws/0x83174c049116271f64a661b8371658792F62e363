{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File interfaces/IPreparable.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IPreparable {\r\n    event ConfigPreparedAddress(bytes32 indexed key, address value, uint256 delay);\r\n    event ConfigPreparedNumber(bytes32 indexed key, uint256 value, uint256 delay);\r\n\r\n    event ConfigUpdatedAddress(bytes32 indexed key, address oldValue, address newValue);\r\n    event ConfigUpdatedNumber(bytes32 indexed key, uint256 oldValue, uint256 newValue);\r\n\r\n    event ConfigReset(bytes32 indexed key);\r\n}\r\n\r\n\r\n// File interfaces/IStrategy.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IStrategy {\r\n    function name() external view returns (string memory);\r\n\r\n    function deposit() external payable returns (bool);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function harvestable() external view returns (uint256);\r\n\r\n    function harvest() external returns (uint256);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    function shutdown() external returns (bool);\r\n\r\n    function hasPendingFunds() external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IVault.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @title Interface for a Vault\r\n */\r\n\r\ninterface IVault is IPreparable {\r\n    event StrategyActivated(address indexed strategy);\r\n\r\n    event StrategyDeactivated(address indexed strategy);\r\n\r\n    /**\r\n     * @dev 'netProfit' is the profit after all fees have been deducted\r\n     */\r\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\r\n\r\n    function initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) external;\r\n\r\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function initializeStrategy(address strategy_) external returns (bool);\r\n\r\n    function withdrawAll() external;\r\n\r\n    function withdrawFromReserve(uint256 amount) external;\r\n\r\n    function getStrategy() external view returns (IStrategy);\r\n\r\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\r\n\r\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalUnderlying() external view returns (uint256);\r\n\r\n    function getUnderlying() external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/pool/ILiquidityPool.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\ninterface ILiquidityPool is IPreparable {\r\n    event Deposit(address indexed minter, uint256 depositAmount, uint256 mintedLpTokens);\r\n\r\n    event DepositFor(\r\n        address indexed minter,\r\n        address indexed mintee,\r\n        uint256 depositAmount,\r\n        uint256 mintedLpTokens\r\n    );\r\n\r\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    event LpTokenSet(address indexed lpToken);\r\n\r\n    event StakerVaultSet(address indexed stakerVault);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\r\n\r\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount) external payable returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\r\n\r\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\r\n\r\n    function depositFor(\r\n        address account,\r\n        uint256 depositAmount,\r\n        uint256 minTokenAmount\r\n    ) external payable returns (uint256);\r\n\r\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function handleLpTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function executeNewVault() external returns (address);\r\n\r\n    function executeNewMaxWithdrawalFee() external returns (uint256);\r\n\r\n    function executeNewRequiredReserves() external returns (uint256);\r\n\r\n    function executeNewReserveDeviation() external returns (uint256);\r\n\r\n    function setLpToken(address _lpToken) external returns (bool);\r\n\r\n    function setStaker() external returns (bool);\r\n\r\n    function isCapped() external returns (bool);\r\n\r\n    function uncap() external returns (bool);\r\n\r\n    function updateDepositCap(uint256 _depositCap) external returns (bool);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function getLpToken() external view returns (address);\r\n\r\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\r\n\r\n    function getVault() external view returns (IVault);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/IGasBank.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IGasBank {\r\n    event Deposit(address indexed account, uint256 value);\r\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\r\n\r\n    function depositFor(address account) external payable;\r\n\r\n    function withdrawUnused(address account) external;\r\n\r\n    function withdrawFrom(address account, uint256 amount) external;\r\n\r\n    function withdrawFrom(\r\n        address account,\r\n        address payable to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/oracles/IOracleProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IOracleProvider {\r\n    /// @notice Quotes the USD price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the USD price of the asset\r\n    function getPriceUSD(address baseAsset) external view returns (uint256);\r\n\r\n    /// @notice Quotes the ETH price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the ETH price of the asset\r\n    function getPriceETH(address baseAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderMeta.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderMeta {\r\n    struct Meta {\r\n        bool freezable;\r\n        bool frozen;\r\n    }\r\n\r\n    function fromUInt(uint256 value) internal pure returns (Meta memory) {\r\n        Meta memory meta;\r\n        meta.freezable = (value & 1) == 1;\r\n        meta.frozen = ((value >> 1) & 1) == 1;\r\n        return meta;\r\n    }\r\n\r\n    function toUInt(Meta memory meta) internal pure returns (uint256) {\r\n        uint256 value;\r\n        value |= meta.freezable ? 1 : 0;\r\n        value |= meta.frozen ? 1 << 1 : 0;\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IAddressProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IAddressProvider is IPreparable {\r\n    event KnownAddressKeyAdded(bytes32 indexed key);\r\n    event StakerVaultListed(address indexed stakerVault);\r\n    event StakerVaultDelisted(address indexed stakerVault);\r\n    event ActionListed(address indexed action);\r\n    event PoolListed(address indexed pool);\r\n    event PoolDelisted(address indexed pool);\r\n    event VaultUpdated(address indexed previousVault, address indexed newVault);\r\n\r\n    /** Key functions */\r\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\r\n\r\n    function freezeAddress(bytes32 key) external;\r\n\r\n    /** Pool functions */\r\n\r\n    function allPools() external view returns (address[] memory);\r\n\r\n    function addPool(address pool) external;\r\n\r\n    function poolsCount() external view returns (uint256);\r\n\r\n    function getPoolAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isPool(address pool) external view returns (bool);\r\n\r\n    function removePool(address pool) external returns (bool);\r\n\r\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\r\n\r\n    function safeGetPoolForToken(address token) external view returns (address);\r\n\r\n    /** Vault functions  */\r\n\r\n    function updateVault(address previousVault, address newVault) external;\r\n\r\n    function allVaults() external view returns (address[] memory);\r\n\r\n    function vaultsCount() external view returns (uint256);\r\n\r\n    function getVaultAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isVault(address vault) external view returns (bool);\r\n\r\n    /** Action functions */\r\n\r\n    function allActions() external view returns (address[] memory);\r\n\r\n    function addAction(address action) external returns (bool);\r\n\r\n    function isAction(address action) external view returns (bool);\r\n\r\n    /** Address functions */\r\n    function initializeAddress(\r\n        bytes32 key,\r\n        address initialAddress,\r\n        bool frezable\r\n    ) external;\r\n\r\n    function initializeAndFreezeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function getAddress(bytes32 key) external view returns (address);\r\n\r\n    function getAddress(bytes32 key, bool checkExists) external view returns (address);\r\n\r\n    function getAddressMeta(bytes32 key) external view returns (AddressProviderMeta.Meta memory);\r\n\r\n    function prepareAddress(bytes32 key, address newAddress) external returns (bool);\r\n\r\n    function executeAddress(bytes32 key) external returns (address);\r\n\r\n    function resetAddress(bytes32 key) external returns (bool);\r\n\r\n    /** Staker vault functions */\r\n    function allStakerVaults() external view returns (address[] memory);\r\n\r\n    function tryGetStakerVault(address token) external view returns (bool, address);\r\n\r\n    function getStakerVault(address token) external view returns (address);\r\n\r\n    function addStakerVault(address stakerVault) external returns (bool);\r\n\r\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\r\n\r\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\r\n\r\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IRoleManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IRoleManager {\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n}\r\n\r\n\r\n// File libraries/Roles.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Roles {\r\n    bytes32 internal constant GOVERNANCE = \"governance\";\r\n    bytes32 internal constant ADDRESS_PROVIDER = \"address_provider\";\r\n    bytes32 internal constant POOL_FACTORY = \"pool_factory\";\r\n    bytes32 internal constant CONTROLLER = \"controller\";\r\n    bytes32 internal constant GAUGE_ZAP = \"gauge_zap\";\r\n    bytes32 internal constant MAINTENANCE = \"maintenance\";\r\n    bytes32 internal constant INFLATION_MANAGER = \"inflation_manager\";\r\n    bytes32 internal constant POOL = \"pool\";\r\n    bytes32 internal constant VAULT = \"vault\";\r\n}\r\n\r\n\r\n// File libraries/Errors.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Error {\r\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\r\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\r\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\r\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\r\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\r\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\r\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\r\n    string internal constant INVALID_INDEX = \"invalid index\";\r\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\r\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\r\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\r\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\r\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\r\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\r\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_POOL_IMPLEMENTATION =\r\n        \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\r\n        \"invalid LP Token implementation for given coin\";\r\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\r\n        \"invalid vault implementation for given coin\";\r\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\r\n        \"invalid stakerVault implementation for given coin\";\r\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\r\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\r\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\r\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\r\n    string internal constant ADDRESS_DOES_NOT_EXIST = \"address does not exist\";\r\n    string internal constant ADDRESS_FROZEN = \"address is frozen\";\r\n    string internal constant ROLE_EXISTS = \"role already exists\";\r\n    string internal constant CANNOT_REVOKE_ROLE = \"cannot revoke role\";\r\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\r\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\r\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\r\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\r\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\r\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\r\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\r\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\r\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\r\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\r\n    string internal constant TOP_UP_FAILED = \"top up failed\";\r\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\r\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\r\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\r\n        \"not enough funds were withdrawn from the pool\";\r\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\r\n    string internal constant FAILED_MINT = \"mint failed\";\r\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\r\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\r\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\r\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\r\n    string internal constant INVALID_MINTER =\r\n        \"the minter address of the LP token and the pool address do not match\";\r\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\r\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\r\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\r\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\r\n    string internal constant DELAY_TOO_SHORT = \"delay be at least 3 days\";\r\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\r\n        \"insufficient funds for updating the position\";\r\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\r\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\r\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\r\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\r\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\r\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\r\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\r\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\r\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\r\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\r\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\r\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\r\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\r\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\r\n        \"pool does not support additional underlying coins to be withdrawn\";\r\n    string internal constant STRATEGY_SHUT_DOWN = \"Strategy is shut down\";\r\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\r\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\r\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\r\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\r\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\r\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\r\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\r\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\r\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\r\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\r\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\r\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\r\n    string internal constant PREPARED_WITHDRAWAL =\r\n        \"Cannot relock funds when withdrawal is being prepared\";\r\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\r\n    string internal constant STALE_PRICE = \"Price is stale\";\r\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\r\n    string internal constant NOT_ENOUGH_BKD_STAKED = \"Not enough BKD tokens staked\";\r\n    string internal constant RESERVE_ACCESS_EXCEEDED = \"Reserve access exceeded\";\r\n}\r\n\r\n\r\n// File libraries/AddressProviderKeys.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderKeys {\r\n    bytes32 internal constant _TREASURY_KEY = \"treasury\";\r\n    bytes32 internal constant _GAS_BANK_KEY = \"gasBank\";\r\n    bytes32 internal constant _VAULT_RESERVE_KEY = \"vaultReserve\";\r\n    bytes32 internal constant _SWAPPER_REGISTRY_KEY = \"swapperRegistry\";\r\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \"oracleProvider\";\r\n    bytes32 internal constant _POOL_FACTORY_KEY = \"poolFactory\";\r\n    bytes32 internal constant _CONTROLLER_KEY = \"controller\";\r\n    bytes32 internal constant _BKD_LOCKER_KEY = \"bkdLocker\";\r\n    bytes32 internal constant _ROLE_MANAGER_KEY = \"roleManager\";\r\n}\r\n\r\n\r\n// File contracts/access/RoleManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\ncontract RoleManager is IRoleManager {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n    mapping(bytes32 => RoleData) private _roles;\r\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    IAddressProvider public immutable addressProvider;\r\n\r\n    modifier onlyGovernance() {\r\n        require(hasRole(Roles.GOVERNANCE, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    constructor(IAddressProvider _addressProvider) {\r\n        addressProvider = _addressProvider;\r\n        _grantRole(Roles.GOVERNANCE, msg.sender);\r\n    }\r\n\r\n    function grantRole(bytes32 role, address account) external onlyGovernance {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    function addGovernor(address newGovernor) external onlyGovernance {\r\n        _grantRole(Roles.GOVERNANCE, newGovernor);\r\n    }\r\n\r\n    function renounceGovernance() external onlyGovernance {\r\n        require(getRoleMemberCount(Roles.GOVERNANCE) > 1, Error.CANNOT_REVOKE_ROLE);\r\n        _revokeRole(Roles.GOVERNANCE, msg.sender);\r\n    }\r\n\r\n    function addGaugeZap(address zap) external onlyGovernance {\r\n        _grantRole(Roles.GAUGE_ZAP, zap);\r\n    }\r\n\r\n    function removeGaugeZap(address zap) external {\r\n        revokeRole(Roles.GAUGE_ZAP, zap);\r\n    }\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool) {\r\n        return hasRole(role1, account) || hasRole(role2, account);\r\n    }\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool) {\r\n        return hasRole(role1, account) || hasRole(role2, account) || hasRole(role3, account);\r\n    }\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n            if (hasRole(roles[i], account)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getRoleMember(bytes32 role, uint256 index)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        if (role == Roles.ADDRESS_PROVIDER && index == 0) {\r\n            return address(addressProvider);\r\n        } else if (role == Roles.POOL_FACTORY && index == 0) {\r\n            return addressProvider.getAddress(AddressProviderKeys._POOL_FACTORY_KEY);\r\n        } else if (role == Roles.CONTROLLER && index == 0) {\r\n            return addressProvider.getAddress(AddressProviderKeys._CONTROLLER_KEY);\r\n        } else if (role == Roles.POOL) {\r\n            return addressProvider.getPoolAtIndex(index);\r\n        } else if (role == Roles.VAULT) {\r\n            return addressProvider.getVaultAtIndex(index);\r\n        }\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    function revokeRole(bytes32 role, address account) public onlyGovernance {\r\n        require(role != Roles.GOVERNANCE, Error.CANNOT_REVOKE_ROLE);\r\n        require(hasRole(role, account), Error.INVALID_ARGUMENT);\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\r\n        if (\r\n            role == Roles.ADDRESS_PROVIDER || role == Roles.POOL_FACTORY || role == Roles.CONTROLLER\r\n        ) {\r\n            return 1;\r\n        }\r\n        if (role == Roles.POOL) {\r\n            return addressProvider.poolsCount();\r\n        }\r\n        if (role == Roles.VAULT) {\r\n            return addressProvider.vaultsCount();\r\n        }\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        if (role == Roles.ADDRESS_PROVIDER) {\r\n            return account == address(addressProvider);\r\n        } else if (role == Roles.POOL_FACTORY) {\r\n            return\r\n                account == addressProvider.getAddress(AddressProviderKeys._POOL_FACTORY_KEY, false);\r\n        } else if (role == Roles.CONTROLLER) {\r\n            return\r\n                account == addressProvider.getAddress(AddressProviderKeys._CONTROLLER_KEY, false);\r\n        } else if (role == Roles.MAINTENANCE) {\r\n            return _roles[role].members[account] || _roles[Roles.GOVERNANCE].members[account];\r\n        } else if (role == Roles.POOL) {\r\n            return addressProvider.isPool(account);\r\n        } else if (role == Roles.VAULT) {\r\n            return addressProvider.isVault(account);\r\n        }\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal {\r\n        _roles[role].members[account] = true;\r\n        _roleMembers[role].add(account);\r\n        emit RoleGranted(role, account, msg.sender);\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal {\r\n        _roles[role].members[account] = false;\r\n        emit RoleRevoked(role, account, msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zap\",\"type\":\"address\"}],\"name\":\"addGaugeZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role3\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAnyRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAnyRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role2\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAnyRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zap\",\"type\":\"address\"}],\"name\":\"removeGaugeZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RoleManager", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000139c15e21b0f6e43fc397face5de5b7d5ae6874a", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7475fff6265359a219c63f2b1cdc997d28fa311bc121b2305051123b4fffffb4"}]}