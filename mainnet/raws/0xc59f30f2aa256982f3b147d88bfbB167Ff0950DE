{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/Creator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\nlibrary Creator {\\r\\n\\r\\n    event Source(address indexed sender, address indexed source);\\r\\n    event Created(address indexed sender, address indexed source, address indexed destination);\\r\\n\\r\\n    function create(bytes memory sourceAddressOrBytecode) external returns(address destination, address source) {\\r\\n        if(sourceAddressOrBytecode.length == 32) {\\r\\n            source = abi.decode(sourceAddressOrBytecode, (address));\\r\\n        } else if(sourceAddressOrBytecode.length == 20) {\\r\\n            assembly {\\r\\n                source := div(mload(add(sourceAddressOrBytecode, 32)), 0x1000000000000000000000000)\\r\\n            }\\r\\n        } else {\\r\\n            assembly {\\r\\n                source := create(0, add(sourceAddressOrBytecode, 32), mload(sourceAddressOrBytecode))\\r\\n            }\\r\\n            emit Source(msg.sender, source);\\r\\n        }\\r\\n        require(source != address(0), \\\"source\\\");\\r\\n        uint256 codeSize;\\r\\n        assembly {\\r\\n            codeSize := extcodesize(source)\\r\\n        }\\r\\n        require(codeSize > 0, \\\"source\\\");\\r\\n        destination = address(new GeneralPurposeProxy{value : msg.value}(source));\\r\\n        emit Created(msg.sender, source, destination);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract GeneralPurposeProxy {\\r\\n\\r\\n    constructor(address source) payable {\\r\\n        assembly {\\r\\n            sstore(0xf7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69, source)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        assembly {\\r\\n            let _singleton := sload(0xf7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69)\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch success\\r\\n                case 0 {revert(0, returndatasize())}\\r\\n                default { return(0, returndatasize())}\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"Source\",\"type\":\"event\"}]", "ContractName": "Creator", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}