{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ChrysMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@paperxyz/contracts/verification/PaperVerification.sol\\\";\\nimport \\\"./SignedAllowance.sol\\\";\\n\\ninterface INFT { \\n    function mint(address to, uint256 qty) external; \\n    function unclaimedSupply() external view returns (uint256);\\n}\\n\\ncontract NFTminter is Ownable, PaperVerification, SignedAllowance{  \\n\\nusing Strings for uint256;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            GENERAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    INFT nftContract;\\n    uint256 public presalePrice = 250000000000000000; // 0.25 eth\\n    uint256 public publicSalePrice = 250000000000000000; // 0.25 eth\\n    bool public publicSaleActive;\\n    bool public presaleActive;\\n    uint256 public maxPerMint;\\n\\n    address public artistAddress;\\n    uint256 private _totalShares;\\n    address[] private _payees;\\n    mapping(address => uint256) private _shares;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _nftContract, address _paperKey) PaperVerification(_paperKey) {\\n        setNFTContract(_nftContract);      \\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        MINTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function paperMint(\\n            PaperMintData.MintData calldata _mintData,\\n            bytes calldata _data\\n        ) external payable onlyPaper(_mintData) {\\n            require (msg.value >= price() * _mintData.quantity, \\\"Minter: Not Enough Eth\\\");\\n            nftContract.mint(_mintData.recipient, _mintData.quantity);\\n    }\\n\\n    function presaleOrder(address to, uint256 nonce, bytes memory signature) public payable {\\n        require (presaleActive, \\\"Presale not active\\\");\\n\\n        //_mintQty is stored in the right-most 128 bits of the nonce\\n        uint256 qty = uint256(uint128(nonce));\\n\\n        require (msg.value >= presalePrice * qty, \\\"Minter: Not Enough Eth\\\");\\n        \\n        // this will throw if the allowance has already been used or is not valid\\n        _useAllowance(to, nonce, signature);\\n\\n        nftContract.mint(to, qty); \\n    }\\n    \\n    function publicOrder(address to, uint256 qty) public payable {\\n        require (publicSaleActive, \\\"Public sale not active\\\");\\n        require (qty <= maxPerMint, \\\">Max per mint\\\");\\n        require (msg.value >= publicSalePrice * qty, \\\"Minter: Not Enough Eth\\\");\\n        nftContract.mint(to, qty); \\n    }\\n\\n    function adminMint(address to, uint256 qty) public onlyOwner {\\n        nftContract.mint(to, qty);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        VIEWS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function price() public view returns (uint256) {\\n        if (publicSaleActive) {\\n            return publicSalePrice;\\n        } else {\\n            return presalePrice;\\n        } \\n    }\\n\\n    function getClaimIneligibilityReason(address userWallet, uint256 quantity) public pure returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function unclaimedSupply() public view returns (uint256) {\\n        return nftContract.unclaimedSupply();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setNFTContract(address _newNFT) public onlyOwner {\\n        nftContract = INFT(_newNFT);\\n    }\\n\\n    function setPresalePrice(uint256 _newPresalePrice) public onlyOwner {\\n        presalePrice = _newPresalePrice;\\n    }\\n\\n    function setPublicSalePrice(uint256 _newPublicSalePrice) public onlyOwner {\\n        publicSalePrice = _newPublicSalePrice;\\n    }\\n\\n    function switchPublicSale() public onlyOwner {\\n        publicSaleActive = !publicSaleActive;\\n    }\\n\\n    function switchPresale() public onlyOwner {\\n        presaleActive = !presaleActive;\\n    }\\n\\n    /// @notice sets allowance signer, this can be used to revoke all unused allowances already out there\\n    /// @param newSigner the new signer\\n    function setAllowancesSigner(address newSigner) external onlyOwner {\\n        _setAllowancesSigner(newSigner);\\n    }\\n\\n    //set Artist\\n    function setArtist(address _newArtistAddress) public onlyOwner {\\n        require(_newArtistAddress != address(0), \\\"Artist account is the zero address\\\");\\n        artistAddress = _newArtistAddress; \\n    }\\n\\n    function setMaxPerMint(uint256 _newMaxPerMint) public onlyOwner {\\n        maxPerMint = _newMaxPerMint;\\n    }\\n\\n    function setPaperKey(address _paperKey) public onlyOwner {\\n        _setPaperKey(_paperKey);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       WITHDRAWALS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Add a new payee to the contract or change shares for the existing one.\\n     * @param account The address of the payee to add.\\n     * @param accShare The number of shares owned by the payee.\\n     */\\n    function _setPayee(address account, uint256 accShare) public onlyOwner {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(accShare > 0, \\\"PaymentSplitter: shares are 0\\\");\\n\\n        if (_shares[account] == 0) {\\n            _payees.push(account);\\n        }    \\n        _shares[account] = accShare;\\n        updateShares();\\n    }\\n\\n    function updateShares() internal {\\n        _totalShares = 0;\\n        for (uint i = 0; i < _payees.length; i++) {\\n            _totalShares = _totalShares + _shares[_payees[i]];\\n        }\\n    }\\n\\n    //withdraw!\\n    function withdraw(uint256 amount) public {\\n        require(owner() == _msgSender() || artistAddress == _msgSender(), \\\"!artist or owner\\\");\\n        require(_totalShares != 0, \\\"nobody to withdraw to\\\");\\n        for (uint256 i=0; i<_payees.length ; i++) {\\n            address payee = _payees[i];\\n            uint256 payment = amount * _shares[payee] / _totalShares;\\n            payable(payee).transfer(payment);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       ERC721Receiver interface compatibility\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function onERC721Received(\\n    address, \\n    address, \\n    uint256, \\n    bytes calldata\\n    ) external pure returns(bytes4) {\\n        return bytes4(keccak256(\\\"I do not receive ERC721\\\"));\\n    } \\n}\\n\\n//   That's all, folks!\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@paperxyz/contracts/verification/PaperVerification.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: APACHE-2.0\\r\\npragma solidity >=0.8.9 <0.9.0;\\r\\n\\r\\nimport \\\"./structs/PaperMintData.sol\\\";\\r\\nimport \\\"./PaperVerificationBase.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\r\\n\\r\\ncontract PaperVerification is EIP712(\\\"Paper\\\", \\\"1\\\"), PaperVerificationBase {\\r\\n    constructor(address _paperKey) PaperVerificationBase(_paperKey) {}\\r\\n\\r\\n    modifier onlyPaper(PaperMintData.MintData calldata _data) {\\r\\n        _checkValidity(_data, paperKey);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Verifies the signature for a given MintData\\r\\n    /// @dev Will revert if the signature is invalid i.e. not the paperKey passed in the constructor. Does not verify that the signer (paperKey) is authorized to mint NFTs.\\r\\n    /// @param _data MintData describing the transaction details.\\r\\n    function _checkValidity(\\r\\n        PaperMintData.MintData calldata _data,\\r\\n        address _paperKey\\r\\n    ) internal {\\r\\n        bytes32 digest = _hashTypedDataV4(PaperMintData.hashData(_data));\\r\\n        address signer = ECDSA.recover(digest, _data.signature);\\r\\n        require(signer == _paperKey, \\\"Invalid signature\\\");\\r\\n        // make sure that the signature has not been used before\\r\\n        require(!isMinted(_data.nonce), \\\"Mint request already processed\\\");\\r\\n        minted[_data.nonce] = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SignedAllowance.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\n/// @title SignedAllowance\\n/// @author Simon Fremaux (@dievardump)\\ncontract SignedAllowance {\\n    using ECDSA for bytes32;\\n\\n    // list of already used allowances\\n    mapping(bytes32 => bool) private usedAllowances;\\n\\n    // address used to sign the allowances\\n    address private _allowancesSigner;\\n\\n    /// @notice Helper to know allowancesSigner address\\n    /// @return the allowance signer address\\n    function allowancesSigner() public view virtual returns (address) {\\n        return _allowancesSigner;\\n    }\\n\\n    /// @notice Helper that creates the message that signer needs to sign to allow a mint\\n    ///         this is usually also used when creating the allowances, to ensure \\\"message\\\"\\n    ///         is the same\\n    /// @param account the account to allow\\n    /// @param nonce the nonce\\n    /// @return the message to sign\\n    function createMessage(address account, uint256 nonce)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(account, nonce, address(this)));\\n    }\\n\\n    /// @notice Helper that creates a list of messages that signer needs to sign to allow mintings\\n    /// @param accounts the accounts to allow\\n    /// @param nonces the corresponding nonces\\n    /// @return messages the messages to sign\\n  /*  \\n    // function is commented out to save space in the contract\\n    // to batch create message will need to use for loop with the createMessage function\\n\\n    function createMessages(address[] memory accounts, uint256[] memory nonces)\\n        external\\n        view\\n        returns (bytes32[] memory messages)\\n    {\\n        require(accounts.length == nonces.length, '!LENGTH_MISMATCH!');\\n        messages = new bytes32[](accounts.length);\\n        for (uint256 i; i < accounts.length; i++) {\\n            messages[i] = createMessage(accounts[i], nonces[i]);\\n        }\\n    } */\\n\\n    /// @notice This function verifies that the current request is valid\\n    /// @dev It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))\\n    ///      and that this message was not already used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @return the message to mark as used\\n    function validateSignature(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) public view returns (bytes32) {\\n        return\\n            _validateSignature(account, nonce, signature, allowancesSigner());\\n    }\\n\\n    /// @dev It ensures that signer signed a message containing (account, nonce, address(this))\\n    ///      and that this message was not already used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @param signer the signer\\n    /// @return the message to mark as used\\n    function _validateSignature(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature,\\n        address signer\\n    ) internal view returns (bytes32) {\\n        bytes32 message = createMessage(account, nonce)\\n            .toEthSignedMessageHash();\\n\\n        // verifies that the sha3(account, nonce, address(this)) has been signed by signer\\n        require(message.recover(signature) == signer, '!INVALID_SIGNATURE!');\\n\\n        // verifies that the allowances was not already used\\n        require(usedAllowances[message] == false, '!ALREADY_USED!');\\n\\n        return message;\\n    }\\n\\n    /// @notice internal function that verifies an allowance and marks it as used\\n    ///         this function throws if signature is wrong or this nonce for this user has already been used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce\\n    /// @param signature the signature by the allowance wallet\\n    function _useAllowance(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) internal {\\n        bytes32 message = validateSignature(account, nonce, signature);\\n        usedAllowances[message] = true;\\n    }\\n\\n    /// @notice Allows to change the allowance signer. This can be used to revoke any signed allowance not already used\\n    /// @param newSigner the new signer address\\n    function _setAllowancesSigner(address newSigner) internal {\\n        _allowancesSigner = newSigner;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@paperxyz/contracts/verification/structs/PaperMintData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9 <0.9.0;\\r\\n\\r\\nlibrary PaperMintData {\\r\\n    struct MintData {\\r\\n        address recipient;\\r\\n        uint256 quantity;\\r\\n        uint256 tokenId;\\r\\n        bytes32 nonce;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns a hash of the given MintData, prepared using EIP712 typed data hashing rules.\\r\\n    /// @param _data is the MintData to hash.\\r\\n    function hashData(MintData calldata _data) internal pure returns (bytes32) {\\r\\n        bytes memory encoded = abi.encode(\\r\\n            keccak256(\\r\\n                \\\"MintData(address recipient,uint256 quantity,uint256 tokenId,bytes32 nonce)\\\"\\r\\n            ),\\r\\n            _data.recipient,\\r\\n            _data.quantity,\\r\\n            _data.tokenId,\\r\\n            _data.nonce\\r\\n        );\\r\\n        return keccak256(encoded);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@paperxyz/contracts/verification/PaperVerificationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9 <0.9.0;\\r\\n\\r\\nabstract contract PaperVerificationBase {\\r\\n    address internal paperKey;\\r\\n    mapping(bytes32 => bool) internal minted;\\r\\n\\r\\n    constructor(address _paperKey) {\\r\\n        paperKey = _paperKey;\\r\\n    }\\r\\n\\r\\n    function isMinted(bytes32 nonce) public view returns (bool) {\\r\\n        return minted[nonce];\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the paper key that is use to verify in {_checkValidity}.\\r\\n    /// @dev Should only be able to be called by trusted addresses\\r\\n    /// @param _paperKey The new paper key to use for verification\\r\\n    function _setPaperKey(address _paperKey) internal {\\r\\n        paperKey = _paperKey;\\r\\n    }\\r\\n\\r\\n    function getPaperKey() public view returns (address) {\\r\\n        return paperKey;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paperKey\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accShare\",\"type\":\"uint256\"}],\"name\":\"_setPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowancesSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"createMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getClaimIneligibilityReason\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaperKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"isMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PaperMintData.MintData\",\"name\":\"_mintData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"paperMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"presaleOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"publicOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setAllowancesSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newArtistAddress\",\"type\":\"address\"}],\"name\":\"setArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxPerMint\",\"type\":\"uint256\"}],\"name\":\"setMaxPerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNFT\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paperKey\",\"type\":\"address\"}],\"name\":\"setPaperKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPresalePrice\",\"type\":\"uint256\"}],\"name\":\"setPresalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPublicSalePrice\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTminter", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008a7bac741d1f54992a5f26daa90c0c5c3f74a9410000000000000000000000001ce6f24c171fc2e822ad33b05730da3227e6ae9f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}