{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./Strategies/IStrategy.sol\\\";\\nimport \\\"./lists/RankedList.sol\\\";\\n\\nimport \\\"./library/IterableMap.sol\\\";\\n\\n\\ncontract Vault is ERC20 {\\n    // Add the library methods\\n    using SafeERC20 for ERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using IterableMap for IterableMap.AddressToUintMap;\\n\\n    //\u7b56\u7565\u603b\u8d44\u4ea7\\n    struct StrategyState {\\n        uint256 totalAssets;//\u5f53\u524d\u603b\u8d44\u4ea7\\n        uint256 totalDebt;//\u6295\u5165\u672a\u8fd4\u8fd8\u6210\u672c\\n    }\\n\\n    //\u534f\u8bae\u603b\u8d44\u4ea7\\n    struct ProtocolState {\\n        uint256 lastReportTime;//\u8ba1\u7b97\u65f6\u95f4\\n        uint256 totalAssets;//\u5f53\u524d\u603b\u8d44\u4ea7\\n    }\\n\\n    //\u534f\u8baeAPY\u8bbe\u7f6e\u53c2\u6570\\n    struct StrategyApy {\\n        address strategyAddress;//\u7b56\u7565\u5730\u5740\\n        uint256 apy;//\u7b56\u7565APY\\n    }\\n\\n    //\u6700\u5927\u767e\u5206\u6bd4100%\\n    uint256 constant MAX_BPS = 10000;\\n\\n    //\u7528\u6237\u63d0\u6b3e\u961f\u5217\\n    IterableMap.AddressToUintMap private userWithdrawMap;\\n\\n    //\u7528\u6237\u5b58\u6b3e\u961f\u5217\\n    IterableMap.AddressToUintMap private userDepositMap;\\n\\n    //\u7b56\u7565\u96c6\u5408\\n    EnumerableSet.AddressSet private strategySet;\\n\\n    //\u7b56\u7565\u72b6\u6001\\n    mapping(address => StrategyState) public strategyStates;\\n    //\u534f\u8bae\u72b6\u6001\\n    mapping(uint256 => ProtocolState) public protocolStates;\\n\\n    //\u7528\u6237\u5b58\u6b3e\u6210\u672c\u603b\u8ba1\uff0c\u7528\u4e8e\u8ba1\u7b97\u7528\u6237\u6536\u76ca\\n    mapping(address => uint256) public userDebts;\\n\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    mapping (address => bool) public greyList;\\n\\n    //\u6c60\u5b50\u63a5\u6536\u7684token\\n    ERC20 public token;\\n    //\u6c60\u5b50\u63a5\u6536\u7684token\u7684\u7cbe\u5ea6\uff0c\u4e5f\u662f\u6c60\u5b50aToken\u7684\u7cbe\u5ea6\\n    uint8 public myDecimals;\\n\\n    //\u6c60\u5b50\u5e01\u79cd\u7684\u7cbe\u5ea6\u5355\u4f4d\uff0c\u6bd4\u5982\u7cbe\u5ea66\uff0c\u5219\u4e3a10\u76846\u6b21\u65b9\uff1a1000000\\n    uint256 public underlyingUnit;\\n\\n    //\u7cbe\u5ea6\u56e0\u5b50\uff1a\u5982\u679caToken\u7cbe\u5ea6\u4e3a6\uff0c\u5219\u7cbe\u5ea6\u56e0\u5b50\u4e3a10 ** (18-6)\uff1b\u5426\u5219\u7cbe\u5ea6\u56e0\u5b50\u4e3a1\\n    uint256 public precisionFactor;\\n    //\u56fd\u5e93\u6536\u76ca\u5730\u5740\\n    address public rewards;\\n    //\u6cbb\u7406\u65b9\u5730\u5740\\n    address public governance;\\n    //\u7ba1\u7406\u8005\u5730\u5740\\n    address public management;\\n    //\u5b9a\u65f6\u5668\u8d26\u6237\u5730\u5740\\n    address public keeper;\\n    //\u6536\u76ca\u63d0\u6210\u8d39\u7528\\n    uint256 public profitManagementFee;\\n    //\u6bcf\u4e2a\u7b56\u7565\u6295\u8d44\u91d1\u989d\uff0c\u4e0d\u80fd\u8d85\u8fc7\u50a8\u84c4\u6c60\u768420%\\n    uint256 public maxPercentPerStrategy;\\n    //\u6bcf\u4e2a\u534f\u8bae\u7684\u6240\u6709\u7b56\u7565\u6295\u8d44\u91d1\u989d\uff0c\u4e0d\u80fd\u8d85\u8fc7\u50a8\u84c4\u6c60\u768430%\\n    uint256 public maxPercentPerProtocol;\\n    //\u6bcf\u4e2a\u7b56\u7565\u6295\u8d44\u91d1\u989d\uff0c\u4e0d\u80fd\u8d85\u8fc7\u76ee\u6807\u7b2c\u4e09\u65b9\u6295\u8d44\u6c60\u5b50\u768420%\\n    uint256 public maxPercentInvestVault;\\n\\n    //\u5151\u6362\u65f6\u5141\u8bb8\u8d85\u51fa\u9884\u8a00\u673a\u8fd4\u56de\u6c47\u7387\u7684\u6700\u5927\u767e\u5206\u6bd4,default:2%\\n    uint256 public maxExchangeRateDeltaThreshold = 200;\\n\\n    // The minimum number of seconds between doHardWork calls.\\n    uint256 public minWorkDelay;\\n    uint256 public lastWorkTime;\\n\\n    //\u4e0a\u6b21\u7684\u51c0\u503c\\n    uint256 public pricePerShare;\\n\\n    //\u4e0a\u4e0a\u6b21\u7684\u51c0\u503c\\n    uint256 public lastPricePerShare;\\n\\n    uint256 public apy = 0;\\n\\n    //\u662f\u5426\u7d27\u6025\u5173\u505c\\n    bool public emergencyShutdown;\\n\\n    //\u4eca\u5929\u7684\u5b58\u6b3e\u603b\u989d\uff0c\u8fd9\u6837\u4e0d\u7528\u5faa\u73af\u7528\u6237\u5b58\u6b3e\u961f\u5217\u8ba1\u7b97\u603b\u989d\\n    uint256 public todayDepositAmounts;\\n    //\u4eca\u5929\u7684\u53d6\u6b3e\u4efd\u989d\uff0c\u8fd9\u6837\u4e0d\u7528\u5faa\u73af\u7528\u6237\u53d6\u6b3e\u961f\u5217\u8ba1\u7b97\u603b\u989d\\n    uint256 public todayWithdrawShares;\\n\\n    //\u6240\u6709\u7b56\u7565\u7684\u603b\u8d44\u4ea7\\n    uint256 public strategyTotalAssetsValue;\\n\\n    /**\\n    * \u9650\u5236\u53ea\u80fd\u7ba1\u7406\u5458\u6216\u8005\u6cbb\u7406\u65b9\u53ef\u4ee5\u53d1\u8d77\u8c03\u7528\\n    **/\\n    modifier onlyGovernance(){\\n        require(msg.sender == governance || msg.sender == management, \\\"The caller must be management or governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper || msg.sender == management || msg.sender == governance, 'only keeper');\\n        _;\\n    }\\n\\n    // Only smart contracts will be affected by this modifier\\n    modifier defense() {\\n        require((msg.sender == tx.origin) || !greyList[msg.sender], \\\"This smart contract has been grey listed\\\");\\n        _;\\n    }\\n\\n    /**\\n    * \u6784\u5efa\u51fd\u6570\\n    * @param _token\uff1a\u76ee\u524d\u90fd\u5e94\u8be5\u662fUSDT\u5730\u5740\\n    * @param _management\uff1a\u7ba1\u7406\u8005\u5730\u5740\\n    * @param _rewards\uff1a\u56fd\u5e93\u5408\u7ea6\u5730\u5740\\n    **/\\n    constructor(address _token, address _management, address _keeper, address _rewards) ERC20(\\n        string(abi.encodePacked(\\\"PIGGY_\\\", ERC20(_token).name())),\\n        string(abi.encodePacked(\\\"p\\\", ERC20(_token).symbol()))\\n    ) {\\n        governance = msg.sender;\\n        management = _management;\\n        keeper = _keeper;\\n\\n        token = ERC20(_token);\\n\\n        myDecimals = token.decimals();\\n        require(myDecimals < 256);\\n\\n        if (myDecimals < 18) {\\n            precisionFactor = 10 ** (18 - myDecimals);\\n        } else {\\n            precisionFactor = 1;\\n        }\\n        underlyingUnit = 10 ** myDecimals;\\n        require(_rewards != address(0), 'rewards: ZERO_ADDRESS');\\n        rewards = _rewards;\\n\\n        pricePerShare=underlyingUnit;\\n\\n        //\u9ed8\u8ba425%\u7684\u6536\u76ca\u7ba1\u7406\u8d39\\n        profitManagementFee = 2500;\\n        //\u6bcf\u4e2a\u7b56\u7565\u6295\u8d44\u91d1\u989d\uff0c\u4e0d\u80fd\u8d85\u8fc7\u50a8\u84c4\u6c60\u768420%\\n        maxPercentPerStrategy = 2000;\\n        //\u6bcf\u4e2a\u534f\u8bae\u7684\u6240\u6709\u7b56\u7565\u6295\u8d44\u91d1\u989d\uff0c\u4e0d\u80fd\u8d85\u8fc7\u50a8\u84c4\u6c60\u768430%\\n        maxPercentPerProtocol = 3000;\\n        //\u6bcf\u4e2a\u7b56\u7565\u6295\u8d44\u91d1\u989d\uff0c\u4e0d\u80fd\u8d85\u8fc7\u76ee\u6807\u7b2c\u4e09\u65b9\u6295\u8d44\u6c60\u5b50\u768420%\uff0c\u5219\u7b56\u7565\u6295\u5165\u7684\u8d44\u91d1\u5e94\u8be5\u662f\u7b56\u7565\u6295\u5165\u524d\u768425%\\n        maxPercentInvestVault = 2000;\\n\\n        //\u6700\u5c0f\u5de5\u4f5c\u65f6\u95f4\u95f4\u9694\\n        minWorkDelay = 0;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return myDecimals;\\n    }\\n\\n    function setGovernance(address _governance) onlyGovernance external {\\n        governance = _governance;\\n    }\\n\\n    function setManagement(address _management) onlyGovernance external {\\n        management = _management;\\n    }\\n\\n    function setRewards(address _rewards) onlyGovernance external {\\n        rewards = _rewards;\\n    }\\n\\n    function setProfitManagementFee(uint256 _profitManagementFee) onlyGovernance external {\\n        require(_profitManagementFee <= MAX_BPS);\\n        profitManagementFee = _profitManagementFee;\\n    }\\n\\n    function setMaxPercentPerStrategy(uint256 _maxPercentPerStrategy) onlyGovernance external {\\n        require(_maxPercentPerStrategy <= MAX_BPS);\\n        maxPercentPerStrategy = _maxPercentPerStrategy;\\n    }\\n\\n    function setMaxPercentPerProtocole(uint256 _maxPercentPerProtocol) onlyGovernance external {\\n        require(_maxPercentPerProtocol <= MAX_BPS);\\n        maxPercentPerProtocol = _maxPercentPerProtocol;\\n    }\\n\\n    function setMaxPercentInvestVault(uint256 _maxPercentInvestVault) onlyGovernance external {\\n        require(_maxPercentInvestVault <= MAX_BPS);\\n        maxPercentInvestVault = _maxPercentInvestVault;\\n    }\\n\\n    function setMinWorkDelay(uint256 _delay) external onlyGovernance {\\n        minWorkDelay = _delay;\\n    }\\n\\n    function setMaxExchangeRateDeltaThreshold(uint256 _threshold) public onlyGovernance {\\n        require(_threshold <= MAX_BPS);\\n        maxExchangeRateDeltaThreshold = _threshold;\\n    }\\n\\n    function setEmergencyShutdown(bool active) onlyGovernance external {\\n        emergencyShutdown = active;\\n    }\\n\\n    function setKeeper(address keeperAddress) onlyGovernance external {\\n        keeper = keeperAddress;\\n    }\\n\\n    // Only smart contracts will be affected by the greyList.\\n    function addToGreyList(address _target) public onlyGovernance {\\n        greyList[_target] = true;\\n    }\\n\\n    function removeFromGreyList(address _target) public onlyGovernance {\\n        greyList[_target] = false;\\n    }\\n\\n    function totalAssets() public view returns (uint256) {\\n        return token.balanceOf(address(this)) + strategyTotalAssetsValue;\\n    }\\n\\n    //    /**\\n    //    * \u6d4b\u8bd5\u4e34\u65f6\u4f7f\u7528\u91cd\u7f6eVault\\n    //    */\\n    //    function reTestInit() external onlyGovernance () {\\n    //        //\u5c06\u7b56\u7565\u7684\u94b1\u5168\u90e8\u53d6\u51fa\u6765\\n    //        for (uint256 i = 0; i < strategySet.length(); i++)\\n    //        {\\n    //            IStrategy(strategySet.at(i)).withdrawToVault(1, 1);\\n    //            protocolStates[IStrategy(strategySet.at(i)).protocol()].totalAssets =0;\\n    //            strategyStates[strategySet.at(i)].totalAssets = 0;\\n    //        }\\n    //\\n    //        for (uint256 i = 0; i < userWithdrawMap.length();) {\\n    //            (address userAddress, uint256 userShares) = userWithdrawMap.at(i);\\n    //            userWithdrawMap.remove(userAddress);\\n    //        }\\n    //\\n    //        for (uint256 i = 0; i < userDepositMap.length();) {\\n    //            (address userAddress, uint256 amount) = userDepositMap.at(i);\\n    //            userDepositMap.remove(userAddress);\\n    //        }\\n    //\\n    //        //\u4e0a\u6b21\u7684\u51c0\u503c\\n    //        pricePerShare=0;\\n    //        //\u4eca\u5929\u7684\u5b58\u6b3e\u603b\u989d\uff0c\u8fd9\u6837\u4e0d\u7528\u5faa\u73af\u7528\u6237\u5b58\u6b3e\u961f\u5217\u8ba1\u7b97\u603b\u989d\\n    //        todayDepositAmounts=0;\\n    //        //\u4eca\u5929\u7684\u53d6\u6b3e\u4efd\u989d\uff0c\u8fd9\u6837\u4e0d\u7528\u5faa\u73af\u7528\u6237\u53d6\u6b3e\u961f\u5217\u8ba1\u7b97\u603b\u989d\\n    //        todayWithdrawShares=0;\\n    //        //\u6240\u6709\u7b56\u7565\u7684\u603b\u8d44\u4ea7\\n    //        strategyTotalAssetsValue=0;\\n    //\\n    //        token.safeTransfer(rewards, token.balanceOf(address(this)));\\n    //    }\\n\\n    /**\\n    * \u8fd4\u56de\u7b56\u7565\u6570\u7ec4\\n    */\\n    function strategies() external view returns (address[] memory) {\\n        address[] memory strategyArray = new address[](strategySet.length());\\n        for (uint256 i = 0; i < strategySet.length(); i++)\\n        {\\n            strategyArray[i] = strategySet.at(i);\\n        }\\n        return strategyArray;\\n    }\\n\\n    /**\\n    * \u8fd4\u56de\u7b56\u7565\u8d44\u4ea7\\n    */\\n    function strategyState(address strategyAddress) external view returns (StrategyState memory) {\\n        return strategyStates[strategyAddress];\\n    }\\n\\n    /**\\n    * \u8bbe\u7f6e\u7b56\u7565APY\\n    */\\n    function setApys(StrategyApy[] memory strategyApys) external onlyKeeper {\\n        for (uint i = 0; i < strategyApys.length; i++) {\\n            StrategyApy memory strategyApy = strategyApys[i];\\n            if (strategySet.contains(strategyApy.strategyAddress) && strategyStates[strategyApy.strategyAddress].totalAssets <= 0) {\\n                IStrategy(strategyApy.strategyAddress).updateApy(strategyApy.apy);\\n            }\\n        }\\n    }\\n\\n    /**\\n    * \u5730\u5740to\u4f7f\u7528amount\u7684token\uff0c\u6362\u53d6\u4e86\u8fd4\u56de\u7684shares\u91cf\u7684\u80a1\u4efd\u51ed\u8bc1\\n    */\\n    function _issueSharesForAmount(address to, uint256 amount) internal returns (uint256) {\\n        uint256 shares = 0;\\n        //\u5982\u679c\u6628\u5929\u6ca1\u6709\u51c0\u503c\u4ef7\u683c\uff0c\u5219\u4e3a\u7b2c\u4e00\u6b21doHardWork\u4e4b\u524d\u7684\u6295\u5165\uff0c1\uff1a1\\n        if (totalSupply() == 0) {\\n            shares = amount;\\n        } else {\\n            require(pricePerShare != 0);\\n            //            shares = amount.mul(totalSupply()).div(totalAssets() - todayDepositAmounts);\\n            shares = amount.mul(underlyingUnit).div(pricePerShare);\\n        }\\n        _mint(to, shares);\\n        return shares;\\n    }\\n\\n    /**\\n    * \u8f6c\u8d26\u65f6\uff0c\u540c\u65f6\u8f6c\u79fb\u7528\u6237\u6210\u672c\\n    **/\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override\\n    {\\n\\n\\n        super._beforeTokenTransfer(from, to, amount);\\n        //\u7528\u6237\u4e4b\u95f4\u8f6c\u8d26\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u6210\u672c\u4e5f\u968f\u4e4b\u79fb\u52a8\\n        if(from != address(0) && to!= address(0)){\\n            uint256 transferDebt = userDebts[from].mul(balanceOf(from)).div(amount);\\n\\n            if(transferDebt>userDebts[from]){\\n                transferDebt = userDebts[from];\\n            }\\n            userDebts[from] -= transferDebt;\\n            userDebts[to] += transferDebt;\\n\\n\\n        }\\n    }\\n\\n    /**\\n     * \u5b58\u6b3e\uff0c\u5f53\u524d\u53ea\u662f\u52a0\u5165\u5b58\u6b3e\u961f\u5217\uff0c\u6bcf\u65e5\u5b9a\u65f6\u4efb\u52a1\u5904\u7406\u5206\u6d3e\u4efd\u989d\\n     * @param _amount\uff1a\u76ee\u524d\u90fd\u5e94\u8be5\u662fUSDT\u6570\u91cf\\n     **/\\n    function deposit(uint256 _amount) external defense {\\n        require(_amount > 0, \\\"amount should more than 0\\\");\\n        require(emergencyShutdown == false, \\\"vault has been emergency shutdown\\\");\\n        userDepositMap.plus(msg.sender, _amount);\\n        todayDepositAmounts += _amount;\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    }\\n\\n    /**\\n     * \u8ba1\u7b97shares\u4efd\u989d\u5f53\u524d\u4ef7\u503c\u591a\u5c11token\\n     * @param shares\uff1a\u4efd\u989d\\n     **/\\n    function _shareValue(uint256 shares) internal view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return shares;\\n        }\\n        //return shares.mul(totalAssets() - todayDepositAmounts).div(totalSupply());\\n        return shares.mul(pricePerShare).div(underlyingUnit);\\n    }\\n\\n    /**\\n     * \u53d6\u6b3e\uff0c\u5f53\u524d\u53ea\u662f\u52a0\u5165\u53d6\u6b3e\u961f\u5217\uff0c\u6bcf\u65e5\u5b9a\u65f6\u4efb\u52a1\u5904\u7406\u53d6\u6b3e\\n     * @param shares\uff1a\u4efd\u989d\\n     **/\\n    function withdraw(uint256 shares) external {\\n        require(shares > 0, \\\"amount should more than 0\\\");\\n        require(emergencyShutdown == false, \\\"vault has been emergency shutdown\\\");\\n        require(shares <= balanceOf(msg.sender), \\\"can not withdraw more than user total\\\");\\n        userWithdrawMap.plus(msg.sender, shares);\\n        todayWithdrawShares += shares;\\n        require(userWithdrawMap.get(msg.sender) <= balanceOf(msg.sender));\\n    }\\n\\n    /**\\n     * \u8fd8\u672a\u5904\u7406\u7684\u7528\u6237\u5b58\u6b3e\\n     * @return USDT \u5b58\u6b3eUSDT\u6570\u91cf\\n     **/\\n    function inQueueDeposit(address userAddress) public view returns (uint256) {\\n        return userDepositMap.get(userAddress);\\n    }\\n\\n    /**\\n     * \u7528\u6237\u8fd8\u672a\u8d4e\u56de\u7684\u6210\u672c\\n     * @return USDT \u6210\u672c\u5b58\u6b3eUSDT\u6570\u91cf\\n     **/\\n    function userDebt(address userAddress) public view returns (uint256) {\\n        return userDebts[userAddress];\\n    }\\n\\n    /**\\n     * \u8fd8\u672a\u5904\u7406\u7684\u7528\u6237\u63d0\u53d6\u4efd\u989d\\n     * @return share \u63d0\u53d6\u7684share\u6570\u91cf\\n     **/\\n    function inQueueWithdraw(address userAddress) public view returns (uint256) {\\n        return userWithdrawMap.get(userAddress);\\n    }\\n\\n    //    /**\\n    //     * \u6bcf\u4e2a\u4efd\u989d\u7b49\u4e8e\u591a\u5c11\u7684USDT\uff0c\u57fa\u4e8e\u4e0a\u4e00\u6b21\u7684hardWork\u7ed3\u679c\\n    //     **/\\n    //    function getPricePerShare() public view returns (uint256) {\\n    //        return _shareValue(10 ** myDecimals);\\n    //    }\\n\\n    /**\\n     * \u6dfb\u52a0\u7b56\u7565\\n     **/\\n    function addStrategy(address strategy) onlyGovernance external {\\n        require(emergencyShutdown == false, \\\"vault has been emergency shutdown\\\");\\n        require(strategy != address(0), \\\"strategy address can't be 0\\\");\\n        require(strategySet.contains(strategy) == false, \\\"strategy already exists\\\");\\n        require(IStrategy(strategy).vault() == address(this), \\\"strategy's vault error\\\");\\n        require(IStrategy(strategy).want() == address(token), \\\"strategy's token doesn't match\\\");\\n\\n        strategySet.add(strategy);\\n        strategyStates[strategy] = StrategyState({\\n        totalAssets : 0,\\n        totalDebt : 0\\n        });\\n    }\\n\\n    /**\\n     * \u79fb\u9664\u7b56\u7565\\n     **/\\n    function removeStrategy(address strategy) onlyGovernance external {\\n        require(strategySet.contains(strategy) == true, \\\"strategy not exists\\\");\\n\\n        strategySet.remove(strategy);\\n\\n        uint256 strategyTotalAssets = strategyStates[strategy].totalAssets;\\n        strategyTotalAssetsValue -= strategyTotalAssets;\\n        protocolStates[IStrategy(strategy).protocol()].totalAssets -= strategyTotalAssets;\\n        strategyStates[strategy].totalAssets = 0;\\n\\n        //\u5c06\u7b56\u7565\u7684\u94b1\u5168\u90e8\u53d6\u56deVault\\n        (uint256 value, uint256 partialClaimValue, uint256 claimValue) = IStrategy(strategy).withdrawToVault(1, 1);\\n        uint256 strategyActualTotal = value + claimValue;\\n        if (strategyStates[strategy].totalDebt <= strategyActualTotal) {\\n            strategyStates[strategy].totalDebt = 0;\\n        } else {\\n            strategyStates[strategy].totalDebt -= strategyActualTotal;\\n        }\\n    }\\n\\n    /**\\n     * \u7b56\u7565\u8fc1\u79fb\\n     **/\\n    function migrateStrategy(address oldVersion, address newVersion) onlyGovernance external {\\n        require(newVersion != address(0), \\\"strategy address can't be 0\\\");\\n        require(strategySet.contains(oldVersion) == true, \\\"strategy will be migrate doesn't exists\\\");\\n        require(strategySet.contains(newVersion) == false, \\\"new strategy already exists\\\");\\n\\n        StrategyState memory strategy = strategyStates[oldVersion];\\n        strategyStates[oldVersion].totalAssets = 0;\\n        strategyStates[oldVersion].totalDebt = 0;\\n\\n        protocolStates[IStrategy(oldVersion).protocol()].totalAssets -= strategy.totalAssets;\\n\\n        strategyStates[newVersion] = StrategyState({\\n        totalAssets : strategy.totalAssets,\\n        totalDebt : strategy.totalDebt\\n        });\\n\\n        protocolStates[IStrategy(newVersion).protocol()].totalAssets += strategy.totalAssets;\\n\\n        IStrategy(oldVersion).migrate(newVersion);\\n\\n        strategySet.add(newVersion);\\n        strategySet.remove(oldVersion);\\n\\n    }\\n\\n    //\u8ba1\u7b97\u7b56\u7565\u662f\u5426\u8d85\u51fa\u5b83\u7684\u8d37\u6b3e\u9650\u989d\uff0c\u5e76\u4e14\u8fd4\u56de\u5e94\u8be5\u63d0\u53d6\u591a\u5c11\u91d1\u989d\u8fd4\u56de\u7ed9\u6c60\u5b50\\n    function _calDebt(address strategy,uint256 vaultAssetsLimit,uint256 protocolDebtLimit) internal view returns (uint256 debt) {\\n        //\u7b56\u7565\u5f53\u524d\u5df2\u6295\u5165\u8d44\u4ea7\\n        uint256 strategyTotalAssets = strategyStates[strategy].totalAssets;\\n\\n\\n\\n        //\u4e0d\u8d85\u8fc7\u7b56\u7565\u6295\u8d44\u6c60\u5b50\u603b\u8d44\u91d1\u91cf\u768420%\\n        uint256 invest_vault_assets_limit = IStrategy(strategy).getInvestVaultAssets().mul(maxPercentInvestVault).div(MAX_BPS);\\n\\n\\n        //\u534f\u8bae\u4e0b\u6240\u6709\u7b56\u7565\u603b\u6295\u8d44\u8d44\u91d1\u4e0d\u8d85\u8fc7\u603b\u8d44\u91d1\u768430%\\n\\n        //\u672c\u7b56\u7565\u534f\u8bae\u7684\u5df2\u6295\u8d44\u603b\u8d44\u91d1\\n        uint256 protocol_debt = protocolStates[IStrategy(strategy).protocol()].totalAssets;\\n\\n        uint256 strategy_protocol_limit = protocolDebtLimit;\\n        //\u5982\u679c\u8d85\u51fa\u534f\u8bae\u8d44\u91d1\u768430%\uff0c\u5219\u8fd4\u8fd8\u53ef\u8fd4\u8fd8\u7684\u8d85\u51fa\u90e8\u5206\uff0c\u7136\u540e\u548c\u4e0a\u9762\u90a3\u4e2a\u5e94\u8be5\u8fd4\u8fd8\u7684\uff0c\u53d6\u5e94\u8be5\u8fd4\u8fd8\u7684\u5927\u503c\\n        if (protocol_debt > protocolDebtLimit) {\\n            //\u534f\u8bae\u8fd8\u9700\u8981\u9000\u8fd8\u591a\u5c11\u8d44\u91d1\\n            uint256 shouldProtocolReturn = protocol_debt - protocolDebtLimit;\\n\\n            //\u6392\u9664\u672c\u7b56\u7565\u8d44\u91d1\uff0c\u5176\u4ed6\u7b56\u7565\u5360\u4e86\u591a\u5c11\u8d44\u91d1\\n            uint256 other_strategy_debt = protocol_debt - strategyTotalAssets;\\n\\n            //\u5982\u679c\u5176\u4ed6\u534f\u8bae\u52a0\u8d77\u6765\uff0c\u8fd8\u662f\u8d85\u8fc7\u9650\u5236\uff0c\u5219\u8d85\u51fa\u90e8\u5206\uff0c\u672c\u7b56\u7565\u9000\u8fd8\\n            if (shouldProtocolReturn > other_strategy_debt) {\\n                strategy_protocol_limit = strategyTotalAssets - (shouldProtocolReturn - other_strategy_debt);\\n\\n            }\\n            //\u5982\u679c\u540e\u9762\u4f4eAPY\u7684\u534f\u8bae\u8d44\u91d1\u591f\u62bd\u53d6\uff0c\u5219\u672c\u7b56\u7565\u4e0d\u63d0\u53d6\uff1b\\n        }\\n        uint256 strategy_limit = Math.min(strategy_protocol_limit, Math.min(vaultAssetsLimit, invest_vault_assets_limit));\\n\\n        if (strategy_limit > strategyTotalAssets) {\\n            return 0;\\n        } else {\\n            return (strategyTotalAssets - strategy_limit);\\n        }\\n    }\\n\\n    //\u8ba1\u7b97\u7b56\u7565\u662f\u5426\u8d85\u51fa\u5b83\u7684\u8d37\u6b3e\u9650\u989d\uff0c\u5e76\u4e14\u8fd4\u56de\u5e94\u8be5\u63d0\u53d6\u591a\u5c11\u91d1\u989d\u8fd4\u56de\u7ed9\u6c60\u5b50\\n    function _calCredit(address strategy,uint256 vaultAssetsLimit,uint256 protocolDebtLimit) internal view returns (uint256 credit) {\\n\\n        //        //\u5982\u679c\u7d27\u6025\u60c5\u51b5\uff0c\u5168\u90e8\u8fd4\u8fd8\\n        //        if (emergencyShutdown) {\\n        //            return 0;\\n        //        }\\n\\n        //\u7b56\u7565\u5f53\u524d\u5df2\u6295\u5165\u8d44\u4ea7\\n        uint256 strategyTotalAssets = strategyStates[strategy].totalAssets;\\n\\n\\n\\n        if (strategyTotalAssets >= vaultAssetsLimit) {\\n            return 0;\\n        }\\n\\n        //\u4e0d\u8d85\u8fc7\u7b56\u7565\u6295\u8d44\u6c60\u5b50\u603b\u8d44\u91d1\u91cf\u768420%\\n        uint256 invest_vault_assets_limit = IStrategy(strategy).getInvestVaultAssets().mul(maxPercentInvestVault).div(MAX_BPS);\\n\\n\\n        if (strategyTotalAssets >= invest_vault_assets_limit) {\\n            return 0;\\n        }\\n\\n        //\u534f\u8bae\u4e0b\u6240\u6709\u7b56\u7565\u603b\u6295\u8d44\u8d44\u91d1\u4e0d\u8d85\u8fc7\u603b\u8d44\u91d1\u768430%\\n\\n        //\u672c\u7b56\u7565\u534f\u8bae\u7684\u5df2\u6295\u8d44\u603b\u8d44\u91d1\\n        uint256 protocol_debt = protocolStates[IStrategy(strategy).protocol()].totalAssets;\\n\\n        //\u5982\u679c\u8d85\u51fa\u534f\u8bae\u8d44\u91d1\u768430%\uff0c\u5219\u8fd4\u8fd8\u53ef\u8fd4\u8fd8\u7684\u8d85\u51fa\u90e8\u5206\uff0c\u7136\u540e\u548c\u4e0a\u9762\u90a3\u4e2a\u5e94\u8be5\u8fd4\u8fd8\u7684\uff0c\u53d6\u5e94\u8be5\u8fd4\u8fd8\u7684\u5927\u503c\\n        if (protocol_debt >= protocolDebtLimit) {\\n            return 0;\\n        }\\n        uint256 strategy_limit = Math.min((protocolDebtLimit - protocol_debt), Math.min((vaultAssetsLimit - strategyTotalAssets), (invest_vault_assets_limit - strategyTotalAssets)));\\n\\n        return strategy_limit;\\n    }\\n\\n    /**\\n     * \u6bcf\u65e5\u5de5\u4f5c\u7684\u5b9a\u65f6\u4efb\u52a1\\n     **/\\n    function doHardWork() onlyKeeper external {\\n        require(emergencyShutdown == false, \\\"vault has been emergency shutdown\\\");\\n        uint256 now = block.timestamp;\\n        require(now.sub(lastWorkTime) >= minWorkDelay, \\\"Should not trigger if not waited long enough since previous doHardWork\\\");\\n\\n        //1. \u5148\u529e\u7406\u672a\u5904\u7406\u7684\u63d0\u6b3e\\n        //\u6839\u636e\u7528\u6237\u8981\u63d0\u53d6\u7684\u4efd\u989d\uff0c\u7b56\u7565\u63d0\u53d6\u51fa\u7684\u603b\u91d1\u989d\\n        uint256 strategyWithdrawForUserValue = 0;\\n        //\u7b56\u7565\u7528\u6237\u63d0\u53d6\u540e\u7684\u603b\u8d44\u4ea7\uff0c\u9700\u8981\u91cd\u65b0\u7b97\\n        uint256 newStrategyTotalAssetsValue = 0;\\n        //\u6309APY\u5bf9\u7b56\u7565\u8fdb\u884c\u6392\u5e8f\\n        RankedList sortedStrategies = new RankedList();\\n        //\u7b56\u7565\u5f52\u5c5e\u534f\u8bae\u7684\u8d44\u4ea7\u4e5f\u9700\u8981\u91cd\u7b97\\n        uint256 reportTime = block.timestamp;\\n\\n\\n        //\u5728\u4ece\u7b56\u7565\u63d0\u53d6\u94b1\u4e4b\u524d\uff0c\u5148\u8ba1\u7b97\u4f59\u989d\u591a\u5c11\\n        uint256 userWithdrawBalanceTotal = totalSupply() == 0 ? 0 : (token.balanceOf(address(this)) - todayDepositAmounts).mul(todayWithdrawShares).div(totalSupply());\\n\\n        for (uint256 i = 0; i < strategySet.length(); i++)\\n        {\\n            address strategy = strategySet.at(i);\\n            IStrategy strategyInstant = IStrategy(strategy);\\n\\n            uint256 strategyWithdrawValue;\\n            uint256 value;\\n            uint256 partialClaimValue;\\n            uint256 claimValue;\\n            //\u5148\u8fdb\u884c\u7528\u6237\u53d6\u6b3e\\n            if (todayWithdrawShares > 0) {\\n                (value, partialClaimValue, claimValue) = strategyInstant.withdrawToVault(todayWithdrawShares, totalSupply());\\n\\n            } else {\\n                //\u7528\u6237\u53d6\u6b3e\u4e3a0\uff0c\u90a3\u5c31\u9700\u8981\u624b\u52a8\u767e\u5206\u4e4b\u4e00\uff0c\u7528\u6765\u8bc4\u4f30\u7b56\u7565\u5f53\u524d\u51c0\u503c\\n                (value, partialClaimValue, claimValue) = strategyInstant.withdrawToVault(1, 100);\\n\\n            }\\n\\n            strategyWithdrawValue = value + claimValue;\\n\\n            strategyWithdrawForUserValue += (value + partialClaimValue);\\n\\n            //\u8ba1\u7b97\u7528\u6237\u53d6\u6b3e\u540e\u7684\u7b56\u7565\u8d44\u4ea7\\n            uint strategyAssets = strategyInstant.estimatedTotalAssets();\\n\\n            strategyStates[strategy].totalAssets = strategyAssets;\\n\\n            if (strategyWithdrawValue > strategyStates[strategy].totalDebt) {\\n                strategyStates[strategy].totalDebt = 0;\\n            } else {\\n                strategyStates[strategy].totalDebt -= strategyWithdrawValue;\\n            }\\n\\n            uint256 protocol = strategyInstant.protocol();\\n            if (protocolStates[protocol].lastReportTime == reportTime) {\\n                protocolStates[protocol].totalAssets += strategyAssets;\\n            } else {\\n                protocolStates[protocol].lastReportTime = reportTime;\\n                protocolStates[protocol].totalAssets = strategyAssets;\\n            }\\n\\n\\n            //\u8bc4\u4f30\u7528\u6237\u63d0\u6b3e\u540e\u7684\u7b56\u7565\u603b\u8d44\u4ea7\\n            newStrategyTotalAssetsValue += strategyAssets;\\n\\n            //\u6839\u636e\u7b56\u7565APY\u7ef4\u62a4\u6392\u5e8f\u961f\u5217,\u8fdb\u884c\u6295\u8d44\\n            sortedStrategies.insert(uint256(strategyInstant.apy()), strategy);\\n        }\\n        strategyTotalAssetsValue = newStrategyTotalAssetsValue;\\n        //\u8ba1\u7b97token\u51c0\u503c\\n        lastPricePerShare = pricePerShare;\\n        pricePerShare = totalSupply() == 0 ? underlyingUnit : (totalAssets() - todayDepositAmounts).mul(underlyingUnit).div(totalSupply());\\n\\n\\n        if(pricePerShare>lastPricePerShare){\\n            apy = (pricePerShare-lastPricePerShare).mul(31536000).mul(1e4).div(now-lastWorkTime).div(lastPricePerShare);\\n        }else{\\n            apy=0;\\n        }\\n\\n\\n        uint256 userWithdrawTotal = strategyWithdrawForUserValue + userWithdrawBalanceTotal;\\n\\n        //\u51c0\u503c\u589e\u957f\uff0c\u8868\u793a\u6709\u6536\u76ca\\n        uint256 totalProfitFee = 0;\\n        for (uint256 i = 0; i < userWithdrawMap.length();) {\\n            (address userAddress, uint256 userShares) = userWithdrawMap.at(i);\\n\\n            //\u7528\u6237\u6309\u6210\u672c\u5e94\u8be5\u63d0\u53d6\u7684\u91d1\u989d\\n            uint256 userCost= userDebts[userAddress].mul(userShares).div(balanceOf(userAddress));\\n\\n            //\u7528\u6237\u73b0\u5728\u5b9e\u9645\u63d0\u53d6\u7684\u91d1\u989d\\n            uint256 toUserAll = userWithdrawTotal.mul(userShares).div(todayWithdrawShares);\\n\\n            //\u5982\u679c\u6709\u6536\u76ca\uff0c\u63d0\u53d625%\\n            if (toUserAll > userCost) {\\n                uint256 profitFee = ((toUserAll - userCost).mul(profitManagementFee).div(MAX_BPS));\\n\\n                totalProfitFee += profitFee;\\n                toUserAll -= profitFee;\\n                userDebts[userAddress] -= userCost;\\n            } else {\\n\\n                userDebts[userAddress] -= toUserAll;\\n            }\\n            _burn(userAddress, userShares);\\n            //\u7528\u6237\u4efd\u989d\u90fd\u63d0\u53d6\u5b8c\uff0c\u5219\u6210\u672c\u91cd\u7f6e\u4e3a0\\n            if(balanceOf(userAddress)==0){\\n                userDebts[userAddress]=0;\\n            }\\n\\n            token.safeTransfer(userAddress, toUserAll);\\n            userWithdrawMap.remove(userAddress);\\n        }\\n        if (totalProfitFee > 0) {\\n\\n            token.safeTransfer(rewards, totalProfitFee);\\n        }\\n        todayWithdrawShares = 0;\\n        //\u5982\u679c\u7d27\u6025\u5173\u95ed\uff0c\u4e0d\u505ahardWork\uff0c\u50a8\u84c4\u6c60\u53ef\u4ee5\u8c03\u7528removeStrategy\u79fb\u9664\u7b56\u7565\\n        //        if (emergencyShutdown) {\\n\\n        //            //3. \u8fd4\u8fd8\u672a\u5904\u7406\u7684\u5b58\u6b3e\\n        //            for (uint256 i = 0; i < userDepositMap.length();) {\\n        //                (address userAddress, uint256 amount) = userDepositMap.at(i);\\n        //                token.safeTransfer(userAddress, amount);\\n        //                userDepositMap.remove(userAddress);\\n        //            }\\n        //            todayDepositAmounts = 0;\\n        //        } else {\\n\\n        //3. \u529e\u7406\u672a\u5904\u7406\u7684\u5b58\u6b3e\uff0c\u5305\u62ec\u63d0\u53d6\u6536\u76ca\\n        //\u7ed9\u7528\u6237\u6309\u4e0a\u6b21\u7684token\u51c0\u503c\uff0c\u5206\u6d3eshares\\n        for (uint256 i = 0; i < userDepositMap.length();) {\\n            (address userAddress, uint256 amount) = userDepositMap.at(i);\\n            userDebts[userAddress] += amount;\\n            uint shares = _issueSharesForAmount(userAddress, amount);\\n\\n            userDepositMap.remove(userAddress);\\n        }\\n        todayDepositAmounts = 0;\\n\\n\\n        uint256 vaultTotalAssets = totalAssets();\\n\\n        //\u4e0d\u8d85\u8fc7\u603b\u6295\u8d44\u8d44\u91d1\u768420%\\n        uint256 vaultAssetsLimit = vaultTotalAssets.mul(maxPercentPerStrategy).div(MAX_BPS);\\n        uint256 protocolDebtLimit = vaultTotalAssets.mul(maxPercentPerProtocol).div(MAX_BPS);\\n        //4. \u529e\u7406\u7b56\u7565\u8d85\u989d\u8c03\u6574\\n        uint256 strategyPosition = 0;\\n        uint256 nextId = sortedStrategies.head();\\n        while (nextId != 0) {\\n            (uint256 id, uint256 next, uint256 prev, uint256 rank, address strategy) = sortedStrategies.get(nextId);\\n\\n            //\u8ba1\u7b97\u7b56\u7565\u9700\u8981\u8fd4\u8fd8vault\u7684\u91d1\u989d\\n            uint256 debt = _calDebt(strategy,vaultAssetsLimit,protocolDebtLimit);\\n\\n            if (debt > 0) {\\n                uint256 debtReturn = IStrategy(strategy).cutOffPosition(debt);\\n                strategyStates[strategy].totalAssets -= debt;\\n                if (debtReturn > strategyStates[strategy].totalDebt) {\\n                    strategyStates[strategy].totalDebt = 0;\\n                } else {\\n                    strategyStates[strategy].totalDebt -= debtReturn;\\n                }\\n\\n                protocolStates[IStrategy(strategy).protocol()].totalAssets -= debt;\\n                strategyTotalAssetsValue -= debt;\\n\\n            }\\n            nextId = next;\\n            strategyPosition++;\\n        }\\n\\n        //5. \u529e\u7406\u7b56\u7565\u8865\u5145\u8d44\u91d1\u53ca\u6295\u8d44\\n\\n        strategyPosition = 0;\\n        nextId = sortedStrategies.head();\\n        while (nextId != 0) {\\n            //\u6ca1\u6709\u94b1\u53ef\u4ee5\u6295\u4e86\uff0c\u5c31\u9000\u51fa\\n            uint256 vault_balance = token.balanceOf(address(this));\\n\\n            if (vault_balance <= 0) {\\n\\n                break;\\n            }\\n\\n            (uint256 id, uint256 next, uint256 prev, uint256 rank, address strategy) = sortedStrategies.get(nextId);\\n\\n            uint256 calCredit = _calCredit(strategy,vaultAssetsLimit,protocolDebtLimit);\\n            if (calCredit > 0) {\\n                //\u8ba1\u7b97\u7b56\u7565\u6700\u591a\u53ef\u4ecevault\u4e2d\u53d6\u8d70\u7684\u91d1\u989d\\n                uint256 credit = Math.min(calCredit, token.balanceOf(address(this)));\\n\\n                if (credit > 0) {\\n                    strategyStates[strategy].totalAssets += credit;\\n                    strategyStates[strategy].totalDebt += credit;\\n                    protocolStates[IStrategy(strategy).protocol()].totalAssets += credit;\\n                    token.safeTransfer(strategy, credit);\\n                    strategyTotalAssetsValue += credit;\\n\\n\\n\\n                    //\u8c03\u7528\u7b56\u7565\u7684invest()\u5f00\u59cb\u5de5\u4f5c\\n                    IStrategy(strategy).invest();\\n                }\\n            }\\n\\n            nextId = next;\\n            strategyPosition++;\\n        }\\n\\n        //        }\\n        lastWorkTime = now;\\n    }\\n\\n    /**\\n     * \u6cbb\u7406\u8005\u53ef\u4ee5\u5c06\u9519\u53d1\u5230\u672c\u5408\u7ea6\u7684\u5176\u4ed6\u8d27\u5e01\uff0c\u8f6c\u5230\u81ea\u5df1\u7684\u8d26\u6237\u4e0b\\n     * @param _token\uff1a\u5176\u4ed6\u8d27\u5e01\u5730\u5740\\n     **/\\n    function sweep(address _token) onlyGovernance external {\\n        require(_token != address(token));\\n        uint256 value = token.balanceOf(address(this));\\n        token.safeTransferFrom(address(this), msg.sender, value);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Strategies/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\ninterface IStrategy {\\n\\n    //\u8be5\u7b56\u7565\u5c5e\u4e8e\u7684\u534f\u8bae\u7c7b\u578b\\n    function protocol() external view returns (uint256);\\n\\n    //\u8be5\u7b56\u7565\u9700\u8981\u7684token\u5730\u5740\\n    function want() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n    // \u83b7\u53d6\u8be5\u7b56\u7565\u5bf9\u5e94\u6c60\u7684apy\\n    function apy() external view returns (uint256);\\n    // \u66f4\u65b0\u8be5\u7b56\u7565\u5bf9\u5e94\u6c60apy\uff0c\u7559\u7ed9keeper\u8c03\u7528\\n    function updateApy(uint256 _apy) external;\\n    //\u8be5\u7b56\u7565\u7684vault\u5730\u5740\\n    function vault() external view returns (address);\\n\\n    //    function deposit(uint256 mount) external;\\n\\n    //\u9700\u8981\u63d0\u53d6\u6307\u5b9a\u6570\u91cf\u7684token,\u8fd4\u56de\u63d0\u53d6\u5bfc\u81f4\u7684loss\u6570\u91cftoken\\n    function withdraw(uint256 _amount) external returns (uint256);\\n\\n    //\u8ba1\u7b97\u7b56\u7565\u7684APY\\n    function calAPY() external returns (uint256);\\n\\n    //\u8be5\u7b56\u7565\u6240\u6709\u7684\u8d44\u4ea7\uff08priced in want\uff09\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    //\u7b56\u7565\u8fc1\u79fb\\n    function migrate(address _newStrategy) external;\\n\\n    //\u67e5\u770b\u7b56\u7565\u6295\u8d44\u6c60\u5b50\u7684\u603b\u6570\u91cf\uff08priced in want\uff09\\n    function getInvestVaultAssets() external view returns (uint256);\\n\\n    /**\\n    * correspondingShares\uff1a\u5f85\u63d0\u53d6xToken\u6570\\n    * totalShares\uff1a\u603bxToken\u6570\\n    **/\\n    function withdrawToVault(uint256 correspondingShares, uint256 totalShares) external returns  (uint256 value, uint256 partialClaimValue, uint256 claimValue) ;\\n\\n    /**\\n    * \u65e0\u4eba\u63d0\u53d6\u65f6\uff0c\u901a\u8fc7\u8c03\u7528\u8be5\u65b9\u6cd5\u8ba1\u7b97\u7b56\u7565\u51c0\u503c\\n    **/\\n    function withdrawOneToken() external returns  (uint256 value, uint256 partialClaimValue, uint256 claimValue);\\n\\n\\n\\n    /**\\n    * \u9000\u56de\u8d85\u51fa\u90e8\u5206\u91d1\u989d\\n    **/\\n    function cutOffPosition(uint256 _debtOutstanding) external returns (uint256);\\n\\n    /**\\n    * \u5c06\u7a7a\u7f6e\u8d44\u91d1\u8fdb\u884c\u6295\u8d44\\n    **/\\n    function invest() external;\\n}\"\r\n    },\r\n    \"contracts/lists/RankedList.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title RankedList\\n * @dev Doubly linked list of ranked objects. The head will always have the highest rank and\\n * elements will be ordered down towards the tail.\\n * @author Alberto Cuesta Ca\u00f1ada\\n */\\ncontract RankedList {\\n\\n    event ObjectCreated(uint256 id, uint256 rank, address data);\\n    event ObjectsLinked(uint256 prev, uint256 next);\\n    event ObjectRemoved(uint256 id);\\n    event NewHead(uint256 id);\\n    event NewTail(uint256 id);\\n\\n    struct Object{\\n        uint256 id;\\n        uint256 next;\\n        uint256 prev;\\n        uint256 rank;\\n        address data;\\n    }\\n\\n    uint256 public head;\\n    uint256 public tail;\\n    uint256 public idCounter;\\n    mapping (uint256 => Object) public objects;\\n\\n    /**\\n     * @dev Creates an empty list.\\n     */\\n    constructor() public {\\n        head = 0;\\n        tail = 0;\\n        idCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function get(uint256 _id)\\n    public\\n    virtual\\n    view\\n    returns (uint256, uint256, uint256, uint256, address)\\n    {\\n        Object memory object = objects[_id];\\n        return (object.id, object.next, object.prev, object.rank, object.data);\\n    }\\n\\n    /**\\n     * @dev Return the id of the first Object with a lower or equal rank, starting from the head.\\n     */\\n    function findRank(uint256 _rank)\\n    public\\n    virtual\\n    view\\n    returns (uint256)\\n    {\\n        Object memory object = objects[head];\\n        while (object.rank > _rank) {\\n            object = objects[object.next];\\n        }\\n        return object.id;\\n    }\\n\\n    /**\\n     * @dev Insert the object immediately before the one with the closest lower rank.\\n     * WARNING: This method loops through the whole list before inserting, and therefore limits the\\n     * size of the list to a few tens of thousands of objects before becoming unusable. For a scalable\\n     * contract make _insertBefore public but check prev and next on insertion.\\n     */\\n    function insert(uint256 _rank, address _data)\\n    public\\n    virtual\\n    {\\n        uint256 nextId = findRank(_rank);\\n        if (nextId == 0) {\\n            _addTail(_rank, _data);\\n        }\\n        else {\\n            _insertBefore(nextId, _rank, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove the Object denoted by `_id` from the List.\\n     */\\n    function remove(uint256 _id)\\n    public\\n    virtual\\n    {\\n        Object memory removeObject = objects[_id];\\n        if (head == _id && tail == _id) {\\n            _setHead(0);\\n            _setTail(0);\\n        }\\n        else if (head == _id) {\\n            _setHead(removeObject.next);\\n            objects[removeObject.next].prev = 0;\\n        }\\n        else if (tail == _id) {\\n            _setTail(removeObject.prev);\\n            objects[removeObject.prev].next = 0;\\n        }\\n        else {\\n            _link(removeObject.prev, removeObject.next);\\n        }\\n        delete objects[removeObject.id];\\n        emit ObjectRemoved(_id);\\n    }\\n\\n    /**\\n     * @dev Insert a new Object as the new Head with `_data` in the data field.\\n     */\\n    function _addHead(uint256 _rank, address _data)\\n    internal\\n    {\\n        uint256 objectId = _createObject(_rank, _data);\\n        _link(objectId, head);\\n        _setHead(objectId);\\n        if (tail == 0) _setTail(objectId);\\n    }\\n\\n    /**\\n     * @dev Insert a new Object as the new Tail with `_data` in the data field.\\n     */\\n    function _addTail(uint256 _rank, address _data)\\n    internal\\n    {\\n        if (head == 0) {\\n            _addHead(_rank, _data);\\n        }\\n        else {\\n            uint256 objectId = _createObject(_rank, _data);\\n            _link(tail, objectId);\\n            _setTail(objectId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new Object after the Object denoted by `_id` with `_data` in the data field.\\n     */\\n    function _insertAfter(uint256 _prevId, uint256 _rank, address _data)\\n    internal\\n    {\\n        if (_prevId == tail) {\\n            _addTail(_rank, _data);\\n        }\\n        else {\\n            Object memory prevObject = objects[_prevId];\\n            Object memory nextObject = objects[prevObject.next];\\n            uint256 newObjectId = _createObject(_rank, _data);\\n            _link(newObjectId, nextObject.id);\\n            _link(prevObject.id, newObjectId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new Object before the Object denoted by `_id` with `_data` in the data field.\\n     */\\n    function _insertBefore(uint256 _nextId, uint256 _rank, address _data)\\n    internal\\n    {\\n        if (_nextId == head) {\\n            _addHead(_rank, _data);\\n        }\\n        else {\\n            _insertAfter(objects[_nextId].prev, _rank, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(uint256 _id)\\n    internal\\n    {\\n        head = _id;\\n        emit NewHead(_id);\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(uint256 _id)\\n    internal\\n    {\\n        tail = _id;\\n        emit NewTail(_id);\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Object.\\n     */\\n    function _createObject(uint256 _rank, address _data)\\n    internal\\n    returns (uint256)\\n    {\\n        uint256 newId = idCounter;\\n        idCounter += 1;\\n        Object memory object = Object(\\n            newId,\\n            0,\\n            0,\\n            _rank,\\n            _data\\n        );\\n        objects[object.id] = object;\\n        emit ObjectCreated(\\n            object.id,\\n            object.rank,\\n            object.data\\n        );\\n        return object.id;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(uint256 _prevId, uint256 _nextId)\\n    internal\\n    {\\n        if (_prevId != 0 && _nextId != 0) {\\n            objects[_prevId].next = _nextId;\\n            objects[_nextId].prev = _prevId;\\n            emit ObjectsLinked(_prevId, _nextId);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/library/IterableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary IterableMap {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.AddressSet _keys;\\n\\n        mapping (address => uint256) _values;\\n    }\\n\\n    /**\\n    * @dev Adds a key-value pair to a map, or updates the value for an existing\\n    * key. O(1).\\n    *\\n    * Returns true if the key was added to the map, that is if it was not\\n    * already present.\\n    */\\n    function _set(Map storage map, address key, uint256 value) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n    * @dev plus a key\u2018s value pair in a map\\n    * key. O(1).\\n    *\\n    * Returns true if the key was added to the map, that is if it was not\\n    * already present.\\n    */\\n    function _plus(Map storage map, address key, uint256 value) private {\\n        map._values[key] += value;\\n        map._keys.add(key);\\n    }\\n\\n    /**\\n    * @dev minus a key\u2018s value pair in a map\\n    * key. O(1).\\n    *\\n    * Returns true if the key was added to the map, that is if it was not\\n    * already present.\\n    */\\n    function _minus(Map storage map, address key, uint256 value) private {\\n        map._values[key] -= value;\\n        map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, address key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, address key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (address, uint256) {\\n        address key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, address key) private view returns (uint256) {\\n        uint256 value = map._values[key];\\n        return value;\\n    }\\n    \\n    struct AddressToUintMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return _set(map._inner, key, value);\\n    }\\n\\n    /**\\n    * @dev plus a key\u2018s value pair in a map\\n    * key. O(1).\\n    *\\n    * Returns true if the key was added to the map, that is if it was not\\n    * already present.\\n    */\\n    function plus(AddressToUintMap storage map, address key, uint256 value) internal {\\n        return _plus(map._inner, key, value);\\n    }\\n\\n    /**\\n    * @dev minus a key\u2018s value pair in a map\\n    * key. O(1).\\n    *\\n    * Returns true if the key was added to the map, that is if it was not\\n    * already present.\\n    */\\n    function minus(AddressToUintMap storage map, address key, uint256 value) internal {\\n        return _minus(map._inner, key, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        return _at(map._inner, index);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return _get(map._inner, key);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addToGreyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"inQueueDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"inQueueWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWorkTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExchangeRateDeltaThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentInvestVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentPerProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentPerStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldVersion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWorkDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precisionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastReportTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeFromGreyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.StrategyApy[]\",\"name\":\"strategyApys\",\"type\":\"tuple[]\"}],\"name\":\"setApys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setEmergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeperAddress\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setMaxExchangeRateDeltaThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPercentInvestVault\",\"type\":\"uint256\"}],\"name\":\"setMaxPercentInvestVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPercentPerProtocol\",\"type\":\"uint256\"}],\"name\":\"setMaxPercentPerProtocole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPercentPerStrategy\",\"type\":\"uint256\"}],\"name\":\"setMaxPercentPerStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinWorkDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitManagementFee\",\"type\":\"uint256\"}],\"name\":\"setProfitManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"}],\"name\":\"strategyState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.StrategyState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyTotalAssetsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"todayDepositAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"todayWithdrawShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c791b4a9b10b1bdb5fbe2614d389f0fe92105279000000000000000000000000ae45367aeac760a6d716c3eb5432ebdc2019586e000000000000000000000000c791b4a9b10b1bdb5fbe2614d389f0fe92105279", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}