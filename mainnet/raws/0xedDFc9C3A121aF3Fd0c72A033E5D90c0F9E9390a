{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MekaApesGame_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./MekaApesERC721.sol\\\";\\nimport \\\"./OogearERC20.sol\\\";\\nimport \\\"./IDMT_ERC20.sol\\\";\\n\\nenum OogaType { ROBOOOGA, MEKAAPE }\\n\\nstruct OogaAttributes {\\n    OogaType oogaType;\\n    uint8 level;\\n\\n    bool staked;\\n    address stakedOwner;\\n\\n    uint256 lastClaimTimestamp;\\n    uint256 savedReward;\\n\\n    uint256 lastRewardPerPoint;\\n    uint256 stakedMegaIndex;\\n}\\n\\nstruct Prices {\\n    uint256 mintPrice;\\n    uint256 mintStakePrice;\\n    uint256[] mintOGprice;\\n    uint256[] mintOGstakePrice;\\n    uint256 mintDMTstakePrice;\\n    uint256[] roboLevelupPrice;\\n    uint256 mekaMergePrice;\\n}\\n\\nstruct PricesGetter {\\n    uint256 mintPrice;\\n    uint256 mintStakePrice;\\n    uint256 mintOGprice;\\n    uint256 mintOGstakePrice;\\n    uint256 mintDMTstakePrice;\\n    uint256[] roboLevelupPrice;\\n    uint256 mekaMergePrice;\\n    uint256[] roboLevelupPriceOG;\\n}\\n\\nstruct RandomsGas {\\n    uint256 mintBase;\\n    uint256 mintPerToken;\\n    uint256 mintPerTokenStaked;\\n    uint256 unstakeBase;\\n    uint256 unstakePerToken;\\n    uint256 mergeBase;\\n}\\n\\nstruct InitParams {\\n    MekaApesERC721 erc721Contract_;\\n    OogearERC20 ogToken_;\\n    IDMT_ERC20 dmtToken_;\\n    IERC721 oogaVerse_;\\n    address mintSigWallet_;\\n    address randomProvider_;\\n    Prices prices_;\\n    RandomsGas randomsGas_;\\n    uint256[] mintOGpriceSteps_;\\n    uint256[] roboOogaRewardPerSec_;\\n    uint256[] roboOogaMinimalRewardToUnstake_;\\n    uint256[] roboOogaRewardAttackProbabilities_;\\n    uint256[] megaLevelProbabilities_;\\n    uint256[] mekaLevelSharePoints_;\\n    uint256[] megaTributePoints_;\\n    uint256 claimTax_;\\n    uint256 maxMintWithDMT_;\\n    uint256 mintSaleAmount_;\\n    uint256 maxTokenSupply_;\\n    uint256 maxOgSupply_;\\n    uint256 addedOgForRewardsAtEnd_;\\n    uint256 ethMintAttackChance_;\\n    uint256 dmtMintAttackChance_;\\n    uint256 ogMintAttackChance_;\\n    uint256 randomMekaProbability_;\\n    uint256 publicMintAllowance_;\\n    uint256 maxMintedRewardTokens_;\\n    address[] mintETHWithdrawers_;\\n    uint256[] mintETHWithdrawersPercents_;\\n}\\n\\nstruct MintSignature {\\n    uint256 mintAllowance;\\n    uint8 _v;\\n    bytes32 _r; \\n    bytes32 _s;\\n}\\n\\nstruct LeaderboardRewardSignature {\\n    uint256 reward;\\n    uint8 _v;\\n    bytes32 _r;\\n    bytes32 _s;\\n}\\n\\nenum RandomRequestType { MINT, UNSTAKE, MERGE }\\n\\nstruct RandomRequest {\\n    RandomRequestType requestType;\\n    address user;\\n    bool active;\\n}\\n\\nstruct ClaimRequest {\\n    uint256 totalMekaReward;\\n    uint256[] roboOogas;\\n    uint256[] roboOogasAmounts;\\n}\\n\\nstruct MintRequest {\\n    uint32 startFromId;\\n    uint8 amount;\\n    uint8 attackChance;\\n    bool toStake;\\n}\\n\\nstruct Crew {\\n    address owner;\\n    uint256[] oogas;\\n    uint256 lastClaimTimestamp;\\n    uint256 totalRewardPerSec;\\n    uint256 savedReward;\\n    uint256 oogaCount;\\n}\\n\\ncontract MekaApesGame_1 is OwnableUpgradeable {\\n\\n    MekaApesERC721 public erc721Contract;\\n    OogearERC20 public ogToken;\\n    IDMT_ERC20 public dmtToken;\\n    IERC721 public oogaVerse;\\n\\n    address public mintSigWallet;\\n    address public randomProvider;\\n\\n    Prices public prices;\\n    RandomsGas public randomsGas;\\n\\n    uint256[] public mintOGpriceSteps;\\n    uint256 public currentOgPriceStep;\\n\\n    uint256[] public roboOogaRewardPerSec;\\n    uint256[] public roboOogaMinimalRewardToUnstake;\\n    uint256[] public roboOogaRewardAttackProbabilities;\\n\\n    uint256 public claimTax;\\n\\n    uint256 public nextTokenId;\\n\\n    uint256 public tokensMintedWithDMT;\\n    uint256 public maxMintWithDMT;\\n\\n    uint256 public ethMintAttackChance;\\n    uint256 public dmtMintAttackChance;\\n    uint256 public ogMintAttackChance;\\n    uint256 public ATTACK_CHANCE_DENOM;\\n\\n    uint256 public randomMekaProbability;\\n\\n    uint256[] public megaLevelProbabilities;\\n\\n    uint256[] public mekaLevelSharePoints;\\n    uint256[] public megaTributePoints;\\n\\n    uint256 public mekaTotalRewardPerPoint;\\n    uint256 public mekaTotalPointsStaked;\\n\\n    uint256[][4] public megaStaked;\\n\\n    mapping(uint256 => OogaAttributes) public oogaAttributes;\\n\\n    mapping(uint256 => bool) public oogaEvolved;\\n\\n    uint256 public publicMintAllowance;\\n    bool public publicMintStarted;\\n    mapping(address => uint256) public numberOfMintedOogas;\\n\\n    uint256 public mintSaleAmount;\\n    bool public mintSale;\\n    bool public gameActive;\\n\\n    uint256 public ogMinted;\\n    uint256 public maxOgSupply;\\n    uint256 public addedOgForRewardsAtEnd;\\n\\n    uint256 public maxTokenSupply;\\n\\n    uint256 public totalMintedRewardTokens;\\n    uint256 public maxMintedRewardTokens;\\n\\n    uint256 public totalRandomTxFee;\\n    uint256 public totalRandomTxFeeWithdrawn;\\n\\n    uint256 public totalMintETH;\\n    mapping(address => uint256) public withdrawerPercent;\\n    mapping(address => uint256) public withdrawerLastTotalMintETH;\\n\\n    uint256 public nextRandomRequestId;\\n    mapping(uint256 => RandomRequest) public randomRequests;\\n    mapping(uint256 => MintRequest) public mintRequests;\\n    mapping(uint256 => ClaimRequest) public claimRequests;\\n    mapping(uint256 => uint256) public mergeRequests;\\n    uint256 public nextClaimWithoutRandomId;\\n\\n    event MintMultipleRobo(address indexed account, uint256 startFromTokenId, uint256 amount);\\n    event MekaConvert(uint256 indexed tokenId);\\n    event OogaAttacked(uint256 indexed oogaId, address indexed tributeAccount, uint256 tributeOogaId);\\n    event BabyOogaEvolve(address indexed account, uint256 indexed oogaId, uint256 indexed newTokenId);\\n    event StakeOoga(uint256 indexed oogaId, address indexed account);\\n    event UnstakeOoga(uint256 indexed oogaId, address indexed account);\\n    event ClaimReward(uint256 indexed claimId, address indexed account, uint256 indexed tokenId, uint256 amount);\\n    event TaxReward(uint256 indexed claimId, uint256 totalTax);\\n    event AttackReward(uint256 indexed claimId, uint256 indexed tokenId, uint256 amount);\\n    event LevelUpRoboOoga(address indexed account, uint256 indexed oogaId, uint256 newLevel);\\n    event MergeMekaApes(address indexed account, uint256 oogaIdSave, uint256 indexed oogaIdBurn);\\n    event MegaMerged(uint256 indexed tokenId, uint256 megaLevel);\\n\\n    event RequestRandoms(uint256 indexed requestId, uint256 requestSeed);\\n    event ReceiveRandoms(uint256 indexed requestId, uint256 entropy);\\n\\n    //////////////////////////////////\\n\\n    uint256 public previousBaseFee;\\n    uint256 public currentBaseFee;\\n    uint256 public baseFeeRefreshTime;\\n    uint256 public baseFeeUpdatedAt;\\n\\n    event RoboMint(address indexed account, uint256 indexed tokenId);\\n\\n    bool public initV2;\\n\\n    //////////////////////////////////\\n\\n    bool public allTokensMinted;\\n    uint256 public allMintedTimestamp;\\n\\n    bool public ogRewardMinted;\\n\\n    bool public initV3;\\n\\n    //////////////////////////////////\\n\\n    uint256[] public roboOogaRewardPerSec_midStage;\\n\\n    bool public initV4;\\n\\n    //////////////////////////////////\\n\\n    event MakeCrew(address indexed account, uint256 indexed crewId);\\n    event RemoveCrew(uint256 indexed crewId);\\n    event ClaimCrewReward(address indexed account, uint256 indexed crewId, uint256 amount);\\n\\n    uint256 public nextCrewId;\\n    mapping(uint256 => Crew) public crews;\\n    mapping(uint256 => uint256) public inCrew;\\n\\n    uint256[] public roboLevelupPriceOG;\\n    uint256[] public roboOogaRewardPerSecInCrew;\\n    uint256[] public maxCrewForMekaLevel;\\n    uint256[] public mekaCrewRewardMultiplier;\\n\\n    uint256 public crewClaimPercent;\\n\\n    bool public initV5;\\n\\n    event AddToCrew(uint256 indexed crewId, uint256 indexed tokenIds);\\n    event RemoveFromCrew(uint256 indexed crewId, uint256 indexed tokenIds);\\n\\n    uint256 public unstakeCreditsStart;\\n    mapping(address => uint256) public unstakeCredits;\\n    mapping(address => uint256) public usedUnstakeCredits;\\n    uint256[] public unstakeCreditsForRoboLevel;\\n\\n    uint256 public roboOogaRewardStart;\\n\\n    mapping(address => uint256) public leaderboardRewardClaimed;\\n\\n    event AddUnstakeCredits(address indexed user, uint256 indexed burnOogaId, uint256 addedCredits);\\n    event LeaderbordRewardClaim(address indexed user, uint256 reward);\\n\\n    address public gameContract2;\\n\\n    uint256 public midStageOverTimestamp;\\n    uint256 public roboOogaRewardEnd;\\n    uint256 public roboOogaRewardIncreaseDuration;\\n\\n    event ChangeStaker(uint256 indexed tokenId, address indexed account);\\n\\n    //////////////////////////////////\\n\\n    function initialize_stage15_1(\\n        address gameContract2_,\\n        uint256 roboOogaRewardStart_,\\n        uint256 roboOogaRewardEnd_,\\n        uint256 roboOogaRewardIncreaseDuration_,\\n        uint256 newMergePrice_,\\n        uint256 newRandomMekaProbability_\\n    ) public onlyOwner {\\n        require(!initV5, \\\"E90\\\");\\n        gameContract2 = gameContract2_;\\n\\n        roboOogaRewardStart = roboOogaRewardStart_;\\n        roboOogaRewardEnd = roboOogaRewardEnd_;\\n        roboOogaRewardIncreaseDuration = roboOogaRewardIncreaseDuration_;\\n\\n        prices.mekaMergePrice = newMergePrice_;\\n        randomMekaProbability = newRandomMekaProbability_;\\n    }\\n\\n    function initialize_stage15_2(\\n        uint256[] calldata roboLevelupPrice_,\\n        uint256[] calldata roboLevelupPriceOG_,\\n        uint256[] calldata maxCrewForMekaLevel_,\\n        uint256[] calldata roboOogaRewardPerSecInCrew_,\\n        uint256[] calldata mekaCrewRewardMultiplier_,\\n        uint256[] calldata unstakeCreditsForRoboLevel_\\n    ) public onlyOwner {\\n        require(!initV5, \\\"E90\\\");\\n        initV5 = true;\\n\\n        prices.roboLevelupPrice = roboLevelupPrice_;\\n        roboLevelupPriceOG = roboLevelupPriceOG_;\\n        maxCrewForMekaLevel = maxCrewForMekaLevel_;\\n        roboOogaRewardPerSecInCrew = roboOogaRewardPerSecInCrew_;\\n        mekaCrewRewardMultiplier = mekaCrewRewardMultiplier_;\\n\\n        unstakeCreditsForRoboLevel = unstakeCreditsForRoboLevel_;\\n\\n        nextCrewId = 1;\\n        unstakeCreditsStart = 5;\\n\\n        midStageOverTimestamp = block.timestamp;\\n    }\\n\\n    function changeContract2(address gameContract2_) external onlyOwner {\\n        gameContract2 = gameContract2_;\\n    }\\n\\n    function changePrices(Prices memory prices_) external onlyOwner {\\n        prices = prices_;\\n    }\\n\\n    function changeGameActive(bool gameActive_) external onlyOwner {\\n        gameActive = gameActive_;\\n    }\\n\\n    function changeRandomsGas(RandomsGas memory randomsGas_) external onlyOwner {\\n        randomsGas = randomsGas_;\\n    }\\n\\n    function changeMintOGPriceSteps(uint256[] calldata mintOGpriceSteps_) external onlyOwner {\\n        mintOGpriceSteps = mintOGpriceSteps_;\\n    }\\n\\n    function changeRoboParameters(\\n        uint256[] calldata roboOogaRewardPerSec_,\\n        uint256[] calldata roboOogaMinimalRewardToUnstake_,\\n        uint256[] calldata roboOogaRewardAttackProbabilities_\\n    )\\n        external onlyOwner\\n    {\\n        roboOogaRewardPerSec = roboOogaRewardPerSec_;\\n        roboOogaMinimalRewardToUnstake = roboOogaMinimalRewardToUnstake_;\\n        roboOogaRewardAttackProbabilities = roboOogaRewardAttackProbabilities_;\\n    }\\n\\n    function changeMekaParameters(\\n        uint256[] calldata megaLevelProbabilities_,\\n        uint256[] calldata mekaLevelSharePoints_,\\n        uint256[] calldata megaTributePoints_\\n    )\\n        external onlyOwner\\n    {\\n        megaLevelProbabilities = megaLevelProbabilities_;\\n        mekaLevelSharePoints = mekaLevelSharePoints_;\\n        megaTributePoints = megaTributePoints_;\\n    }\\n\\n    function changeSettings(\\n        uint256 claimTax_,\\n        uint256 maxMintWithDMT_,\\n        uint256 mintSaleAmount_,\\n        uint256 maxTokenSupply_,\\n        uint256 maxOgSupply_,\\n        uint256 addedOgForRewardsAtEnd_,\\n        uint256 ethMintAttackChance_,\\n        uint256 dmtMintAttackChance_,\\n        uint256 ogMintAttackChance_,\\n        uint256 randomMekaProbability_\\n    ) \\n        external onlyOwner \\n    {\\n        claimTax = claimTax_;\\n        maxMintWithDMT = maxMintWithDMT_;\\n        mintSaleAmount = mintSaleAmount_;\\n        maxTokenSupply = maxTokenSupply_;\\n        maxOgSupply = maxOgSupply_;\\n        addedOgForRewardsAtEnd = addedOgForRewardsAtEnd_;\\n        ethMintAttackChance = ethMintAttackChance_;\\n        dmtMintAttackChance = dmtMintAttackChance_;\\n        ogMintAttackChance = ogMintAttackChance_;\\n        randomMekaProbability = randomMekaProbability_;\\n    }\\n\\n    function changeBaseFeeRefreshTime(uint256 baseFeeRefreshTime_) external onlyOwner {\\n        baseFeeRefreshTime = baseFeeRefreshTime_;\\n    }\\n\\n    function totalMintedTokens() public view returns(uint256) {\\n        return nextTokenId - 1;\\n    } \\n\\n    function getPrices() public view returns(PricesGetter memory) {\\n        return PricesGetter(\\n            prices.mintPrice,\\n            prices.mintStakePrice,\\n            prices.mintOGprice[ currentOgPriceStep ],\\n            prices.mintOGstakePrice[ currentOgPriceStep ],\\n            prices.mintDMTstakePrice,\\n            prices.roboLevelupPrice,\\n            prices.mekaMergePrice,\\n            roboLevelupPriceOG\\n        );\\n    }\\n\\n    function _mintRandomTotalGas(uint256 amount, bool staking) private view returns(uint256) {\\n        return randomsGas.mintBase + amount*randomsGas.mintPerToken + (staking ? (amount-1)*randomsGas.mintPerTokenStaked : 0);\\n    }\\n\\n    function mintRandomGas(uint256 amount, bool staking) public view returns(uint256) {\\n        return currentBaseFee * _mintRandomTotalGas(amount, staking);\\n    }\\n\\n    function _mergeRandomTotalGas() private view returns(uint256) {\\n        return randomsGas.mergeBase;\\n    }\\n\\n    function mergeRandomGas() public view returns(uint256) {\\n        return currentBaseFee * _mergeRandomTotalGas();\\n    }\\n\\n    function _updateAndGetBaseFee() private returns(uint256) {\\n        if (block.timestamp - baseFeeUpdatedAt > baseFeeRefreshTime) {\\n            previousBaseFee = currentBaseFee;\\n            currentBaseFee = block.basefee;\\n            baseFeeUpdatedAt = block.timestamp;\\n        }\\n\\n        if (previousBaseFee < currentBaseFee) return previousBaseFee;\\n        return currentBaseFee;\\n    } \\n\\n    function _getNextRandom(uint256 maxNumber, uint256 entropy, uint256 bits) private pure returns (uint256, uint256) {\\n        uint256 maxB = (uint256(1)<<bits);\\n        if (entropy < maxB) entropy = uint256(keccak256(abi.encode(entropy)));\\n        uint256 rnd = (entropy & (maxB - 1)) % maxNumber;\\n        return (rnd, entropy >> bits);\\n    }\\n\\n    function _getNextRandomProbability(uint256 entropy) private pure returns (uint256, uint256) {\\n        if (entropy < 1048576) entropy = uint256(keccak256(abi.encode(entropy)));\\n        return(entropy & 1023, entropy >> 10);\\n    }\\n\\n    function requestRandoms() internal returns (uint256) {\\n        emit RequestRandoms(nextRandomRequestId, nextRandomRequestId);\\n        nextRandomRequestId++;\\n        return nextRandomRequestId - 1;\\n    }\\n\\n    function _receiveRandoms(uint256 requestId, uint256 entropy) private {\\n        emit ReceiveRandoms(requestId, entropy);\\n\\n        RandomRequest storage request = randomRequests[requestId];\\n\\n        if(!request.active) return;\\n\\n        request.active = false;\\n\\n        if (request.requestType == RandomRequestType.MINT) {\\n            receiveMintRandoms(request.user, requestId, entropy);\\n        } else if (request.requestType == RandomRequestType.MERGE) {\\n            receiveMergeRandoms(requestId, entropy);\\n        }\\n    }\\n\\n    function receiveRandoms(uint256 requestId, uint256 entropy) external { \\n        require(msg.sender == randomProvider, \\\"E60\\\");\\n        _receiveRandoms(requestId, entropy);\\n    }\\n\\n    function receiveMultipleRandoms(uint256[] calldata requestIds, uint256[] calldata entropies) external {\\n        require(msg.sender == randomProvider, \\\"E60\\\");\\n\\n        uint256 length = requestIds.length;\\n        for(uint256 i=0; i<length; i++) {\\n            _receiveRandoms(requestIds[i], entropies[i]);\\n        }\\n\\n        uint256 randomTxFeeAmount = totalRandomTxFee - totalRandomTxFeeWithdrawn;\\n        if (randomTxFeeAmount > 0.3 ether) {\\n            totalRandomTxFeeWithdrawn += randomTxFeeAmount;\\n            payable(randomProvider).transfer(randomTxFeeAmount);\\n        }\\n    }\\n\\n    function withdrawRandomTxFee(uint256 amount) external {\\n        require(msg.sender == randomProvider, \\\"E99\\\");\\n        require(totalRandomTxFee - totalRandomTxFeeWithdrawn <= amount, \\\"E98\\\");\\n        totalRandomTxFeeWithdrawn += amount;\\n        payable(randomProvider).transfer(amount);\\n    } \\n\\n    function _ogMint(address toAddress, uint256 amount) private {\\n\\n        uint256 toMint = amount;\\n\\n        ogToken.mint(toAddress, toMint);\\n    }\\n\\n    function _mintMekaOoga(address toAddress) private returns (uint256) {\\n\\n        uint256 tokenId = nextTokenId;\\n        nextTokenId++;\\n\\n        if (nextTokenId >= mintOGpriceSteps[currentOgPriceStep]) {\\n            currentOgPriceStep++;\\n        }\\n\\n        erc721Contract.mint(toAddress, tokenId);\\n\\n        oogaAttributes[tokenId].oogaType = OogaType.MEKAAPE;\\n        oogaAttributes[tokenId].level = 0;\\n        \\n        return tokenId;\\n    }\\n\\n    function _mintMultipleRoboOoga(address toAddress, uint256 amount) private returns(uint256) {\\n\\n        uint256 startFromTokenId = nextTokenId;\\n\\n        nextTokenId += amount;\\n\\n        if (nextTokenId >= mintOGpriceSteps[currentOgPriceStep]) {\\n            currentOgPriceStep++;\\n        }\\n\\n        erc721Contract.mintMultiple(toAddress, startFromTokenId, amount);\\n\\n        for(uint256 i=0; i<amount; i++) {\\n            oogaAttributes[startFromTokenId + i].level = 1;\\n        }\\n\\n        emit MintMultipleRobo(toAddress, startFromTokenId, amount);\\n\\n        return startFromTokenId;\\n    }  \\n\\n    function requestMintRoboOogas(address toAddress, uint256 amount, bool toStake, uint256 attackChance) private { \\n        \\n        uint256 randomsAmount;\\n        if (attackChance > 0) {\\n            randomsAmount = 2*amount;\\n        } else {\\n            randomsAmount = amount;\\n        }\\n\\n        uint256 requestId = requestRandoms();\\n        randomRequests[requestId] = RandomRequest(RandomRequestType.MINT, toAddress, true);\\n        mintRequests[requestId] = MintRequest(uint32(nextTokenId), uint8(amount), uint8(attackChance), toStake);\\n\\n        _mintMultipleRoboOoga(address(this), amount);\\n    }\\n\\n    function getTotalMegaTributePointsStaked() private view returns(uint256) {\\n        uint256 totalTributePoints = 0;\\n        for(uint256 i=1; i<=3; i++) {\\n            totalTributePoints += megaTributePoints[i] * megaStaked[i].length;\\n        }\\n        return totalTributePoints;\\n    }\\n\\n    function _getStakedMega(uint256 rndTributePoint) private view returns(uint256) {\\n        uint256 totalSum = 0;\\n        for(uint256 i=1; i<=3; i++) {\\n            uint256 levelSum = megaTributePoints[i] * megaStaked[i].length;\\n\\n            if (rndTributePoint < totalSum + levelSum) {\\n                uint256 pickedIndex = (rndTributePoint - totalSum) / megaTributePoints[i];\\n                return megaStaked[i][pickedIndex];\\n            }\\n\\n            totalSum += levelSum;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function attackOogaMint(uint256 tokenId, uint256 totalTributePointStaked, uint256 entropy) private returns (uint256) {\\n        \\n        uint256 rndTributePoint; \\n\\n        (rndTributePoint, entropy) = _getNextRandom(totalTributePointStaked, entropy, 25);\\n        \\n        uint256 payTributeOoga = _getStakedMega(rndTributePoint);\\n\\n        erc721Contract.transferFrom(address(this), oogaAttributes[payTributeOoga].stakedOwner, tokenId);\\n        emit OogaAttacked(tokenId, oogaAttributes[payTributeOoga].stakedOwner, payTributeOoga);\\n        \\n        return entropy;\\n    }\\n\\n    function receiveMintRandoms(address user, uint256 requestId, uint256 entropy) private { \\n\\n        uint256 rnd;\\n\\n        MintRequest storage mintReq = mintRequests[requestId];\\n\\n        for(uint256 tokenId = mintReq.startFromId; tokenId < mintReq.startFromId + mintReq.amount; tokenId++) {\\n\\n            OogaAttributes storage ooga = oogaAttributes[tokenId];\\n\\n            (rnd, entropy) = _getNextRandomProbability(entropy);\\n\\n            if (rnd < randomMekaProbability) {\\n                ooga.oogaType = OogaType.MEKAAPE;\\n                ooga.level = 0;\\n                emit MekaConvert(tokenId);\\n            } else {\\n                emit RoboMint(user, tokenId);\\n            }\\n\\n            bool attacked = false;\\n\\n            if (mintReq.attackChance > 0) {\\n                (rnd, entropy) = _getNextRandomProbability(entropy);\\n                if (rnd < mintReq.attackChance) {\\n                    uint256 totalTributePointStaked = getTotalMegaTributePointsStaked();\\n                    if (totalTributePointStaked > 0) {\\n                        entropy = attackOogaMint(tokenId, totalTributePointStaked, entropy);\\n                        attacked = true;\\n                    }\\n                }\\n            }\\n\\n            if (!attacked) {\\n                if (mintReq.toStake) {\\n                    _stakeToken(tokenId, user, true);\\n                } else {\\n                    erc721Contract.transferFrom(address(this), user, tokenId);\\n                }\\n            }\\n        }\\n    }   \\n\\n    function isBabyOogaEvolved(uint256 oogaId) public view returns(bool) {\\n        return oogaEvolved[oogaId];\\n    }\\n\\n    function _evolveBabyOoga(uint256 oogaId) private {\\n\\n        require(oogaId >= 2002001, \\\"E11\\\");\\n        require(oogaEvolved[oogaId] == false, \\\"E12\\\");\\n        require(oogaVerse.ownerOf(oogaId) == msg.sender, \\\"E13\\\");\\n\\n        oogaEvolved[oogaId] = true;\\n\\n        uint256 newTokenId = _mintMekaOoga(msg.sender);\\n\\n        emit BabyOogaEvolve(msg.sender, oogaId, newTokenId); \\n    }\\n\\n    function evolveBabyOogas(uint256[] calldata tokenIds) external {\\n        require(!mintSale && gameActive, \\\"E01\\\");\\n\\n        for(uint256 i=0; i<tokenIds.length; i++) {\\n            _evolveBabyOoga(tokenIds[i]);\\n        }\\n    }\\n\\n    function mintRewardTokens(address toAddress, uint256 amount) external onlyOwner {\\n        require(amount + totalMintedRewardTokens <= maxMintedRewardTokens, \\\"E97\\\");\\n        totalMintedRewardTokens += amount;\\n\\n        requestMintRoboOogas(toAddress, amount, false, 0);\\n    }\\n\\n    function mintWithOG(uint256 amount, bool toStake) external payable {\\n        require(!mintSale && gameActive, \\\"E01\\\");\\n        require(totalMintedTokens() + amount <= maxTokenSupply, \\\"E31\\\");\\n\\n        uint256 gasFee = _updateAndGetBaseFee();\\n        require(msg.value >= _mintRandomTotalGas(amount, toStake) * gasFee, \\\"E33\\\");\\n        totalRandomTxFee += msg.value;\\n\\n        uint256 price;\\n        if (toStake) {\\n            price = prices.mintOGstakePrice[currentOgPriceStep];\\n        } else {\\n            price = prices.mintOGprice[currentOgPriceStep];\\n        }\\n        \\n        ogToken.transferFrom(msg.sender, address(this), price * amount);\\n\\n        requestMintRoboOogas(msg.sender, amount, toStake, ogMintAttackChance);\\n    }\\n\\n    function mintWithDMT(uint256 amount) external payable {\\n        require(!mintSale && gameActive, \\\"E01\\\");\\n        require(totalMintedTokens() + amount <= maxTokenSupply, \\\"E32\\\");\\n        require(tokensMintedWithDMT + amount <= maxMintWithDMT, \\\"E51\\\");\\n\\n        uint256 gasFee = _updateAndGetBaseFee();\\n        require(msg.value >= _mintRandomTotalGas(amount, true) * gasFee, \\\"E34\\\");\\n        totalRandomTxFee += msg.value;\\n\\n        dmtToken.transferFrom(msg.sender, address(this), prices.mintDMTstakePrice * amount);\\n\\n        requestMintRoboOogas(msg.sender, amount, true, dmtMintAttackChance);\\n\\n        tokensMintedWithDMT += amount;\\n    }\\n\\n    function _addMekaToStakingRewards(uint256 tokenId) private {\\n        OogaAttributes storage ooga = oogaAttributes[tokenId];\\n\\n        mekaTotalPointsStaked += mekaLevelSharePoints[ooga.level];\\n        ooga.lastRewardPerPoint = mekaTotalRewardPerPoint;\\n\\n        if (ooga.level > 0) {\\n            ooga.stakedMegaIndex = megaStaked[ooga.level].length;\\n            megaStaked[ooga.level].push(tokenId);\\n        }\\n    }\\n\\n    function _stakeToken(uint256 tokenId, address stakedOwner, bool minting) private {\\n        OogaAttributes storage ooga = oogaAttributes[tokenId];\\n\\n        if (!minting) {\\n            erc721Contract.transferFrom(stakedOwner, address(this), tokenId);\\n        }\\n\\n        ooga.staked = true;\\n        ooga.stakedOwner = stakedOwner;\\n        ooga.lastClaimTimestamp = block.timestamp;\\n        ooga.savedReward = 0;\\n\\n        if (ooga.oogaType == OogaType.MEKAAPE) {\\n            _addMekaToStakingRewards(tokenId);\\n        }\\n\\n        emit StakeOoga(tokenId, stakedOwner);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) external {\\n        require(gameActive, \\\"E01\\\");\\n\\n        for(uint256 i=0; i<tokenIds.length; i++) {\\n            require(erc721Contract.ownerOf(tokenIds[i]) == msg.sender, \\\"E41\\\");\\n            _stakeToken(tokenIds[i], msg.sender, false);\\n        }\\n    }\\n\\n    function _removeMekaFromStakingRewards(uint256 tokenId) private {\\n        OogaAttributes storage ooga = oogaAttributes[tokenId];\\n\\n        mekaTotalPointsStaked -= mekaLevelSharePoints[ooga.level];\\n\\n        if (ooga.level > 0) {\\n            uint256 lastOogaId = megaStaked[ooga.level][ megaStaked[ooga.level].length - 1 ];\\n            megaStaked[ooga.level][ooga.stakedMegaIndex] = lastOogaId;\\n            megaStaked[ooga.level].pop();\\n            oogaAttributes[lastOogaId].stakedMegaIndex = ooga.stakedMegaIndex;\\n        }\\n\\n        ooga.stakedMegaIndex = 0;\\n    }\\n\\n    function _unstakeToken(uint256 tokenId) private {\\n        OogaAttributes storage ooga = oogaAttributes[tokenId];\\n\\n        address oogaOwner = ooga.stakedOwner;\\n\\n        ooga.staked = false;\\n        ooga.stakedOwner = address(0x0);\\n\\n        if (ooga.oogaType == OogaType.MEKAAPE) {\\n            _removeMekaFromStakingRewards(tokenId);\\n        } else if (ooga.oogaType == OogaType.ROBOOOGA) {\\n            usedUnstakeCredits[oogaOwner] += 1;\\n        }\\n\\n        erc721Contract.transferFrom(address(this), oogaOwner, tokenId);\\n\\n        emit UnstakeOoga(tokenId, oogaOwner);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) external {\\n        require(gameActive, \\\"E01\\\");\\n\\n        require(tokenIds.length <= getUnstakeCreditsForAddress(msg.sender), \\\"E161\\\");\\n\\n        _claim(tokenIds, true);\\n    }\\n\\n    function burnOogaForUnstakeCredits(uint256[] calldata tokenIds) external {\\n        for(uint256 i=0; i<tokenIds.length; i++) {\\n            OogaAttributes storage ooga = oogaAttributes[tokenIds[i]];\\n\\n            _burnRoboOoga(tokenIds[i]);\\n\\n            unstakeCredits[msg.sender] += unstakeCreditsForRoboLevel[ooga.level];\\n\\n            emit AddUnstakeCredits(msg.sender, tokenIds[i], unstakeCreditsForRoboLevel[ooga.level]);\\n        }\\n    }\\n\\n    function getUnstakeCreditsForAddress(address user) view public returns(uint256) {\\n        return unstakeCreditsStart + unstakeCredits[user] - usedUnstakeCredits[user];\\n    }\\n\\n    function _addMekaRewards(uint256 amount) private {\\n        _ogMint(address(this), amount);\\n        if(mekaTotalPointsStaked > 0){\\n            mekaTotalRewardPerPoint += amount / mekaTotalPointsStaked;\\n        }\\n    }\\n\\n    function _claim(uint256[] calldata tokenIds, bool unstaking) private { \\n        uint256 totalRoboReward = 0;\\n        uint256 totalMekaReward = 0;\\n        uint256 totalTax = 0;\\n\\n        nextClaimWithoutRandomId++;\\n        uint256 claimId = nextClaimWithoutRandomId;\\n\\n        for(uint256 i=0; i<tokenIds.length; i++) {\\n\\n            OogaAttributes storage ooga = oogaAttributes[tokenIds[i]];\\n            require(ooga.staked == true && ooga.stakedOwner == msg.sender, \\\"E91\\\");\\n            require(inCrew[tokenIds[i]] == 0, \\\"E912\\\");\\n\\n            uint256 reward = claimAvailableAmount(tokenIds[i]);\\n\\n            if (ooga.oogaType == OogaType.ROBOOOGA) {\\n                uint256 taxable = (reward * claimTax) / 100;\\n                totalRoboReward += reward - taxable;\\n                totalTax += taxable;\\n\\n                ooga.lastClaimTimestamp = block.timestamp;\\n\\n                emit ClaimReward(claimId, msg.sender, tokenIds[i], reward - taxable);\\n\\n            } else {\\n                totalMekaReward += reward;\\n                \\n                ooga.lastRewardPerPoint = mekaTotalRewardPerPoint;\\n\\n                emit ClaimReward(claimId, msg.sender, tokenIds[i], reward);\\n            }\\n\\n            if (unstaking) {\\n                _unstakeToken(tokenIds[i]);\\n            }\\n\\n            ooga.savedReward = 0;\\n        }\\n\\n        _ogMint(msg.sender, totalMekaReward+totalRoboReward);\\n\\n        if (totalTax > 0) {\\n            _addMekaRewards(totalTax);\\n            emit TaxReward(claimId, totalTax);\\n        }\\n    }\\n\\n    function claimReward(uint256[] calldata tokenIds) external {\\n        require(gameActive, \\\"E01\\\");\\n        _claim(tokenIds, false);\\n    }\\n\\n    function claimAvailableAmount(uint256 tokenId) private view returns(uint256) {\\n        OogaAttributes memory ooga = oogaAttributes[tokenId];\\n\\n        if (ooga.oogaType == OogaType.ROBOOOGA) {\\n\\n            uint256 roboReward = ooga.savedReward;\\n\\n            uint256 lastClaim = oogaAttributes[tokenId].lastClaimTimestamp;\\n\\n            if (lastClaim < allMintedTimestamp) {\\n                roboReward += (allMintedTimestamp - lastClaim) * roboOogaRewardPerSec[ooga.level];\\n                lastClaim = allMintedTimestamp;\\n            }\\n\\n            if (lastClaim < midStageOverTimestamp) {\\n                roboReward += (midStageOverTimestamp - lastClaim) * roboOogaRewardPerSec_midStage[ooga.level];\\n                lastClaim = midStageOverTimestamp;\\n            }\\n\\n            uint256 passedTime = block.timestamp - lastClaim;\\n            uint256 roboOogaRewardIncreasePerSecond = (roboOogaRewardEnd - roboOogaRewardStart) / roboOogaRewardIncreaseDuration;\\n\\n            if (passedTime > roboOogaRewardIncreaseDuration) {\\n\\n                roboReward += (roboOogaRewardIncreaseDuration * roboOogaRewardIncreaseDuration * roboOogaRewardIncreasePerSecond) / 2;\\n                roboReward += roboOogaRewardIncreaseDuration * roboOogaRewardStart;\\n\\n                roboReward += (passedTime - roboOogaRewardIncreaseDuration) * roboOogaRewardEnd;\\n\\n            } else {\\n                roboReward += (passedTime * passedTime * roboOogaRewardIncreasePerSecond) / 2;\\n                roboReward += passedTime * roboOogaRewardStart;\\n            }\\n\\n            return roboReward;\\n        } else {\\n            \\n            return (mekaTotalRewardPerPoint - ooga.lastRewardPerPoint) * mekaLevelSharePoints[ooga.level];\\n        }\\n    }\\n\\n    function claimAvailableAmountMultipleTokens(uint256[] calldata tokenIds) public view returns(uint256[] memory result) {\\n        result = new uint256[](tokenIds.length);\\n        for(uint256 i=0; i<tokenIds.length; i++) {\\n            result[i] = claimAvailableAmount(tokenIds[i]);\\n        }\\n\\n        return result;\\n    }\\n\\n    function _burnRoboOoga(uint256 burnTokenId) private {\\n        OogaAttributes storage burnOoga = oogaAttributes[burnTokenId];\\n        require(erc721Contract.ownerOf(burnTokenId) == msg.sender || burnOoga.stakedOwner == msg.sender , \\\"E722\\\");\\n        require(burnOoga.oogaType == OogaType.ROBOOOGA, \\\"E712\\\");\\n\\n        if (inCrew[burnTokenId] > 0) {\\n            _updateCrewReward(inCrew[burnTokenId]);\\n            _removeFromCrewOneToken(inCrew[burnTokenId], burnTokenId);\\n        } \\n        \\n        if (burnOoga.staked) {\\n            _ogMint(msg.sender, claimAvailableAmount(burnTokenId));\\n        }\\n\\n        burnOoga.staked = false;\\n        burnOoga.stakedOwner = address(0x0);\\n        erc721Contract.burn(burnTokenId);\\n    }\\n\\n    function _levelUpRoboOoga(uint256 tokenId, bool payWithDMT, uint256 burnTokenId) private {\\n        require(!mintSale && gameActive, \\\"E01\\\");\\n\\n        OogaAttributes storage ooga = oogaAttributes[tokenId];\\n        require(erc721Contract.ownerOf(tokenId) == msg.sender || ooga.stakedOwner == msg.sender , \\\"E72\\\");\\n        require(ooga.oogaType == OogaType.ROBOOOGA && ooga.level < 6, \\\"E71\\\");\\n\\n        require(tokenId != burnTokenId, \\\"E730\\\");\\n\\n        if (inCrew[tokenId] > 0) {\\n\\n            _updateCrewReward(inCrew[tokenId]);\\n            crews[inCrew[tokenId]].totalRewardPerSec += (roboOogaRewardPerSecInCrew[ooga.level + 1] - roboOogaRewardPerSecInCrew[ooga.level]);\\n\\n        } else if (ooga.staked) {\\n            ooga.savedReward = claimAvailableAmount(tokenId);\\n            ooga.lastClaimTimestamp = block.timestamp;\\n        }\\n\\n        if (payWithDMT) {\\n            dmtToken.transferFrom(msg.sender, address(this), prices.roboLevelupPrice[ooga.level]);\\n        } else {\\n            ogToken.transferFrom(msg.sender, address(this), roboLevelupPriceOG[ooga.level]);\\n\\n            _burnRoboOoga(burnTokenId);\\n        }\\n\\n        ooga.level++;\\n\\n        emit LevelUpRoboOoga(msg.sender, tokenId, ooga.level);\\n    }\\n\\n    function levelUpRoboOoga(uint256 tokenId, uint256 numberOfLevels) external {\\n        for(uint256 i=0; i<numberOfLevels; i++) {\\n            _levelUpRoboOoga(tokenId, true, 0);\\n        }\\n    }\\n\\n    function levelUpRoboOogaWithOG(uint256 tokenId, uint256 numberOfLevels, uint256[] calldata burnTokenIds) external {\\n        require(burnTokenIds.length == numberOfLevels, \\\"E151\\\");\\n        for(uint256 i=0; i<numberOfLevels; i++) {\\n            _levelUpRoboOoga(tokenId, false, burnTokenIds[i]);\\n        }\\n    }\\n\\n    function _getMegaLevel(uint256 rnd) private view returns(uint8) {\\n        for(uint8 i=0; i<3; i++) {\\n            if (rnd < megaLevelProbabilities[i]) return 1+i;\\n        }\\n        \\n        return 0;\\n    }\\n\\n    function receiveMergeRandoms(uint256 requestId, uint256 entropy) private { \\n        uint256 tokenId = mergeRequests[requestId];\\n\\n        OogaAttributes storage ooga =  oogaAttributes[tokenId];\\n\\n        uint256 rnd;\\n        (rnd, entropy) = _getNextRandomProbability(entropy);\\n        ooga.level = _getMegaLevel(rnd);\\n\\n        if (ooga.staked == true) {\\n            mekaTotalPointsStaked += mekaLevelSharePoints[ooga.level] - mekaLevelSharePoints[0];\\n            \\n            ooga.stakedMegaIndex = megaStaked[ooga.level].length;\\n            megaStaked[ooga.level].push(tokenId);\\n        }\\n\\n        emit MegaMerged(tokenId, ooga.level);\\n    }\\n\\n    function requestMergeMeka(uint256 tokenId) private {\\n        uint256 requestId = requestRandoms();\\n        randomRequests[requestId] = RandomRequest(RandomRequestType.MERGE, msg.sender, true);\\n        mergeRequests[requestId] = tokenId;\\n    }\\n\\n    function mergeMekaApes(uint256 tokenIdSave, uint256 tokenIdBurn) external payable {\\n        require(!mintSale && gameActive, \\\"E01\\\");\\n        require(tokenIdSave != tokenIdBurn, \\\"E81\\\");\\n\\n        uint256 gasFee = _updateAndGetBaseFee();\\n        require(msg.value >= _mergeRandomTotalGas() * gasFee, \\\"E36\\\");\\n        totalRandomTxFee += msg.value;\\n\\n        OogaAttributes storage oogaSave = oogaAttributes[tokenIdSave];\\n        OogaAttributes storage oogaBurn = oogaAttributes[tokenIdBurn];\\n\\n        require(erc721Contract.ownerOf(tokenIdSave) == msg.sender || (oogaSave.staked && oogaSave.stakedOwner == msg.sender), \\\"E84\\\");\\n        require(erc721Contract.ownerOf(tokenIdBurn) == msg.sender || (oogaBurn.staked && oogaBurn.stakedOwner == msg.sender), \\\"E85\\\");\\n\\n        require(inCrew[tokenIdSave] == 0 && inCrew[tokenIdBurn] == 0, \\\"E811\\\");\\n\\n        require(oogaSave.oogaType == OogaType.MEKAAPE && oogaBurn.oogaType == OogaType.MEKAAPE, \\\"E82\\\");\\n        require(oogaSave.level == 0 && oogaBurn.level == 0, \\\"E83\\\");\\n\\n        uint256 reward = 0;\\n        if (oogaSave.staked == true) {\\n            uint256 rewardAvailable = claimAvailableAmount(tokenIdSave);\\n            reward += rewardAvailable;\\n            oogaSave.lastRewardPerPoint = mekaTotalRewardPerPoint;\\n            emit ClaimReward(nextRandomRequestId, msg.sender, tokenIdSave, rewardAvailable);\\n        }\\n\\n        if (oogaBurn.staked == true) {\\n            uint256 rewardAvailable = claimAvailableAmount(tokenIdBurn);\\n            reward += rewardAvailable;\\n            oogaBurn.lastRewardPerPoint = mekaTotalRewardPerPoint;\\n            emit ClaimReward(nextRandomRequestId, msg.sender, tokenIdBurn, rewardAvailable);\\n            _unstakeToken(tokenIdBurn);\\n        }\\n\\n        if (prices.mekaMergePrice > reward) {\\n            ogToken.transferFrom(msg.sender, address(this), prices.mekaMergePrice - reward);\\n        } else {\\n            _ogMint(msg.sender, reward - prices.mekaMergePrice);\\n        }\\n\\n        requestMergeMeka(tokenIdSave);\\n\\n        erc721Contract.burn(tokenIdBurn);\\n\\n        emit MergeMekaApes(msg.sender, tokenIdSave, tokenIdBurn);\\n    }\\n\\n    function _updateCrewReward(uint256 crewId) private {\\n        crews[crewId].savedReward = claimAvailableAmountCrew(crewId);\\n        crews[crewId].lastClaimTimestamp = block.timestamp;\\n    }\\n\\n    function claimAvailableAmountCrew(uint256 crewId) public view returns(uint256) {\\n        Crew storage crew = crews[crewId];\\n\\n        OogaAttributes storage mekaLeader = oogaAttributes[crew.oogas[0]];\\n\\n        uint256 rewardPerSec = (crew.totalRewardPerSec * mekaCrewRewardMultiplier[mekaLeader.level]) / 100;\\n\\n        return crew.savedReward + (block.timestamp - crew.lastClaimTimestamp) * rewardPerSec;\\n    }\\n\\n    function _removeFromCrewOneToken(uint256 crewId, uint256 tokenId) private {\\n        crews[crewId].totalRewardPerSec -= roboOogaRewardPerSecInCrew[oogaAttributes[tokenId].level];\\n        inCrew[tokenId] = 0;\\n\\n        oogaAttributes[tokenId].lastClaimTimestamp = block.timestamp;\\n\\n        crews[crewId].oogaCount -= 1;\\n\\n        emit RemoveFromCrew(crewId, tokenId);\\n    }\\n\\n    function _delegateToNextContract() private {\\n        address implementation = gameContract2;\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    fallback() external payable virtual {\\n        _delegateToNextContract();\\n    }\\n\\n    function withdrawERC20(IERC20 token, address toAddress, uint256 amount) external onlyOwner {\\n        token.transfer(toAddress, amount);\\n    }\\n\\n    function withdrawERC721(IERC721 token, address toAddress, uint256 tokenId) external onlyOwner {\\n        token.transferFrom(address(this), toAddress, tokenId);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/MekaApesERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract MekaApesERC721 is ERC721Upgradeable, OwnableUpgradeable {\\n\\n    address public constant BURN_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\\n\\n    address public gameContract;\\n\\n    string public baseURI;\\n\\n    string public _contractURI;\\n\\n    function initialize(\\n        string memory name_, \\n        string memory symbol_, \\n        string memory baseURI_,\\n        string memory contractURI_\\n    ) public initializer {\\n\\n        __ERC721_init(name_, symbol_);\\n        __Ownable_init();\\n\\n       \\n        baseURI = baseURI_;\\n        _contractURI = contractURI_;\\n    }\\n\\n    function setGameContract(address gameContract_) external onlyOwner {\\n         gameContract = gameContract_;\\n    }   \\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    function setContractURI(string memory contractURI_) external onlyOwner {\\n        _contractURI = contractURI_;\\n    }\\n\\n    function mint(address account, uint256 tokenId) external {\\n        require(msg.sender == gameContract, \\\"E1\\\");\\n        _mint(account, tokenId);\\n    }\\n\\n    function mintMultiple(address account, uint256 startFromTokenId, uint256 amount) external {\\n        require(msg.sender == gameContract, \\\"E1\\\");\\n        for(uint256 i=0; i<amount; i++) {\\n            _mint(account, startFromTokenId + i);\\n        }\\n    }\\n\\n    function burn(uint256 tokenId) external {\\n        require(msg.sender == gameContract, \\\"E2\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n    \\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"E3\\\");\\n\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, uintToStr(tokenId), \\\".json\\\")) : \\\"\\\";\\n    }\\n\\n    function changeBaseURI(string memory baseURI_) external onlyOwner {\\n        baseURI = baseURI_;\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual override returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender) || spender == gameContract);\\n    }\\n\\n    function uintToStr(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\"\r\n    },\r\n    \"contracts/OogearERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract OogearERC20 is ERC20, Ownable {\\n\\n    address public gameContract;\\n\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) Ownable() {\\n\\n    }\\n\\n    function setGameContract(address gameContract_) external onlyOwner {\\n         gameContract = gameContract_;\\n    }   \\n\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == gameContract, \\\"E1\\\");\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        require(msg.sender == gameContract, \\\"E2\\\");\\n        _burn(account, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount || msg.sender == gameContract, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/IDMT_ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDMT_ERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 97\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crewId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"}],\"name\":\"AddToCrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnOogaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedCredits\",\"type\":\"uint256\"}],\"name\":\"AddUnstakeCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AttackReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oogaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"BabyOogaEvolve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ChangeStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crewId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimCrewReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"LeaderbordRewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oogaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"LevelUpRoboOoga\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crewId\",\"type\":\"uint256\"}],\"name\":\"MakeCrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"megaLevel\",\"type\":\"uint256\"}],\"name\":\"MegaMerged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MekaConvert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oogaIdSave\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oogaIdBurn\",\"type\":\"uint256\"}],\"name\":\"MergeMekaApes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startFromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintMultipleRobo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oogaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tributeAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tributeOogaId\",\"type\":\"uint256\"}],\"name\":\"OogaAttacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"ReceiveRandoms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crewId\",\"type\":\"uint256\"}],\"name\":\"RemoveCrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crewId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"}],\"name\":\"RemoveFromCrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestSeed\",\"type\":\"uint256\"}],\"name\":\"RequestRandoms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RoboMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oogaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"StakeOoga\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTax\",\"type\":\"uint256\"}],\"name\":\"TaxReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oogaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnstakeOoga\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ATTACK_CHANCE_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addedOgForRewardsAtEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allMintedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokensMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeRefreshTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnOogaForUnstakeCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseFeeRefreshTime_\",\"type\":\"uint256\"}],\"name\":\"changeBaseFeeRefreshTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameContract2_\",\"type\":\"address\"}],\"name\":\"changeContract2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"gameActive_\",\"type\":\"bool\"}],\"name\":\"changeGameActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"megaLevelProbabilities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mekaLevelSharePoints_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"megaTributePoints_\",\"type\":\"uint256[]\"}],\"name\":\"changeMekaParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"mintOGpriceSteps_\",\"type\":\"uint256[]\"}],\"name\":\"changeMintOGPriceSteps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintStakePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"mintOGprice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mintOGstakePrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"mintDMTstakePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"roboLevelupPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"mekaMergePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Prices\",\"name\":\"prices_\",\"type\":\"tuple\"}],\"name\":\"changePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerTokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeBase\",\"type\":\"uint256\"}],\"internalType\":\"struct RandomsGas\",\"name\":\"randomsGas_\",\"type\":\"tuple\"}],\"name\":\"changeRandomsGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"roboOogaRewardPerSec_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"roboOogaMinimalRewardToUnstake_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"roboOogaRewardAttackProbabilities_\",\"type\":\"uint256[]\"}],\"name\":\"changeRoboParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintWithDMT_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintSaleAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOgSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedOgForRewardsAtEnd_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethMintAttackChance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dmtMintAttackChance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ogMintAttackChance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomMekaProbability_\",\"type\":\"uint256\"}],\"name\":\"changeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crewId\",\"type\":\"uint256\"}],\"name\":\"claimAvailableAmountCrew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimAvailableAmountMultipleTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"result\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMekaReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crewClaimPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crews\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oogaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOgPriceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmtMintAttackChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmtToken\",\"outputs\":[{\"internalType\":\"contract IDMT_ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Contract\",\"outputs\":[{\"internalType\":\"contract MekaApesERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethMintAttackChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"evolveBabyOogas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameContract2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintStakePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintOGprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintOGstakePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintDMTstakePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"roboLevelupPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"mekaMergePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"roboLevelupPriceOG\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PricesGetter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnstakeCreditsForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inCrew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initV3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initV4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initV5\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameContract2_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roboOogaRewardStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roboOogaRewardEnd_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roboOogaRewardIncreaseDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMergePrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRandomMekaProbability_\",\"type\":\"uint256\"}],\"name\":\"initialize_stage15_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"roboLevelupPrice_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"roboLevelupPriceOG_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxCrewForMekaLevel_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"roboOogaRewardPerSecInCrew_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mekaCrewRewardMultiplier_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unstakeCreditsForRoboLevel_\",\"type\":\"uint256[]\"}],\"name\":\"initialize_stage15_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oogaId\",\"type\":\"uint256\"}],\"name\":\"isBabyOogaEvolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderboardRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfLevels\",\"type\":\"uint256\"}],\"name\":\"levelUpRoboOoga\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfLevels\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"burnTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"levelUpRoboOogaWithOG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxCrewForMekaLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintWithDMT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintedRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOgSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"megaLevelProbabilities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"megaStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"megaTributePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mekaCrewRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mekaLevelSharePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mekaTotalPointsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mekaTotalRewardPerPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdSave\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdBurn\",\"type\":\"uint256\"}],\"name\":\"mergeMekaApes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergeRandomGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mergeRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"midStageOverTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintOGpriceSteps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staking\",\"type\":\"bool\"}],\"name\":\"mintRandomGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintRequests\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"startFromId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attackChance\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"toStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSigWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintWithDMT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toStake\",\"type\":\"bool\"}],\"name\":\"mintWithOG\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextClaimWithoutRandomId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCrewId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRandomRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfMintedOogas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogMintAttackChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogRewardMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogToken\",\"outputs\":[{\"internalType\":\"contract OogearERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oogaAttributes\",\"outputs\":[{\"internalType\":\"enum OogaType\",\"name\":\"oogaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"stakedOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardPerPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedMegaIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oogaEvolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oogaVerse\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintStakePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintDMTstakePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mekaMergePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomMekaProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomRequests\",\"outputs\":[{\"internalType\":\"enum RandomRequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomsGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerTokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"entropies\",\"type\":\"uint256[]\"}],\"name\":\"receiveMultipleRandoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"receiveRandoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roboLevelupPriceOG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roboOogaMinimalRewardToUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roboOogaRewardAttackProbabilities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roboOogaRewardEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roboOogaRewardIncreaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roboOogaRewardPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roboOogaRewardPerSecInCrew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roboOogaRewardPerSec_midStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roboOogaRewardStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensMintedWithDMT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintedRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRandomTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRandomTxFeeWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unstakeCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeCreditsForRoboLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeCreditsStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedUnstakeCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRandomTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawerLastTotalMintETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawerPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MekaApesGame_1", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "97", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}