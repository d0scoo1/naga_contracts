{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MysteryDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/ICollectionV3.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/AggregatorInterface.sol\\\";\\n\\ncontract MysteryDrop is ReentrancyGuard {\\n    // Add the library methods\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using Counters for Counters.Counter;\\n\\n/*==================================================== Events ==========================================================*/\\n\\n    event CollectionsTiersSet(Tiers tier, address collection, uint256[] ids);\\n    event MysteryBoxDropped(\\n        Tiers tier,\\n        address collection,\\n        uint256 id,\\n        address user\\n    );\\n    event MysteryBoxCC(Tiers tier, address user, string purchaseId);\\n\\n/*==================================================== Modifiers ==========================================================*/\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(authorizedAddresses[msg.sender], \\\"Not Authorized\\\");\\n        _;\\n    }\\n\\n    modifier isStarted() {\\n        require(startTime <= block.timestamp && endTime > block.timestamp, \\\"Drop has not started yet!\\\");\\n        _;\\n    }\\n\\n   \\n\\n/*==================================================== State Variables ==========================================================*/\\n\\n    enum Tiers {\\n        TierOne,\\n        TierTwo,\\n        TierThree\\n    }\\n\\n    // These will keep decks' indexes\\n    EnumerableSet.UintSet private firstDeckIndexes;\\n    EnumerableSet.UintSet private secondDeckIndexes;\\n    EnumerableSet.UintSet private thirdDeckIndexes;\\n\\n    //index counter\\n    Counters.Counter public firstDeckIndexCounter;\\n    Counters.Counter public secondDeckIndexCounter;\\n    Counters.Counter public thirdDeckIndexCounter;\\n\\n    bytes[] public firstDeck;\\n    bytes[] public secondDeck;\\n    bytes[] public thirdDeck;\\n\\n    // address of the admin\\n    address admin;\\n    //start/end time of the contract\\n    uint256 public startTime;\\n    uint256 public endTime;\\n    // Tier price infos\\n    mapping(Tiers => uint256) public tierPrices;\\n    // Collection card number infos\\n    mapping(address => uint256) private cardNumbers;\\n    mapping(address => bool) private authorizedAddresses;\\n    IERC20 ern;\\n    // ERN price feed contract\\n    AggregatorInterface ernOracleAddr;\\n\\n    //Deck Max Size\\n    uint32 public firstDeckLimit = 0;\\n    uint32 public secondDeckLimit = 0;\\n    uint32 public thirdDeckLimit = 0;\\n\\n/*==================================================== Constructor ==========================================================*/\\n\\n    constructor(IERC20 _ern, AggregatorInterface _ernOracle) {\\n        ern = _ern;\\n        ernOracleAddr = _ernOracle;\\n        admin = msg.sender;\\n        startTime = 0;\\n        endTime = 0;\\n    }\\n\\n/*==================================================== Functions ==========================================================*/\\n\\n/*==================================================== Read Functions ==========================================================*/\\n\\n    /*\\n     *Returns the current price of the ERN token\\n    */\\n    function getPrice() public view returns (uint256) {\\n        return uint256(ernOracleAddr.latestAnswer());\\n    }\\n\\n    /*\\n     *Returns the amount of the ERN token to transfer\\n    */\\n    function computeErnAmount(uint256 _subscriptionPrice, uint256 _ernPrice)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 result = (_subscriptionPrice * 10**18) / _ernPrice;\\n        return result;\\n    }\\n\\n    /*\\n     *Internal Returns the random card\\n    */\\n    function _getRandom(uint256 gamerange, uint256 seed)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.timestamp +\\n                            block.difficulty +\\n                            uint256(\\n                                keccak256(abi.encodePacked(block.coinbase))\\n                            ) +\\n                            seed\\n                    )\\n                )\\n            ) % gamerange;\\n    }\\n\\n    /*\\n     * Get the number of available boxes for a tier\\n     */\\n    function getAvailable(Tiers _tier) public view returns (uint256) {\\n        if (_tier == Tiers.TierOne) {\\n            return firstDeckIndexes.length();\\n        } else if (_tier == Tiers.TierTwo) {\\n            return secondDeckIndexes.length();\\n        } else if (_tier == Tiers.TierThree) {\\n            return thirdDeckIndexes.length();\\n        }\\n        return 0;\\n    }\\n\\n\\n/*==================================================== External Functions ==========================================================*/\\n\\n    /*\\n     *This function sets the collection with the cards by admin via internal call\\n    */\\n    function setCollection(\\n        Tiers _tier,\\n        address _collection,\\n        uint256[] calldata _ids\\n    ) external onlyAdmin {\\n        uint256 length = _ids.length;\\n        for (uint16 i = 0; i < length; ) {\\n            _setCollection(_tier, _collection, _ids[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit CollectionsTiersSet(_tier, _collection, _ids);\\n    }\\n\\n    /*\\n     *This function sets the collections with the cards by admin via internal call\\n    */\\n    function setCollectionsBatch(\\n        Tiers _tier,\\n        address[] calldata _collections,\\n        uint256[] calldata _ids\\n    ) external onlyAdmin {\\n        uint256 last;\\n        for (uint256 j = 0; j < _collections.length; j++) {\\n            for (\\n                uint256 i = last;\\n                i < last + cardNumbers[_collections[j]];\\n                i++\\n            ) {\\n                _setCollection(_tier, _collections[j], _ids[i]);\\n            }\\n            last += cardNumbers[_collections[j]];\\n        }\\n    }\\n\\n    /*\\n     *This function resets the decks by the admin\\n    */\\n    function resetTierDeck(Tiers _tier) external onlyAdmin {\\n        if (_tier == Tiers.TierOne) {\\n            firstDeck = new bytes[](0);\\n            firstDeckIndexCounter._value = 0;\\n            for (\\n                uint256 i = 0;\\n                i < firstDeckIndexes._inner._values.length;\\n                i++\\n            ) {\\n                firstDeckIndexes._inner._indexes[\\n                    firstDeckIndexes._inner._values[i]\\n                ] = 0;\\n            }\\n            firstDeckIndexes._inner._values = new bytes32[](0);\\n        } else if (_tier == Tiers.TierTwo) {\\n            secondDeck = new bytes[](0);\\n            secondDeckIndexCounter._value = 0;\\n            for (\\n                uint256 i = 0;\\n                i < secondDeckIndexes._inner._values.length;\\n                i++\\n            ) {\\n                secondDeckIndexes._inner._indexes[\\n                    secondDeckIndexes._inner._values[i]\\n                ] = 0;\\n            }\\n            secondDeckIndexes._inner._values = new bytes32[](0);\\n        } else if (_tier == Tiers.TierThree) {\\n            thirdDeck = new bytes[](0);\\n            thirdDeckIndexCounter._value = 0;\\n            for (\\n                uint256 i = 0;\\n                i < thirdDeckIndexes._inner._values.length;\\n                i++\\n            ) {\\n                thirdDeckIndexes._inner._indexes[\\n                    thirdDeckIndexes._inner._values[i]\\n                ] = 0;\\n            }\\n            thirdDeckIndexes._inner._values = new bytes32[](0);\\n        } else revert(\\\"wrong parameter!\\\");\\n    }\\n\\n    /*\\n     *This function sets the card prices per Tier by the admin\\n    */\\n    function tierPricesSet(Tiers[] memory _tiers, uint256[] memory _prices)\\n        external\\n        onlyAdmin\\n    {\\n        for (uint8 i = 0; i < _tiers.length; i++) {\\n            tierPrices[_tiers[i]] = _prices[i];\\n        }\\n    }\\n\\n    /*\\n     *This function sets the number of cards per collection by admin\\n    */\\n    function setCardNumbers(\\n        address[] calldata _collections,\\n        uint256[] calldata numberofIds\\n    ) external onlyAdmin {\\n        for (uint256 i = 0; i < _collections.length; i++) {\\n            cardNumbers[_collections[i]] = numberofIds[i];\\n        }\\n    }\\n    /*\\n     *This function sets the authorized address for Credit Card sell\\n    */\\n    function setAuthorizedAddr(address _addr) external onlyAdmin{\\n        authorizedAddresses[_addr] = true;\\n    }\\n\\n    /*\\n     *This function removes the authorized address for Credit Card sell\\n    */\\n    function removeAuthorizedAddr(address _addr) external onlyAdmin{\\n        authorizedAddresses[_addr] = false;\\n    }\\n    \\n\\n    /*\\n     *User can buy mysteryBox via this function with creditcard\\n    */\\n   function buyCreditMysteryBox(address _user, Tiers _tier, string calldata _purchaseId) external onlyAuthorized {\\n        _buy(_user, _tier);\\n        emit MysteryBoxCC(_tier, _user, _purchaseId);\\n    }\\n\\n\\n    /*\\n     *User can buy mysteryBox via this function with token payment\\n    */\\n    function buyMysteryBox(Tiers _tier) external isStarted nonReentrant {\\n        uint256 _ernAmount = _buy(msg.sender, _tier);\\n        ern.transferFrom(msg.sender, address(this), _ernAmount);\\n    }\\n\\n    /*\\n     *Admin can start the contract via this function\\n    */\\n    function setTimestamps(uint256 _start, uint256 _end) external onlyAdmin {\\n        startTime = _start;\\n        endTime = _end;\\n    }\\n\\n    /*\\n     *Admin can withdraw earning with given amount\\n    */\\n    function withdrawFundsPartially(uint256 _amount, address _to)\\n        external\\n        onlyAdmin\\n    {\\n        require(\\n            ern.balanceOf(address(this)) >= _amount,\\n            \\\"Amount exceeded ern balance\\\"\\n        );\\n        ern.transfer(_to, _amount);\\n    }\\n\\n    /*\\n     *Admin can withdraw all of th earning\\n    */\\n    function withdrawAllFunds(address _to) external onlyAdmin {\\n        uint256 _balance = ern.balanceOf(address(this));\\n        ern.transfer(_to, _balance);\\n    }\\n\\n    /*\\n    * This functions set the decks maximum limit\\n    */ \\n    function setDeckMaxLimit(uint32 first, uint32 second, uint32 third) external onlyAdmin {\\n        firstDeckLimit = first;\\n        secondDeckLimit = second;\\n        thirdDeckLimit = third;\\n    }\\n\\n    /*\\n    * This functions set the admin of the contract\\n    */ \\n    function setAdmin(address _admin) external onlyAdmin {\\n       require(_admin != address(0), \\\"Not allowed to renounce admin\\\");\\n       admin = _admin;\\n    }\\n\\n\\n/*==================================================== Internal Functions ==========================================================*/\\n\\n    /*\\n     *This function picks random card and mints this random card to user\\n    */\\n    function _buy(address _user, Tiers _tier) internal returns (uint256) {\\n        uint256 _ernPrice = getPrice();\\n        uint256 ernAmount;\\n        uint256 random;\\n        uint256 index;\\n        address _contract;\\n        uint256 _id;\\n        if (_tier == Tiers.TierOne) {\\n            require(\\n                firstDeckIndexes.length() > 0,\\n                \\\"There is no card left in Tier 1!\\\"\\n            );\\n            ernAmount = computeErnAmount(tierPrices[Tiers.TierOne], _ernPrice);\\n            random = _getRandom(firstDeckIndexes.length(), _ernPrice);\\n            index = firstDeckIndexes.at(random);\\n            firstDeckIndexes.remove(index);\\n            (_contract, _id) = abi.decode(firstDeck[index], (address, uint256));\\n        } else if (_tier == Tiers.TierTwo) {\\n            require(\\n                secondDeckIndexes.length() > 0,\\n                \\\"There is no card left in Tier 2!\\\"\\n            );\\n            ernAmount = computeErnAmount(tierPrices[Tiers.TierTwo], _ernPrice);\\n            random = _getRandom(secondDeckIndexes.length(), _ernPrice);\\n            index = secondDeckIndexes.at(random);\\n            secondDeckIndexes.remove(index);\\n            (_contract, _id) = abi.decode(\\n                secondDeck[index],\\n                (address, uint256)\\n            );\\n        } else if (_tier == Tiers.TierThree) {\\n            require(\\n                thirdDeckIndexes.length() > 0,\\n                \\\"There is no card left in Tier 3!\\\"\\n            );\\n            ernAmount = computeErnAmount(\\n                tierPrices[Tiers.TierThree],\\n                _ernPrice\\n            );\\n            random = _getRandom(thirdDeckIndexes.length(), _ernPrice);\\n            index = thirdDeckIndexes.at(random);\\n            thirdDeckIndexes.remove(index);\\n            (_contract, _id) = abi.decode(thirdDeck[index], (address, uint256));\\n        } else {\\n            revert(\\\"Wrong Tier Parameter!\\\");\\n        }\\n\\n        ICollectionV3(_contract).mint(_user, _id);\\n        emit MysteryBoxDropped(_tier, _contract, _id, _user);\\n        return ernAmount;\\n    }\\n\\n    /*\\n     *This function sets the collection with the cards by admin\\n    */\\n    function _setCollection(\\n        Tiers _tier,\\n        address _collection,\\n        uint256 _id\\n    ) internal {\\n        if (_tier == Tiers.TierOne) {\\n            require(firstDeck.length <= firstDeckLimit, \\\"More than Tier Limit!\\\");\\n            firstDeck.push(abi.encode(_collection, _id));\\n            firstDeckIndexes.add(firstDeckIndexCounter.current());\\n            firstDeckIndexCounter.increment();\\n        } else if (_tier == Tiers.TierTwo) {\\n            require(secondDeck.length <= secondDeckLimit, \\\"More than Tier Limit!\\\");\\n            secondDeck.push(abi.encode(_collection, _id));\\n            secondDeckIndexes.add(secondDeckIndexCounter.current());\\n            secondDeckIndexCounter.increment();\\n        } else if (_tier == Tiers.TierThree) {\\n            require(thirdDeck.length <= thirdDeckLimit, \\\"More than Tier Limit!\\\");\\n            thirdDeck.push(abi.encode(_collection, _id));\\n            thirdDeckIndexes.add(thirdDeckIndexCounter.current());\\n            thirdDeckIndexCounter.increment();\\n        } else {\\n            revert(\\\"Wrong Tier Parameter!\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollectionV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Latest stable version of solidity\\npragma solidity 0.8.12;\\n\\n\\ninterface ICollectionV3 { \\n\\n    function initialize(   \\n        string memory uri,\\n        uint256 _total,\\n        uint256 _whitelistedStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _amount,\\n        uint256 _percent,\\n        address _admin,\\n        address _facAddress\\n    )external;\\n\\n    function __CollectionV3_init_unchained(\\n        string memory uri,\\n        uint256 _total,\\n        uint256 _whitelistedStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _amount,\\n        uint256 _percent,\\n        address _admin,\\n        address _facAddress\\n    ) external;\\n\\n    function addExternalAddresses(address _token,address _stone,address _treasure) external ;\\n\\n    function recoverToken(address _token) external;\\n  \\n    function changeOnlyWhitelisted(bool _status) external ;\\n\\n    function buy(address buyer, uint256 _id) external;\\n\\n    function mint(address to, uint256 _id) external;\\n\\n    function mintBatch( address to, uint256[] memory ids, uint256[] memory amount_) external ;\\n\\n    function addPayees(address[] memory payees_, uint256[] memory sharePerc_) external;\\n\\n    function _addPayee(address account, uint256 sharePerc_) external;\\n\\n    function release() external;\\n\\n    function getAmountPer(uint256 sharePerc) external view returns (uint256);\\n\\n    function calcPerc(uint256 _amount, uint256 _percent) external pure returns (uint256);\\n\\n    function calcTrasAndShare() external view returns (uint256, uint256);\\n\\n    function setStarTime(uint256 _starTime) external;  \\n\\n    function setEndTime(uint256 _endTime)external;\\n\\n    function setWhiteListUser(address _addr) external;\\n\\n    function setBatchWhiteListUser(address[] calldata _addr) external;\\n\\n    function setAmount(uint256 _amount) external;\\n\\n    function delShare(address account) external;\\n\\n    function totalReleased() external view returns (uint256);\\n\\n    function released(address account) external view returns (uint256);\\n\\n    function shares(address account) external view returns (uint256);\\n\\n    function allShares() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256 answer);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_ern\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_ernOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"CollectionsTiersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purchaseId\",\"type\":\"string\"}],\"name\":\"MysteryBoxCC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"MysteryBoxDropped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_purchaseId\",\"type\":\"string\"}],\"name\":\"buyCreditMysteryBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"buyMysteryBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ernPrice\",\"type\":\"uint256\"}],\"name\":\"computeErnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"firstDeck\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDeckIndexCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDeckLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"getAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAuthorizedAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"resetTierDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secondDeck\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondDeckIndexCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondDeckLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAuthorizedAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numberofIds\",\"type\":\"uint256[]\"}],\"name\":\"setCardNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCollectionsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"first\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"second\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"third\",\"type\":\"uint32\"}],\"name\":\"setDeckMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdDeck\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdDeckIndexCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdDeckLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MysteryDrop.Tiers\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tierPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MysteryDrop.Tiers[]\",\"name\":\"_tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"tierPricesSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFundsPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MysteryDrop", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bbc2ae13b23d715c30720f079fcd9b4a740935050000000000000000000000000a87e12689374a4ef49729582b474a1013ccebf8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}