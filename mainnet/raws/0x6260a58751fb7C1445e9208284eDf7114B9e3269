{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Facets/DexManagerFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Libraries/LibStorage.sol\\\";\\nimport \\\"../Libraries/LibDiamond.sol\\\";\\nimport { InvalidConfig } from \\\"../Errors/GenericErrors.sol\\\";\\n\\n/// @title Dex Manager Facet\\n/// @author LI.FI (https://li.fi)\\n/// @notice Facet contract for managing approved DEXs to be used in swaps.\\ncontract DexManagerFacet {\\n    /// Events ///\\n\\n    event DexAdded(address indexed dexAddress);\\n    event DexRemoved(address indexed dexAddress);\\n    event FunctionSignatureApprovalChanged(bytes32 indexed functionSignature, bool indexed approved);\\n\\n    /// Storage ///\\n\\n    LibStorage internal appStorage;\\n\\n    /// External Methods ///\\n\\n    /// @notice Register the address of a DEX contract to be approved for swapping.\\n    /// @param _dex The address of the DEX contract to be approved.\\n    function addDex(address _dex) external {\\n        LibDiamond.enforceIsContractOwner();\\n        _checkAddress(_dex);\\n\\n        mapping(address => bool) storage dexAllowlist = appStorage.dexAllowlist;\\n        if (dexAllowlist[_dex]) return;\\n\\n        dexAllowlist[_dex] = true;\\n        appStorage.dexs.push(_dex);\\n        emit DexAdded(_dex);\\n    }\\n\\n    /// @notice Batch register the addresss of DEX contracts to be approved for swapping.\\n    /// @param _dexs The addresses of the DEX contracts to be approved.\\n    function batchAddDex(address[] calldata _dexs) external {\\n        LibDiamond.enforceIsContractOwner();\\n        mapping(address => bool) storage dexAllowlist = appStorage.dexAllowlist;\\n        uint256 length = _dexs.length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _checkAddress(_dexs[i]);\\n            if (dexAllowlist[_dexs[i]]) continue;\\n            dexAllowlist[_dexs[i]] = true;\\n            appStorage.dexs.push(_dexs[i]);\\n            emit DexAdded(_dexs[i]);\\n        }\\n    }\\n\\n    /// @notice Unregister the address of a DEX contract approved for swapping.\\n    /// @param _dex The address of the DEX contract to be unregistered.\\n    function removeDex(address _dex) external {\\n        LibDiamond.enforceIsContractOwner();\\n        _checkAddress(_dex);\\n\\n        mapping(address => bool) storage dexAllowlist = appStorage.dexAllowlist;\\n        address[] storage storageDexes = appStorage.dexs;\\n\\n        if (!dexAllowlist[_dex]) {\\n            return;\\n        }\\n        dexAllowlist[_dex] = false;\\n\\n        uint256 length = storageDexes.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (storageDexes[i] == _dex) {\\n                _removeDex(i);\\n                return;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batch unregister the addresses of DEX contracts approved for swapping.\\n    /// @param _dexs The addresses of the DEX contracts to be unregistered.\\n    function batchRemoveDex(address[] calldata _dexs) external {\\n        LibDiamond.enforceIsContractOwner();\\n        mapping(address => bool) storage dexAllowlist = appStorage.dexAllowlist;\\n        address[] storage storageDexes = appStorage.dexs;\\n\\n        uint256 ilength = _dexs.length;\\n        uint256 jlength = storageDexes.length;\\n        for (uint256 i = 0; i < ilength; i++) {\\n            _checkAddress(_dexs[i]);\\n            if (!dexAllowlist[_dexs[i]]) {\\n                continue;\\n            }\\n            dexAllowlist[_dexs[i]] = false;\\n            for (uint256 j = 0; j < jlength; j++) {\\n                if (storageDexes[j] == _dexs[i]) {\\n                    _removeDex(j);\\n                    jlength = storageDexes.length;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds/removes a specific function signature to/from the allowlist\\n    /// @param _signature the function signature to allow/disallow\\n    /// @param _approval whether the function signature should be allowed\\n    function setFunctionApprovalBySignature(bytes32 _signature, bool _approval) external {\\n        LibDiamond.enforceIsContractOwner();\\n        appStorage.dexFuncSignatureAllowList[_signature] = _approval;\\n        emit FunctionSignatureApprovalChanged(_signature, _approval);\\n    }\\n\\n    /// @notice Batch Adds/removes a specific function signature to/from the allowlist\\n    /// @param _signatures the function signatures to allow/disallow\\n    /// @param _approval whether the function signatures should be allowed\\n    function batchSetFunctionApprovalBySignature(bytes32[] calldata _signatures, bool _approval) external {\\n        LibDiamond.enforceIsContractOwner();\\n        mapping(bytes32 => bool) storage dexFuncSignatureAllowList = appStorage.dexFuncSignatureAllowList;\\n        uint256 length = _signatures.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes32 _signature = _signatures[i];\\n            dexFuncSignatureAllowList[_signature] = _approval;\\n            emit FunctionSignatureApprovalChanged(_signature, _approval);\\n        }\\n    }\\n\\n    /// @notice Returns whether a function signature is approved\\n    /// @param _signature the function signature to query\\n    /// @return approved Approved or not\\n    function isFunctionApproved(bytes32 _signature) public view returns (bool approved) {\\n        return appStorage.dexFuncSignatureAllowList[_signature];\\n    }\\n\\n    /// @notice Returns a list of all approved DEX addresses.\\n    /// @return addresses List of approved DEX addresses\\n    function approvedDexs() external view returns (address[] memory addresses) {\\n        return appStorage.dexs;\\n    }\\n\\n    /// Private Methods ///\\n\\n    /// @dev Contains business logic for removing a DEX address.\\n    /// @param index index of the dex to remove\\n    function _removeDex(uint256 index) private {\\n        address[] storage storageDexes = appStorage.dexs;\\n        address toRemove = storageDexes[index];\\n        // Move the last element into the place to delete\\n        storageDexes[index] = storageDexes[storageDexes.length - 1];\\n        // Remove the last element\\n        storageDexes.pop();\\n        emit DexRemoved(toRemove);\\n    }\\n\\n    /// @dev Contains business logic for validating a DEX address.\\n    /// @param _dex address of the dex to check\\n    function _checkAddress(address _dex) private pure {\\n        if (_dex == 0x0000000000000000000000000000000000000000) {\\n            revert InvalidConfig();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct LibStorage {\\n    mapping(address => bool) dexAllowlist;\\n    mapping(bytes32 => bool) dexFuncSignatureAllowList;\\n    address[] dexs;\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport { IDiamondCut } from \\\"../Interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Errors/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nerror InvalidAmount();\\nerror TokenAddressIsZero();\\nerror CannotBridgeToSameNetwork();\\nerror ZeroPostSwapBalance();\\nerror InvalidBridgeConfigLength();\\nerror NoSwapDataProvided();\\nerror NativeValueWithERC();\\nerror ContractCallNotAllowed();\\nerror NullAddrIsNotAValidSpender();\\nerror NullAddrIsNotAnERC20Token();\\nerror NoTransferToNullAddress();\\nerror NativeAssetTransferFailed();\\nerror InvalidContract();\\nerror InvalidConfig();\\n\"\r\n    },\r\n    \"src/Interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"}],\"name\":\"DexAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"}],\"name\":\"DexRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionSignature\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"FunctionSignatureApprovalChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"addDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedDexs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dexs\",\"type\":\"address[]\"}],\"name\":\"batchAddDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dexs\",\"type\":\"address[]\"}],\"name\":\"batchRemoveDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_signatures\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"batchSetFunctionApprovalBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"isFunctionApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"removeDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_signature\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"setFunctionApprovalBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DexManagerFacet", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}