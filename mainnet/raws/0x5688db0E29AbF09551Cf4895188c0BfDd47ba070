{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MetaChess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CONSTANTLY WANTS TO MAKE THE WORLD BEAUTIFUL\\n\\n// METACHESS - A ON-CHAIN CHESS MOVE GENERATOR COLLECTION FOR HUNDREDELEVEN COLLECTION\\n//               __    __    __    __\\n//           8 /__////__////__////__////\\n//          7 ////__////__////__////__/\\n//         6 /__////__////__////__////\\n//        5 ////__////__////__////__/\\n//       4 /__////__////__////__////\\n//      3 ////__////__////__////__/\\n//     2 /__////__////__////__////\\n//    1 ////__////__////__////__/\\n//       a  b  c  d  e  f  g  h\\n \\n// THIS CHESS GAME HAS NO RULES. NO PAIN. NO GAIN. ON CHAIN.\\n// https://hundredeleven.art\\n// by berk aka princess camel aka guerrilla pimp minion bastard\\n// @berkozdemir\\n\\npragma solidity ^0.8.0;\\n\\ncontract MetaChess {\\n\\n    string[] private pieceColor = [\\n        \\\"White\\\",\\n        \\\"Black\\\"\\n    ];\\n\\n    string[] private colors = [\\n        \\\"#fff\\\",\\n        \\\"#000\\\"\\n    ];\\n    \\n    string[] private chessPiece = [\\n        \\\"King\\\",\\n        \\\"Queen\\\",\\n        \\\"Rook\\\",\\n        \\\"Knight\\\",\\n        \\\"Bishop\\\",\\n        \\\"Pawn\\\"\\n    ];\\n    \\n    string[] private chessX = [\\n        \\\"a\\\",\\n        \\\"b\\\",\\n        \\\"c\\\",\\n        \\\"d\\\",\\n        \\\"e\\\",\\n        \\\"f\\\",\\n        \\\"g\\\",\\n        \\\"h\\\"\\n    ];\\n\\n    string[] private chessY = [\\n        \\\"1\\\",\\n        \\\"2\\\",\\n        \\\"3\\\",\\n        \\\"4\\\",\\n        \\\"5\\\",\\n        \\\"6\\\",\\n        \\\"7\\\",\\n        \\\"8\\\"\\n    ];\\n    \\n    \\n    \\n    \\n    function getRandom(uint256 tokenId, string memory keyPrefix, uint256 modulo) internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(address(this), keyPrefix, toString(tokenId)))) % modulo;\\n    }\\n\\n    function getPieceColor(uint256 tokenId) public view returns (string memory) {\\n        return pieceColor[ getRandom(tokenId, \\\"pieceColor\\\", 2) ];\\n    }\\n    function getChessPiece(uint256 tokenId) public view returns (string memory) {\\n        return chessPiece[ getRandom(tokenId, \\\"chessPiece\\\", 6)];\\n    }\\n    function getCoordinate(uint256 tokenId) public view returns (string memory) {\\n        return string(abi.encodePacked(chessX[getRandom(tokenId, \\\"chessX\\\", 8)],\\n            chessY[ getRandom(tokenId, \\\"chessY\\\", 8) ]));\\n    }\\n    \\n    function generateImage(uint256 tokenId) public view returns (string memory) {\\n        return string(abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 200 200\\\"><style>.base { fill:',\\n            colors[ ( getRandom(tokenId, \\\"pieceColor\\\", 2) + 1 ) % 2 ],\\n            '; font-family: Arial Black; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"',\\n            colors[ getRandom(tokenId, \\\"pieceColor\\\", 2)],\\n            '\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">Move ',\\n            toString(tokenId),\\n            '</text><text text-anchor=\\\"middle\\\" x=\\\"50%\\\" y=\\\"60\\\" class=\\\"base\\\">',\\n            pieceColor[ getRandom(tokenId, \\\"pieceColor\\\", 2) ],\\n            '</text><text text-anchor=\\\"middle\\\" x=\\\"50%\\\" y=\\\"90\\\" class=\\\"base\\\">',\\n            chessPiece[ getRandom(tokenId, \\\"chessPiece\\\", 6)],\\n            '</text><text text-anchor=\\\"middle\\\" x=\\\"50%\\\" y=\\\"120\\\" class=\\\"base\\\">to</text><text text-anchor=\\\"middle\\\" x=\\\"50%\\\" y=\\\"150\\\" class=\\\"base\\\">',\\n            chessX[getRandom(tokenId, \\\"chessX\\\", 8)],\\n            chessY[ getRandom(tokenId, \\\"chessY\\\", 8) ], \\\"</text></svg>\\\" ));\\n\\n    }\\n\\n    function getMetadataJSON(uint256 tokenId) public view returns (string memory) {\\n        string memory image = generateImage(tokenId);\\n        string memory json = string(abi.encodePacked('{\\\"name\\\": \\\"#', toString(tokenId), ' - MetaChess\\\", \\\"description\\\": \\\"HundredEleven is a cryptoart metacollection with interchangeable metadata, created by berk aka princesscamel aka guerrilla pimp minion bastard. Holders of a NFT from this series can swap the active metadata within collections on-chain. Visit https://hundredeleven.art for more info about the metacollection and interacting with tokens. Current collection shown in this token is MetaChess - randomly generated chess moves. this is a chess game with no rules. no pain, no gain, on-chain.\\\", \\\"external_url\\\": \\\"https://hundredeleven.art/collection/5/token/',toString(tokenId),'\\\", \\\"artist\\\": \\\"berk aka princesscamel aka guerrilla pimp minion bastard\\\", \\\"media_type\\\": \\\"image\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\\\",\\\"attributes\\\":[{\\\"trait_type\\\": \\\"Collection\\\", \\\"value\\\": \\\"MetaChess\\\"' , '}]}'));\\n        return json;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        string memory base64JSON = Base64.encode(bytes(getMetadataJSON(tokenId)));\\n        return string(abi.encodePacked('data:application/json;base64,',base64JSON));\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked('{\\\"name\\\": \\\"MetaChess\\\", \\\"description\\\": \\\"randomly generated chess moves. this is a chess game with no rules. no pain, no gain, on-chain.\\\", \\\"artist\\\": \\\"berk aka princesscamel aka guerrilla pimp minion bastard\\\", \\\"external_link\\\": \\\"https://hundredeleven.art/collection/5\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(generateImage(69))),'\\\"}'));\\n    }\\n   \\n    function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n    \\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getChessPiece\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCoordinate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPieceColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MetaChess", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}