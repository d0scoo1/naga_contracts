{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    //     require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    //     return _functionCallWithValue(target, data, value, errorMessage);\r\n    // }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = \"0\";\r\n        _addr[1] = \"x\";\r\n\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IOwnable {\r\n    function policy() external view returns (address);\r\n\r\n    function renounceManagement() external;\r\n\r\n    function pushManagement(address newOwner_) external;\r\n\r\n    function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event OwnershipPulled(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed(address(0), _owner);\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy {\r\n        emit OwnershipPushed(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement(address newOwner_)\r\n        public\r\n        virtual\r\n        override\r\n        onlyPolicy\r\n    {\r\n        require(\r\n            newOwner_ != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipPushed(_owner, newOwner_);\r\n        _newOwner = newOwner_;\r\n    }\r\n\r\n    function pullManagement() public virtual override {\r\n        require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _token,\r\n        uint256 _profit\r\n    ) external returns (uint256 send_);\r\n\r\n    function manage(address _token, uint256 _amount) external;\r\n\r\n    function valueOf(address _token, uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256 value_);\r\n}\r\n\r\ninterface ICurve3Pool {\r\n    // add liquidity (frax) to receive back FRAX3CRV-f\r\n    function add_liquidity(\r\n        address _pool,\r\n        uint256[4] memory _deposit_amounts,\r\n        uint256 _min_mint_amount\r\n    ) external returns (uint256);\r\n\r\n    // remove liquidity (FRAX3CRV-f) to recieve back Frax\r\n    function remove_liquidity_one_coin(\r\n        address _pool,\r\n        uint256 _burn_amount,\r\n        int128 i,\r\n        uint256 _min_amount\r\n    ) external returns (uint256);\r\n}\r\n\r\n//main Convex contract(booster.sol) basic interface\r\ninterface IConvex {\r\n    function poolInfo(uint256 pid)\r\n        external\r\n        returns (\r\n            address lptoken,\r\n            address token,\r\n            address gauge,\r\n            address crvRewards,\r\n            address stash,\r\n            bool shutdown\r\n        );\r\n\r\n    //deposit into convex, receive a tokenized deposit.  parameter to stake immediately\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amount,\r\n        bool _stake\r\n    ) external returns (bool);\r\n\r\n    //burn a tokenized deposit to receive curve lp tokens back\r\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\r\n}\r\n\r\n//sample convex reward contracts interface\r\ninterface IConvexRewards {\r\n    //get balance of an address\r\n    function balanceOf(address _account) external returns (uint256);\r\n\r\n    //withdraw to a convex tokenized deposit\r\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\r\n\r\n    //withdraw directly to curve LP token\r\n    function withdrawAndUnwrap(uint256 _amount, bool _claim)\r\n        external\r\n        returns (bool);\r\n\r\n    //claim rewards\r\n    function getReward() external returns (bool);\r\n\r\n    //stake a convex tokenized deposit\r\n    function stake(uint256 _amount) external returns (bool);\r\n\r\n    //stake a convex tokenized deposit for another address(transfering ownership)\r\n    function stakeFor(address _account, uint256 _amount)\r\n        external\r\n        returns (bool);\r\n\r\n    //get rewards for an address\r\n    function earned(address _account) external view returns (uint256);\r\n}\r\n\r\ninterface IAnyswapERC20 {\r\n    function underlying() external view returns (address);\r\n\r\n    function withdraw(uint256 amount) external returns (uint256);\r\n}\r\n\r\ninterface IAnyswapRouter {\r\n    function anySwapOutUnderlying(\r\n        address token,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 toChainID\r\n    ) external;\r\n}\r\n\r\n/**\r\n *  Contract deploys reserves from treasury into the Convex lending pool,\r\n *  earning interest and $CVX.\r\n */\r\n\r\ncontract ConvexAllocator is Ownable {\r\n    /* ======== DEPENDENCIES ======== */\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /* ======== STRUCTS ======== */\r\n\r\n    struct tokenData {\r\n        address underlying;\r\n        address anyswapERC20;\r\n        uint256 deployed;\r\n        uint256 returned;\r\n    }\r\n\r\n    struct rewardPid {\r\n        address rewardPool;\r\n        uint256 pid;\r\n    }\r\n\r\n    /* ======== STATE VARIABLES ======== */\r\n\r\n    IConvex public immutable booster; // Convex deposit contract\r\n    //IConvexRewards public rewardPool; // Convex reward contract\r\n    IAnyswapRouter public immutable anyswapRouter; // anyswap router\r\n    ICurve3Pool public curve3Pool; // Curve 3Pool\r\n    address public rewardCollector;\r\n\r\n    mapping(address => tokenData) public tokenInfo; // info for deposited tokens\r\n    //mapping(address => uint) public pidForReserve; // convex pid for reward pool\r\n    rewardPid[] pidForReserve;\r\n\r\n    uint256 public totalValueDeployed; // total RFV deployed into lending pool\r\n    uint256 public totalValueReturned;\r\n\r\n    uint256 public immutable timelockInBlocks; // timelock to raise deployment limit\r\n\r\n    address[] rewardTokens;\r\n\r\n    uint256 constant FTM_CHAINID = 250;\r\n    uint256 constant INDEX_NOT_FOUND = 999999;\r\n    address public ftmAddress;\r\n    address public ftmAddressCandidate;\r\n    uint256 public immutable ftmAddressChangeTimelock;\r\n    uint256 public ftmAddressActiveblock;\r\n\r\n    /* ======== CONSTRUCTOR ======== */\r\n\r\n    constructor(\r\n        address _anyswapRouter,\r\n        address _booster,\r\n        // address _rewardPool,\r\n        address _curve3Pool,\r\n        address _rewardCollector,\r\n        address _ftmAddress,\r\n        uint256 _ftmAddressChangeTimelock,\r\n        uint256 _timelockInBlocks\r\n    ) {\r\n        require(_anyswapRouter != address(0));\r\n        anyswapRouter = IAnyswapRouter(_anyswapRouter);\r\n\r\n        require(_booster != address(0));\r\n        booster = IConvex(_booster);\r\n\r\n        // require( _rewardPool != address(0) );\r\n        // rewardPool = IConvexRewards( _rewardPool );\r\n\r\n        require(_curve3Pool != address(0));\r\n        curve3Pool = ICurve3Pool(_curve3Pool);\r\n\r\n        require(_rewardCollector != address(0));\r\n        rewardCollector = _rewardCollector;\r\n\r\n        timelockInBlocks = _timelockInBlocks;\r\n\r\n        require(_ftmAddress != address(0));\r\n        ftmAddress = _ftmAddress;\r\n\r\n        ftmAddressChangeTimelock = _ftmAddressChangeTimelock;\r\n    }\r\n\r\n    /* ======== OPEN FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice claims accrued CVX rewards for all tracked crvTokens\r\n     */\r\n    function harvest() public {\r\n        //claim rewards for all crvTokens\r\n        for (uint256 i = 0; i < pidForReserve.length; i++) {\r\n            address rewardPool = pidForReserve[i].rewardPool;\r\n            require(rewardPool != address(0), \"Invalid reward pool address\");\r\n\r\n            //Claim rewards\r\n            IConvexRewards(rewardPool).getReward();\r\n        }\r\n\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            uint256 balance = IERC20(rewardTokens[i]).balanceOf(address(this));\r\n\r\n            if (balance > 0) {\r\n                IERC20(rewardTokens[i]).safeTransfer(rewardCollector, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice withdraws asset from treasury, deposits asset into lending pool, then deposits crvToken into convex\r\n     *  @param token address\r\n     *  @param amount uint\r\n     *  @param amounts uint[]\r\n     *  @param minAmount uint\r\n     *  @param pid uint\r\n     *  @param curveToken address\r\n     */\r\n    function deposit(\r\n        address token,\r\n        uint256 amount,\r\n        uint256[4] calldata amounts,\r\n        uint256 minAmount,\r\n        uint256 pid,\r\n        address curveToken\r\n    ) public onlyPolicy {\r\n        require(curve3Pool != ICurve3Pool(0), \"Invalid curv3pool address\");\r\n        (address _lptoken, , , address _crvRewards, , ) = booster.poolInfo(pid);\r\n\r\n        require(_lptoken == curveToken, \"Invalid curve token address\");\r\n\r\n        //Update pidForReserve\r\n        _addPidRewardItem(_crvRewards, pid);\r\n\r\n        //treasury.manage( token, amount ); // retrieve amount of asset from treasury\r\n\r\n        // account for deposit\r\n        //uint value = treasury.valueOf( token, amount );\r\n\r\n        uint256 value = valueOf(token, amount);\r\n\r\n        accountingFor(token, amount, value, true);\r\n\r\n        IERC20(token).approve(address(curve3Pool), amount); // approve curve pool to spend tokens\r\n        uint256 curveAmount = curve3Pool.add_liquidity(\r\n            curveToken,\r\n            amounts,\r\n            minAmount\r\n        ); // deposit into curve\r\n\r\n        IERC20(curveToken).approve(address(booster), curveAmount); // approve to deposit to convex\r\n        booster.deposit(pid, curveAmount, true); // deposit into convex\r\n    }\r\n\r\n    function valueOf(address token, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256 value)\r\n    {\r\n        uint256 decimals = IERC20(token).decimals();\r\n        if (decimals > 9) {\r\n            amount.div(10**(decimals - 9));\r\n        } else if (decimals < 9) {\r\n            amount.mul(10**(9 - decimals));\r\n        } else {\r\n            value = amount;\r\n        }\r\n    }\r\n\r\n    function _addPidRewardItem(address _rewardPool, uint256 pid) internal {\r\n        if (pidForReserve.length == 0)\r\n            pidForReserve.push(rewardPid(_rewardPool, pid));\r\n        else {\r\n            //check for duplication\r\n            for (uint256 i = 0; i < pidForReserve.length; i++) {\r\n                if (\r\n                    pidForReserve[i].rewardPool != _rewardPool &&\r\n                    pidForReserve[i].pid != pid\r\n                ) {\r\n                    pidForReserve.push(rewardPid(_rewardPool, pid));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _removePidRewardItem(address _rewardPool, uint256 pid) internal {\r\n        uint256 index = INDEX_NOT_FOUND;\r\n        for (uint256 i = 0; i < pidForReserve.length; i++) {\r\n            if (\r\n                pidForReserve[i].rewardPool == _rewardPool &&\r\n                pidForReserve[i].pid == pid\r\n            ) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        //resize array\r\n        if (index != INDEX_NOT_FOUND) {\r\n            _removeArrayGap(index);\r\n        }\r\n    }\r\n\r\n    function _removeArrayGap(uint256 _index) internal {\r\n        require(_index < pidForReserve.length, \"index out of bound\");\r\n\r\n        for (uint256 i = _index; i < pidForReserve.length - 1; i++) {\r\n            pidForReserve[i] = pidForReserve[i + 1];\r\n        }\r\n        pidForReserve.pop();\r\n    }\r\n\r\n    /**\r\n     *  @notice withdraws crvToken from convex, withdraws from lending pool, then deposits asset into treasury\r\n     *  @param token address\r\n     *  @param amount uint\r\n     *  @param minAmount uint\r\n     *  @param tokenIndexInPool int128\r\n     *  @param pid uint\r\n     *  @param curveToken address\r\n     */\r\n    function withdraw(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 minAmount,\r\n        int128 tokenIndexInPool,\r\n        uint256 pid,\r\n        address curveToken\r\n    ) public onlyPolicy {\r\n        require(curve3Pool != ICurve3Pool(0), \"Invalid curv3pool address\");\r\n        (address _lptoken, , , address _crvRewards, , ) = booster.poolInfo(pid);\r\n\r\n        require(_lptoken == curveToken, \"Invalid curve token address\");\r\n        require(_crvRewards != address(0), \"Invalid reward pool address\");\r\n\r\n        IConvexRewards(_crvRewards).withdrawAndUnwrap(amount, false); // withdraw to curve token\r\n\r\n        IERC20(curveToken).approve(address(curve3Pool), amount); // approve 3Pool to spend curveToken\r\n        curve3Pool.remove_liquidity_one_coin(\r\n            curveToken,\r\n            amount,\r\n            tokenIndexInPool, //order of token in the Curve pool\r\n            minAmount\r\n        ); // withdraw from curve\r\n\r\n        uint256 balance = IERC20(token).balanceOf(address(this)); // balance of asset withdrawn\r\n\r\n        // account for withdrawal\r\n        //uint value = treasury.valueOf( token, balance );\r\n        uint256 value = valueOf(token, balance);\r\n        accountingFor(token, balance, value, false);\r\n\r\n        //IERC20( token ).approve( address( treasury ), balance ); // approve to deposit asset into treasury\r\n        //treasury.deposit( balance, token, value ); // deposit using value as profit so no HEC is minted\r\n\r\n        IERC20(token).approve(address(anyswapRouter), amount); // approve anyswap router to spend tokens\r\n        anyswapRouter.anySwapOutUnderlying(\r\n            tokenInfo[token].anyswapERC20,\r\n            ftmAddress,\r\n            amount,\r\n            FTM_CHAINID\r\n        );\r\n    }\r\n\r\n    function withdrawAnyswapERC20(address anyswapERC20Token, uint256 amount)\r\n        public\r\n        onlyPolicy\r\n    {\r\n        IAnyswapERC20(anyswapERC20Token).withdraw(amount);\r\n    }\r\n\r\n    function queueFtmAddress(address _ftmAddress) external onlyPolicy {\r\n        require(_ftmAddress != address(0));\r\n        ftmAddressActiveblock = block.number.add(ftmAddressChangeTimelock);\r\n        ftmAddressCandidate = _ftmAddress;\r\n    }\r\n\r\n    function setFtmAddress() external onlyPolicy {\r\n        require(ftmAddressCandidate != address(0));\r\n        require(block.number >= ftmAddressActiveblock, \"still in queue\");\r\n        ftmAddress = ftmAddressCandidate;\r\n    }\r\n\r\n    /**\r\n     *  @notice adds asset and corresponding crvToken to mapping\r\n     *  @param principleToken address\r\n     */\r\n    function addToken(address principleToken, address anyswapERC20Token)\r\n        external\r\n        onlyPolicy\r\n    {\r\n        require(anyswapERC20Token != address(0), \"invalid anyswap erc20 token\");\r\n        address token = IAnyswapERC20(anyswapERC20Token).underlying();\r\n        require(\r\n            token != address(0) && principleToken == token,\r\n            \"principle token not matched with anyswap ERC20 underlying token\"\r\n        );\r\n\r\n        require(tokenInfo[token].deployed <= tokenInfo[token].returned);\r\n\r\n        tokenInfo[token] = tokenData({\r\n            underlying: token,\r\n            anyswapERC20: anyswapERC20Token,\r\n            deployed: 0,\r\n            returned: 0\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  @notice add new reward token to be harvested\r\n     *  @param token address\r\n     */\r\n    function addRewardToken(address token) external onlyPolicy {\r\n        require(IERC20(token).totalSupply() > 0, \"Invalid address\");\r\n        require(token != address(0));\r\n        rewardTokens.push(token);\r\n    }\r\n\r\n    /* ======== INTERNAL FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice accounting of deposits/withdrawals of assets\r\n     *  @param token address\r\n     *  @param amount uint\r\n     *  @param value uint\r\n     *  @param add bool\r\n     */\r\n    function accountingFor(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 value,\r\n        bool add\r\n    ) internal {\r\n        if (add) {\r\n            tokenInfo[token].deployed = tokenInfo[token].deployed.add(amount); // track amount allocated into pool\r\n\r\n            totalValueDeployed = totalValueDeployed.add(value); // track total value allocated into pools\r\n        } else {\r\n            // track amount allocated into pool\r\n            tokenInfo[token].returned = tokenInfo[token].returned.add(amount);\r\n\r\n            // track total value allocated into pools\r\n            totalValueReturned = totalValueReturned.add(value);\r\n        }\r\n    }\r\n\r\n    /* ======== VIEW FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice query all pending rewards\r\n     *  @return uint\r\n     */\r\n    function rewardsPending() public view returns (uint256) {\r\n        uint256 rewardAmount;\r\n\r\n        //query all pending rewards\r\n        for (uint256 i = 0; i < pidForReserve.length; i++) {\r\n            address rewardPool = pidForReserve[i].rewardPool;\r\n            require(rewardPool != address(0), \"Invalid reward pool address\");\r\n\r\n            rewardAmount += IConvexRewards(rewardPool).earned(address(this));\r\n        }\r\n\r\n        return rewardAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curve3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ftmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ftmAddressChangeTimelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timelockInBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anyswapERC20Token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyswapRouter\",\"outputs\":[{\"internalType\":\"contract IAnyswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IConvex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3Pool\",\"outputs\":[{\"internalType\":\"contract ICurve3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"amounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"curveToken\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ftmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ftmAddressActiveblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ftmAddressCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ftmAddressChangeTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ftmAddress\",\"type\":\"address\"}],\"name\":\"queueFtmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFtmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anyswapERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deployed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"valueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"tokenIndexInPool\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"curveToken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"anyswapERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAnyswapERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexAllocator", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b7a87899490ece95443e979ca9485cbe7e71522000000000000000000000000f403c135812408bfbe8713b5a23a04b3d48aae31000000000000000000000000a79828df1850e8a3a3064576f380d90aecdd3359000000000000000000000000463f45ce1f64a825e5890ebb604e8c61fba32b78000000000000000000000000267955e20fd56cd16ff7618d49b38df9fed3e48d00000000000000000000000000000000000000000000000000000000000070800000000000000000000000000000000000000000000000000000000000007080", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f7dc6892b57cf74cbc406083bebfa88850bd2c10fbe9ace6fbd6811a948d7813"}]}