{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/renderer/WatchData.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Utils.sol\\\";\\n\\n// Primary library for storing all core constants and rendering data.\\nlibrary WatchData {\\n    /* CONSTANTS */\\n    uint256 public constant WATCH_SIZE = 360;\\n    uint256 public constant CENTER = 180;\\n    uint256 public constant OUTER_BEZEL_RADIUS = 180;\\n    uint256 public constant INNER_BEZEL_RADIUS = 152;\\n    uint256 public constant FACE_RADIUS = 144; // OUTER_BEZEL_RADIUS * 0.8\\n    uint8 public constant GLOW_IN_THE_DARK_ID = 99;\\n\\n    /* IDs */\\n    enum MaterialId {\\n        Pearl,\\n        Copper,\\n        Onyx,\\n        Quartz,\\n        Emerald,\\n        Ruby,\\n        Sapphire,\\n        Amber,\\n        Amethyst,\\n        Obsidian,\\n        Gold,\\n        Diamond\\n    }\\n\\n    enum MoodId {\\n        Surprised,\\n        Happy,\\n        Relaxed,\\n        Excited,\\n        Speechless,\\n        Chilling,\\n        Annoyed,\\n        Sleepy,\\n        Unimpressed,\\n        Meditating,\\n        Relieved,\\n        Cheeky,\\n        Sus\\n    }\\n\\n    enum GlassesId {\\n        None,\\n        LeftMonocle,\\n        RightMonocle,\\n        Flip,\\n        Valentine,\\n        Shutters,\\n        ThreeD,\\n        Ski,\\n        Monolens\\n    }\\n\\n    /* TRAIT STRUCTS */\\n    struct Material {\\n        MaterialId id;\\n        string name;\\n        string[2] vals;\\n    }\\n\\n    struct Glasses {\\n        GlassesId id;\\n        string name;\\n    }\\n\\n    struct Mood {\\n        MoodId id;\\n        string name;\\n    }\\n\\n    struct GlowInTheDarkData {\\n        // contains the light mode colors\\n        string[2] light;\\n        // contains the dark mode colors\\n        string[2] dark;\\n        string name;\\n    }\\n\\n    /* DATA RETRIEVAL */\\n    function getGlowInTheDarkData()\\n        public\\n        pure\\n        returns (GlowInTheDarkData memory)\\n    {\\n        return\\n            GlowInTheDarkData(\\n                [\\\"#fbfffc\\\", \\\"#d7ffd7\\\"],\\n                [\\\"#052925\\\", \\\"#a4ffa1\\\"],\\n                \\\"Glow In The Dark\\\"\\n            );\\n    }\\n\\n    function getDiamondOverlayGradient()\\n        public\\n        pure\\n        returns (string[7] memory)\\n    {\\n        return [\\n            \\\"#fffd92\\\",\\n            \\\"#ffcca7\\\",\\n            \\\"#f893ff\\\",\\n            \\\"#b393ff\\\",\\n            \\\"#99a7ff\\\",\\n            \\\"#76d4ff\\\",\\n            \\\"#7cffda\\\"\\n        ];\\n    }\\n\\n    function getMaterial(uint256 _materialId)\\n        public\\n        pure\\n        returns (Material memory)\\n    {\\n        Material[12] memory materials = [\\n            Material(MaterialId.Pearl, \\\"Ocean Pearl\\\", [\\\"#ffffff\\\", \\\"#f6e6ff\\\"]),\\n            Material(\\n                MaterialId.Copper,\\n                \\\"Resistor Copper\\\",\\n                [\\\"#f7d1bf\\\", \\\"#5a2c1d\\\"]\\n            ),\\n            Material(MaterialId.Onyx, \\\"Void Onyx\\\", [\\\"#615c5c\\\", \\\"#0f0f0f\\\"]),\\n            Material(MaterialId.Quartz, \\\"Block Quartz\\\", [\\\"#ffb4be\\\", \\\"#81004e\\\"]),\\n            Material(\\n                MaterialId.Emerald,\\n                \\\"Matrix Emerald\\\",\\n                [\\\"#97ff47\\\", \\\"#011601\\\"]\\n            ),\\n            Material(MaterialId.Ruby, \\\"404 Ruby\\\", [\\\"#fe3d4a\\\", \\\"#460008\\\"]),\\n            Material(\\n                MaterialId.Sapphire,\\n                \\\"Hyperlink Sapphire\\\",\\n                [\\\"#4668ff\\\", \\\"#000281\\\"]\\n            ),\\n            Material(MaterialId.Amber, \\\"Sunset Amber\\\", [\\\"#ffa641\\\", \\\"#30031f\\\"]),\\n            Material(\\n                MaterialId.Amethyst,\\n                \\\"Candy Amethyst\\\",\\n                [\\\"#f7dfff\\\", \\\"#3671ca\\\"]\\n            ),\\n            Material(\\n                MaterialId.Obsidian,\\n                \\\"Nether Obsidian\\\",\\n                [\\\"#6f00ff\\\", \\\"#2b003b\\\"]\\n            ),\\n            Material(MaterialId.Gold, \\\"Electric Gold\\\", [\\\"#fcba7d\\\", \\\"#864800\\\"]),\\n            Material(\\n                MaterialId.Diamond,\\n                \\\"Ethereal Diamond\\\",\\n                [\\\"#b5f9ff\\\", \\\"#30c2c2\\\"]\\n            )\\n        ];\\n\\n        return materials[_materialId];\\n    }\\n\\n    function getMood(uint256 _moodId) public pure returns (Mood memory) {\\n        Mood[13] memory moods = [\\n            Mood(MoodId.Surprised, \\\"Surprised\\\"),\\n            Mood(MoodId.Happy, \\\"Happy\\\"),\\n            Mood(MoodId.Relaxed, \\\"Relaxed\\\"),\\n            Mood(MoodId.Excited, \\\"Excited\\\"),\\n            Mood(MoodId.Speechless, \\\"Speechless\\\"),\\n            Mood(MoodId.Chilling, \\\"Chilling\\\"),\\n            Mood(MoodId.Annoyed, \\\"Annoyed\\\"),\\n            Mood(MoodId.Sleepy, \\\"Sleepy\\\"),\\n            Mood(MoodId.Unimpressed, \\\"Unimpressed\\\"),\\n            Mood(MoodId.Meditating, \\\"Meditating\\\"),\\n            Mood(MoodId.Relieved, \\\"Relieved\\\"),\\n            Mood(MoodId.Cheeky, \\\"Cheeky\\\"),\\n            Mood(MoodId.Sus, \\\"Sus\\\")\\n        ];\\n\\n        return moods[_moodId];\\n    }\\n\\n    function getGlasses(uint256 _glassesId)\\n        public\\n        pure\\n        returns (Glasses memory)\\n    {\\n        Glasses[9] memory glasses = [\\n            Glasses(GlassesId.None, \\\"None\\\"),\\n            Glasses(GlassesId.LeftMonocle, \\\"Left Monocle\\\"),\\n            Glasses(GlassesId.RightMonocle, \\\"Right Monocle\\\"),\\n            Glasses(GlassesId.Flip, \\\"Flip\\\"),\\n            Glasses(GlassesId.Valentine, \\\"Valentine\\\"),\\n            Glasses(GlassesId.Shutters, \\\"Shutters\\\"),\\n            Glasses(GlassesId.ThreeD, \\\"3D\\\"),\\n            Glasses(GlassesId.Ski, \\\"Ski\\\"),\\n            Glasses(GlassesId.Monolens, \\\"Monolens\\\")\\n        ];\\n\\n        return glasses[_glassesId];\\n    }\\n\\n    /* UTILS */\\n    // used to determine proper accent colors.\\n    function isLightMaterial(MaterialId _id) public pure returns (bool) {\\n        return _id == MaterialId.Pearl || _id == MaterialId.Diamond;\\n    }\\n\\n    function getMaterialAccentColor(MaterialId _id)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.getCssVar(\\\"black\\\");\\n        }\\n\\n        return utils.getCssVar(\\\"white\\\");\\n    }\\n\\n    function getMaterialShadow(MaterialId _id)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.black_a(85);\\n        }\\n\\n        return utils.white_a(85);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/Utils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = \\\"\\\";\\n\\n    // formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat(\\\"0.\\\", utils.uint2str(_a))\\n            : \\\"1\\\";\\n        return\\n            string.concat(\\n                \\\"rgba(\\\",\\n                utils.uint2str(_r),\\n                \\\",\\\",\\n                utils.uint2str(_g),\\n                \\\",\\\",\\n                utils.uint2str(_b),\\n                \\\",\\\",\\n                formattedA,\\n                \\\")\\\"\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"CENTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACE_RADIUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLOW_IN_THE_DARK_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INNER_BEZEL_RADIUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTER_BEZEL_RADIUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiamondOverlayGradient\",\"outputs\":[{\"internalType\":\"string[7]\",\"name\":\"\",\"type\":\"string[7]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_glassesId\",\"type\":\"uint256\"}],\"name\":\"getGlasses\",\"outputs\":[{\"components\":[{\"internalType\":\"enum WatchData.GlassesId\",\"name\":\"id\",\"type\":\"WatchData.GlassesId\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct WatchData.Glasses\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlowInTheDarkData\",\"outputs\":[{\"components\":[{\"internalType\":\"string[2]\",\"name\":\"light\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"dark\",\"type\":\"string[2]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct WatchData.GlowInTheDarkData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"}],\"name\":\"getMaterial\",\"outputs\":[{\"components\":[{\"internalType\":\"enum WatchData.MaterialId\",\"name\":\"id\",\"type\":\"WatchData.MaterialId\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[2]\",\"name\":\"vals\",\"type\":\"string[2]\"}],\"internalType\":\"struct WatchData.Material\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WatchData.MaterialId\",\"name\":\"_id\",\"type\":\"WatchData.MaterialId\"}],\"name\":\"getMaterialAccentColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WatchData.MaterialId\",\"name\":\"_id\",\"type\":\"WatchData.MaterialId\"}],\"name\":\"getMaterialShadow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_moodId\",\"type\":\"uint256\"}],\"name\":\"getMood\",\"outputs\":[{\"components\":[{\"internalType\":\"enum WatchData.MoodId\",\"name\":\"id\",\"type\":\"WatchData.MoodId\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct WatchData.Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WatchData.MaterialId\",\"name\":\"_id\",\"type\":\"WatchData.MaterialId\"}],\"name\":\"isLightMaterial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "WatchData", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}