{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/compound/PositionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IPositionsManager.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\nimport \\\"./MatchingEngine.sol\\\";\\n\\n/// @title PositionsManager.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Main Logic of Morpho Protocol, implementation of the 5 main functionalities: supply, borrow, withdraw, repay and liquidate.\\ncontract PositionsManager is IPositionsManager, MatchingEngine {\\n    using DoubleLinkedList for DoubleLinkedList.List;\\n    using SafeTransferLib for ERC20;\\n    using CompoundMath for uint256;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when a supply happens.\\n    /// @param _supplier The address of the account sending funds.\\n    /// @param _onBehalf The address of the account whose positions will be updated.\\n    /// @param _poolTokenAddress The address of the market where assets are supplied into.\\n    /// @param _amount The amount of assets supplied (in underlying).\\n    /// @param _balanceOnPool The supply balance on pool after update.\\n    /// @param _balanceInP2P The supply balance in peer-to-peer after update.\\n    event Supplied(\\n        address indexed _supplier,\\n        address indexed _onBehalf,\\n        address indexed _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P\\n    );\\n\\n    /// @notice Emitted when a borrow happens.\\n    /// @param _borrower The address of the borrower.\\n    /// @param _poolTokenAddress The address of the market where assets are borrowed.\\n    /// @param _amount The amount of assets borrowed (in underlying).\\n    /// @param _balanceOnPool The borrow balance on pool after update.\\n    /// @param _balanceInP2P The borrow balance in peer-to-peer after update\\n    event Borrowed(\\n        address indexed _borrower,\\n        address indexed _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P\\n    );\\n\\n    /// @notice Emitted when a withdrawal happens.\\n    /// @param _supplier The address of the supplier whose supply is withdrawn.\\n    /// @param _receiver The address receiving the tokens.\\n    /// @param _poolTokenAddress The address of the market from where assets are withdrawn.\\n    /// @param _amount The amount of assets withdrawn (in underlying).\\n    /// @param _balanceOnPool The supply balance on pool after update.\\n    /// @param _balanceInP2P The supply balance in peer-to-peer after update.\\n    event Withdrawn(\\n        address indexed _supplier,\\n        address indexed _receiver,\\n        address indexed _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P\\n    );\\n\\n    /// @notice Emitted when a repayment happens.\\n    /// @param _repayer The address of the account repaying the debt.\\n    /// @param _onBehalf The address of the account whose debt is repaid.\\n    /// @param _poolTokenAddress The address of the market where assets are repaid.\\n    /// @param _amount The amount of assets repaid (in underlying).\\n    /// @param _balanceOnPool The borrow balance on pool after update.\\n    /// @param _balanceInP2P The borrow balance in peer-to-peer after update.\\n    event Repaid(\\n        address indexed _repayer,\\n        address indexed _onBehalf,\\n        address indexed _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P\\n    );\\n\\n    /// @notice Emitted when a liquidation happens.\\n    /// @param _liquidator The address of the liquidator.\\n    /// @param _liquidated The address of the liquidated.\\n    /// @param _poolTokenBorrowedAddress The address of the borrowed asset.\\n    /// @param _amountRepaid The amount of borrowed asset repaid (in underlying).\\n    /// @param _poolTokenCollateralAddress The address of the collateral asset seized.\\n    /// @param _amountSeized The amount of collateral asset seized (in underlying).\\n    event Liquidated(\\n        address _liquidator,\\n        address indexed _liquidated,\\n        address indexed _poolTokenBorrowedAddress,\\n        uint256 _amountRepaid,\\n        address indexed _poolTokenCollateralAddress,\\n        uint256 _amountSeized\\n    );\\n\\n    /// @notice Emitted when the borrow peer-to-peer delta is updated.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _p2pBorrowDelta The borrow peer-to-peer delta after update.\\n    event P2PBorrowDeltaUpdated(address indexed _poolTokenAddress, uint256 _p2pBorrowDelta);\\n\\n    /// @notice Emitted when the supply peer-to-peer delta is updated.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _p2pSupplyDelta The supply peer-to-peer delta after update.\\n    event P2PSupplyDeltaUpdated(address indexed _poolTokenAddress, uint256 _p2pSupplyDelta);\\n\\n    /// @notice Emitted when the supply and borrow peer-to-peer amounts are updated.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _p2pSupplyAmount The supply peer-to-peer amount after update.\\n    /// @param _p2pBorrowAmount The borrow peer-to-peer amount after update.\\n    event P2PAmountsUpdated(\\n        address indexed _poolTokenAddress,\\n        uint256 _p2pSupplyAmount,\\n        uint256 _p2pBorrowAmount\\n    );\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the amount repaid during the liquidation is above what is allowed to be repaid.\\n    error AmountAboveWhatAllowedToRepay();\\n\\n    /// @notice Thrown when the amount of collateral to seize is above the collateral amount.\\n    error ToSeizeAboveCollateral();\\n\\n    /// @notice Thrown when the borrow on Compound failed.\\n    error BorrowOnCompoundFailed();\\n\\n    /// @notice Thrown when the redeem on Compound failed .\\n    error RedeemOnCompoundFailed();\\n\\n    /// @notice Thrown when the repay on Compound failed.\\n    error RepayOnCompoundFailed();\\n\\n    /// @notice Thrown when the mint on Compound failed.\\n    error MintOnCompoundFailed();\\n\\n    /// @notice Thrown when user is not a member of the market.\\n    error UserNotMemberOfMarket();\\n\\n    /// @notice Thrown when the user does not have enough remaining collateral to withdraw.\\n    error UnauthorisedWithdraw();\\n\\n    /// @notice Thrown when the positions of the user is not liquidatable.\\n    error UnauthorisedLiquidate();\\n\\n    /// @notice Thrown when the user does not have enough collateral for the borrow.\\n    error UnauthorisedBorrow();\\n\\n    /// @notice Thrown when the amount desired for a withdrawal is too small.\\n    error WithdrawTooSmall();\\n\\n    /// @notice Thrown when the address is zero.\\n    error AddressIsZero();\\n\\n    /// @notice Thrown when the amount is equal to 0.\\n    error AmountIsZero();\\n\\n    /// STRUCTS ///\\n\\n    // Struct to avoid stack too deep.\\n    struct SupplyVars {\\n        uint256 remainingToSupply;\\n        uint256 poolBorrowIndex;\\n        uint256 toRepay;\\n    }\\n\\n    // Struct to avoid stack too deep.\\n    struct WithdrawVars {\\n        uint256 remainingToWithdraw;\\n        uint256 maxGasForMatching;\\n        uint256 poolSupplyIndex;\\n        uint256 p2pSupplyIndex;\\n        uint256 withdrawable;\\n        uint256 toWithdraw;\\n        ERC20 underlyingToken;\\n        ICToken poolToken;\\n    }\\n\\n    // Struct to avoid stack too deep.\\n    struct RepayVars {\\n        uint256 maxGasForMatching;\\n        uint256 remainingToRepay;\\n        uint256 maxToRepayOnPool;\\n        uint256 poolBorrowIndex;\\n        uint256 p2pSupplyIndex;\\n        uint256 p2pBorrowIndex;\\n        uint256 borrowedOnPool;\\n        uint256 feeToRepay;\\n        uint256 toRepay;\\n    }\\n\\n    // Struct to avoid stack too deep.\\n    struct LiquidateVars {\\n        uint256 collateralPrice;\\n        uint256 borrowBalance;\\n        uint256 supplyBalance;\\n        uint256 borrowedPrice;\\n        uint256 amountToSeize;\\n        uint256 maxDebtValue;\\n        uint256 debtValue;\\n    }\\n\\n    /// LOGIC ///\\n\\n    /// @dev Implements supply logic.\\n    /// @param _poolTokenAddress The address of the pool token the user wants to interact with.\\n    /// @param _supplier The address of the account sending funds.\\n    /// @param _onBehalf The address of the account whose positions will be updated.\\n    /// @param _amount The amount of token (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function supplyLogic(\\n        address _poolTokenAddress,\\n        address _supplier,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external {\\n        if (_onBehalf == address(0)) revert AddressIsZero();\\n        if (_amount == 0) revert AmountIsZero();\\n        _updateP2PIndexes(_poolTokenAddress);\\n\\n        _enterMarketIfNeeded(_poolTokenAddress, _onBehalf);\\n        ERC20 underlyingToken = _getUnderlying(_poolTokenAddress);\\n        underlyingToken.safeTransferFrom(_supplier, address(this), _amount);\\n\\n        Types.Delta storage delta = deltas[_poolTokenAddress];\\n        SupplyVars memory vars;\\n        vars.poolBorrowIndex = ICToken(_poolTokenAddress).borrowIndex();\\n        vars.remainingToSupply = _amount;\\n\\n        /// Supply in peer-to-peer ///\\n\\n        // Match borrow peer-to-peer delta first if any.\\n        if (delta.p2pBorrowDelta > 0) {\\n            uint256 deltaInUnderlying = delta.p2pBorrowDelta.mul(vars.poolBorrowIndex);\\n            if (deltaInUnderlying > vars.remainingToSupply) {\\n                vars.toRepay += vars.remainingToSupply;\\n                delta.p2pBorrowDelta -= vars.remainingToSupply.div(vars.poolBorrowIndex);\\n                vars.remainingToSupply = 0;\\n            } else {\\n                vars.toRepay += deltaInUnderlying;\\n                delta.p2pBorrowDelta = 0;\\n                vars.remainingToSupply -= deltaInUnderlying;\\n            }\\n            emit P2PBorrowDeltaUpdated(_poolTokenAddress, delta.p2pBorrowDelta);\\n        }\\n\\n        // Match pool borrowers if any.\\n        if (\\n            vars.remainingToSupply > 0 &&\\n            !p2pDisabled[_poolTokenAddress] &&\\n            borrowersOnPool[_poolTokenAddress].getHead() != address(0)\\n        ) {\\n            (uint256 matched, ) = _matchBorrowers(\\n                _poolTokenAddress,\\n                vars.remainingToSupply,\\n                _maxGasForMatching\\n            ); // In underlying.\\n\\n            if (matched > 0) {\\n                vars.toRepay += matched;\\n                vars.remainingToSupply -= matched;\\n                delta.p2pBorrowAmount += matched.div(p2pBorrowIndex[_poolTokenAddress]);\\n            }\\n        }\\n\\n        if (vars.toRepay > 0) {\\n            uint256 toAddInP2P = vars.toRepay.div(p2pSupplyIndex[_poolTokenAddress]);\\n\\n            delta.p2pSupplyAmount += toAddInP2P;\\n            supplyBalanceInOf[_poolTokenAddress][_onBehalf].inP2P += toAddInP2P;\\n            _repayToPool(_poolTokenAddress, underlyingToken, vars.toRepay); // Reverts on error.\\n\\n            emit P2PAmountsUpdated(_poolTokenAddress, delta.p2pSupplyAmount, delta.p2pBorrowAmount);\\n        }\\n\\n        /// Supply on pool ///\\n\\n        if (vars.remainingToSupply > 0) {\\n            supplyBalanceInOf[_poolTokenAddress][_onBehalf].onPool += vars.remainingToSupply.div(\\n                ICToken(_poolTokenAddress).exchangeRateStored() // Exchange rate has already been updated.\\n            ); // In scaled balance.\\n            _supplyToPool(_poolTokenAddress, underlyingToken, vars.remainingToSupply); // Reverts on error.\\n        }\\n\\n        _updateSupplierInDS(_poolTokenAddress, _onBehalf);\\n\\n        emit Supplied(\\n            _supplier,\\n            _onBehalf,\\n            _poolTokenAddress,\\n            _amount,\\n            supplyBalanceInOf[_poolTokenAddress][_onBehalf].onPool,\\n            supplyBalanceInOf[_poolTokenAddress][_onBehalf].inP2P\\n        );\\n    }\\n\\n    /// @dev Implements borrow logic.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _amount The amount of token (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function borrowLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external {\\n        if (_amount == 0) revert AmountIsZero();\\n        _updateP2PIndexes(_poolTokenAddress);\\n\\n        _enterMarketIfNeeded(_poolTokenAddress, msg.sender);\\n        if (_isLiquidatable(msg.sender, _poolTokenAddress, 0, _amount)) revert UnauthorisedBorrow();\\n        ERC20 underlyingToken = _getUnderlying(_poolTokenAddress);\\n        uint256 remainingToBorrow = _amount;\\n        uint256 toWithdraw;\\n        Types.Delta storage delta = deltas[_poolTokenAddress];\\n        uint256 poolSupplyIndex = ICToken(_poolTokenAddress).exchangeRateStored(); // Exchange rate has already been updated.\\n        uint256 withdrawable = ICToken(_poolTokenAddress).balanceOfUnderlying(address(this)); // The balance on pool.\\n\\n        /// Borrow in peer-to-peer ///\\n\\n        // Match supply peer-to-peer delta first if any.\\n        if (delta.p2pSupplyDelta > 0) {\\n            uint256 deltaInUnderlying = delta.p2pSupplyDelta.mul(poolSupplyIndex);\\n            if (deltaInUnderlying > remainingToBorrow || deltaInUnderlying > withdrawable) {\\n                uint256 matchedDelta = CompoundMath.min(remainingToBorrow, withdrawable);\\n                toWithdraw += matchedDelta;\\n                delta.p2pSupplyDelta -= matchedDelta.div(poolSupplyIndex);\\n                remainingToBorrow -= matchedDelta;\\n            } else {\\n                toWithdraw += deltaInUnderlying;\\n                delta.p2pSupplyDelta = 0;\\n                remainingToBorrow -= deltaInUnderlying;\\n            }\\n\\n            emit P2PSupplyDeltaUpdated(_poolTokenAddress, delta.p2pSupplyDelta);\\n        }\\n\\n        // Match pool suppliers if any.\\n        if (\\n            remainingToBorrow > 0 &&\\n            !p2pDisabled[_poolTokenAddress] &&\\n            suppliersOnPool[_poolTokenAddress].getHead() != address(0)\\n        ) {\\n            (uint256 matched, ) = _matchSuppliers(\\n                _poolTokenAddress,\\n                CompoundMath.min(remainingToBorrow, withdrawable - toWithdraw),\\n                _maxGasForMatching\\n            ); // In underlying.\\n\\n            if (matched > 0) {\\n                toWithdraw += matched;\\n                remainingToBorrow -= matched;\\n                deltas[_poolTokenAddress].p2pSupplyAmount += matched.div(\\n                    p2pSupplyIndex[_poolTokenAddress]\\n                );\\n            }\\n        }\\n\\n        if (toWithdraw > 0) {\\n            uint256 toAddInP2P = toWithdraw.div(p2pBorrowIndex[_poolTokenAddress]); // In peer-to-peer unit.\\n\\n            deltas[_poolTokenAddress].p2pBorrowAmount += toAddInP2P;\\n            borrowBalanceInOf[_poolTokenAddress][msg.sender].inP2P += toAddInP2P;\\n            emit P2PAmountsUpdated(_poolTokenAddress, delta.p2pSupplyAmount, delta.p2pBorrowAmount);\\n\\n            // If this value is equal to 0 the withdraw will revert on Compound.\\n            if (toWithdraw.div(poolSupplyIndex) > 0)\\n                _withdrawFromPool(_poolTokenAddress, toWithdraw); // Reverts on error.\\n        }\\n\\n        /// Borrow on pool ///\\n\\n        if (remainingToBorrow > 0) {\\n            borrowBalanceInOf[_poolTokenAddress][msg.sender].onPool += remainingToBorrow.div(\\n                ICToken(_poolTokenAddress).borrowIndex()\\n            ); // In cdUnit.\\n            _borrowFromPool(_poolTokenAddress, remainingToBorrow);\\n        }\\n\\n        _updateBorrowerInDS(_poolTokenAddress, msg.sender);\\n        underlyingToken.safeTransfer(msg.sender, _amount);\\n\\n        emit Borrowed(\\n            msg.sender,\\n            _poolTokenAddress,\\n            _amount,\\n            borrowBalanceInOf[_poolTokenAddress][msg.sender].onPool,\\n            borrowBalanceInOf[_poolTokenAddress][msg.sender].inP2P\\n        );\\n    }\\n\\n    /// @dev Implements withdraw logic with security checks.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _amount The amount of token (in underlying).\\n    /// @param _supplier The address of the supplier.\\n    /// @param _receiver The address of the user who will receive the tokens.\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function withdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) external {\\n        if (_amount == 0) revert AmountIsZero();\\n        if (!userMembership[_poolTokenAddress][_supplier]) revert UserNotMemberOfMarket();\\n\\n        _updateP2PIndexes(_poolTokenAddress);\\n        uint256 toWithdraw = Math.min(\\n            _getUserSupplyBalanceInOf(_poolTokenAddress, _supplier),\\n            _amount\\n        );\\n\\n        if (_isLiquidatable(_supplier, _poolTokenAddress, toWithdraw, 0))\\n            revert UnauthorisedWithdraw();\\n\\n        _safeWithdrawLogic(_poolTokenAddress, toWithdraw, _supplier, _receiver, _maxGasForMatching);\\n    }\\n\\n    /// @dev Implements repay logic with security checks.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _repayer The address of the account repaying the debt.\\n    /// @param _onBehalf The address of the account whose debt is repaid.\\n    /// @param _amount The amount of token (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function repayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external {\\n        if (_amount == 0) revert AmountIsZero();\\n        if (!userMembership[_poolTokenAddress][_onBehalf]) revert UserNotMemberOfMarket();\\n\\n        _updateP2PIndexes(_poolTokenAddress);\\n        uint256 toRepay = Math.min(\\n            _getUserBorrowBalanceInOf(_poolTokenAddress, _onBehalf),\\n            _amount\\n        );\\n\\n        _safeRepayLogic(_poolTokenAddress, _repayer, _onBehalf, toRepay, _maxGasForMatching);\\n    }\\n\\n    /// @notice Liquidates a position.\\n    /// @param _poolTokenBorrowedAddress The address of the pool token the liquidator wants to repay.\\n    /// @param _poolTokenCollateralAddress The address of the collateral pool token the liquidator wants to seize.\\n    /// @param _borrower The address of the borrower to liquidate.\\n    /// @param _amount The amount of token (in underlying) to repay.\\n    function liquidateLogic(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external {\\n        if (\\n            !userMembership[_poolTokenBorrowedAddress][_borrower] ||\\n            !userMembership[_poolTokenCollateralAddress][_borrower]\\n        ) revert UserNotMemberOfMarket();\\n\\n        _updateP2PIndexes(_poolTokenBorrowedAddress);\\n        _updateP2PIndexes(_poolTokenCollateralAddress);\\n\\n        if (!_isLiquidatable(_borrower, address(0), 0, 0)) revert UnauthorisedLiquidate();\\n\\n        LiquidateVars memory vars;\\n        vars.borrowBalance = _getUserBorrowBalanceInOf(_poolTokenBorrowedAddress, _borrower);\\n\\n        if (_amount > vars.borrowBalance.mul(comptroller.closeFactorMantissa()))\\n            revert AmountAboveWhatAllowedToRepay(); // Same mechanism as Compound. Liquidator cannot repay more than part of the debt (cf close factor on Compound).\\n\\n        _safeRepayLogic(_poolTokenBorrowedAddress, msg.sender, _borrower, _amount, 0);\\n\\n        ICompoundOracle compoundOracle = ICompoundOracle(comptroller.oracle());\\n        vars.collateralPrice = compoundOracle.getUnderlyingPrice(_poolTokenCollateralAddress);\\n        vars.borrowedPrice = compoundOracle.getUnderlyingPrice(_poolTokenBorrowedAddress);\\n        if (vars.collateralPrice == 0 || vars.borrowedPrice == 0) revert CompoundOracleFailed();\\n\\n        // Compute the amount of collateral tokens to seize. This is the minimum between the repaid value plus the liquidation incentive and the available supply.\\n        vars.amountToSeize = Math.min(\\n            _amount.mul(comptroller.liquidationIncentiveMantissa()).mul(vars.borrowedPrice).div(\\n                vars.collateralPrice\\n            ),\\n            _getUserSupplyBalanceInOf(_poolTokenCollateralAddress, _borrower)\\n        );\\n\\n        _safeWithdrawLogic(\\n            _poolTokenCollateralAddress,\\n            vars.amountToSeize,\\n            _borrower,\\n            msg.sender,\\n            0\\n        );\\n\\n        emit Liquidated(\\n            msg.sender,\\n            _borrower,\\n            _poolTokenBorrowedAddress,\\n            _amount,\\n            _poolTokenCollateralAddress,\\n            vars.amountToSeize\\n        );\\n    }\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Implements withdraw logic without security checks.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _amount The amount of token (in underlying).\\n    /// @param _supplier The address of the supplier.\\n    /// @param _receiver The address of the user who will receive the tokens.\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function _safeWithdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) internal {\\n        if (_amount == 0) revert AmountIsZero();\\n\\n        WithdrawVars memory vars;\\n        vars.poolToken = ICToken(_poolTokenAddress);\\n        vars.underlyingToken = _getUnderlying(_poolTokenAddress);\\n        vars.remainingToWithdraw = _amount;\\n        vars.maxGasForMatching = _maxGasForMatching;\\n        vars.withdrawable = vars.poolToken.balanceOfUnderlying(address(this));\\n        vars.poolSupplyIndex = vars.poolToken.exchangeRateStored(); // Exchange rate has already been updated.\\n\\n        if (_amount.div(vars.poolSupplyIndex) == 0) revert WithdrawTooSmall();\\n\\n        /// Soft withdraw ///\\n\\n        uint256 onPoolSupply = supplyBalanceInOf[_poolTokenAddress][_supplier].onPool;\\n        if (onPoolSupply > 0) {\\n            uint256 maxToWithdrawOnPool = onPoolSupply.mul(vars.poolSupplyIndex);\\n\\n            if (\\n                maxToWithdrawOnPool > vars.remainingToWithdraw ||\\n                maxToWithdrawOnPool > vars.withdrawable\\n            ) {\\n                vars.toWithdraw = CompoundMath.min(vars.remainingToWithdraw, vars.withdrawable);\\n\\n                vars.remainingToWithdraw -= vars.toWithdraw;\\n                supplyBalanceInOf[_poolTokenAddress][_supplier].onPool -= vars.toWithdraw.div(\\n                    vars.poolSupplyIndex\\n                );\\n            } else {\\n                vars.toWithdraw = maxToWithdrawOnPool;\\n                vars.remainingToWithdraw -= maxToWithdrawOnPool;\\n                supplyBalanceInOf[_poolTokenAddress][_supplier].onPool = 0;\\n            }\\n\\n            _updateSupplierInDS(_poolTokenAddress, _supplier);\\n\\n            if (vars.remainingToWithdraw == 0) {\\n                _leaveMarketIfNeeded(_poolTokenAddress, _supplier);\\n\\n                // If this value is equal to 0 the withdraw will revert on Compound.\\n                if (vars.toWithdraw.div(vars.poolSupplyIndex) > 0)\\n                    _withdrawFromPool(_poolTokenAddress, vars.toWithdraw); // Reverts on error.\\n                vars.underlyingToken.safeTransfer(_receiver, _amount);\\n\\n                emit Withdrawn(\\n                    _supplier,\\n                    _receiver,\\n                    _poolTokenAddress,\\n                    _amount,\\n                    supplyBalanceInOf[_poolTokenAddress][_supplier].onPool,\\n                    supplyBalanceInOf[_poolTokenAddress][_supplier].inP2P\\n                );\\n\\n                return;\\n            }\\n        }\\n\\n        Types.Delta storage delta = deltas[_poolTokenAddress];\\n        vars.p2pSupplyIndex = p2pSupplyIndex[_poolTokenAddress];\\n\\n        supplyBalanceInOf[_poolTokenAddress][_supplier].inP2P -= CompoundMath.min(\\n            supplyBalanceInOf[_poolTokenAddress][_supplier].inP2P,\\n            vars.remainingToWithdraw.div(vars.p2pSupplyIndex)\\n        ); // In peer-to-peer unit\\n        _updateSupplierInDS(_poolTokenAddress, _supplier);\\n\\n        /// Transfer withdraw ///\\n\\n        // Reduce peer-to-peer supply delta first if any.\\n        if (vars.remainingToWithdraw > 0 && delta.p2pSupplyDelta > 0) {\\n            uint256 deltaInUnderlying = delta.p2pSupplyDelta.mul(vars.poolSupplyIndex);\\n\\n            if (\\n                deltaInUnderlying > vars.remainingToWithdraw ||\\n                deltaInUnderlying > vars.withdrawable - vars.toWithdraw\\n            ) {\\n                uint256 matchedDelta = CompoundMath.min(\\n                    vars.remainingToWithdraw,\\n                    vars.withdrawable - vars.toWithdraw\\n                );\\n\\n                delta.p2pSupplyDelta -= matchedDelta.div(vars.poolSupplyIndex);\\n                delta.p2pSupplyAmount -= matchedDelta.div(vars.p2pSupplyIndex);\\n                vars.toWithdraw += matchedDelta;\\n                vars.remainingToWithdraw -= matchedDelta;\\n            } else {\\n                vars.toWithdraw += deltaInUnderlying;\\n                vars.remainingToWithdraw -= deltaInUnderlying;\\n                delta.p2pSupplyDelta = 0;\\n                delta.p2pSupplyAmount -= deltaInUnderlying.div(vars.p2pSupplyIndex);\\n            }\\n\\n            emit P2PSupplyDeltaUpdated(_poolTokenAddress, delta.p2pSupplyDelta);\\n            emit P2PAmountsUpdated(_poolTokenAddress, delta.p2pSupplyAmount, delta.p2pBorrowAmount);\\n        }\\n\\n        // Match pool suppliers if any.\\n        if (\\n            vars.remainingToWithdraw > 0 &&\\n            !p2pDisabled[_poolTokenAddress] &&\\n            suppliersOnPool[_poolTokenAddress].getHead() != address(0)\\n        ) {\\n            (uint256 matched, uint256 gasConsumedInMatching) = _matchSuppliers(\\n                _poolTokenAddress,\\n                CompoundMath.min(vars.remainingToWithdraw, vars.withdrawable - vars.toWithdraw),\\n                vars.maxGasForMatching\\n            );\\n            if (vars.maxGasForMatching <= gasConsumedInMatching) vars.maxGasForMatching = 0;\\n            else vars.maxGasForMatching -= gasConsumedInMatching;\\n\\n            if (matched > 0) {\\n                vars.remainingToWithdraw -= matched;\\n                vars.toWithdraw += matched;\\n            }\\n        }\\n\\n        // If this value is equal to 0 the withdraw will revert on Compound.\\n        if (vars.toWithdraw.div(vars.poolSupplyIndex) > 0)\\n            _withdrawFromPool(_poolTokenAddress, vars.toWithdraw); // Reverts on error.\\n\\n        /// Hard withdraw ///\\n\\n        // Unmatch peer-to-peer borrowers.\\n        if (vars.remainingToWithdraw > 0) {\\n            uint256 unmatched = _unmatchBorrowers(\\n                _poolTokenAddress,\\n                vars.remainingToWithdraw,\\n                _maxGasForMatching\\n            );\\n\\n            // If unmatched does not cover remainingToWithdraw, the difference is added to the borrow peer-to-peer delta.\\n            if (unmatched < vars.remainingToWithdraw) {\\n                delta.p2pBorrowDelta += (vars.remainingToWithdraw - unmatched).div(\\n                    vars.poolToken.borrowIndex()\\n                );\\n                emit P2PBorrowDeltaUpdated(_poolTokenAddress, delta.p2pBorrowAmount);\\n            }\\n\\n            delta.p2pSupplyAmount -= vars.remainingToWithdraw.div(vars.p2pSupplyIndex);\\n            delta.p2pBorrowAmount -= unmatched.div(p2pBorrowIndex[_poolTokenAddress]);\\n            emit P2PAmountsUpdated(_poolTokenAddress, delta.p2pSupplyAmount, delta.p2pBorrowAmount);\\n\\n            _borrowFromPool(_poolTokenAddress, vars.remainingToWithdraw); // Reverts on error.\\n        }\\n\\n        _leaveMarketIfNeeded(_poolTokenAddress, _supplier);\\n        vars.underlyingToken.safeTransfer(_receiver, _amount);\\n\\n        emit Withdrawn(\\n            _supplier,\\n            _receiver,\\n            _poolTokenAddress,\\n            _amount,\\n            supplyBalanceInOf[_poolTokenAddress][_supplier].onPool,\\n            supplyBalanceInOf[_poolTokenAddress][_supplier].inP2P\\n        );\\n    }\\n\\n    /// @dev Implements repay logic without security checks.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _repayer The address of the account repaying the debt.\\n    /// @param _onBehalf The address of the account whose debt is repaid.\\n    /// @param _amount The amount of token (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function _safeRepayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) internal {\\n        ERC20 underlyingToken = _getUnderlying(_poolTokenAddress);\\n        underlyingToken.safeTransferFrom(_repayer, address(this), _amount);\\n\\n        RepayVars memory vars;\\n        vars.remainingToRepay = _amount;\\n        vars.maxGasForMatching = _maxGasForMatching;\\n        vars.poolBorrowIndex = ICToken(_poolTokenAddress).borrowIndex();\\n\\n        /// Soft repay ///\\n\\n        vars.borrowedOnPool = borrowBalanceInOf[_poolTokenAddress][_onBehalf].onPool;\\n        if (vars.borrowedOnPool > 0) {\\n            vars.maxToRepayOnPool = vars.borrowedOnPool.mul(vars.poolBorrowIndex);\\n\\n            if (vars.maxToRepayOnPool > vars.remainingToRepay) {\\n                vars.toRepay = vars.remainingToRepay;\\n\\n                borrowBalanceInOf[_poolTokenAddress][_onBehalf].onPool -= CompoundMath.min(\\n                    vars.borrowedOnPool,\\n                    vars.toRepay.div(vars.poolBorrowIndex)\\n                ); // In cdUnit.\\n                _updateBorrowerInDS(_poolTokenAddress, _onBehalf);\\n\\n                _repayToPool(_poolTokenAddress, underlyingToken, vars.toRepay); // Reverts on error.\\n                _leaveMarketIfNeeded(_poolTokenAddress, _onBehalf);\\n\\n                emit Repaid(\\n                    _repayer,\\n                    _onBehalf,\\n                    _poolTokenAddress,\\n                    _amount,\\n                    borrowBalanceInOf[_poolTokenAddress][_onBehalf].onPool,\\n                    borrowBalanceInOf[_poolTokenAddress][_onBehalf].inP2P\\n                );\\n\\n                return;\\n            } else {\\n                vars.toRepay = vars.maxToRepayOnPool;\\n                vars.remainingToRepay -= vars.toRepay;\\n\\n                borrowBalanceInOf[_poolTokenAddress][_onBehalf].onPool = 0;\\n                _updateBorrowerInDS(_poolTokenAddress, _onBehalf);\\n            }\\n        }\\n\\n        Types.Delta storage delta = deltas[_poolTokenAddress];\\n        vars.p2pSupplyIndex = p2pSupplyIndex[_poolTokenAddress];\\n        vars.p2pBorrowIndex = p2pBorrowIndex[_poolTokenAddress];\\n\\n        borrowBalanceInOf[_poolTokenAddress][_onBehalf].inP2P -= CompoundMath.min(\\n            borrowBalanceInOf[_poolTokenAddress][_onBehalf].inP2P,\\n            vars.remainingToRepay.div(vars.p2pBorrowIndex)\\n        ); // In peer-to-peer unit.\\n        _updateBorrowerInDS(_poolTokenAddress, _onBehalf);\\n\\n        /// Transfer repay ///\\n\\n        // Reduce peer-to-peer borrow delta first if any.\\n        if (vars.remainingToRepay > 0 && delta.p2pBorrowDelta > 0) {\\n            uint256 deltaInUnderlying = delta.p2pBorrowDelta.mul(vars.poolBorrowIndex);\\n            if (deltaInUnderlying > vars.remainingToRepay) {\\n                delta.p2pBorrowDelta -= vars.remainingToRepay.div(vars.poolBorrowIndex);\\n                delta.p2pBorrowAmount -= vars.remainingToRepay.div(vars.p2pBorrowIndex);\\n                vars.toRepay += vars.remainingToRepay;\\n                vars.remainingToRepay = 0;\\n            } else {\\n                delta.p2pBorrowDelta = 0;\\n                delta.p2pBorrowAmount -= deltaInUnderlying.div(vars.p2pBorrowIndex);\\n                vars.toRepay += deltaInUnderlying;\\n                vars.remainingToRepay -= deltaInUnderlying;\\n            }\\n\\n            emit P2PBorrowDeltaUpdated(_poolTokenAddress, delta.p2pBorrowDelta);\\n            emit P2PAmountsUpdated(_poolTokenAddress, delta.p2pSupplyAmount, delta.p2pBorrowAmount);\\n        }\\n\\n        // Repay the fee.\\n        if (vars.remainingToRepay > 0) {\\n            // Fee = (p2pBorrowAmount - p2pBorrowDelta) - (p2pSupplyAmount - p2pSupplyDelta).\\n            vars.feeToRepay = CompoundMath.safeSub(\\n                (delta.p2pBorrowAmount.mul(vars.p2pBorrowIndex) -\\n                    delta.p2pBorrowDelta.mul(vars.poolBorrowIndex)),\\n                (delta.p2pSupplyAmount.mul(vars.p2pSupplyIndex) -\\n                    delta.p2pSupplyDelta.mul(ICToken(_poolTokenAddress).exchangeRateStored()))\\n            );\\n\\n            if (vars.feeToRepay > 0) {\\n                uint256 feeRepaid = CompoundMath.min(vars.feeToRepay, vars.remainingToRepay);\\n                vars.remainingToRepay -= feeRepaid;\\n                delta.p2pBorrowAmount -= feeRepaid.div(vars.p2pBorrowIndex);\\n                emit P2PAmountsUpdated(\\n                    _poolTokenAddress,\\n                    delta.p2pSupplyAmount,\\n                    delta.p2pBorrowAmount\\n                );\\n            }\\n        }\\n\\n        // Match pool borrowers if any.\\n        if (\\n            vars.remainingToRepay > 0 &&\\n            !p2pDisabled[_poolTokenAddress] &&\\n            borrowersOnPool[_poolTokenAddress].getHead() != address(0)\\n        ) {\\n            (uint256 matched, uint256 gasConsumedInMatching) = _matchBorrowers(\\n                _poolTokenAddress,\\n                vars.remainingToRepay,\\n                vars.maxGasForMatching\\n            );\\n            if (vars.maxGasForMatching <= gasConsumedInMatching) vars.maxGasForMatching = 0;\\n            else vars.maxGasForMatching -= gasConsumedInMatching;\\n\\n            if (matched > 0) {\\n                vars.remainingToRepay -= matched;\\n                vars.toRepay += matched;\\n            }\\n        }\\n\\n        _repayToPool(_poolTokenAddress, underlyingToken, vars.toRepay); // Reverts on error.\\n\\n        /// Hard repay ///\\n\\n        // Unmatch peer-to-peer suppliers.\\n        if (vars.remainingToRepay > 0) {\\n            uint256 unmatched = _unmatchSuppliers(\\n                _poolTokenAddress,\\n                vars.remainingToRepay,\\n                vars.maxGasForMatching\\n            );\\n\\n            // If unmatched does not cover remainingToRepay, the difference is added to the supply peer-to-peer delta.\\n            if (unmatched < vars.remainingToRepay) {\\n                delta.p2pSupplyDelta += (vars.remainingToRepay - unmatched).div(\\n                    ICToken(_poolTokenAddress).exchangeRateStored() // Exchange rate has already been updated.\\n                );\\n                emit P2PSupplyDeltaUpdated(_poolTokenAddress, delta.p2pBorrowDelta);\\n            }\\n\\n            delta.p2pSupplyAmount -= unmatched.div(vars.p2pSupplyIndex);\\n            delta.p2pBorrowAmount -= vars.remainingToRepay.div(vars.p2pBorrowIndex);\\n            emit P2PAmountsUpdated(_poolTokenAddress, delta.p2pSupplyAmount, delta.p2pBorrowAmount);\\n\\n            _supplyToPool(_poolTokenAddress, underlyingToken, vars.remainingToRepay); // Reverts on error.\\n        }\\n\\n        _leaveMarketIfNeeded(_poolTokenAddress, _onBehalf);\\n\\n        emit Repaid(\\n            _repayer,\\n            _onBehalf,\\n            _poolTokenAddress,\\n            _amount,\\n            borrowBalanceInOf[_poolTokenAddress][_onBehalf].onPool,\\n            borrowBalanceInOf[_poolTokenAddress][_onBehalf].inP2P\\n        );\\n    }\\n\\n    /// @dev Supplies underlying tokens to Compound.\\n    /// @param _poolTokenAddress The address of the pool token.\\n    /// @param _underlyingToken The underlying token of the market to supply to.\\n    /// @param _amount The amount of token (in underlying).\\n    function _supplyToPool(\\n        address _poolTokenAddress,\\n        ERC20 _underlyingToken,\\n        uint256 _amount\\n    ) internal {\\n        if (_poolTokenAddress == cEth) {\\n            IWETH(wEth).withdraw(_amount); // Turn wETH into ETH.\\n            ICEther(_poolTokenAddress).mint{value: _amount}();\\n        } else {\\n            _underlyingToken.safeApprove(_poolTokenAddress, _amount);\\n            if (ICToken(_poolTokenAddress).mint(_amount) != 0) revert MintOnCompoundFailed();\\n        }\\n    }\\n\\n    /// @dev Withdraws underlying tokens from Compound.\\n    /// @param _poolTokenAddress The address of the pool token.\\n    /// @param _amount The amount of token (in underlying).\\n    function _withdrawFromPool(address _poolTokenAddress, uint256 _amount) internal {\\n        if (ICToken(_poolTokenAddress).redeemUnderlying(_amount) != 0)\\n            revert RedeemOnCompoundFailed();\\n        if (_poolTokenAddress == cEth) IWETH(address(wEth)).deposit{value: _amount}(); // Turn the ETH received in wETH.\\n    }\\n\\n    /// @dev Borrows underlying tokens from Compound.\\n    /// @param _poolTokenAddress The address of the pool token.\\n    /// @param _amount The amount of token (in underlying).\\n    function _borrowFromPool(address _poolTokenAddress, uint256 _amount) internal {\\n        if ((ICToken(_poolTokenAddress).borrow(_amount) != 0)) revert BorrowOnCompoundFailed();\\n        if (_poolTokenAddress == cEth) IWETH(address(wEth)).deposit{value: _amount}(); // Turn the ETH received in wETH.\\n    }\\n\\n    /// @dev Repays underlying tokens to Compound.\\n    /// @param _poolTokenAddress The address of the pool token.\\n    /// @param _underlyingToken The underlying token of the market to repay to.\\n    /// @param _amount The amount of token (in underlying).\\n    function _repayToPool(\\n        address _poolTokenAddress,\\n        ERC20 _underlyingToken,\\n        uint256 _amount\\n    ) internal {\\n        // Repay only what is necessary. The remaining tokens stays on the contracts and are claimable by the DAO.\\n        _amount = Math.min(\\n            _amount,\\n            ICToken(_poolTokenAddress).borrowBalanceCurrent(address(this)) // The debt of the contract.\\n        );\\n\\n        if (_amount > 0) {\\n            if (_poolTokenAddress == cEth) {\\n                IWETH(wEth).withdraw(_amount); // Turn wETH into ETH.\\n                ICEther(_poolTokenAddress).repayBorrow{value: _amount}();\\n            } else {\\n                _underlyingToken.safeApprove(_poolTokenAddress, _amount);\\n                if (ICToken(_poolTokenAddress).repayBorrow(_amount) != 0)\\n                    revert RepayOnCompoundFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Enters the user into the market if not already there.\\n    /// @param _user The address of the user to update.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    function _enterMarketIfNeeded(address _poolTokenAddress, address _user) internal {\\n        if (!userMembership[_poolTokenAddress][_user]) {\\n            userMembership[_poolTokenAddress][_user] = true;\\n            enteredMarkets[_user].push(_poolTokenAddress);\\n        }\\n    }\\n\\n    /// @dev Removes the user from the market if its balances are null.\\n    /// @param _user The address of the user to update.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    function _leaveMarketIfNeeded(address _poolTokenAddress, address _user) internal {\\n        if (\\n            userMembership[_poolTokenAddress][_user] &&\\n            supplyBalanceInOf[_poolTokenAddress][_user].inP2P == 0 &&\\n            supplyBalanceInOf[_poolTokenAddress][_user].onPool == 0 &&\\n            borrowBalanceInOf[_poolTokenAddress][_user].inP2P == 0 &&\\n            borrowBalanceInOf[_poolTokenAddress][_user].onPool == 0\\n        ) {\\n            uint256 index;\\n            while (enteredMarkets[_user][index] != _poolTokenAddress) {\\n                unchecked {\\n                    ++index;\\n                }\\n            }\\n            userMembership[_poolTokenAddress][_user] = false;\\n\\n            uint256 length = enteredMarkets[_user].length;\\n            if (index != length - 1)\\n                enteredMarkets[_user][index] = enteredMarkets[_user][length - 1];\\n            enteredMarkets[_user].pop();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IPositionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IPositionsManager {\\n    function supplyLogic(\\n        address _poolTokenAddress,\\n        address _supplier,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function borrowLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function withdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function repayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function liquidateLogic(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/MatchingEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./MorphoUtils.sol\\\";\\n\\n/// @title MatchingEngine.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Smart contract managing the matching engine.\\ncontract MatchingEngine is MorphoUtils {\\n    using DoubleLinkedList for DoubleLinkedList.List;\\n    using CompoundMath for uint256;\\n\\n    /// STRUCTS ///\\n\\n    // Struct to avoid stack too deep.\\n    struct UnmatchVars {\\n        uint256 p2pIndex;\\n        uint256 toUnmatch;\\n        uint256 poolIndex;\\n        uint256 inUnderlying;\\n        uint256 gasLeftAtTheBeginning;\\n    }\\n\\n    // Struct to avoid stack too deep.\\n    struct MatchVars {\\n        uint256 p2pIndex;\\n        uint256 toMatch;\\n        uint256 poolIndex;\\n        uint256 inUnderlying;\\n        uint256 gasLeftAtTheBeginning;\\n    }\\n\\n    /// @notice Emitted when the position of a supplier is updated.\\n    /// @param _user The address of the supplier.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _balanceOnPool The supply balance on pool after update.\\n    /// @param _balanceInP2P The supply balance in peer-to-peer after update.\\n    event SupplierPositionUpdated(\\n        address indexed _user,\\n        address indexed _poolTokenAddress,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P\\n    );\\n\\n    /// @notice Emitted when the position of a borrower is updated.\\n    /// @param _user The address of the borrower.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _balanceOnPool The borrow balance on pool after update.\\n    /// @param _balanceInP2P The borrow balance in peer-to-peer after update.\\n    event BorrowerPositionUpdated(\\n        address indexed _user,\\n        address indexed _poolTokenAddress,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P\\n    );\\n\\n    /// INTERNAL ///\\n\\n    /// @notice Matches suppliers' liquidity waiting on Compound up to the given `_amount` and moves it to peer-to-peer.\\n    /// @dev Note: This function expects Compound's exchange rate and peer-to-peer indexes to have been updated.\\n    /// @param _poolTokenAddress The address of the market from which to match suppliers.\\n    /// @param _amount The token amount to search for (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    /// @return matched The amount of liquidity matched (in underlying).\\n    /// @return gasConsumedInMatching The amount of gas consumed within the matching loop.\\n    function _matchSuppliers(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) internal returns (uint256 matched, uint256 gasConsumedInMatching) {\\n        if (_maxGasForMatching == 0) return (0, 0);\\n\\n        MatchVars memory vars;\\n        vars.poolIndex = ICToken(_poolTokenAddress).exchangeRateStored(); // Exchange rate has already been updated.\\n        vars.p2pIndex = p2pSupplyIndex[_poolTokenAddress];\\n        address firstPoolSupplier;\\n        Types.SupplyBalance storage firstPoolSupplierBalance;\\n\\n        vars.gasLeftAtTheBeginning = gasleft();\\n        while (\\n            matched < _amount &&\\n            (firstPoolSupplier = suppliersOnPool[_poolTokenAddress].getHead()) != address(0) &&\\n            vars.gasLeftAtTheBeginning - gasleft() < _maxGasForMatching\\n        ) {\\n            firstPoolSupplierBalance = supplyBalanceInOf[_poolTokenAddress][firstPoolSupplier];\\n            vars.inUnderlying = firstPoolSupplierBalance.onPool.mul(vars.poolIndex);\\n\\n            uint256 newPoolBorrowBalance;\\n            uint256 newP2PBorrowBalance;\\n            uint256 maxToMatch = _amount - matched;\\n\\n            if (vars.inUnderlying <= maxToMatch) {\\n                // newPoolBorrowBalance is 0.\\n                newP2PBorrowBalance =\\n                    firstPoolSupplierBalance.inP2P +\\n                    vars.inUnderlying.div(vars.p2pIndex);\\n                matched += vars.inUnderlying;\\n            } else {\\n                newPoolBorrowBalance =\\n                    firstPoolSupplierBalance.onPool -\\n                    maxToMatch.div(vars.poolIndex);\\n                newP2PBorrowBalance =\\n                    firstPoolSupplierBalance.inP2P +\\n                    maxToMatch.div(vars.p2pIndex);\\n                matched = _amount;\\n            }\\n\\n            firstPoolSupplierBalance.onPool = newPoolBorrowBalance;\\n            firstPoolSupplierBalance.inP2P = newP2PBorrowBalance;\\n            _updateSupplierInDS(_poolTokenAddress, firstPoolSupplier);\\n\\n            emit SupplierPositionUpdated(\\n                firstPoolSupplier,\\n                _poolTokenAddress,\\n                newPoolBorrowBalance,\\n                newP2PBorrowBalance\\n            );\\n        }\\n\\n        gasConsumedInMatching = vars.gasLeftAtTheBeginning - gasleft();\\n    }\\n\\n    /// @notice Unmatches suppliers' liquidity in peer-to-peer up to the given `_amount` and moves it to Compound.\\n    /// @dev Note: This function expects Compound's exchange rate and peer-to-peer indexes to have been updated.\\n    /// @param _poolTokenAddress The address of the market from which to unmatch suppliers.\\n    /// @param _amount The amount to search for (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    /// @return The amount unmatched (in underlying).\\n    function _unmatchSuppliers(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) internal returns (uint256) {\\n        if (_maxGasForMatching == 0) return 0;\\n\\n        UnmatchVars memory vars;\\n        vars.poolIndex = ICToken(_poolTokenAddress).exchangeRateStored(); // Exchange rate has already been updated.\\n        vars.p2pIndex = p2pSupplyIndex[_poolTokenAddress];\\n        address firstP2PSupplier;\\n        Types.SupplyBalance storage firstP2PSupplierBalance;\\n        uint256 remainingToUnmatch = _amount;\\n\\n        vars.gasLeftAtTheBeginning = gasleft();\\n        while (\\n            remainingToUnmatch > 0 &&\\n            (firstP2PSupplier = suppliersInP2P[_poolTokenAddress].getHead()) != address(0) &&\\n            vars.gasLeftAtTheBeginning - gasleft() < _maxGasForMatching\\n        ) {\\n            firstP2PSupplierBalance = supplyBalanceInOf[_poolTokenAddress][firstP2PSupplier];\\n            vars.inUnderlying = firstP2PSupplierBalance.inP2P.mul(vars.p2pIndex);\\n\\n            uint256 newPoolBorrowBalance;\\n            uint256 newP2PBorrowBalance;\\n\\n            if (vars.inUnderlying <= remainingToUnmatch) {\\n                // newP2PBorrowBalance is 0.\\n                newPoolBorrowBalance =\\n                    firstP2PSupplierBalance.onPool +\\n                    vars.inUnderlying.div(vars.poolIndex);\\n                remainingToUnmatch -= vars.inUnderlying;\\n            } else {\\n                newPoolBorrowBalance =\\n                    firstP2PSupplierBalance.onPool +\\n                    remainingToUnmatch.div(vars.poolIndex);\\n                newP2PBorrowBalance =\\n                    firstP2PSupplierBalance.inP2P -\\n                    remainingToUnmatch.div(vars.p2pIndex);\\n                remainingToUnmatch = 0;\\n            }\\n\\n            firstP2PSupplierBalance.onPool = newPoolBorrowBalance;\\n            firstP2PSupplierBalance.inP2P = newP2PBorrowBalance;\\n            _updateSupplierInDS(_poolTokenAddress, firstP2PSupplier);\\n\\n            emit SupplierPositionUpdated(\\n                firstP2PSupplier,\\n                _poolTokenAddress,\\n                newPoolBorrowBalance,\\n                newP2PBorrowBalance\\n            );\\n        }\\n\\n        return _amount - remainingToUnmatch;\\n    }\\n\\n    /// @notice Matches borrowers' liquidity waiting on Compound up to the given `_amount` and moves it to peer-to-peer.\\n    /// @dev Note: This function expects peer-to-peer indexes to have been updated..\\n    /// @param _poolTokenAddress The address of the market from which to match borrowers.\\n    /// @param _amount The amount to search for (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    /// @return matched The amount of liquidity matched (in underlying).\\n    /// @return gasConsumedInMatching The amount of gas consumed within the matching loop.\\n    function _matchBorrowers(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) internal returns (uint256 matched, uint256 gasConsumedInMatching) {\\n        if (_maxGasForMatching == 0) return (0, 0);\\n\\n        MatchVars memory vars;\\n        vars.poolIndex = ICToken(_poolTokenAddress).borrowIndex();\\n        vars.p2pIndex = p2pBorrowIndex[_poolTokenAddress];\\n        address firstPoolBorrower;\\n        Types.BorrowBalance storage firstPoolBorrowerBalance;\\n\\n        vars.gasLeftAtTheBeginning = gasleft();\\n        while (\\n            matched < _amount &&\\n            (firstPoolBorrower = borrowersOnPool[_poolTokenAddress].getHead()) != address(0) &&\\n            vars.gasLeftAtTheBeginning - gasleft() < _maxGasForMatching\\n        ) {\\n            firstPoolBorrowerBalance = borrowBalanceInOf[_poolTokenAddress][firstPoolBorrower];\\n            vars.inUnderlying = firstPoolBorrowerBalance.onPool.mul(vars.poolIndex);\\n\\n            uint256 newPoolBorrowBalance;\\n            uint256 newP2PBorrowBalance;\\n            uint256 maxToMatch = _amount - matched;\\n\\n            if (vars.inUnderlying <= maxToMatch) {\\n                // newPoolBorrowBalance is 0.\\n                newP2PBorrowBalance =\\n                    firstPoolBorrowerBalance.inP2P +\\n                    vars.inUnderlying.div(vars.p2pIndex);\\n                matched += vars.inUnderlying;\\n            } else {\\n                newPoolBorrowBalance =\\n                    firstPoolBorrowerBalance.onPool -\\n                    maxToMatch.div(vars.poolIndex);\\n                newP2PBorrowBalance =\\n                    firstPoolBorrowerBalance.inP2P +\\n                    maxToMatch.div(vars.p2pIndex);\\n                matched = _amount;\\n            }\\n\\n            firstPoolBorrowerBalance.onPool = newPoolBorrowBalance;\\n            firstPoolBorrowerBalance.inP2P = newP2PBorrowBalance;\\n            _updateBorrowerInDS(_poolTokenAddress, firstPoolBorrower);\\n\\n            emit BorrowerPositionUpdated(\\n                firstPoolBorrower,\\n                _poolTokenAddress,\\n                newPoolBorrowBalance,\\n                newP2PBorrowBalance\\n            );\\n        }\\n\\n        gasConsumedInMatching = vars.gasLeftAtTheBeginning - gasleft();\\n    }\\n\\n    /// @notice Unmatches borrowers' liquidity in peer-to-peer for the given `_amount` and moves it to Compound.\\n    /// @dev Note: This function expects and peer-to-peer indexes to have been updated.\\n    /// @param _poolTokenAddress The address of the market from which to unmatch borrowers.\\n    /// @param _amount The amount to unmatch (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    /// @return The amount unmatched (in underlying).\\n    function _unmatchBorrowers(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) internal returns (uint256) {\\n        if (_maxGasForMatching == 0) return 0;\\n\\n        UnmatchVars memory vars;\\n        vars.poolIndex = ICToken(_poolTokenAddress).borrowIndex();\\n        vars.p2pIndex = p2pBorrowIndex[_poolTokenAddress];\\n        address firstP2PBorrower;\\n        Types.BorrowBalance storage firstP2PBorrowerBalance;\\n        uint256 remainingToUnmatch = _amount;\\n\\n        vars.gasLeftAtTheBeginning = gasleft();\\n        while (\\n            remainingToUnmatch > 0 &&\\n            (firstP2PBorrower = borrowersInP2P[_poolTokenAddress].getHead()) != address(0) &&\\n            vars.gasLeftAtTheBeginning - gasleft() < _maxGasForMatching\\n        ) {\\n            firstP2PBorrowerBalance = borrowBalanceInOf[_poolTokenAddress][firstP2PBorrower];\\n            vars.inUnderlying = firstP2PBorrowerBalance.inP2P.mul(vars.p2pIndex);\\n\\n            uint256 newPoolBorrowBalance;\\n            uint256 newP2PBorrowBalance;\\n\\n            if (vars.inUnderlying <= remainingToUnmatch) {\\n                // newP2PBorrowBalance is 0.\\n                newPoolBorrowBalance =\\n                    firstP2PBorrowerBalance.onPool +\\n                    vars.inUnderlying.div(vars.poolIndex);\\n                remainingToUnmatch -= vars.inUnderlying;\\n            } else {\\n                newPoolBorrowBalance =\\n                    firstP2PBorrowerBalance.onPool +\\n                    remainingToUnmatch.div(vars.poolIndex);\\n                newP2PBorrowBalance =\\n                    firstP2PBorrowerBalance.inP2P -\\n                    remainingToUnmatch.div(vars.p2pIndex);\\n                remainingToUnmatch = 0;\\n            }\\n\\n            firstP2PBorrowerBalance.onPool = newPoolBorrowBalance;\\n            firstP2PBorrowerBalance.inP2P = newP2PBorrowBalance;\\n            _updateBorrowerInDS(_poolTokenAddress, firstP2PBorrower);\\n\\n            emit BorrowerPositionUpdated(\\n                firstP2PBorrower,\\n                _poolTokenAddress,\\n                newPoolBorrowBalance,\\n                newP2PBorrowBalance\\n            );\\n        }\\n\\n        return _amount - remainingToUnmatch;\\n    }\\n\\n    /// @notice Updates `_user` in the supplier data structures.\\n    /// @param _poolTokenAddress The address of the market on which to update the suppliers data structure.\\n    /// @param _user The address of the user.\\n    function _updateSupplierInDS(address _poolTokenAddress, address _user) internal {\\n        uint256 onPool = supplyBalanceInOf[_poolTokenAddress][_user].onPool;\\n        uint256 inP2P = supplyBalanceInOf[_poolTokenAddress][_user].inP2P;\\n        uint256 formerValueOnPool = suppliersOnPool[_poolTokenAddress].getValueOf(_user);\\n        uint256 formerValueInP2P = suppliersInP2P[_poolTokenAddress].getValueOf(_user);\\n\\n        // Round pool balance to 0 if below threshold.\\n        if (onPool <= dustThreshold) {\\n            supplyBalanceInOf[_poolTokenAddress][_user].onPool = 0;\\n            onPool = 0;\\n        }\\n        if (formerValueOnPool != onPool) {\\n            if (formerValueOnPool > 0) suppliersOnPool[_poolTokenAddress].remove(_user);\\n            if (onPool > 0)\\n                suppliersOnPool[_poolTokenAddress].insertSorted(_user, onPool, maxSortedUsers);\\n        }\\n\\n        // Round peer-to-peer balance to 0 if below threshold.\\n        if (inP2P <= dustThreshold) {\\n            supplyBalanceInOf[_poolTokenAddress][_user].inP2P = 0;\\n            inP2P = 0;\\n        }\\n        if (formerValueInP2P != inP2P) {\\n            if (formerValueInP2P > 0) suppliersInP2P[_poolTokenAddress].remove(_user);\\n            if (inP2P > 0)\\n                suppliersInP2P[_poolTokenAddress].insertSorted(_user, inP2P, maxSortedUsers);\\n        }\\n\\n        if (address(rewardsManager) != address(0))\\n            rewardsManager.accrueUserSupplyUnclaimedRewards(\\n                _user,\\n                _poolTokenAddress,\\n                formerValueOnPool\\n            );\\n    }\\n\\n    /// @notice Updates `_user` in the borrower data structures.\\n    /// @param _poolTokenAddress The address of the market on which to update the borrowers data structure.\\n    /// @param _user The address of the user.\\n    function _updateBorrowerInDS(address _poolTokenAddress, address _user) internal {\\n        uint256 onPool = borrowBalanceInOf[_poolTokenAddress][_user].onPool;\\n        uint256 inP2P = borrowBalanceInOf[_poolTokenAddress][_user].inP2P;\\n        uint256 formerValueOnPool = borrowersOnPool[_poolTokenAddress].getValueOf(_user);\\n        uint256 formerValueInP2P = borrowersInP2P[_poolTokenAddress].getValueOf(_user);\\n\\n        // Round pool balance to 0 if below threshold.\\n        if (onPool <= dustThreshold) {\\n            borrowBalanceInOf[_poolTokenAddress][_user].onPool = 0;\\n            onPool = 0;\\n        }\\n        if (formerValueOnPool != onPool) {\\n            if (formerValueOnPool > 0) borrowersOnPool[_poolTokenAddress].remove(_user);\\n            if (onPool > 0)\\n                borrowersOnPool[_poolTokenAddress].insertSorted(_user, onPool, maxSortedUsers);\\n        }\\n\\n        // Round peer-to-peer balance to 0 if below threshold.\\n        if (inP2P <= dustThreshold) {\\n            borrowBalanceInOf[_poolTokenAddress][_user].inP2P = 0;\\n            inP2P = 0;\\n        }\\n        if (formerValueInP2P != inP2P) {\\n            if (formerValueInP2P > 0) borrowersInP2P[_poolTokenAddress].remove(_user);\\n            if (inP2P > 0)\\n                borrowersInP2P[_poolTokenAddress].insertSorted(_user, inP2P, maxSortedUsers);\\n        }\\n\\n        if (address(rewardsManager) != address(0))\\n            rewardsManager.accrueUserBorrowUnclaimedRewards(\\n                _user,\\n                _poolTokenAddress,\\n                formerValueOnPool\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/MorphoUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./libraries/CompoundMath.sol\\\";\\nimport \\\"../common/libraries/DelegateCall.sol\\\";\\n\\nimport \\\"./MorphoStorage.sol\\\";\\n\\n/// @title MorphoUtils.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Modifiers, getters and other util functions for Morpho.\\nabstract contract MorphoUtils is MorphoStorage {\\n    using DoubleLinkedList for DoubleLinkedList.List;\\n    using CompoundMath for uint256;\\n    using DelegateCall for address;\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the Compound's oracle failed.\\n    error CompoundOracleFailed();\\n\\n    /// @notice Thrown when the market is not created yet.\\n    error MarketNotCreated();\\n\\n    /// @notice Thrown when the market is paused.\\n    error MarketPaused();\\n\\n    /// MODIFIERS ///\\n\\n    /// @notice Prevents to update a market not created yet.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    modifier isMarketCreated(address _poolTokenAddress) {\\n        if (!marketStatus[_poolTokenAddress].isCreated) revert MarketNotCreated();\\n        _;\\n    }\\n\\n    /// @notice Prevents a user to trigger a function when market is not created or paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    modifier isMarketCreatedAndNotPaused(address _poolTokenAddress) {\\n        Types.MarketStatus memory marketStatus_ = marketStatus[_poolTokenAddress];\\n        if (!marketStatus_.isCreated) revert MarketNotCreated();\\n        if (marketStatus_.isPaused) revert MarketPaused();\\n        _;\\n    }\\n\\n    /// @notice Prevents a user to trigger a function when market is not created or paused or partial paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    modifier isMarketCreatedAndNotPausedNorPartiallyPaused(address _poolTokenAddress) {\\n        Types.MarketStatus memory marketStatus_ = marketStatus[_poolTokenAddress];\\n        if (!marketStatus_.isCreated) revert MarketNotCreated();\\n        if (marketStatus_.isPaused || marketStatus_.isPartiallyPaused) revert MarketPaused();\\n        _;\\n    }\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Returns all markets entered by a given user.\\n    /// @param _user The address of the user.\\n    /// @return enteredMarkets_ The list of markets entered by this user.\\n    function getEnteredMarkets(address _user)\\n        external\\n        view\\n        returns (address[] memory enteredMarkets_)\\n    {\\n        return enteredMarkets[_user];\\n    }\\n\\n    /// @notice Returns all created markets.\\n    /// @return marketsCreated_ The list of market addresses.\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_) {\\n        return marketsCreated;\\n    }\\n\\n    /// @notice Gets the head of the data structure on a specific market (for UI).\\n    /// @param _poolTokenAddress The address of the market from which to get the head.\\n    /// @param _positionType The type of user from which to get the head.\\n    /// @return head The head in the data structure.\\n    function getHead(address _poolTokenAddress, Types.PositionType _positionType)\\n        external\\n        view\\n        returns (address head)\\n    {\\n        if (_positionType == Types.PositionType.SUPPLIERS_IN_P2P)\\n            head = suppliersInP2P[_poolTokenAddress].getHead();\\n        else if (_positionType == Types.PositionType.SUPPLIERS_ON_POOL)\\n            head = suppliersOnPool[_poolTokenAddress].getHead();\\n        else if (_positionType == Types.PositionType.BORROWERS_IN_P2P)\\n            head = borrowersInP2P[_poolTokenAddress].getHead();\\n        else if (_positionType == Types.PositionType.BORROWERS_ON_POOL)\\n            head = borrowersOnPool[_poolTokenAddress].getHead();\\n    }\\n\\n    /// @notice Gets the next user after `_user` in the data structure on a specific market (for UI).\\n    /// @param _poolTokenAddress The address of the market from which to get the user.\\n    /// @param _positionType The type of user from which to get the next user.\\n    /// @param _user The address of the user from which to get the next user.\\n    /// @return next The next user in the data structure.\\n    function getNext(\\n        address _poolTokenAddress,\\n        Types.PositionType _positionType,\\n        address _user\\n    ) external view returns (address next) {\\n        if (_positionType == Types.PositionType.SUPPLIERS_IN_P2P)\\n            next = suppliersInP2P[_poolTokenAddress].getNext(_user);\\n        else if (_positionType == Types.PositionType.SUPPLIERS_ON_POOL)\\n            next = suppliersOnPool[_poolTokenAddress].getNext(_user);\\n        else if (_positionType == Types.PositionType.BORROWERS_IN_P2P)\\n            next = borrowersInP2P[_poolTokenAddress].getNext(_user);\\n        else if (_positionType == Types.PositionType.BORROWERS_ON_POOL)\\n            next = borrowersOnPool[_poolTokenAddress].getNext(_user);\\n    }\\n\\n    /// @notice Updates the peer-to-peer indexes.\\n    /// @dev Note: This function updates the exchange rate on Compound. As a consequence only a call to exchangeRatesStored() is necessary to get the most up to date exchange rate.\\n    /// @param _poolTokenAddress The address of the market to update.\\n    function updateP2PIndexes(address _poolTokenAddress)\\n        external\\n        isMarketCreated(_poolTokenAddress)\\n    {\\n        _updateP2PIndexes(_poolTokenAddress);\\n    }\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Updates the peer-to-peer indexes.\\n    /// @dev Note: This function updates the exchange rate on Compound. As a consequence only a call to exchangeRatesStored() is necessary to get the most up to date exchange rate.\\n    /// @param _poolTokenAddress The address of the market to update.\\n    function _updateP2PIndexes(address _poolTokenAddress) internal {\\n        address(interestRatesManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                interestRatesManager.updateP2PIndexes.selector,\\n                _poolTokenAddress\\n            )\\n        );\\n    }\\n\\n    /// @dev Checks whether the user has enough collateral to maintain such a borrow position.\\n    /// @param _user The user to check.\\n    /// @param _poolTokenAddress The market to hypothetically withdraw/borrow in.\\n    /// @param _withdrawnAmount The amount of tokens to hypothetically withdraw (in underlying).\\n    /// @param _borrowedAmount The amount of tokens to hypothetically borrow (in underlying).\\n    function _isLiquidatable(\\n        address _user,\\n        address _poolTokenAddress,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    ) internal returns (bool) {\\n        ICompoundOracle oracle = ICompoundOracle(comptroller.oracle());\\n        uint256 numberOfEnteredMarkets = enteredMarkets[_user].length;\\n\\n        Types.AssetLiquidityData memory assetData;\\n        uint256 maxDebtValue;\\n        uint256 debtValue;\\n        uint256 i;\\n\\n        while (i < numberOfEnteredMarkets) {\\n            address poolTokenEntered = enteredMarkets[_user][i];\\n\\n            if (_poolTokenAddress != poolTokenEntered) {\\n                _updateP2PIndexes(poolTokenEntered);\\n\\n                assetData = _getUserLiquidityDataForAsset(_user, poolTokenEntered, oracle);\\n                maxDebtValue += assetData.maxDebtValue;\\n                debtValue += assetData.debtValue;\\n            } else {\\n                // No need to call `_updateP2PIndexes()` as it has already been called before.\\n                assetData = _getUserLiquidityDataForAsset(_user, poolTokenEntered, oracle);\\n                maxDebtValue += assetData.maxDebtValue;\\n                debtValue += assetData.debtValue;\\n\\n                if (_borrowedAmount > 0)\\n                    debtValue += _borrowedAmount.mul(assetData.underlyingPrice);\\n\\n                if (_withdrawnAmount > 0)\\n                    maxDebtValue -= _withdrawnAmount.mul(assetData.underlyingPrice).mul(\\n                        assetData.collateralFactor\\n                    );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return debtValue > maxDebtValue;\\n    }\\n\\n    /// @notice Returns the data related to `_poolTokenAddress` for the `_user`.\\n    /// @dev Note: Must be called after calling `_updateP2PIndexes()` to have the most up-to-date indexes.\\n    /// @param _user The user to determine data for.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _oracle The oracle used.\\n    /// @return assetData The data related to this asset.\\n    function _getUserLiquidityDataForAsset(\\n        address _user,\\n        address _poolTokenAddress,\\n        ICompoundOracle _oracle\\n    ) internal view returns (Types.AssetLiquidityData memory assetData) {\\n        assetData.underlyingPrice = _oracle.getUnderlyingPrice(_poolTokenAddress);\\n        if (assetData.underlyingPrice == 0) revert CompoundOracleFailed();\\n        (, assetData.collateralFactor, ) = comptroller.markets(_poolTokenAddress);\\n\\n        assetData.collateralValue = _getUserSupplyBalanceInOf(_poolTokenAddress, _user).mul(\\n            assetData.underlyingPrice\\n        );\\n        assetData.debtValue = _getUserBorrowBalanceInOf(_poolTokenAddress, _user).mul(\\n            assetData.underlyingPrice\\n        );\\n        assetData.maxDebtValue = assetData.collateralValue.mul(assetData.collateralFactor);\\n    }\\n\\n    /// @dev Returns the supply balance of `_user` in the `_poolTokenAddress` market.\\n    /// @dev Note: Compute the result with the index stored and not the most up to date one.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the supply amount.\\n    /// @return The supply balance of the user (in underlying).\\n    function _getUserSupplyBalanceInOf(address _poolTokenAddress, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            supplyBalanceInOf[_poolTokenAddress][_user].inP2P.mul(\\n                p2pSupplyIndex[_poolTokenAddress]\\n            ) +\\n            supplyBalanceInOf[_poolTokenAddress][_user].onPool.mul(\\n                ICToken(_poolTokenAddress).exchangeRateStored()\\n            );\\n    }\\n\\n    /// @dev Returns the borrow balance of `_user` in the `_poolTokenAddress` market.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the borrow amount.\\n    /// @return The borrow balance of the user (in underlying).\\n    function _getUserBorrowBalanceInOf(address _poolTokenAddress, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            borrowBalanceInOf[_poolTokenAddress][_user].inP2P.mul(\\n                p2pBorrowIndex[_poolTokenAddress]\\n            ) +\\n            borrowBalanceInOf[_poolTokenAddress][_user].onPool.mul(\\n                ICToken(_poolTokenAddress).borrowIndex()\\n            );\\n    }\\n\\n    /// @dev Returns the underlying ERC20 token related to the pool token.\\n    /// @param _poolTokenAddress The address of the pool token.\\n    /// @return The underlying ERC20 token.\\n    function _getUnderlying(address _poolTokenAddress) internal view returns (ERC20) {\\n        if (_poolTokenAddress == cEth)\\n            // cETH has no underlying() function.\\n            return ERC20(wEth);\\n        else return ERC20(ICToken(_poolTokenAddress).underlying());\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/CompoundMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title CompoundMath.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library emulating in solidity 8+ the behavior of Compound's mulScalarTruncate and divScalarByExpTruncate functions.\\nlibrary CompoundMath {\\n    /// ERRORS ///\\n\\n    /// @notice Reverts when the number exceeds 224 bits.\\n    error NumberExceeds224Bits();\\n\\n    /// @notice Reverts when the number exceeds 32 bits.\\n    error NumberExceeds32Bits();\\n\\n    /// INTERNAL ///\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / 1e18;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((1e18 * x * 1e18) / y) / 1e18;\\n    }\\n\\n    function safe224(uint256 n) internal pure returns (uint224) {\\n        if (n >= 2**224) revert NumberExceeds224Bits();\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        if (n >= 2**32) revert NumberExceeds32Bits();\\n        return uint32(n);\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256) {\\n        return a < b ? a < c ? a : c : b < c ? b : c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/libraries/DelegateCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Delegate Call Library.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library to perform delegate calls inspired by the OZ Address library: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol.\\nlibrary DelegateCall {\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when a low delegate call has failed without error message.\\n    error LowLevelDelegateCallFailed();\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Performs a low-level delegate call to the `_target` contract.\\n    /// @dev Note: Unlike the OZ's library this function does not check if the `_target` is a contract. It is the responsibility of the caller to ensure that the `_target` is a contract.\\n    /// @param _target The address of the target contract.\\n    /// @param _data The data to pass to the function called on the target contract.\\n    /// @return The return data from the function called on the target contract.\\n    function functionDelegateCall(address _target, bytes memory _data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returndata) = _target.delegatecall(_data);\\n        if (success) return returndata;\\n        else {\\n            // Look for revert reason and bubble it up if present.\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly.\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else revert LowLevelDelegateCallFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/MorphoStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IPositionsManager.sol\\\";\\nimport \\\"./interfaces/IIncentivesVault.sol\\\";\\nimport \\\"./interfaces/IRewardsManager.sol\\\";\\nimport \\\"./interfaces/IInterestRatesManager.sol\\\";\\n\\nimport \\\"../common/libraries/DoubleLinkedList.sol\\\";\\nimport \\\"./libraries/Types.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title MorphoStorage.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice All storage variables used in Morpho contracts.\\nabstract contract MorphoStorage is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    /// GLOBAL STORAGE ///\\n\\n    uint8 public constant CTOKEN_DECIMALS = 8; // The number of decimals for cToken.\\n    uint16 public constant MAX_BASIS_POINTS = 10_000; // 100% in basis points.\\n    uint16 public constant MAX_CLAIMABLE_RESERVE = 9_000; // The max proportion of reserve fee claimable by the DAO at once (90% in basis points).\\n    uint256 public constant WAD = 1e18;\\n\\n    uint256 public maxSortedUsers; // The max number of users to sort in the data structure.\\n    uint256 public dustThreshold; // The minimum amount to keep in the data structure.\\n    Types.MaxGasForMatching public defaultMaxGasForMatching; // The default max gas to consume within loops in matching engine functions.\\n\\n    /// POSITIONS STORAGE ///\\n\\n    mapping(address => DoubleLinkedList.List) internal suppliersInP2P; // For a given market, the suppliers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal suppliersOnPool; // For a given market, the suppliers on Compound.\\n    mapping(address => DoubleLinkedList.List) internal borrowersInP2P; // For a given market, the borrowers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal borrowersOnPool; // For a given market, the borrowers on Compound.\\n    mapping(address => mapping(address => Types.SupplyBalance)) public supplyBalanceInOf; // For a given market, the supply balance of a user. cToken -> user -> balances.\\n    mapping(address => mapping(address => Types.BorrowBalance)) public borrowBalanceInOf; // For a given market, the borrow balance of a user. cToken -> user -> balances.\\n    mapping(address => mapping(address => bool)) public userMembership; // Whether the user is in the market or not. cToken -> user -> bool.\\n    mapping(address => address[]) public enteredMarkets; // The markets entered by a user. user -> cTokens.\\n\\n    /// MARKETS STORAGE ///\\n\\n    address[] public marketsCreated; // Keeps track of the created markets.\\n    mapping(address => bool) public p2pDisabled; // Whether the peer-to-peer market is open or not.\\n    mapping(address => uint256) public p2pSupplyIndex; // Current index from supply peer-to-peer unit to underlying (in wad).\\n    mapping(address => uint256) public p2pBorrowIndex; // Current index from borrow peer-to-peer unit to underlying (in wad).\\n    mapping(address => Types.LastPoolIndexes) public lastPoolIndexes; // Last pool index stored.\\n    mapping(address => Types.MarketParameters) public marketParameters; // Market parameters.\\n    mapping(address => Types.MarketStatus) public marketStatus; // Market status.\\n    mapping(address => Types.Delta) public deltas; // Delta parameters for each market.\\n\\n    /// CONTRACTS AND ADDRESSES ///\\n\\n    IPositionsManager public positionsManager;\\n    IIncentivesVault public incentivesVault;\\n    IRewardsManager public rewardsManager;\\n    IInterestRatesManager public interestRatesManager;\\n    IComptroller public comptroller;\\n    address public treasuryVault;\\n    address public cEth;\\n    address public wEth;\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @notice Constructs the contract.\\n    /// @dev The contract is automatically marked as initialized when deployed so that nobody can highjack the implementation contract.\\n    constructor() initializer {}\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/compound/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface ICEth {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    function liquidationIncentiveMantissa() external returns (uint256);\\n\\n    function closeFactorMantissa() external returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getAccountLiquidity(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getHypotheticalAccountLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMembership(address, address) external view returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplySpeeds(address) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (CompMarketState memory);\\n\\n    function compBorrowState(address) external view returns (CompMarketState memory);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n}\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\\ninterface ICToken {\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (IInterestRateModel);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function initialExchangeRateMantissa() external view returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICEther is ICToken {\\n    function mint() external payable;\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IIncentivesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IIncentivesVault {\\n    function setOracle(IOracle _newOracle) external;\\n\\n    function setMorphoDao(address _newMorphoDao) external;\\n\\n    function setBonus(uint256 _newBonus) external;\\n\\n    function setPauseStatus(bool _newStatus) external;\\n\\n    function transferMorphoTokensToDao(uint256 _amount) external;\\n\\n    function tradeCompForMorphoTokens(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\n\\ninterface IRewardsManager {\\n    function claimRewards(address[] calldata, address) external returns (uint256);\\n\\n    function accrueUserUnclaimedRewards(address[] calldata _cTokenAddresses, address)\\n        external\\n        returns (uint256);\\n\\n    function userUnclaimedCompRewards(address) external view returns (uint256);\\n\\n    function getUserUnclaimedRewards(address[] calldata _cTokenAddresses, address _user)\\n        external\\n        returns (uint256 unclaimedRewards);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function getLocalCompSupplyState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getLocalCompBorrowState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getUpdatedSupplyIndex(address) external view returns (uint256);\\n\\n    function getUpdatedBorrowIndex(address) external view returns (uint256);\\n\\n    function accrueUserSupplyUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function accrueUserBorrowUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IInterestRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IInterestRatesManager {\\n    function updateP2PIndexes(address _marketAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/libraries/DoubleLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Double Linked List.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Modified double linked list with capped sorting insertion.\\nlibrary DoubleLinkedList {\\n    /// STRUCTS ///\\n\\n    struct Account {\\n        address prev;\\n        address next;\\n        uint256 value;\\n    }\\n\\n    struct List {\\n        mapping(address => Account) accounts;\\n        address head;\\n        address tail;\\n    }\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the account is already inserted in the double linked list.\\n    error AccountAlreadyInserted();\\n\\n    /// @notice Thrown when the account to remove does not exist.\\n    error AccountDoesNotExist();\\n\\n    /// @notice Thrown when the address is zero at insertion.\\n    error AddressIsZero();\\n\\n    /// @notice Thrown when the value is zero at insertion.\\n    error ValueIsZero();\\n\\n    /// INTERNAL ///\\n\\n    /// @notice Returns the `account` linked to `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The value of the account.\\n    function getValueOf(List storage _list, address _id) internal view returns (uint256) {\\n        return _list.accounts[_id].value;\\n    }\\n\\n    /// @notice Returns the address at the head of the `_list`.\\n    /// @param _list The list to get the head.\\n    /// @return The address of the head.\\n    function getHead(List storage _list) internal view returns (address) {\\n        return _list.head;\\n    }\\n\\n    /// @notice Returns the address at the tail of the `_list`.\\n    /// @param _list The list to get the tail.\\n    /// @return The address of the tail.\\n    function getTail(List storage _list) internal view returns (address) {\\n        return _list.tail;\\n    }\\n\\n    /// @notice Returns the next id address from the current `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The address of the next account.\\n    function getNext(List storage _list, address _id) internal view returns (address) {\\n        return _list.accounts[_id].next;\\n    }\\n\\n    /// @notice Returns the previous id address from the current `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The address of the previous account.\\n    function getPrev(List storage _list, address _id) internal view returns (address) {\\n        return _list.accounts[_id].prev;\\n    }\\n\\n    /// @notice Removes an account of the `_list`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    function remove(List storage _list, address _id) internal {\\n        if (_list.accounts[_id].value == 0) revert AccountDoesNotExist();\\n        Account memory account = _list.accounts[_id];\\n\\n        if (account.prev != address(0)) _list.accounts[account.prev].next = account.next;\\n        else _list.head = account.next;\\n        if (account.next != address(0)) _list.accounts[account.next].prev = account.prev;\\n        else _list.tail = account.prev;\\n\\n        delete _list.accounts[_id];\\n    }\\n\\n    /// @notice Inserts an account in the `_list` at the right slot based on its `_value`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @param _value The value of the account.\\n    /// @param _maxIterations The max number of iterations.\\n    function insertSorted(\\n        List storage _list,\\n        address _id,\\n        uint256 _value,\\n        uint256 _maxIterations\\n    ) internal {\\n        if (_value == 0) revert ValueIsZero();\\n        if (_id == address(0)) revert AddressIsZero();\\n        if (_list.accounts[_id].value != 0) revert AccountAlreadyInserted();\\n\\n        uint256 numberOfIterations;\\n        address next = _list.head; // If not added at the end of the list `_id` will be inserted before `next`.\\n\\n        while (\\n            numberOfIterations < _maxIterations &&\\n            next != _list.tail &&\\n            _list.accounts[next].value >= _value\\n        ) {\\n            next = _list.accounts[next].next;\\n            unchecked {\\n                ++numberOfIterations;\\n            }\\n        }\\n\\n        // Account is not the new tail.\\n        if (next != address(0) && _list.accounts[next].value < _value) {\\n            // Account is the new head.\\n            if (next == _list.head) {\\n                _list.accounts[_id] = Account(address(0), next, _value);\\n                _list.head = _id;\\n                _list.accounts[next].prev = _id;\\n            }\\n            // Account is not the new head.\\n            else {\\n                _list.accounts[_id] = Account(_list.accounts[next].prev, next, _value);\\n                _list.accounts[_list.accounts[next].prev].next = _id;\\n                _list.accounts[next].prev = _id;\\n            }\\n        }\\n        // Account is the new tail.\\n        else {\\n            // Account is the new head.\\n            if (_list.head == address(0)) {\\n                _list.accounts[_id] = Account(address(0), address(0), _value);\\n                _list.head = _id;\\n                _list.tail = _id;\\n            }\\n            // Account is not the new head.\\n            else {\\n                _list.accounts[_id] = Account(_list.tail, address(0), _value);\\n                _list.accounts[_list.tail].next = _id;\\n                _list.tail = _id;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Types.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Common types and structs used in Moprho contracts.\\nlibrary Types {\\n    /// ENUMS ///\\n\\n    enum PositionType {\\n        SUPPLIERS_IN_P2P,\\n        SUPPLIERS_ON_POOL,\\n        BORROWERS_IN_P2P,\\n        BORROWERS_ON_POOL\\n    }\\n\\n    /// STRUCTS ///\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In supplier's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests earned by suppliers in peer-to-peer. Multiply by the peer-to-peer supply index to get the underlying amount.\\n        uint256 onPool; // In cToken. Multiply by the pool supply index to get the underlying amount.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In borrower's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests paid by borrowers in peer-to-peer. Multiply by the peer-to-peer borrow index to get the underlying amount.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when borrowers are on Compound. Multiply by the pool borrow index to get the underlying amount.\\n    }\\n\\n    // Max gas to consume during the matching process for supply, borrow, withdraw and repay functions.\\n    struct MaxGasForMatching {\\n        uint64 supply;\\n        uint64 borrow;\\n        uint64 withdraw;\\n        uint64 repay;\\n    }\\n\\n    struct Delta {\\n        uint256 p2pSupplyDelta; // Difference between the stored peer-to-peer supply amount and the real peer-to-peer supply amount (in cToken).\\n        uint256 p2pBorrowDelta; // Difference between the stored peer-to-peer borrow amount and the real peer-to-peer borrow amount (in cdUnit).\\n        uint256 p2pSupplyAmount; // Sum of all stored peer-to-peer supply (in peer-to-peer unit).\\n        uint256 p2pBorrowAmount; // Sum of all stored peer-to-peer borrow (in peer-to-peer unit).\\n    }\\n\\n    struct AssetLiquidityData {\\n        uint256 collateralValue; // The collateral value of the asset.\\n        uint256 maxDebtValue; // The maximum possible debt value of the asset.\\n        uint256 debtValue; // The debt value of the asset.\\n        uint256 underlyingPrice; // The price of the token.\\n        uint256 collateralFactor; // The liquidation threshold applied on this token.\\n    }\\n\\n    struct LiquidityData {\\n        uint256 collateralValue; // The collateral value.\\n        uint256 maxDebtValue; // The maximum debt value possible.\\n        uint256 debtValue; // The debt value.\\n    }\\n\\n    // Variables are packed together to save gas (will not exceed their limit during Morpho's lifetime).\\n    struct LastPoolIndexes {\\n        uint32 lastUpdateBlockNumber; // The last time the peer-to-peer indexes were updated.\\n        uint112 lastSupplyPoolIndex; // Last pool supply index.\\n        uint112 lastBorrowPoolIndex; // Last pool borrow index.\\n    }\\n\\n    struct MarketParameters {\\n        uint16 reserveFactor; // Proportion of the interest earned by users sent to the DAO for each market, in basis point (100% = 10 000). The value is set at market creation.\\n        uint16 p2pIndexCursor; // Position of the peer-to-peer rate in the pool's spread. Determine the weights of the weighted arithmetic average in the indexes computations ((1 - p2pIndexCursor) * r^S + p2pIndexCursor * r^B) (in basis point).\\n    }\\n\\n    struct MarketStatus {\\n        bool isCreated; // Whether or not this market is created.\\n        bool isPaused; // Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n        bool isPartiallyPaused; // Whether the market is partially paused or not (only supply and borrow are frozen).\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IOracle {\\n    function consult(uint256 _amountIn) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AccountAlreadyInserted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountAboveWhatAllowedToRepay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowOnCompoundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CompoundOracleFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowLevelDelegateCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketNotCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintOnCompoundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemOnCompoundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepayOnCompoundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToSeizeAboveCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorisedBorrow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorisedLiquidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorisedWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotMemberOfMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawTooSmall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceOnPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceInP2P\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceOnPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceInP2P\",\"type\":\"uint256\"}],\"name\":\"BorrowerPositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidated\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenBorrowedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountRepaid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenCollateralAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountSeized\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_p2pSupplyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_p2pBorrowAmount\",\"type\":\"uint256\"}],\"name\":\"P2PAmountsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_p2pBorrowDelta\",\"type\":\"uint256\"}],\"name\":\"P2PBorrowDeltaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_p2pSupplyDelta\",\"type\":\"uint256\"}],\"name\":\"P2PSupplyDeltaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_repayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceOnPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceInP2P\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceOnPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceInP2P\",\"type\":\"uint256\"}],\"name\":\"Supplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceOnPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceInP2P\",\"type\":\"uint256\"}],\"name\":\"SupplierPositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceOnPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceInP2P\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CTOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CLAIMABLE_RESERVE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowBalanceInOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasForMatching\",\"type\":\"uint256\"}],\"name\":\"borrowLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMaxGasForMatching\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrow\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdraw\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repay\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deltas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pSupplyDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enteredMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"marketsCreated_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEnteredMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"enteredMarkets_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Types.PositionType\",\"name\":\"_positionType\",\"type\":\"uint8\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Types.PositionType\",\"name\":\"_positionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesVault\",\"outputs\":[{\"internalType\":\"contract IIncentivesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatesManager\",\"outputs\":[{\"internalType\":\"contract IInterestRatesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPoolIndexes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"lastSupplyPoolIndex\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"lastBorrowPoolIndex\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenBorrowedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidateLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketParameters\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"p2pIndexCursor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCreated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsCreated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSortedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionsManager\",\"outputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasForMatching\",\"type\":\"uint256\"}],\"name\":\"repayLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsManager\",\"outputs\":[{\"internalType\":\"contract IRewardsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyBalanceInOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasForMatching\",\"type\":\"uint256\"}],\"name\":\"supplyLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"updateP2PIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasForMatching\",\"type\":\"uint256\"}],\"name\":\"withdrawLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PositionsManager", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}