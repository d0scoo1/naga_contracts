{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/hooks/ERC1155BalanceOfHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport '@unlock-protocol/contracts/dist/PublicLock/IPublicLockV9.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\ncontract ERC1155BalanceOfHook {\\n  \\n  // store contract mapping lock => nft (erc1155)\\n  mapping(address => address) public nftAddresses;\\n\\n  // nft (erc1155) => token type (id)\\n  mapping(address => uint256) public nftTokenIds;\\n\\n  function createMapping(\\n    address _lockAddress, \\n    address _nftAddress,\\n    uint _tokenTypeId\\n  ) \\n  external \\n  {\\n    require(_lockAddress != address(0), 'Lock address can not be zero');\\n    require(_nftAddress != address(0), 'ERC1155 address can not be zero');\\n    \\n    // make sure lock manager\\n    IPublicLockV9 lock = IPublicLockV9(_lockAddress);\\n    require(lock.isLockManager(msg.sender), 'Caller does not have the LockManager role');\\n    \\n    // store mapping\\n    nftAddresses[_lockAddress] = _nftAddress;\\n\\n    // store tokens\\n    nftTokenIds[_lockAddress] = _tokenTypeId;\\n  }\\n\\n  function hasValidKey(\\n    address _lockAddress,\\n    address _keyOwner,\\n    uint256, // _expirationTimestamp,\\n    bool isValidKey\\n  ) \\n  external view\\n  returns (bool)\\n  {\\n    if (isValidKey) return true;\\n\\n    // get nft contract \\n    address nftAddress = nftAddresses[_lockAddress];\\n    if(nftAddress == address(0)) return false;\\n    \\n    // get token type\\n    uint tokenTypeId = nftTokenIds[_lockAddress];\\n\\n    // get nft balance\\n    IERC1155 nft = IERC1155(nftAddress);\\n    return nft.balanceOf(_keyOwner, tokenTypeId) > 0;\\n  }\\n\\n}\"\r\n    },\r\n    \"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n* @title The PublicLock Interface\\n* @author Nick Furfaro (unlock-protocol.com)\\n */\\n\\n\\ninterface IPublicLockV9\\n{\\n\\n// See indentationissue description here:\\n// https://github.com/duaraghav8/Ethlint/issues/268\\n// solium-disable indentation\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n  /**\\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\\n   */\\n  // receive() external payable;\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);\\n  function KEY_GRANTER_ROLE() external pure returns (bytes32);\\n  function LOCK_MANAGER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n  * @notice Used to disable lock before migrating keys and/or destroying contract.\\n  * @dev Throws if called by other than a lock manager.\\n  * @dev Throws if lock contract has already been disabled.\\n  */\\n  function disableLock() external;\\n\\n  /**\\n   * @dev Called by a lock manager or beneficiary to withdraw all funds from the lock and send them to the `beneficiary`.\\n   * @dev Throws if called by other than a lock manager or beneficiary\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\\n   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor`\\n   * use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * @notice An ERC-20 style approval, allowing the spender to transfer funds directly from this lock.\\n   */\\n  function approveBeneficiary(\\n    address _spender,\\n    uint _amount\\n  ) external\\n    returns (bool);\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * A function to change the default duration of each key in the lock\\n   * @notice keys previously bought are unaffected by this change (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased \\n   * or zero (0) for a non-expiring key\\n   */\\n  function setExpirationDuration(uint _newExpirationDuration) external;\\n\\n  /**\\n   * A function which lets a Lock manager update the beneficiary account,\\n   * which receives funds on withdrawal.\\n   * @dev Throws if called by other than a Lock manager or beneficiary\\n   * @dev Throws if _beneficiary is address(0)\\n   * @param _beneficiary The new address to set as the beneficiary\\n   */\\n  function updateBeneficiary( address _beneficiary ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice Find the tokenId for a given user\\n   * @return The tokenId of the NFT, else returns 0\\n   * @param _account The address of the key owner\\n  */\\n  function getTokenIdFor(\\n    address _account\\n  ) external view returns (uint);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _keyOwner address of the user for whom we search the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    address _keyOwner\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows a Lock manager to assign a descriptive name for this Lock.\\n   * @param _lockName The new name for the lock\\n   * @dev Throws if called by other than a Lock manager\\n   */\\n  function updateLockName(\\n    string calldata _lockName\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to assign a Symbol for this Lock.\\n   * @param _lockSymbol The new Symbol for the lock\\n   * @dev Throws if called by other than a Lock manager\\n   */\\n  function updateLockSymbol(\\n    string calldata _lockSymbol\\n  ) external;\\n\\n  /**\\n    * @dev Gets the token symbol\\n    * @return string representing the token symbol\\n    */\\n  function symbol()\\n    external view\\n    returns(string memory);\\n\\n    /**\\n   * Allows a Lock manager to update the baseTokenURI for this Lock.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _baseTokenURI String representing the base of the URI for this lock.\\n   */\\n  function setBaseTokenURI(\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * @notice Allows a Lock manager to add or remove an event hook\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _recipient address of the recipient of the purchased key\\n  * @param _referrer address of the user making the referral\\n  * @param _keyManager optional address to grant managing rights to a specific address on creation\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled. Throws if lock is sold-out. Throws if _recipient == address(0).\\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if a Lock manager increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  */\\n  function purchase(\\n    uint256 _value,\\n    address _recipient,\\n    address _referrer,\\n    address _keyManager,\\n    bytes calldata _data\\n  ) external payable;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee a key owner would need to pay in order to\\n   * transfer the key to another account.  This is pro-rated so the fee goes down\\n   * overtime.\\n   * @dev Throws if _keyOwner does not have a valid key\\n   * @param _keyOwner The owner of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    address _keyOwner,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key\\n   * @param _keyOwner The key owner to whom we wish to send a refund to\\n   * @param amount The amount to refund the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    address _keyOwner,\\n    uint amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _keyOwner The key owner to get the refund value for.\\n   * a cancelAndRefund block.timestamp.\\n   * Note that due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   */\\n  function getCancelAndRefundValueFor(\\n    address _keyOwner\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  function onKeyPurchaseHook() external view returns(address);\\n\\n  function onKeyCancelHook() external view returns(address);\\n  \\n  function onValidKeyHook() external view returns(bool);\\n\\n  function onTokenURIHook() external view returns(string memory);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @dev Change the maximum number of keys the lock can edit\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   */\\n  function setMaxNumberOfKeys (uint _maxNumberOfKeys) external;\\n\\n  ///===================================================================\\n  /// Auto-generated getter functions from public state variables\\n\\n  function beneficiary() external view returns (address );\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function isAlive() external view returns (bool );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n\\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n     * @dev Returns the number of NFTs in `owner`'s account.\\n     */\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    \\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n    * @notice Get the approved address for a single NFT\\n    * @dev Throws if `_tokenId` is not a valid NFT.\\n    * @param _tokenId The NFT to find the approved address for\\n    * @return operator The approved address for this NFT, or the zero address if there is none\\n    */\\n    function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address _owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    function totalSupply() external view returns (uint256);\\n    function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @notice An ERC-20 style transfer.\\n     * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n     * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n     * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n     */\\n    function transfer(\\n      address _to,\\n      uint _value\\n    ) external\\n      returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 80\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenTypeId\",\"type\":\"uint256\"}],\"name\":\"createMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValidKey\",\"type\":\"bool\"}],\"name\":\"hasValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC1155BalanceOfHook", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "80", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}