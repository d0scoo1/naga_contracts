{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AccountCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface OpDefaultInterface {\\n    function enable(address user) external;\\n\\n    function setAccountCenter(address _accountCenter) external;\\n}\\n\\ninterface IRewardCenter {\\n    function claimOpenAccountReward(address EOA, address dsa) external;\\n}\\n\\ncontract AccountCenter is Ownable {\\n    // totally account count\\n    uint256 public accountCount;\\n\\n    // Account Type ID count\\n    uint256 public accountTypeCount;\\n\\n    // open account reward center\\n    address rewardCenter;\\n\\n    // Account Type ID -> accountProxyTemplateAddress\\n    mapping(uint256 => address) accountProxyTemplate;\\n\\n    // EOA -> AccountType -> SmartAccount\\n    mapping(address => mapping(uint256 => address)) accountBook;\\n\\n    // Account Type ID -> account count in this type\\n    mapping(uint256 => uint256) accountOfTypeCount;\\n\\n    // SmartAccount -> EOA\\n    mapping(address => address) eoaBook;\\n\\n    // SmartAccount -> TypeID\\n    mapping(address => uint256) SmartAccountType;\\n\\n    mapping(uint256 => address) accountIDtoAddress;\\n\\n    event AddNewAccountType(uint256 accountTypeID, address acountProxyAddress);\\n    event UpdateAccountType(uint256 accountTypeID, address acountProxyAddress);\\n    event CreateAccount(address EOA, address account, uint256 accountTypeID);\\n\\n    function addNewAccountType(address acountProxyAddress) external onlyOwner {\\n        require(\\n            acountProxyAddress != address(0),\\n            \\\"CHFRY: acountProxyAddress should not be 0\\\"\\n        );\\n        accountTypeCount = accountTypeCount + 1;\\n        accountProxyTemplate[accountTypeCount] = acountProxyAddress;\\n        emit AddNewAccountType(accountTypeCount, acountProxyAddress);\\n    }\\n\\n    function setRewardCenter(address _rewardCenter) external onlyOwner {\\n        require(\\n            _rewardCenter != address(0),\\n            \\\"CHFRY: rewardCenter should not be 0\\\"\\n        );\\n        rewardCenter = _rewardCenter;\\n    }\\n\\n    function updateAccountType(\\n        address acountProxyAddress,\\n        uint256 accountTypeID\\n    ) external onlyOwner {\\n        require(\\n            acountProxyAddress != address(0),\\n            \\\"CHFRY: acountProxyAddress should not be 0\\\"\\n        );\\n        require(\\n            accountProxyTemplate[accountTypeID] != address(0),\\n            \\\"CHFRY: account Type not exist\\\"\\n        );\\n        accountProxyTemplate[accountTypeID] = acountProxyAddress;\\n        emit UpdateAccountType(accountTypeID, acountProxyAddress);\\n    }\\n\\n    function createAccount(uint256 accountTypeID)\\n        external\\n        returns (address _account)\\n    {\\n        require(\\n            accountTypeID <= accountTypeCount,\\n            \\\"CHFRY: Invalid account Type ID\\\"\\n        );\\n        require(\\n            accountBook[msg.sender][accountTypeID] == address(0),\\n            \\\"CHFRY: account exist\\\"\\n        );\\n        _account = cloneAccountProxy(accountTypeID);\\n        accountBook[msg.sender][accountTypeID] = _account;\\n        accountCount = accountCount + 1;\\n        accountIDtoAddress[accountCount] = _account;\\n        accountOfTypeCount[accountTypeID] =\\n            accountOfTypeCount[accountTypeID] +\\n            1;\\n        eoaBook[_account] = msg.sender;\\n        SmartAccountType[_account] = accountTypeID;\\n        OpDefaultInterface(_account).setAccountCenter(address(this));\\n        OpDefaultInterface(_account).enable(msg.sender);\\n        if (rewardCenter != address(0)) {\\n            IRewardCenter(rewardCenter).claimOpenAccountReward(\\n                msg.sender,\\n                _account\\n            );\\n        }\\n\\n        emit CreateAccount(msg.sender, _account, accountTypeID);\\n    }\\n\\n    function getAccount(uint256 accountTypeID)\\n        external\\n        view\\n        returns (address _account)\\n    {\\n        _account = accountBook[msg.sender][accountTypeID];\\n        require(\\n            accountBook[msg.sender][accountTypeID] != address(0),\\n            \\\"account not exist\\\"\\n        );\\n    }\\n\\n    function getAccountByTypeID(address EOA, uint256 accountTypeID)\\n        external\\n        view\\n        returns (address _account)\\n    {\\n        _account = accountBook[EOA][accountTypeID];\\n    }\\n\\n    function getAccountTypeCount()\\n        external\\n        view\\n        returns (uint256 _accountTypeCount)\\n    {\\n        _accountTypeCount = accountTypeCount;\\n    }\\n\\n    function getEOA(address account) external view returns (address _eoa) {\\n        require(account != address(0), \\\"CHFRY: address should not be 0\\\");\\n        _eoa = eoaBook[account];\\n    }\\n\\n    function isSmartAccount(address _address)\\n        external\\n        view\\n        returns (bool _isAccount)\\n    {\\n        require(_address != address(0), \\\"CHFRY: address should not be 0\\\");\\n        if (eoaBook[_address] == address(0)) {\\n            _isAccount = false;\\n        } else {\\n            _isAccount = true;\\n        }\\n    }\\n\\n    function isSmartAccountofTypeN(address _address, uint256 accountTypeID)\\n        external\\n        view\\n        returns (bool _isAccount)\\n    {\\n        require(_address != address(0), \\\"CHFRY: address should not be 0\\\");\\n        if (SmartAccountType[_address] == accountTypeID) {\\n            _isAccount = true;\\n        } else {\\n            _isAccount = false;\\n        }\\n    }\\n\\n    function getAccountCountOfTypeN(uint256 accountTypeID)\\n        external\\n        view\\n        returns (uint256 count)\\n    {\\n        count = accountOfTypeCount[accountTypeID];\\n    }\\n\\n    function cloneAccountProxy(uint256 accountTypeID)\\n        internal\\n        returns (address accountAddress)\\n    {\\n        address accountProxyTemplateAddress = accountProxyTemplate[\\n            accountTypeID\\n        ];\\n        \\n        require(\\n            accountProxyTemplateAddress != address(0),\\n            \\\"CHFRY: accountProxyTemplateAddress not found\\\"\\n        );\\n\\n        bytes20 targetBytes = bytes20(accountProxyTemplateAddress);\\n\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            accountAddress := create(0, clone, 0x37)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acountProxyAddress\",\"type\":\"address\"}],\"name\":\"AddNewAccountType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"EOA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"}],\"name\":\"CreateAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acountProxyAddress\",\"type\":\"address\"}],\"name\":\"UpdateAccountType\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountTypeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acountProxyAddress\",\"type\":\"address\"}],\"name\":\"addNewAccountType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"EOA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"}],\"name\":\"getAccountByTypeID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"}],\"name\":\"getAccountCountOfTypeN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountTypeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_accountTypeCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_eoa\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSmartAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isAccount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"}],\"name\":\"isSmartAccountofTypeN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isAccount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardCenter\",\"type\":\"address\"}],\"name\":\"setRewardCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acountProxyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountTypeID\",\"type\":\"uint256\"}],\"name\":\"updateAccountType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccountCenter", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}