{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./StakingStorage.sol\\\";\\nimport \\\"./Converter.sol\\\";\\nimport \\\"./EnergyStorage.sol\\\";\\nimport \\\"./helpers/PermissionControl.sol\\\";\\nimport \\\"./helpers/Util.sol\\\";\\n\\n/**\\n * @dev ASM Genome Mining - Registry contract\\n * @notice We use this contract to manage contracts addresses\\n * @notice when we need to update some of them.\\n */\\ncontract Controller is Util, PermissionControl {\\n    Staking private _stakingLogic;\\n    StakingStorage private _astoStorage;\\n    StakingStorage private _lpStorage;\\n    Converter private _converterLogic;\\n    EnergyStorage private _energyStorage;\\n    EnergyStorage private _lbaEnergyStorage;\\n    IERC20 private _astoToken;\\n    IERC20 private _lpToken;\\n    address private _dao;\\n    address private _multisig;\\n\\n    bool private _initialized;\\n\\n    uint256 public constant ASTO_TOKEN_ID = 0;\\n    uint256 public constant LP_TOKEN_ID = 1;\\n\\n    event ContractUpgraded(uint256 timestamp, string contractName, address oldAddress, address newAddress);\\n\\n    constructor(address multisig) {\\n        if (!_isContract(multisig)) revert InvalidInput(INVALID_MULTISIG);\\n        /**\\n         * MULTISIG_ROLE is ONLY used for:\\n         * - initalisation controller\\n         * - setting periods (mining cycles) for the Converter contract\\n         */\\n        _grantRole(MULTISIG_ROLE, multisig);\\n        _grantRole(DAO_ROLE, multisig);\\n        _multisig = multisig;\\n    }\\n\\n    function init(\\n        address dao,\\n        address astoToken,\\n        address astoStorage,\\n        address lpToken,\\n        address lpStorage,\\n        address stakingLogic,\\n        address converterLogic,\\n        address energyStorage,\\n        address lbaEnergyStorage\\n    ) external onlyRole(MULTISIG_ROLE) {\\n        if (!_initialized) {\\n            if (!_isContract(dao)) revert InvalidInput(INVALID_DAO);\\n            if (!_isContract(astoToken)) revert InvalidInput(INVALID_ASTO_CONTRACT);\\n            if (!_isContract(astoStorage)) revert InvalidInput(INVALID_STAKING_STORAGE);\\n            if (!_isContract(lpToken)) revert InvalidInput(INVALID_LP_CONTRACT);\\n            if (!_isContract(lpStorage)) revert InvalidInput(INVALID_STAKING_STORAGE);\\n            if (!_isContract(stakingLogic)) revert InvalidInput(INVALID_STAKING_LOGIC);\\n            if (!_isContract(converterLogic)) revert InvalidInput(INVALID_CONVERTER_LOGIC);\\n            if (!_isContract(energyStorage)) revert InvalidInput(INVALID_ENERGY_STORAGE);\\n            if (!_isContract(lbaEnergyStorage)) revert InvalidInput(INVALID_ENERGY_STORAGE);\\n            _clearRole(DAO_ROLE);\\n            _grantRole(DAO_ROLE, dao);\\n\\n            // Saving addresses on init:\\n            _dao = dao;\\n            _astoToken = IERC20(astoToken);\\n            _astoStorage = StakingStorage(astoStorage);\\n            _lpToken = IERC20(lpToken);\\n            _lpStorage = StakingStorage(lpStorage);\\n            _stakingLogic = Staking(stakingLogic);\\n            _converterLogic = Converter(converterLogic);\\n            _energyStorage = EnergyStorage(energyStorage);\\n            _lbaEnergyStorage = EnergyStorage(lbaEnergyStorage);\\n\\n            // Initializing contracts\\n            _upgradeContracts(\\n                astoToken,\\n                astoStorage,\\n                lpToken,\\n                lpStorage,\\n                stakingLogic,\\n                converterLogic,\\n                energyStorage,\\n                lbaEnergyStorage\\n            );\\n            _initialized = true;\\n        }\\n    }\\n\\n    /** ----------------------------------\\n     * ! Private functions | Setters\\n     * ----------------------------------- */\\n\\n    /**\\n     * @notice Each contract has own params to initialize\\n     * @notice Contracts with no address specified will be skipped\\n     * @dev Internal functions, can be called from constructor OR\\n     * @dev after authentication by the public function `upgradeContracts()`\\n     */\\n    function _upgradeContracts(\\n        address astoToken,\\n        address astoStorage,\\n        address lpToken,\\n        address lpStorage,\\n        address stakingLogic,\\n        address converterLogic,\\n        address energyStorage,\\n        address lbaEnergyStorage\\n    ) internal {\\n        if (_isContract(astoToken)) _setAstoToken(astoToken);\\n        if (_isContract(astoStorage)) _setAstoStorage(astoStorage);\\n        if (_isContract(lpToken)) _setLpToken(lpToken);\\n        if (_isContract(lpStorage)) _setLpStorage(lpStorage);\\n        if (_isContract(stakingLogic)) _setStakingLogic(stakingLogic);\\n        if (_isContract(energyStorage)) _setEnergyStorage(energyStorage);\\n        if (_isContract(lbaEnergyStorage)) _setLBAEnergyStorage(lbaEnergyStorage);\\n        if (_isContract(converterLogic)) _setConverterLogic(converterLogic);\\n        _setController(address(this));\\n    }\\n\\n    function _setDao(address dao) internal {\\n        _dao = dao;\\n        _clearRole(DAO_ROLE);\\n        _grantRole(DAO_ROLE, dao);\\n        _grantRole(MULTISIG_ROLE, dao);\\n        _stakingLogic.setDao(dao);\\n        _converterLogic.setDao(dao);\\n    }\\n\\n    function _setMultisig(address multisig) internal {\\n        _multisig = multisig;\\n        _clearRole(MULTISIG_ROLE);\\n        _grantRole(MULTISIG_ROLE, multisig);\\n        _grantRole(MULTISIG_ROLE, _dao);\\n        _converterLogic.setMultisig(multisig, _dao);\\n    }\\n\\n    function _setController(address newContract) internal {\\n        _stakingLogic.setController(newContract);\\n        _astoStorage.setController(newContract);\\n        _lpStorage.setController(newContract);\\n        _converterLogic.setController(newContract);\\n        _energyStorage.setController(newContract);\\n        _lbaEnergyStorage.setController(newContract);\\n        emit ContractUpgraded(block.timestamp, \\\"Controller\\\", address(this), newContract);\\n    }\\n\\n    function _setStakingLogic(address newContract) internal {\\n        // revoke consumer role to old staking storage contract\\n        if (_isContract(address(_stakingLogic))) {\\n            _astoStorage.removeConsumer(address(_stakingLogic));\\n            _lpStorage.removeConsumer(address(_stakingLogic));\\n        }\\n\\n        uint256 lockedAsto = _stakingLogic.totalStakedAmount(ASTO_TOKEN_ID);\\n        uint256 lockedLp = _stakingLogic.totalStakedAmount(LP_TOKEN_ID);\\n\\n        _stakingLogic = Staking(newContract);\\n        _stakingLogic.init(\\n            address(_dao),\\n            IERC20(_astoToken),\\n            address(_astoStorage),\\n            IERC20(_lpToken),\\n            address(_lpStorage),\\n            lockedAsto,\\n            lockedLp\\n        );\\n        _astoStorage.addConsumer(newContract);\\n        _lpStorage.addConsumer(newContract);\\n        emit ContractUpgraded(block.timestamp, \\\"Staking Logic\\\", address(this), newContract);\\n    }\\n\\n    function _setAstoToken(address newContract) internal {\\n        _astoToken = IERC20(newContract);\\n        emit ContractUpgraded(block.timestamp, \\\"ASTO Token\\\", address(this), newContract);\\n    }\\n\\n    function _setAstoStorage(address newContract) internal {\\n        _astoStorage = StakingStorage(newContract);\\n        _astoStorage.init(address(_stakingLogic));\\n        emit ContractUpgraded(block.timestamp, \\\"ASTO Staking Storage\\\", address(this), newContract);\\n    }\\n\\n    function _setLpToken(address newContract) internal {\\n        _lpToken = IERC20(newContract);\\n        emit ContractUpgraded(block.timestamp, \\\"LP Token\\\", address(this), newContract);\\n    }\\n\\n    function _setLpStorage(address newContract) internal {\\n        _lpStorage = StakingStorage(newContract);\\n        _lpStorage.init(address(_stakingLogic));\\n        emit ContractUpgraded(block.timestamp, \\\"LP Staking Storage\\\", address(this), newContract);\\n    }\\n\\n    function _setConverterLogic(address newContract) internal {\\n        // revoke consumer role to old energy storage contract\\n        if (_isContract(address(_converterLogic))) {\\n            _lbaEnergyStorage.removeConsumer(address(_converterLogic));\\n            _energyStorage.removeConsumer(address(_converterLogic));\\n        }\\n\\n        _converterLogic = Converter(newContract);\\n        _converterLogic.init(\\n            address(_dao),\\n            address(_multisig),\\n            address(_energyStorage),\\n            address(_lbaEnergyStorage),\\n            address(_stakingLogic)\\n        );\\n        _lbaEnergyStorage.addConsumer(newContract);\\n        _energyStorage.addConsumer(newContract);\\n        emit ContractUpgraded(block.timestamp, \\\"Converter Logic\\\", address(this), newContract);\\n    }\\n\\n    function _setEnergyStorage(address newContract) internal {\\n        _energyStorage = EnergyStorage(newContract);\\n        _energyStorage.init(address(_converterLogic));\\n        emit ContractUpgraded(block.timestamp, \\\"Energy Storage\\\", address(this), newContract);\\n    }\\n\\n    function _setLBAEnergyStorage(address newContract) internal {\\n        _lbaEnergyStorage = EnergyStorage(newContract);\\n        _lbaEnergyStorage.init(address(_converterLogic));\\n        emit ContractUpgraded(block.timestamp, \\\"LBA Energy Storage\\\", address(this), newContract);\\n    }\\n\\n    /** ----------------------------------\\n     * ! External functions | Manager Role\\n     * ----------------------------------- */\\n\\n    /**\\n     * @notice The way to upgrade contracts\\n     * @notice Only Manager address (_dao wallet) has access to upgrade\\n     * @notice All parameters are optional\\n     */\\n    function upgradeContracts(\\n        address astoToken,\\n        address astoStorage,\\n        address lpToken,\\n        address lpStorage,\\n        address stakingLogic,\\n        address converterLogic,\\n        address energyStorage,\\n        address lbaEnergyStorage\\n    ) external onlyRole(DAO_ROLE) {\\n        _upgradeContracts(\\n            astoToken,\\n            astoStorage,\\n            lpToken,\\n            lpStorage,\\n            stakingLogic,\\n            converterLogic,\\n            energyStorage,\\n            lbaEnergyStorage\\n        );\\n    }\\n\\n    function setDao(address dao) external onlyRole(DAO_ROLE) {\\n        _setDao(dao);\\n    }\\n\\n    function setMultisig(address multisig) external onlyRole(DAO_ROLE) {\\n        _setMultisig(multisig);\\n    }\\n\\n    function setController(address newContract) external onlyRole(DAO_ROLE) {\\n        _setController(newContract);\\n    }\\n\\n    function setStakingLogic(address newContract) external onlyRole(DAO_ROLE) {\\n        _setStakingLogic(newContract);\\n    }\\n\\n    function setAstoStorage(address newContract) external onlyRole(DAO_ROLE) {\\n        _setAstoStorage(newContract);\\n    }\\n\\n    function setLpStorage(address newContract) external onlyRole(DAO_ROLE) {\\n        _setLpStorage(newContract);\\n    }\\n\\n    function setConverterLogic(address newContract) external onlyRole(DAO_ROLE) {\\n        _setConverterLogic(newContract);\\n    }\\n\\n    function setEnergyStorage(address newContract) external onlyRole(DAO_ROLE) {\\n        _setEnergyStorage(newContract);\\n    }\\n\\n    function setLBAEnergyStorage(address newContract) external onlyRole(DAO_ROLE) {\\n        _setLBAEnergyStorage(newContract);\\n    }\\n\\n    // DAO and MULTISIG can call this function\\n    function pause() external onlyRole(MULTISIG_ROLE) {\\n        if (!_stakingLogic.paused()) {\\n            _stakingLogic.pause();\\n        }\\n\\n        if (!_converterLogic.paused()) {\\n            _converterLogic.pause();\\n        }\\n    }\\n\\n    // DAO and MULTISIG can call this function\\n    function unpause() external onlyRole(MULTISIG_ROLE) {\\n        if (_stakingLogic.paused()) {\\n            _stakingLogic.unpause();\\n        }\\n\\n        if (_converterLogic.paused()) {\\n            _converterLogic.unpause();\\n        }\\n    }\\n\\n    /** ----------------------------------\\n     * ! Public functions | Getters\\n     * ----------------------------------- */\\n\\n    function getController() external view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getDao() external view returns (address) {\\n        return _dao;\\n    }\\n\\n    function getMultisig() external view returns (address) {\\n        return _multisig;\\n    }\\n\\n    function getStakingLogic() external view returns (address) {\\n        return address(_stakingLogic);\\n    }\\n\\n    function getAstoStorage() external view returns (address) {\\n        return address(_astoStorage);\\n    }\\n\\n    function getLpStorage() external view returns (address) {\\n        return address(_lpStorage);\\n    }\\n\\n    function getConverterLogic() external view returns (address) {\\n        return address(_converterLogic);\\n    }\\n\\n    function getEnergyStorage() external view returns (address) {\\n        return address(_energyStorage);\\n    }\\n\\n    function getLBAEnergyStorage() external view returns (address) {\\n        return address(_lbaEnergyStorage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Converter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./EnergyStorage.sol\\\";\\nimport \\\"./helpers/IConverter.sol\\\";\\nimport \\\"./helpers/IStaking.sol\\\";\\nimport \\\"./helpers/TimeConstants.sol\\\";\\nimport \\\"./helpers/Util.sol\\\";\\nimport \\\"./helpers/PermissionControl.sol\\\";\\nimport \\\"./interfaces/ILiquidityBootstrapAuction.sol\\\";\\n\\n/**\\n * @dev ASM Genome Mining - Converter Logic contract\\n *\\n * This contracts provides functionality for ASTO Energy calculation and conversion.\\n * Energy is calculated based on the token staking history from staking contract and multipliers pre-defined for ASTO and LP tokens.\\n * Eenrgy can be consumed on multiple purposes.\\n */\\ncontract Converter is IConverter, IStaking, Util, PermissionControl, Pausable {\\n    using SafeMath for uint256;\\n\\n    bool private _initialized = false;\\n\\n    uint256 public periodIdCounter = 0;\\n    // PeriodId start from 1\\n    mapping(uint256 => Period) public periods;\\n\\n    Staking public stakingLogic_;\\n    ILiquidityBootstrapAuction public lba_;\\n    EnergyStorage public energyStorage_;\\n    EnergyStorage public lbaEnergyStorage_;\\n\\n    uint256 public constant ASTO_TOKEN_ID = 0;\\n    uint256 public constant LP_TOKEN_ID = 1;\\n\\n    uint256 private _lbaEnergyStartTime;\\n\\n    event EnergyUsed(address addr, uint256 amount);\\n    event LBAEnergyUsed(address addr, uint256 amount);\\n    event PeriodAdded(uint256 time, uint256 periodId, Period period);\\n    event PeriodUpdated(uint256 time, uint256 periodId, Period period);\\n\\n    constructor(\\n        address controller,\\n        address lba,\\n        Period[] memory _periods,\\n        uint256 lbaEnergyStartTime\\n    ) {\\n        if (!_isContract(controller)) revert ContractError(INVALID_CONTROLLER);\\n        if (!_isContract(lba)) revert ContractError(INVALID_LBA_CONTRACT);\\n        lba_ = ILiquidityBootstrapAuction(lba);\\n        _grantRole(CONTROLLER_ROLE, controller);\\n        _addPeriods(_periods);\\n        _lbaEnergyStartTime = lbaEnergyStartTime;\\n        _pause();\\n    }\\n\\n    /** ----------------------------------\\n     * ! Business logic\\n     * ----------------------------------- */\\n\\n    /**\\n     * @dev Get consumed energy amount for address `addr`\\n     *\\n     * @param addr The wallet address to get consumed energy for\\n     * @return Consumed energy amount\\n     */\\n    function getConsumedEnergy(address addr) public view returns (uint256) {\\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n        return energyStorage_.consumedAmount(addr);\\n    }\\n\\n    /**\\n     * @dev Get consumed LBA energy amount for address `addr`\\n     *\\n     * @param addr The wallet address to get consumed energy for\\n     * @return Consumed energy amount\\n     */\\n    function getConsumedLBAEnergy(address addr) public view returns (uint256) {\\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n        return lbaEnergyStorage_.consumedAmount(addr);\\n    }\\n\\n    /**\\n     * @dev Calculate the energy for `addr` based on the staking history  before the endTime of specified period\\n     *\\n     * @param addr The wallet address to calculated for\\n     * @param periodId The period id for energy calculation\\n     * @return energy amount\\n     */\\n    function calculateEnergy(address addr, uint256 periodId) public view returns (uint256) {\\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n        if (periodId == 0 || periodId > periodIdCounter) revert ContractError(WRONG_PERIOD_ID);\\n\\n        Period memory period = getPeriod(periodId);\\n\\n        Stake[] memory astoHistory = stakingLogic_.getHistory(ASTO_TOKEN_ID, addr, period.endTime);\\n        Stake[] memory lpHistory = stakingLogic_.getHistory(LP_TOKEN_ID, addr, period.endTime);\\n\\n        uint256 astoEnergyAmount = _calculateEnergyForToken(astoHistory, period.astoMultiplier);\\n        uint256 lpEnergyAmount = _calculateEnergyForToken(lpHistory, period.lpMultiplier);\\n\\n        return (astoEnergyAmount + lpEnergyAmount);\\n    }\\n\\n    /**\\n     * @dev Calculate the energy for specific staked token\\n     *\\n     * @param history The staking history for the staked token\\n     * @param multiplier The multiplier for staked token\\n     * @return total energy amount for the token\\n     */\\n    function _calculateEnergyForToken(Stake[] memory history, uint256 multiplier) internal view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = history.length; i > 0; i--) {\\n            if (currentTime() < history[i - 1].time) continue;\\n\\n            uint256 elapsedTime = i == history.length\\n                ? currentTime().sub(history[i - 1].time)\\n                : history[i].time.sub(history[i - 1].time);\\n\\n            total = total.add(elapsedTime.mul(history[i - 1].amount).mul(multiplier));\\n        }\\n        return total.div(SECONDS_PER_DAY);\\n    }\\n\\n    /**\\n     * @dev Calculate available energy generated by keeping LP tokens in LBA contract\\n     *\\n     * @param addr The wallet address to calculated for\\n     * @param periodId The period id for energy calculation\\n     * @return energy amount\\n     */\\n    function calculateAvailableLBAEnergy(address addr, uint256 periodId) public view returns (uint256) {\\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n        if (periodId == 0 || periodId > periodIdCounter) revert ContractError(WRONG_PERIOD_ID);\\n\\n        Period memory period = getPeriod(periodId);\\n\\n        uint256 lbaEnergyStartTime = getLBAEnergyStartTime();\\n        if (currentTime() < lbaEnergyStartTime) return 0;\\n\\n        uint256 elapsedTime = currentTime() - lbaEnergyStartTime;\\n        uint256 lbaLPAmount = lba_.claimableLPAmount(addr);\\n\\n        return elapsedTime.mul(lbaLPAmount).mul(period.lbaLPMultiplier).div(SECONDS_PER_DAY);\\n    }\\n\\n    /**\\n     * @dev Get the energy amount available for address `addr`\\n     *\\n     * @param addr The wallet address to get energy for\\n     * @param periodId The period id for energy calculation\\n     * @return Energy amount available\\n     */\\n    function getEnergy(address addr, uint256 periodId) public view returns (uint256) {\\n        return calculateEnergy(addr, periodId) - getConsumedEnergy(addr) + getRemainingLBAEnergy(addr, periodId);\\n    }\\n\\n    /**\\n     * @dev Get remaining LBA energy amount available for address `addr` to spend\\n     *\\n     * @param addr The wallet address to get energy for\\n     * @param periodId The period id for energy calculation\\n     * @return Energy amount remaining\\n     */\\n    function getRemainingLBAEnergy(address addr, uint256 periodId) public view returns (uint256) {\\n        uint256 availableEnergy = calculateAvailableLBAEnergy(addr, periodId);\\n        uint256 consumedEnergy = getConsumedLBAEnergy(addr);\\n        if (availableEnergy > 0 && availableEnergy > consumedEnergy) return availableEnergy - consumedEnergy;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Consume energy generated before the endTime of period `periodId`\\n     * @dev Energy accumulated by keeping LP tokens in LBA contract will be consumed first\\n     *\\n     * @param addr The wallet address to consume from\\n     * @param periodId The period id for energy consumption\\n     * @param amount The amount of energy to consume\\n     */\\n    function useEnergy(\\n        address addr,\\n        uint256 periodId,\\n        uint256 amount\\n    ) external whenNotPaused onlyRole(CONSUMER_ROLE) {\\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n        if (periodId == 0 || periodId > periodIdCounter) revert ContractError(WRONG_PERIOD_ID);\\n        if (amount > getEnergy(addr, periodId)) revert InvalidInput(WRONG_AMOUNT);\\n\\n        uint256 remainingLBAEnergy = getRemainingLBAEnergy(addr, periodId);\\n        uint256 lbaEnergyToSpend = Math.min(amount, remainingLBAEnergy);\\n\\n        // use LBA energy first\\n        if (lbaEnergyToSpend > 0) {\\n            lbaEnergyStorage_.increaseConsumedAmount(addr, lbaEnergyToSpend);\\n            emit LBAEnergyUsed(addr, lbaEnergyToSpend);\\n        }\\n\\n        uint256 energyToSpend = amount - lbaEnergyToSpend;\\n        if (energyToSpend > 0) {\\n            energyStorage_.increaseConsumedAmount(addr, energyToSpend);\\n            emit EnergyUsed(addr, energyToSpend);\\n        }\\n    }\\n\\n    /** ----------------------------------\\n     * ! Getters\\n     * ----------------------------------- */\\n\\n    /**\\n     * @dev Get period data by period id `periodId`\\n     *\\n     * @param periodId The id of period to get\\n     * @return a Period struct\\n     */\\n    function getPeriod(uint256 periodId) public view returns (Period memory) {\\n        if (periodId == 0 || periodId > periodIdCounter) revert InvalidInput(WRONG_PERIOD_ID);\\n        return periods[periodId];\\n    }\\n\\n    /**\\n     * @notice Get the current period based on current timestamp\\n     *\\n     * @return current period data\\n     */\\n    function getCurrentPeriod() external view returns (Period memory) {\\n        return periods[getCurrentPeriodId()];\\n    }\\n\\n    /**\\n     * @notice Get the current period id based on current timestamp\\n     *\\n     * @return current periodId\\n     */\\n    function getCurrentPeriodId() public view returns (uint256) {\\n        for (uint256 index = 1; index <= periodIdCounter; index++) {\\n            Period memory p = periods[index];\\n            if (currentTime() >= uint256(p.startTime) && currentTime() < uint256(p.endTime)) {\\n                return index;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Get the current periodId based on current timestamp\\n     * @dev Can be overridden by child contracts\\n     *\\n     * @return current timestamp\\n     */\\n    function currentTime() public view virtual returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp;\\n    }\\n\\n    function getLBAEnergyStartTime() public view returns (uint256) {\\n        return _lbaEnergyStartTime > 0 ? _lbaEnergyStartTime : lba_.lpTokenReleaseTime();\\n    }\\n\\n    /** ----------------------------------\\n     * ! Administration         | Manager\\n     * ----------------------------------- */\\n\\n    /**\\n     * @dev Add new periods\\n     * @dev Only dao contract has the permission to call this function\\n     *\\n     * @param _periods The list of periods to be added\\n     */\\n    function addPeriods(Period[] memory _periods) external onlyRole(MANAGER_ROLE) {\\n        _addPeriods(_periods);\\n    }\\n\\n    /**\\n     * @dev Add a new period\\n     * @dev Only dao contract has the permission to call this function\\n     *\\n     * @param period The period instance to add\\n     */\\n    function addPeriod(Period memory period) external onlyRole(MANAGER_ROLE) {\\n        _addPeriod(period);\\n    }\\n\\n    /**\\n     * @dev Update a period\\n     * @dev Only dao contract has the permission to call this function\\n     *\\n     * @param periodId The period id to update\\n     * @param period The period data to update\\n     */\\n    function updatePeriod(uint256 periodId, Period memory period) external onlyRole(MANAGER_ROLE) {\\n        _updatePeriod(periodId, period);\\n    }\\n\\n    /**\\n     * @dev Add new periods\\n     * @dev This is a private function, can only be called in this contract\\n     *\\n     * @param _periods The list of periods to be added\\n     */\\n    function _addPeriods(Period[] memory _periods) internal {\\n        for (uint256 i = 0; i < _periods.length; i++) {\\n            _addPeriod(_periods[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a new period\\n     * @dev This is an internal function\\n     *\\n     * @param period The period instance to add\\n     */\\n    function _addPeriod(Period memory period) internal {\\n        periods[++periodIdCounter] = period;\\n        emit PeriodAdded(currentTime(), periodIdCounter, period);\\n    }\\n\\n    /**\\n     * @dev Update a period\\n     * @dev This is an internal function\\n     *\\n     * @param periodId The period id to update\\n     * @param period The period data to update\\n     */\\n    function _updatePeriod(uint256 periodId, Period memory period) internal {\\n        if (periodId == 0 || periodId > periodIdCounter) revert ContractError(WRONG_PERIOD_ID);\\n        periods[periodId] = period;\\n        emit PeriodUpdated(currentTime(), periodId, period);\\n    }\\n\\n    /** ----------------------------------\\n     * ! Administration       | CONTROLLER\\n     * ----------------------------------- */\\n\\n    /**\\n     * @dev Initialize the contract:\\n     * @dev only controller is allowed to call this function\\n     *\\n     * @param dao The dao contract address\\n     * @param energyStorage The energy storage contract address\\n     * @param stakingLogic The staking logic contrct address\\n     */\\n    function init(\\n        address dao,\\n        address multisig,\\n        address energyStorage,\\n        address lbaEnergyStorage,\\n        address stakingLogic\\n    ) external onlyRole(CONTROLLER_ROLE) {\\n        if (!_initialized) {\\n            if (!_isContract(energyStorage)) revert ContractError(INVALID_ENERGY_STORAGE);\\n            if (!_isContract(lbaEnergyStorage)) revert ContractError(INVALID_LBA_ENERGY_STORAGE);\\n            if (!_isContract(stakingLogic)) revert ContractError(INVALID_STAKING_LOGIC);\\n\\n            stakingLogic_ = Staking(stakingLogic);\\n            energyStorage_ = EnergyStorage(energyStorage);\\n            lbaEnergyStorage_ = EnergyStorage(lbaEnergyStorage);\\n\\n            _grantRole(DAO_ROLE, dao);\\n            _grantRole(MULTISIG_ROLE, multisig);\\n            _grantRole(MANAGER_ROLE, multisig);\\n\\n            _initialized = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Update the DAO contract address\\n     * @dev only Controller is allowed to change the address of DAO contract\\n     */\\n    function setDao(address newDao) external onlyRole(CONTROLLER_ROLE) {\\n        _clearRole(DAO_ROLE);\\n        _grantRole(DAO_ROLE, newDao);\\n    }\\n\\n    /**\\n     * @dev Update the Multisig contract address\\n     * @dev only Controller is allowed to change the address of Multisig contract\\n     */\\n    function setMultisig(address newMultisig, address dao) external onlyRole(CONTROLLER_ROLE) {\\n        _clearRole(MULTISIG_ROLE);\\n        _grantRole(MULTISIG_ROLE, newMultisig);\\n        _grantRole(MULTISIG_ROLE, dao);\\n    }\\n\\n    /**\\n     * @dev Update the Controller contract address\\n     * @dev only controller is allowed to call this function\\n     */\\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\\n        _clearRole(CONTROLLER_ROLE);\\n        _grantRole(CONTROLLER_ROLE, newController);\\n    }\\n\\n    /**\\n     * @dev Pause the contract\\n     * @dev only controller is allowed to call this function\\n     */\\n    function pause() external onlyRole(CONTROLLER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract\\n     * @dev only controller is allowed to call this function\\n     */\\n    function unpause() external onlyRole(CONTROLLER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EnergyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./helpers/Util.sol\\\";\\nimport \\\"./helpers/PermissionControl.sol\\\";\\n\\n/**\\n * @dev ASM Genome Mining - Energy Storage contract\\n *\\n * Store consumed energy amount for each address.\\n * This contract will be called from Converter logic contract (Converter.sol)\\n */\\ncontract EnergyStorage is Util, PermissionControl {\\n    bool private _initialized = false;\\n    mapping(address => uint256) public consumedAmount;\\n\\n    constructor(address controller) {\\n        if (!_isContract(controller)) revert ContractError(INVALID_CONTROLLER);\\n        _grantRole(CONTROLLER_ROLE, controller);\\n    }\\n\\n    /**\\n     * @dev Increase consumed energy for address `addr`\\n     * @dev can only be called by Converter\\n     *\\n     * @param addr The wallet address which consumed the energy\\n     * @param amount The amount of consumed energy\\n     */\\n    function increaseConsumedAmount(address addr, uint256 amount) external onlyRole(CONSUMER_ROLE) {\\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n        consumedAmount[addr] += amount;\\n    }\\n\\n    /** ----------------------------------\\n     * ! Admin functions\\n     * ----------------------------------- */\\n\\n    /**\\n     * @dev Initialize the contract:\\n     * @dev only controller is allowed to call this function\\n     *\\n     * @param converterLogic Converter logic contract address\\n     */\\n    function init(address converterLogic) external onlyRole(CONTROLLER_ROLE) {\\n        if (!_initialized) {\\n            if (!_isContract(converterLogic)) revert ContractError(INVALID_CONVERTER_LOGIC);\\n\\n            _grantRole(CONSUMER_ROLE, converterLogic);\\n            _initialized = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Update the Controller contract address\\n     * @dev only controller is allowed to call this function\\n     */\\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\\n        _clearRole(CONTROLLER_ROLE);\\n        _grantRole(CONTROLLER_ROLE, newController);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./helpers/IStaking.sol\\\";\\nimport \\\"./helpers/TimeConstants.sol\\\";\\n\\nimport \\\"./Controller.sol\\\";\\nimport \\\"./helpers/Util.sol\\\";\\nimport \\\"./StakingStorage.sol\\\";\\nimport \\\"./helpers/PermissionControl.sol\\\";\\n\\n/**\\n * @dev ASM Genome Mining - Staking Logic contract\\n */\\n\\ncontract Staking is IStaking, Util, PermissionControl, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    bool private _initialized = false;\\n\\n    uint256 public constant ASTO_TOKEN_ID = 0;\\n    uint256 public constant LP_TOKEN_ID = 1;\\n\\n    /**\\n     * `_token`:  tokenId => token contract address\\n     * `_token`:  tokenId => token name\\n     * `_storage`:  tokenId => storage contract address\\n     * `totalStakedAmount`:  tokenId => total staked amount for that tokenId\\n     *\\n     * IDs: 0 for ASTO, 1 for LP tokens, see `init()` below\\n     */\\n    mapping(uint256 => IERC20) private _token;\\n    mapping(uint256 => string) private _tokenName;\\n    mapping(uint256 => StakingStorage) private _storage;\\n    mapping(uint256 => uint256) public totalStakedAmount;\\n\\n    constructor(address controller) {\\n        if (!_isContract(controller)) revert InvalidInput(INVALID_CONTROLLER);\\n        _grantRole(CONTROLLER_ROLE, controller);\\n        _pause();\\n    }\\n\\n    /** ----------------------------------\\n     * ! Administration          | dao\\n     * ----------------------------------- */\\n\\n    /**\\n     * @notice Withdraw tokens left in the contract to specified address\\n     * @param tokenId - ID of token to stake\\n     * @param recipient recipient of the transfer\\n     * @param amount Token amount to withdraw\\n     */\\n    function withdraw(\\n        uint256 tokenId,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyRole(DAO_ROLE) {\\n        if (!_isContract(address(_token[tokenId]))) revert InvalidInput(WRONG_TOKEN);\\n        if (address(recipient) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n        if (_token[tokenId].balanceOf(address(this)) < amount) revert InvalidInput(INSUFFICIENT_BALANCE);\\n\\n        _token[tokenId].safeTransfer(recipient, amount);\\n    }\\n\\n    /** ----------------------------------\\n     * ! Administration       | CONTROLLER\\n     * ----------------------------------- */\\n\\n    /**\\n     * @dev Setting up persmissions for this contract:\\n     * @dev only DAO contract is allowed to call admin functions\\n     * @dev only controller is allowed to update permissions - to reduce amount of DAO votings\\n     *\\n     * @param astoToken ASTO Token contract address\\n     * @param lpToken LP Token contract address\\n     * @param astoStorage ASTO staking storage contract address\\n     * @param lpStorage LP staking storage contract address\\n     */\\n    function init(\\n        address dao,\\n        IERC20 astoToken,\\n        address astoStorage,\\n        IERC20 lpToken,\\n        address lpStorage,\\n        uint256 totalStakedAsto,\\n        uint256 totalStakedLp\\n    ) external onlyRole(CONTROLLER_ROLE) {\\n        if (!_initialized) {\\n            _token[0] = astoToken;\\n            _storage[0] = StakingStorage(astoStorage);\\n            _tokenName[0] = \\\"ASTO\\\";\\n\\n            _token[1] = lpToken;\\n            _storage[1] = StakingStorage(lpStorage);\\n            _tokenName[1] = \\\"ASTO/USDC Uniswap V2 LP\\\";\\n\\n            _clearRole(DAO_ROLE);\\n            _grantRole(DAO_ROLE, dao);\\n\\n            totalStakedAmount[ASTO_TOKEN_ID] = totalStakedAsto;\\n            totalStakedAmount[LP_TOKEN_ID] = totalStakedLp;\\n\\n            _initialized = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Update the DAO contract address\\n     * @dev only controller is allowed to set new DAO contract\\n     */\\n    function setDao(address newDao) external onlyRole(CONTROLLER_ROLE) {\\n        _clearRole(DAO_ROLE);\\n        _grantRole(DAO_ROLE, newDao);\\n    }\\n\\n    /**\\n     * @dev Update the Controller contract address\\n     * @dev only controller is allowed to call this function\\n     */\\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\\n        _clearRole(CONTROLLER_ROLE);\\n        _grantRole(CONTROLLER_ROLE, newController);\\n    }\\n\\n    /**\\n     * @dev Pause the contract\\n     * @dev only controller is allowed to call this function\\n     */\\n    function pause() external onlyRole(CONTROLLER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract\\n     * @dev only controller is allowed to call this function\\n     */\\n    function unpause() external onlyRole(CONTROLLER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /** ----------------------------------\\n     * ! Business logic\\n     * ----------------------------------- */\\n\\n    /**\\n     * @notice Save user's stake\\n     *\\n     * @notice Staking is a process of locking your tokens in this contract.\\n     * @notice Details of the stake are to be stored and used for calculations\\n     * @notice what time your tokens are stay staked.\\n     *\\n     * @dev Prerequisite:\\n     * @dev - amount of tokens to stake should be approved by user.\\n     * @dev - this contract should have a `CONSUMER_ROLE` to call\\n     * @dev   the storage's `updateHistory()` function.\\n     *\\n     * @dev Depending on tokenId passed, it:\\n     * @dev 1. transfers tokens from user to this contract\\n     * @dev 2. calls an appropriate token storage and saves time and amount of stake.\\n     *\\n     * @dev Emit `UnStaked` event on success: with token name, user address, timestamp, amount\\n     *\\n     * @param tokenId - ID of token to stake\\n     * @param amount - amount of tokens to stake\\n     */\\n    function stake(uint256 tokenId, uint256 amount) external whenNotPaused {\\n        if (tokenId > 1) revert InvalidInput(WRONG_TOKEN);\\n        if (amount == 0) revert InvalidInput(WRONG_AMOUNT);\\n        address user = msg.sender;\\n        uint256 tokenBalance = _token[tokenId].balanceOf(user);\\n        if (amount > tokenBalance) revert InvalidInput(INSUFFICIENT_BALANCE);\\n\\n        _token[tokenId].safeTransferFrom(user, address(this), amount);\\n\\n        uint256 lastStakeId = _storage[tokenId].getUserLastStakeId(user);\\n        uint256 stakeBalance = (_storage[tokenId].getStake(user, lastStakeId)).amount;\\n        uint256 newAmount = stakeBalance + amount;\\n        _storage[tokenId].updateHistory(user, newAmount);\\n        totalStakedAmount[tokenId] += amount;\\n\\n        emit Staked(_tokenName[tokenId], user, block.timestamp, amount);\\n    }\\n\\n    /**\\n     * @notice Unstake user's stake\\n     *\\n     * @notice Unstaking is a process of getting back previously staked tokens.\\n     * @notice Users can unlock their tokens any time.\\n     *\\n     * @dev No prerequisites\\n     * @dev Users can unstake only their own, previously staked  tokens\\n     * @dev Emit `UnStaked` event on success: with token name, user address, timestamp, amount\\n     *\\n     * @param tokenId - ID of token to stake\\n     * @param amount - amount of tokens to stake\\n     */\\n    function unstake(uint256 tokenId, uint256 amount) external whenNotPaused {\\n        if (!_isContract(address(_token[tokenId]))) revert InvalidInput(WRONG_TOKEN);\\n        if (amount == 0) revert InvalidInput(WRONG_AMOUNT);\\n\\n        address user = msg.sender;\\n        uint256 id = _storage[tokenId].getUserLastStakeId(user);\\n        if (id == 0) revert InvalidInput(NO_STAKES);\\n        uint256 userBalance = (_storage[tokenId].getStake(user, id)).amount;\\n        if (amount > userBalance) revert InvalidInput(INSUFFICIENT_BALANCE);\\n\\n        uint256 newAmount = userBalance - amount;\\n        _storage[tokenId].updateHistory(user, newAmount);\\n        totalStakedAmount[tokenId] -= amount;\\n\\n        _token[tokenId].safeTransfer(user, amount);\\n\\n        emit UnStaked(_tokenName[tokenId], user, block.timestamp, amount);\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of tokens staked by all users\\n     *\\n     * @param tokenId ASTO - 0, LP - 1\\n     * @return amount of tokens staked in the contract, uint256\\n     */\\n    function getTotalValueLocked(uint256 tokenId) external view returns (uint256) {\\n        return totalStakedAmount[tokenId];\\n    }\\n\\n    /** ----------------------------------\\n     * ! Getters\\n     * ----------------------------------- */\\n\\n    /**\\n     * @notice Returns address of the token storage contract\\n     *\\n     * @param tokenId ASTO - 0, LP - 1\\n     * @return address of the token storage contract\\n     */\\n    function getStorageAddress(uint256 tokenId) external view returns (address) {\\n        return address(_storage[tokenId]);\\n    }\\n\\n    /**\\n     * @notice Returns address of the token contract\\n     *\\n     * @param tokenId ASTO - 0, LP - 1\\n     * @return address of the token contract\\n     */\\n    function getTokenAddress(uint256 tokenId) external view returns (address) {\\n        return address(_token[tokenId]);\\n    }\\n\\n    /**\\n     * @notice Returns the staking history of user\\n     *\\n     * @param tokenId ASTO - 0, LP - 1\\n     * @param addr user wallet address\\n     * @param endTime until what time tokens were staked\\n     * @return sorted list of stakes, for each stake: { time, amount },\\n     *         starting with earliest\\n     */\\n    function getHistory(\\n        uint256 tokenId,\\n        address addr,\\n        uint256 endTime\\n    ) external view returns (Stake[] memory) {\\n        return _storage[tokenId].getHistory(addr, endTime);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./helpers/IStaking.sol\\\";\\nimport \\\"./helpers/TimeConstants.sol\\\";\\nimport \\\"./Controller.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./helpers/Util.sol\\\";\\nimport \\\"./helpers/PermissionControl.sol\\\";\\n\\n/**\\n * @dev ASM Genome Mining - Staking Storage contract\\n */\\ncontract StakingStorage is IStaking, PermissionControl, Util, Pausable {\\n    bool private _initialized = false;\\n\\n    // Incrementing stake Id used to record history\\n    mapping(address => uint256) public stakeIds;\\n    // Store stake history per each address keyed by stake Id\\n    mapping(address => mapping(uint256 => Stake)) public stakeHistory;\\n\\n    constructor(address controller) {\\n        if (!_isContract(controller)) revert InvalidInput(INVALID_CONTROLLER);\\n        _grantRole(CONTROLLER_ROLE, controller);\\n    }\\n\\n    /** ----------------------------------\\n     * ! Business logic\\n     * ----------------------------------- */\\n\\n    /**\\n     * @notice Saving stakes into storage.\\n     * @notice Function can be called only manager\\n     *\\n     * @param addr - user address\\n     * @param amount - amount of tokens to stake\\n     * @return stakeID\\n     */\\n    function updateHistory(address addr, uint256 amount) external onlyRole(CONSUMER_ROLE) returns (uint256) {\\n        if (address(addr) == address(0)) revert InvalidInput(WRONG_ADDRESS);\\n\\n        uint128 time = uint128(currentTime());\\n        Stake memory newStake = Stake(time, amount);\\n        uint256 userStakeId = ++stakeIds[addr]; // ++i cheaper than i++, so, stakeHistory[addr] starts from 1\\n        stakeHistory[addr][userStakeId] = newStake;\\n        return userStakeId;\\n    }\\n\\n    /** ----------------------------------\\n     * ! Getters\\n     * ----------------------------------- */\\n\\n    function getHistory(address addr, uint256 endTime) external view returns (Stake[] memory) {\\n        uint256 totalStakes = stakeIds[addr];\\n\\n        Stake[] memory stakes = new Stake[](totalStakes); // suboptimal - it could be larger than needed, when endTime is lesser than current time\\n\\n        // stakeHistory[addr] starts from 1, see `updateHistory`\\n        for (uint256 i = 1; i < totalStakes + 1; i++) {\\n            Stake memory stake = stakeHistory[addr][i];\\n            if (stake.time <= endTime) stakes[i - 1] = stake;\\n            else {\\n                // shortening array before returning\\n                Stake[] memory res = new Stake[](i - 1);\\n                for (uint256 j = 0; j < res.length; j++) res[j] = stakes[j];\\n                return res;\\n            }\\n        }\\n        return stakes;\\n    }\\n\\n    function getStake(address addr, uint256 id) external view returns (Stake memory) {\\n        return stakeHistory[addr][id];\\n    }\\n\\n    function getUserLastStakeId(address addr) external view returns (uint256) {\\n        return stakeIds[addr];\\n    }\\n\\n    /**\\n     * @notice Get the current periodId based on current timestamp\\n     * @dev Can be overridden by child contracts\\n     *\\n     * @return current timestamp\\n     */\\n    function currentTime() public view virtual returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp;\\n    }\\n\\n    /** ----------------------------------\\n     * ! Administration       | CONTROLLER\\n     * ----------------------------------- */\\n\\n    /**\\n     * @dev Setting up persmissions for this contract:\\n     * @dev only Consumer is allowed to save into this storage\\n     * @dev only Controller is allowed to update permissions - to reduce amount of DAO votings\\n     * @dev\\n     *\\n     * @param controller Controller contract address\\n     * @param stakingLogic Staking contract address\\n     */\\n    function init(address stakingLogic) external onlyRole(CONTROLLER_ROLE) {\\n        if (!_initialized) {\\n            _grantRole(CONSUMER_ROLE, stakingLogic);\\n            _initialized = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Update the Controller contract address\\n     * @dev only controller is allowed to call this function\\n     */\\n    function setController(address newController) external onlyRole(CONTROLLER_ROLE) {\\n        _clearRole(CONTROLLER_ROLE);\\n        _grantRole(CONTROLLER_ROLE, newController);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface for Converter\\n */\\ninterface IConverter {\\n    struct Period {\\n        uint128 startTime;\\n        uint128 endTime;\\n        uint128 astoMultiplier;\\n        uint128 lpMultiplier;\\n        uint128 lbaLPMultiplier;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev For testing purpose\\n */\\ninterface IStaking {\\n    event Staked(string tokenName, address indexed staker, uint256 timestamp, uint256 amount);\\n    event UnStaked(string tokenName, address indexed staker, uint256 timestamp, uint256 amount);\\n\\n    struct Stake {\\n        uint256 time; // Time for precise calculations\\n        uint256 amount; // New amount on every new (un)stake\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/PermissionControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\n/**\\n * @dev ASM Genome Mining - PermissionControl contract\\n */\\n\\nbytes32 constant CONTROLLER_ROLE = keccak256(\\\"CONTROLLER_ROLE\\\");\\nbytes32 constant MULTISIG_ROLE = keccak256(\\\"MULTISIG_ROLE\\\");\\nbytes32 constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\nbytes32 constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\nbytes32 constant CONSUMER_ROLE = keccak256(\\\"CONSUMER_ROLE\\\");\\n\\nstring constant MISSING_ROLE = \\\"Missing required role\\\";\\n\\ncontract PermissionControl is AccessControlEnumerable {\\n    error AccessDenied(string errMsg);\\n\\n    /**\\n     * @dev Modifier that checks that an account has at least one role in `roles`.\\n     * Reverts with a standardized message.\\n     */\\n    modifier eitherRole(bytes32[2] memory roles) {\\n        if (!hasRole(roles[0], _msgSender()) && !hasRole(roles[1], _msgSender())) {\\n            revert AccessDenied(MISSING_ROLE);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Revoke all members to `role`\\n     * @dev Internal function without access restriction.\\n     */\\n    function _clearRole(bytes32 role) internal {\\n        uint256 count = getRoleMemberCount(role);\\n        for (uint256 i = count; i > 0; i--) {\\n            _revokeRole(role, getRoleMember(role, i - 1));\\n        }\\n    }\\n\\n    /**\\n     * @dev Grant CONSUMER_ROLE to `addr`.\\n     * @dev Can only be called from Controller or Multisig\\n     */\\n    function addConsumer(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\\n        _grantRole(CONSUMER_ROLE, addr);\\n    }\\n\\n    /**\\n     * @dev Revoke CONSUMER_ROLE to `addr`.\\n     * @dev Can only be called from Controller or Multisig\\n     */\\n    function removeConsumer(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\\n        _revokeRole(CONSUMER_ROLE, addr);\\n    }\\n\\n    /**\\n     * @dev Grant MANAGER_ROLE to `addr`.\\n     * @dev Can only be called from Controller or Multisig\\n     */\\n    function addManager(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\\n        _grantRole(MANAGER_ROLE, addr);\\n    }\\n\\n    /**\\n     * @dev Revoke MANAGER_ROLE to `addr`.\\n     * @dev Can only be called from Controller or Multisig\\n     */\\n    function removeManager(address addr) public eitherRole([CONTROLLER_ROLE, MULTISIG_ROLE]) {\\n        _revokeRole(MANAGER_ROLE, addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TimeConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev ASM Genome Mining - Time constants we use\\n */\\n\\nuint256 constant DAYS_PER_WEEK = 7;\\nuint256 constant HOURS_PER_DAY = 24;\\nuint256 constant MINUTES_PER_HOUR = 60;\\nuint256 constant SECONDS_PER_MINUTE = 60;\\nuint256 constant SECONDS_PER_HOUR = 3600;\\nuint256 constant SECONDS_PER_DAY = 86400;\\nuint256 constant SECONDS_PER_WEEK = 604800;\\n\"\r\n    },\r\n    \"contracts/helpers/Util.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev ASM Genome Mining - Utility contract\\n */\\ncontract Util {\\n    error InvalidInput(string errMsg);\\n    error ContractError(string errMsg);\\n\\n    string constant ALREADY_INITIALIZED = \\\"The contract has already been initialized\\\";\\n    string constant INVALID_MULTISIG = \\\"Invalid Multisig contract\\\";\\n    string constant INVALID_DAO = \\\"Invalid DAO contract\\\";\\n    string constant INVALID_CONTROLLER = \\\"Invalid Controller contract\\\";\\n    string constant INVALID_STAKING_LOGIC = \\\"Invalid Staking Logic contract\\\";\\n    string constant INVALID_STAKING_STORAGE = \\\"Invalid Staking Storage contract\\\";\\n    string constant INVALID_CONVERTER_LOGIC = \\\"Invalid Converter Logic contract\\\";\\n    string constant INVALID_ENERGY_STORAGE = \\\"Invalid Energy Storage contract\\\";\\n    string constant INVALID_LBA_ENERGY_STORAGE = \\\"Invalid LBA Energy Storage contract\\\";\\n    string constant INVALID_ASTO_CONTRACT = \\\"Invalid ASTO contract\\\";\\n    string constant INVALID_LP_CONTRACT = \\\"Invalid LP contract\\\";\\n    string constant INVALID_LBA_CONTRACT = \\\"Invalid LBA contract\\\";\\n    string constant WRONG_ADDRESS = \\\"Wrong or missed wallet address\\\";\\n    string constant WRONG_AMOUNT = \\\"Wrong or missed amount\\\";\\n    string constant WRONG_PERIOD_ID = \\\"Wrong periodId\\\";\\n    string constant WRONG_TOKEN = \\\"Token not allowed for staking\\\";\\n    string constant INSUFFICIENT_BALANCE = \\\"Insufficient token balance\\\";\\n    string constant INSUFFICIENT_STAKED_AMOUNT = \\\"Requested amount is greater than a stake\\\";\\n    string constant NO_STAKES = \\\"No stakes yet\\\";\\n\\n    /**\\n     * @notice Among others, `isContract` will return false for the following\\n     * @notice types of addresses:\\n     * @notice  - an externally-owned account\\n     * @notice  - a contract in construction\\n     * @notice  - an address where a contract will be created\\n     * @notice  - an address where a contract lived, but was destroyed\\n     *\\n     * @dev Attention!\\n     * @dev if _isContract() called from the constructor,\\n     * @dev addr.code.length will be equal to 0, and\\n     * @dev this function will return false.\\n     *\\n     */\\n    function _isContract(address addr) internal view returns (bool) {\\n        return addr.code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityBootstrapAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface ILiquidityBootstrapAuction {\\n    function claimableLPAmount(address) external view returns (uint256);\\n\\n    function lpTokenReleaseTime() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"ContractError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ASTO_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"getHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"astoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"astoStorage\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAsto\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedLp\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a07f75da8e098834dc97f319521b97642d9d48d7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}