{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/CafeStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\nimport \\\"../utils/UncheckedIncrement.sol\\\";\\nimport \\\"../interfaces/ICafeStaking.sol\\\";\\nimport \\\"../interfaces/IERC20StakingLocker.sol\\\";\\nimport \\\"../interfaces/IERC721StakingLocker.sol\\\";\\nimport \\\"../interfaces/IERC1155StakingLocker.sol\\\";\\nimport \\\"../interfaces/ICafeAccumulator.sol\\\";\\nimport \\\"./StakingCommons.sol\\\";\\nimport \\\"./OnChainRewardsWallet.sol\\\";\\n\\nstruct Stake {\\n    uint128 reward;\\n    uint128 paid;\\n    uint256 balance;\\n    uint256[50000] ids;\\n}\\n\\nstruct TokenRange {\\n    uint128 lower;\\n    uint128 upper;\\n    bool enabled;\\n}\\n\\nstruct Track {\\n    uint128 rewardPerTokenStored;\\n    uint128 lastUpdateTime;\\n    // unixtime stamp\\n    uint128 start;\\n    // unixtime stamp\\n    uint128 end;\\n    // the total of the Staking Asset deposited\\n    uint256 staked;\\n    // reward per second, in $CAFE\\n    uint256 rps;\\n    // valid token identity range (for ERC721 and ERC1155)\\n    TokenRange range;\\n    // unique track id\\n    uint32 id;\\n    /// @custom:security non-reentrant\\n    OnChainRewardsWallet wallet;\\n    // staking asset address\\n    address asset;\\n    // staking asset type\\n    TrackType atype;\\n    // if true, lock through asset transfer\\n    bool transferLock;\\n    // if true, prevent staking/unstaking\\n    bool paused;\\n}\\n\\ncontract CafeStaking is\\n    ICafeStaking,\\n    Initializable,\\n    OwnableUpgradeable,\\n    IERC721ReceiverUpgradeable,\\n    IERC1155ReceiverUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IERC20StakingLocker;\\n    using UncheckedIncrement for uint256;\\n\\n    /// @custom:security non-reentrant\\n    IERC20Upgradeable public cafeToken;\\n\\n    mapping(uint256 => Track) public tracks;\\n\\n    uint256 public tracksCount;\\n\\n    // staker => asset => Stake\\n    mapping(address => mapping(address => Stake)) public stakes;\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function initialize(address cafeToken_) external initializer {\\n        if (!cafeToken_.isContract())\\n            revert ContractAddressExpected(cafeToken_);\\n\\n        __Ownable_init();\\n\\n        cafeToken = IERC20Upgradeable(cafeToken_);\\n    }\\n\\n    /* ========== PUBLIC MUTATORS ========== */\\n\\n    /// @dev Batch process Stake Requests.\\n    /// @param msr Multiple stake requests.\\n    /// @param actions Multiple corresponding actions.\\n    function execute(\\n        StakeRequest[] calldata msr,\\n        StakeAction[][] calldata actions\\n    ) external {\\n        _execute(msg.sender, msr, actions);\\n    }\\n\\n    /// @dev Batch process Stake Requests. For autostaking purposes,\\n    ///      so only callable from asset contracts.\\n    /// @param msr Multiple stake requests.\\n    /// @param actions Multiple corresponding actions.\\n    function execute4(\\n        address account,\\n        StakeRequest[] calldata msr,\\n        StakeAction[][] calldata actions\\n    ) external {\\n        if (msg.sender != tracks[msr[0].trackId].asset) revert Unauthorized();\\n\\n        _execute(account, msr, actions);\\n    }\\n\\n    /* ========== ADMIN-ONLY MUTATORS ========== */\\n\\n    /// @dev Create a staking track. Assign id automatically. Emit {TrackCreated} on success.\\n    ///      Transfers staking rewards to the track's On-Chain Rewards Wallet.\\n    ///\\n    /// @param asset Stakable asset address.\\n    /// @param totalRewards Total $CAFE to allocate (from address(this)'s balance.)\\n    /// @param atype Asset type.\\n    /// @param start Begin rewards accrual at this time.\\n    /// @param end Expire the track at this time.\\n    /// @param lower Set the lower token range boundary.\\n    ///        Disable token range by making `lower` higher than `upper`.\\n    /// @param upper Set the upper token range boundary.\\n    /// @param transferLock Define the track as custodial (with `true`.)\\n    ///\\n    /// Requirements:\\n    /// - Caller must be the contract owner.\\n    /// - `asset` must be a contract.\\n    /// - `totalRewards` must be positive.\\n    /// - CafeStaking must hold at least `totalRewards` of $CAFE\\n    /// - `start` must be in the future\\n    /// - `end` must exceed start\\n    function createTrack(\\n        address asset,\\n        uint256 totalRewards,\\n        TrackType atype,\\n        uint256 start,\\n        uint256 end,\\n        uint256 lower,\\n        uint256 upper,\\n        bool transferLock\\n    ) external {\\n        _onlyOwner();\\n\\n        if (!asset.isContract()) revert ContractAddressExpected(asset);\\n        if (totalRewards == 0) revert ZeroAmount();\\n        if (end <= start) revert InvalidTrackTiming();\\n        if (block.timestamp >= start) revert InvalidTrackStart();\\n\\n        address thisContract = address(this);\\n\\n        if (cafeToken.balanceOf(thisContract) < totalRewards)\\n            revert InsufficientCAFE();\\n\\n        Track storage track = tracks[tracksCount];\\n\\n        track.wallet = new OnChainRewardsWallet(thisContract);\\n        track.asset = asset;\\n        track.rps = totalRewards / (end - start);\\n\\n        if (upper >= lower) {\\n            track.range = TokenRange(uint128(lower), uint128(upper), true);\\n        }\\n\\n        track.start = uint128(start);\\n        track.end = uint128(end);\\n        track.atype = atype;\\n        track.transferLock = transferLock;\\n        track.id = uint32(tracksCount);\\n\\n        emit TrackCreated(tracksCount, asset, track.rps);\\n        \\n        tracksCount++;\\n\\n        track.wallet.approve(address(cafeToken), thisContract, true);\\n        cafeToken.safeTransfer(address(track.wallet), totalRewards);\\n    }\\n\\n    /// @dev Pause/resume an existing track. Emit {TrackToggled} on success.\\n    /// @param trackId Identity of the track to pause/resume.\\n    ///\\n    /// Requirements:\\n    /// - Caller must be the contract owner\\n    /// - The track in question must exist\\n    function toggleTrack(uint256 trackId) external {\\n        _onlyOwner();\\n\\n        _trackExists(trackId);\\n\\n        Track storage track = tracks[trackId];\\n\\n        track.paused = !track.paused;\\n\\n        emit TrackToggled(track.id, track.paused);\\n    }\\n\\n    /// @dev Transfer an amount of $CAFE from the contract's balance to a track's wallet.\\n    ///      Automatically update the track's RPS.\\n    /// @param trackId The destination track.\\n    /// @param amount The amount to transfer.\\n    ///\\n    /// Requirements:\\n    /// - The track in question must exist.\\n    /// - The track in question must be non-expired.\\n    /// - The amount must be positive.\\n    /// - CafeStaking must hold at least `amount` of $CAFE\\n    function replenishTrack(uint256 trackId, uint256 amount) external {\\n        _onlyOwner();\\n        _trackExists(trackId);\\n\\n        _replenishTrack(trackId, amount, false);\\n    }\\n\\n    /// @dev Pull all the accumulated $CAFE from an external accumulator asset\\n    ///      and transfer it to a track's wallet.\\n    /// @param trackId The destination track.\\n    /// @param accumulator The accumulator asset address.\\n    ///\\n    /// Requirements:\\n    /// - The track in question must exist.\\n    /// - The track in question must be non-expired.\\n    /// - The amount pulled must be positive.\\n    function replenishTrackFrom(uint256 trackId, address accumulator) external {\\n        _onlyOwner();\\n        _trackExists(trackId);\\n\\n        Track storage track = tracks[trackId];\\n\\n        _replenishTrack(\\n            trackId,\\n            ICafeAccumulator(accumulator).pull(address(track.wallet)),\\n            true\\n        );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @dev Get staked balance of an account for a given ERC20 track.\\n    /// @param trackId The track (asset) to read from.\\n    /// @param account The account to fetch the balance for.\\n    ///\\n    /// Requirements:\\n    /// - The track in question must exist\\n    function stakeInfoERC20(uint256 trackId, address account)\\n        external\\n        view\\n        returns (uint256 bal)\\n    {\\n        _trackExists(trackId);\\n\\n        Track storage track = tracks[trackId];\\n\\n        if (track.transferLock) {\\n            bal = stakes[account][track.asset].balance;\\n        } else {\\n            bal = IERC20StakingLocker(track.asset).locked(account);\\n        }\\n    }\\n\\n    /// @dev Get token identities and balance of an account for a given ERC721 track.\\n    /// @param trackId The track (asset) to read from.\\n    /// @param account The account to fetch the balance for.\\n    /// @param page Read data starting at the top of this page.\\n    /// @param records Records per page.\\n    ///\\n    /// Requirements:\\n    /// - The track in question must exist\\n    function stakeInfoERC721(\\n        uint256 trackId,\\n        address account,\\n        uint256 page,\\n        uint256 records\\n    ) external view returns (uint256[] memory, uint256) {\\n        _trackExists(trackId);\\n\\n        Track storage track = tracks[trackId];\\n        uint256 from = page * records;\\n        uint256 to = from + records;\\n        uint256[] memory result = new uint256[](records);\\n        bool transferLock = track.transferLock;\\n\\n        for (uint256 r = from; r < to; r = r.inc()) {\\n            uint256 amount = transferLock\\n                ? stakes[account][track.asset].ids[r]\\n                : (IERC721StakingLocker(track.asset).isLocked(r) &&\\n                    IERC721StakingLocker(track.asset).ownerOf(r) == account)\\n                ? 1\\n                : 0;\\n\\n            if (amount > 0) {\\n                result[r - from] = 1;\\n            }\\n        }\\n\\n        return (result, stakes[account][track.asset].balance);\\n    }\\n\\n    /// Get token identities, token count, and balance of an account for a given ERC1155 track.\\n    /// @param trackId The track (asset) to read from.\\n    /// @param account The account to fetch the balance for.\\n    /// @param page Read data starting at the top of this page.\\n    /// @param records Records per page.\\n    ///\\n    /// Requirements:\\n    /// - The track in question must exist\\n    function stakeInfoERC1155(\\n        uint256 trackId,\\n        address account,\\n        uint256 page,\\n        uint256 records\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        _trackExists(trackId);\\n\\n        Track storage track = tracks[trackId];\\n        uint256 from = page * records;\\n        uint256 to = from + records;\\n\\n        uint256[] memory result = new uint256[](records);\\n        bool transferLock = track.transferLock;\\n        uint256 count = 0;\\n\\n        for (uint256 r = from; r < to; r = r.inc()) {\\n            uint256 amount = transferLock\\n                ? stakes[account][track.asset].ids[r]\\n                : IERC1155StakingLocker(track.asset).locked(account, r);\\n\\n            if (amount > 0) {\\n                count += amount;\\n                result[r - from] = amount;\\n            }\\n        }\\n        return (result, count, stakes[account][track.asset].balance);\\n    }\\n\\n    /// @dev Get yield per token.\\n    function rewardPerToken(uint256 trackId) public view returns (uint256) {\\n        _trackExists(trackId);\\n\\n        Track storage track = tracks[trackId];\\n\\n        if (track.staked == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            track.rewardPerTokenStored +\\n            ((track.rps *\\n                (_restrictedBlockTimestamp(track.end) - track.lastUpdateTime)) /\\n                track.staked);\\n    }\\n\\n    /// @dev Get the amount earned\\n    function earned(uint256 trackId, address account)\\n        public\\n        view\\n        returns (uint256 res)\\n    {\\n        _trackExists(trackId);\\n\\n        Track storage track = tracks[trackId];\\n\\n        Stake storage stake_ = stakes[account][track.asset];\\n\\n        uint256 balance;\\n\\n        if (track.atype == TrackType.ERC20) {\\n            balance = track.transferLock\\n                ? stake_.balance\\n                : IERC20StakingLocker(track.asset).locked(account);\\n        } else {\\n            balance = stake_.balance;\\n        }\\n\\n        if (balance == 0) {\\n            res = stake_.reward;\\n        } else {\\n            res =\\n                balance *\\n                (rewardPerToken(trackId) - stake_.paid) +\\n                stake_.reward;\\n        }\\n    }\\n\\n    /* ========== INTERNALS/MODIFIERS ========== */\\n\\n    function _replenishTrack(\\n        uint256 trackId,\\n        uint256 amount,\\n        bool directTransfer\\n    ) internal {\\n        if (amount == 0) revert ZeroAmount();\\n\\n        Track storage track = tracks[trackId];\\n\\n        if (!directTransfer && (cafeToken.balanceOf(address(this)) < amount))\\n            revert InsufficientCAFE();\\n\\n        if (block.timestamp >= track.end) revert TrackExpired();\\n\\n        uint256 newBalance = cafeToken.balanceOf(address(track.wallet)) +\\n            (directTransfer ? 0 : amount);\\n\\n        track.rps = newBalance / (track.end - block.timestamp);\\n\\n        emit TrackReplenished(trackId, amount, track.rps);\\n\\n        if (!directTransfer)\\n            cafeToken.safeTransfer(address(track.wallet), amount);\\n    }\\n\\n    function _execute(\\n        address account,\\n        StakeRequest[] calldata msr,\\n        StakeAction[][] calldata actions\\n    ) internal {\\n        for (uint256 sr = 0; sr < msr.length; sr = sr.inc()) {\\n            _trackExists(msr[sr].trackId);\\n        }\\n\\n        for (uint256 sr = 0; sr < msr.length; sr = sr.inc()) {\\n            Track storage track = tracks[msr[sr].trackId];\\n            _updateRewards(track, account);\\n\\n            // ab - action block. a - action\\n            for (uint256 ab = 0; ab < actions.length; ab = ab.inc()) {\\n                for (uint256 a = 0; a < actions[ab].length; a++) {\\n                    if (actions[ab][a] == StakeAction.Stake) {\\n                        _stake(account, tracks[msr[sr].trackId], msr[sr]);\\n                    } else if (actions[ab][a] == StakeAction.Unstake) {\\n                        _unstake(account, tracks[msr[sr].trackId], msr[sr]);\\n                    } else {\\n                        _collect(account, tracks[msr[sr].trackId]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _stake(\\n        address account,\\n        Track storage track,\\n        StakeRequest calldata sr\\n    ) internal {\\n        _inStakingPeriod(track);\\n\\n        if (track.atype == TrackType.ERC20) {\\n            _stake(account, track, sr.amounts[0]);\\n        } else if (track.atype == TrackType.ERC1155) {\\n            _stake(account, track, sr.ids, sr.amounts);\\n        } else {\\n            // TrackType.ERC721\\n            _stake(account, track, sr.ids);\\n        }\\n    }\\n\\n    function _unstake(\\n        address account,\\n        Track storage track,\\n        StakeRequest calldata sr\\n    ) internal {\\n        if (track.atype == TrackType.ERC20) {\\n            _unstake(account, track, sr.amounts[0]);\\n        } else if (track.atype == TrackType.ERC1155) {\\n            _unstake(account, track, sr.ids, sr.amounts);\\n        } else {\\n            // TrackType.ERC721\\n            _unstake(account, track, sr.ids);\\n        }\\n    }\\n\\n    // ERC20\\n    function _stake(\\n        address account,\\n        Track storage track,\\n        uint256 amount\\n    ) internal {\\n        _whenNotPaused(track);\\n        _erc20StakeRequestValid(amount);\\n\\n        IERC20StakingLocker erc20_ = IERC20StakingLocker(track.asset);\\n\\n        track.staked += amount;\\n\\n        emit AssetStaked(track.asset, account, amount);\\n\\n        if (track.transferLock) {\\n            Stake storage stake_ = stakes[account][track.asset];\\n            stake_.balance += amount;\\n\\n            erc20_.safeTransferFrom(account, address(this), amount);\\n        } else {\\n            erc20_.lock(account, amount);\\n        }\\n    }\\n\\n    // ERC1155\\n    function _stake(\\n        address account,\\n        Track storage track,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) internal {\\n        _whenNotPaused(track);\\n        _erc1155StakeRequestValid(track, ids, amounts);\\n\\n        uint256 subtotal;\\n        Stake storage stake_ = stakes[account][track.asset];\\n\\n        IERC1155StakingLocker erc1155_ = IERC1155StakingLocker(track.asset);\\n\\n        for (uint256 t = 0; t < ids.length; t = t.inc()) {\\n            stake_.ids[ids[t]] += amounts[t];\\n            subtotal += amounts[t];\\n        }\\n\\n        stake_.balance += subtotal;\\n        track.staked += subtotal;\\n\\n        emit AssetStaked(track.asset, account, subtotal);\\n\\n        if (track.transferLock) {\\n            erc1155_.safeBatchTransferFrom(\\n                account,\\n                address(this),\\n                ids,\\n                amounts,\\n                \\\"\\\"\\n            );\\n        } else {\\n            erc1155_.lock(account, ids, amounts);\\n        }\\n    }\\n\\n    // ERC721\\n    function _stake(\\n        address account,\\n        Track storage track,\\n        uint256[] calldata ids\\n    ) internal {\\n        _whenNotPaused(track);\\n        _erc721StakeRequestValid(track, ids);\\n\\n        Stake storage stake_ = stakes[account][track.asset];\\n        emit AssetStaked(track.asset, account, ids.length);\\n        IERC721StakingLocker erc721_ = IERC721StakingLocker(track.asset);\\n\\n        stake_.balance += ids.length;\\n        track.staked += ids.length;\\n\\n        if (track.transferLock) {\\n            for (uint256 t = 0; t < ids.length; t = t.inc()) {\\n                stake_.ids[ids[t]] = 1;\\n                erc721_.safeTransferFrom(account, address(this), ids[t]);\\n            }\\n        } else {\\n            erc721_.lock(account, ids);\\n        }\\n    }\\n\\n    // ERC20\\n    function _unstake(\\n        address account,\\n        Track storage track,\\n        uint256 amount\\n    ) internal {\\n        _whenNotPaused(track);\\n        _erc20StakeRequestValid(amount);\\n\\n        IERC20StakingLocker erc20_ = IERC20StakingLocker(track.asset);\\n\\n        if (amount > track.staked) revert AmountExceedsLocked();\\n\\n        track.staked -= amount;\\n\\n        emit AssetUnstaked(track.asset, account, amount);\\n\\n        if (track.transferLock) {\\n            Stake storage stake_ = stakes[account][track.asset];\\n            if (amount > stake_.balance) revert AmountExceedsLocked();\\n\\n            stake_.balance -= amount;\\n\\n            erc20_.safeTransfer(account, amount);\\n        } else {\\n            // will revert on insufficient balance\\n            erc20_.unlock(account, amount);\\n        }\\n    }\\n\\n    // ERC1155\\n    function _unstake(\\n        address account,\\n        Track storage track,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) internal {\\n        _whenNotPaused(track);\\n        _erc1155StakeRequestValid(track, ids, amounts);\\n\\n        uint256 subtotal;\\n        Stake storage stake_ = stakes[account][track.asset];\\n\\n        IERC1155StakingLocker erc1155_ = IERC1155StakingLocker(track.asset);\\n\\n        for (uint256 t = 0; t < ids.length; t = t.inc()) {\\n            if (stake_.ids[ids[t]] < amounts[t]) revert AmountExceedsLocked();\\n\\n            stake_.ids[ids[t]] -= amounts[t];\\n            subtotal += amounts[t];\\n        }\\n\\n        stake_.balance -= subtotal;\\n        track.staked -= subtotal;\\n\\n        emit AssetUnstaked(track.asset, account, subtotal);\\n\\n        if (track.transferLock) {\\n            erc1155_.safeBatchTransferFrom(\\n                address(this),\\n                account,\\n                ids,\\n                amounts,\\n                \\\"\\\"\\n            );\\n        } else {\\n            erc1155_.unlock(account, ids, amounts);\\n        }\\n    }\\n\\n    // ERC721\\n    function _unstake(\\n        address account,\\n        Track storage track,\\n        uint256[] calldata ids\\n    ) internal {\\n        _whenNotPaused(track);\\n        _erc721StakeRequestValid(track, ids);\\n\\n        Stake storage stake_ = stakes[account][track.asset];\\n        IERC721StakingLocker erc721_ = IERC721StakingLocker(track.asset);\\n\\n        if (stake_.balance < ids.length || track.staked < ids.length)\\n            revert AmountExceedsLocked();\\n\\n        stake_.balance -= ids.length;\\n        track.staked -= ids.length;\\n\\n        emit AssetUnstaked(track.asset, account, ids.length);\\n\\n        if (track.transferLock) {\\n            for (uint256 t = 0; t < ids.length; t = t.inc()) {\\n                if (stake_.ids[ids[t]] != 1) revert TokenNotOwn();\\n\\n                delete stake_.ids[ids[t]];\\n\\n                erc721_.safeTransferFrom(address(this), account, ids[t]);\\n            }\\n        } else {\\n            erc721_.unlock(account, ids);\\n        }\\n    }\\n\\n    function _collect(address account, Track storage track) internal {\\n        _whenNotPaused(track);\\n        Stake storage stake_ = stakes[account][track.asset];\\n        uint256 reward = stake_.reward;\\n\\n        if (reward > 0) {\\n            stake_.reward = 0;\\n            emit RewardPaid(account, reward);\\n            cafeToken.safeTransferFrom(address(track.wallet), account, reward);\\n        }\\n    }\\n\\n    function _updateRewards(Track storage track, address account) internal {\\n        uint128 rewardPerTokenStored = uint128(rewardPerToken(track.id));\\n\\n        track.rewardPerTokenStored = rewardPerTokenStored;\\n        track.lastUpdateTime = _restrictedBlockTimestamp(track.end);\\n        Stake storage stake_ = stakes[account][track.asset];\\n        stake_.reward = uint128(earned(track.id, account));\\n        stake_.paid = rewardPerTokenStored;\\n    }\\n\\n    function _onlyOwner() internal view {\\n        if (msg.sender != owner()) revert Unauthorized();\\n    }\\n\\n    function _whenNotPaused(Track storage track) internal view {\\n        if (track.paused) revert TrackPaused(track.id);\\n    }\\n\\n    function _trackExists(uint256 trackId) internal view {\\n        if (trackId >= tracksCount) revert UnknownTrack();\\n    }\\n\\n    function _inStakingPeriod(Track storage track) internal view {\\n        if (!(block.timestamp >= track.start && block.timestamp <= track.end))\\n            revert NotInStakingPeriod();\\n    }\\n\\n    function _restrictedBlockTimestamp(uint128 trackEnd)\\n        internal\\n        view\\n        returns (uint128)\\n    {\\n        uint256 blockstamp = block.timestamp;\\n        return (blockstamp <= trackEnd) ? uint128(blockstamp) : trackEnd;\\n    }\\n\\n    function _erc20StakeRequestValid(uint256 amount) internal pure {\\n        if (amount == 0) revert ZeroAmount();\\n    }\\n\\n    function _erc1155StakeRequestValid(\\n        Track storage track,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) internal view {\\n        if (ids.length != amounts.length) revert InvalidArrayLength();\\n        if (ids.length == 0) revert NoTokensGiven();\\n\\n        if (track.range.enabled) {\\n            _checkRange(ids, track.range.lower, track.range.upper);\\n        }\\n    }\\n\\n    function _erc721StakeRequestValid(\\n        Track storage track,\\n        uint256[] calldata ids\\n    ) internal view {\\n        if (ids.length == 0) revert NoTokensGiven();\\n\\n        if (track.range.enabled) {\\n            _checkRange(ids, track.range.lower, track.range.upper);\\n        }\\n    }\\n\\n    function _checkRange(\\n        uint256[] calldata ids,\\n        uint128 lower,\\n        uint128 upper\\n    ) internal view {\\n        for (uint256 t = 0; t < ids.length; t = t.inc()) {\\n            if (ids[t] < lower || ids[t] > upper) revert TokenOutOfRange();\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        interfaceId;\\n        return false;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        operator;\\n        from;\\n        tokenId;\\n        data;\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        operator;\\n        from;\\n        id;\\n        value;\\n        data;\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\n                )\\n            );\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        operator;\\n        from;\\n        ids;\\n        values;\\n        data;\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nerror Unauthorized();\\n\\nerror InvalidArrayLength();\\n\\nerror InvalidMerkleProof();\\n\\nerror ZeroAddress();\\n\\nerror ZeroAmount();\\n\\nerror ContractAddressExpected(address contract_);\\n\\nerror InsufficientCAFE();\\n\\nerror InsufficientBalance();\\n\\nerror UnknownTrack();\\n\\nerror TokenLocked();\\n\\nerror TokenNotOwn();\\n\\nerror UnknownToken();\\n\\nerror TrackExpired();\\n\\nerror TokenNotLocked();\\n\\nerror NoTokensGiven();\\n\\nerror TokenOutOfRange();\\n\\nerror AmountExceedsLocked();\\n\\nerror StakingVolumeExceeded();\\n\\nerror StakingTrackNotAssigned();\\n\\nerror StakingLockViolation(uint256 tokenId);\\n\\nerror NotInStakingPeriod();\\n\\nerror TrackPaused(uint256 trackId);\\n\\nerror ContractPaused();\\n\\nerror VSExistsForAccount(address account);\\n\\nerror VSInvalidCliff();\\n\\nerror VSInvalidAllocation();\\n\\nerror VSMissing(address account);\\n\\nerror VSCliffNotReached();\\n\\nerror VSInvalidPeriodSpec();\\n\\nerror VSCliffNERelease();\\n\\nerror NothingVested();\\n\\nerror OnceOnly();\\n\\nerror MintingExceedsSupply(uint256 supply);\\n\\nerror InvalidStage();\\n\\nerror DuplicateClaim();\\n\\nerror DuplicateTokenSelection();\\nerror CantCreateZeroTokens();\\nerror TokenCollectionMismatch();\\nerror CollectionNotFound();\\nerror InvalidETHAmount();\\nerror TokenMaxSupplyReached();\\nerror InOpenSale();\\nerror NotInOpenSale();\\nerror InvalidEditionsSpec();\\nerror ZeroEditionsSpecified();\\n\\nerror InvalidTrackTiming();\\nerror InvalidTrackStart();\"\r\n    },\r\n    \"contracts/utils/UncheckedIncrement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nlibrary UncheckedIncrement {\\n    function inc(uint256 i) internal pure returns (uint256) {\\n        unchecked { return  i + 1; }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICafeStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../staking/StakingCommons.sol\\\";\\n\\ninterface ICafeStaking {\\n    /**\\n     * @dev Emitted when a track is created that will distribute `rewards` $CAFE to holders of `asset`.\\n     */\\n    event TrackCreated(\\n        uint256 indexed id,\\n        address indexed asset,\\n        uint256 indexed rps\\n    );\\n\\n    /**\\n     * @dev Emitted when a track is toggled (paused or resumed).\\n     */\\n    event TrackToggled(uint256 indexed id, bool indexed newState);\\n\\n    /**\\n     * @dev Emitted when a track's reward balance is replenished.\\n     *\\n     */\\n    event TrackReplenished(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed newRps\\n    );\\n\\n    /**\\n     * @dev Emitted when an asset is staked.\\n     */\\n    event AssetStaked(address indexed asset, address account, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when an asset is unstaked.\\n     */\\n    event AssetUnstaked(address indexed asset, address account, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when `reward` tokens are claimed by `account`.\\n     */\\n    event RewardPaid(address indexed account, uint256 indexed reward);\\n\\n    function createTrack(\\n        address asset,\\n        uint256 rewardsAmount,\\n        TrackType atype,\\n        uint256 start,\\n        uint256 end,\\n        uint256 lower,\\n        uint256 upper,\\n        bool transferLock\\n    ) external;\\n\\n    function replenishTrack(uint256 trackId, uint256 amount) external;\\n\\n    function toggleTrack(uint256 trackId) external;\\n\\n    function execute(\\n        StakeRequest[] calldata msr,\\n        StakeAction[][] calldata actions\\n    ) external;\\n\\n    function execute4(\\n        address account,\\n        StakeRequest[] calldata msr,\\n        StakeAction[][] calldata actions\\n    ) external;\\n\\n    function rewardPerToken(uint256 trackId) external view returns (uint256);\\n\\n    function earned(uint256 trackId, address account)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20StakingLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20StakingLocker is IERC20Upgradeable {\\n    function lock(address, uint256) external;\\n\\n    function unlock(address, uint256) external;\\n\\n    function locked(address) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721StakingLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IERC721StakingLocker is IERC721Upgradeable {\\n    function lock(address, uint256[] memory) external;\\n\\n    function unlock(address, uint256[] memory) external;\\n\\n    function isLocked(uint256) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC1155StakingLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IERC1155StakingLocker is IERC1155Upgradeable {\\n    function lock(\\n        address,\\n        uint256[] memory,\\n        uint256[] memory\\n    ) external;\\n\\n    function unlock(\\n        address,\\n        uint256[] memory,\\n        uint256[] memory\\n    ) external;\\n\\n    function locked(address, uint256) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICafeAccumulator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ICafeAccumulator {\\n    function pull(address) external returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/staking/StakingCommons.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nstruct StakeRequest {\\n    uint256 trackId;\\n    uint256[] ids;\\n    uint256[] amounts;   \\n}\\n\\nenum StakeAction {\\n    Stake,\\n    Unstake,\\n    Collect\\n}\\n\\nenum TrackType {\\n    ERC20,\\n    ERC1155,\\n    ERC721\\n}\"\r\n    },\r\n    \"contracts/staking/OnChainRewardsWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\n\\ncontract OnChainRewardsWallet {\\n    address private _owner;\\n\\n    constructor(address owner_) {\\n        _owner = owner_;\\n    }\\n\\n    function approve(\\n        address asset,\\n        address contract_,\\n        bool enable\\n    ) external {\\n        _onlyOwner();\\n        if (enable) {\\n            IERC20(asset).approve(contract_, type(uint256).max - 1);\\n        } else {\\n            IERC20(asset).approve(contract_, 0);\\n        }\\n    }\\n\\n    function _onlyOwner() internal view {\\n        if (msg.sender != _owner) revert Unauthorized();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AmountExceedsLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"ContractAddressExpected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCAFE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrackStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrackTiming\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensGiven\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInStakingPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotOwn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrackExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"}],\"name\":\"TrackPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownTrack\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rps\",\"type\":\"uint256\"}],\"name\":\"TrackCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRps\",\"type\":\"uint256\"}],\"name\":\"TrackReplenished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"TrackToggled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cafeToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"enum TrackType\",\"name\":\"atype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upper\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"}],\"name\":\"createTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct StakeRequest[]\",\"name\":\"msr\",\"type\":\"tuple[]\"},{\"internalType\":\"enum StakeAction[][]\",\"name\":\"actions\",\"type\":\"uint8[][]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct StakeRequest[]\",\"name\":\"msr\",\"type\":\"tuple[]\"},{\"internalType\":\"enum StakeAction[][]\",\"name\":\"actions\",\"type\":\"uint8[][]\"}],\"name\":\"execute4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cafeToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"replenishTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accumulator\",\"type\":\"address\"}],\"name\":\"replenishTrackFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"records\",\"type\":\"uint256\"}],\"name\":\"stakeInfoERC1155\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeInfoERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"records\",\"type\":\"uint256\"}],\"name\":\"stakeInfoERC721\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paid\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackId\",\"type\":\"uint256\"}],\"name\":\"toggleTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tracks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"lower\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"upper\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct TokenRange\",\"name\":\"range\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"contract OnChainRewardsWallet\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum TrackType\",\"name\":\"atype\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tracksCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CafeStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}