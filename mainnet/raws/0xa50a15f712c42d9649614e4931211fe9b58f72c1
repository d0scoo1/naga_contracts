{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/registration-rules.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./interfaces/IManager.sol\\\";\\r\\nimport \\\"./interfaces/IRegister.sol\\\";\\r\\n\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ncontract RegistrationRulesV1 is IRegister {\\r\\n\\r\\n    IManager public DomainManager;\\r\\n    constructor(IManager _manager){\\r\\n        DomainManager = _manager;\\r\\n    }\\r\\n\\r\\n    function canRegister(uint256 _tokenId, string calldata _label, address _addr, uint256 _priceInWei, bytes32[] calldata _proofs) external view returns(bool){\\r\\n        uint256 price = DomainManager.DefaultMintPrice(_tokenId);\\r\\n        require(price == _priceInWei, \\\"incorrect ether\\\");\\r\\n        require(price != 0, \\\"not for primary sale\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintPrice(uint256 _tokenId, string calldata _label, address _addr, bytes32[] calldata _proofs) external view returns(uint256){\\r\\n        uint256 price = DomainManager.DefaultMintPrice(_tokenId);\\r\\n        address owner = DomainManager.TokenOwnerMap(_tokenId);\\r\\n        return owner == _addr ? 0 : price;\\r\\n    }\\r\\n \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IManager {\\r\\n\\r\\nfunction IdToLabelMap( uint256 _tokenId) external view returns (string memory label);\\r\\nfunction IdToOwnerId( uint256 _tokenId) external view returns (uint256 ownerId);\\r\\nfunction IdToDomain( uint256 _tokenId) external view returns (string memory domain);\\r\\nfunction TokenLocked( uint256 _tokenId) external view returns (bool locked);\\r\\nfunction IdImageMap( uint256 _tokenId) external view returns (string memory image);\\r\\nfunction IdToHashMap(uint256 _tokenId) external view returns (bytes32 _hash);\\r\\nfunction text(bytes32 node, string calldata key) external view returns (string memory _value);\\r\\nfunction DefaultMintPrice(uint256 _tokenId) external view returns (uint256 _priceInWei);\\r\\nfunction transferDomainOwnership(uint256 _id, address _newOwner) external;\\r\\nfunction TokenOwnerMap(uint256 _id) external view returns(address); \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRegister.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IRegister {\\r\\n    function canRegister(uint256 _tokenId, string memory _label, address _addr, uint256 _priceInWei, bytes32[] calldata _proofs) external view returns(bool);\\r\\n    function mintPrice(uint256 _tokenId, string calldata _label, address _addr, bytes32[] calldata _proofs) external view returns(uint256);\\r\\n    \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DomainManager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofs\",\"type\":\"bytes32[]\"}],\"name\":\"canRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofs\",\"type\":\"bytes32[]\"}],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RegistrationRulesV1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000dcbf49bdb92b2aa84de4e428fd5b2c9c58412bc5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}