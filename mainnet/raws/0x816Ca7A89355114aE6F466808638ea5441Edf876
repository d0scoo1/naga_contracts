{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/callers/SimpleCaller.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { ICaller } from \\\"../interfaces/ICaller.sol\\\";\\nimport { Base } from \\\"../shared/Base.sol\\\";\\nimport { ActionType } from \\\"../shared/Enums.sol\\\";\\nimport { HighInputBalanceChange, ZeroTarget } from \\\"../shared/Errors.sol\\\";\\nimport { AbsoluteTokenAmount } from \\\"../shared/Structs.sol\\\";\\nimport { TokensHandler } from \\\"../shared/TokensHandler.sol\\\";\\n\\n/**\\n * @title Simple caller that passes through any call and forwards return tokens\\n * @dev It also works in fixed outputs case, when input token overhead is refunded\\n */\\ncontract SimpleCaller is ICaller, TokensHandler {\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Main external function: decodes `callerCallData` bytes,\\n     *     executes external call, and returns tokens back to `msg.sender` (i.e. Router contract)\\n     * @param callerCallData ABI-encoded parameters:\\n     *     - inputToken Address of the token that should be approved to the allowance target\\n     *     - allowanceTarget Address to approve `inputToken` to\\n     *     - callTarget Address to forward the external call to\\n     *     - callData Call data to be used in the external call\\n     *     - outputToken Address of the token that should be returned\\n     * @dev Call target cannot be zero\\n     */\\n    function callBytes(bytes calldata callerCallData) external override {\\n        (\\n            address inputToken,\\n            address allowanceTarget,\\n            address payable callTarget,\\n            bytes memory callData,\\n            address outputToken\\n        ) = abi.decode(callerCallData, (address, address, address, bytes, address));\\n        if (callTarget == address(0)) revert ZeroTarget();\\n\\n        // Approve tokens to the allowance target, call the call target\\n        approveAndCall(inputToken, allowanceTarget, callTarget, callData);\\n\\n        // In case of non-zero input token, transfer the remaining amount back to `msg.sender`\\n        Base.transfer(inputToken, msg.sender, Base.getBalance(inputToken));\\n\\n        // In case of non-zero output token, transfer the total balance to `msg.sender`\\n        Base.transfer(outputToken, msg.sender, Base.getBalance(outputToken));\\n    }\\n\\n    /**\\n     * @dev Approves input tokens (if necessary) and calls the target with the provided call data\\n     * @dev Approval and allowance check for `address(0)` token address are skipped\\n     * @param inputToken Address of the token that should be approved to the allowance target\\n     * @param allowanceTarget Address to approve `inputToken` to\\n     * @param callTarget Address to forward the external call to\\n     * @param callData Call data for the call to the target\\n     */\\n    function approveAndCall(\\n        address inputToken,\\n        address allowanceTarget,\\n        address callTarget,\\n        bytes memory callData\\n    ) internal {\\n        uint256 amount = Base.getBalance(inputToken);\\n        if (inputToken == ETH) {\\n            Address.functionCallWithValue(\\n                callTarget,\\n                callData,\\n                amount,\\n                \\\"SC: payable call failed w/ no reason\\\"\\n            );\\n            return;\\n        }\\n\\n        if (inputToken != address(0) && allowanceTarget != address(0))\\n            Base.safeApprove(inputToken, allowanceTarget, amount);\\n\\n        Address.functionCall(callTarget, callData, \\\"SC: call failed w/ no reason\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICaller.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\nimport { AbsoluteTokenAmount } from \\\"../shared/Structs.sol\\\";\\n\\nimport { ITokensHandler } from \\\"./ITokensHandler.sol\\\";\\n\\ninterface ICaller is ITokensHandler {\\n    /**\\n     * @notice Main external function: implements all the caller specific logic\\n     * @param callerCallData ABI-encoded parameters depending on the caller logic\\n     */\\n    function callBytes(bytes calldata callerCallData) external;\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Base.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { FailedEtherTransfer, ZeroReceiver } from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Library unifying transfer, approval, and getting balance for ERC20 tokens and Ether\\n */\\nlibrary Base {\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Transfers tokens or Ether\\n     * @param token Address of the token or `ETH` in case of Ether transfer\\n     * @param receiver Address of the account that will receive funds\\n     * @param amount Amount to be transferred\\n     * @dev This function is compatible only with ERC20 tokens and Ether, not ERC721/ERC1155 tokens\\n     * @dev Reverts on zero `receiver`, does nothing for zero amount\\n     * @dev Should not be used with zero token address\\n     */\\n    function transfer(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == uint256(0)) return;\\n        if (receiver == address(0)) revert ZeroReceiver();\\n\\n        if (token == ETH) {\\n            Address.sendValue(payable(receiver), amount);\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(token), receiver, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely approves type(uint256).max tokens\\n     * @param token Address of the token\\n     * @param spender Address to approve tokens to\\n     * @param amount Tokens amount to be approved\\n     * @dev Should not be used with zero or `ETH` token address\\n     */\\n    function safeApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\\n        if (allowance < amount) {\\n            if (allowance > uint256(0)) {\\n                SafeERC20.safeApprove(IERC20(token), spender, uint256(0));\\n            }\\n            SafeERC20.safeApprove(IERC20(token), spender, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the token balance for the given account\\n     * @param token Address of the token\\n     * @param account Address of the account\\n     * @dev Should not be used with zero token address\\n     */\\n    function getBalance(address token, address account) internal view returns (uint256) {\\n        if (token == ETH) return account.balance;\\n\\n        return IERC20(token).balanceOf(account);\\n    }\\n\\n    /**\\n     * @notice Calculates the token balance for `this` contract address\\n     * @param token Address of the token\\n     * @dev Returns `0` for zero token address in order to handle empty token case\\n     */\\n    function getBalance(address token) internal view returns (uint256) {\\n        if (token == address(0)) return uint256(0);\\n\\n        return Base.getBalance(token, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Enums.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\nenum ActionType {\\n    None,\\n    Deposit,\\n    Withdraw\\n}\\n\\nenum AmountType {\\n    None,\\n    Relative,\\n    Absolute\\n}\\n\\nenum SwapType {\\n    None,\\n    FixedInputs,\\n    FixedOutputs\\n}\\n\\nenum PermitType {\\n    None,\\n    EIP2612,\\n    DAI,\\n    Yearn\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Errors.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\nimport { ActionType, AmountType, PermitType, SwapType } from \\\"./Enums.sol\\\";\\nimport { Fee } from \\\"./Structs.sol\\\";\\n\\nerror BadAccount(address account, address expectedAccount);\\nerror BadAccountSignature();\\nerror BadAmount(uint256 amount, uint256 requiredAmount);\\nerror BadAmountType(AmountType amountType, AmountType requiredAmountType);\\nerror BadFee(Fee fee, Fee baseProtocolFee);\\nerror BadFeeAmount(uint256 actualFeeAmount, uint256 expectedFeeAmount);\\nerror BadFeeSignature();\\nerror BadFeeShare(uint256 protocolFeeShare, uint256 baseProtocolFeeShare);\\nerror BadFeeBeneficiary(address protocolFeeBanaficiary, address baseProtocolFeeBeneficiary);\\nerror BadLength(uint256 length, uint256 requiredLength);\\nerror BadMsgSender(address msgSender, address requiredMsgSender);\\nerror BadProtocolAdapterName(bytes32 protocolAdapterName);\\nerror BadToken(address token);\\nerror ExceedingDelimiterAmount(uint256 amount);\\nerror ExceedingLimitFee(uint256 feeShare, uint256 feeLimit);\\nerror FailedEtherTransfer(address to);\\nerror HighInputBalanceChange(uint256 inputBalanceChange, uint256 requiredInputBalanceChange);\\nerror InconsistentPairsAndDirectionsLengths(uint256 pairsLength, uint256 directionsLength);\\nerror InputSlippage(uint256 amount, uint256 requiredAmount);\\nerror InsufficientAllowance(uint256 allowance, uint256 requiredAllowance);\\nerror InsufficientMsgValue(uint256 msgValue, uint256 requiredMsgValue);\\nerror LowActualOutputAmount(uint256 actualOutputAmount, uint256 requiredActualOutputAmount);\\nerror LowReserve(uint256 reserve, uint256 requiredReserve);\\nerror NoneActionType();\\nerror NoneAmountType();\\nerror NonePermitType();\\nerror NoneSwapType();\\nerror PassedDeadline(uint256 timestamp, uint256 deadline);\\nerror TooLowBaseFeeShare(uint256 baseProtocolFeeShare, uint256 baseProtocolFeeShareLimit);\\nerror UsedHash(bytes32 hash);\\nerror ZeroReceiver();\\nerror ZeroAmountIn();\\nerror ZeroAmountOut();\\nerror ZeroFeeBeneficiary();\\nerror ZeroLength();\\nerror ZeroProtocolAdapterRegistry();\\nerror ZeroSigner();\\nerror ZeroSwapPath();\\nerror ZeroTarget();\\n\"\r\n    },\r\n    \"contracts/shared/Structs.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\nimport { ActionType, AmountType, PermitType, SwapType } from \\\"./Enums.sol\\\";\\n\\n//=============================== Adapters Managers Structs ====================================\\n\\n// The struct consists of adapter name and address\\nstruct AdapterNameAndAddress {\\n    bytes32 name;\\n    address adapter;\\n}\\n\\n// The struct consists of token and its adapter name\\nstruct TokenAndAdapterName {\\n    address token;\\n    bytes32 name;\\n}\\n\\n// The struct consists of hash (hash of token's bytecode or address) and its adapter name\\nstruct HashAndAdapterName {\\n    bytes32 hash;\\n    bytes32 name;\\n}\\n\\n// The struct consists of TokenBalanceMeta structs for\\n// (base) token and its underlying tokens (if any)\\nstruct FullTokenBalance {\\n    TokenBalanceMeta base;\\n    TokenBalanceMeta[] underlying;\\n}\\n\\n// The struct consists of TokenBalance struct with token address and absolute amount\\n// and ERC20Metadata struct with ERC20-style metadata\\n// 0xEeee...EEeE address is used for Ether\\nstruct TokenBalanceMeta {\\n    TokenBalance tokenBalance;\\n    ERC20Metadata erc20metadata;\\n}\\n\\n// The struct consists of ERC20-style token metadata\\nstruct ERC20Metadata {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n}\\n\\n// The struct consists of protocol adapter's name and array of TokenBalance structs\\n// with token addresses and absolute amounts\\nstruct AdapterBalance {\\n    bytes32 name;\\n    TokenBalance[] tokenBalances;\\n}\\n\\n// The struct consists of protocol adapter's name and array of supported tokens' addresses\\nstruct AdapterTokens {\\n    bytes32 name;\\n    address[] tokens;\\n}\\n\\n// The struct consists of token address and its absolute amount (may be negative)\\n// 0xEeee...EEeE is used for Ether\\nstruct TokenBalance {\\n    address token;\\n    int256 amount;\\n}\\n\\n// The struct consists of token address,\\n// and price per full share (1e18).\\n// 0xEeee...EEeE is used for Ether\\nstruct Component {\\n    address token;\\n    int256 rate;\\n}\\n\\n//=============================== Interactive Adapters Structs ====================================\\n\\n// The struct consists of swap type, fee descriptions (share & beneficiary), account address,\\n// and Caller contract address with call data used for the call\\nstruct SwapDescription {\\n    SwapType swapType;\\n    Fee protocolFee;\\n    Fee marketplaceFee;\\n    address account;\\n    address caller;\\n    bytes callerCallData;\\n}\\n\\n// The struct consists of name of the protocol adapter, action type,\\n// array of token amounts, and some additional data (depends on the protocol)\\nstruct Action {\\n    bytes32 protocolAdapterName;\\n    ActionType actionType;\\n    TokenAmount[] tokenAmounts;\\n    bytes data;\\n}\\n\\n// The struct consists of token address, its amount, and amount type,\\n// as well as permit type and calldata.\\nstruct Input {\\n    TokenAmount tokenAmount;\\n    Permit permit;\\n}\\n\\n// The struct consists of permit type and call data\\nstruct Permit {\\n    PermitType permitType;\\n    bytes permitCallData;\\n}\\n\\n// The struct consists of token address, its amount, and amount type\\n// 0xEeee...EEeE is used for Ether\\nstruct TokenAmount {\\n    address token;\\n    uint256 amount;\\n    AmountType amountType;\\n}\\n\\n// The struct consists of fee share and beneficiary address\\nstruct Fee {\\n    uint256 share;\\n    address beneficiary;\\n}\\n\\n// The struct consists of deadline and signature\\nstruct ProtocolFeeSignature {\\n    uint256 deadline;\\n    bytes signature;\\n}\\n\\n// The struct consists of salt and signature\\nstruct AccountSignature {\\n    uint256 salt;\\n    bytes signature;\\n}\\n\\n// The struct consists of token address and its absolute amount\\n// 0xEeee...EEeE is used for Ether\\nstruct AbsoluteTokenAmount {\\n    address token;\\n    uint256 absoluteAmount;\\n}\\n\"\r\n    },\r\n    \"contracts/shared/TokensHandler.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\nimport { ITokensHandler } from \\\"../interfaces/ITokensHandler.sol\\\";\\n\\nimport { Base } from \\\"./Base.sol\\\";\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract contract returning tokens lost on the contract\\n */\\nabstract contract TokensHandler is ITokensHandler, Ownable {\\n    receive() external payable {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @inheritdoc ITokensHandler\\n     */\\n    function returnLostTokens(address token, address payable beneficiary) external onlyOwner {\\n        Base.transfer(token, beneficiary, Base.getBalance(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokensHandler.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\ninterface ITokensHandler {\\n    /**\\n     * @notice Returns tokens mistakenly sent to this contract\\n     * @param token Address of token\\n     * @param beneficiary Address that will receive tokens\\n     * @dev Can be called only by the owner\\n     */\\n    function returnLostTokens(address token, address payable beneficiary) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Ownable.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Clutch Wallet. <https://www.clutchwallet.xyz>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Abstract contract with basic Ownable functionality and two-step ownership transfer\\n */\\nabstract contract Ownable {\\n    address private pendingOwner_;\\n    address private owner_;\\n\\n    /**\\n     * @notice Emits old and new pending owners\\n     * @param oldPendingOwner Old pending owner\\n     * @param newPendingOwner New pending owner\\n     */\\n    event PendingOwnerSet(address indexed oldPendingOwner, address indexed newPendingOwner);\\n\\n    /**\\n     * @notice Emits old and new owners\\n     * @param oldOwner Old contract's owner\\n     * @param newOwner New contract's owner\\n     */\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner_, \\\"O: only pending owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner_, \\\"O: only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes owner variable with msg.sender address\\n     */\\n    constructor() {\\n        emit OwnerSet(address(0), msg.sender);\\n\\n        owner_ = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Sets pending owner to the `newPendingOwner` address\\n     * @param newPendingOwner Address of new pending owner\\n     * @dev The function is callable only by the owner\\n     */\\n    function setPendingOwner(address newPendingOwner) external onlyOwner {\\n        emit PendingOwnerSet(pendingOwner_, newPendingOwner);\\n\\n        pendingOwner_ = newPendingOwner;\\n    }\\n\\n    /**\\n     * @notice Sets owner to the pending owner\\n     * @dev The function is callable only by the pending owner\\n     */\\n    function setOwner() external onlyPendingOwner {\\n        emit OwnerSet(owner_, msg.sender);\\n\\n        owner_ = msg.sender;\\n        delete pendingOwner_;\\n    }\\n\\n    /**\\n     * @return owner Owner of the contract\\n     */\\n    function getOwner() external view returns (address owner) {\\n        return owner_;\\n    }\\n\\n    /**\\n     * @return pendingOwner Pending owner of the contract\\n     */\\n    function getPendingOwner() external view returns (address pendingOwner) {\\n        return pendingOwner_;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ZeroReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTarget\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callerCallData\",\"type\":\"bytes\"}],\"name\":\"callBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"returnLostTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SimpleCaller", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}