{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AuraClaimZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport { AuraMath } from \\\"./AuraMath.sol\\\";\\nimport { IAuraLocker, ICrvDepositorWrapper } from \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IBasicRewards {\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function getReward(address _account) external;\\n\\n    function getReward(address _account, address _token) external;\\n\\n    function stakeFor(address, uint256) external;\\n}\\n\\n/**\\n * @title   ClaimZap\\n * @author  ConvexFinance -> AuraFinance\\n * @notice  Claim zap to bundle various reward claims\\n * @dev     Claims from all pools, and stakes cvxCrv and CVX if wanted.\\n *          v2:\\n *           - change exchange to use curve pool\\n *           - add getReward(address,token) type\\n *           - add option to lock cvx\\n *           - add option use all funds in wallet\\n */\\ncontract AuraClaimZap {\\n    using SafeERC20 for IERC20;\\n    using AuraMath for uint256;\\n\\n    address public immutable crv;\\n    address public immutable cvx;\\n    address public immutable cvxCrv;\\n    address public immutable crvDepositWrapper;\\n    address public immutable cvxCrvRewards;\\n    address public immutable locker;\\n    address public immutable owner;\\n\\n    enum Options {\\n        ClaimCvxCrv, //1\\n        ClaimLockedCvx, //2\\n        ClaimLockedCvxStake, //4\\n        LockCrvDeposit, //8\\n        UseAllWalletFunds, //16\\n        LockCvx //32\\n    }\\n\\n    /**\\n     * @param _crv                CRV token (0xD533a949740bb3306d119CC777fa900bA034cd52);\\n     * @param _cvx                CVX token (0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n     * @param _cvxCrv             cvxCRV token (0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7);\\n     * @param _crvDepositWrapper  crvDepositWrapper (0x8014595F2AB54cD7c604B00E9fb932176fDc86Ae);\\n     * @param _cvxCrvRewards      cvxCrvRewards (0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e);\\n     * @param _locker             vlCVX (0xD18140b4B819b895A3dba5442F959fA44994AF50);\\n     */\\n    constructor(\\n        address _crv,\\n        address _cvx,\\n        address _cvxCrv,\\n        address _crvDepositWrapper,\\n        address _cvxCrvRewards,\\n        address _locker\\n    ) {\\n        crv = _crv;\\n        cvx = _cvx;\\n        cvxCrv = _cvxCrv;\\n        crvDepositWrapper = _crvDepositWrapper;\\n        cvxCrvRewards = _cvxCrvRewards;\\n        locker = _locker;\\n        owner = msg.sender;\\n    }\\n\\n    function getName() external pure returns (string memory) {\\n        return \\\"ClaimZap V2.0\\\";\\n    }\\n\\n    /**\\n     * @notice Approve spending of:\\n     *          crv     -> crvDepositor\\n     *          cvxCrv  -> cvxCrvRewards\\n     *          cvx     -> Locker\\n     */\\n    function setApprovals() external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        IERC20(crv).safeApprove(crvDepositWrapper, 0);\\n        IERC20(crv).safeApprove(crvDepositWrapper, type(uint256).max);\\n\\n        IERC20(cvxCrv).safeApprove(cvxCrvRewards, 0);\\n        IERC20(cvxCrv).safeApprove(cvxCrvRewards, type(uint256).max);\\n\\n        IERC20(cvx).safeApprove(locker, 0);\\n        IERC20(cvx).safeApprove(locker, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Use bitmask to check if option flag is set\\n     */\\n    function _checkOption(uint256 _mask, uint256 _flag) internal pure returns (bool) {\\n        return (_mask & (1 << _flag)) != 0;\\n    }\\n\\n    /**\\n     * @notice Claim all the rewards\\n     * @param rewardContracts       Array of addresses for LP token rewards\\n     * @param extraRewardContracts  Array of addresses for extra rewards\\n     * @param tokenRewardContracts  Array of addresses for token rewards e.g vlCvxExtraRewardDistribution\\n     * @param tokenRewardTokens     Array of token reward addresses to use with tokenRewardContracts\\n     * @param depositCrvMaxAmount   The max amount of CRV to deposit if converting to crvCvx\\n     * @param minAmountOut          The min amount out for crv:cvxCrv swaps if swapping. Set this to zero if you\\n     *                              want to use CrvDepositor instead of balancer swap\\n     * @param depositCvxMaxAmount   The max amount of CVX to deposit if locking CVX\\n     * @param options               Claim options\\n     */\\n    function claimRewards(\\n        address[] calldata rewardContracts,\\n        address[] calldata extraRewardContracts,\\n        address[] calldata tokenRewardContracts,\\n        address[] calldata tokenRewardTokens,\\n        uint256 depositCrvMaxAmount,\\n        uint256 minAmountOut,\\n        uint256 depositCvxMaxAmount,\\n        uint256 options\\n    ) external {\\n        require(tokenRewardContracts.length == tokenRewardTokens.length, \\\"!parity\\\");\\n\\n        uint256 crvBalance = IERC20(crv).balanceOf(msg.sender);\\n        uint256 cvxBalance = IERC20(cvx).balanceOf(msg.sender);\\n\\n        //claim from main curve LP pools\\n        for (uint256 i = 0; i < rewardContracts.length; i++) {\\n            IBasicRewards(rewardContracts[i]).getReward(msg.sender, true);\\n        }\\n        //claim from extra rewards\\n        for (uint256 i = 0; i < extraRewardContracts.length; i++) {\\n            IBasicRewards(extraRewardContracts[i]).getReward(msg.sender);\\n        }\\n        //claim from multi reward token contract\\n        for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\\n            IBasicRewards(tokenRewardContracts[i]).getReward(msg.sender, tokenRewardTokens[i]);\\n        }\\n\\n        // claim others/deposit/lock/stake\\n        _claimExtras(depositCrvMaxAmount, minAmountOut, depositCvxMaxAmount, crvBalance, cvxBalance, options);\\n    }\\n\\n    /**\\n     * @notice  Claim additional rewards from:\\n     *          - cvxCrvRewards\\n     *          - cvxLocker\\n     * @param depositCrvMaxAmount see claimRewards\\n     * @param minAmountOut        see claimRewards\\n     * @param depositCvxMaxAmount see claimRewards\\n     * @param removeCrvBalance    crvBalance to ignore and not redeposit (starting Crv balance)\\n     * @param removeCvxBalance    cvxBalance to ignore and not redeposit (starting Cvx balance)\\n     * @param options             see claimRewards\\n     */\\n    // prettier-ignore\\n    function _claimExtras( // solhint-disable-line \\n        uint256 depositCrvMaxAmount,\\n        uint256 minAmountOut,\\n        uint256 depositCvxMaxAmount,\\n        uint256 removeCrvBalance,\\n        uint256 removeCvxBalance,\\n        uint256 options\\n    ) internal {\\n        //claim from cvxCrv rewards\\n        if (_checkOption(options, uint256(Options.ClaimCvxCrv))) {\\n            IBasicRewards(cvxCrvRewards).getReward(msg.sender, true);\\n        }\\n\\n        //claim from locker\\n        if (_checkOption(options, uint256(Options.ClaimLockedCvx))) {\\n            IAuraLocker(locker).getReward(msg.sender, _checkOption(options, uint256(Options.ClaimLockedCvxStake)));\\n        }\\n\\n        //reset remove balances if we want to also stake/lock funds already in our wallet\\n        if (_checkOption(options, uint256(Options.UseAllWalletFunds))) {\\n            removeCrvBalance = 0;\\n            removeCvxBalance = 0;\\n        }\\n\\n        //lock upto given amount of crv and stake\\n        if (depositCrvMaxAmount > 0) {\\n            uint256 crvBalance = IERC20(crv).balanceOf(msg.sender).sub(removeCrvBalance);\\n            crvBalance = AuraMath.min(crvBalance, depositCrvMaxAmount);\\n\\n            if (crvBalance > 0) {\\n                //pull crv\\n                IERC20(crv).safeTransferFrom(msg.sender, address(this), crvBalance);\\n                //deposit\\n                ICrvDepositorWrapper(crvDepositWrapper).deposit(\\n                    crvBalance,\\n                    minAmountOut,\\n                    _checkOption(options, uint256(Options.LockCrvDeposit)),\\n                    address(0)\\n                );\\n\\n                uint256 cvxCrvBalance = IERC20(cvxCrv).balanceOf(address(this));\\n                //stake for msg.sender\\n                IBasicRewards(cvxCrvRewards).stakeFor(msg.sender, cvxCrvBalance);\\n            }\\n        }\\n\\n        //stake up to given amount of cvx\\n        if (depositCvxMaxAmount > 0 && _checkOption(options, uint256(Options.LockCvx))) {\\n            uint256 cvxBalance = IERC20(cvx).balanceOf(msg.sender).sub(removeCvxBalance);\\n            cvxBalance = AuraMath.min(cvxBalance, depositCvxMaxAmount);\\n            if (cvxBalance > 0) {\\n                //pull cvx\\n                IERC20(cvx).safeTransferFrom(msg.sender, address(this), cvxBalance);\\n                IAuraLocker(locker).lock(msg.sender, cvxBalance);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AuraMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary AuraMath {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function to224(uint256 a) internal pure returns (uint224 c) {\\n        require(a <= type(uint224).max, \\\"AuraMath: uint224 Overflow\\\");\\n        c = uint224(a);\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"AuraMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to112(uint256 a) internal pure returns (uint112 c) {\\n        require(a <= type(uint112).max, \\\"AuraMath: uint112 Overflow\\\");\\n        c = uint112(a);\\n    }\\n\\n    function to96(uint256 a) internal pure returns (uint96 c) {\\n        require(a <= type(uint96).max, \\\"AuraMath: uint96 Overflow\\\");\\n        c = uint96(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"AuraMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary AuraMath32 {\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint112.\\nlibrary AuraMath112 {\\n    function add(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary AuraMath224 {\\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n        c = a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPriceOracle {\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n    enum Variable {\\n        PAIR_PRICE,\\n        BPT_PRICE,\\n        INVARIANT\\n    }\\n\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n}\\n\\ninterface IVault {\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external returns (uint256 amountCalculated);\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\n        MANAGEMENT_FEE_TOKENS_OUT // for ManagedPool\\n    }\\n}\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\\ninterface IAuraLocker {\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n}\\n\\ninterface IExtraRewardsDistributor {\\n    function addReward(address _token, uint256 _amount) external;\\n}\\n\\ninterface ICrvDepositorWrapper {\\n    function getMinOut(uint256, uint256) external view returns (uint256);\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        bool,\\n        address _stakeAddress\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxCrv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvDepositWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxCrvRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardContracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"extraRewardContracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenRewardContracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenRewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"depositCrvMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositCvxMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"options\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvDepositWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AuraClaimZap", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c0c293ce456ff0ed870add98a0828dd4d2903dbf000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d00000000000000000000000068655ad9852a99c87c0934c7290bb62cfa5d41230000000000000000000000005e5ea2048475854a5702f5b8468a51ba1296efcc0000000000000000000000003fa73f1e5d8a792c80f426fc8f84fbf7ce9bbcac", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}