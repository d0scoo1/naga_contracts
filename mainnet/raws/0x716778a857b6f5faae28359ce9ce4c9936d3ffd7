{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IHandler.sol\\\";\\nimport \\\"./ERC721Base.sol\\\";\\n\\ncontract Factory is Ownable {\\n\\taddress immutable impl;\\n\\t\\n\\tuint minFee = 0.1 ether;\\n\\tuint feePercent = 1000; // 10%\\n\\taddress feeAddress;\\n  uint constant PERCENT_BASE = 10000;\\n\\n\\tevent CreateNFT (\\n\\t\\taddress indexed owner,\\n\\t\\taddress nft,\\n\\t\\tbytes32 salt\\n\\t);\\n\\n\\taddress gyve;\\n\\tbool useWhitelist = true;\\n\\tmapping (address => bool) whitelist;\\n\\n\\taddress mustOwn;\\n\\n\\tconstructor(address _gyve, address _feeAddress, uint _feePercent, uint _minFee) {\\n\\t\\timpl = address(new ERC721Base());\\n\\t\\tgyve = _gyve;\\n\\t\\tminFee = _minFee;\\n\\t\\tfeePercent = _feePercent;\\n\\t\\tfeeAddress = _feeAddress;\\n\\t}\\n\\n\\tfunction createNFT(bytes32 salt, string memory _desc, string memory _token, uint256 _price, uint256 _maxTotal, uint256 _maxMint) external payable returns(address) {\\n\\t\\trequire(_price >= minFee);\\n\\t\\trequire(!useWhitelist || whitelist[msg.sender], '!wl');\\n\\t\\trequire(mustOwn == address(0) || _owns(mustOwn, msg.sender), '!own');\\n\\n\\t\\taddress clone = ClonesUpgradeable.cloneDeterministic(impl, salt);\\n    ERC721Base(clone).initialize(_desc, _token, _price, _maxTotal, _maxMint, feePercent, feeAddress, gyve, mustOwn);\\n\\t\\tERC721Base(clone).transferOwnership(msg.sender);\\n\\t\\tIHandler(gyve).allow(clone, true);\\n\\t\\temit CreateNFT(msg.sender, clone, salt);\\n\\t\\treturn clone;\\n\\t}\\n\\n\\tfunction createNFTOwner(bytes32 salt, string memory _desc, string memory _token, uint256 _price, uint256 _maxTotal, uint256 _maxMint) onlyOwner external returns(address) {\\n\\t\\taddress clone = ClonesUpgradeable.cloneDeterministic(impl, salt);\\n    ERC721Base(clone).initialize(_desc, _token, _price, _maxTotal, _maxMint, feePercent, feeAddress, gyve, mustOwn);\\n\\t\\tERC721Base(clone).transferOwnership(msg.sender);\\n\\t\\tIHandler(gyve).allow(clone, true);\\n\\t\\temit CreateNFT(msg.sender, clone, salt);\\n\\t\\treturn clone;\\n\\t}\\n\\n\\tfunction predictDeterministic(bytes32 salt) external view returns(address) {\\n\\t\\treturn ClonesUpgradeable.predictDeterministicAddress(impl, salt);\\n\\t}\\n\\n  function _owns(address erc721, address _owner) internal view returns(bool) {\\n    return IERC721(erc721).balanceOf(_owner) > 0;\\n  }\\n\\n\\tfunction _sendEth(uint eth) internal {\\n\\t\\tif (eth > 0) {\\n    \\t(bool success, ) = feeAddress.call{value: eth}(\\\"\\\");\\n    \\trequire(success, '!_send');\\n\\t\\t}\\n  }\\n\\n\\tfunction setFees(address _feeAddress, uint _feePercent, uint _minFee) external onlyOwner {\\n\\t\\tminFee = _minFee;\\n\\t\\tfeeAddress = _feeAddress;\\n\\t\\tfeePercent = _feePercent;\\n\\t}\\n\\n\\tfunction setUseWhitelist(bool _use) external onlyOwner {\\n\\t\\tuseWhitelist = _use;\\n\\t}\\n\\n\\tfunction setWhitelist(address wl, bool allow) external onlyOwner {\\n\\t\\trequire(wl != address(0), '!wl');\\n\\t\\twhitelist[wl] = allow;\\n\\t}\\n\\n\\tfunction setGyve(address _gyve) external onlyOwner {\\n\\t\\trequire(_gyve != address(0), '!gyve');\\n\\t\\tgyve = _gyve;\\n\\t}\\n\\n\\tfunction setMustOwn(address _erc) external onlyOwner {\\n\\t\\tmustOwn = _erc;\\n\\t}\\n\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0;\\n\\nuint8 constant MAX_META = 16;\\nuint8 constant MAX_ATTRS = 40;\\nuint8 constant MAX_LAST_ERRORS = 50;\\nuint16 constant MAX_SLOTS_PRINT = 50;\\nuint256 constant MAX_STREAMS = 24; // Must be less than 64\\n\\nstruct Result {\\n    // basic\\n\\t\\tuint256 seed;\\n    uint256 tokenId;\\n\\t\\t// data\\n\\t\\tbool b64Html;\\n\\t\\tbool b64Image;\\n\\t\\tstring imagePrefix;\\n\\t\\tstring htmlName;\\n\\t\\tstring htmlPrefix;\\n    // for metadata\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring[MAX_META] metaNames;\\n\\t\\tstring[MAX_META] metaValues;\\n    string[MAX_ATTRS] attrTraits;\\n    string[MAX_ATTRS] attrValues;\\n\\t\\t// slots used\\n\\t\\tuint32 slots;\\n\\t\\t// meta\\n    uint8 meta;\\n\\t\\t// attributes\\n    uint8 attrs;\\n    // print slots\\n    uint16 printSlot;\\n    string[MAX_SLOTS_PRINT] printSlots;\\n    // last error from makeError\\n    uint8 errors;\\n    string[MAX_LAST_ERRORS] lastErrors;\\n    // streams\\n    bytes[MAX_STREAMS] streams;\\n\\t\\tbytes[MAX_STREAMS] htmlStreams;\\n}\\n\\nstruct XCallResult {\\n    string str;\\n    uint u;\\n    int i;\\n}\\n\\nstruct FyrdGyveResult {\\n\\tstring[] result;\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/Memory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.8;\\n// SPDX-License-Identifier: BUSL-1.1\\n\\nlibrary Memory {\\n\\n    // Size of a word, in bytes.\\n    uint internal constant WORD_SIZE = 32;\\n    // Size of the header of a 'bytes' array.\\n    uint internal constant BYTES_HEADER_SIZE = 32;\\n    // Address of the free memory pointer.\\n    uint internal constant FREE_MEM_PTR = 0x40;\\n\\n    // Compares the 'len' bytes starting at address 'addr' in memory with the 'len'\\n    // bytes starting at 'addr2'.\\n    // Returns 'true' if the bytes are the same, otherwise 'false'.\\n    function equals(uint addr, uint addr2, uint len) internal pure returns (bool equal) {\\n        assembly {\\n            equal := eq(keccak256(addr, len), keccak256(addr2, len))\\n        }\\n    }\\n\\n    // Compares the 'len' bytes starting at address 'addr' in memory with the bytes stored in\\n    // 'bts'. It is allowed to set 'len' to a lower value then 'bts.length', in which case only\\n    // the first 'len' bytes will be compared.\\n    // Requires that 'bts.length >= len'\\n    function equals(uint addr, uint len, bytes memory bts) internal pure returns (bool equal) {\\n        require(bts.length >= len);\\n        uint addr2;\\n        assembly {\\n            addr2 := add(bts, /*BYTES_HEADER_SIZE*/32)\\n        }\\n        return equals(addr, addr2, len);\\n    }\\n\\n    // Allocates 'numBytes' bytes in memory. This will prevent the Solidity compiler\\n    // from using this area of memory. It will also initialize the area by setting\\n    // each byte to '0'.\\n    function allocate(uint numBytes, bool zero) internal pure returns (uint addr) {\\n        // Take the current value of the free memory pointer, and update.\\n        assembly {\\n            addr := mload(/*FREE_MEM_PTR*/0x40)\\n            mstore(/*FREE_MEM_PTR*/0x40, add(addr, numBytes))\\n        }\\n\\t\\t\\t\\tif (zero) {\\n        \\tuint words = (numBytes + WORD_SIZE - 1) / WORD_SIZE;\\n        \\tfor (uint i = 0; i < words; i++) {\\n          \\t  assembly {\\n            \\t    mstore(add(addr, mul(i, /*WORD_SIZE*/32)), 0)\\n            \\t}\\n        \\t}\\n\\t\\t\\t\\t}\\n    }\\n\\n    // Copy 'len' bytes from memory address 'src', to address 'dest'.\\n    // This function does not check the or destination, it only copies\\n    // the bytes.\\n    function copy(uint src, uint dest, uint len) internal pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += WORD_SIZE;\\n            src += WORD_SIZE;\\n        }\\n\\n        // Copy remaining bytes\\n\\t\\t\\t\\tif (len > 0) {\\n        \\tuint mask = 256 ** (WORD_SIZE - len) - 1;\\n        \\tassembly {\\n          \\t  let srcpart := and(mload(src), not(mask))\\n            \\tlet destpart := and(mload(dest), mask)\\n            \\tmstore(dest, or(destpart, srcpart))\\n       \\t \\t}\\n\\t\\t\\t\\t}\\n    }\\n\\n    // Returns a memory pointer to the provided bytes array.\\n    function ptr(bytes memory bts) internal pure returns (uint addr) {\\n        assembly {\\n            addr := bts\\n        }\\n    }\\n\\n    // Returns a memory pointer to the data portion of the provided bytes array.\\n    function dataPtr(bytes memory bts) internal pure returns (uint addr) {\\n        assembly {\\n            addr := add(bts, /*BYTES_HEADER_SIZE*/32)\\n        }\\n    }\\n\\n    // This function does the same as 'dataPtr(bytes memory)', but will also return the\\n    // length of the provided bytes array.\\n    function fromBytes(bytes memory bts) internal pure returns (uint addr, uint len) {\\n        len = bts.length;\\n        assembly {\\n            addr := add(bts, /*BYTES_HEADER_SIZE*/32)\\n        }\\n    }\\n\\n    // Creates a 'bytes memory' variable from the memory address 'addr', with the\\n    // length 'len'. The function will allocate new memory for the bytes array, and\\n    // the 'len bytes starting at 'addr' will be copied into that new memory.\\n    function toBytes(uint addr, uint len) internal pure returns (bytes memory bts) {\\n        bts = new bytes(len);\\n        uint btsptr;\\n        assembly {\\n            btsptr := add(bts, /*BYTES_HEADER_SIZE*/32)\\n        }\\n        copy(addr, btsptr, len);\\n    }\\n\\n    // Get the word stored at memory address 'addr' as a 'uint'.\\n    function toUint(uint addr) internal pure returns (uint n) {\\n        assembly {\\n            n := mload(addr)\\n        }\\n    }\\n\\n    // Get the word stored at memory address 'addr' as a 'bytes32'.\\n    function toBytes32(uint addr) internal pure returns (bytes32 bts) {\\n        assembly {\\n            bts := mload(addr)\\n        }\\n    }\\n\\n    /*\\n    // Get the byte stored at memory address 'addr' as a 'byte'.\\n    function toByte(uint addr, uint8 index) internal pure returns (byte b) {\\n        require(index < WORD_SIZE);\\n        uint8 n;\\n        assembly {\\n            n := byte(index, mload(addr))\\n        }\\n        b = byte(n);\\n    }\\n    */\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/IHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ninterface IHandler {\\n\\tfunction allow(address allow, bool a) external;\\n  function run(uint tokenId, uint seed, string memory gyve, string memory ext, string[] memory fyrd) external view returns(Result memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC721Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"./IHandler.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./Base64.sol\\\";\\nimport \\\"./Memory.sol\\\";\\n\\ncontract ERC721Base is ERC721EnumerableUpgradeable, OwnableUpgradeable {\\n\\n\\tusing CountersUpgradeable for CountersUpgradeable.Counter;\\n\\tCountersUpgradeable.Counter private _tokenIds;\\n\\n\\tuint256 public price;\\n\\tmapping(address => uint256) public discounts;\\n\\tuint256 public maxMint;\\n\\tuint256 public maxTotal;\\n\\n\\tbool public paused;\\n\\tIHandler public handler;\\n\\tmapping (uint256 => uint256) public seeds;\\n\\n\\tstring[] public scripts;\\n\\tstring[] public fyrdScripts;\\n\\tstring[] public externalScripts;\\n\\n\\tbool allowCustom;\\n\\tmapping (uint256 => string[]) public c_scripts;\\n\\tmapping (uint256 => string[]) public c_fyrdScripts;\\n\\tmapping (uint256 => string[]) public c_externalScripts;\\n\\tmapping (uint256 => bool) public c_locked;\\n\\n\\tuint public feePercent;\\n\\taddress public feeAddress;\\n\\tuint constant PERCENT_BASE = 10000;\\n\\n\\taddress public ownPref;\\n\\tbool public pausedPref;\\n\\n\\tfunction initialize(string memory _desc, string memory _token, uint256 _price, uint256 _maxTotal, uint256 _maxMint, uint _feePercent, address _feeAddress, address _gyve, address _ownPref) public initializer {\\n\\t\\t__Ownable_init();\\n\\t\\t__ERC721Enumerable_init();\\n\\t\\t__ERC721_init(_desc, _token);\\n\\t\\tprice = _price;\\n\\t\\tmaxMint = _maxMint;\\n\\t\\tmaxTotal = _maxTotal;\\n\\t\\tfeePercent = _feePercent;\\n\\t\\tfeeAddress = _feeAddress;\\n\\t\\townPref = _ownPref;\\n\\t\\thandler = IHandler(_gyve);\\n\\t\\tpaused = true;\\n\\t\\tpausedPref = true;\\n\\t\\tscripts.push('holder');\\n\\t}\\n\\n\\tfunction _getScripts(string[] storage _scripts) internal view returns (bytes memory script) {\\n\\t\\tstring[8] memory s;\\n\\t\\tfor (uint i = 0; i < _scripts.length; i++) {\\n\\t\\t\\tuint idx = i % 8;\\n\\t\\t\\ts[idx] = _scripts[idx];\\n\\t\\t}\\n\\t\\treturn abi.encodePacked(s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7]);\\n\\t}\\n\\n\\tfunction _allowGetScripts(uint tokenId) internal view returns(bool) {\\n\\t\\treturn allowCustom && c_scripts[tokenId].length > 0 && !c_locked[tokenId];\\n\\t}\\n\\n\\tfunction _getGyveScript(uint256 tokenId) internal view returns (bytes memory script) {\\n\\t\\tstring[] storage _scripts =  _allowGetScripts(tokenId) ? c_scripts[tokenId] : scripts; \\n\\t\\treturn _getScripts(_scripts);\\n\\t}\\n\\n\\tfunction _getFyrdScripts(uint256 tokenId) internal view returns (string[] memory script) {\\n\\t\\treturn _allowGetScripts(tokenId) ? c_fyrdScripts[tokenId] : fyrdScripts;\\n\\t}\\n\\n\\tfunction _getExternalScript(uint256 tokenId) internal view returns (bytes memory script) {\\n\\t\\tstring[] storage _externalScripts = _allowGetScripts(tokenId) ? c_externalScripts[tokenId] : externalScripts; \\n\\t\\treturn _getScripts(_externalScripts);\\n\\t}\\n\\n\\tfunction _setScripts(string[] storage set, string[] memory _scripts) internal {\\n\\t\\tfor (uint i = 0; i < _scripts.length; i++) {\\n\\t\\t\\tset.push(_scripts[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _isOwner() internal view returns(bool) {\\n\\t\\treturn owner() == _msgSender();\\n\\t}\\n\\n\\tfunction _onlyOwner() internal view {\\n    require(_isOwner(), \\\"!owner\\\");\\n\\t}\\n\\n\\tfunction setScripts(string[] memory _scripts) external {\\n\\t\\t_onlyOwner();\\n\\t\\tdelete scripts;\\n\\t\\t_setScripts(scripts, _scripts);\\n\\t}\\n\\n\\tfunction resetScripts() external {\\n\\t\\t_onlyOwner();\\n\\t\\tdelete scripts;\\n\\t}\\n\\n\\tfunction getScripts() external view returns (string[] memory) {\\n\\t\\treturn scripts;\\n\\t}\\n\\n\\tfunction lockCustom(uint tokenId, bool lock) external {\\n\\t\\t_onlyOwner();\\n\\t\\tc_locked[tokenId] = lock;\\n\\t}\\n\\n\\tfunction setAllowCustom(bool _allow) external {\\n\\t\\t_onlyOwner();\\n\\t\\tallowCustom = _allow;\\n\\t}\\n\\n\\tfunction _isCustomAllowed(uint tokenId) internal view returns(bool) {\\n\\t\\treturn allowCustom && _ownsToken(tokenId) && !c_locked[tokenId];\\n\\t}\\n\\n\\tfunction _onlyOwnerOrCustom(uint tokenId) internal view {\\n\\t\\trequire(_isOwner() || _isCustomAllowed(tokenId), 'custom');\\n\\t}\\n\\n\\tfunction setCustomScripts(uint256 tokenId, string[] memory _scripts) external {\\n\\t\\t_onlyOwnerOrCustom(tokenId);\\n\\t\\tdelete c_scripts[tokenId];\\n\\t\\t_setScripts(c_scripts[tokenId], _scripts);\\n\\t}\\n\\n\\tfunction resetCustomScripts(uint tokenId) external {\\n\\t\\t_onlyOwnerOrCustom(tokenId);\\n\\t\\tdelete c_scripts[tokenId];\\n\\t}\\n\\n\\tfunction getCustomScripts(uint256 tokenId) external view returns (string[] memory) {\\n\\t\\treturn c_scripts[tokenId];\\n\\t}\\n\\n\\tfunction setCustomExternalScripts(uint tokenId, string[] memory _scripts) external {\\n\\t\\t_onlyOwnerOrCustom(tokenId);\\n\\t\\tdelete c_externalScripts[tokenId];\\n\\t\\t_setScripts(c_externalScripts[tokenId], _scripts);\\n\\t}\\n\\n\\tfunction resetCustomExternalScripts(uint tokenId) external {\\n\\t\\t_onlyOwnerOrCustom(tokenId);\\n\\t\\tdelete c_externalScripts[tokenId];\\n\\t}\\n\\n\\tfunction getCustomExternalScripts(uint tokenId) external view returns (string[] memory) {\\n\\t\\treturn c_externalScripts[tokenId];\\n\\t}\\n\\n\\tfunction setExternalScripts(string[] memory _scripts) external {\\n\\t\\t_onlyOwner();\\n\\t\\tdelete externalScripts;\\n\\t\\tfor (uint i = 0; i < _scripts.length; i++) {\\n\\t\\t\\texternalScripts.push(_scripts[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction resetExternalScripts() external {\\n\\t\\t_onlyOwner();\\n\\t\\tdelete externalScripts;\\n\\t}\\n\\n\\tfunction getExternalScripts() external view returns (string[] memory) {\\n\\t\\treturn externalScripts;\\n\\t}\\n\\n\\tfunction lenExternalScripts() external view returns(uint) {\\n\\t\\treturn externalScripts.length;\\n\\t}\\n\\n\\tfunction setCustomFyrdScripts(uint tokenId, string[] memory _scripts) external {\\n\\t\\t_onlyOwnerOrCustom(tokenId);\\n\\t\\tdelete c_fyrdScripts[tokenId];\\n\\t\\t_setScripts(c_fyrdScripts[tokenId], _scripts);\\n\\t}\\n\\n\\tfunction getCustomFyrdScripts(uint tokenId) external view returns (string[] memory) {\\n\\t\\treturn c_fyrdScripts[tokenId];\\n\\t}\\n\\n\\tfunction resetCustomFyrdScripts(uint tokenId) external {\\n\\t\\t_onlyOwnerOrCustom(tokenId);\\n\\t\\tdelete c_fyrdScripts[tokenId];\\n\\t}\\n\\n\\tfunction setFyrdScripts(string[] memory _scripts) external {\\n\\t\\t_onlyOwner();\\n\\t\\tdelete fyrdScripts;\\n\\t\\tfor (uint i = 0; i < _scripts.length; i++) {\\n\\t\\t\\tfyrdScripts.push(_scripts[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getFyrdScripts() external view returns (string[] memory) {\\n\\t\\treturn fyrdScripts;\\n\\t}\\n\\n\\tfunction resetFyrdScripts() external {\\n\\t\\t_onlyOwner();\\n\\t\\tdelete fyrdScripts;\\n\\t}\\n\\n\\tfunction lenFyrdScripts() external view returns(uint) {\\n\\t\\treturn fyrdScripts.length;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId) override public view returns (string memory) {\\n\\t\\tuint256 seed = seeds[tokenId];\\n\\t\\tif (seed == 0) return \\\"\\\";\\n\\t\\tstring memory gyve = string(_getGyveScript(tokenId));\\n\\t\\tstring memory ext = string(_getExternalScript(tokenId));\\n\\t\\tstring[] memory fyrd = _getFyrdScripts(tokenId);\\n\\t\\treturn tokenURI(tokenId, seed, gyve, ext, fyrd, false);\\n\\t}\\n\\n  function stringJoin(bytes[] memory svec, string memory sep, uint vlen) internal pure returns(bytes memory) {\\n\\t\\tbytes memory bsep = bytes(sep);\\n\\t\\tuint lsep = bsep.length;\\n\\t\\tuint len = lsep * (svec.length - 1);\\n\\t\\tfor (uint i = 0; i < vlen; i++)\\n\\t\\t\\tlen += bytes(svec[i]).length;\\n\\n\\t\\tuint offset = 0;\\n\\t\\tbytes memory buff = new bytes(len);\\n\\t\\tuint to = Memory.dataPtr(buff);\\n\\t\\tuint asep = Memory.dataPtr(bsep);\\n\\t\\tfor (uint i = 0; i < vlen; i++) {\\n\\t\\t\\tbytes memory b = bytes(svec[i]);\\n\\t\\t\\tuint slen = b.length;\\n\\t\\t\\tuint from = Memory.dataPtr(b);\\n\\t\\t\\tMemory.copy(from, to + offset, slen);\\n\\t\\t\\toffset += slen;\\n\\t\\t\\tif (i < vlen - 1 && lsep > 0) {\\n\\t\\t\\t\\tMemory.copy(asep, to + offset, lsep);\\n\\t\\t\\t\\toffset += lsep;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn buff;\\n\\t}\\n\\n\\tfunction generateStreams(bytes[MAX_STREAMS] memory streams) internal pure returns (bytes memory) {\\n\\t\\tuint16 stream = 0;\\n\\t\\tbytes[] memory used = new bytes[](MAX_STREAMS);\\n\\t\\tfor (uint16 i = 0; i < MAX_STREAMS; i++) {\\n\\t\\t\\tif (streams[i].length > 0)\\n\\t\\t\\t\\tused[stream++] = streams[i];\\n\\t\\t}\\n\\t\\treturn stringJoin(used, \\\"\\\", stream);\\n\\t}\\n\\n\\tfunction generateImage(Result memory vars) internal pure returns (bytes memory) {\\n\\t\\tbytes memory svg = generateStreams(vars.streams);\\n\\t\\tstring memory image = vars.b64Image ? Base64.encode(svg) : string(svg);\\n\\t\\treturn abi.encodePacked(',\\\"image\\\": \\\"', vars.imagePrefix, image, '\\\"');\\n\\t}\\n\\n\\tfunction generateHtml(Result memory vars) internal pure returns (bytes memory) {\\n\\t\\tbytes memory html = generateStreams(vars.htmlStreams);\\n\\t\\tif (html.length == 0) return html;\\n\\t\\tstring memory h = vars.b64Html ? Base64.encode(html) : string(html);\\n\\t\\treturn abi.encodePacked(',\\\"', vars.htmlName, '\\\":\\\"', vars.htmlPrefix, h, '\\\"');\\n\\t}\\n\\n\\tfunction generateJson(Result memory vars, bool debug) internal pure returns (string memory) {\\n\\t\\tbytes memory image = generateImage(vars);\\n\\t\\tbytes memory attrs = generateAttrs(vars);\\n\\t\\tbytes memory meta = generateMeta(vars);\\n\\t\\tbytes memory html = generateHtml(vars);\\n\\t\\tbytes memory name = abi.encodePacked(vars.name, ' #', StringsUpgradeable.toString(vars.tokenId));\\n\\t\\tbytes[8] memory json;\\n\\t\\tjson[0] = abi.encodePacked('{\\\"name\\\":\\\"', name, '\\\",\\\"description\\\":\\\"', vars.description, '\\\",', meta, attrs);\\n\\t\\tjson[1] = image;\\n\\t\\tjson[2] = html;\\n\\t\\tif (debug) {\\n\\t\\t\\tjson[3] = ',';\\n\\t\\t\\tjson[4] = generateErrors(vars);\\n\\t\\t\\tjson[5] = ',';\\n\\t\\t\\tjson[6] = generatePrints(vars);\\n\\t\\t\\tjson[7] = generateSlots(vars);\\n\\t\\t}\\n\\t\\tstring memory b64 = Base64.encode(abi.encodePacked(json[0], json[1], json[2], json[3], json[4], json[5], json[6], json[7], '}'));\\n\\t\\treturn string(abi.encodePacked('data:application/json;base64,', b64));\\n\\t}\\n\\n\\tfunction generatePrints(Result memory vars) internal pure returns(bytes memory) {\\n\\t\\tbytes[3] memory attrs;\\n\\t\\tattrs[0] = '[';\\n\\t\\tattrs[1] = '';\\n\\t\\tfor (uint16 i = 0; i < vars.printSlot; i++) {\\n\\t\\t\\tstring memory comma = i < vars.printSlot - 1 ? ',' : '';\\n\\t\\t\\tattrs[1] = abi.encodePacked(attrs[1], '\\\"', vars.printSlots[i], '\\\"', comma);\\n\\t\\t}\\n\\t\\tattrs[2] = ']';\\n\\t\\treturn abi.encodePacked('\\\"prints\\\":', attrs[0], attrs[1], attrs[2]);\\n\\t}\\n\\n\\tfunction generateSlots(Result memory vars) internal pure returns(bytes memory) {\\n\\t\\treturn abi.encodePacked(',\\\"slots\\\":\\\"', Strings.toString(uint(vars.slots)), '\\\"');\\n\\t}\\n\\n\\t\\t\\tfunction generateErrors(Result memory vars) internal pure returns(bytes memory) {\\n\\t\\t\\t\\tbytes[3] memory attrs;\\n\\t\\t\\t\\tattrs[0] = '[';\\n\\t\\t\\t\\tattrs[1] = '';\\n\\t\\t\\t\\tfor (uint8 i = 0; i < vars.errors; i++) {\\n\\t\\t\\t\\t\\tstring memory comma = i < vars.errors - 1 ? ',' : '';\\n\\t\\t\\t\\t\\tattrs[1] = abi.encodePacked(attrs[1], '\\\"', vars.lastErrors[i], '\\\"', comma);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattrs[2] = ']';\\n\\t\\t\\t\\treturn abi.encodePacked('\\\"errors\\\":', attrs[0], attrs[1], attrs[2]);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction generateMeta(Result memory vars) internal pure returns(bytes memory) {\\n\\t\\t\\t\\tbytes[] memory attrs = new bytes[](vars.meta);\\n\\t\\t\\t\\tfor (uint8 i = 0; i < vars.meta; i++) {\\n\\t\\t\\t\\t\\tattrs[i] = abi.encodePacked('\\\"', vars.metaNames[i], '\\\":\\\"', vars.metaValues[i], '\\\",');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn stringJoin(attrs, \\\"\\\", vars.meta);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction generateAttrs(Result memory vars) internal pure returns(bytes memory) {\\n\\t\\t\\t\\tbytes[] memory attrs = new bytes[](MAX_ATTRS * 5 + 5);\\n\\t\\t\\t\\tuint idx = 0;\\n\\t\\t\\t\\tattrs[idx++] = '\\\"attributes\\\": [';\\n\\t\\t\\t\\tfor (uint8 i = 0; i < vars.attrs; i++) {\\n\\t\\t\\t\\t\\tattrs[idx++] = '{ \\\"trait_type\\\":\\\"';\\n\\t\\t\\t\\t\\tattrs[idx++] = bytes(vars.attrTraits[i]);\\n\\t\\t\\t\\t\\tattrs[idx++] = '\\\", \\\"value\\\": \\\"';\\n\\t\\t\\t\\t\\tattrs[idx++] = bytes(vars.attrValues[i]);\\n\\t\\t\\t\\t\\tattrs[idx++] = '\\\" },';\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattrs[idx++] = '{ \\\"trait_type\\\": \\\"Gyve\\\", \\\"value\\\": \\\"';\\n\\t\\t\\t\\tattrs[idx++] = '1.0.0';\\n\\t\\t\\t\\tattrs[idx++] = '\\\" }';\\n\\t\\t\\t\\tattrs[idx++] = ']';\\n\\t\\t\\t\\treturn stringJoin(attrs, \\\"\\\", idx);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction mint(uint256 amount) payable external {\\n\\t\\t\\t\\trequire(paused == false, 'paused');\\n\\t\\t\\t\\t_mint(amount, price);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction mintOwner(uint256 amount) payable external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\t_mint(amount, price);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction mintPref1155(uint256 amount, uint256 tokenId) payable external {\\n\\t\\t\\t\\trequire(pausedPref == false || paused == false, 'paused');\\n\\t\\t\\t\\trequire(_owns1155(ownPref, tokenId, msg.sender), '!owner');\\n\\t\\t\\t\\tuint256 discount = discounts[ownPref];\\n\\t\\t\\t\\tif (discount > price)\\n\\t\\t\\t\\t\\tdiscount = price;\\n\\t\\t\\t\\tuint _price = discount > 0 ? discount : price;\\n\\t\\t\\t\\t_mint(amount, _price);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction mintPref(uint256 amount) payable external {\\n\\t\\t\\t\\trequire(pausedPref == false || paused == false, 'paused');\\n\\t\\t\\t\\trequire(_owns(ownPref, msg.sender), '!owner');\\n\\t\\t\\t\\tuint256 discount = discounts[ownPref];\\n\\t\\t\\t\\tif (discount > price)\\n\\t\\t\\t\\t\\tdiscount = price;\\n\\t\\t\\t\\tuint _price = discount > 0 ? discount : price;\\n\\t\\t\\t\\t_mint(amount, _price);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction mintDiscount1155(uint256 amount, address erc1155, uint256 tokenId) payable external {\\n\\t\\t\\t\\trequire(paused == false, 'paused');\\n\\t\\t\\t\\tuint256 discount = discounts[erc1155];\\n\\t\\t\\t\\trequire(discount > 0, '!discount');\\n\\t\\t\\t\\trequire(_owns1155(erc1155, tokenId, msg.sender), '!owner');\\n\\t\\t\\t\\tif (discount > price)\\n\\t\\t\\t\\t\\tdiscount = price;\\n\\t\\t\\t\\t_mint(amount, discount);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction mintDiscount(uint256 amount, address erc721) payable external {\\n\\t\\t\\t\\trequire(paused == false, 'paused');\\n\\t\\t\\t\\tuint256 discount = discounts[erc721];\\n\\t\\t\\t\\trequire(discount > 0, '!discount');\\n\\t\\t\\t\\trequire(_owns(erc721, msg.sender), '!owner');\\n\\t\\t\\t\\tif (discount > price)\\n\\t\\t\\t\\t\\tdiscount = price;\\n\\t\\t\\t\\t_mint(amount, discount);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _mint(uint256 amount, uint256 thePrice) internal {\\n\\t\\t\\t\\trequire(amount > 0 && amount <= maxMint, '!amount');\\n\\t\\t\\t\\trequire(totalSupply() + amount <= maxTotal, '!noneLeft');\\n\\t\\t\\t\\trequire(msg.value == amount * thePrice, '!price');\\n\\t\\t\\t\\t_sendEth(msg.value);\\n\\t\\t\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\t\\t\\t_mintToken();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _mintToken() internal returns(uint256 tokenId) {\\n\\t\\t\\t\\t_tokenIds.increment();\\n\\t\\t\\t\\ttokenId = _tokenIds.current();\\n\\t\\t\\t\\t_mint(msg.sender, tokenId);\\n\\t\\t\\t\\tseeds[tokenId] = _getRandomValue(tokenId);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _getRandomValue(uint256 tokenId) internal view returns(uint256) {\\n\\t\\t\\t\\treturn uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, msg.sender, tokenId)));\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _owns(address erc721, address _owner) internal view returns(bool) {\\n\\t\\t\\t\\treturn IERC721Upgradeable(erc721).balanceOf(_owner) > 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _owns1155(address erc1155, uint256 _tokenId, address _owner) internal view returns(bool) {\\n\\t\\t\\t\\treturn IERC1155Upgradeable(erc1155).balanceOf(_owner, _tokenId) > 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _ownsToken(uint tokenId) internal view returns(bool) {\\n\\t\\t\\t\\treturn ownerOf(tokenId) == msg.sender;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction setDiscount(address erc721, uint256 discount) external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\trequire(erc721 != address(0), '!erc721');\\n\\t\\t\\t\\tdiscounts[erc721] = discount;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction unpause() external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\tpaused = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction pause() external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\tpaused = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction unpausePref() external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\tpausedPref = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction pausePref() external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\tpausedPref = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction setOwnPref(address _ownPref) external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\townPref = _ownPref;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _sendEth(uint256 eth) internal {\\n\\t\\t\\t\\tif (eth > 0) {\\n\\t\\t\\t\\t\\tuint fee = eth * feePercent / PERCENT_BASE;\\n\\t\\t\\t\\t\\tif (fee > 0)\\n\\t\\t\\t\\t\\t\\t_send(feeAddress, fee);\\n\\t\\t\\t\\t\\t_send(owner(), eth - fee);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction _send(address dest, uint eth) internal {\\n\\t\\t\\t\\t(bool success, ) = dest.call{value: eth}(\\\"\\\");\\n\\t\\t\\t\\trequire(success, '!_send');\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction setHandler(address _handler) external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\trequire(_handler != address(0), '!handler');\\n\\t\\t\\t\\thandler = IHandler(_handler);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction setPrice(uint256 _price) external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\tprice = _price;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction setMaxTotal(uint256 _maxTotal) external {\\n\\t\\t\\t\\t_onlyOwner();\\n\\t\\t\\t\\tmaxTotal = _maxTotal;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction tokenURIDebug(uint256 tokenId, uint256 seed, string memory gyve, string memory ext, string[] memory fyrd) external view returns (string memory) {\\n\\t\\t\\t\\t_onlyOwnerOrCustom(tokenId);\\n\\t\\t\\t\\treturn tokenURI(tokenId, seed, gyve, ext, fyrd, true);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction tokenURI(uint256 tokenId, uint256 seed, string memory gyve, string memory ext, string[] memory fyrd, bool debug) internal view returns (string memory) {\\n\\t\\t\\t\\tResult memory result = handler.run(tokenId, seed, gyve, ext, fyrd);\\n\\t\\t\\t\\treturn generateJson(result, debug);\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\"\r\n    },\r\n    \"/contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gyve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"CreateNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMint\",\"type\":\"uint256\"}],\"name\":\"createNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMint\",\"type\":\"uint256\"}],\"name\":\"createNFTOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictDeterministic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gyve\",\"type\":\"address\"}],\"name\":\"setGyve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc\",\"type\":\"address\"}],\"name\":\"setMustOwn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_use\",\"type\":\"bool\"}],\"name\":\"setUseWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wl\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Factory", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f779e34a020a1e6f8bd0fab1eb6e52ce56b38b4000000000000000000000000be8babce040ac9e00fcca09289b1842f1e7b660900000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000038d7ea4c68000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}