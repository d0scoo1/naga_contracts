{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n    }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: hardhat/console.sol\r\n\r\n\r\npragma solidity >= 0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _sendLogPayload(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function log() internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n    }\r\n\r\n    function logUint(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/SIMP.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SIMP is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    modifier lockSwap {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    modifier liquidityAdd {\r\n        _inLiquidityAdd = true;\r\n        _;\r\n        _inLiquidityAdd = false;\r\n    }\r\n\r\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 ether;\r\n\r\n    uint256 internal _maxTransfer = 5;\r\n    uint256 public marketingRate = 5;\r\n    uint256 public treasuryRate = 5;\r\n    uint256 public reflectRate = 5;\r\n    /// @notice Contract SIMP balance threshold before `_swap` is invoked\r\n    uint256 public minTokenBalance = 10000000 ether;\r\n    bool public swapFees = true;\r\n\r\n    // total wei reflected ever\r\n    uint256 public ethReflectionBasis;\r\n    uint256 public totalReflected;\r\n    uint256 public totalMarketing;\r\n    uint256 public totalTreasury;\r\n\r\n    address payable public marketingWallet;\r\n    address payable public treasuryWallet;\r\n\r\n    uint256 internal _totalSupply = 0;\r\n    IUniswapV2Router02 internal _router = IUniswapV2Router02(address(0));\r\n    address internal _pair;\r\n    bool internal _inSwap = false;\r\n    bool internal _inLiquidityAdd = false;\r\n    bool public tradingActive = false;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _taxExcluded;\r\n    mapping(address => uint256) public lastReflectionBasis;\r\n\r\n    constructor(\r\n        address _uniswapFactory,\r\n        address _uniswapRouter,\r\n        address payable _marketingWallet,\r\n        address payable _treasuryWallet\r\n    ) ERC20(\"SIMPTOKEN v2\", \"SIMP\") Ownable() {\r\n        addTaxExcluded(owner());\r\n        addTaxExcluded(address(0));\r\n        addTaxExcluded(_marketingWallet);\r\n        addTaxExcluded(_treasuryWallet);\r\n        addTaxExcluded(address(this));\r\n\r\n        marketingWallet = _marketingWallet;\r\n        treasuryWallet = _treasuryWallet;\r\n\r\n        _router = IUniswapV2Router02(_uniswapRouter);\r\n        IUniswapV2Factory uniswapContract = IUniswapV2Factory(_uniswapFactory);\r\n        _pair = uniswapContract.createPair(address(this), _router.WETH());\r\n    }\r\n\r\n    /// @notice Change the address of the marketing wallet\r\n    /// @param _marketingWallet The new address of the marketing wallet\r\n    function setMarketingWallet(address payable _marketingWallet) external onlyOwner() {\r\n        marketingWallet = _marketingWallet;\r\n    }\r\n\r\n    /// @notice Change the address of the treasury wallet\r\n    /// @param _treasuryWallet The new address of the treasury wallet\r\n    function setTreasuryWallet(address payable _treasuryWallet) external onlyOwner() {\r\n        treasuryWallet = _treasuryWallet;\r\n    }\r\n\r\n    /// @notice Change the marketing tax rate\r\n    /// @param _marketingRate The new marketing tax rate\r\n    function setMarketingRate(uint256 _marketingRate) external onlyOwner() {\r\n        require(_marketingRate <= 100, \"_marketingRate cannot exceed 100%\");\r\n        marketingRate = _marketingRate;\r\n    }\r\n\r\n    /// @notice Change the treasury tax rate\r\n    /// @param _treasuryRate The new treasury tax rate\r\n    function setTreasuryRate(uint256 _treasuryRate) external onlyOwner() {\r\n        require(_treasuryRate <= 100, \"_treasuryRate cannot exceed 100%\");\r\n        treasuryRate = _treasuryRate;\r\n    }\r\n\r\n    /// @notice Change the reflection tax rate\r\n    /// @param _reflectRate The new reflection tax rate\r\n    function setReflectRate(uint256 _reflectRate) external onlyOwner() {\r\n        require(_reflectRate <= 100, \"_reflectRate cannot exceed 100%\");\r\n        reflectRate = _reflectRate;\r\n    }\r\n\r\n    /// @notice Change the minimum contract SIMP balance before `_swap` gets invoked\r\n    /// @param _minTokenBalance The new minimum balance\r\n    function setMinTokenBalance(uint256 _minTokenBalance) external onlyOwner() {\r\n        minTokenBalance = _minTokenBalance;\r\n    }\r\n\r\n    /// @notice Rescue SIMP from the marketing amount\r\n    /// @dev Should only be used in an emergency\r\n    /// @param _amount The amount of SIMP to rescue\r\n    /// @param _recipient The recipient of the rescued SIMP\r\n    function rescueMarketingTokens(uint256 _amount, address _recipient) external onlyOwner() {\r\n        require(_amount <= totalMarketing, \"Amount cannot be greater than totalMarketing\");\r\n        _rawTransfer(address(this), _recipient, _amount);\r\n        totalMarketing -= _amount;\r\n    }\r\n\r\n    /// @notice Rescue SIMP from the treasury amount\r\n    /// @dev Should only be used in an emergency\r\n    /// @param _amount The amount of SIMP to rescue\r\n    /// @param _recipient The recipient of the rescued SIMP\r\n    function rescueTreasuryTokens(uint256 _amount, address _recipient) external onlyOwner() {\r\n        require(_amount <= totalTreasury, \"Amount cannot be greater than totalTreasury\");\r\n        _rawTransfer(address(this), _recipient, _amount);\r\n        totalTreasury -= _amount;\r\n    }\r\n\r\n    /// @notice Rescue SIMP from the reflection amount\r\n    /// @dev Should only be used in an emergency\r\n    /// @param _amount The amount of SIMP to rescue\r\n    /// @param _recipient The recipient of the rescued SIMP\r\n    function rescueReflectionTokens(uint256 _amount, address _recipient) external onlyOwner() {\r\n        require(_amount <= totalReflected, \"Amount cannot be greater than totalReflected\");\r\n        _rawTransfer(address(this), _recipient, _amount);\r\n        totalReflected -= _amount;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokens) external payable onlyOwner() liquidityAdd {\r\n        _mint(address(this), tokens);\r\n        _approve(address(this), address(_router), tokens);\r\n\r\n        _router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            tokens,\r\n            0,\r\n            0,\r\n            owner(),\r\n        // solhint-disable-next-line not-rely-on-time\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @notice Enables trading on Uniswap\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n    }\r\n\r\n    /// @notice Disables trading on Uniswap\r\n    function disableTrading() external onlyOwner {\r\n        tradingActive = false;\r\n    }\r\n\r\n    function addReflection() external payable {\r\n        ethReflectionBasis += msg.value;\r\n    }\r\n\r\n    function isTaxExcluded(address account) public view returns (bool) {\r\n        return _taxExcluded[account];\r\n    }\r\n\r\n    function addTaxExcluded(address account) public onlyOwner() {\r\n        require(!isTaxExcluded(account), \"Account must not be excluded\");\r\n\r\n        _taxExcluded[account] = true;\r\n    }\r\n\r\n    function removeTaxExcluded(address account) external onlyOwner() {\r\n        require(isTaxExcluded(account), \"Account must not be excluded\");\r\n\r\n        _taxExcluded[account] = false;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _addBalance(address account, uint256 amount) internal {\r\n        _balances[account] = _balances[account] + amount;\r\n    }\r\n\r\n    function _subtractBalance(address account, uint256 amount) internal {\r\n        _balances[account] = _balances[account] - amount;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        if (isTaxExcluded(sender) || isTaxExcluded(recipient)) {\r\n            _rawTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 maxTxAmount = totalSupply() * _maxTransfer / 1000;\r\n        require(amount <= maxTxAmount || _inLiquidityAdd || _inSwap || recipient == address(_router), \"Exceeds max transaction amount\");\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= minTokenBalance;\r\n\r\n        if(contractTokenBalance >= maxTxAmount) {\r\n            contractTokenBalance = maxTxAmount;\r\n        }\r\n\r\n        if (\r\n            overMinTokenBalance &&\r\n            !_inSwap &&\r\n            sender != _pair &&\r\n            swapFees\r\n        ) {\r\n            _swap(contractTokenBalance);\r\n        }\r\n\r\n        _claimReflection(payable(sender));\r\n        _claimReflection(payable(recipient));\r\n\r\n        uint256 send = amount;\r\n        uint256 reflect;\r\n        uint256 marketing;\r\n        uint256 treasury;\r\n        if (sender == _pair || recipient == _pair) {\r\n            require(tradingActive, \"Trading is not yet active\");\r\n            (\r\n            send,\r\n            reflect,\r\n            marketing,\r\n            treasury\r\n            ) = _getTaxAmounts(amount);\r\n        }\r\n        _rawTransfer(sender, recipient, send);\r\n        _takeTaxes(sender, marketing, treasury, reflect);\r\n    }\r\n\r\n    function unclaimedReflection(address addr) public view returns (uint256) {\r\n        if (addr == _pair || addr == address(_router)) return 0;\r\n\r\n        uint256 basisDifference = ethReflectionBasis - lastReflectionBasis[addr];\r\n        return basisDifference * balanceOf(addr) / _totalSupply;\r\n    }\r\n\r\n    /// @notice Claims reflection pool ETH\r\n    /// @param addr The address to claim the reflection for\r\n    function _claimReflection(address payable addr) internal {\r\n        uint256 unclaimed = unclaimedReflection(addr);\r\n        lastReflectionBasis[addr] = ethReflectionBasis;\r\n        if (unclaimed > 0) {\r\n            addr.transfer(unclaimed);\r\n        }\r\n    }\r\n\r\n    function claimReflection() external {\r\n        _claimReflection(payable(msg.sender));\r\n    }\r\n\r\n    /// @notice Perform a Uniswap v2 swap from SIMP to ETH and handle tax distribution\r\n    /// @param amount The amount of SIMP to swap in wei\r\n    /// @dev `amount` is always <= this contract's ETH balance. Calculate and distribute marketing and reflection taxes\r\n    function _swap(uint256 amount) internal lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n\r\n        _approve(address(this), address(_router), amount);\r\n\r\n        uint256 contractEthBalance = address(this).balance;\r\n\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 tradeValue = address(this).balance - contractEthBalance;\r\n\r\n        uint256 totalTaxes = totalMarketing.add(totalTreasury).add(totalReflected);\r\n        uint256 marketingAmount = amount.mul(totalMarketing).div(totalTaxes);\r\n        uint256 treasuryAmount = amount.mul(totalTreasury).div(totalTaxes);\r\n        uint256 reflectedAmount = amount.sub(marketingAmount).sub(treasuryAmount);\r\n\r\n        uint256 marketingEth = tradeValue.mul(totalMarketing).div(totalTaxes);\r\n        uint256 treasuryEth = tradeValue.mul(totalTreasury).div(totalTaxes);\r\n        uint256 reflectedEth = tradeValue.sub(marketingEth).sub(treasuryEth);\r\n\r\n        if (marketingEth > 0) {\r\n            marketingWallet.transfer(marketingEth);\r\n        }\r\n        if (treasuryEth > 0) {\r\n            treasuryWallet.transfer(treasuryEth);\r\n        }\r\n        totalMarketing = totalMarketing.sub(marketingAmount);\r\n        totalTreasury = totalTreasury.sub(treasuryAmount);\r\n        totalReflected = totalReflected.sub(reflectedAmount);\r\n        ethReflectionBasis = ethReflectionBasis.add(reflectedEth);\r\n    }\r\n\r\n    function swapAll() external {\r\n        uint256 maxTxAmount = totalSupply() * _maxTransfer / 1000;\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if(contractTokenBalance >= maxTxAmount)\r\n        {\r\n            contractTokenBalance = maxTxAmount;\r\n        }\r\n\r\n        if (\r\n            !_inSwap\r\n        ) {\r\n            _swap(contractTokenBalance);\r\n        }\r\n    }\r\n\r\n    function withdrawAll() external onlyOwner() {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Transfers SIMP from an account to this contract for taxes\r\n    /// @param _account The account to transfer SIMP from\r\n    /// @param _marketingAmount The amount of marketing tax to transfer\r\n    /// @param _treasuryAmount The amount of treasury tax to transfer\r\n    /// @param _reflectAmount The amount of reflection tax to transfer\r\n    function _takeTaxes(\r\n        address _account,\r\n        uint256 _marketingAmount,\r\n        uint256 _treasuryAmount,\r\n        uint256 _reflectAmount\r\n    ) internal {\r\n        require(_account != address(0), \"taxation from the zero address\");\r\n\r\n        uint256 totalAmount = _marketingAmount.add(_treasuryAmount).add(_reflectAmount);\r\n        _rawTransfer(_account, address(this), totalAmount);\r\n        totalMarketing += _marketingAmount;\r\n        totalTreasury += _treasuryAmount;\r\n        totalReflected += _reflectAmount;\r\n    }\r\n\r\n    /// @notice Get a breakdown of send and tax amounts\r\n    /// @param amount The amount to tax in wei\r\n    /// @return send The raw amount to send\r\n    /// @return reflect The raw reflection tax amount\r\n    /// @return marketing The raw marketing tax amount\r\n    /// @return treasury The raw treasury tax amount\r\n    function _getTaxAmounts(uint256 amount)\r\n    internal\r\n    view\r\n    returns (\r\n        uint256 send,\r\n        uint256 reflect,\r\n        uint256 marketing,\r\n        uint256 treasury\r\n    )\r\n    {\r\n        reflect = amount.mul(reflectRate).div(100);\r\n        marketing = amount.mul(marketingRate).div(100);\r\n        treasury = amount.mul(treasuryRate).div(100);\r\n        send = amount.sub(reflect).sub(marketing).sub(treasury);\r\n    }\r\n\r\n    // modified from OpenZeppelin ERC20\r\n    function _rawTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"transfer from the zero address\");\r\n        require(recipient != address(0), \"transfer to the zero address\");\r\n\r\n        uint256 senderBalance = balanceOf(sender);\r\n        require(senderBalance >= amount, \"transfer amount exceeds balance\");\r\n    unchecked {\r\n        _subtractBalance(sender, amount);\r\n    }\r\n        _addBalance(recipient, amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setMaxTransfer(uint256 maxTransfer) external onlyOwner() {\r\n        _maxTransfer = maxTransfer;\r\n    }\r\n\r\n    /// @notice Enable or disable whether swap occurs during `_transfer`\r\n    /// @param _swapFees If true, enables swap during `_transfer`\r\n    function setSwapFees(bool _swapFees) external onlyOwner() {\r\n        swapFees = _swapFees;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal override {\r\n        require(_totalSupply.add(amount) <= MAX_SUPPLY, \"Max supply exceeded\");\r\n        _totalSupply += amount;\r\n        _addBalance(account, amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external onlyOwner() {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function airdrop(address[] memory accounts, uint256[] memory amounts) external onlyOwner() {\r\n        require(accounts.length == amounts.length, \"array lengths must match\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _mint(accounts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addReflection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethReflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueMarketingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueReflectionTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueTreasuryTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingRate\",\"type\":\"uint256\"}],\"name\":\"setMarketingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransfer\",\"type\":\"uint256\"}],\"name\":\"setMaxTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenBalance\",\"type\":\"uint256\"}],\"name\":\"setMinTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectRate\",\"type\":\"uint256\"}],\"name\":\"setReflectRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapFees\",\"type\":\"bool\"}],\"name\":\"setSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryRate\",\"type\":\"uint256\"}],\"name\":\"setTreasuryRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unclaimedReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SIMP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000ef94a60e76eb00296e81515f20da7763340f4a330000000000000000000000009eceb5702048589b4e0482b46c687a2dd4b9d9d5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6bd688adb90a4eb1c6c6f30c880c0e854f96241f024fd42bb420c44a452d0566"}]}