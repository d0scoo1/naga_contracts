{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LiquidityOps.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IXLPToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n/// @dev interface of the frax gauge. Based on FraxUnifiedFarmTemplate.sol\\n/// https://github.com/FraxFinance/frax-solidity/blob/master/src/hardhat/contracts/Staking/FraxUnifiedFarmTemplate.sol\\ninterface IUnifiedFarm {\\n    // Struct for the stake\\n    struct LockedStake {\\n        bytes32 kek_id;\\n        uint256 start_timestamp;\\n        uint256 liquidity;\\n        uint256 ending_timestamp;\\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\\n    }\\n    function stakeLocked(uint256 liquidity, uint256 secs) external;\\n    function getReward(address destination_address) external returns (uint256[] memory);\\n    function withdrawLocked(bytes32 kek_id, address destination_address) external;\\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) external;\\n    function stakerSetVeFXSProxy(address proxy_address) external;\\n    function stakerToggleMigrator(address migrator_address) external;\\n    function lock_time_for_max_multiplier() external view returns (uint256);\\n    function lock_time_min() external view returns (uint256);\\n    function getAllRewardTokens() external view returns (address[] memory);\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory);\\n}\\n\\n/// @dev interface of the curve stable swap.\\ninterface IStableSwap {\\n    function coins(uint256 j) external view returns (address);\\n    function calc_token_amount(uint256[2] calldata _amounts, bool _is_deposit) external view returns (uint256);\\n    function add_liquidity(uint256[2] calldata _amounts, uint256 _min_mint_amount, address destination) external returns (uint256);\\n    function get_dy(int128 _from, int128 _to, uint256 _from_amount) external view returns (uint256);\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata _min_amounts) external returns (uint256[2] memory);\\n    function fee() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 _max_burn_amount, address _receiver) external returns (uint256);\\n}\\n\\ncontract LiquidityOps is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IXLPToken;\\n\\n    IUnifiedFarm public lpFarm;          // frax unified lp farm\\n    IXLPToken public xlpToken;           // stax lp receipt;\\n    IERC20 public lpToken;               // lp pair token\\n\\n    // curve pool for (xlp, lp) pair. This is an ERC20, \\n    // and gets minted/burnt when new liquidity is added/removed in the pool.\\n    IStableSwap public curveStableSwap;\\n\\n    address public rewardsManager;\\n    address public feeCollector;\\n    address public pegDefender;\\n    address public operator;\\n    \\n    // applyLiquidity can be toggled to be permissionless or only callable by an operator.\\n    bool public operatorOnlyMode;\\n\\n    // The order of curve pool tokens\\n    int128 public inputTokenIndex;\\n    int128 public staxReceiptTokenIndex;\\n\\n    // How much of user LP do we add into gauge.\\n    // The remainder is added as liquidity into curve pool\\n    LockRate public lockRate;  \\n\\n    struct LockRate {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    FeeRate public feeRate;\\n    struct FeeRate {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    // fxs emissions + random token extra bribe\\n    IERC20[] public rewardTokens;\\n\\n    // The period of time (secs) to lock liquidity into the farm.\\n    uint256 public farmLockTime;\\n\\n    // FEE_DENOMINATOR from Curve StableSwap\\n    uint256 internal constant CURVE_FEE_DENOMINATOR = 1e10;\\n\\n    event SetLockParams(uint128 numerator, uint128 denominator);\\n    event SetFeeParams(uint128 numerator, uint128 denominator);\\n    event Locked(uint256 amountLocked);\\n    event LiquidityAdded(uint256 lpAmount, uint256 xlpAmount, uint256 curveTokenAmount);\\n    event LiquidityRemoved(uint256 lpAmount, uint256 xlpAmount, uint256 curveTokenAmount);\\n    event WithdrawAndReLock(bytes32 _kekId, uint256 amount);\\n    event RewardHarvested(address token, address to, uint256 distributionAmount, uint256 feeAmount);\\n    event RewardClaimed(uint256[] data);\\n    event SetVeFXSProxy(address proxy);\\n    event MigratorToggled(address migrator);\\n    event RewardsManagerSet(address manager);\\n    event FeeCollectorSet(address feeCollector);\\n    event TokenRecovered(address user, uint256 amount);\\n    event CoinExchanged(address coinSent, uint256 amountSent, uint256 amountReceived);\\n    event RemovedLiquidityImbalance(uint256 _amount0, uint256 _amounts1, uint256 burnAmount);\\n    event PegDefenderSet(address defender);\\n    event FarmLockTimeSet(uint256 secs);\\n    event OperatorOnlyModeSet(bool value);\\n    event OperatorSet(address operator);\\n\\n    constructor(\\n        address _lpFarm,\\n        address _lpToken,\\n        address _xlpToken,\\n        address _curveStableSwap,\\n        address _rewardsManager,\\n        address _feeCollector\\n    ) {\\n        lpFarm = IUnifiedFarm(_lpFarm);\\n        lpToken = IERC20(_lpToken);\\n        xlpToken = IXLPToken(_xlpToken);\\n\\n        curveStableSwap = IStableSwap(_curveStableSwap);\\n        (staxReceiptTokenIndex, inputTokenIndex) = curveStableSwap.coins(0) == address(xlpToken)\\n            ? (int128(0), int128(1))\\n            : (int128(1), int128(0));\\n\\n        rewardsManager = _rewardsManager;\\n        feeCollector = _feeCollector;\\n        \\n        // Lock all liquidity in the lpFarm as a (non-zero denominator) default.\\n        lockRate.numerator = 100;\\n        lockRate.denominator = 100;\\n\\n        // No fees are taken by default\\n        feeRate.numerator = 0;\\n        feeRate.denominator = 100;\\n\\n        // By default, set the lock time to the max (eg 3yrs for TEMPLE/FRAX)\\n        farmLockTime = lpFarm.lock_time_for_max_multiplier();\\n\\n        // applyLiquidity is permissionless by default.\\n        operatorOnlyMode = false;\\n    }\\n\\n    function setLockParams(uint128 _numerator, uint128 _denominator) external onlyOwner {\\n        require(_denominator > 0 && _numerator <= _denominator, \\\"invalid params\\\");\\n        lockRate.numerator = _numerator;\\n        lockRate.denominator = _denominator;\\n\\n        emit SetLockParams(_numerator, _denominator);\\n    }\\n\\n    function setRewardsManager(address _manager) external onlyOwner {\\n        require(_manager != address(0), \\\"invalid address\\\");\\n        rewardsManager = _manager;\\n\\n        emit RewardsManagerSet(_manager);\\n    }\\n\\n    function setFeeParams(uint128 _numerator, uint128 _denominator) external onlyOwner {\\n        require(_denominator > 0 && _numerator <= _denominator, \\\"invalid params\\\");\\n        feeRate.numerator = _numerator;\\n        feeRate.denominator = _denominator;\\n\\n        emit SetFeeParams(_numerator, _denominator);\\n    }\\n\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        require(_feeCollector != address(0), \\\"invalid address\\\");\\n        feeCollector = _feeCollector;\\n\\n        emit FeeCollectorSet(_feeCollector);\\n    }\\n\\n    function setFarmLockTime(uint256 _secs) external onlyOwner {\\n        require(_secs >= lpFarm.lock_time_min(), \\\"Minimum lock time not met\\\");\\n        require(_secs <= lpFarm.lock_time_for_max_multiplier(),\\\"Trying to lock for too long\\\");\\n        farmLockTime = _secs;\\n        emit FarmLockTimeSet(_secs);\\n    }\\n\\n    // set lp farm in case of migration\\n    function setLPFarm(address _lpFarm) external onlyOwner {\\n        require(_lpFarm != address(0), \\\"invalid address\\\");\\n        lpFarm = IUnifiedFarm(_lpFarm);\\n    }\\n\\n    function setRewardTokens() external {\\n        address[] memory tokens = lpFarm.getAllRewardTokens();\\n        for (uint i=0; i<tokens.length; i++) {\\n            rewardTokens.push(IERC20(tokens[i]));\\n        }\\n    }\\n\\n    function setPegDefender(address _pegDefender) external onlyOwner {\\n        pegDefender = _pegDefender;\\n        emit PegDefenderSet(_pegDefender);\\n    }\\n\\n    function setOperatorOnlyMode(bool _operatorOnlyMode) external onlyOwner {\\n        operatorOnlyMode = _operatorOnlyMode;\\n        emit OperatorOnlyModeSet(_operatorOnlyMode);\\n    }\\n\\n    function setOperator(address _operator) external onlyOwner {\\n        operator = _operator;\\n        emit OperatorSet(_operator);\\n    }\\n\\n    function exchange(\\n        address _coinIn,\\n        uint256 _amount,\\n        uint256 _minAmountOut\\n    ) external onlyPegDefender {\\n        (int128 in_index, int128 out_index) = (staxReceiptTokenIndex, inputTokenIndex);\\n\\n        if (_coinIn == address(xlpToken)) {\\n            uint256 balance = xlpToken.balanceOf(address(this));\\n            require(_amount <= balance, \\\"not enough tokens\\\");\\n            xlpToken.safeIncreaseAllowance(address(curveStableSwap), _amount);\\n        } else if (_coinIn == address(lpToken)) {\\n            uint256 balance = lpToken.balanceOf(address(this));\\n            require(_amount <= balance, \\\"not enough tokens\\\");\\n            lpToken.safeIncreaseAllowance(address(curveStableSwap), _amount);\\n            (in_index, out_index) = (inputTokenIndex, staxReceiptTokenIndex);\\n        } else {\\n            revert(\\\"unknown token\\\");\\n        }\\n\\n        uint256 amountReceived = curveStableSwap.exchange(in_index, out_index, _amount, _minAmountOut);\\n\\n        emit CoinExchanged(_coinIn, _amount, amountReceived);\\n    }\\n\\n    function removeLiquidityImbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _maxBurnAmount\\n    ) external onlyPegDefender {\\n        require(curveStableSwap.balanceOf(address(this)) > 0, \\\"no liquidity\\\");\\n        uint256 burnAmount = curveStableSwap.remove_liquidity_imbalance(_amounts, _maxBurnAmount, address(this));\\n\\n        emit RemovedLiquidityImbalance(_amounts[0], _amounts[1], burnAmount);\\n    }\\n\\n    function lockInGauge(uint256 liquidity) private {\\n        lpToken.safeIncreaseAllowance(address(lpFarm), liquidity);\\n\\n        // if first time lock\\n        IUnifiedFarm.LockedStake[] memory lockedStakes = lpFarm.lockedStakesOf(address(this));\\n        uint256 lockedStakesLength = lockedStakes.length;\\n\\n        // we want to lock additional if lock end time not expired\\n        // check last lockedStake if expired\\n        if (lockedStakesLength == 0 || block.timestamp >= lockedStakes[lockedStakesLength - 1].ending_timestamp) {\\n            lpFarm.stakeLocked(liquidity, farmLockTime);\\n        } else {\\n            lpFarm.lockAdditional(lockedStakes[lockedStakesLength - 1].kek_id, liquidity);\\n        }\\n        \\n        emit Locked(liquidity);\\n    }\\n\\n    /** \\n      * @notice Add LP/xLP 1:1 into the curve pool\\n      * @dev Add same amounts of lp and xlp tokens such that the price remains about the same\\n             - don't apply any peg fixing here. xLP tokens are minted 1:1\\n      * @param _amount The amount of LP and xLP to add into the pool.\\n      * @param _minCurveAmountOut The minimum amount of curve liquidity tokens we expect in return.\\n      */\\n    function addLiquidity(uint256 _amount, uint256 _minCurveAmountOut) private {\\n        uint256[2] memory amounts = [_amount, _amount];\\n        \\n        // Mint the new xLP. same as lp amount\\n        xlpToken.mint(address(this), _amount);\\n\\n        lpToken.safeIncreaseAllowance(address(curveStableSwap), _amount);\\n        xlpToken.safeIncreaseAllowance(address(curveStableSwap), _amount);\\n\\n        uint256 liquidity = curveStableSwap.add_liquidity(amounts, _minCurveAmountOut, address(this));\\n        emit LiquidityAdded(_amount, _amount, liquidity);\\n    }\\n\\n    function removeLiquidity(\\n        uint256 _liquidity,\\n        uint256 _lpAmountMin,\\n        uint256 _xlpAmountMin\\n    ) external onlyPegDefender {\\n        uint256 balance = curveStableSwap.balanceOf(address(this));\\n        require(balance >= _liquidity, \\\"not enough tokens\\\");\\n\\n        uint256 receivedXlpAmount;\\n        uint256 receivedLpAmount;\\n        if (staxReceiptTokenIndex == 0) {\\n            uint256[2] memory balances = curveStableSwap.remove_liquidity(_liquidity, [_xlpAmountMin, _lpAmountMin]);\\n            receivedXlpAmount = balances[0];\\n            receivedLpAmount = balances[1];\\n        } else {\\n            uint256[2] memory balances = curveStableSwap.remove_liquidity(_liquidity, [_lpAmountMin, _xlpAmountMin]);\\n            receivedXlpAmount = balances[1];\\n            receivedLpAmount = balances[0];\\n        }\\n\\n        emit LiquidityRemoved(receivedLpAmount, receivedXlpAmount, _liquidity);\\n    }\\n\\n    /**\\n      * @notice Calculate the amounts of liquidity to lock in the gauge vs add into the curve pool, based on lockRate policy.\\n      */\\n    function applyLiquidityAmounts(uint256 _liquidity) private view returns (uint256 lockAmount, uint256 addLiquidityAmount) {\\n        lockAmount = (_liquidity * lockRate.numerator) / lockRate.denominator;\\n        unchecked {\\n            addLiquidityAmount = _liquidity - lockAmount;\\n        }\\n    }\\n\\n    /** \\n      * @notice Calculates the min expected amount of curve liquditity token to receive when depositing the \\n      *         current eligable amount to into the curve LP:xLP liquidity pool\\n      * @dev Takes into account pool liquidity slippage and fees.\\n      * @param _liquidity The amount of LP to apply\\n      * @param _modelSlippage Any extra slippage to account for, given curveStableSwap.calc_token_amount() \\n               is an approximation. 1e10 precision, so 1% = 1e8.\\n      * @return minCurveTokenAmount Expected amount of LP tokens received \\n      */ \\n    function minCurveLiquidityAmountOut(uint256 _liquidity, uint256 _modelSlippage) external view returns (uint256 minCurveTokenAmount) {\\n        uint256 feeAndSlippage = _modelSlippage + curveStableSwap.fee();\\n        require(feeAndSlippage <= CURVE_FEE_DENOMINATOR, \\\"invalid slippage\\\");\\n        (, uint256 addLiquidityAmount) = applyLiquidityAmounts(_liquidity);\\n        \\n        minCurveTokenAmount = 0;\\n        if (addLiquidityAmount > 0) {\\n            uint256[2] memory amounts = [addLiquidityAmount, addLiquidityAmount];\\n            minCurveTokenAmount = curveStableSwap.calc_token_amount(amounts, true);\\n            unchecked {\\n                minCurveTokenAmount -= minCurveTokenAmount * feeAndSlippage / CURVE_FEE_DENOMINATOR;\\n            }\\n        }\\n    }\\n\\n    /** \\n      * @notice Apply LP held by this contract - locking into the gauge and adding to the curve liquidity pool\\n      * @dev The ratio of gauge vs liquidity pool is goverend by the lockRate percentage, set by policy.\\n      *      It is by default permissionless to call, but may be beneficial to limit how liquidity is deployed\\n      *      in the future (by a whitelisted operator)\\n      * @param _liquidity The amount of LP to apply.\\n      * @param _minCurveTokenAmount When adding liquidity to the pool, what is the minimum number of tokens\\n      *        to accept.\\n      */\\n    function applyLiquidity(uint256 _liquidity, uint256 _minCurveTokenAmount) external onlyOperator {\\n        require(_liquidity <= lpToken.balanceOf(address(this)), \\\"not enough liquidity\\\");\\n        (uint256 lockAmount, uint256 addLiquidityAmount) = applyLiquidityAmounts(_liquidity);\\n\\n        // Policy may be set to put all in gauge, or all as new curve liquidity\\n        if (lockAmount > 0) {\\n            lockInGauge(lockAmount);\\n        }\\n\\n        if (addLiquidityAmount > 0) {\\n            addLiquidity(addLiquidityAmount, _minCurveTokenAmount);\\n        }\\n    }\\n\\n    // withdrawAndRelock is called to withdraw expired locks and relock into the most recent\\n    function withdrawAndRelock(bytes32 _oldKekId) external {\\n        // there may be reserve lp tokens in contract. account for those\\n        uint256 lpTokensBefore = lpToken.balanceOf(address(this));\\n        lpFarm.withdrawLocked(_oldKekId, address(this));\\n        uint256 lpTokensAfter = lpToken.balanceOf(address(this));\\n        uint256 lockAmount;\\n        unchecked {\\n            lockAmount = lpTokensAfter - lpTokensBefore;\\n        }\\n\\n        require(lockAmount > 0, \\\"nothing to withdraw\\\");\\n        lpToken.safeIncreaseAllowance(address(lpFarm), lockAmount);\\n\\n        // Re-lock into the most recent lock\\n        IUnifiedFarm.LockedStake[] memory lockedStakes = lpFarm.lockedStakesOf(address(this));\\n        uint256 lockedStakesLength = lockedStakes.length;\\n        // avoid locking in a stale lock position. i.e. a lock with start and endtimestamp set to 0\\n        // check last lockedStake if expired\\n        if (block.timestamp >= lockedStakes[lockedStakesLength - 1].ending_timestamp) {\\n            lpFarm.stakeLocked(lockAmount, farmLockTime);\\n        } else {\\n            lpFarm.lockAdditional(lockedStakes[lockedStakesLength - 1].kek_id, lockAmount);\\n        }\\n\\n        emit WithdrawAndReLock(_oldKekId, lockAmount);\\n    }\\n\\n    // claim reward to this contract.\\n    // reward manager will withdraw rewards for incentivizing xlp stakers\\n    function getReward() external returns (uint256[] memory data) {\\n        data = lpFarm.getReward(address(this));\\n\\n        emit RewardClaimed(data);\\n    }\\n\\n    // get amount to lock based on lock rate\\n    function _getFeeAmount(uint256 _amount) internal view returns (uint256) {\\n        return (_amount * feeRate.numerator) / feeRate.denominator;\\n    }\\n\\n    // harvest rewards\\n    function harvestRewards() external {\\n        // iterate through reward tokens and transfer to rewardsManager\\n        for (uint i=0; i<rewardTokens.length; i++) {\\n            IERC20 token = rewardTokens[i];\\n            uint256 amount = token.balanceOf(address(this));\\n            uint256 feeAmount = _getFeeAmount(amount);\\n\\n            if (feeAmount > 0) {\\n                amount -= feeAmount;\\n                token.safeTransfer(feeCollector, feeAmount);\\n            }\\n            if (amount > 0) {\\n                token.safeTransfer(rewardsManager, amount);\\n            }\\n\\n            emit RewardHarvested(address(token), rewardsManager, amount, feeAmount);\\n        }\\n    }\\n\\n    // Staker can allow a veFXS proxy (the proxy will have to toggle them first)\\n    function setVeFXSProxy(address _proxy) external onlyOwner {\\n        lpFarm.stakerSetVeFXSProxy(_proxy);\\n\\n        emit SetVeFXSProxy(_proxy);\\n    }\\n\\n    // Owner can withdraw any locked position.\\n    // Migration on expired locks can then happen without farm gov/owner having to pause and toggleMigrations()\\n    function withdrawLocked(bytes32 kek_id, address destination_address) external onlyOwner {\\n        // The farm emits WithdrawLocked events.\\n        lpFarm.withdrawLocked(kek_id, destination_address);\\n    }\\n    \\n    // To migrate:\\n    // - unified farm owner/gov sets valid migrator\\n    // - stakerToggleMigrator() - this func\\n    // - gov/owner calls toggleMigrations()\\n    // - migrator calls migrator_withdraw_locked(this, kek_id), which calls _withdrawLocked(staker, migrator) - sends lps to migrator\\n    // - migrator is assumed to be new lplocker and therefore would now own the lp tokens and can relock (stakelock) in newly upgraded gauge.\\n    // Staker can allow a migrator\\n    function stakerToggleMigrator(address _migrator) external onlyOwner {\\n        lpFarm.stakerToggleMigrator(_migrator);\\n\\n        emit MigratorToggled(_migrator);\\n    }\\n\\n    // recover tokens except reward tokens\\n    // for reward tokens use harvestRewards instead\\n    function recoverToken(address _token, address _to, uint256 _amount) external onlyOwnerOrPegDefender {\\n        for (uint i=0; i<rewardTokens.length; i++) {\\n            require(_token != address(rewardTokens[i]), \\\"can't recover reward token this way\\\");\\n        }\\n\\n        _transferToken(IERC20(_token), _to, _amount);\\n\\n        emit TokenRecovered(_to, _amount);\\n    }\\n\\n    function _transferToken(IERC20 _token, address _to, uint256 _amount) internal {\\n        uint256 balance = _token.balanceOf(address(this));\\n        require(_amount <= balance, \\\"not enough tokens\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    modifier onlyPegDefender() {\\n        require(msg.sender == pegDefender, \\\"not defender\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrPegDefender {\\n        require(msg.sender == owner() || msg.sender == pegDefender, \\\"only owner or defender\\\");\\n        _;\\n    }\\n\\n    /// @dev Either set to be permissionless, or can only be called by the operator.\\n    modifier onlyOperator {\\n        require(!operatorOnlyMode || msg.sender == operator, \\\"not operator\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xlpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveStableSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinSent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"CoinExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"FarmLockTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xlpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curveTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xlpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curveTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"OperatorOnlyModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defender\",\"type\":\"address\"}],\"name\":\"PegDefenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amounts1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"RemovedLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"RewardHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"RewardsManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"SetFeeParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"SetLockParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"SetVeFXSProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_kekId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAndReLock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCurveTokenAmount\",\"type\":\"uint256\"}],\"name\":\"applyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveStableSwap\",\"outputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputTokenIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFarm\",\"outputs\":[{\"internalType\":\"contract IUnifiedFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_modelSlippage\",\"type\":\"uint256\"}],\"name\":\"minCurveLiquidityAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minCurveTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorOnlyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegDefender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xlpAmountMin\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"setFarmLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_denominator\",\"type\":\"uint128\"}],\"name\":\"setFeeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpFarm\",\"type\":\"address\"}],\"name\":\"setLPFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_denominator\",\"type\":\"uint128\"}],\"name\":\"setLockParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_operatorOnlyMode\",\"type\":\"bool\"}],\"name\":\"setOperatorOnlyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pegDefender\",\"type\":\"address\"}],\"name\":\"setPegDefender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setRewardsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setVeFXSProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"stakerToggleMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staxReceiptTokenIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_oldKekId\",\"type\":\"bytes32\"}],\"name\":\"withdrawAndRelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xlpToken\",\"outputs\":[{\"internalType\":\"contract IXLPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquidityOps", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000010460d02226d6ef7b2419ae150e6377bdbb7ef160000000000000000000000006021444f1706f15465bee85463bcc7d7cc17fc03000000000000000000000000bcb8b7fc9197feda75c101fa69d3211b5a30dcd9000000000000000000000000dadfd00a2bbeb1abc4936b1644a3033e1b653228000000000000000000000000cebd4d43a3938f46d217c0b141ea514df689cb410000000000000000000000008c2d06e11ca4414e00cdea8f28633a2edaf79499", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}