{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FastFoodFrensFryVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@ FastFoodFrensFryVault @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,@@@@@@@@@@***,,,@@@@@@@@@@,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,@@@@@@@@@@***,,,@@@@@@@@@@,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,***@@@****,,,,,,****@@@***,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,***@@@****,,,,,,****@@@***,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,,,,***,,,,,,,,,,,,,,***,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@(((((((((((((////(((((((((((((///(((((((@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@((((((####################((((################@@@@@@@@@@***(@@@@@@@@\\r\\n// @@@@@@@@(((((((///((((##########@@@###////##########@@@###@@@@@@@@@***@#***(@@@@\\r\\n// @@@@@@@@(((((((///((((##########@@@###////##########@@@###@@@@@@@****@**@**@&**/\\r\\n// @@@@@///(((((((((((((((((#######@@@///(((((((#######@@@///@@@@@@***@**@@*/@***&@\\r\\n// @@@@@((((((((((((((((((((#############(((((((#############@@@@@@*****@**@****@@@\\r\\n// @@@@@(((((((///(((((((((((((((((((((((((((///(((((((((((((@@@@@@*******@***@@@@@\\r\\n// @@@@@(((((((///(((((((((((((((((((((((((((///(((((((((((((@@@@@@@********/@@@@@@\\r\\n// @@@@@(((((((((((((////////////////////////////////////////@@@@@@//@@@@@@@@@@@@@@\\r\\n// @@@@@///((((((((((////&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@//@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@((((((((((((((////////////////////////////////////@@@//@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@((((((((((((((////////////////////////////////////@@//@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@(((///(((((((((((((((((///((((((((((((((@@@@**@//@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@(((((((((((((((((((((((((((@@@@@@@@@@/(((%@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@(((((((((((((///(((((((((((((((((((((((%@**(((@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@(((((((((((((///((((((((((((((((((((((@#*//(@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@///@@@((((((((((((((((((((////(((@@@@@**@//@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@(((((((((((((((((((((((((((@@@@@**/@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport {EnumerableSetUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20Burnable} from \\\"./interface/IERC20Burnable.sol\\\";\\r\\n\\r\\nimport {BasicRNGUpgradeable} from \\\"./base/BasicRNGUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Fast Food Frens' Fry Vault\\r\\n * @notice Deposit your Fast Food Frens and earn fries.\\r\\n */\\r\\ncontract FastFoodFrensFryVault is Initializable, OwnableUpgradeable, PausableUpgradeable, BasicRNGUpgradeable {\\r\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\r\\n\\r\\n  event HardWorkerTaxed(address indexed account, uint256 amount);\\r\\n  event HardWorkerPaid(address indexed account, uint256 amount);\\r\\n\\r\\n  event TaxTheftSuccessful(address indexed account, uint256 indexed id, uint256 total, uint256 tax);\\r\\n  event TaxTheftFail(address indexed account, uint256 indexed id, uint256 total, uint256 tax);\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                                Farming State                               */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Rewards end timestamp.\\r\\n  uint256 public endTime;\\r\\n\\r\\n  /// @notice Rewards emitted per day staked.\\r\\n  uint256 public rate;\\r\\n\\r\\n  /// @notice Staking token contract address.\\r\\n  IERC721 public stakingToken;\\r\\n\\r\\n  /// @notice Rewards token contract address.\\r\\n  IERC20Burnable public rewardToken;\\r\\n\\r\\n  /// @notice Spookies token contract address.\\r\\n  IERC721 public spookiesToken;\\r\\n\\r\\n  /// @notice Fast Food Doges token contract address.\\r\\n  IERC721 public dogesToken;\\r\\n\\r\\n  /// @notice Set of staked token ids by address.\\r\\n  mapping(address => EnumerableSetUpgradeable.UintSet) internal _depositedIds;\\r\\n\\r\\n  /// @notice Mapping of timestamps from each staked token id.\\r\\n  mapping(uint256 => uint256) internal _depositedTimestamps;\\r\\n\\r\\n  /// @notice Mapping of timestamps of initial staking date from each staked token id.\\r\\n  mapping(uint256 => uint256) internal _initialDepositedTimestamps;\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                             Staking Variables                              */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Price in FRY to unlock before minStakingPeriod\\r\\n  uint128 public earlyWithdrawPenalty;\\r\\n\\r\\n  /// @notice Min staking time\\r\\n  uint64 public minStakingPeriod;\\r\\n\\r\\n  /// @notice Hardworker are subject to  taxation\\r\\n  uint32 public hardworkerTax;\\r\\n\\r\\n  /// @notice Tax Thief fail subject to higher taxation\\r\\n  uint32 public taxtheftTax;\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                           initialize contract                             */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Initialize contract\\r\\n  function initialize(\\r\\n    address newStakingToken,\\r\\n    address newRewardToken,\\r\\n    address newSpookiesToken,\\r\\n    address newDogesToken,\\r\\n    uint256 newRate,\\r\\n    uint256 newEndTime,\\r\\n    uint128 newEarlyWithdrawPenalty,\\r\\n    uint64 newMinStakingPeriod,\\r\\n    uint32 newHardworkerTax,\\r\\n    uint32 newTaxtheftTax\\r\\n  ) external initializer {\\r\\n    __Ownable_init();\\r\\n    __Pausable_init();\\r\\n\\r\\n    stakingToken = IERC721(newStakingToken); // FFF\\r\\n    rewardToken = IERC20Burnable(newRewardToken); // FRY\\r\\n    spookiesToken = IERC721(newSpookiesToken); // Spookies\\r\\n    dogesToken = IERC721(newDogesToken); // FFD\\r\\n    rate = newRate; // Daily emissions by token\\r\\n    endTime = newEndTime; // End date timemstamp\\r\\n\\r\\n    earlyWithdrawPenalty = newEarlyWithdrawPenalty; //169 ether\\r\\n    minStakingPeriod = newMinStakingPeriod; //90 days\\r\\n    hardworkerTax = newHardworkerTax; // 69\\r\\n    taxtheftTax = newTaxtheftTax; //169\\r\\n\\r\\n    // approve contract for rewardToken\\r\\n    rewardToken.approve(address(this), type(uint256).max);\\r\\n\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                         Deposit / Withdraw                                 */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Deposit tokens with `ids`. Tokens MUST have been approved to this contract first.\\r\\n  function deposit(uint256[] memory ids) external whenNotPaused {\\r\\n    for (uint256 i; i < ids.length; i++) {\\r\\n      // Add the new deposit to the mapping\\r\\n      _depositedIds[msg.sender].add(ids[i]);\\r\\n      _initialDepositedTimestamps[ids[i]] = block.timestamp;\\r\\n      _depositedTimestamps[ids[i]] = block.timestamp;\\r\\n\\r\\n      // Transfer the deposited token to this contract\\r\\n      stakingToken.transferFrom(msg.sender, address(this), ids[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraw tokens with `ids` and claim their pending rewards.\\r\\n  function withdraw(uint256[] memory ids) external whenNotPaused {\\r\\n    uint256 penalty = getEarlyWithdrawPenalty(ids);\\r\\n    if (penalty > 0) rewardToken.burnFrom(msg.sender, penalty);\\r\\n\\r\\n    uint256 collectionBonus = getCollectionsBonus(msg.sender);\\r\\n    uint256 totalRewards;\\r\\n\\r\\n    for (uint256 i; i < ids.length; i++) {\\r\\n      require(_depositedIds[msg.sender].contains(ids[i]), \\\"Query for a token you don't own\\\");\\r\\n      uint256 timeBonus = getTimeBonus(ids[i]);\\r\\n\\r\\n      totalRewards += (_rewards(_depositedTimestamps[ids[i]]) * (1000 + collectionBonus + timeBonus)) / 1000;\\r\\n      _depositedIds[msg.sender].remove(ids[i]);\\r\\n      delete _initialDepositedTimestamps[ids[i]];\\r\\n      delete _depositedTimestamps[ids[i]];\\r\\n\\r\\n      stakingToken.safeTransferFrom(address(this), msg.sender, ids[i]);\\r\\n    }\\r\\n\\r\\n    payHardworker(totalRewards);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate total rewards for given account without tax\\r\\n  /// @param account Holder address.\\r\\n  function earned(address account) external view returns (uint256[] memory rewards) {\\r\\n    uint256 length = _depositedIds[account].length();\\r\\n    uint256 collectionBonus = getCollectionsBonus(account);\\r\\n\\r\\n    rewards = new uint256[](length);\\r\\n\\r\\n    for (uint256 i; i < length; i++) {\\r\\n      uint256 tokenId = _depositedIds[account].at(i);\\r\\n      uint256 timeBonus = getTimeBonus(tokenId);\\r\\n\\r\\n      rewards[i] = (_rewards(_depositedTimestamps[tokenId]) * (1000 + collectionBonus + timeBonus)) / 1000;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Internally calculates base rewards for token `_id`.\\r\\n  function _rewards(uint256 timestamp) internal view returns (uint256) {\\r\\n    if (timestamp == 0) return 0;\\r\\n    return ((MathUpgradeable.min(block.timestamp, endTime) - timestamp) * rate) / 1 days;\\r\\n  }\\r\\n\\r\\n  /// @notice Retrieve token initialDepositedTimestamps by account.\\r\\n  /// @param account Token owner address.\\r\\n  function initialDepositTimestampsOf(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory initialDepositTimestamps)\\r\\n  {\\r\\n    uint256 length = _depositedIds[account].length();\\r\\n    initialDepositTimestamps = new uint256[](length);\\r\\n    for (uint256 i; i < length; i++)\\r\\n      initialDepositTimestamps[i] = _initialDepositedTimestamps[_depositedIds[account].at(i)];\\r\\n  }\\r\\n\\r\\n  /// @notice Retrieve token ids deposited by account.\\r\\n  /// @param account Token owner address.\\r\\n  function depositsOf(address account) external view returns (uint256[] memory ids) {\\r\\n    uint256 length = _depositedIds[account].length();\\r\\n    ids = new uint256[](length);\\r\\n    for (uint256 i; i < length; i++) ids[i] = _depositedIds[account].at(i);\\r\\n  }\\r\\n\\r\\n  /// @notice Claim all pending rewards with hardworkerTax\\r\\n  function claimAll() external whenNotPaused {\\r\\n    uint256 totalRewards = 0;\\r\\n    uint256 collectionBonus = getCollectionsBonus(msg.sender);\\r\\n\\r\\n    for (uint256 i; i < _depositedIds[msg.sender].length(); i++) {\\r\\n      //Sum up rewards and update last checkpoint\\r\\n      uint256 tokenId = _depositedIds[msg.sender].at(i);\\r\\n      uint256 timestamp = _depositedTimestamps[tokenId];\\r\\n      uint256 timeBonus = getTimeBonus(tokenId);\\r\\n\\r\\n      _depositedTimestamps[tokenId] = block.timestamp;\\r\\n      totalRewards += (_rewards(timestamp) * (1000 + collectionBonus + timeBonus)) / 1000;\\r\\n    }\\r\\n\\r\\n    payHardworker(totalRewards);\\r\\n  }\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                                Claim Logic                                 */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Claim pending rewards for ids with hardworkerTax\\r\\n  function claimHardWorker(uint256[] memory ids) external whenNotPaused {\\r\\n    uint256 totalRewards = 0;\\r\\n    uint256 collectionBonus = getCollectionsBonus(msg.sender);\\r\\n\\r\\n    for (uint256 i; i < ids.length; i++) {\\r\\n      require(_depositedIds[msg.sender].contains(ids[i]), \\\"Query for a token you don't own\\\");\\r\\n      uint256 timestamp = _depositedTimestamps[ids[i]];\\r\\n      uint256 timeBonus = getTimeBonus(ids[i]);\\r\\n\\r\\n      _depositedTimestamps[ids[i]] = block.timestamp;\\r\\n      totalRewards += (_rewards(timestamp) * (1000 + collectionBonus + timeBonus)) / 1000;\\r\\n    }\\r\\n    payHardworker(totalRewards);\\r\\n  }\\r\\n\\r\\n  /// @notice Claim pending rewards for ids trying to avoid tax\\r\\n  function claimTaxTheft(uint256[] memory ids) external whenNotPaused {\\r\\n    uint256 totalRewards = 0;\\r\\n    uint256 collectionBonus = getCollectionsBonus(msg.sender);\\r\\n    bool[] memory res = randomBoolArray(ids.length);\\r\\n\\r\\n    for (uint256 i; i < ids.length; i++) {\\r\\n      require(_depositedIds[msg.sender].contains(ids[i]), \\\"Query for a token you don't own\\\");\\r\\n      uint256 timestamp = _depositedTimestamps[ids[i]];\\r\\n      uint256 timeBonus = getTimeBonus(ids[i]);\\r\\n\\r\\n      _depositedTimestamps[ids[i]] = block.timestamp;\\r\\n      uint256 rewards = (_rewards(timestamp) * (1000 + collectionBonus + timeBonus)) / 1000;\\r\\n\\r\\n      if (res[i]) {\\r\\n        // TaxTheftSuccessful : no tax + bonus hardworkerTax\\r\\n        uint256 bonux = (rewards * hardworkerTax) / 1000;\\r\\n        uint256 total = rewards + bonux;\\r\\n        totalRewards += total;\\r\\n        emit TaxTheftSuccessful(msg.sender, ids[i], total, bonux);\\r\\n      } else {\\r\\n        //TaxTheftFail : tax is increased !\\r\\n        uint256 malux = (rewards * taxtheftTax) / 1000;\\r\\n        uint256 total = rewards - malux;\\r\\n        totalRewards += total;\\r\\n        emit TaxTheftFail(msg.sender, ids[i], total, malux);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    rewardToken.transfer(msg.sender, totalRewards); //send rewards\\r\\n  }\\r\\n\\r\\n  function payHardworker(uint256 totalRewards) internal {\\r\\n    uint256 taxed = (totalRewards * hardworkerTax) / 1000;\\r\\n    uint256 pay = totalRewards - taxed;\\r\\n\\r\\n    rewardToken.burnFrom(address(this), taxed); //burn taxed\\r\\n    rewardToken.transfer(msg.sender, pay); //send rewards\\r\\n\\r\\n    emit HardWorkerTaxed(msg.sender, taxed);\\r\\n    emit HardWorkerPaid(msg.sender, pay);\\r\\n  }\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                                Bonus Logic                                */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Calculate time bonus for a stakingToken.\\r\\n  function getTimeBonus(uint256 id) public view returns (uint256) {\\r\\n    if (_initialDepositedTimestamps[id] == 0) return 0;\\r\\n    uint256 stakingDuration = block.timestamp - _initialDepositedTimestamps[id];\\r\\n    if (stakingDuration > 270 days) return 300;\\r\\n    if (stakingDuration > 180 days) return 200;\\r\\n    if (stakingDuration > 90 days) return 100;\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate Collections Bonus for given account.\\r\\n  function getCollectionsBonus(address account) public view returns (uint256) {\\r\\n    uint256 spookiesBalance = spookiesToken.balanceOf(account);\\r\\n    uint256 dogesBalance = dogesToken.balanceOf(account);\\r\\n\\r\\n    return getSpookiesBonus(spookiesBalance) + getDogesBonus(dogesBalance);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate Spookies Bonus for given account.\\r\\n  function getSpookiesBonus(uint256 balance) public pure returns (uint256) {\\r\\n    if (balance > 15) return 69;\\r\\n    if (balance > 8) return 50;\\r\\n    if (balance > 6) return 40;\\r\\n    if (balance > 4) return 30;\\r\\n    if (balance > 2) return 20;\\r\\n    if (balance > 0) return 10;\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate Doges Bonus for given account.\\r\\n  function getDogesBonus(uint256 balance) public pure returns (uint256) {\\r\\n    if (balance > 19) return 69;\\r\\n    if (balance > 12) return 50;\\r\\n    if (balance > 9) return 40;\\r\\n    if (balance > 6) return 30;\\r\\n    if (balance > 3) return 20;\\r\\n    if (balance > 0) return 10;\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                      Early Withdraw Penality                              */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Withdraw tokens with `ids` and claim their pending rewards.\\r\\n  function getEarlyWithdrawPenalty(uint256[] memory ids) public view returns (uint256) {\\r\\n    uint256 totalPenality;\\r\\n    for (uint256 i; i < ids.length; i++) {\\r\\n      uint256 stakingDuration = block.timestamp - _initialDepositedTimestamps[ids[i]];\\r\\n      if (stakingDuration < minStakingPeriod) totalPenality += earlyWithdrawPenalty;\\r\\n    }\\r\\n    return totalPenality;\\r\\n  }\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                   Staking Variables Setters                                */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Set the new earlyWithdrawPenalty\\r\\n  /// @param newEarlyWithdrawPenalty In FRY\\r\\n  function setEarlyWithdrawPenalty(uint128 newEarlyWithdrawPenalty) external onlyOwner {\\r\\n    earlyWithdrawPenalty = newEarlyWithdrawPenalty;\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new minStakingPeriod\\r\\n  /// @param newMinStakingPeriod In seconds\\r\\n  function setMinStakingPeriod(uint64 newMinStakingPeriod) external onlyOwner {\\r\\n    minStakingPeriod = newMinStakingPeriod;\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new hardworkerTax\\r\\n  /// @param newHardworkerTax (ex: 69 --> 6.9%)\\r\\n  function setHardworkerTax(uint32 newHardworkerTax) external onlyOwner {\\r\\n    hardworkerTax = newHardworkerTax;\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new taxtheftTax\\r\\n  /// @param newTaxtheftTax (ex: 169 --> 16.9%)\\r\\n  function setTaxtheftTax(uint32 newTaxtheftTax) external onlyOwner {\\r\\n    taxtheftTax = newTaxtheftTax;\\r\\n  }\\r\\n\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n  /*                                 Owner Logic                                */\\r\\n  /* -------------------------------------------------------------------------- */\\r\\n\\r\\n  /// @notice Set the new token rewards rate.\\r\\n  /// @param newRate Emission rate in wei.\\r\\n  function setRate(uint256 newRate) external onlyOwner {\\r\\n    rate = newRate;\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new rewards end time.\\r\\n  /// @param newEndTime End timestamp.\\r\\n  function setEndTime(uint256 newEndTime) external onlyOwner {\\r\\n    require(newEndTime > block.timestamp, \\\"End time must be greater than now\\\");\\r\\n    endTime = newEndTime;\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new staking token contract address.\\r\\n  /// @param newStakingToken Staking token address.\\r\\n  function setStakingToken(address newStakingToken) external onlyOwner {\\r\\n    stakingToken = IERC721(newStakingToken);\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new reward token contract address.\\r\\n  /// @param newRewardToken Rewards token address.\\r\\n  function setRewardToken(address newRewardToken) external onlyOwner {\\r\\n    rewardToken = IERC20Burnable(newRewardToken);\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new spookies token contract address.\\r\\n  /// @param newSpookiesToken Staking token address.\\r\\n  function setSpookiesToken(address newSpookiesToken) external onlyOwner {\\r\\n    spookiesToken = IERC721(newSpookiesToken);\\r\\n  }\\r\\n\\r\\n  /// @notice Set the new FFD token contract address.\\r\\n  /// @param newDogesToken Staking token address.\\r\\n  function setDogesToken(address newDogesToken) external onlyOwner {\\r\\n    spookiesToken = IERC721(newDogesToken);\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraw rewardToken in contract\\r\\n  function withdrawRewardToken() external onlyOwner {\\r\\n    uint256 balance = rewardToken.balanceOf(address(this));\\r\\n    rewardToken.transferFrom(address(this), msg.sender, balance);\\r\\n  }\\r\\n\\r\\n  /// @notice Toggle if the contract is paused.\\r\\n  function togglePaused() external onlyOwner {\\r\\n    if (paused()) _unpause();\\r\\n    else _pause();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Burnable is IERC20 {\\r\\n  function burn(address from, uint256 amount) external;\\r\\n\\r\\n  function burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/BasicRNGUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/// @title BasicRNGUpgradeable Pseudo Random Generation\\r\\nabstract contract BasicRNGUpgradeable is Initializable {\\r\\n  /// @notice nonces\\r\\n  uint256 private _nonces;\\r\\n\\r\\n  ///@notice generate 'random' bytes\\r\\n  function randomBytes() internal returns (bytes32) {\\r\\n    return keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, _nonces++));\\r\\n  }\\r\\n\\r\\n  ///@notice generate a 'random' number < mod\\r\\n  function random(uint256 mod) internal returns (uint256) {\\r\\n    return uint256(randomBytes()) % mod;\\r\\n  }\\r\\n\\r\\n  ///@notice generate a 'random' array of bool of defined size\\r\\n  function randomBoolArray(uint256 size) internal returns (bool[] memory output) {\\r\\n    require(size <= 256, \\\"Exceed max size : 256\\\");\\r\\n    output = new bool[](size);\\r\\n    uint256 rand = uint256(randomBytes());\\r\\n    for (uint256 i; i < size; i++) output[i] = (rand >> i) & 1 == 1;\\r\\n  }\\r\\n\\r\\n  function __BasicRNG_init() internal onlyInitializing {\\r\\n    __BasicRNG_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __BasicRNG_init_unchained() internal onlyInitializing {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HardWorkerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HardWorkerTaxed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"TaxTheftFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"TaxTheftSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimTaxTheft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogesToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawPenalty\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCollectionsBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getDogesBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getEarlyWithdrawPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getSpookiesBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTimeBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardworkerTax\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"initialDepositTimestampsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"initialDepositTimestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSpookiesToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDogesToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"newEarlyWithdrawPenalty\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"newMinStakingPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"newHardworkerTax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"newTaxtheftTax\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDogesToken\",\"type\":\"address\"}],\"name\":\"setDogesToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newEarlyWithdrawPenalty\",\"type\":\"uint128\"}],\"name\":\"setEarlyWithdrawPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newHardworkerTax\",\"type\":\"uint32\"}],\"name\":\"setHardworkerTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newMinStakingPeriod\",\"type\":\"uint64\"}],\"name\":\"setMinStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSpookiesToken\",\"type\":\"address\"}],\"name\":\"setSpookiesToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newTaxtheftTax\",\"type\":\"uint32\"}],\"name\":\"setTaxtheftTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spookiesToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxtheftTax\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FastFoodFrensFryVault", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}