{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n/**\r\n* @title -UintCompressor- v0.1.9\r\n* \u250c\u252c\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u252c\u2510   \u2566\u2566 \u2566\u2554\u2550\u2557\u2554\u2566\u2557  \u250c\u2500\u2510\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2510\u250c\u250c\u252c\u2510\u250c\u2500\u2510\r\n*  \u2502 \u251c\u2524 \u251c\u2500\u2524\u2502\u2502\u2502   \u2551\u2551 \u2551\u255a\u2550\u2557 \u2551   \u251c\u2500\u2518\u251c\u252c\u2518\u251c\u2524 \u2514\u2500\u2510\u251c\u2524 \u2502\u2502\u2502 \u2502 \u2514\u2500\u2510\r\n*  \u2534 \u2514\u2500\u2518\u2534 \u2534\u2534 \u2534  \u255a\u255d\u255a\u2550\u255d\u255a\u2550\u255d \u2569   \u2534  \u2534\u2514\u2500\u2514\u2500\u2518\u2514\u2500\u2518\u2514\u2500\u2518\u2518\u2514\u2518 \u2534 \u2514\u2500\u2518\r\n*                                  _____                      _____\r\n*                                 (, /     /)       /) /)    (, /      /)          /)\r\n*          \u250c\u2500\u2510                      /   _ (/_      // //       /  _   // _   __  _(/\r\n*          \u251c\u2500\u2524                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\r\n*          \u2534 \u2534                /   /          .-/ _____   (__ /                               \r\n*                            (__ /          (_/ (, /                                      /)\u2122 \r\n*                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\r\n* \u250c\u2500\u2510\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u252c\u2510\u252c \u252c\u250c\u2500\u2510\u250c\u252c\u2510                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\r\n* \u251c\u2500\u2518\u251c\u252c\u2518\u2502 \u2502 \u2502\u2502\u2502 \u2502\u2502   \u2502                      (__ /              .-/  \u00a9 Jekyll Island Inc. 2018\r\n* \u2534  \u2534\u2514\u2500\u2514\u2500\u2518\u2500\u2534\u2518\u2514\u2500\u2518\u2514\u2500\u2518 \u2534                                        (_/\r\n*    _  _   __   __ _  ____     ___   __   _  _  ____  ____  ____  ____  ____   __   ____ \r\n*===/ )( \\ (  ) (  ( \\(_  _)===/ __) /  \\ ( \\/ )(  _ \\(  _ \\(  __)/ ___)/ ___) /  \\ (  _ \\===*\r\n*   ) \\/ (  )(  /    /  )(    ( (__ (  O )/ \\/ \\ ) __/ )   / ) _) \\___ \\\\___ \\(  O ) )   /\r\n*===\\____/ (__) \\_)__) (__)====\\___) \\__/ \\_)(_/(__)  (__\\_)(____)(____/(____/ \\__/ (__\\_)===*\r\n*\r\n* \u2554\u2550\u2557\u250c\u2500\u2510\u250c\u2510\u250c\u250c\u252c\u2510\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u252c\u2510  \u2554\u2550\u2557\u250c\u2500\u2510\u250c\u252c\u2510\u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n* \u2551  \u2502 \u2502\u2502\u2502\u2502 \u2502 \u251c\u252c\u2518\u251c\u2500\u2524\u2502   \u2502   \u2551  \u2502 \u2502 \u2502\u2502\u251c\u2524  \u2502 Inventor \u2502\r\n* \u255a\u2550\u255d\u2514\u2500\u2518\u2518\u2514\u2518 \u2534 \u2534\u2514\u2500\u2534 \u2534\u2514\u2500\u2518 \u2534   \u255a\u2550\u255d\u2514\u2500\u2518\u2500\u2534\u2518\u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n*/\r\n\r\nlibrary UintCompressor {\r\n    using SafeMath for *;\r\n    \r\n    function insert(uint256 _var, uint256 _include, uint256 _start, uint256 _end)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        // check conditions \r\n        require(_end < 77 && _start < 77, \"start/end must be less than 77\");\r\n        require(_end >= _start, \"end must be >= start\");\r\n        \r\n        // format our start/end points\r\n        _end = exponent(_end).mul(10);\r\n        _start = exponent(_start);\r\n        \r\n        // check that the include data fits into its segment \r\n        require(_include < (_end / _start));\r\n        \r\n        // build middle\r\n        if (_include > 0)\r\n            _include = _include.mul(_start);\r\n        \r\n        return((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)));\r\n    }\r\n    \r\n    function extract(uint256 _input, uint256 _start, uint256 _end)\r\n\t    internal\r\n\t    pure\r\n\t    returns(uint256)\r\n    {\r\n        // check conditions\r\n        require(_end < 77 && _start < 77, \"start/end must be less than 77\");\r\n        require(_end >= _start, \"end must be >= start\");\r\n        \r\n        // format our start/end points\r\n        _end = exponent(_end).mul(10);\r\n        _start = exponent(_start);\r\n        \r\n        // return requested section\r\n        return((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start);\r\n    }\r\n    \r\n    function exponent(uint256 _position)\r\n        private\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return((10).pwr(_position));\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}", "ABI": "[]", "ContractName": "UintCompressor", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cb85dd29731e38c1a20670a8c5a03153f7f1aff2b7d24f0e75955ccb0d448b1d"}]}