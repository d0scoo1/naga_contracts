{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/minting.sol\": {\r\n      \"content\": \"import \\\"./VerifySignature.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ninterface Minimalmint {\\n    function mintafterverification(\\n        uint256 value1,\\n        uint256 value2,\\n        uint256 colorpointer,\\n        uint256 tokenid,\\n        string memory rtimetamp\\n    ) external;\\n}\\n\\ncontract Minting is VerifySignature, Ownable {\\n    Minimalmint minter;\\n    address internal dataprovider;\\n    uint256 public nonce;\\n    uint256 public constant mint_price = 150000000000000000 wei;\\n\\n    address public currentcurator;\\n    address public terra0multisig;\\n    mapping(address => curator) public curators;\\n\\n    uint256 public maxnonce = 2001;\\n    uint256[2] public temprange = [19000, 23000];\\n    uint256[2] public moistrange = [70000, 80000];\\n\\n    uint256 public timelimit = 2200;\\n    uint256 public artistmintcounter = 15;\\n\\n    struct curator {\\n        uint256 percentage;\\n        uint256 colorandlocationpointer;\\n        bool curatorwhitelist;\\n        uint256 curatorshares;\\n    }\\n\\n    constructor(\\n        address _dataprovider,\\n        address _terra0multisig,\\n        address _erc721\\n    ) {\\n        dataprovider = _dataprovider;\\n        terra0multisig = _terra0multisig;\\n        nonce = 0;\\n        maxnonce = 1601;\\n        timelimit = 2200;\\n        minter = Minimalmint(_erc721);\\n\\n    }\\n\\n    function checkrange(\\n        uint256 value,\\n        uint256 downrange,\\n        uint256 upperrange\\n    ) public pure returns (bool pass) {\\n        bool down = value >= downrange;\\n        bool up = value <= upperrange;\\n        return (bool(down && up));\\n    }\\n\\n    function artistmint(\\n        uint256 value1,\\n        uint256 value2,\\n        uint256 _nonce,\\n        string memory htimestamp,\\n        uint256 colorandlocationpointer\\n    ) external onlyOwner {\\n        require(_nonce < maxnonce, \\\"Max number of tokens minted\\\");\\n        require(currentcurator != address(0), \\\"No curator set\\\");\\n\\n        require(\\n            checkrange(value1, moistrange[0], moistrange[1]) == true,\\n            \\\"Moisture range out of bounds\\\"\\n        );\\n        require(\\n            checkrange(value2, temprange[0], temprange[1]) == true,\\n            \\\"Temperature range out of bounds\\\"\\n        );\\n        require(artistmintcounter > 0);\\n        artistmintcounter -= 1;\\n        minter.mintafterverification(\\n            value1,\\n            value2,\\n            colorandlocationpointer,\\n            _nonce,\\n            htimestamp\\n        );\\n        nonce = _nonce;\\n    }\\n\\n    function mintwithSignedData(\\n        address signer,\\n        uint256 value1,\\n        uint256 value2,\\n        uint256 _nonce,\\n        uint256 timestamp,\\n        string memory htimestamp,\\n        bytes memory signature\\n    ) external payable {\\n        require(\\n            verify(\\n                signer,\\n                value1,\\n                value2,\\n                _nonce,\\n                timestamp,\\n                htimestamp,\\n                signature\\n            ) == true,\\n            \\\"Wrong signature\\\"\\n        );\\n        require(signer == dataprovider, \\\"Signer is not dataprovider\\\");\\n        require(_nonce > nonce, \\\"Datapacket already minted\\\");\\n        uint256 latest_date = block.timestamp - timelimit;\\n        require(timestamp > latest_date, \\\"Datapacket too old\\\");\\n        require(msg.value >= mint_price, \\\"Insufficient payment\\\");\\n        require(currentcurator != address(0), \\\"No curator set\\\");\\n        require(_nonce < maxnonce, \\\"Max number tokens minted\\\");\\n        require(\\n            checkrange(value1, moistrange[0], moistrange[1]) == true,\\n            \\\"Moisture range out of bounds\\\"\\n        );\\n        require(\\n            checkrange(value2, temprange[0], temprange[1]) == true,\\n            \\\"Temperature range out of bounds\\\"\\n        );\\n        nonce = _nonce;\\n        minter.mintafterverification(\\n            value1,\\n            value2,\\n            curators[currentcurator].colorandlocationpointer,\\n            _nonce,\\n            htimestamp\\n        );\\n        curators[currentcurator].curatorshares =\\n            curators[currentcurator].curatorshares +\\n            (mint_price / curators[currentcurator].percentage);\\n        uint256 terra0value = mint_price -\\n            (mint_price / curators[currentcurator].percentage);\\n        (bool sent, ) = payable(terra0multisig).call{value: terra0value}(\\\"\\\");\\n        require(sent, \\\"Transfer failed.\\\");\\n    }\\n\\n    function setcurator(\\n        address _curator,\\n        uint256 percentage,\\n        uint256 colorandlocationpointer\\n    ) external onlyOwner {\\n        currentcurator = _curator;\\n        curators[currentcurator].curatorwhitelist = false;\\n        curators[currentcurator]\\n            .colorandlocationpointer = colorandlocationpointer;\\n        curators[currentcurator].percentage = percentage;\\n    }\\n\\n    function whitelistwithdrawcurator(address _curator) external onlyOwner {\\n        curators[_curator].curatorwhitelist = true;\\n    }\\n\\n    function withdraw() external {\\n        require(\\n            curators[msg.sender].curatorwhitelist == true,\\n            \\\"Exhibition still running\\\"\\n        );\\n        uint256 share = curators[msg.sender].curatorshares;\\n        curators[msg.sender].curatorshares = 0;\\n        (bool sent, ) = msg.sender.call{value: share}(\\\"\\\");\\n        require(sent, \\\"Transfer failed.\\\");\\n    }\\n\\n    function changetimelimit(uint256 newtimelimit) external onlyOwner {\\n        timelimit = newtimelimit;\\n    }\\n\\n    function changevaluerange(\\n        uint256 temprange0,\\n        uint256 temprange1,\\n        uint256 moistrange0,\\n        uint256 moistrange1\\n    ) public onlyOwner {\\n        temprange[0] = temprange0;\\n        temprange[1] = temprange1;\\n        moistrange[0] = moistrange0;\\n        moistrange[1] = moistrange1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VerifySignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VerifySignature {\\n\\n    function getMessageHash(\\n        uint256 value1,\\n        uint256 value2,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        string memory htimestamp\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(value1, value2, nonce, timestamp, htimestamp)\\n            );\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function verify(\\n        address _signer,\\n        uint256 _value1,\\n        uint256 _value2,\\n        uint256 _nonce,\\n        uint256 _timestamp,\\n        string memory htimestamp,\\n        bytes memory signature\\n    ) public pure returns (bool) {\\n        bytes32 messageHash = getMessageHash(\\n            _value1,\\n            _value2,\\n            _nonce,\\n            _timestamp,\\n            htimestamp\\n        );\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        public\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataprovider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_terra0multisig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"htimestamp\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorandlocationpointer\",\"type\":\"uint256\"}],\"name\":\"artistmint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistmintcounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtimelimit\",\"type\":\"uint256\"}],\"name\":\"changetimelimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"temprange0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"temprange1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moistrange0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moistrange1\",\"type\":\"uint256\"}],\"name\":\"changevaluerange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downrange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperrange\",\"type\":\"uint256\"}],\"name\":\"checkrange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colorandlocationpointer\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"curatorwhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"curatorshares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentcurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"htimestamp\",\"type\":\"string\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxnonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"htimestamp\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintwithSignedData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moistrange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colorandlocationpointer\",\"type\":\"uint256\"}],\"name\":\"setcurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"temprange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terra0multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"htimestamp\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"}],\"name\":\"whitelistwithdrawcurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Minting", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009777f6c5044d4ebf0a7fea82be090c6a4a594e3800000000000000000000000070e095fb47e10e696bf40d759b3656d273c76ddc000000000000000000000000db7805468c975d7157c02b44d43e3ad2d549f664", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}