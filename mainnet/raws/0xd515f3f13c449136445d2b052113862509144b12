{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\n    abstract contract dex {\r\n        function name() external pure virtual returns (string memory);\r\n        function symbol() external pure virtual returns (string memory);\r\n        function decimals() external pure virtual returns (uint8);\r\n        function totalSupply() external view virtual returns (uint);   \r\n        function factory() external view virtual returns (address);\r\n        function getPair(address tokenA, address tokenB) external view virtual returns (address pair);\r\n        function token0() external view virtual returns (address);\r\n        function token1() external view virtual returns (address);\r\n        function getReserves() external view virtual returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);       \r\n    }\r\n\r\ncontract dexinfo {\r\n    struct dexStruct {\r\n        address factory;\r\n        address pair;\r\n        string dexName;\r\n        address token0;\r\n        address token1;\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 blockTimestampLast;\r\n        string token0Name;\r\n        string token0Symbol;\r\n        uint256 token0Decimal;\r\n        uint256 token0Supply;\r\n        string token1Name;\r\n        string token1Symbol;\r\n        uint256 token1Decimal;\r\n        uint256 token1Supply;\r\n    }\r\n\r\n    function getInfo(address add, address token0, address token1, uint8 method) public view returns (dexStruct memory){\r\n        dexStruct memory dexInfo;\r\n        if(method == 0){ //router\r\n            dexInfo.factory = dex(add).factory();\r\n            dexInfo.pair = dex(dexInfo.factory).getPair(token0, token1);\r\n        } else if(method == 1){ // factory\r\n            dexInfo.factory = add;\r\n            dexInfo.pair = dex(dexInfo.factory).getPair(token0, token1);\r\n        } else if(method == 2){ // pair\r\n            dexInfo.pair = add;\r\n        }\r\n\r\n        dexInfo.dexName = dex(dexInfo.pair).name();\r\n        dexInfo.token0 = dex(dexInfo.pair).token0();\r\n        dexInfo.token1 = dex(dexInfo.pair).token1();\r\n        (dexInfo.reserve0, dexInfo.reserve1, dexInfo.blockTimestampLast) = dex(dexInfo.pair).getReserves();\r\n        dexInfo.token0Name = dex(dexInfo.token0).name();\r\n        dexInfo.token0Symbol = dex(dexInfo.token0).symbol();\r\n        dexInfo.token0Decimal = dex(dexInfo.token0).decimals();\r\n        dexInfo.token0Supply = dex(dexInfo.token0).totalSupply();\r\n        dexInfo.token1Name = dex(dexInfo.token1).name();\r\n        dexInfo.token1Symbol = dex(dexInfo.token1).symbol();\r\n        dexInfo.token1Decimal = dex(dexInfo.token1).decimals();\r\n        dexInfo.token1Supply = dex(dexInfo.token1).totalSupply();     \r\n\r\n        return dexInfo;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"method\",\"type\":\"uint8\"}],\"name\":\"getInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestampLast\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token0Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token1Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1Decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Supply\",\"type\":\"uint256\"}],\"internalType\":\"struct dexinfo.dexStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "dexinfo", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://459726e93748a2e922fd4d53e89e9ead3bc5a991e614ee594181b66f4831af7c"}]}