{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//////////////////////////////////////////////////////////\r\n//     ____           __                         __     //\r\n//    / __/_ _  ___  / /__  __ ____ _  ___ ___  / /_    //\r\n//   / _//  ' \\/ _ \\/ / _ \\/ // /  ' \\/ -_) _ \\/ __/    //\r\n//  /___/_/_/_/ .__/_/\\___/\\_, /_/_/_/\\__/_//_/\\__/     //\r\n//           /_/          /___/                         //\r\n//     __  ___                                          //\r\n//    /  |/  /__ ____  ___ ____ ____ ____               //\r\n//   / /|_/ / _ `/ _ \\/ _ `/ _ `/ -_) __/               //\r\n//  /_/  /_/\\_,_/_//_/\\_,_/\\_, /\\__/_/                  //\r\n//                        /___/                         //\r\n//    ____           _______        _                   //\r\n//   / __ \\___  ____/ ___/ /  ___ _(_)__                //\r\n//  / /_/ / _ \\/___/ /__/ _ \\/ _ `/ / _ \\               //\r\n//  \\____/_//_/    \\___/_//_/\\_,_/_/_//_/               //\r\n//                                                      //\r\n//   by: 0xInuarashi.eth                                //\r\n//                                                      //\r\n//////////////////////////////////////////////////////////\r\n\r\ninterface IERC20 {\r\n    // balanceOf used to check balance of sender \r\n    function balanceOf(address address_) external view returns (uint256);\r\n\r\n    // transfer used to transfer ERC20s from the contract to the user\r\n    function transfer(address to_, uint256 amount_) external returns (bool); \r\n\r\n    // transferFrom used to transfer msg.sender ERC20s to the contract\r\n    function transferFrom(address from_, address to_, uint256 amount_) external;\r\n}\r\n\r\ncontract EmploymentManagerLive {\r\n\r\n    // On-Chain Trustless Employment\r\n    // Created by: 0xInuarashi || https://twitter.com/0xInuarashi || 0xInuarashi#1234\r\n\r\n    // Events\r\n    event AgreementCreated(address employer_, address benefactor_, address token_, \r\n        uint256 index_, uint256 amount_, uint32 startTimestamp_, uint32 endTimestamp_);\r\n    event ClaimFromAgreement(address employer_, address benefactor_, address token_,\r\n        uint256 index_, uint256 amount_);\r\n\r\n    // Structs\r\n    struct Agreement {\r\n        // SSTORE1\r\n        uint32 startTimestamp; // 4 | 28\r\n        uint32 endTimestamp; // 4 | 24\r\n\r\n        // We're able to store both the employer and benefactor in \r\n        // mapping pointers. Same with token address!\r\n        \r\n        // We use a uint96 which should be sufficient for most\r\n        // balances of Agreements\r\n        // Supports up to: 79228162514264337593543950336\r\n        uint96 deposit; // 12 | 12\r\n        uint96 balance; // 12 | 0\r\n    }\r\n\r\n    // Mappings\r\n    mapping(address => \r\n    mapping(address => \r\n    mapping(address => \r\n    mapping(uint256 => Agreement))))\r\n        public employerToBenefactorToTokenToIndexToAgreement;\r\n\r\n    // Create an Agreement\r\n    function createAgreement(address benefactor_, address token_, uint256 amount_,\r\n    uint256 index_, uint32 startTimestamp_, uint32 endTimestamp_) public {\r\n\r\n        // Make sure that the uint160 version amount_ is within bounds\r\n        require(uint96(amount_) == amount_,\r\n            \"Amount out of bounds!\");\r\n\r\n        // Make sure that the balance at index is 0, which means the Agreement is empty\r\n        require(employerToBenefactorToTokenToIndexToAgreement[msg.sender][benefactor_]\r\n        [token_][index_].balance == 0,\r\n            \"Balance of Agreement at Index != 0!\");\r\n\r\n        // First, transfer the ERC20 to the contract as amount_\r\n        IERC20(token_).transferFrom(msg.sender, address(this), amount_);\r\n\r\n        // After succeded, create an Agreement based on the parameters.\r\n        employerToBenefactorToTokenToIndexToAgreement[msg.sender][benefactor_]\r\n        [token_][index_] = Agreement(\r\n            startTimestamp_, endTimestamp_, uint96(amount_), uint96(amount_));\r\n        \r\n        // Lastly, emit AgreementCreated event\r\n        emit AgreementCreated(msg.sender, benefactor_, token_, amount_, index_,\r\n            startTimestamp_, endTimestamp_);\r\n    }\r\n\r\n    // Claim from Agreement\r\n    function _getClaimableAmount(address employer_, address benefactor_, address token_,\r\n    uint256 index_) public view returns (uint256) {\r\n        // For this function, we return the total claimable amount of the Agreement\r\n        // Store the Agreement into local memory variable\r\n        Agreement memory _Agreement = employerToBenefactorToTokenToIndexToAgreement\r\n            [employer_][benefactor_][token_][index_];\r\n        \r\n        // Then, we calculate the required time units\r\n        uint256 _totalTimeRequired = _Agreement.endTimestamp - _Agreement.startTimestamp;\r\n        uint256 _currentTimeElapsed = block.timestamp > _Agreement.startTimestamp ? \r\n            block.timestamp - _Agreement.startTimestamp : 0;\r\n\r\n        // Next, we calculate the claimed amount\r\n        uint256 _claimedAmount = _Agreement.deposit - _Agreement.balance;\r\n\r\n        // Then, we calculate the claimable amount at current time\r\n        uint256 _totalClaimable = \r\n            // If the current time elapsed is over time required\r\n            // then the entire balance is claimable.\r\n            _currentTimeElapsed >= _totalTimeRequired ? uint256(_Agreement.balance) :\r\n\r\n            // Otherwise, calculate the total claimable based on deposit\r\n            // then subtract the already claimed amount\r\n            (((uint256(_Agreement.deposit)) * _currentTimeElapsed) / _totalTimeRequired)\r\n                - _claimedAmount;\r\n\r\n        // Return the value\r\n        return _totalClaimable;\r\n    }\r\n\r\n    function claimFromAgreement(address employer_, address benefactor_, address token_,\r\n    uint256 index_) public {\r\n        // The claimer must be the benefactor\r\n        require(benefactor_ == msg.sender,\r\n            \"You are not the benefactor!\");\r\n        \r\n        // Calculate the claimable amount\r\n        uint256 _claimableAmount = \r\n            _getClaimableAmount(employer_, benefactor_, token_, index_);\r\n\r\n        // There must be an amount to claim\r\n        require(_claimableAmount > 0,\r\n            \"No claimable balance!\");\r\n\r\n        // Deduct the claimable amount from balance\r\n        employerToBenefactorToTokenToIndexToAgreement\r\n        [employer_][benefactor_][token_][index_].balance -= uint96(_claimableAmount);\r\n\r\n        // Transfer the tokens to the benefactor\r\n        IERC20(token_).transfer(benefactor_, _claimableAmount);\r\n\r\n        emit ClaimFromAgreement(employer_, benefactor_, token_, index_, \r\n        _claimableAmount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTimestamp_\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endTimestamp_\",\"type\":\"uint32\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"ClaimFromAgreement\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"_getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"claimFromAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp_\",\"type\":\"uint32\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"employerToBenefactorToTokenToIndexToAgreement\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"deposit\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EmploymentManagerLive", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e68f38d64700bcd10ff6dfcc806bce171c5ddd0ce39f650519d40add6b83d68e"}]}