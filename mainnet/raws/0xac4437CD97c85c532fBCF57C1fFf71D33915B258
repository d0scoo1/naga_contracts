{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract SimpleLottery {\r\n    IERC20 public usdcContract;\r\n    IERC20 public usdtContract;\r\n    address owner;\r\n    address paymentHolder;\r\n    address feeHolder;\r\n    uint taxPercent;\r\n\r\n    constructor(\r\n        address paymentHolder_,\r\n        address feeHolder_,\r\n        uint taxPercent_\r\n    ) {\r\n        usdcContract = IERC20(0x07865c6E87B9F70255377e024ace6630C1Eaa37F);\r\n        usdtContract = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        owner = msg.sender;\r\n        paymentHolder = paymentHolder_;\r\n        feeHolder = feeHolder_;\r\n        taxPercent = taxPercent_;\r\n    }\r\n\r\n    /// Restricts the access only to the user who deployed the contract.\r\n    modifier restrictToOwner() {\r\n        require(msg.sender == owner, \"Method available only to the user that deployed the contract\");\r\n        _;\r\n    }\r\n\r\n    event paymentAddressTransferred(\r\n        address indexed previousPaymentHolderAddress, \r\n        address indexed newPaymentHolderAddress\r\n    );\r\n\r\n    event feeAddressTransferred(\r\n        address indexed previousFeeHolderAddress, \r\n        address indexed newFeeHolderAddress\r\n    );\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner, \r\n        address indexed newOwner\r\n    );\r\n\r\n    function purchaseTicket(uint _amount) public {\r\n        // amount should be > 0\r\n        require(_amount > 0, \"amount should be > 0\");\r\n        // check allowance\r\n        require(usdcContract.allowance(msg.sender, address(this)) >= _amount, \"Error, too low allowance.\");\r\n        // transfer USDC.\r\n        uint feeAmount = _amount * taxPercent / 100;\r\n        uint paymentAmount = _amount - feeAmount;\r\n        usdcContract.transferFrom(msg.sender, paymentHolder, paymentAmount);\r\n        usdcContract.transferFrom(msg.sender, feeHolder, feeAmount);\r\n    }\r\n\r\n    function sendPayment(uint _amount) public {\r\n        // amount should be > 0\r\n        require(_amount > 0, \"amount should be > 0\");\r\n        // check allowance\r\n        require(usdtContract.allowance(msg.sender, address(this)) >= _amount, \"Error, too low allowance.\");\r\n        // transfer USDT.\r\n        usdtContract.transferFrom(msg.sender, feeHolder, _amount);\r\n    }\r\n\r\n    function setPaymentHolderAddress(address payable newPaymentHolderAddress) public restrictToOwner() {\r\n        require(newPaymentHolderAddress != address(0));\r\n        emit paymentAddressTransferred(paymentHolder, newPaymentHolderAddress);\r\n        paymentHolder = newPaymentHolderAddress;\r\n    }\r\n\r\n    function setFeeHolderAddress(address payable newFeeHolderAddress) public restrictToOwner() {\r\n        require(newFeeHolderAddress != address(0));\r\n        emit feeAddressTransferred(feeHolder, newFeeHolderAddress);\r\n        feeHolder = newFeeHolderAddress;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public restrictToOwner() {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentHolder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeHolder_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taxPercent_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeHolderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeHolderAddress\",\"type\":\"address\"}],\"name\":\"feeAddressTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPaymentHolderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPaymentHolderAddress\",\"type\":\"address\"}],\"name\":\"paymentAddressTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFeeHolderAddress\",\"type\":\"address\"}],\"name\":\"setFeeHolderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPaymentHolderAddress\",\"type\":\"address\"}],\"name\":\"setPaymentHolderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SimpleLottery", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e5602bd26e8e4c505fee8229d6e5ddc9a7126b20000000000000000000000003e5602bd26e8e4c505fee8229d6e5ddc9a7126b20000000000000000000000000000000000000000000000000000000000000005", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f649dd432d463be4e9054ee6b96270c322d7fecdea51c499a10694eae7f5f92"}]}