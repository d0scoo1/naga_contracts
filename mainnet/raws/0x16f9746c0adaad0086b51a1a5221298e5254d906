{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.13;\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\r\nabstract contract Owned {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event OwnerUpdated(address indexed user, address indexed newOwner);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            OWNERSHIP STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n\r\n        emit OwnerUpdated(address(0), _owner);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             OWNERSHIP LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setOwner(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n\r\n        emit OwnerUpdated(msg.sender, newOwner);\r\n    }\r\n}\r\ninterface ICNV is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n}\r\n\r\ncontract RedeemBBT is Owned {\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // EVENTS\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    event Paused(\r\n        bool _paused\r\n    );\r\n\r\n    event Redemption(\r\n        address indexed _from,\r\n        address indexed _who,\r\n        uint256 indexed _amount\r\n    );\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // STATE\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice whether the contract is paused or not\r\n    bool public paused;\r\n    /// @notice address of bbtCNV Token\r\n    address public immutable bbtCNV;\r\n    /// @notice address of CNV Token\r\n    address public immutable CNV;\r\n    /// @notice mapping of how many CNV tokens a bbtCNV holder has redeemed\r\n    mapping(address => uint256) public redeemed;\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // CONSTRUCTOR\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    constructor(\r\n        address _bbtCNV,\r\n        address _CNV\r\n    ) Owned(msg.sender) {\r\n        bbtCNV = _bbtCNV;\r\n        CNV = _CNV;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // ADMIN/MGMT\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    function setPause(bool _paused) external onlyOwner {\r\n        // update paused\r\n        paused = _paused;\r\n\r\n        // emit event because mutable state was updated\r\n        emit Paused(_paused);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // ACTIONS\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice             redeem bbtCNV for CNV following vesting schedule\r\n    /// @param  _amount     amount of CNV to redeem, irrelevant if _max = true\r\n    /// @param  _who        address of bbtCNV holder to redeem\r\n    /// @param  _to         address to which to mint CNV\r\n    /// @param  _max        whether to redeem maximum amount possible\r\n    /// @return amountOut   amount of CNV tokens to be minted to _to\r\n    function redeem(\r\n        uint256 _amount,\r\n        address _who,\r\n        address _to,\r\n        bool _max\r\n    ) external returns (uint256 amountOut) {\r\n        // Make sure the contract isn't paused\r\n        require(!paused, \"PAUSED\");\r\n        // Get user bbtCNV balance, and get amount already redeemed.\r\n        // If already redeemed full balance - revert on \"FULLY_REDEEMED\" since\r\n        // all balance has already been redeemed.\r\n        uint256 bbtCNVBalance = IERC20(bbtCNV).balanceOf(_who);\r\n        uint256 amountRedeemed = redeemed[_who];\r\n        require(bbtCNVBalance > amountRedeemed, \"NONE_LEFT\");\r\n\r\n        // In case of vault calling on behalf of user, check that user has\r\n        // allowed vault to redeem on behalf of user by checking allowance.\r\n        if (_who != msg.sender)\r\n            require(\r\n                IERC20(bbtCNV).allowance(_who,msg.sender) >= bbtCNVBalance,\r\n                \"!ALLOWED\"\r\n            );\r\n\r\n        // Check how much is currently vested for user.\r\n        // Revert if currently no more available to redeem.\r\n        uint256 currentTime = block.timestamp;\r\n        require(currentTime >= 1654041600,\"!VESTING\");\r\n        uint256 amountVested;\r\n        if (currentTime > 1679961600) {\r\n            amountVested = bbtCNVBalance;\r\n        } else {\r\n            uint256 vpct = vestedPercent(currentTime);\r\n            amountVested = bbtCNVBalance * vpct / 1e18;\r\n        }\r\n        require(amountVested > amountRedeemed, \"NONE_LEFT\");\r\n\r\n        // Calculate amount redeemable as the amountVested minus the amount that\r\n        // has previously been redeemed.\r\n        // If _max was not selected and thus a specified amount is to be\r\n        // redeemed, ensure this amount doesn't exceed amountRedeemable.\r\n        uint256 amountRedeemable = amountVested - amountRedeemed;\r\n        amountOut = amountRedeemable;\r\n        if (!_max) {\r\n            require(amountRedeemable >= _amount,\"EXCEEDS\");\r\n            amountOut = _amount;\r\n        }\r\n\r\n        // Update state to reflect redemption.\r\n        redeemed[_who] = amountRedeemed + amountOut;\r\n\r\n        // transfer 'amountOut' of CNV to '_to'\r\n        ICNV(CNV).transfer(_to, amountOut);\r\n\r\n        emit Redemption(\r\n            msg.sender,\r\n            _who,\r\n            amountOut\r\n        );\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // VIEW\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice         to view how much a holder has redeemable\r\n    /// @param  _who    bbtHolder address\r\n    /// @return         amount redeemable\r\n    function redeemable(\r\n        address _who\r\n    ) external view returns (uint256) {\r\n        uint256 bbtCNVBalance = IERC20(bbtCNV).balanceOf(_who);\r\n        uint256 amountRedeemed = redeemed[_who];\r\n        if (bbtCNVBalance == amountRedeemed) return 0;\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        if (currentTime < 1654041600) return 0;\r\n\r\n        uint256 amountVested;\r\n        if (currentTime > 1679961600) {\r\n            amountVested = bbtCNVBalance;\r\n        } else {\r\n            uint256 vpct = vestedPercent(currentTime);\r\n            amountVested = bbtCNVBalance * vpct / 1e18;\r\n        }\r\n        if (amountVested <= amountRedeemed) return 0;\r\n\r\n        return amountVested - amountRedeemed;\r\n    }\r\n\r\n    /// @notice         returns the percent of holdings vested for a given point\r\n    ///                 in time.\r\n    /// @param  _time   point in time\r\n    /// @return vpct    percent of holdings vested\r\n    function vestedPercent(\r\n        uint256 _time\r\n    ) public pure returns(uint256 vpct) {\r\n        // Hardcode variables in method to avoid state reads and save gas.\r\n        //\r\n        // vestingTimeStart\r\n        // - time vesting begins: 1654041600 (Wed Jun 01 2022 00:00:00 GMT+0000)\r\n        //\r\n        // vestingTimeLength\r\n        // - duration of vesting: 25920000 (10 30-day months)\r\n        //\r\n        // vestingAmountStart\r\n        // - vesting begins at 2%\r\n        //\r\n        // vestingAmountLength\r\n        // - vesting grows to 100%, thus has a length of 98\r\n\r\n        uint256 vestingTimeStart    = 1654041600;\r\n        uint256 vestingTimeLength   = 25920000;\r\n        uint256 vestingAmountStart  = 2e16;\r\n        uint256 vestingAmountLength = 98e16;\r\n\r\n        uint256 pctOf = _percentOf(vestingTimeStart, _time, vestingTimeLength);\r\n        vpct = _linearMapping(vestingAmountStart, pctOf, vestingAmountLength);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // INTERNAL\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice             returns the elapsed percentage of a point within\r\n    ///                     a given range\r\n    /// @param  _start      starting point\r\n    /// @param  _point      current point\r\n    /// @param  _length     lenght\r\n    /// @return elapsedPct  percent from _start\r\n    function _percentOf(\r\n        uint256 _start,\r\n        uint256 _point,\r\n        uint256 _length\r\n    ) internal pure returns (uint256 elapsedPct) {\r\n        uint256 elapsed             = _point - _start;\r\n                elapsedPct          = elapsed * 1e18 / _length;\r\n    }\r\n\r\n    /// @notice             linearly maps a percentage point to a range\r\n    /// @param  _start      starting point\r\n    /// @param  _pct        percentage point\r\n    /// @param  _length     lenght\r\n    /// @return point       point\r\n    function _linearMapping(\r\n        uint256 _start,\r\n        uint256 _pct,\r\n        uint256 _length\r\n    ) internal pure returns(uint256 point) {\r\n        uint256 elapsed             = _length * _pct / 1e18;\r\n                point               = _start + elapsed;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bbtCNV\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CNV\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CNV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbtCNV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_max\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"vestedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vpct\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "RedeemBBT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000012a0592c154d552c410030e724b2ea00000000000000000000000000000000007a58f5f58e697e51ab0357bc9e260a04", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e85276942392cbc390a45038d1b3ce7f665246e0ccf9a7de582512723c6dccca"}]}