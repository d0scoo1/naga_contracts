{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"DeriBurnerETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\n\\r\\ncontract DeriBurnerETH {\\r\\n\\r\\n    address public constant deri = 0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9;\\r\\n    address public constant deadlock = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public constant wormholeETH = 0x6874640cC849153Cb3402D193C33c416972159Ce;\\r\\n\\r\\n    function burnDeri() public {\\r\\n        uint256 balance = IERC20(deri).balanceOf(address(this));\\r\\n        if (balance != 0) {\\r\\n            IERC20(deri).transfer(deadlock, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimAndBurnDeri(\\r\\n        uint256 amount,\\r\\n        uint256 fromChainId,\\r\\n        address fromWormhole,\\r\\n        uint256 fromNonce,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        IWormhole(wormholeETH).claim(amount, fromChainId, fromWormhole, fromNonce, v, r, s);\\r\\n        burnDeri();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IWormhole {\\r\\n    function claim(uint256 amount, uint256 fromChainId, address fromWormhole, uint256 fromNonce, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"name\":\"burnDeri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claimAndBurnDeri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deri\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeriBurnerETH", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://811709387f890617d97e2f10cf8fdba8e1812a3c1a5762bc9885fcff3cd0377c"}]}