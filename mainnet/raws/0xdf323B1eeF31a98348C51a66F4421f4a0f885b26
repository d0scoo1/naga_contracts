{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Oil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// Inspired by Solmate: https://github.com/Rari-Capital/solmate\\n/// Developed by 0xBasset\\n\\n\\ncontract Oil {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public impl_;\\n    address public ruler;\\n    address public treasury;\\n    address public uniPair;\\n    address public weth;\\n\\n    uint256 public totalSupply;\\n    uint256 public startingTime;\\n    uint256 public baseTax;\\n    uint256 public minSwap;\\n\\n    bool public paused;\\n    bool public swapping;\\n\\n    ERC721Like public habibi;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    mapping(address => bool) public isMinter;\\n\\n    mapping(uint256 => uint256) public claims;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"OIL\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"OIL\\\";\\n    }\\n    \\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    \\n    function initialize(address habibi_,address treasury_, address uniPair_, address weth_) external { \\n        require(msg.sender == ruler);\\n       \\n        ruler    = msg.sender;  \\n        treasury = treasury_;\\n        uniPair  = uniPair_;\\n        weth     = weth_;\\n\\n        startingTime = 1640707200;\\n        baseTax      = 10_000; // 10% in basis point\\n        habibi       = ERC721Like(habibi_);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n\\n        _transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CLAIM\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function claim(uint256 id_) public {\\n        require(!paused, \\\"claims are paused\\\");\\n\\n        address owner = habibi.ownerOf(id_);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n\\n        uint256 amount = _claimable(id_, owner);\\n        \\n        claims[id_] = block.timestamp;\\n\\n        _mint(owner, amount);\\n    }\\n\\n    function claimMany(uint256[] calldata ids_) external {\\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            claim(ids_[i]);\\n        }\\n    }\\n\\n    function claimable(uint256 id) public view returns (uint256) {\\n        return _claimable(id, habibi.ownerOf(id));\\n    }\\n\\n    function _claimable(uint256 id_, address owner_) internal view returns (uint256 amount) {\\n        uint256 lastClaim = claims[id_];\\n        uint256 diff      = block.timestamp - (lastClaim == 0 ? startingTime : lastClaim);\\n        uint256 balance   = habibi.balanceOf(owner_);\\n        uint256 base      = diff * 1000 ether / 1 days;\\n        \\n        amount    = base + ((_getBonusPct(id_, balance) * base * 1e16) / 1e18);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            OIL PRIVILEGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mint(address to, uint256 value) external {\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO MINT\\\");\\n        _mint(to, value);\\n    }\\n\\n    function burn(address from, uint256 value) external {\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO BURN\\\");\\n        _burn(from, value);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         Ruler Function\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setMinter(address minter, bool status) external {\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\n\\n        isMinter[minter] = status;\\n    }\\n\\n    function setRuler(address ruler_) external {\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\n\\n        ruler = ruler_;\\n    }\\n\\n    function setPaused(bool paused_) external {\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\n\\n        paused = paused_;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n        \\n        uint256 tax = 0;\\n        if ((to == uniPair || from == uniPair) && !swapping && balanceOf[uniPair] != 0) {\\n            tax = value * 10_000 / 100_000;\\n            \\n            if (to == uniPair) {\\n                swapping = true;\\n                _doSwap(tax);\\n                swapping = false;\\n            } else {\\n                balanceOf[treasury] += tax;\\n                emit Transfer(uniPair, treasury, tax);\\n            }\\n        }\\n\\n        balanceOf[from] -= value;\\n        balanceOf[to]   += value - tax;\\n\\n        emit Transfer(from, to, value - tax);\\n    }\\n\\n    function _doSwap(uint256 amt) internal {\\n        UniPairLike pair = UniPairLike(uniPair);\\n        \\n        (uint256 amount0Out, uint256 amount1Out) = (0,0);\\n\\n        uint256 wethBal    = ERC721Like(weth).balanceOf(uniPair);\\n        uint256 amtWithFee = amt * 997;\\n        uint256 amtOut     = (wethBal * amtWithFee) / (balanceOf[uniPair] * 1000 + amtWithFee);\\n\\n        if (amtOut < minSwap) {\\n            // If it's too little amt, we just burn it\\n            totalSupply -= amt;\\n            emit Transfer(uniPair, address(0), amt);\\n            return;\\n        }\\n\\n        if (pair.token0() == address(this)) {\\n            amount1Out = amtOut;\\n        } else {\\n            amount0Out = amtOut;\\n        }\\n\\n        balanceOf[uniPair] += amt;\\n        pair.swap(amount0Out, amount1Out, treasury, new bytes(0));\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n\\n        // This is safe because a user won't ever\\n        // have a balance larger than totalSupply!\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _getBonusPct(uint256 id_, uint256 balance) internal pure returns (uint256 bonus) {\\n        if (_isAnimated(id_)) return 500;\\n\\n        if (balance < 5) return 0;\\n        if (balance < 10) return 15;\\n        if (balance < 20) return 25;\\n        return 35;\\n    }\\n\\n    function _isAnimated(uint256 id_) internal pure returns(bool animated) {\\n        if ( id_ == 40)   return true;\\n        if ( id_ == 108)  return true;\\n        if ( id_ == 169)  return true;\\n        if ( id_ == 191)  return true;\\n        if ( id_ == 246)  return true;\\n        if ( id_ == 257)  return true;\\n        if ( id_ == 319)  return true;\\n        if ( id_ == 386)  return true;\\n        if ( id_ == 496)  return true;\\n        if ( id_ == 562)  return true;\\n        if ( id_ == 637)  return true;\\n        if ( id_ == 692)  return true;\\n        if ( id_ == 832)  return true;\\n        if ( id_ == 942)  return true;\\n        if ( id_ == 943)  return true;\\n        if ( id_ == 957)  return true;\\n        if ( id_ == 1100) return true;\\n        if ( id_ == 1108) return true;\\n        if ( id_ == 1169) return true;\\n        if ( id_ == 1178) return true;\\n        if ( id_ == 1627) return true;\\n        if ( id_ == 1706) return true;\\n        if ( id_ == 1843) return true;\\n        if ( id_ == 1884) return true;\\n        if ( id_ == 2137) return true;  \\n        if ( id_ == 2158) return true;\\n        if ( id_ == 2165) return true;\\n        if ( id_ == 2214) return true;\\n        if ( id_ == 2232) return true;\\n        if ( id_ == 2238) return true;\\n        if ( id_ == 2508) return true;\\n        if ( id_ == 2629) return true;\\n        if ( id_ == 2863) return true;\\n        if ( id_ == 3055) return true;\\n        if ( id_ == 3073) return true;\\n        if ( id_ == 3280) return true;\\n        if ( id_ == 3297) return true;\\n        if ( id_ == 3322) return true;\\n        if ( id_ == 3327) return true;\\n        if ( id_ == 3361) return true;\\n        if ( id_ == 3411) return true;\\n        if ( id_ == 3605) return true;\\n        if ( id_ == 3639) return true;\\n        if ( id_ == 3774) return true;\\n        if ( id_ == 4250) return true;\\n        if ( id_ == 4267) return true;\\n        if ( id_ == 4302) return true;\\n        if ( id_ == 4362) return true;\\n        if ( id_ == 4382) return true;\\n        if ( id_ == 4397) return true;\\n        if ( id_ == 4675) return true;\\n        if ( id_ == 4707) return true;\\n        if ( id_ == 4863) return true;\\n        return false;\\n    }\\n\\n}\\n\\ninterface ERC721Like {\\n    function balanceOf(address holder_) external view returns(uint256);\\n    function ownerOf(uint256 id_) external view returns(address);\\n}\\n\\ninterface UniPairLike {\\n    function token0() external returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"habibi\",\"outputs\":[{\"internalType\":\"contract ERC721Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"habibi_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPair_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ruler_\",\"type\":\"address\"}],\"name\":\"setRuler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Oil", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}