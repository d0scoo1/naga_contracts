{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/IBoatsVoting.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IBoatsVoting {\r\n  struct TypeVote{\r\n      uint256 finalPrice;\r\n      uint256 priceSum;\r\n      uint256 avg;\r\n      uint16 voters;\r\n      int16 agreeToAvg;\r\n  }\r\n  struct BoatData {\r\n    uint256 vote1;\r\n    uint48 timestampVoted1;\r\n    uint48 timestampVoted2;\r\n    bool vote2;\r\n  }\r\n\r\n    function makeVote1(uint16 tokenId, uint256 vote, uint8 boatState) external;\r\n    function getLastVoteTime(uint8 voteType) external view returns(int);\r\n    function getVoteTimeByDate(uint256 timestamp, uint8 voteType) external view returns (int);\r\n    function setVoteDay1(uint8 newDay) external;\r\n    function setVoteDay2(uint8 newDay) external;\r\n    function setBoatDetails(uint16 idx, BoatData memory data) external;\r\n    function setDurationHours(uint8 newHours) external;\r\n    function getCurrentOnlineVote() external view returns (uint8);\r\n    function getBoatDetails(uint16 idx) external view returns(BoatData memory);\r\n}\r\n// File: contracts/IVoting.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IVotingBoatData {\r\n    function getBoatState(uint16 tokenId) external view returns(uint8);\r\n}\r\n\r\ninterface IVotingBoatNFT {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface IVoting {\r\n    function makeVote1(uint16 tokenId, uint256 vote, uint8 boatState) external ;\r\n    function makeVote2(uint16 tokenId, bool vote, uint8 boatState) external;\r\n    function updatePrice(uint8 boatState) external;\r\n    function getCurrentOnlineVote() external view returns (uint8);\r\n    function getCurrentVoteEndTime() external view returns(int256);\r\n    function getPrice(uint8 boatState) external view returns(uint256);\r\n    function getVoteDetails(uint8 boatState) external view returns(IBoatsVoting.TypeVote memory);\r\n    function getBoatDetails(uint16 idx) external view returns(IBoatsVoting.BoatData memory);\r\n}\r\n// File: contracts/KWWVoteManager.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n//import \"./KWWBoatsVoting.sol\";\r\n//import \"./KWWBoats.sol\";\r\n\r\n\r\n//import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ncontract KWWVoteManager is Ownable{\r\n    IVoting votingContract;\r\n    IVotingBoatNFT boatsNFTContract;\r\n    //KWWDataBoats boatsDataContract;\r\n    IVotingBoatData boatsDataContract;\r\n\r\n    constructor(address _voting, address _nft, address _data){\r\n        setVoting(_voting);\r\n        setBoatsNFT(_nft);\r\n        setBoatsData(_data);\r\n    }\r\n\r\n\r\n    /*\r\n        EXECUTION METHODS\r\n    */\r\n\r\n    function makeVote1(uint16 token, uint256 votePrice) public {\r\n        require(boatsNFTContract.ownerOf(token) == msg.sender, \"Caller is not the owner of the token\");\r\n        uint8 boatState = boatsDataContract.getBoatState(token);\r\n        votingContract.makeVote1(token, votePrice, boatState);\r\n    }\r\n\r\n    function makeVote2(uint16 token, bool voteDecision) public {\r\n        require(boatsNFTContract.ownerOf(token) == msg.sender, \"Caller is not the owner of the token\");\r\n        uint8 boatState = boatsDataContract.getBoatState(token);\r\n        votingContract.makeVote2(token, voteDecision, boatState);\r\n    }\r\n\r\n    function updatePrice(uint16 token) public {\r\n        uint8 boatState = boatsDataContract.getBoatState(token);\r\n        votingContract.updatePrice(boatState);\r\n    }\r\n\r\n    function updateStatePrice(uint8 boatState) public {\r\n        votingContract.updatePrice(boatState);\r\n    }\r\n\r\n\r\n    /*\r\n        GETTERS\r\n    */\r\n    function getOnlineVote() public view returns(uint8){\r\n        return votingContract.getCurrentOnlineVote();\r\n    }\r\n\r\n    function getOnlineVoteEndTime() public view returns(int){\r\n        return votingContract.getCurrentVoteEndTime();\r\n    }\r\n\r\n    function getBoatPrice(uint16 token) public view returns(uint256){\r\n        uint8 boatState = boatsDataContract.getBoatState(token);\r\n        return votingContract.getPrice(boatState);\r\n    }\r\n\r\n    function getStateVoteDetails(uint16 token) public view returns(IBoatsVoting.TypeVote memory){\r\n        uint8 boatState = boatsDataContract.getBoatState(token);\r\n        return votingContract.getVoteDetails(boatState);\r\n    }\r\n\r\n    function getBoatDetails(uint16 token) public view returns(IBoatsVoting.BoatData memory){\r\n        return votingContract.getBoatDetails(token);\r\n    }\r\n\r\n\r\n\r\n    /*\r\n        ONLY OWNER\r\n    */\r\n\r\n    function setVoting(address _voting) public onlyOwner{\r\n        votingContract = IVoting(_voting);\r\n    }\r\n        \r\n    function setBoatsNFT(address _nft) public onlyOwner{\r\n        boatsNFTContract = IVotingBoatNFT(_nft);\r\n    }\r\n        \r\n    function setBoatsData(address _data) public onlyOwner{\r\n        boatsDataContract = IVotingBoatData(_data);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_data\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"token\",\"type\":\"uint16\"}],\"name\":\"getBoatDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vote1\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted1\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted2\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"vote2\",\"type\":\"bool\"}],\"internalType\":\"struct IBoatsVoting.BoatData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"token\",\"type\":\"uint16\"}],\"name\":\"getBoatPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOnlineVote\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOnlineVoteEndTime\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"token\",\"type\":\"uint16\"}],\"name\":\"getStateVoteDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avg\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"voters\",\"type\":\"uint16\"},{\"internalType\":\"int16\",\"name\":\"agreeToAvg\",\"type\":\"int16\"}],\"internalType\":\"struct IBoatsVoting.TypeVote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"token\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"votePrice\",\"type\":\"uint256\"}],\"name\":\"makeVote1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"token\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"voteDecision\",\"type\":\"bool\"}],\"name\":\"makeVote2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_data\",\"type\":\"address\"}],\"name\":\"setBoatsData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setBoatsNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voting\",\"type\":\"address\"}],\"name\":\"setVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"token\",\"type\":\"uint16\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"}],\"name\":\"updateStatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KWWVoteManager", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008c41343b12c6dabbeab4773c462e916c62016b7c0000000000000000000000009cdff82ba82be49f940c6a85ee44d38f5f01c4e80000000000000000000000000ffe5c96a00337331f07ae0b86c75bc4438ce874", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7236fb4586040a198ee848d059b7f6c21afd347d5901ed7d14418d6a40bf7df5"}]}