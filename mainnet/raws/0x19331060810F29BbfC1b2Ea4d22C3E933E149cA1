{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BrikedStrategy.sol\": {\r\n      \"content\": \"// NOTE: This is a copy paste, for maintaineable code check: https://github.com/GalloDaSballo/bvecvx-cvx-curve/releases/tag/briked.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n// Part: AddressUpgradeable\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// Part: IController\\n\\ninterface IController {\\n    function withdraw(address, uint256) external;\\n\\n    function strategies(address) external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function earn(address, uint256) external;\\n\\n    function want(address) external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function vaults(address) external view returns (address);\\n}\\n\\n// Part: IERC20Upgradeable\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n// Part: IUniswapRouterV2\\n\\ninterface IUniswapRouterV2 {\\n    function factory() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\n// Part: Initializable\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || _isConstructor() || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\\n// Part: MathUpgradeable\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n}\\n\\n// Part: SafeMathUpgradeable\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// Part: ContextUpgradeable\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\\n// Part: SafeERC20Upgradeable\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeERC20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\n// Part: BrikedSettAccessControl\\n\\n/*\\n    Common base for permissioned roles throughout Sett ecosystem\\n*/\\ncontract BrikedSettAccessControl is Initializable {\\n    address public governance;\\n    address public strategist;\\n    address public keeper;\\n\\n    // ===== MODIFIERS =====\\n    function _onlyGovernance() internal view {\\n        require(msg.sender == governance, \\\"onlyGovernance\\\");\\n    }\\n\\n    function _onlyGovernanceOrStrategist() internal view {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"onlyGovernanceOrStrategist\\\"\\n        );\\n    }\\n\\n    function _onlyAuthorizedActors() internal view {\\n        require(\\n            msg.sender == keeper || msg.sender == governance,\\n            \\\"onlyAuthorizedActors\\\"\\n        );\\n    }\\n\\n    // ===== PERMISSIONED ACTIONS =====\\n\\n    /// @notice Change strategist address\\n    /// @notice Can only be changed by governance itself\\n    function setStrategist(address _strategist) external {\\n        _onlyGovernance();\\n        strategist = _strategist;\\n    }\\n\\n    /// @notice Change keeper address\\n    /// @notice Can only be changed by governance itself\\n    function setKeeper(address _keeper) external {\\n        _onlyGovernance();\\n        keeper = _keeper;\\n    }\\n\\n    /// @notice Change governance address\\n    /// @notice Can only be changed by governance itself\\n    function setGovernance(address _governance) public {\\n        _onlyGovernance();\\n        governance = _governance;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\\n// Part: PausableUpgradeable\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\\n// Part: BaseStrategy\\n\\n/*\\n    ===== Badger Base Strategy =====\\n    Common base class for all Sett strategies\\n\\n    Changelog\\n    V1.1\\n    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\\n    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\\n\\n    V1.2\\n    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\\n*/\\nabstract contract BaseStrategy is PausableUpgradeable, BrikedSettAccessControl {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    // Standardized harvest event for UI\\n    event Harvest(uint256 harvested, uint256 indexed blockNumber);\\n\\n    address public want; // Want: Curve.fi renBTC/wBTC (crvRenWBTC) LP token\\n\\n    uint256 public performanceFeeGovernance;\\n    uint256 public performanceFeeStrategist;\\n    uint256 public withdrawalFee;\\n\\n    uint256 public constant MAX_FEE = 10000;\\n    address public constant uniswap =\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Dex\\n\\n    address public controller;\\n    address public guardian;\\n\\n    uint256 public withdrawalMaxDeviationThreshold;\\n\\n    function __BaseStrategy_init(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _keeper,\\n        address _guardian\\n    ) public initializer whenNotPaused {\\n        __Pausable_init();\\n        governance = _governance;\\n        strategist = _strategist;\\n        keeper = _keeper;\\n        controller = _controller;\\n        guardian = _guardian;\\n        withdrawalMaxDeviationThreshold = 50;\\n    }\\n\\n    // ===== Modifiers =====\\n\\n    function _onlyController() internal view {\\n        require(msg.sender == controller, \\\"onlyController\\\");\\n    }\\n\\n    function _onlyAuthorizedActorsOrController() internal view {\\n        require(\\n            msg.sender == keeper ||\\n                msg.sender == governance ||\\n                msg.sender == controller,\\n            \\\"onlyAuthorizedActorsOrController\\\"\\n        );\\n    }\\n\\n    function _onlyAuthorizedPausers() internal view {\\n        require(\\n            msg.sender == guardian || msg.sender == governance,\\n            \\\"onlyPausers\\\"\\n        );\\n    }\\n\\n    /// ===== View Functions =====\\n    function baseStrategyVersion() public view returns (string memory) {\\n        return \\\"1.2\\\";\\n    }\\n\\n    /// @notice Get the balance of want held idle in the Strategy\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20Upgradeable(want).balanceOf(address(this));\\n    }\\n\\n    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\\n    function balanceOf() public view virtual returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function isTendable() public view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// ===== Permissioned Actions: Governance =====\\n\\n    function setGuardian(address _guardian) external {\\n        _onlyGovernance();\\n        guardian = _guardian;\\n    }\\n\\n    function setWithdrawalFee(uint256 _withdrawalFee) external {\\n        _onlyGovernance();\\n        require(\\n            _withdrawalFee <= MAX_FEE,\\n            \\\"base-strategy/excessive-withdrawal-fee\\\"\\n        );\\n        withdrawalFee = _withdrawalFee;\\n    }\\n\\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)\\n        external\\n    {\\n        _onlyGovernance();\\n        require(\\n            _performanceFeeStrategist <= MAX_FEE,\\n            \\\"base-strategy/excessive-strategist-performance-fee\\\"\\n        );\\n        performanceFeeStrategist = _performanceFeeStrategist;\\n    }\\n\\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)\\n        external\\n    {\\n        _onlyGovernance();\\n        require(\\n            _performanceFeeGovernance <= MAX_FEE,\\n            \\\"base-strategy/excessive-governance-performance-fee\\\"\\n        );\\n        performanceFeeGovernance = _performanceFeeGovernance;\\n    }\\n\\n    function setController(address _controller) external {\\n        _onlyGovernance();\\n        controller = _controller;\\n    }\\n\\n    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\\n        _onlyGovernance();\\n        require(\\n            _threshold <= MAX_FEE,\\n            \\\"base-strategy/excessive-max-deviation-threshold\\\"\\n        );\\n        withdrawalMaxDeviationThreshold = _threshold;\\n    }\\n\\n    function deposit() public virtual whenNotPaused {\\n        _onlyAuthorizedActorsOrController();\\n        uint256 _want = IERC20Upgradeable(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            _deposit(_want);\\n        }\\n        _postDeposit();\\n    }\\n\\n    // ===== Permissioned Actions: Controller =====\\n\\n    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\\n    function withdrawAll()\\n        external\\n        virtual\\n        whenNotPaused\\n        returns (uint256 balance)\\n    {\\n        _onlyController();\\n\\n        _withdrawAll();\\n\\n        _transferToVault(IERC20Upgradeable(want).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Withdraw partial funds from the strategy, unrolling from strategy positions as necessary\\n    /// @notice Processes withdrawal fee if present\\n    /// @dev If it fails to recover sufficient funds (defined by withdrawalMaxDeviationThreshold), the withdrawal should fail so that this unexpected behavior can be investigated\\n    function withdraw(uint256 _amount) external virtual whenNotPaused {\\n        _onlyController();\\n\\n        // Withdraw from strategy positions, typically taking from any idle want first.\\n        _withdrawSome(_amount);\\n        uint256 _postWithdraw =\\n            IERC20Upgradeable(want).balanceOf(address(this));\\n\\n        // Sanity check: Ensure we were able to retrieve sufficent want from strategy positions\\n        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\\n        if (_postWithdraw < _amount) {\\n            uint256 diff = _diff(_amount, _postWithdraw);\\n\\n            // Require that difference between expected and actual values is less than the deviation threshold percentage\\n            require(\\n                diff <=\\n                    _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_FEE),\\n                \\\"base-strategy/withdraw-exceed-max-deviation-threshold\\\"\\n            );\\n        }\\n\\n        // Return the amount actually withdrawn if less than amount requested\\n        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\\n\\n        // Process withdrawal fee\\n        uint256 _fee = _processWithdrawalFee(_toWithdraw);\\n\\n        // Transfer remaining to Vault to handle withdrawal\\n        _transferToVault(_toWithdraw.sub(_fee));\\n    }\\n\\n    // NOTE: must exclude any tokens used in the yield\\n    // Controller role - withdraw should return to Controller\\n    function withdrawOther(address _asset)\\n        external\\n        virtual\\n        whenNotPaused\\n        returns (uint256 balance)\\n    {\\n        _onlyController();\\n        _onlyNotProtectedTokens(_asset);\\n\\n        balance = IERC20Upgradeable(_asset).balanceOf(address(this));\\n        IERC20Upgradeable(_asset).safeTransfer(controller, balance);\\n    }\\n\\n    /// ===== Permissioned Actions: Authoized Contract Pausers =====\\n\\n    function pause() external {\\n        _onlyAuthorizedPausers();\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        _onlyGovernance();\\n        _unpause();\\n    }\\n\\n    /// ===== Internal Helper Functions =====\\n\\n    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\\n    /// @return The withdrawal fee that was taken\\n    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\\n        if (withdrawalFee == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fee = _amount.mul(withdrawalFee).div(MAX_FEE);\\n        IERC20Upgradeable(want).safeTransfer(\\n            IController(controller).rewards(),\\n            fee\\n        );\\n        return fee;\\n    }\\n\\n    /// @dev Helper function to process an arbitrary fee\\n    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\\n    /// @return The fee that was taken\\n    function _processFee(\\n        address token,\\n        uint256 amount,\\n        uint256 feeBps,\\n        address recipient\\n    ) internal returns (uint256) {\\n        if (feeBps == 0) {\\n            return 0;\\n        }\\n        uint256 fee = amount.mul(feeBps).div(MAX_FEE);\\n        IERC20Upgradeable(token).safeTransfer(recipient, fee);\\n        return fee;\\n    }\\n\\n    /// @dev Reset approval and approve exact amount\\n    function _safeApproveHelper(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        IERC20Upgradeable(token).safeApprove(recipient, 0);\\n        IERC20Upgradeable(token).safeApprove(recipient, amount);\\n    }\\n\\n    function _transferToVault(uint256 _amount) internal {\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20Upgradeable(want).safeTransfer(_vault, _amount);\\n    }\\n\\n    /// @notice Swap specified balance of given token on Uniswap with given path\\n    function _swap(\\n        address startToken,\\n        uint256 balance,\\n        address[] memory path\\n    ) internal {\\n        _safeApproveHelper(startToken, uniswap, balance);\\n        IUniswapRouterV2(uniswap).swapExactTokensForTokens(\\n            balance,\\n            0,\\n            path,\\n            address(this),\\n            now\\n        );\\n    }\\n\\n    function _swapEthIn(uint256 balance, address[] memory path) internal {\\n        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(\\n            0,\\n            path,\\n            address(this),\\n            now\\n        );\\n    }\\n\\n    function _swapEthOut(\\n        address startToken,\\n        uint256 balance,\\n        address[] memory path\\n    ) internal {\\n        _safeApproveHelper(startToken, uniswap, balance);\\n        IUniswapRouterV2(uniswap).swapExactTokensForETH(\\n            balance,\\n            0,\\n            path,\\n            address(this),\\n            now\\n        );\\n    }\\n\\n    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\\n    function _add_max_liquidity_uniswap(address token0, address token1)\\n        internal\\n        virtual\\n    {\\n        uint256 _token0Balance =\\n            IERC20Upgradeable(token0).balanceOf(address(this));\\n        uint256 _token1Balance =\\n            IERC20Upgradeable(token1).balanceOf(address(this));\\n\\n        _safeApproveHelper(token0, uniswap, _token0Balance);\\n        _safeApproveHelper(token1, uniswap, _token1Balance);\\n\\n        IUniswapRouterV2(uniswap).addLiquidity(\\n            token0,\\n            token1,\\n            _token0Balance,\\n            _token1Balance,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Utility function to diff two numbers, expects higher value in first position\\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(a >= b, \\\"diff/expected-higher-number-in-first-position\\\");\\n        return a.sub(b);\\n    }\\n\\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\\n\\n    /// @dev Internal deposit logic to be implemented by Stratgies\\n    function _deposit(uint256 _amount) internal virtual;\\n\\n    function _postDeposit() internal virtual {\\n        //no-op by default\\n    }\\n\\n    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\\n    function _onlyNotProtectedTokens(address _asset) internal virtual;\\n\\n    function getProtectedTokens()\\n        external\\n        view\\n        virtual\\n        returns (address[] memory);\\n\\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\\n    function _withdrawAll() internal virtual;\\n\\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\\n    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    /// @dev Realize returns from positions\\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion\\n    /// @dev Performance fees should also be implemented in this function\\n    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\\n    // function harvest() external virtual;\\n\\n    /// @dev User-friendly name for this strategy for purposes of convenient reading\\n    function getName() external pure virtual returns (string memory);\\n\\n    /// @dev Balance of want currently held in strategy positions\\n    function balanceOfPool() public view virtual returns (uint256);\\n\\n    uint256[49] private __gap;\\n}\\n\\n// File: BrikedStrategy.sol\\n\\n/// @title BrikedStrategy\\n/// @dev A strategy that does nothing\\n/// @author Badger DAO\\ncontract BrikedStrategy is BaseStrategy {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    event TreeDistribution(\\n        address indexed token,\\n        uint256 amount,\\n        uint256 indexed blockNumber,\\n        uint256 timestamp\\n    );\\n\\n    // address public want // Inherited from BaseStrategy, the token the strategy wants, swaps into and tries to grow\\n    address public lpComponent; // Token we provide liquidity with\\n    address public reward; // it's CRV\\n\\n    function initialize(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _keeper,\\n        address _guardian,\\n        address[3] memory _wantConfig,\\n        uint256[3] memory _feeConfig\\n    ) public initializer {\\n        __BaseStrategy_init(\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _keeper,\\n            _guardian\\n        );\\n\\n        /// @dev Add config here\\n        want = _wantConfig[0];\\n        lpComponent = _wantConfig[1];\\n        reward = _wantConfig[2];\\n\\n        performanceFeeGovernance = _feeConfig[0];\\n        performanceFeeStrategist = _feeConfig[1];\\n        withdrawalFee = _feeConfig[2];\\n    }\\n\\n    /// ===== View Functions =====\\n\\n    /// @dev Specify the name of the strategy\\n    function getName() external pure override returns (string memory) {\\n        return \\\"BrikedStrategy\\\";\\n    }\\n\\n    /// @dev Specify the version of the Strategy, for upgrades\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0\\\";\\n    }\\n\\n    /// @dev Balance of want currently held in strategy positions\\n    function balanceOfPool() public view override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// @dev Returns true if this strategy requires tending\\n    function isTendable() public view override returns (bool) {\\n        return false;\\n    }\\n\\n    // TODO: update lpcomponent\\n    // @dev These are the tokens that cannot be moved except by the vault\\n    function getProtectedTokens()\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        address[] memory protectedTokens = new address[](5);\\n        protectedTokens[0] = want;\\n        protectedTokens[1] = lpComponent;\\n        protectedTokens[2] = reward;\\n        return protectedTokens;\\n    }\\n\\n    /// ===== Internal Core Implementations =====\\n    /// @dev security check to avoid moving tokens that would cause a rugpull, edit based on strat\\n    function _onlyNotProtectedTokens(address _asset) internal override {\\n        address[] memory protectedTokens = getProtectedTokens();\\n\\n        for (uint256 x = 0; x < protectedTokens.length; x++) {\\n            require(\\n                address(protectedTokens[x]) != _asset,\\n                \\\"Asset is protected\\\"\\n            );\\n        }\\n    }\\n\\n    /// @dev invest the amount of want\\n    /// @notice When this function is called, the controller has already sent want to this\\n    /// @notice Just get the current balance and then invest accordingly\\n    function _deposit(uint256 _amount) internal override {\\n        //NO-OP\\n    }\\n\\n    /// @dev utility function to withdraw everything for migration\\n    function _withdrawAll() internal override {\\n       //NO-OP\\n    }\\n\\n    /// @dev withdraw the specified amount of want, liquidate from lpComponent to want, paying off any necessary debt for the conversion\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        return _amount;\\n    }\\n\\n    /// @dev Harvest from strategy mechanics, realizing increase in underlying position\\n    function harvest() external whenNotPaused returns (uint256 harvested) {\\n        _onlyAuthorizedActors();\\n        //NO-OP\\n        return 0;\\n    }\\n\\n    /// @dev Rebalance, Compound or Pay off debt here\\n    function tend() external whenNotPaused {\\n        _onlyAuthorizedActors();\\n        //NO-OP\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"BrikedStrategy.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TreeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"__BaseStrategy_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStrategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_wantConfig\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_feeConfig\",\"type\":\"uint256[3]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpComponent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalMaxDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMaxDeviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BrikedStrategy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}