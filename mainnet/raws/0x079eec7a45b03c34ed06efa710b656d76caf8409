{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.4;\r\n\r\n/*\r\n __________________________________\r\n|                                  |\r\n| $ + $ + $ + $ + $ + $ + $ + $ + $|\r\n|+ $ + $ + $ + $ + $ + $ + $ + $ + |\r\n| + $ + $ + $ + $ + $ + $ + $ + $ +|\r\n|$ + $ + $ + $ + $ + $ + $ + $ + $ |\r\n| $ + $ + $ + $ + $ + $ + $ + $ + $|\r\n|+ $ + $ + $ + $ + $ + $ + $ + $ + |\r\n| + $ + $ + $ + $ + $ + $ + $ + $ +|\r\n|__________________________________|\r\n\r\n*/\r\n\r\ncontract NFTBrokerProxy {\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == getOwner(), \"caller not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor (address target) {\r\n        setTargetSlot(target);\r\n        setOwnerSlot(tx.origin);\r\n    }\r\n\r\n    fallback() external payable {\r\n        address target = getTargetSlot();\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Gets proxy target address from storage slot.\r\n     * @return target Address of smart contract source code.\r\n     */\r\n    function getTargetSlot() internal view returns (address target) {\r\n        // The slot hash has been precomputed for gas optimizaion\r\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.NFTBrokerProxy.target')) - 1);\r\n        assembly {\r\n            target := sload(\r\n                /* slot */\r\n                0x172d303713ab541af50b05036cc57f0c0c8733f85d5ceb2137350b11166ad9bd\r\n            )\r\n        }\r\n    }\r\n\r\n    function getTarget() public view returns (address target) {\r\n        return getTargetSlot();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets proxy target address to storage slot.\r\n     * @param target Address of smart contract source code.\r\n     */\r\n    function setTargetSlot(address target) internal {\r\n        // The slot hash has been precomputed for gas optimizaion\r\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.NFTBrokerProxy.target')) - 1);\r\n        assembly {\r\n            sstore(\r\n                /* slot */\r\n                0x172d303713ab541af50b05036cc57f0c0c8733f85d5ceb2137350b11166ad9bd,\r\n                target\r\n            )\r\n        }\r\n    }\r\n\r\n    function setTarget(address target) public onlyOwner {\r\n        setTargetSlot(target);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets proxy owner address from storage slot.\r\n     * @return owner Address of owner.\r\n     */\r\n    function getOwnerSlot() internal view returns (address owner) {\r\n        // The slot hash has been precomputed for gas optimizaion\r\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.NFTBrokerProxy.owner')) - 1);\r\n        assembly {\r\n            owner := sload(\r\n                /* slot */\r\n                0x2d33df155922a1acf3c04048b6cc8aa3f641ab2dc6ecf84d346b5653b679e017\r\n            )\r\n        }\r\n    }\r\n\r\n    function getOwner() public view returns (address owner) {\r\n        return getOwnerSlot();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets proxy owner address to storage slot.\r\n     * @param owner Address of owner.\r\n     */\r\n    function setOwnerSlot(address owner) internal {\r\n        // The slot hash has been precomputed for gas optimizaion\r\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.NFTBrokerProxy.owner')) - 1);\r\n        assembly {\r\n            sstore(\r\n                /* slot */\r\n                0x2d33df155922a1acf3c04048b6cc8aa3f641ab2dc6ecf84d346b5653b679e017,\r\n                owner\r\n            )\r\n        }\r\n    }\r\n\r\n    function setOwner(address owner) public onlyOwner {\r\n        setOwnerSlot(owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"cannot use zero address\");\r\n        setOwner(newOwner);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTBrokerProxy", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "0000000000000000000000006caf521f79f774a949f4e8d6ca3c4b4945169b71", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xe104d65eccdde29dada6b0d22db19942453ff2b0", "SwarmSource": "ipfs://5b81b117e7fe0ba8239f826aee71deee38b4f23c604950321f7362799dcc95d6"}]}