{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IStreamable {\r\n    struct Stream {\r\n        uint256 deposit;\r\n        uint256 ratePerSecond;\r\n        uint256 remainingBalance;\r\n        uint256 startTime;\r\n        uint256 stopTime;\r\n        address recipient;\r\n        address sender;\r\n        address tokenAddress;\r\n        bool isEntity;\r\n    }\r\n\r\n    event CreateStream(\r\n        uint256 indexed streamId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    );\r\n\r\n    event WithdrawFromStream(\r\n        uint256 indexed streamId,\r\n        address indexed recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    event CancelStream(\r\n        uint256 indexed streamId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 senderBalance,\r\n        uint256 recipientBalance\r\n    );\r\n\r\n    function balanceOf(uint256 streamId, address who)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function getStream(uint256 streamId)\r\n        external\r\n        view\r\n        returns (\r\n            address sender,\r\n            address recipient,\r\n            uint256 deposit,\r\n            address token,\r\n            uint256 startTime,\r\n            uint256 stopTime,\r\n            uint256 remainingBalance,\r\n            uint256 ratePerSecond\r\n        );\r\n\r\n    function createStream(\r\n        address recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external returns (uint256 streamId);\r\n\r\n    function withdrawFromStream(uint256 streamId, uint256 funds)\r\n        external\r\n        returns (bool);\r\n\r\n    function cancelStream(uint256 streamId) external returns (bool);\r\n\r\n    function initialize(address fundsAdmin) external;\r\n}\r\ninterface IAdminControlledEcosystemReserve {\r\n    /** @notice Emitted when the funds admin changes\r\n     * @param fundsAdmin The new funds admin\r\n     **/\r\n    event NewFundsAdmin(address indexed fundsAdmin);\r\n\r\n    /** @notice Returns the mock ETH reference address\r\n     * @return address The address\r\n     **/\r\n    function ETH_MOCK_ADDRESS() external pure returns (address);\r\n\r\n    /**\r\n     * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\r\n     * @return address The address of the funds admin\r\n     **/\r\n    function getFundsAdmin() external view returns (address);\r\n\r\n    /**\r\n     * @dev Function for the funds admin to give ERC20 allowance to other parties\r\n     * @param token The address of the token to give allowance from\r\n     * @param recipient Allowance's recipient\r\n     * @param amount Allowance to approve\r\n     **/\r\n    function approve(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Function for the funds admin to transfer ERC20 tokens to other parties\r\n     * @param token The address of the token to transfer\r\n     * @param recipient Transfer's recipient\r\n     * @param amount Amount to transfer\r\n     **/\r\n    function transfer(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n/**\r\n * @title VersionedInitializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n *\r\n * @author Aave, inspired by the OpenZeppelin Initializable contract\r\n */\r\nabstract contract VersionedInitializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    uint256 internal lastInitializedRevision = 0;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        uint256 revision = getRevision();\r\n        require(\r\n            revision > lastInitializedRevision,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        lastInitializedRevision = revision;\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev returns the revision number of the contract.\r\n    /// Needs to be defined in the inherited class as a constant.\r\n    function getRevision() internal pure virtual returns (uint256);\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title AdminControlledEcosystemReserve\r\n * @notice Stores ERC20 tokens, and allows to dispose of them via approval or transfer dynamics\r\n * Adapted to be an implementation of a transparent proxy\r\n * @dev Done abstract to add an `initialize()` function on the child, with `initializer` modifier\r\n * @author BGD Labs\r\n **/\r\nabstract contract AdminControlledEcosystemReserve is\r\n    VersionedInitializable,\r\n    IAdminControlledEcosystemReserve\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using Address for address payable;\r\n\r\n    address internal _fundsAdmin;\r\n\r\n    uint256 public constant REVISION = 4;\r\n\r\n    /// @inheritdoc IAdminControlledEcosystemReserve\r\n    address public constant ETH_MOCK_ADDRESS =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    modifier onlyFundsAdmin() {\r\n        require(msg.sender == _fundsAdmin, \"ONLY_BY_FUNDS_ADMIN\");\r\n        _;\r\n    }\r\n\r\n    function getRevision() internal pure override returns (uint256) {\r\n        return REVISION;\r\n    }\r\n\r\n    /// @inheritdoc IAdminControlledEcosystemReserve\r\n    function getFundsAdmin() external view returns (address) {\r\n        return _fundsAdmin;\r\n    }\r\n\r\n    /// @inheritdoc IAdminControlledEcosystemReserve\r\n    function approve(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyFundsAdmin {\r\n        token.safeApprove(recipient, amount);\r\n    }\r\n\r\n    /// @inheritdoc IAdminControlledEcosystemReserve\r\n    function transfer(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyFundsAdmin {\r\n        require(recipient != address(0), \"INVALID_0X_RECIPIENT\");\r\n\r\n        if (address(token) == ETH_MOCK_ADDRESS) {\r\n            payable(recipient).sendValue(amount);\r\n        } else {\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    /// @dev needed in order to receive ETH from the Aave v1 ecosystem reserve\r\n    receive() external payable {}\r\n\r\n    function _setFundsAdmin(address admin) internal {\r\n        _fundsAdmin = admin;\r\n        emit NewFundsAdmin(admin);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AaveEcosystemReserve v2\r\n * @notice Stores ERC20 tokens of an ecosystem reserve, adding streaming capabilities.\r\n * Modification of Sablier https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/Sablier.sol\r\n * Original can be found also deployed on https://etherscan.io/address/0xCD18eAa163733Da39c232722cBC4E8940b1D8888\r\n * Modifications:\r\n * - Sablier \"pulls\" the funds from the creator of the stream at creation. In the Aave case, we already have the funds.\r\n * - Anybody can create streams on Sablier. Here, only the funds admin (Aave governance via controller) can\r\n * - Adapted codebase to Solidity 0.8.11, mainly removing SafeMath and CarefulMath to use native safe math\r\n * - Same as with creation, on Sablier the `sender` and `recipient` can cancel a stream. Here, only fund admin and recipient\r\n * @author BGD Labs\r\n **/\r\ncontract AaveEcosystemReserveV2 is\r\n    AdminControlledEcosystemReserve,\r\n    ReentrancyGuard,\r\n    IStreamable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    /*** Storage Properties ***/\r\n\r\n    /**\r\n     * @notice Counter for new stream ids.\r\n     */\r\n    uint256 private _nextStreamId;\r\n\r\n    /**\r\n     * @notice The stream objects identifiable by their unsigned integer ids.\r\n     */\r\n    mapping(uint256 => Stream) private _streams;\r\n\r\n    /*** Modifiers ***/\r\n\r\n    /**\r\n     * @dev Throws if the caller is not the funds admin of the recipient of the stream.\r\n     */\r\n    modifier onlyAdminOrRecipient(uint256 streamId) {\r\n        require(\r\n            msg.sender == _fundsAdmin ||\r\n                msg.sender == _streams[streamId].recipient,\r\n            \"caller is not the funds admin or the recipient of the stream\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the provided id does not point to a valid stream.\r\n     */\r\n    modifier streamExists(uint256 streamId) {\r\n        require(_streams[streamId].isEntity, \"stream does not exist\");\r\n        _;\r\n    }\r\n\r\n    /*** Contract Logic Starts Here */\r\n\r\n    function initialize(address fundsAdmin) external initializer {\r\n        _nextStreamId = 100000;\r\n        _setFundsAdmin(fundsAdmin);\r\n    }\r\n\r\n    /*** View Functions ***/\r\n\r\n    /**\r\n     * @notice Returns the next available stream id\r\n     * @notice Returns the stream id.\r\n     */\r\n    function getNextStreamId() external view returns (uint256) {\r\n        return _nextStreamId;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the stream with all its properties.\r\n     * @dev Throws if the id does not point to a valid stream.\r\n     * @param streamId The id of the stream to query.\r\n     * @notice Returns the stream object.\r\n     */\r\n    function getStream(uint256 streamId)\r\n        external\r\n        view\r\n        streamExists(streamId)\r\n        returns (\r\n            address sender,\r\n            address recipient,\r\n            uint256 deposit,\r\n            address tokenAddress,\r\n            uint256 startTime,\r\n            uint256 stopTime,\r\n            uint256 remainingBalance,\r\n            uint256 ratePerSecond\r\n        )\r\n    {\r\n        sender = _streams[streamId].sender;\r\n        recipient = _streams[streamId].recipient;\r\n        deposit = _streams[streamId].deposit;\r\n        tokenAddress = _streams[streamId].tokenAddress;\r\n        startTime = _streams[streamId].startTime;\r\n        stopTime = _streams[streamId].stopTime;\r\n        remainingBalance = _streams[streamId].remainingBalance;\r\n        ratePerSecond = _streams[streamId].ratePerSecond;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns either the delta in seconds between `block.timestamp` and `startTime` or\r\n     *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\r\n     *  `startTime`, it returns 0.\r\n     * @dev Throws if the id does not point to a valid stream.\r\n     * @param streamId The id of the stream for which to query the delta.\r\n     * @notice Returns the time delta in seconds.\r\n     */\r\n    function deltaOf(uint256 streamId)\r\n        public\r\n        view\r\n        streamExists(streamId)\r\n        returns (uint256 delta)\r\n    {\r\n        Stream memory stream = _streams[streamId];\r\n        if (block.timestamp <= stream.startTime) return 0;\r\n        if (block.timestamp < stream.stopTime)\r\n            return block.timestamp - stream.startTime;\r\n        return stream.stopTime - stream.startTime;\r\n    }\r\n\r\n    struct BalanceOfLocalVars {\r\n        uint256 recipientBalance;\r\n        uint256 withdrawalAmount;\r\n        uint256 senderBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the available funds for the given stream id and address.\r\n     * @dev Throws if the id does not point to a valid stream.\r\n     * @param streamId The id of the stream for which to query the balance.\r\n     * @param who The address for which to query the balance.\r\n     * @notice Returns the total funds allocated to `who` as uint256.\r\n     */\r\n    function balanceOf(uint256 streamId, address who)\r\n        public\r\n        view\r\n        streamExists(streamId)\r\n        returns (uint256 balance)\r\n    {\r\n        Stream memory stream = _streams[streamId];\r\n        BalanceOfLocalVars memory vars;\r\n\r\n        uint256 delta = deltaOf(streamId);\r\n        vars.recipientBalance = delta * stream.ratePerSecond;\r\n\r\n        /*\r\n         * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\r\n         * We have to subtract the total amount withdrawn from the amount of money that has been\r\n         * streamed until now.\r\n         */\r\n        if (stream.deposit > stream.remainingBalance) {\r\n            vars.withdrawalAmount = stream.deposit - stream.remainingBalance;\r\n            vars.recipientBalance =\r\n                vars.recipientBalance -\r\n                vars.withdrawalAmount;\r\n        }\r\n\r\n        if (who == stream.recipient) return vars.recipientBalance;\r\n        if (who == stream.sender) {\r\n            vars.senderBalance =\r\n                stream.remainingBalance -\r\n                vars.recipientBalance;\r\n            return vars.senderBalance;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /*** Public Effects & Interactions Functions ***/\r\n\r\n    struct CreateStreamLocalVars {\r\n        uint256 duration;\r\n        uint256 ratePerSecond;\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new stream funded by this contracts itself and paid towards `recipient`.\r\n     * @dev Throws if the recipient is the zero address, the contract itself or the caller.\r\n     *  Throws if the deposit is 0.\r\n     *  Throws if the start time is before `block.timestamp`.\r\n     *  Throws if the stop time is before the start time.\r\n     *  Throws if the duration calculation has a math error.\r\n     *  Throws if the deposit is smaller than the duration.\r\n     *  Throws if the deposit is not a multiple of the duration.\r\n     *  Throws if the rate calculation has a math error.\r\n     *  Throws if the next stream id calculation has a math error.\r\n     *  Throws if the contract is not allowed to transfer enough tokens.\r\n     *  Throws if there is a token transfer failure.\r\n     * @param recipient The address towards which the money is streamed.\r\n     * @param deposit The amount of money to be streamed.\r\n     * @param tokenAddress The ERC20 token to use as streaming currency.\r\n     * @param startTime The unix timestamp for when the stream starts.\r\n     * @param stopTime The unix timestamp for when the stream stops.\r\n     * @notice Returns the uint256 id of the newly created stream.\r\n     */\r\n    function createStream(\r\n        address recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external onlyFundsAdmin returns (uint256) {\r\n        require(recipient != address(0), \"stream to the zero address\");\r\n        require(recipient != address(this), \"stream to the contract itself\");\r\n        require(recipient != msg.sender, \"stream to the caller\");\r\n        require(deposit > 0, \"deposit is zero\");\r\n        require(\r\n            startTime >= block.timestamp,\r\n            \"start time before block.timestamp\"\r\n        );\r\n        require(stopTime > startTime, \"stop time before the start time\");\r\n\r\n        CreateStreamLocalVars memory vars;\r\n        vars.duration = stopTime - startTime;\r\n\r\n        /* Without this, the rate per second would be zero. */\r\n        require(deposit >= vars.duration, \"deposit smaller than time delta\");\r\n\r\n        /* This condition avoids dealing with remainders */\r\n        require(\r\n            deposit % vars.duration == 0,\r\n            \"deposit not multiple of time delta\"\r\n        );\r\n\r\n        vars.ratePerSecond = deposit / vars.duration;\r\n\r\n        /* Create and store the stream object. */\r\n        uint256 streamId = _nextStreamId;\r\n        _streams[streamId] = Stream({\r\n            remainingBalance: deposit,\r\n            deposit: deposit,\r\n            isEntity: true,\r\n            ratePerSecond: vars.ratePerSecond,\r\n            recipient: recipient,\r\n            sender: address(this),\r\n            startTime: startTime,\r\n            stopTime: stopTime,\r\n            tokenAddress: tokenAddress\r\n        });\r\n\r\n        /* Increment the next stream id. */\r\n        _nextStreamId++;\r\n\r\n        emit CreateStream(\r\n            streamId,\r\n            address(this),\r\n            recipient,\r\n            deposit,\r\n            tokenAddress,\r\n            startTime,\r\n            stopTime\r\n        );\r\n        return streamId;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws from the contract to the recipient's account.\r\n     * @dev Throws if the id does not point to a valid stream.\r\n     *  Throws if the caller is not the funds admin or the recipient of the stream.\r\n     *  Throws if the amount exceeds the available balance.\r\n     *  Throws if there is a token transfer failure.\r\n     * @param streamId The id of the stream to withdraw tokens from.\r\n     * @param amount The amount of tokens to withdraw.\r\n     */\r\n    function withdrawFromStream(uint256 streamId, uint256 amount)\r\n        external\r\n        nonReentrant\r\n        streamExists(streamId)\r\n        onlyAdminOrRecipient(streamId)\r\n        returns (bool)\r\n    {\r\n        require(amount > 0, \"amount is zero\");\r\n        Stream memory stream = _streams[streamId];\r\n\r\n        uint256 balance = balanceOf(streamId, stream.recipient);\r\n        require(balance >= amount, \"amount exceeds the available balance\");\r\n\r\n        _streams[streamId].remainingBalance = stream.remainingBalance - amount;\r\n\r\n        if (_streams[streamId].remainingBalance == 0) delete _streams[streamId];\r\n\r\n        IERC20(stream.tokenAddress).safeTransfer(stream.recipient, amount);\r\n        emit WithdrawFromStream(streamId, stream.recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\r\n     * @dev Throws if the id does not point to a valid stream.\r\n     *  Throws if the caller is not the funds admin or the recipient of the stream.\r\n     *  Throws if there is a token transfer failure.\r\n     * @param streamId The id of the stream to cancel.\r\n     * @notice Returns bool true=success, otherwise false.\r\n     */\r\n    function cancelStream(uint256 streamId)\r\n        external\r\n        nonReentrant\r\n        streamExists(streamId)\r\n        onlyAdminOrRecipient(streamId)\r\n        returns (bool)\r\n    {\r\n        Stream memory stream = _streams[streamId];\r\n        uint256 senderBalance = balanceOf(streamId, stream.sender);\r\n        uint256 recipientBalance = balanceOf(streamId, stream.recipient);\r\n\r\n        delete _streams[streamId];\r\n\r\n        IERC20 token = IERC20(stream.tokenAddress);\r\n        if (recipientBalance > 0)\r\n            token.safeTransfer(stream.recipient, recipientBalance);\r\n\r\n        emit CancelStream(\r\n            streamId,\r\n            stream.sender,\r\n            stream.recipient,\r\n            senderBalance,\r\n            recipientBalance\r\n        );\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"CreateStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundsAdmin\",\"type\":\"address\"}],\"name\":\"NewFundsAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_MOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"deltaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundsAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AaveEcosystemReserveV2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://81c5a0b42ca3497c5a7828f4ae151d978a1e9e7f8364e497abab8f85b2de2a79"}]}