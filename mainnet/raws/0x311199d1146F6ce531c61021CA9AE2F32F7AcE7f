{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n * No team tokens. All tax goes to liquidity pool. Price only goes up. Supply only goes down.\r\n * https://t.me/CultBurn\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\ninterface ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}                                                                           \r\ninterface IUniswapV2Factory {                                                         \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ncontract CULTBURN is ERC20 {\r\n    uint256 private constant TOTAL_SUPPLY = 666 * 10**18;\r\n    string private m_Name = \"Cult Burn\";\r\n    string private m_Symbol = \"CULTBURN\";\r\n    uint8 private m_Decimals = 9;\r\n\r\n    IUniswapV2Router02 private m_UniswapV2Router;\r\n    address private m_UniswapV2Pair;\r\n    bool private m_Liquidity = false;\r\n\r\n    mapping (address => bool) private m_ExcludedAddresses;\r\n    mapping (address => uint256) private m_Balances;\r\n    mapping (address => mapping (address => uint256)) private m_Allowances;\r\n\r\n    receive() external payable {}\r\n\r\n    constructor () {\r\n        m_Balances[address(this)] = TOTAL_SUPPLY;\r\n        m_ExcludedAddresses[address(0)] = true;\r\n        m_ExcludedAddresses[msg.sender] = true;\r\n        m_ExcludedAddresses[address(this)] = true;\r\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return m_Name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return m_Symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return m_Decimals;\r\n    }\r\n    function totalSupply() public pure returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n    function balanceOf(address _account) public view returns (uint256) {\r\n        return m_Balances[_account];\r\n    }\r\n    function transfer(address _recipient, uint256 _amount) public returns (bool) {\r\n        _transfer(msg.sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return m_Allowances[_owner][_spender];\r\n    }\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        _approve(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, msg.sender, m_Allowances[_sender][msg.sender] - _amount);\r\n        return true;\r\n    }\r\n    function _trader(address _sender, address _recipient) private view returns (bool) {\r\n        return !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n    }\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        m_Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        uint256 _taxes = 0;            \r\n        if (_trader(_sender, _recipient)){   \r\n            if(_sender == m_UniswapV2Pair || _recipient == m_UniswapV2Pair)\r\n                _taxes = _amount/10;\r\n        }\r\n        _updateBalances(_sender, _recipient, _amount, _taxes);\r\n\t}\r\n    function _updateBalances(address _sender, address _recipient, uint256 _amount, uint256 _taxes) private {\r\n        uint256 _netAmount = _amount - _taxes;\r\n        m_Balances[_sender] -= _amount;\r\n        m_Balances[_recipient] += _netAmount;\r\n        m_Balances[address(0)] += _taxes;\r\n        emit Transfer(_sender, _recipient, _netAmount);\r\n    }\r\n    function addLiquidity() external {\r\n        require(!m_Liquidity,\"Liquidity already added.\");\r\n        m_UniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        m_ExcludedAddresses[address(m_UniswapV2Router)] = true;\r\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n        m_UniswapV2Pair = IUniswapV2Factory(m_UniswapV2Router.factory()).createPair(address(this), m_UniswapV2Router.WETH());\r\n        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,0xdba690433becef6F8398c6672aad1aD4677Ed8C4,block.timestamp);\r\n        m_Liquidity = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CULTBURN", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f4f7123b8c2f71426b757f771a7043e770e5613e79c39adf896f5fcb4fe1d8f"}]}