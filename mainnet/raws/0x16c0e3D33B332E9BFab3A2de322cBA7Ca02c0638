{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Deployed at: 0x16c0e3D33B332E9BFab3A2de322cBA7Ca02c0638\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n//PROXY PROGRAM TO EXTEND MINTING CAPABILITIES OF THE NFT-PANDEMIC CONTRACT\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is 0x address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\nabstract contract Functional {\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    bool private _reentryKey = false;\r\n    modifier reentryLock {\r\n        require(!_reentryKey, \"attempt reenter locked function\");\r\n        _reentryKey = true;\r\n        _;\r\n        _reentryKey = false;\r\n    }\r\n}\r\n\r\ncontract PANDEMIC {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance){}\r\n    function ownerOf(uint256 tokenId) external view returns (address owner){}\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) external{}\r\n    function transferFrom(address from, address to, uint256 tokenId) external{}\r\n    function approve(address to, uint256 tokenId) external{}\r\n    function getApproved(uint256 tokenId) external view returns (address operator){}\r\n    function setApprovalForAll(address operator, bool _approved) external{}\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool){}\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external{}\r\n\r\n\r\n    //required calls:\r\n\r\n    function totalSupply() external view returns (uint256) {}\r\n\r\n    //proxy access functions:\r\n    function proxyMint(address to, uint256 tokenId) external {\r\n    }\r\n    \r\n    function proxyBurn(uint256 tokenId) external {\r\n    }\r\n}\r\n\r\ncontract ProxyMint is Ownable, Functional {\r\n\r\n    uint256 maxSupply = 6666;\r\n    uint256 maxPerWallet = 100;\r\n\r\n    bool mintActive;\r\n\r\n    PANDEMIC proxy = PANDEMIC(0x4Ad8A7406Caac3457981A1B3C88B8aAB00D6e13d);\r\n\r\n    mapping (address => uint256) _mintTracker;\r\n\r\n    function mint(uint256 qty) public reentryLock {\r\n        require(mintActive, \"Closed\");\r\n        uint256 totalSupply = proxy.totalSupply();\r\n        require(totalSupply + qty <= maxSupply, \"Sold Out\");\r\n        require(qty <= 20, \"20 at a time max\");\r\n        require((_mintTracker[_msgSender()] + qty) <= maxPerWallet, \"Mint: Max tkn per wallet exceeded\");\r\n\r\n        _mintTracker[_msgSender()] += qty;\r\n\r\n        for (uint256 i=0; i < qty; i++){\r\n            proxy.proxyMint(_msgSender(), (i + totalSupply));\r\n        }\r\n    }\r\n\r\n    function activateProxyMint() external onlyOwner {\r\n        mintActive=true;\r\n    }\r\n\r\n    function deactivateProxyMint() external onlyOwner {\r\n        mintActive=false;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateProxyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateProxyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProxyMint", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d50e8905bfd847ddc375c27a19b8cf2dff7072fc21dbf1594052f2bc0aa939e8"}]}