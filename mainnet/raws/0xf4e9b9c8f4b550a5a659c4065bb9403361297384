{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Sigil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n        bytes memory table = TABLE;\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n                mstore(resultPtr, out)\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Buffer {\\r\\n    function hasCapacityFor(bytes memory buffer, uint256 needed) internal pure returns (bool) {\\r\\n        uint256 size;\\r\\n        uint256 used;\\r\\n        assembly {\\r\\n            size := mload(buffer)\\r\\n            used := mload(add(buffer, 32))\\r\\n        }\\r\\n        return size >= 32 && used <= size - 32 && used + needed <= size - 32;\\r\\n    }\\r\\n\\r\\n    function toString(bytes memory buffer) internal pure returns (string memory) {\\r\\n        require(hasCapacityFor(buffer, 0), \\\"Buffer.toString: invalid buffer\\\");\\r\\n        string memory ret;\\r\\n        assembly {\\r\\n            ret := add(buffer, 32)\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function append(bytes memory buffer, string memory str) internal view {\\r\\n        require(hasCapacityFor(buffer, bytes(str).length), \\\"Buffer.append: no capacity\\\");\\r\\n        assembly {\\r\\n            let len := mload(add(buffer, 32))\\r\\n            pop(staticcall(gas(), 0x4, add(str, 32), mload(str), add(len, add(buffer, 64)), mload(str)))\\r\\n            mstore(add(buffer, 32), add(len, mload(str)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface Cryptomancy\\r\\n{\\r\\n    function balanceOf (address account, uint256 id) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface CDROM\\r\\n{\\r\\n    function ownerOf (uint256 tokenId) external view returns (address);\\r\\n}\\r\\n\\r\\ncontract Sigils is ERC721, ReentrancyGuard {\\r\\n    address public _owner;\\r\\n    uint256 public maxSupply = 9393;\\r\\n    uint256 private _count = 0;\\r\\n    uint256 private _price = 10000000 gwei;\\r\\n\\r\\n    address private cryptomancyAddress = 0x7c7fC6d9F2c2e45f12657DAB3581EAd2BD53bDF1;\\r\\n    address private cdAddress = 0xad78E15a5465C09F6E6522b0d98b1F3b6B67Ee7e;\\r\\n    Cryptomancy cryptomancyContract = Cryptomancy(cryptomancyAddress);\\r\\n    CDROM cdContract = CDROM(cdAddress);\\r\\n    mapping(uint256 => bool) private _cryptomancyMints;\\r\\n    mapping(uint256 => bool) private _cdMints;\\r\\n\\r\\n    struct sigilValues {\\r\\n        uint8[] sigil;\\r\\n        uint8 gradient;\\r\\n        uint8 color;\\r\\n        uint8 planetHour;\\r\\n        uint8 planetDay;\\r\\n        uint8 darkBG;\\r\\n        uint16 rareNumber;\\r\\n        bytes intent;\\r\\n        string texture;\\r\\n    }\\r\\n    mapping (uint256 => sigilValues) public idSigils;\\r\\n\\r\\n    // array of uint array that is used to map letters to coordinates\\r\\n    // these coordinates are equidistanct points around the circumphrence of a circle\\r\\n    uint[2][22] private _coords = [[uint(0),uint(0)],[uint(235),uint(420)],[uint(279),uint(411)],[uint(333),uint(385)],[uint(376),uint(345)],[uint(406),uint(293)],[uint(419),uint(235)],[uint(415),uint(175)],[uint(393),uint(120)],[uint(356),uint(73)],[uint(307),uint(40)],[uint(250),uint(22)],[uint(190),uint(22)],[uint(133),uint(40)],[uint(84),uint(73)],[uint(47),uint(120)],[uint(25),uint(175)],[uint(21),uint(235)],[uint(34),uint(293)],[uint(64),uint(345)],[uint(107),uint(385)],[uint(161),uint(411)]];\\r\\n\\r\\n    // array of planet descriptions and symbols for use in sigil generation\\r\\n    string[8] private _planetSymbols = ['invalid', unicode'\u2644', unicode'\u2643', unicode'\u2642', unicode'\u2609', unicode'\u2640', unicode'\u263f', unicode'\u263d'];\\r\\n    string[8] private _planetNames = [\\\"invalid\\\", \\\"Saturn\\\", \\\"Jupiter\\\", \\\"Mars\\\", \\\"Sun\\\", \\\"Venus\\\", \\\"Mercury\\\", \\\"Moon\\\"];\\r\\n\\r\\n    // Light background gradients with hash to visualise (use color highlight vscode plugin)\\r\\n    // #9e7682,#ad7780,#bb797c,#c7837c,#d29381,#dda587,#e5b88e,#edcb96\\r\\n    // #e9d758,#e9e46c,#e3e880,#dce894,#d9e7a8,#d9e7bc,#dde6d0,#e5e6e4\\r\\n    // #fff4f3,#ffe9ef,#ffe0f3,#ffd6fd,#f0ccff,#d8c2ff,#bab9ff,#afc9ff\\r\\n    // #c5decd,#afd8be,#9ad2b1,#86cca6,#72c69c,#60c094,#4eba8e,#3eb489\\r\\n    // #ec9192,#ec9ba9,#eca5bc,#ecafcd,#ecb8da,#ecc2e4,#eccceb,#e9d6ec\\r\\n    // #ffc4eb,#fbb9d0,#f6b0b1,#f0bea9,#e8cea2,#dedb9d,#c4d39a,#abc798\\r\\n    // #bdd2a6,#aacda3,#a0c7a7,#9ec1b1,#9cbbb7,#9aaeb4,#99a2ad,#9899a6\\r\\n    // #eff8e2,#ebf4dc,#e8f0d7,#e4ebd2,#dfe5ce,#dadecb,#d5d7c9,#cecfc7\\r\\n    // #f3dfc1,#f1dabd,#eed6b9,#ebd1b5,#e8ccb1,#e4c7ae,#e1c3ab,#ddbea8\\r\\n    // #b2a3b5,#a796b4,#9687b4,#7d78b4,#6976b6,#5880b8,#4695bb,#3aafb9\\r\\n    // #91818a,#a88591,#bd8b91,#cf9994,#deb2a0,#eacdae,#f3e6c0,#faf8d4\\r\\n    bytes6[8][11] private _gradientsLight = [[bytes6('9e7682'),bytes6('ad7780'),bytes6('bb797c'),bytes6('c7837c'),bytes6('d29381'),bytes6('dda587'),bytes6('e5b88e'),bytes6('edcb96')],[bytes6('e9d758'),bytes6('e9e46c'),bytes6('e3e880'),bytes6('dce894'),bytes6('d9e7a8'),bytes6('d9e7bc'),bytes6('dde6d0'),bytes6('e5e6e4')],[bytes6('fff4f3'),bytes6('ffe9ef'),bytes6('ffe0f3'),bytes6('ffd6fd'),bytes6('f0ccff'),bytes6('d8c2ff'),bytes6('bab9ff'),bytes6('afc9ff')],[bytes6('c5decd'),bytes6('afd8be'),bytes6('9ad2b1'),bytes6('86cca6'),bytes6('72c69c'),bytes6('60c094'),bytes6('4eba8e'),bytes6('3eb489')],[bytes6('ec9192'),bytes6('ec9ba9'),bytes6('eca5bc'),bytes6('ecafcd'),bytes6('ecb8da'),bytes6('ecc2e4'),bytes6('eccceb'),bytes6('e9d6ec')],[bytes6('ffc4eb'),bytes6('fbb9d0'),bytes6('f6b0b1'),bytes6('f0bea9'),bytes6('e8cea2'),bytes6('dedb9d'),bytes6('c4d39a'),bytes6('abc798')],[bytes6('bdd2a6'),bytes6('aacda3'),bytes6('a0c7a7'),bytes6('9ec1b1'),bytes6('9cbbb7'),bytes6('9aaeb4'),bytes6('99a2ad'),bytes6('9899a6')],[bytes6('eff8e2'),bytes6('ebf4dc'),bytes6('e8f0d7'),bytes6('e4ebd2'),bytes6('dfe5ce'),bytes6('dadecb'),bytes6('d5d7c9'),bytes6('cecfc7')],[bytes6('f3dfc1'),bytes6('f1dabd'),bytes6('eed6b9'),bytes6('ebd1b5'),bytes6('e8ccb1'),bytes6('e4c7ae'),bytes6('e1c3ab'),bytes6('ddbea8')],[bytes6('b2a3b5'),bytes6('a796b4'),bytes6('9687b4'),bytes6('7d78b4'),bytes6('6976b6'),bytes6('5880b8'),bytes6('4695bb'),bytes6('3aafb9')],[bytes6('91818a'),bytes6('a88591'),bytes6('bd8b91'),bytes6('cf9994'),bytes6('deb2a0'),bytes6('eacdae'),bytes6('f3e6c0'),bytes6('faf8d4')]];\\r\\n    bytes12[11] private _gradientsLightDesc = [\\r\\n        bytes12('kitchen wall'),\\r\\n        bytes12('bike dreamer'),\\r\\n        bytes12('cotton candy'),\\r\\n        bytes12('falling tree'),\\r\\n        bytes12('heart desire'),\\r\\n        bytes12('fluorescence'),\\r\\n        bytes12('forest mists'),\\r\\n        bytes12('ancient moor'),\\r\\n        bytes12('desert peaks'),\\r\\n        bytes12('shimmer pool'),\\r\\n        bytes12('night wander')\\r\\n    ];\\r\\n\\r\\n    // Dark gradients\\r\\n    // #800815,#920832,#a40757,#b60783,#c905b6,#c404db,#a602ed,#7f00ff\\r\\n    // #884274,#994272,#aa406a,#bb3b59,#cc3541,#dd3c2e,#ee5524,#ff7518\\r\\n    // #1e0336,#1a044b,#0c0461,#041276,#03328c,#035ca1,#018fb7,#00cccc\\r\\n    // #453a94,#574097,#67479a,#774d9d,#86549f,#945ba2,#a063a5,#a86aa4\\r\\n    // #090a0f,#161826,#22253c,#2e3153,#393b6a,#434381,#4e4c97,#5a55ae\\r\\n    // #0d3b66,#102370,#1f137a,#461684,#701a8d,#971e8f,#a12271,#ab274f\\r\\n    // #aa4465,#a64258,#a2414c,#9e3f40,#9b463d,#974e3b,#93553a,#8f5c38\\r\\n    // #590925,#5a113a,#5b1a4c,#5c235b,#552c5e,#4f355f,#4c3e60,#4d4861\\r\\n    // #093a3e,#0e4d52,#135f65,#197077,#208189,#28919a,#31a0aa,#3aafb9\\r\\n    // #3d5a6c,#3d4a66,#3d3e5f,#443d59,#493c53,#4b3c4e,#483b46,#433a3f\\r\\n    // #17301c,#1d3a27,#244434,#2b4e42,#325750,#3a5f5e,#426468,#4a6670\\r\\n    bytes6[8][11] private _gradientsDark = [[bytes6('800815'),bytes6('920832'),bytes6('a40757'),bytes6('b60783'),bytes6('c905b6'),bytes6('c404db'),bytes6('a602ed'),bytes6('7f00ff')],[bytes6('884274'),bytes6('994272'),bytes6('aa406a'),bytes6('bb3b59'),bytes6('cc3541'),bytes6('dd3c2e'),bytes6('ee5524'),bytes6('ff7518')],[bytes6('1e0336'),bytes6('1a044b'),bytes6('0c0461'),bytes6('041276'),bytes6('03328c'),bytes6('035ca1'),bytes6('018fb7'),bytes6('00cccc')],[bytes6('453a94'),bytes6('574097'),bytes6('67479a'),bytes6('774d9d'),bytes6('86549f'),bytes6('945ba2'),bytes6('a063a5'),bytes6('a86aa4')],[bytes6('090a0f'),bytes6('161826'),bytes6('22253c'),bytes6('2e3153'),bytes6('393b6a'),bytes6('434381'),bytes6('4e4c97'),bytes6('5a55ae')],[bytes6('0d3b66'),bytes6('102370'),bytes6('1f137a'),bytes6('461684'),bytes6('701a8d'),bytes6('971e8f'),bytes6('a12271'),bytes6('ab274f')],[bytes6('aa4465'),bytes6('a64258'),bytes6('a2414c'),bytes6('9e3f40'),bytes6('9b463d'),bytes6('974e3b'),bytes6('93553a'),bytes6('8f5c38')],[bytes6('590925'),bytes6('5a113a'),bytes6('5b1a4c'),bytes6('5c235b'),bytes6('552c5e'),bytes6('4f355f'),bytes6('4c3e60'),bytes6('4d4861')],[bytes6('093a3e'),bytes6('0e4d52'),bytes6('135f65'),bytes6('197077'),bytes6('208189'),bytes6('28919a'),bytes6('31a0aa'),bytes6('3aafb9')],[bytes6('3d5a6c'),bytes6('3d4a66'),bytes6('3d3e5f'),bytes6('443d59'),bytes6('493c53'),bytes6('4b3c4e'),bytes6('483b46'),bytes6('433a3f')],[bytes6('17301c'),bytes6('1d3a27'),bytes6('244434'),bytes6('2b4e42'),bytes6('325750'),bytes6('3a5f5e'),bytes6('426468'),bytes6('4a6670')]];\\r\\n    bytes12[11] private _gradientsDarkDesc = [\\r\\n        bytes12('booba paints'),\\r\\n        bytes12('hallowed eve'),\\r\\n        bytes12('fallen light'),\\r\\n        bytes12('logos flight'),\\r\\n        bytes12('seeping dark'),\\r\\n        bytes12('volcanic art'),\\r\\n        bytes12('archaeologer'),\\r\\n        bytes12('lava bubbles'),\\r\\n        bytes12('escaping out'),\\r\\n        bytes12('night terror'),\\r\\n        bytes12('misty copses')\\r\\n    ];\\r\\n    // #e3be46,#e1bb43,#dab53c,#d1ac32,#c8a229,#bf9a21,#b8931b,#b69119\\r\\n    bytes6[8] private _gradientGold = [bytes6('e3be46'),bytes6('e1bb43'),bytes6('dab53c'),bytes6('d1ac32'),bytes6('c8a229'),bytes6('bf9a21'),bytes6('b8931b'),bytes6('b69119')];\\r\\n\\r\\n    bytes6[11] private _colorsLight = [bytes6('ffc4eb'),bytes6('e9e46c'),bytes6('9ad2b1'),bytes6('ec9192'),bytes6('3aafb9'),bytes6('e5e6e4'),bytes6('fff4f3'),bytes6('e5b88e'),bytes6('c5decd'),bytes6('e9d6ec'),bytes6('b2a3b5')];\\r\\n    bytes6[11] private _colorsDark = [bytes6('3f19af'),bytes6('101010'),bytes6('0D3B66'),bytes6('800815'),bytes6('ff7518'),bytes6('090a0f'),bytes6('433a3f'),bytes6('4a6670'),bytes6('17301c'),bytes6('34403a'),bytes6('1e0336')];\\r\\n\\r\\n    constructor() ERC721(\\\"Sigils\\\", \\\"SIGIL\\\") {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // shuffle numbers in a way that prevents repeats\\r\\n    function _shuffle(string memory seed) private view returns (uint8[21] memory){\\r\\n        uint8[21] memory _numArray = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21];\\r\\n        for (uint256 i = 0; i < _numArray.length; i++) {\\r\\n            uint256 n = i + uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, seed))) % (_numArray.length - i);\\r\\n            uint8 temp = _numArray[n];\\r\\n            _numArray[n] = _numArray[i];\\r\\n            _numArray[i] = temp;\\r\\n        }\\r\\n        return _numArray;\\r\\n    }\\r\\n\\r\\n    // return a randomised number\\r\\n    function _random(uint mod, string memory seed1, string memory seed2, string memory seed3, string memory seed4) private view returns (uint8) {\\r\\n        return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, seed1, seed2, seed3, seed4)))%mod);\\r\\n    }\\r\\n\\r\\n    // unpack coordinates array\\r\\n    function _drawSigil(sigilValues storage s) private view returns (string memory) {\\r\\n        bytes memory sigilBuffer = new bytes(8192);\\r\\n        uint8 _sigNum = s.sigil[0];\\r\\n\\r\\n        Buffer.append(sigilBuffer, string(abi.encodePacked(toString(_coords[_sigNum][0]), ', ', toString(_coords[_sigNum][1]))));\\r\\n        for (uint i=1; i<s.sigil.length; ++i) {\\r\\n            _sigNum = s.sigil[i];\\r\\n            Buffer.append(sigilBuffer, string(abi.encodePacked(' ', toString(_coords[_sigNum][0]), ', ', toString(_coords[_sigNum][1]))));\\r\\n        }\\r\\n\\r\\n        return Buffer.toString(sigilBuffer);\\r\\n    }\\r\\n\\r\\n    function _genSigil(sigilValues storage s, bytes6 color, bytes6[8] storage gradient) private view returns (string memory) {\\r\\n        uint[2] memory _firstCoords = _coords[s.sigil[0]];\\r\\n        uint[2] memory _lastCoords = _coords[s.sigil[s.sigil.length-1]];\\r\\n\\r\\n        string memory sigilCoords = _drawSigil(s);\\r\\n\\r\\n        bytes memory svgBuffer = new bytes(8192);\\r\\n\\r\\n        Buffer.append(svgBuffer, '<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?><svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 440 440\\\"><defs><linearGradient id=\\\"lg\\\" x1=\\\"0\\\" x2=\\\"0\\\" y1=\\\"0\\\" y2=\\\"1\\\">');\\r\\n\\r\\n        for (uint i=0; i<gradient.length; i++) {\\r\\n            string memory offset;\\r\\n            if (i == 0) { offset = '0'; }\\r\\n            if (i == 1) { offset = '14'; }\\r\\n            if (i == 2) { offset = '28'; }\\r\\n            if (i == 3) { offset = '42'; }\\r\\n            if (i == 4) { offset = '56'; }\\r\\n            if (i == 5) { offset = '70'; }\\r\\n            if (i == 6) { offset = '84'; }\\r\\n            if (i == 7) { offset = '100'; }\\r\\n            Buffer.append(svgBuffer, string(abi.encodePacked('<stop offset=\\\"', offset, '%\\\" stop-color=\\\"#', gradient[i], '\\\"/>')));\\r\\n        }\\r\\n\\r\\n        bytes6 floodColor;\\r\\n        if (s.darkBG == 1) {\\r\\n            floodColor = color;\\r\\n        } else {\\r\\n            floodColor = bytes6('f0f0f0');\\r\\n        }\\r\\n\\r\\n        string memory circle;\\r\\n        if (s.rareNumber == 93 || s.rareNumber == 888) {\\r\\n            // mega rares have a special effect layer\\r\\n            circle = string(abi.encodePacked('<filter id=\\\"circEff\\\" color-interpolation-filters=\\\"sRGB\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"200%\\\" height=\\\"200%\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\".01,.2\\\" numOctaves=\\\"2\\\" seed=\\\"',toString(s.rareNumber),'\\\"/><feDiffuseLighting surfaceScale=\\\"1\\\" diffuseConstant=\\\"1\\\" lighting-color=\\\"#ffffff\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\"><feDistantLight azimuth=\\\"15\\\" elevation=\\\"105\\\"/></feDiffuseLighting><feComposite in2=\\\"SourceGraphic\\\" operator=\\\"in\\\"/><feBlend in2=\\\"SourceGraphic\\\" mode=\\\"multiply\\\"/></filter><circle cx=\\\"220\\\" cy=\\\"220\\\" r=\\\"215\\\" stroke-width=\\\"0\\\" fill=\\\"url(#lg)\\\" shape-rendering=\\\"geometricPrecision\\\" filter=\\\"url(#circEff)\\\"/>'));\\r\\n        } else if (s.rareNumber >= 655 && s.rareNumber <= 677) {\\r\\n            // not so rare but still cool, gets rock filter\\r\\n            circle = string(abi.encodePacked('<filter id=\\\"circEff\\\" color-interpolation-filters=\\\"sRGB\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"100%\\\" height=\\\"100%\\\"><feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\".07,.03\\\" numOctaves=\\\"4\\\" seed=\\\"',toString(s.rareNumber),'\\\"/><feDiffuseLighting surfaceScale=\\\"5\\\" diffuseConstant=\\\"0.75\\\" lighting-color=\\\"#fff\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\"><feDistantLight azimuth=\\\"3\\\" elevation=\\\"100\\\"/></feDiffuseLighting><feComposite in2=\\\"SourceGraphic\\\" operator=\\\"in\\\"/><feBlend in=\\\"SourceGraphic\\\" mode=\\\"multiply\\\"/></filter><circle cx=\\\"220\\\" cy=\\\"220\\\" r=\\\"215\\\" stroke-width=\\\"0\\\" fill=\\\"url(#lg)\\\" shape-rendering=\\\"geometricPrecision\\\" filter=\\\"url(#circEff)\\\"/>'));\\r\\n        } else if (s.rareNumber >= 10 && s.rareNumber <= 50) {\\r\\n            // these guys get a fabric effect\\r\\n            circle = string(abi.encodePacked('<filter id=\\\"circEff\\\" color-interpolation-filters=\\\"sRGB\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"100%\\\" height=\\\"100%\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\".03,.003\\\" numOctaves=\\\"1\\\" seed=\\\"',toString(s.rareNumber),'\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 0,0 0 0 0 0,0 0 0 0 0,0 0 0 -1.5 1.1\\\"/><feComposite in=\\\"SourceGraphic\\\" operator=\\\"in\\\"/><feBlend in=\\\"SourceGraphic\\\" mode=\\\"screen\\\"/></filter><circle cx=\\\"220\\\" cy=\\\"220\\\" r=\\\"215\\\" stroke-width=\\\"0\\\" fill=\\\"url(#lg)\\\" shape-rendering=\\\"geometricPrecision\\\" filter=\\\"url(#circEff)\\\"/>'));\\r\\n        } else {\\r\\n            circle = '<circle cx=\\\"220\\\" cy=\\\"220\\\" r=\\\"215\\\" stroke-width=\\\"0\\\" fill=\\\"url(#lg)\\\" shape-rendering=\\\"geometricPrecision\\\"/>';\\r\\n        }\\r\\n        Buffer.append(svgBuffer, string(abi.encodePacked('</linearGradient></defs><filter id=\\\"shadow\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"200%\\\" height=\\\"200%\\\" filterUnits=\\\"userSpaceOnUse\\\"><feGaussianBlur in=\\\"SourceAlpha\\\" stdDeviation=\\\"4\\\"/><feOffset dx=\\\"0\\\" dy=\\\"0\\\" result=\\\"offsetblur\\\"/><feFlood flood-color=\\\"#', floodColor, '\\\" flood-opacity=\\\"0.75\\\"/><feComposite in2=\\\"offsetblur\\\" operator=\\\"in\\\"/><feMerge><feMergeNode/><feMergeNode in=\\\"SourceGraphic\\\"/></feMerge></filter>',circle)));\\r\\n        Buffer.append(svgBuffer, string(abi.encodePacked('<g fill=\\\"none\\\" stroke=\\\"#', color, '\\\" stroke-width=\\\"5\\\" stroke-linejoin=\\\"round\\\" filter=\\\"url(#shadow)\\\" shape-rendering=\\\"geometricPrecision\\\"><polyline points=\\\"', sigilCoords, '\\\" />')));\\r\\n\\r\\n        Buffer.append(svgBuffer, string(abi.encodePacked('<polyline points=\\\"', toString(_lastCoords[0]), ', ', toString(_lastCoords[1] + 10), ', ', toString(_lastCoords[0]), ', ', toString(_lastCoords[1] - 10), '\\\" stroke-linecap=\\\"round\\\" />')));\\r\\n        Buffer.append(svgBuffer, string(abi.encodePacked('<circle cx=\\\"', toString(_firstCoords[0]), '\\\" cy=\\\"', toString(_firstCoords[1]), '\\\" r=\\\"5\\\" fill=\\\"#', color, '\\\"/></g>')));\\r\\n        Buffer.append(svgBuffer, string(abi.encodePacked('<text x=\\\"110\\\" y=\\\"330\\\" fill=\\\"#', color, '\\\" font-size=\\\"80px\\\" font-weight=\\\"bold\\\" stroke=\\\"transparent\\\" fill-opacity=\\\"0.25\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\">', _planetSymbols[s.planetDay], '</text><text x=\\\"330\\\" y=\\\"330\\\" fill=\\\"#', color, '\\\" font-size=\\\"80px\\\" font-weight=\\\"bold\\\" stroke=\\\"transparent\\\" fill-opacity=\\\"0.25\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\">', _planetSymbols[s.planetHour], '</text></svg>')));\\r\\n\\r\\n        return Buffer.toString(svgBuffer);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\\r\\n        string memory jsonOut;\\r\\n        string memory svgOut;\\r\\n\\r\\n        sigilValues storage s = idSigils[tokenId];\\r\\n\\r\\n        bytes6 color;\\r\\n        bytes6[8] storage gradient;\\r\\n        bytes12 gradientDesc;\\r\\n        if (s.rareNumber == 93 || s.rareNumber == 888) {\\r\\n            // this is a super rare mega gold card\\r\\n            color = bytes6('FDF2C3'); // #FDF2C3\\r\\n            gradient = _gradientGold;\\r\\n            gradientDesc = bytes12('gold bullrun');\\r\\n        } else {\\r\\n            // this is a boring normal card\\r\\n            if (s.darkBG == 1) {\\r\\n                color = _colorsLight[s.color];\\r\\n                gradient = _gradientsDark[s.gradient];\\r\\n                gradientDesc = _gradientsDarkDesc[s.gradient];\\r\\n            } else {\\r\\n                color = _colorsDark[s.color];\\r\\n                gradient = _gradientsLight[s.gradient];\\r\\n                gradientDesc = _gradientsLightDesc[s.gradient];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        svgOut = _genSigil(s, color, gradient);\\r\\n\\r\\n        bytes memory jsonBuffer = new bytes(8192);\\r\\n        Buffer.append(jsonBuffer, string(abi.encodePacked('{\\\"name\\\": \\\"Sigil #', toString(tokenId), '\\\", \\\"attributes\\\": [ { \\\"trait_type\\\": \\\"Color\\\", \\\"value\\\": \\\"#', color ,'\\\" }, { \\\"trait_type\\\": \\\"Gradient\\\", \\\"value\\\": \\\"', gradientDesc, '\\\" }, { \\\"trait_type\\\": \\\"Intent\\\", \\\"value\\\": \\\"', s.intent, '\\\" },')));\\r\\n        Buffer.append(jsonBuffer, string(abi.encodePacked(' { \\\"trait_type\\\": \\\"Texture\\\", \\\"value\\\": \\\"', s.texture, '\\\" }, { \\\"trait_type\\\": \\\"Planetary Day\\\", \\\"value\\\": \\\"', _planetNames[s.planetDay], '\\\"}, { \\\"trait_type\\\": \\\"Planetary Hour\\\", \\\"value\\\": \\\"', _planetNames[s.planetHour], '\\\"} ], \\\"description\\\": \\\"Sigils are an on-chain representation of pure intent. Users input their intent after deep reflection and receive this image in response.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(svgOut)), '\\\"}')));\\r\\n        jsonOut = Base64.encode(bytes(Buffer.toString(jsonBuffer)));\\r\\n        bytes memory result = new bytes(8192);\\r\\n        Buffer.append(result, 'data:application/json;base64,');\\r\\n        Buffer.append(result, jsonOut);\\r\\n        return Buffer.toString(result);\\r\\n    }\\r\\n\\r\\n    function mint(string memory intent, uint8 planetDay, uint8 planetHour) internal {\\r\\n        bytes memory intentBytes = bytes(intent);\\r\\n        require(intentBytes.length > 2, \\\"Must provide at least 3 chars\\\");\\r\\n        // we arent actually checking for repeating letters - the only time this happens is when people do dumb stuff via directly interacting with the contract, and who cares if those people make their sigils look dumb\\r\\n        require(intentBytes.length < 22, \\\"No repeating letters\\\");\\r\\n        require(planetDay < 8, \\\"Invalid planetDay\\\");\\r\\n        require(planetHour < 8, \\\"Invalid planetHour\\\");\\r\\n\\r\\n        uint8 ord;\\r\\n        uint8[] memory intentArray = new uint8[](intentBytes.length);\\r\\n        uint8[21] memory shuffleArray = _shuffle(toString(_count));\\r\\n        for (uint i=0; i<intentBytes.length; ++i) {\\r\\n            ord = toUint8(bytes.concat(intentBytes[i]), 0);\\r\\n            require(ord > 97 && ord <= 122, \\\"Only use lowercase latin letters\\\");\\r\\n            require(ord != 101 && ord != 105 && ord != 111 && ord != 117, \\\"No vowels permitted\\\");\\r\\n            // we need to reduce the numbers down to the range of 1-21\\r\\n            // we also map them to the shuffled number thats in shuffleArray\\r\\n            uint8 shufOrd;\\r\\n            if (ord > 97 && ord < 101) {\\r\\n                shufOrd = ord - 98;\\r\\n            } else if (ord > 101 && ord < 105) {\\r\\n                shufOrd = ord - 99;\\r\\n            } else if (ord > 105 && ord < 111) {\\r\\n                shufOrd = ord - 100;\\r\\n            } else if (ord > 111 && ord < 117) {\\r\\n                shufOrd = ord - 101;\\r\\n            } else if (ord > 117) {\\r\\n                shufOrd = ord - 102;\\r\\n            }\\r\\n            intentArray[i] = shuffleArray[shufOrd];\\r\\n        }\\r\\n\\r\\n        if (planetDay == 0) {\\r\\n            // get a random planet, use static seed\\r\\n            planetDay = _random(7, 'planetDay', intent, string(abi.encodePacked(msg.sender)), toString(_count)) + 1;\\r\\n        }\\r\\n        if (planetHour == 0) {\\r\\n            // get a random planet, use static seed\\r\\n            planetHour = _random(7, 'planetHour', intent, string(abi.encodePacked(msg.sender)), toString(_count)) + 1;\\r\\n        }\\r\\n\\r\\n        sigilValues storage thisSigil = idSigils[_count];\\r\\n        thisSigil.planetDay = planetDay;\\r\\n        thisSigil.planetHour = planetHour;\\r\\n        thisSigil.sigil = intentArray;\\r\\n        thisSigil.intent = intentBytes;\\r\\n        thisSigil.gradient = _random(11, 'gradient', intent, string(abi.encodePacked(msg.sender)), toString(_count));\\r\\n        thisSigil.color = _random(11, 'color', intent, string(abi.encodePacked(msg.sender)), toString(_count));\\r\\n        thisSigil.darkBG = _random(2, 'color', intent, string(abi.encodePacked(msg.sender)), toString(_count));\\r\\n\\r\\n        uint16 rareNumber = _random(1000, 'rarity', intent, string(abi.encodePacked(msg.sender)), toString(_count));\\r\\n        thisSigil.rareNumber = rareNumber;\\r\\n        if (rareNumber == 93 || rareNumber == 888) {\\r\\n            thisSigil.texture = 'gold';\\r\\n        } else if (rareNumber >= 655 && rareNumber <= 677) {\\r\\n            thisSigil.texture = 'rock';\\r\\n        } else if (rareNumber >= 10 && rareNumber <= 50) {\\r\\n            thisSigil.texture = 'fabric';\\r\\n        } else {\\r\\n            thisSigil.texture = 'flat';\\r\\n        }\\r\\n\\r\\n        _safeMint(_msgSender(), _count);\\r\\n        ++_count;\\r\\n    }\\r\\n\\r\\n    function mintWithCryptomancy(uint256 _cryptomancyId, string memory _intent, uint8 _planetDay, uint8 _planetHour) external nonReentrant {\\r\\n        require(cryptomancyContract.balanceOf(msg.sender, _cryptomancyId) > 0, \\\"Not the owner of this Cryptomancy.\\\");\\r\\n        require(!_cryptomancyMints[_cryptomancyId], \\\"This Cryptomancy has already been used.\\\");\\r\\n        _cryptomancyMints[_cryptomancyId] = true;\\r\\n        mint(_intent, _planetDay, _planetHour);\\r\\n    }\\r\\n\\r\\n    function mintWithCD(uint256 _cdId, string memory _intent, uint8 _planetDay, uint8 _planetHour) external nonReentrant {\\r\\n        require(cdContract.ownerOf(_cdId) == msg.sender, \\\"Not the owner of this Ghost CD.\\\");\\r\\n        require(!_cdMints[_cdId], \\\"This Ghost CD has already been used.\\\");\\r\\n        _cdMints[_cdId] = true;\\r\\n        mint(_intent, _planetDay, _planetHour);\\r\\n    }\\r\\n\\r\\n    function mintSigil(string memory _intent, uint8 _planetDay, uint8 _planetHour) public payable nonReentrant {\\r\\n        require(msg.value >= _price, \\\"Price is 0.01 ETH!\\\");\\r\\n        // maxSupply should only apply for the paid ones, cd-rom and cryptomancy will always succeed\\r\\n        require(_count < maxSupply, \\\"Capped!\\\");\\r\\n        mint(_intent, _planetDay, _planetHour);\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        address payable ownerDestination = payable(_owner);\\r\\n\\r\\n        ownerDestination.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    event Received(address, uint);\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _count;\\r\\n    }\\r\\n\\r\\n    function claimPrice() external view returns (uint256) {\\r\\n        return _price;\\r\\n    }\\r\\n\\r\\n    function hasClaimedCryptomancy(uint256 id) external view returns (bool) {\\r\\n        return _cryptomancyMints[id];\\r\\n    }\\r\\n\\r\\n    function hasClaimedCD(uint256 id) external view returns (bool) {\\r\\n        return _cdMints[id];\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"hasClaimedCD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"hasClaimedCryptomancy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idSigils\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"planetHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"planetDay\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"darkBG\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"rareNumber\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"intent\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"texture\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_intent\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_planetDay\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_planetHour\",\"type\":\"uint8\"}],\"name\":\"mintSigil\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_intent\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_planetDay\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_planetHour\",\"type\":\"uint8\"}],\"name\":\"mintWithCD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cryptomancyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_intent\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_planetDay\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_planetHour\",\"type\":\"uint8\"}],\"name\":\"mintWithCryptomancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sigils", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}