{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n//#####(#((###(###################(#####(((((###((((#(##((##(########(#((####((###\r\n//####(((######(#(#########(((######(#(#########(((####(##(#########(#((@@#%@#####\r\n//#(###((###(((##############(###(((########(####((((((#(#(######(###(&#@@##@%####\r\n//###(#(((##(#######(#######(##(#(##(#(#######((#((((#####(##(####(#((####(#######\r\n//###((#(###############(########((# (######..###(   ((######(#####(#######(######\r\n//#(#(##(#####################.##/.(####(######(##(((#.(((##(####(#(#########(####\r\n//###((#(#################(##/#./(#((######(#####(####(((#(########(##(#(##(((####\r\n//##((###############(### (###  #(########(#((######((## .(##(#############(######\r\n//#########(##(#(##### .######     (.#### ########(##(((((## /############(#(#(###\r\n//##########(#(##((##. ##########(#( #(## ###########(#((#((# ####################\r\n//####(#(#((#((######, ## ##.#%##(((# ##(, # ,##((((.#(,####  ########(###########\r\n//#######((############.#.##.#.(.(##((  (##  ,  .(#(((.##/##.( ###################\r\n//#(#(#(#####((#(######.#.##.# #%.#(########((((((####(.#.####.##(##########(#(###\r\n//(########(##(((######@@@ ##.###(#((#@#####&&@&####(##,##@&%############(##(#####\r\n//##(###(#(((###((####@%%#,(#######@@%#####%%%%%%#%######,#%%###########(((#######\r\n//((#####(###((########(@%##########%@#####%%%##%@#%#### .%@@###(####(#(###((#####\r\n//#########((#####(#######@####(##########@%@####(#####(##@@#(###########(########\r\n//#####((###(((############@###((########&@%@############@####(#######(###(((#####\r\n//####((#((((((######(####(@%%%(#########&&#%%########(%@%##########(((((((((#####\r\n//(####(#(((#(########(####(@%%%%###################@%%&@##(####((###(#(((#(######\r\n//#####(((###(((##(####(#####@@%@%%########@@@@@##%%%%%@(#######(##(##((####((####\r\n//####(######(#((#(#(#######(#%@#%%%##############%%%%#((#######(#(((######(##(#(#\r\n//##########(###((###(###########@@%%#(###########%@################((####((##((##\r\n//######(##########################&@@#######&%@%%@###################((####(#####\r\n//################################(&######((#%%%%%@####((#################(#######\r\n//#########((###############(((#((#@#(##(##(###&%&@((#############################\r\n//#####(###################((((#%(@@##########@#%@%@@@##(###########((############\r\n//#################(#####(((@@@&#######(########%%%#(##@@@%#######(#(#############\r\n//####(######(##(##(####(%@@####((@@@#(##%#@#(((@&@%%((##(###@@@##(((#############\r\n//##@##@@@###((###@@@@@%###%@@#(##(#####(###########(@@@@@@######@@(##(####(######\r\n//#(#&&(&#&###@#(################(##############((###(###(#######(#%@@%###########\r\n//(##%#######@(#(####((#(###(#((((((######((######(((((((#####((#####@@&((((((####\r\n\r\nlibrary DateTime {\r\n\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n\r\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract RareDream is Ownable {\r\n    uint public SUBSCRIPTION_PRICE_PREMIUM = 0.038 ether;\r\n    uint public SUBSCRIPTION_PRICE_WHALE = 0.075 ether;\r\n\r\n    mapping(address => uint) public subscriptionsPremium;\r\n    mapping(address => uint) public subscriptionsWhale;\r\n\r\n    function setPremiumSubscriptionPrice(uint price) \r\n        onlyOwner \r\n        public\r\n    {\r\n        SUBSCRIPTION_PRICE_PREMIUM = price;\r\n    }\r\n\r\n    function setWhaleSubscriptionPrice(uint price) \r\n        onlyOwner \r\n        public\r\n    {\r\n        SUBSCRIPTION_PRICE_WHALE = price;\r\n    }\r\n    \r\n    function getPremiumSubscriptionPrice() \r\n        public view  \r\n        returns (uint) {\r\n        return SUBSCRIPTION_PRICE_PREMIUM;\r\n    }\r\n\r\n    function getWhaleSubscriptionPrice() \r\n        public view  \r\n        returns (uint) {\r\n        return SUBSCRIPTION_PRICE_WHALE;\r\n    }\r\n\r\n    function subscribePremium() \r\n        public \r\n        payable\r\n    {\r\n        require(msg.value >= SUBSCRIPTION_PRICE_PREMIUM, \"Not enough ethers sent\");\r\n        subscriptionsPremium[msg.sender] = DateTime.addDays(block.timestamp, 30);\r\n    }\r\n\r\n    function subscribeWhale() \r\n        public \r\n        payable\r\n    {\r\n        require(msg.value >= SUBSCRIPTION_PRICE_WHALE, \"Not enough ethers sent\");\r\n        subscriptionsWhale[msg.sender] = DateTime.addDays(block.timestamp, 30);\r\n    }\r\n\r\n    function withdrawAll() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0);\r\n\r\n        _withdraw(owner(), balance);\r\n    }\r\n\r\n    function _withdraw(address _address, uint256 _amount) private {\r\n        (bool success, ) = _address.call{value: _amount}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_PRICE_PREMIUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_PRICE_WHALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiumSubscriptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhaleSubscriptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPremiumSubscriptionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setWhaleSubscriptionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribePremium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribeWhale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptionsPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptionsWhale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RareDream", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e496b413440a8fb014c52107f2cfc83f9bf5257b54c8f8ab94e9c05e3bd0da8"}]}