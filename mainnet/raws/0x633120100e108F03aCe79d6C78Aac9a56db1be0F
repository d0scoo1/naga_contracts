{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IDepositor {\\n\\tfunction deposit(uint256 amount, bool lock, bool stake, address user) external;\\n\\tfunction minter() external returns(address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface ILiquidityGauge {\\n\\n    struct Reward {\\n        address token;\\n        address distributor;\\n        uint256 period_finish;\\n        uint256 rate;\\n        uint256 last_update;\\n        uint256 integral;\\n    }\\n\\n    // solhint-disable-next-line\\n    function deposit_reward_token(address _rewardToken, uint256 _amount) external;\\n    \\n    // solhint-disable-next-line\\n    function claim_rewards_for(address _user, address _recipient) external;\\n\\n    // // solhint-disable-next-line\\n    // function claim_rewards_for(address _user) external;\\n\\n    // solhint-disable-next-line\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    // solhint-disable-next-line\\n    function reward_tokens(uint256 _i) external view returns(address);\\n\\n    // solhint-disable-next-line\\n    function reward_data(address _tokenReward) external view returns(Reward memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVeSDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IVeSDT {\\n\\tstruct LockedBalance {\\n\\t\\tint128 amount;\\n\\t\\tuint256 end;\\n\\t}\\n\\n\\tfunction create_lock(uint256 _value, uint256 _unlock_time) external;\\n\\n\\tfunction increase_amount(uint256 _value) external;\\n\\n\\tfunction increase_unlock_time(uint256 _unlock_time) external;\\n\\n\\tfunction withdraw() external;\\n\\n\\tfunction deposit_for(address, uint256) external;\\n\\n\\tfunction locked(address) external returns(LockedBalance memory);\\n\\n\\tfunction balanceOf(address) external returns(uint256); \\n}\\n\"\r\n    },\r\n    \"contracts/staking/ClaimRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"../interfaces/IDepositor.sol\\\";\\nimport \\\"../interfaces/IVeSDT.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Claim rewards contract:\\n// 1) Users can claim rewards from pps gauge and directly receive all tokens collected.\\n// 2) Users can choose to direcly lock tokens supported by lockers (FXS, ANGLE) and receive the others not supported.\\n// 3) Users can choose to direcly lock tokens supported by lockers (FXS, ANGLE) and stake sdToken into the gauge, then receives the others not supported.\\ncontract ClaimRewards {\\n\\t// using SafeERC20 for IERC20;\\n\\taddress public constant SDT = 0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F;\\n\\taddress public constant veSDT = 0x0C30476f66034E11782938DF8e4384970B6c9e8a;\\n\\taddress public governance;\\n\\n\\tmapping(address => address) public depositors;\\n\\tmapping(address => uint256) public depositorsIndex;\\n\\tmapping(address => uint256) public gauges;\\n\\n\\tstruct LockStatus {\\n\\t\\tbool[] locked;\\n\\t\\tbool[] staked;\\n\\t\\tbool lockSDT;\\n\\t}\\n\\n\\tuint256 public depositorsCount;\\n\\n\\tuint256 private constant MAX_REWARDS = 8;\\n\\n\\tevent GaugeEnabled(address gauge);\\n\\tevent GaugeDisabled(address gauge);\\n\\tevent DepositorEnabled(address token, address depositor);\\n\\tevent Recovered(address token, uint256 amount);\\n\\tevent RewardsClaimed(address[] gauges);\\n\\tevent GovernanceChanged(address oldG, address newG);\\n\\n\\tconstructor() {\\n\\t\\tgovernance = msg.sender;\\n\\t}\\n\\n\\tmodifier onlyGovernance() {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice A function to claim rewards from all the gauges supplied\\n\\t/// @param _gauges Gauges from which rewards are to be claimed\\n\\tfunction claimRewards(address[] calldata _gauges) external {\\n\\t\\tuint256 gaugeLength = _gauges.length;\\n\\t\\tfor (uint256 index = 0; index < gaugeLength; ++index) {\\n\\t\\t\\trequire(gauges[_gauges[index]] > 0, \\\"Gauge not enabled\\\");\\n\\t\\t\\tILiquidityGauge(_gauges[index]).claim_rewards_for(msg.sender, msg.sender);\\n\\t\\t}\\n\\t\\temit RewardsClaimed(_gauges);\\n\\t}\\n\\n\\t/// @notice A function that allows the user to claim, lock and stake tokens retrieved from gauges\\n\\t/// @param _gauges Gauges from which rewards are to be claimed\\n\\t/// @param _lockStatus Status of locks for each reward token suppported by depositors and for SDT\\n\\tfunction claimAndLock(address[] memory _gauges, LockStatus memory _lockStatus) external {\\n\\t\\tLockStatus memory lockStatus = _lockStatus;\\n\\t\\trequire(lockStatus.locked.length == lockStatus.staked.length, \\\"different length\\\");\\n\\t\\trequire(lockStatus.locked.length == depositorsCount, \\\"different depositors length\\\");\\n\\n\\t\\tuint256 gaugeLength = _gauges.length;\\n\\t\\t// Claim rewards token from gauges\\n\\t\\tfor (uint256 index = 0; index < gaugeLength; ++index) {\\n\\t\\t\\taddress gauge = _gauges[index];\\n\\t\\t\\trequire(gauges[gauge] > 0, \\\"Gauge not enabled\\\");\\n\\t\\t\\tILiquidityGauge(gauge).claim_rewards_for(msg.sender, address(this));\\n\\t\\t\\t// skip the first reward token, it is SDT for any LGV4\\n\\t\\t\\t// it loops at most until max rewards, it is hardcoded on LGV4\\n\\t\\t\\tfor (uint256 i = 1; i < MAX_REWARDS; ++i) {\\n\\t\\t\\t\\taddress token = ILiquidityGauge(gauge).reward_tokens(i);\\n\\t\\t\\t\\tif (token == address(0)) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\taddress depositor = depositors[token];\\n\\t\\t\\t\\tuint256 balance = IERC20(token).balanceOf(address(this));\\n\\t\\t\\t\\tif (balance != 0) {\\n\\t\\t\\t\\t\\tif (depositor != address(0) && lockStatus.locked[depositorsIndex[depositor]]) {\\n\\t\\t\\t\\t\\t\\tIERC20(token).approve(depositor, balance);\\n\\t\\t\\t\\t\\t\\tif (lockStatus.staked[depositorsIndex[depositor]]) {\\n\\t\\t\\t\\t\\t\\t\\tIDepositor(depositor).deposit(balance, false, true, msg.sender);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tIDepositor(depositor).deposit(balance, false, false, msg.sender);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tSafeERC20.safeTransfer(IERC20(token), msg.sender, balance);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tuint256 balanceLeft = IERC20(token).balanceOf(address(this));\\n\\t\\t\\t\\t\\trequire(balanceLeft == 0, \\\"wrong amount sent\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Lock SDT for veSDT or send to the user if any\\n\\t\\tuint256 balanceBefore = IERC20(SDT).balanceOf(address(this));\\n\\t\\tif (balanceBefore != 0) {\\n\\t\\t\\tif (lockStatus.lockSDT && IVeSDT(veSDT).balanceOf(msg.sender) > 0) {\\n\\t\\t\\t\\tIERC20(SDT).approve(veSDT, balanceBefore);\\n\\t\\t\\t\\tIVeSDT(veSDT).deposit_for(msg.sender, balanceBefore);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tSafeERC20.safeTransfer(IERC20(SDT), msg.sender, balanceBefore);\\n\\t\\t\\t}\\n\\t\\t\\trequire(IERC20(SDT).balanceOf(address(this)) == 0, \\\"wrong amount sent\\\");\\n\\t\\t}\\n\\n\\t\\temit RewardsClaimed(_gauges);\\n\\t}\\n\\n\\t/// @notice A function that rescue any ERC20 token\\n\\t/// @param _token token address\\n\\t/// @param _amount amount to rescue\\n\\t/// @param _recipient address to send token rescued\\n\\tfunction rescueERC20(\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _recipient\\n\\t) external onlyGovernance {\\n\\t\\trequire(_recipient != address(0), \\\"can't be zero address\\\");\\n\\t\\tSafeERC20.safeTransfer(IERC20(_token), _recipient, _amount);\\n\\n\\t\\temit Recovered(_token, _amount);\\n\\t}\\n\\n\\t/// @notice A function that enable a gauge\\n\\t/// @param _gauge gauge address to enable\\n\\tfunction enableGauge(address _gauge) external onlyGovernance {\\n\\t\\trequire(_gauge != address(0), \\\"can't be zero address\\\");\\n\\t\\trequire(gauges[_gauge] == 0, \\\"already enabled\\\");\\n\\t\\t++gauges[_gauge];\\n\\t\\temit GaugeEnabled(_gauge);\\n\\t}\\n\\n\\t/// @notice A function that disable a gauge\\n\\t/// @param _gauge gauge address to disable\\n\\tfunction disableGauge(address _gauge) external onlyGovernance {\\n\\t\\trequire(_gauge != address(0), \\\"can't be zero address\\\");\\n\\t\\trequire(gauges[_gauge] == 1, \\\"already disabled\\\");\\n\\t\\t--gauges[_gauge];\\n\\t\\temit GaugeDisabled(_gauge);\\n\\t}\\n\\n\\t/// @notice A function that add a new depositor for a specific token\\n\\t/// @param _token token address\\n\\t/// @param _depositor depositor address\\n\\tfunction addDepositor(address _token, address _depositor) external onlyGovernance {\\n\\t\\trequire(_token != address(0), \\\"can't be zero address\\\");\\n\\t\\trequire(_depositor != address(0), \\\"can't be zero address\\\");\\n\\t\\trequire(depositors[_token] == address(0), \\\"already added\\\");\\n\\t\\tdepositors[_token] = _depositor;\\n\\t\\tdepositorsIndex[_depositor] = depositorsCount;\\n\\t\\t++depositorsCount;\\n\\t\\temit DepositorEnabled(_token, _depositor);\\n\\t}\\n\\n\\t/// @notice A function that set the governance address\\n\\t/// @param _governance governance address\\n\\tfunction setGovernance(address _governance) external onlyGovernance {\\n\\t\\trequire(_governance != address(0), \\\"can't be zero address\\\");\\n\\t\\temit GovernanceChanged(governance, _governance);\\n\\t\\tgovernance = _governance;\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"DepositorEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldG\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newG\",\"type\":\"address\"}],\"name\":\"GovernanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"addDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool[]\",\"name\":\"locked\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"staked\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"lockSDT\",\"type\":\"bool\"}],\"internalType\":\"struct ClaimRewards.LockStatus\",\"name\":\"_lockStatus\",\"type\":\"tuple\"}],\"name\":\"claimAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositorsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"disableGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"enableGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClaimRewards", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}