{"status": "1", "message": "OK", "result": [{"SourceCode": "// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822ProxiableUpgradeable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\r\n    function __ERC1967Upgrade_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.5.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\r\n    }\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\r\n     * callable on the implementing contract but not through proxies.\r\n     */\r\n    modifier notDelegated() {\r\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\r\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\r\n     */\r\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\r\n        return _IMPLEMENTATION_SLOT;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/core/IKODAV3Minter.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IKODAV3Minter {\r\n\r\n    function mintBatchEdition(uint16 _editionSize, address _to, string calldata _uri) external returns (uint256 _editionId);\r\n\r\n    function mintBatchEditionAndComposeERC20s(uint16 _editionSize, address _to, string calldata _uri, address[] calldata _erc20s, uint256[] calldata _amounts) external returns (uint256 _editionId);\r\n\r\n    function mintConsecutiveBatchEdition(uint16 _editionSize, address _to, string calldata _uri) external returns (uint256 _editionId);\r\n}\r\n\r\n\r\n// File contracts/marketplace/IKODAV3Marketplace.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IBuyNowMarketplace {\r\n    event ListedForBuyNow(uint256 indexed _id, uint256 _price, address _currentOwner, uint256 _startDate);\r\n    event BuyNowPriceChanged(uint256 indexed _id, uint256 _price);\r\n    event BuyNowDeListed(uint256 indexed _id);\r\n    event BuyNowPurchased(uint256 indexed _tokenId, address _buyer, address _currentOwner, uint256 _price);\r\n\r\n    function listForBuyNow(address _creator, uint256 _id, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function buyEditionToken(uint256 _id) external payable;\r\n    function buyEditionTokenFor(uint256 _id, address _recipient) external payable;\r\n\r\n    function setBuyNowPriceListing(uint256 _editionId, uint128 _listingPrice) external;\r\n}\r\n\r\ninterface IEditionOffersMarketplace {\r\n    event EditionAcceptingOffer(uint256 indexed _editionId, uint128 _startDate);\r\n    event EditionBidPlaced(uint256 indexed _editionId, address _bidder, uint256 _amount);\r\n    event EditionBidWithdrawn(uint256 indexed _editionId, address _bidder);\r\n    event EditionBidAccepted(uint256 indexed _editionId, uint256 indexed _tokenId, address _bidder, uint256 _amount);\r\n    event EditionBidRejected(uint256 indexed _editionId, address _bidder, uint256 _amount);\r\n    event EditionConvertedFromOffersToBuyItNow(uint256 _editionId, uint128 _price, uint128 _startDate);\r\n\r\n    function enableEditionOffers(uint256 _editionId, uint128 _startDate) external;\r\n\r\n    function placeEditionBid(uint256 _editionId) external payable;\r\n    function placeEditionBidFor(uint256 _editionId, address _bidder) external payable;\r\n\r\n    function withdrawEditionBid(uint256 _editionId) external;\r\n\r\n    function rejectEditionBid(uint256 _editionId) external;\r\n\r\n    function acceptEditionBid(uint256 _editionId, uint256 _offerPrice) external;\r\n\r\n    function convertOffersToBuyItNow(uint256 _editionId, uint128 _listingPrice, uint128 _startDate) external;\r\n}\r\n\r\ninterface IEditionSteppedMarketplace {\r\n    event EditionSteppedSaleListed(uint256 indexed _editionId, uint128 _basePrice, uint128 _stepPrice, uint128 _startDate);\r\n    event EditionSteppedSaleBuy(uint256 indexed _editionId, uint256 indexed _tokenId, address _buyer, uint256 _price, uint16 _currentStep);\r\n    event EditionSteppedAuctionUpdated(uint256 indexed _editionId, uint128 _basePrice, uint128 _stepPrice);\r\n\r\n    function listSteppedEditionAuction(address _creator, uint256 _editionId, uint128 _basePrice, uint128 _stepPrice, uint128 _startDate) external;\r\n\r\n    function buyNextStep(uint256 _editionId) external payable;\r\n    function buyNextStepFor(uint256 _editionId, address _buyer) external payable;\r\n\r\n    function convertSteppedAuctionToListing(uint256 _editionId, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function convertSteppedAuctionToOffers(uint256 _editionId, uint128 _startDate) external;\r\n\r\n    function updateSteppedAuction(uint256 _editionId, uint128 _basePrice, uint128 _stepPrice) external;\r\n}\r\n\r\ninterface IReserveAuctionMarketplace {\r\n    event ListedForReserveAuction(uint256 indexed _id, uint256 _reservePrice, uint128 _startDate);\r\n    event BidPlacedOnReserveAuction(uint256 indexed _id, address _currentOwner, address _bidder, uint256 _amount, uint256 _originalBiddingEnd, uint256 _currentBiddingEnd);\r\n    event ReserveAuctionResulted(uint256 indexed _id, uint256 _finalPrice, address _currentOwner, address _winner, address _resulter);\r\n    event BidWithdrawnFromReserveAuction(uint256 _id, address _bidder, uint128 _bid);\r\n    event ReservePriceUpdated(uint256 indexed _id, uint256 _reservePrice);\r\n    event ReserveAuctionConvertedToBuyItNow(uint256 indexed _id, uint128 _listingPrice, uint128 _startDate);\r\n    event EmergencyBidWithdrawFromReserveAuction(uint256 indexed _id, address _bidder, uint128 _bid);\r\n\r\n    function placeBidOnReserveAuction(uint256 _id) external payable;\r\n    function placeBidOnReserveAuctionFor(uint256 _id, address _bidder) external payable;\r\n\r\n    function listForReserveAuction(address _creator, uint256 _id, uint128 _reservePrice, uint128 _startDate) external;\r\n\r\n    function resultReserveAuction(uint256 _id) external;\r\n\r\n    function withdrawBidFromReserveAuction(uint256 _id) external;\r\n\r\n    function updateReservePriceForReserveAuction(uint256 _id, uint128 _reservePrice) external;\r\n\r\n    function emergencyExitBidFromReserveAuction(uint256 _id) external;\r\n}\r\n\r\ninterface IKODAV3PrimarySaleMarketplace is IEditionSteppedMarketplace, IEditionOffersMarketplace, IBuyNowMarketplace, IReserveAuctionMarketplace {\r\n    function convertReserveAuctionToBuyItNow(uint256 _editionId, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function convertReserveAuctionToOffers(uint256 _editionId, uint128 _startDate) external;\r\n}\r\n\r\ninterface ITokenBuyNowMarketplace {\r\n    event TokenDeListed(uint256 indexed _tokenId);\r\n\r\n    function delistToken(uint256 _tokenId) external;\r\n}\r\n\r\ninterface ITokenOffersMarketplace {\r\n    event TokenBidPlaced(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n    event TokenBidAccepted(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n    event TokenBidRejected(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n    event TokenBidWithdrawn(uint256 indexed _tokenId, address _bidder);\r\n\r\n    function acceptTokenBid(uint256 _tokenId, uint256 _offerPrice) external;\r\n\r\n    function rejectTokenBid(uint256 _tokenId) external;\r\n\r\n    function withdrawTokenBid(uint256 _tokenId) external;\r\n\r\n    function placeTokenBid(uint256 _tokenId) external payable;\r\n    function placeTokenBidFor(uint256 _tokenId, address _bidder) external payable;\r\n}\r\n\r\ninterface IBuyNowSecondaryMarketplace {\r\n    function listTokenForBuyNow(uint256 _tokenId, uint128 _listingPrice, uint128 _startDate) external;\r\n}\r\n\r\ninterface IEditionOffersSecondaryMarketplace {\r\n    event EditionBidPlaced(uint256 indexed _editionId, address indexed _bidder, uint256 _bid);\r\n    event EditionBidWithdrawn(uint256 indexed _editionId, address _bidder);\r\n    event EditionBidAccepted(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n\r\n    function placeEditionBid(uint256 _editionId) external payable;\r\n    function placeEditionBidFor(uint256 _editionId, address _bidder) external payable;\r\n\r\n    function withdrawEditionBid(uint256 _editionId) external;\r\n\r\n    function acceptEditionBid(uint256 _tokenId, uint256 _offerPrice) external;\r\n}\r\n\r\ninterface IKODAV3SecondarySaleMarketplace is ITokenBuyNowMarketplace, ITokenOffersMarketplace, IEditionOffersSecondaryMarketplace, IBuyNowSecondaryMarketplace {\r\n    function convertReserveAuctionToBuyItNow(uint256 _tokenId, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function convertReserveAuctionToOffers(uint256 _tokenId) external;\r\n}\r\n\r\ninterface IKODAV3GatedMarketplace {\r\n\r\n    function createSale(uint256 _editionId) external;\r\n\r\n    function createPhase(\r\n        uint256 _editionId,\r\n        uint128 _startTime,\r\n        uint128 _endTime,\r\n        uint128 _priceInWei,\r\n        uint16 _mintCap,\r\n        uint16 _walletMintLimit,\r\n        bytes32 _merkleRoot,\r\n        string calldata _merkleIPFSHash\r\n    ) external;\r\n\r\n    function createSaleWithPhases(\r\n        uint256 _editionId,\r\n        uint128[] memory _startTimes,\r\n        uint128[] memory _endTimes,\r\n        uint128[] memory _pricesInWei,\r\n        uint16[] memory _mintCaps,\r\n        uint16[] memory _walletMintLimits,\r\n        bytes32[] memory _merkleRoots,\r\n        string[] memory _merkleIPFSHashes\r\n    ) external;\r\n\r\n    function createPhases(\r\n        uint256 _editionId,\r\n        uint128[] memory _startTimes,\r\n        uint128[] memory _endTimes,\r\n        uint128[] memory _pricesInWei,\r\n        uint16[] memory _mintCaps,\r\n        uint16[] memory _walletMintLimits,\r\n        bytes32[] memory _merkleRoots,\r\n        string[] memory _merkleIPFSHashes\r\n    ) external;\r\n\r\n    function removePhase(uint256 _editionId, uint256 _phaseId) external;\r\n}\r\n\r\n\r\n// File contracts/collab/ICollabRoyaltiesRegistry.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @notice Common interface to the edition royalties registry\r\ninterface ICollabRoyaltiesRegistry {\r\n\r\n    /// @notice Creates & deploys a new royalties recipient, cloning _handle and setting it up with the provided _recipients and _splits\r\n    function createRoyaltiesRecipient(\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    ) external returns (address deployedHandler);\r\n\r\n    /// @notice Sets up the provided edition to use the provided _recipient\r\n    function useRoyaltiesRecipient(uint256 _editionId, address _deployedHandler) external;\r\n\r\n    /// @notice Setup a royalties handler but does not deploy it, uses predicable clone and sets this against the edition\r\n    function usePredeterminedRoyaltiesRecipient(\r\n        uint256 _editionId,\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    ) external;\r\n\r\n    /// @notice Deploy and setup a royalties recipient for the given edition\r\n    function createAndUseRoyaltiesRecipient(\r\n        uint256 _editionId,\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    )\r\n    external returns (address deployedHandler);\r\n\r\n    /// @notice Predict the deployed clone address with the given parameters\r\n    function predictedRoyaltiesHandler(\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    ) external view returns (address predictedHandler);\r\n\r\n}\r\n\r\n\r\n// File contracts/access/IKOAccessControlsLookup.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IKOAccessControlsLookup {\r\n    function hasAdminRole(address _address) external view returns (bool);\r\n\r\n    function isVerifiedArtist(uint256 _index, address _account, bytes32[] calldata _merkleProof) external view returns (bool);\r\n\r\n    function isVerifiedArtistProxy(address _artist, address _proxy) external view returns (bool);\r\n\r\n    function hasLegacyMinterRole(address _address) external view returns (bool);\r\n\r\n    function hasContractRole(address _address) external view returns (bool);\r\n\r\n    function hasContractOrAdminRole(address _address) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/minter/MintingFactoryV2.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract MintingFactoryV2 is Context, UUPSUpgradeable {\r\n\r\n    event EditionMinted(uint256 indexed _editionId);\r\n    event EditionMintedAndListed(uint256 indexed _editionId, SaleType _saleType);\r\n\r\n    event MintingFactoryCreated();\r\n    event AdminMintingPeriodChanged(uint256 _mintingPeriod);\r\n    event AdminMaxMintsInPeriodChanged(uint256 _maxMintsInPeriod);\r\n    event AdminFrequencyOverrideChanged(address _account, bool _override);\r\n    event AdminRoyaltiesRegistryChanged(address _royaltiesRegistry);\r\n\r\n    modifier onlyAdmin() {\r\n        require(accessControls.hasAdminRole(_msgSender()), \"Caller must have admin role\");\r\n        _;\r\n    }\r\n\r\n    modifier canMintAgain(address _sender) {\r\n        require(_canCreateNewEdition(_sender), \"Caller unable to create yet\");\r\n        _;\r\n    }\r\n\r\n    struct MintingPeriod {\r\n        uint128 mints;\r\n        uint128 firstMintInPeriod;\r\n    }\r\n\r\n    enum SaleType {\r\n        BUY_NOW, OFFERS, STEPPED, RESERVE\r\n    }\r\n\r\n    // Minting allowance period\r\n    uint256 public mintingPeriod;\r\n\r\n    // Limit of mints with in the period\r\n    uint256 public maxMintsInPeriod;\r\n\r\n    // Frequency override list for users - you can temporarily add in address which disables the freeze time check\r\n    mapping(address => bool) public frequencyOverride;\r\n\r\n    // How many mints within the current minting period\r\n    mapping(address => MintingPeriod) mintingPeriodConfig;\r\n\r\n    IKOAccessControlsLookup public accessControls;\r\n    IKODAV3Minter public koda;\r\n    IKODAV3PrimarySaleMarketplace public marketplace;\r\n    IKODAV3GatedMarketplace public gatedMarketplace;\r\n    ICollabRoyaltiesRegistry public royaltiesRegistry;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() initializer {}\r\n\r\n    function initialize(\r\n        IKOAccessControlsLookup _accessControls,\r\n        IKODAV3Minter _koda,\r\n        IKODAV3PrimarySaleMarketplace _marketplace,\r\n        IKODAV3GatedMarketplace _gatedMarketplace,\r\n        ICollabRoyaltiesRegistry _royaltiesRegistry\r\n    ) public initializer {\r\n\r\n        accessControls = _accessControls;\r\n        koda = _koda;\r\n        marketplace = _marketplace;\r\n        gatedMarketplace = _gatedMarketplace;\r\n        royaltiesRegistry = _royaltiesRegistry;\r\n\r\n        mintingPeriod = 30 days;\r\n        maxMintsInPeriod = 15;\r\n\r\n        emit MintingFactoryCreated();\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal view override {\r\n        require(accessControls.hasAdminRole(msg.sender), \"Only admin can upgrade\");\r\n    }\r\n\r\n    //////////////////////////////////////////\r\n    /// Mint & setup on primary marketplace //\r\n    //////////////////////////////////////////\r\n\r\n    function mintBatchEdition(\r\n        SaleType _saleType,\r\n        uint16 _editionSize,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        uint256 _merkleIndex,\r\n        bytes32[] calldata _merkleProof,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain(_msgSender()) external {\r\n        require(accessControls.isVerifiedArtist(_merkleIndex, _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _msgSender(), _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_msgSender());\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintBatchEditionAsProxy(\r\n        address _creator,\r\n        SaleType _saleType,\r\n        uint16 _editionSize,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain(_creator) external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _creator, _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_creator);\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    //////////////////////////////////////\r\n    /// Mint & setup on gated only drop //\r\n    //////////////////////////////////////\r\n\r\n    function mintBatchEditionGatedOnly(\r\n        uint16 _editionSize,\r\n        uint256 _merkleIndex,\r\n        bytes32[] calldata _merkleProof,\r\n        address _deployedRoyaltiesHandler,\r\n        string calldata _uri\r\n    ) canMintAgain(_msgSender()) external {\r\n        require(accessControls.isVerifiedArtist(_merkleIndex, _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _msgSender(), _uri);\r\n\r\n        // Created gated sale\r\n        gatedMarketplace.createSale(editionId);\r\n\r\n        _recordSuccessfulMint(_msgSender());\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintBatchEditionGatedOnlyAsProxy(\r\n        address _creator,\r\n        uint16 _editionSize,\r\n        address _deployedRoyaltiesHandler,\r\n        string calldata _uri\r\n    ) canMintAgain(_creator) external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _creator, _uri);\r\n\r\n        // Created gated sale\r\n        gatedMarketplace.createSale(editionId);\r\n\r\n        _recordSuccessfulMint(_creator);\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    //////////////////////////////////////////\r\n    /// Mint & setup on gated & public drop //\r\n    //////////////////////////////////////////\r\n\r\n    function mintBatchEditionGatedAndPublic(\r\n        uint16 _editionSize,\r\n        uint128 _publicStartDate,\r\n        uint128 _publicBuyNowPrice,\r\n        uint256 _merkleIndex,\r\n        bytes32[] calldata _merkleProof,\r\n        address _deployedRoyaltiesHandler,\r\n        string calldata _uri\r\n    ) canMintAgain(_msgSender()) external {\r\n        require(accessControls.isVerifiedArtist(_merkleIndex, _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _msgSender(), _uri);\r\n\r\n        // Setup public sale\r\n        _setupSalesMechanic(editionId, SaleType.BUY_NOW, _publicStartDate, _publicBuyNowPrice, 0);\r\n\r\n        // Created gated sale\r\n        gatedMarketplace.createSale(editionId);\r\n\r\n        _recordSuccessfulMint(_msgSender());\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintBatchEditionGatedAndPublicAsProxy(\r\n        address _creator,\r\n        uint16 _editionSize,\r\n        uint128 _publicStartDate,\r\n        uint128 _publicBuyNowPrice,\r\n        address _deployedRoyaltiesHandler,\r\n        string calldata _uri\r\n    ) canMintAgain(_creator) external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _creator, _uri);\r\n\r\n        // Setup public sale\r\n        _setupSalesMechanic(editionId, SaleType.BUY_NOW, _publicStartDate, _publicBuyNowPrice, 0);\r\n\r\n        // Created gated sale\r\n        gatedMarketplace.createSale(editionId);\r\n\r\n        _recordSuccessfulMint(_creator);\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    ////////////////\r\n    /// Mint only //\r\n    ////////////////\r\n\r\n    function mintBatchEditionOnly(\r\n        uint16 _editionSize,\r\n        uint256 _merkleIndex,\r\n        bytes32[] calldata _merkleProof,\r\n        address _deployedRoyaltiesHandler,\r\n        string calldata _uri\r\n    ) canMintAgain(_msgSender()) external {\r\n        require(accessControls.isVerifiedArtist(_merkleIndex, _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _msgSender(), _uri);\r\n\r\n        _recordSuccessfulMint(_msgSender());\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n\r\n        emit EditionMinted(editionId);\r\n    }\r\n\r\n    function mintBatchEditionOnlyAsProxy(\r\n        address _creator,\r\n        uint16 _editionSize,\r\n        address _deployedRoyaltiesHandler,\r\n        string calldata _uri\r\n    ) canMintAgain(_creator) external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _creator, _uri);\r\n\r\n        _recordSuccessfulMint(_creator);\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n\r\n        emit EditionMinted(editionId);\r\n    }\r\n\r\n    ///////////////////////\r\n    /// Internal helpers //\r\n    ///////////////////////\r\n\r\n    function _setupSalesMechanic(uint256 _editionId, SaleType _saleType, uint128 _startDate, uint128 _basePrice, uint128 _stepPrice) internal {\r\n        if (SaleType.BUY_NOW == _saleType) {\r\n            marketplace.listForBuyNow(_msgSender(), _editionId, _basePrice, _startDate);\r\n        }\r\n        else if (SaleType.STEPPED == _saleType) {\r\n            marketplace.listSteppedEditionAuction(_msgSender(), _editionId, _basePrice, _stepPrice, _startDate);\r\n        }\r\n        else if (SaleType.OFFERS == _saleType) {\r\n            marketplace.enableEditionOffers(_editionId, _startDate);\r\n        }\r\n        else if (SaleType.RESERVE == _saleType) {\r\n            // use base price for reserve price\r\n            marketplace.listForReserveAuction(_msgSender(), _editionId, _basePrice, _startDate);\r\n        }\r\n\r\n        emit EditionMintedAndListed(_editionId, _saleType);\r\n    }\r\n\r\n    function _setupRoyalties(uint256 _editionId, address _deployedHandler) internal {\r\n        if (_deployedHandler != address(0) && address(royaltiesRegistry) != address(0)) {\r\n            royaltiesRegistry.useRoyaltiesRecipient(_editionId, _deployedHandler);\r\n        }\r\n    }\r\n\r\n    function _canCreateNewEdition(address _account) internal view returns (bool) {\r\n        // if frequency is overridden then assume they can mint\r\n        if (frequencyOverride[_account]) {\r\n            return true;\r\n        }\r\n\r\n        // if within the period range, check remaining allowance\r\n        if (_getNow() <= mintingPeriodConfig[_account].firstMintInPeriod + mintingPeriod) {\r\n            return mintingPeriodConfig[_account].mints < maxMintsInPeriod;\r\n        }\r\n\r\n        // if period expired - can mint another one\r\n        return true;\r\n    }\r\n\r\n    function _recordSuccessfulMint(address _account) internal {\r\n        MintingPeriod storage period = mintingPeriodConfig[_account];\r\n\r\n        uint256 endOfCurrentMintingPeriodLimit = period.firstMintInPeriod + mintingPeriod;\r\n\r\n        // if first time use, set the first timestamp to be now abd start counting\r\n        if (period.firstMintInPeriod == 0) {\r\n            period.firstMintInPeriod = _getNow();\r\n            period.mints = period.mints + 1;\r\n        }\r\n        // if still within the minting period, record the new mint\r\n        else if (_getNow() <= endOfCurrentMintingPeriodLimit) {\r\n            period.mints = period.mints + 1;\r\n        }\r\n        // if we are outside of the window reset the limit and record a new single mint\r\n        else if (endOfCurrentMintingPeriodLimit < _getNow()) {\r\n            period.mints = 1;\r\n            period.firstMintInPeriod = _getNow();\r\n        }\r\n    }\r\n\r\n    function _getNow() internal virtual view returns (uint128) {\r\n        return uint128(block.timestamp);\r\n    }\r\n\r\n    /// Public helpers\r\n\r\n    function canCreateNewEdition(address _account) public view returns (bool) {\r\n        return _canCreateNewEdition(_account);\r\n    }\r\n\r\n    function currentMintConfig(address _account) public view returns (uint128 mints, uint128 firstMintInPeriod) {\r\n        MintingPeriod memory config = mintingPeriodConfig[_account];\r\n        return (\r\n        config.mints,\r\n        config.firstMintInPeriod\r\n        );\r\n    }\r\n\r\n    function setFrequencyOverride(address _account, bool _override) onlyAdmin public {\r\n        frequencyOverride[_account] = _override;\r\n        emit AdminFrequencyOverrideChanged(_account, _override);\r\n    }\r\n\r\n    function setMintingPeriod(uint256 _mintingPeriod) onlyAdmin public {\r\n        mintingPeriod = _mintingPeriod;\r\n        emit AdminMintingPeriodChanged(_mintingPeriod);\r\n    }\r\n\r\n    function setRoyaltiesRegistry(ICollabRoyaltiesRegistry _royaltiesRegistry) onlyAdmin public {\r\n        royaltiesRegistry = _royaltiesRegistry;\r\n        emit AdminRoyaltiesRegistryChanged(address(_royaltiesRegistry));\r\n    }\r\n\r\n    function setMaxMintsInPeriod(uint256 _maxMintsInPeriod) onlyAdmin public {\r\n        maxMintsInPeriod = _maxMintsInPeriod;\r\n        emit AdminMaxMintsInPeriodChanged(_maxMintsInPeriod);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"AdminFrequencyOverrideChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxMintsInPeriod\",\"type\":\"uint256\"}],\"name\":\"AdminMaxMintsInPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintingPeriod\",\"type\":\"uint256\"}],\"name\":\"AdminMintingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_royaltiesRegistry\",\"type\":\"address\"}],\"name\":\"AdminRoyaltiesRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"EditionMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum MintingFactoryV2.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"}],\"name\":\"EditionMintedAndListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFactoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract IKOAccessControlsLookup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canCreateNewEdition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"currentMintConfig\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"mints\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"firstMintInPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frequencyOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatedMarketplace\",\"outputs\":[{\"internalType\":\"contract IKODAV3GatedMarketplace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKOAccessControlsLookup\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"contract IKODAV3Minter\",\"name\":\"_koda\",\"type\":\"address\"},{\"internalType\":\"contract IKODAV3PrimarySaleMarketplace\",\"name\":\"_marketplace\",\"type\":\"address\"},{\"internalType\":\"contract IKODAV3GatedMarketplace\",\"name\":\"_gatedMarketplace\",\"type\":\"address\"},{\"internalType\":\"contract ICollabRoyaltiesRegistry\",\"name\":\"_royaltiesRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koda\",\"outputs\":[{\"internalType\":\"contract IKODAV3Minter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"contract IKODAV3PrimarySaleMarketplace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintingFactoryV2.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintBatchEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"enum MintingFactoryV2.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintBatchEditionAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_publicStartDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_publicBuyNowPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintBatchEditionGatedAndPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_publicStartDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_publicBuyNowPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintBatchEditionGatedAndPublicAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintBatchEditionGatedOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintBatchEditionGatedOnlyAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintBatchEditionOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintBatchEditionOnlyAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract ICollabRoyaltiesRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"setFrequencyOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintsInPeriod\",\"type\":\"uint256\"}],\"name\":\"setMaxMintsInPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingPeriod\",\"type\":\"uint256\"}],\"name\":\"setMintingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICollabRoyaltiesRegistry\",\"name\":\"_royaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MintingFactoryV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75ac34f202f4dfcb21505a7f16f8a87c4894e72b613fe92bfbce67a010f40f3b"}]}