{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/QlindoTaskManager.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./arteq-tech/contracts/TaskManager.sol\\\";\\n\\n/// @notice Use at your own risk\\ncontract QlindoTaskManager is TaskManager {\\n\\n    constructor(\\n        address[] memory initialAdmins,\\n        address[] memory initialCreators,\\n        address[] memory initialApprovers,\\n        address[] memory initialExecutors,\\n        bool enableDeposit\\n    ) TaskManager(\\n        initialAdmins,\\n        initialCreators,\\n        initialApprovers,\\n        initialExecutors,\\n        enableDeposit\\n    ) {}\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/TaskManager.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./interfaces/ITaskExecutor.sol\\\";\\nimport \\\"./abstract/task-manager/AdminTaskManaged.sol\\\";\\nimport \\\"./abstract/task-manager/CreatorRoleEnabled.sol\\\";\\nimport \\\"./abstract/task-manager/ApproverRoleEnabled.sol\\\";\\nimport \\\"./abstract/task-manager/ExecutorRoleEnabled.sol\\\";\\nimport \\\"./abstract/task-manager/FinalizerRoleEnabled.sol\\\";\\nimport \\\"./abstract/task-manager/ETHVaultEnabled.sol\\\";\\nimport \\\"./abstract/task-manager/ERC20VaultEnabled.sol\\\";\\nimport \\\"./abstract/task-manager/ERC721VaultEnabled.sol\\\";\\nimport \\\"./abstract/task-manager/ERC1155VaultEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\ncontract TaskManager is\\n  ITaskExecutor,\\n  AdminTaskManaged,\\n  CreatorRoleEnabled,\\n  ApproverRoleEnabled,\\n  ExecutorRoleEnabled,\\n  FinalizerRoleEnabled,\\n  ETHVaultEnabled,\\n  ERC20VaultEnabled,\\n  ERC721VaultEnabled,\\n  ERC1155VaultEnabled,\\n  ERC165\\n{\\n    modifier onlyPrivileged() {\\n        require(\\n            _isAdmin(msg.sender) ||\\n            _isCreator(msg.sender) ||\\n            _isApprover(msg.sender) ||\\n            _isExecutor(msg.sender),\\n            \\\"TaskManager: not a privileged account\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n      address[] memory initialAdmins,\\n      address[] memory initialCreators,\\n      address[] memory initialApprovers,\\n      address[] memory initialExecutors,\\n      bool enableDeposit\\n    ) {\\n        require(initialAdmins.length >= MIN_NR_OF_ADMINS, \\\"TaskManager: not enough initial admins\\\");\\n        for (uint i = 0; i < initialAdmins.length; i++) {\\n            _addAdmin(initialAdmins[i]);\\n        }\\n        require(initialCreators.length >= 1, \\\"TaskManager: not enough initial creators\\\");\\n        for (uint i = 0; i < initialCreators.length; i++) {\\n            _addCreator(initialCreators[i]);\\n        }\\n        require(initialApprovers.length >= 3, \\\"TaskManager: not enough initial approvers\\\");\\n        for (uint i = 0; i < initialApprovers.length; i++) {\\n            _addApprover(initialApprovers[i]);\\n        }\\n        require(initialExecutors.length >= 1, \\\"TaskManager: not enough initial executors\\\");\\n        for (uint i = 0; i < initialExecutors.length; i++) {\\n            _addExecutor(initialExecutors[i]);\\n        }\\n        _setEnableDeposit(enableDeposit);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n      public view virtual override(ERC1155Vault, ERC165) returns (bool)\\n    {\\n        return interfaceId == type(ITaskExecutor).interfaceId ||\\n               interfaceId == type(IERC1155Receiver).interfaceId ||\\n               interfaceId == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    function stats() external view onlyAdmin returns (uint, uint, uint, uint, uint) {\\n        return (_nrOfAdmins, _nrOfCreators, _nrOfApprovers, _nrOfExecutors, _nrOfFinalizers);\\n    }\\n\\n    function isFinalized(uint256 taskId) external view\\n      onlyPrivileged\\n      taskMustExist(taskId)\\n      returns (bool)\\n    {\\n        if (_isTaskAdministrative(taskId)) {\\n            require(_isAdmin(msg.sender), \\\"TaskManager: not an admin account\\\");\\n        }\\n        return _isTaskFinalized(taskId);\\n    }\\n\\n    function getTaskURI(uint256 taskId) external view\\n      onlyPrivileged\\n      taskMustExist(taskId)\\n      returns (string memory)\\n    {\\n        if (_isTaskAdministrative(taskId)) {\\n            require(_isAdmin(msg.sender), \\\"TaskManager: not an admin account\\\");\\n        }\\n        return _getTaskURI(taskId);\\n    }\\n\\n    function getNrOfApprovals(uint256 taskId) external view\\n      onlyPrivileged\\n      taskMustExist(taskId)\\n      returns (uint)\\n    {\\n        if (_isTaskAdministrative(taskId)) {\\n            require(_isAdmin(msg.sender), \\\"TaskManager: not an admin account\\\");\\n        }\\n        return _getTaskNrApprovals(taskId);\\n    }\\n\\n    function createTask(string memory taskURI) external\\n      onlyCreator\\n    {\\n        _createTask(taskURI, false);\\n    }\\n\\n    function finalizeTask(uint256 taskId, string memory reason) external\\n      onlyCreatorOrAdmin\\n      taskMustExist(taskId)\\n      taskMustNotBeAdministrative(taskId)\\n      taskMustNotBeFinalized(taskId)\\n    {\\n        _finalizeTask(taskId, reason);\\n    }\\n\\n    function approveTask(uint256 taskId) external\\n      onlyApprover\\n      taskMustExist(taskId)\\n      taskMustNotBeAdministrative(taskId)\\n      taskMustNotBeFinalized(taskId)\\n    {\\n        _approveTask(msg.sender, taskId);\\n    }\\n\\n    function withdrawTaskApproval(uint256 taskId) external\\n      onlyApprover\\n      taskMustExist(taskId)\\n      taskMustNotBeAdministrative(taskId)\\n      taskMustNotBeFinalized(taskId)\\n    {\\n        _withdrawTaskApproval(msg.sender, taskId);\\n    }\\n\\n    function executeTask(address origin, uint256 taskId) external virtual override\\n      onlyFinalizer\\n      mustBeExecutor(origin)\\n      taskMustExist(taskId)\\n      taskMustNotBeAdministrative(taskId)\\n      taskMustBeApproved(taskId)\\n      taskMustNotBeFinalized(taskId)\\n    {\\n        _finalizeTask(taskId, \\\"\\\");\\n        emit TaskExecuted(msg.sender, origin, taskId);\\n    }\\n\\n    function executeAdminTask(address origin, uint256 taskId) external virtual override\\n      onlyFinalizer\\n      mustBeExecutor(origin)\\n      taskMustExist(taskId)\\n      taskMustBeAdministrative(taskId)\\n      taskMustBeApproved(taskId)\\n      taskMustNotBeFinalized(taskId)\\n    {\\n        _finalizeTask(taskId, \\\"\\\");\\n        emit TaskExecuted(msg.sender, origin, taskId);\\n    }\\n\\n    function _getRequiredNrApprovals(uint256 taskId)\\n      internal view virtual override(AdminTaskManaged, TaskManaged) returns (uint) {\\n        require(_taskExists(taskId), \\\"TaskManager: task does not exist\\\");\\n        if (_isTaskAdministrative(taskId)) {\\n            return (1 + _nrOfAdmins / 2);\\n        } else {\\n            return (1 + _nrOfApprovers / 2);\\n        }\\n    }\\n\\n    receive() external payable {\\n        require(_isDepositEnabled(), \\\"TaskManager: cannot accept ether\\\");\\n    }\\n\\n    fallback() external payable {\\n        revert(\\\"TaskManager: fallback always fails\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/interfaces/ITaskExecutor.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\ninterface ITaskExecutor {\\n\\n    event TaskExecuted(address finalizer, address executor, uint256 taskId);\\n\\n    function executeTask(address executor, uint256 taskId) external;\\n\\n    function executeAdminTask(address executor, uint256 taskId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/AdminTaskManaged.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract AdminTaskManaged is AdminRoleEnabled {\\n\\n    function createAdminTask(string memory taskURI) external\\n      onlyAdmin\\n    {\\n        _createTask(taskURI, true);\\n    }\\n\\n    function approveAdminTask(uint256 adminTaskId) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n    {\\n        _approveTask(msg.sender, adminTaskId);\\n    }\\n\\n    function withdrawAdminTaskApproval(uint256 adminTaskId) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n    {\\n        _withdrawTaskApproval(msg.sender, adminTaskId);\\n    }\\n\\n    function finalizeAdminTask(uint256 adminTaskId, string memory reason) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n    {\\n        _finalizeTask(adminTaskId, reason);\\n    }\\n\\n    function _getRequiredNrApprovals(uint256 taskId)\\n      internal view virtual override (TaskManaged) returns (uint) {\\n        require(_taskExists(taskId), \\\"AdminTaskManaged: task does not exist\\\");\\n        return (1 + _nrOfAdmins / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/CreatorRoleEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract CreatorRoleEnabled is AdminRoleEnabled {\\n\\n    mapping (address => bool) private _creators;\\n\\n    uint internal _nrOfCreators;\\n\\n    event CreatorAdded(address account);\\n    event CreatorRemoved(address account);\\n\\n    modifier onlyCreator() {\\n        require(_isCreator(msg.sender), \\\"CreatorRoleEnabled: not a creator account\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreatorOrAdmin() {\\n        require(_isCreator(msg.sender) || _isAdmin(msg.sender),\\n                \\\"CreatorRoleEnabled: not a creator or admin account\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _nrOfCreators = 0;\\n    }\\n\\n    function isCreator(address account) external view\\n      onlyAdmin\\n      returns (bool)\\n    {\\n        return _isCreator(account);\\n    }\\n\\n    function addCreator(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _addCreator(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function removeCreator(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _removeCreator(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function _isCreator(address account) internal view returns (bool) {\\n        return _creators[account];\\n    }\\n\\n    function _addCreator(address account) internal {\\n        require(account != address(0), \\\"CreatorRoleEnabled: zero account cannot be used\\\");\\n        require(!_creators[account], \\\"CreatorRoleEnabled: already a creator account\\\");\\n        _creators[account] = true;\\n        _nrOfCreators += 1;\\n        emit CreatorAdded(account);\\n    }\\n\\n    function _removeCreator(address account) internal {\\n        require(account != address(0), \\\"CreatorRoleEnabled: zero account cannot be used\\\");\\n        require(_creators[account], \\\"CreatorRoleEnabled: not a creator account\\\");\\n        _creators[account] = false;\\n        _nrOfCreators -= 1;\\n        emit CreatorRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/ApproverRoleEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ApproverRoleEnabled is AdminRoleEnabled {\\n\\n    mapping (address => bool) private _approvers;\\n\\n    uint internal _nrOfApprovers;\\n\\n    event ApproverAdded(address account);\\n    event ApproverRemoved(address account);\\n\\n    modifier onlyApprover() {\\n        require(_isApprover(msg.sender), \\\"ApproverRoleEnabled: not an approver account\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _nrOfApprovers = 0;\\n    }\\n\\n    function isApprover(address account) external view\\n      onlyAdmin\\n      returns (bool)\\n    {\\n        return _isApprover(account);\\n    }\\n\\n    function addApprover(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _addApprover(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function removeApprover(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _removeApprover(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function _isApprover(address account) internal view returns (bool) {\\n        return _approvers[account];\\n    }\\n\\n    function _addApprover(address account) internal {\\n        require(account != address(0), \\\"ApproverRoleEnabled: zero account cannot be used\\\");\\n        require(!_approvers[account], \\\"ApproverRoleEnabled: already an approver account\\\");\\n        _approvers[account] = true;\\n        _nrOfApprovers += 1;\\n        emit ApproverAdded(account);\\n    }\\n\\n    function _removeApprover(address account) internal {\\n        require(account != address(0), \\\"ApproverRoleEnabled: zero account cannot be used\\\");\\n        require(_approvers[account], \\\"ApproverRoleEnabled: not an approver account\\\");\\n        _approvers[account] = false;\\n        _nrOfApprovers -= 1;\\n        emit ApproverRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/ExecutorRoleEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ExecutorRoleEnabled is AdminRoleEnabled {\\n\\n    mapping (address => bool) private _executors;\\n\\n    uint internal _nrOfExecutors;\\n\\n    event ExecutorAdded(address account);\\n    event ExecutorRemoved(address account);\\n\\n    modifier mustBeExecutor(address account) {\\n        require(_isExecutor(account), \\\"ExecutorRoleEnabled: not an executor account\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _nrOfExecutors = 0;\\n    }\\n\\n    function isExecutor(address account) external view\\n      onlyAdmin\\n      returns (bool)\\n    {\\n        return _isExecutor(account);\\n    }\\n\\n    function addExecutor(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _addExecutor(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function removeExecutor(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _removeExecutor(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function _isExecutor(address account) internal view returns (bool) {\\n        return _executors[account];\\n    }\\n\\n    function _addExecutor(address account) internal {\\n        require(account != address(0), \\\"ExecutorRoleEnabled: zero account cannot be used\\\");\\n        require(!_executors[account], \\\"ExecutorRoleEnabled: already an executor account\\\");\\n        _executors[account] = true;\\n        _nrOfExecutors += 1;\\n        emit ExecutorAdded(account);\\n    }\\n\\n    function _removeExecutor(address account) internal {\\n        require(account != address(0), \\\"ExecutorRoleEnabled: zero account cannot be used\\\");\\n        require(_executors[account], \\\"ExecutorRoleEnabled: not an executor account\\\");\\n        _executors[account] = false;\\n        _nrOfExecutors -= 1;\\n        emit ExecutorRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/FinalizerRoleEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract FinalizerRoleEnabled is AdminRoleEnabled {\\n\\n    mapping (address => bool) private _finalizers;\\n\\n    uint internal _nrOfFinalizers;\\n\\n    event FinalizerAdded(address account);\\n    event FinalizerRemoved(address account);\\n\\n    modifier onlyFinalizer() {\\n        require(_isFinalizer(msg.sender), \\\"FinalizerRoleEnabled: not a finalizer account\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _nrOfFinalizers = 0;\\n    }\\n\\n    function isFinalizer(address account) external view\\n      onlyAdmin\\n      returns (bool)\\n    {\\n        return _isFinalizer(account);\\n    }\\n\\n    function addFinalizer(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _addFinalizer(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function removeFinalizer(uint256 adminTaskId, address account) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _removeFinalizer(account);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function _isFinalizer(address account) internal view returns (bool) {\\n        return _finalizers[account];\\n    }\\n\\n    function _addFinalizer(address account) internal {\\n        require(account != address(0), \\\"FinalizerRoleEnabled: zero account cannot be used\\\");\\n        require(!_finalizers[account], \\\"FinalizerRoleEnabled: already a finalizer account\\\");\\n        _finalizers[account] = true;\\n        _nrOfFinalizers += 1;\\n        emit FinalizerAdded(account);\\n    }\\n\\n    function _removeFinalizer(address account) internal {\\n        require(account != address(0), \\\"FinalizerRoleEnabled: zero account cannot be used\\\");\\n        require(_finalizers[account], \\\"FinalizerRoleEnabled: not a finalizer account\\\");\\n        _finalizers[account] = false;\\n        _nrOfFinalizers -= 1;\\n        emit FinalizerRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/ETHVaultEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"../ETHVault.sol\\\";\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ETHVaultEnabled is AdminRoleEnabled, ETHVault {\\n\\n    function isDepositEnabled() external view onlyAdmin returns (bool) {\\n        return _isDepositEnabled();\\n    }\\n\\n    function setEnableDeposit(\\n        uint256 adminTaskId,\\n        bool enableDeposit\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        require(_isDepositEnabled() != enableDeposit, \\\"ETHVaultEnabled: cannot set the same value\\\");\\n        _setEnableDeposit(enableDeposit);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function ETHTransfer(\\n        uint256 adminTaskId,\\n        address to,\\n        uint256 amount\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ETHTransfer(to, amount);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/ERC20VaultEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"../ERC20Vault.sol\\\";\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ERC20VaultEnabled is AdminRoleEnabled, ERC20Vault {\\n\\n    function ERC20Transfer(\\n        uint256 adminTaskId,\\n        address tokenContract,\\n        address to,\\n        uint256 amount\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ERC20Transfer(tokenContract, to, amount);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function ERC20Approve(\\n        uint256 adminTaskId,\\n        address tokenContract,\\n        address spender,\\n        uint256 amount\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ERC20Approve(tokenContract, spender, amount);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/ERC721VaultEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"../ERC721Vault.sol\\\";\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ERC721VaultEnabled is AdminRoleEnabled, ERC721Vault {\\n\\n    function ERC721Transfer(\\n        uint256 adminTaskId,\\n        address tokenContract,\\n        address to,\\n        uint256 tokenId\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ERC721Transfer(tokenContract, to, tokenId);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function ERC721Approve(\\n        uint256 adminTaskId,\\n        address tokenContract,\\n        address operator,\\n        uint256 tokenId\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ERC721Approve(tokenContract, operator, tokenId);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function ERC721SetApprovalForAll(\\n        uint256 adminTaskId,\\n        address tokenContract,\\n        address operator,\\n        bool approved\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ERC721SetApprovalForAll(tokenContract, operator, approved);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/ERC1155VaultEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"../ERC1155Vault.sol\\\";\\nimport \\\"./AdminRoleEnabled.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ERC1155VaultEnabled is AdminRoleEnabled, ERC1155Vault {\\n\\n    function ERC1155Transfer(\\n        uint256 adminTaskId,\\n        address tokenContract,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ERC1155Transfer(tokenContract, to, tokenId, amount);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function ERC1155SetApprovalForAll(\\n        uint256 adminTaskId,\\n        address tokenContract,\\n        address operator,\\n        bool approved\\n    ) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _ERC1155SetApprovalForAll(tokenContract, operator, approved);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/AdminRoleEnabled.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./TaskManaged.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract AdminRoleEnabled is TaskManaged {\\n\\n    uint public constant MAX_NR_OF_ADMINS = 10;\\n    uint public constant MIN_NR_OF_ADMINS = 4;\\n\\n    mapping (address => bool) private _admins;\\n    uint internal _nrOfAdmins;\\n\\n    event AdminAdded(address account);\\n    event AdminRemoved(address account);\\n\\n    modifier onlyAdmin() {\\n        require(_isAdmin(msg.sender), \\\"AdminRoleEnabled: not an admin account\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _nrOfAdmins = 0;\\n    }\\n\\n    function isAdmin(address account) external view\\n      onlyAdmin\\n      returns (bool)\\n    {\\n        return _isAdmin(account);\\n    }\\n\\n    function getNrAdmins() external view\\n      onlyAdmin\\n      returns (uint)\\n    {\\n        return _nrOfAdmins;\\n    }\\n\\n    function addAdmin(uint256 adminTaskId, address toBeAdded) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _addAdmin(toBeAdded);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function replaceAdmin(uint256 adminTaskId, address toBeRemoved, address toBeReplaced) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        if (_nrOfAdmins == MAX_NR_OF_ADMINS) {\\n            _removeAdmin(toBeRemoved);\\n            _addAdmin(toBeReplaced);\\n        } else {\\n            _addAdmin(toBeReplaced);\\n            _removeAdmin(toBeRemoved);\\n        }\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function removeAdmin(uint256 adminTaskId, address toBeRemoved) external\\n      onlyAdmin\\n      taskMustExist(adminTaskId)\\n      taskMustBeAdministrative(adminTaskId)\\n      taskMustNotBeFinalized(adminTaskId)\\n      taskMustBeApproved(adminTaskId)\\n    {\\n        _removeAdmin(toBeRemoved);\\n        _finalizeTask(adminTaskId, \\\"\\\");\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        return _admins[account];\\n    }\\n\\n    function _addAdmin(address account) internal {\\n        require(account != address(0), \\\"AdminRoleEnabled: zero account cannot be used\\\");\\n        require(!_admins[account], \\\"AdminRoleEnabled: already an admin account\\\");\\n        require((_nrOfAdmins + 1) <= MAX_NR_OF_ADMINS, \\\"AdminRoleEnabled: exceeds maximum number of admin accounts\\\");\\n        _admins[account] = true;\\n        _nrOfAdmins += 1;\\n        emit AdminAdded(account);\\n    }\\n\\n    function _removeAdmin(address account) internal {\\n        require(account != address(0), \\\"AdminRoleEnabled: zero account cannot be used\\\");\\n        require(_admins[account], \\\"AdminRoleEnabled: not an admin account\\\");\\n        require((_nrOfAdmins - 1) >= MIN_NR_OF_ADMINS,\\n                \\\"AdminRoleEnabled: goes below minimum number of admin accounts\\\");\\n        _admins[account] = false;\\n        _nrOfAdmins -= 1;\\n        emit AdminRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/task-manager/TaskManaged.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract TaskManaged {\\n\\n    struct Task {\\n        uint256 id;\\n        string uri;\\n        bool administrative;\\n        uint nrApprovals;\\n        bool finalized;\\n    }\\n    mapping (uint256 => Task) private _tasks;\\n    mapping (uint256 => mapping(address => bool)) private _taskApprovals;\\n    uint256 private _taskIdCounter;\\n\\n    event TaskCreated(uint256 indexed taskId, string uri, bool administrative);\\n    event TaskApproved(uint256 taskId);\\n    event TaskApprovalWithdrawn(uint256 taskId);\\n    event TaskFinalized(uint256 taskId, string reason);\\n\\n    modifier taskMustExist(uint256 taskId) {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        _;\\n    }\\n\\n    modifier taskMustBeAdministrative(uint256 taskId) {\\n        require(_isTaskAdministrative(taskId), \\\"TaskManaged: invalid task type\\\");\\n        _;\\n    }\\n\\n    modifier taskMustNotBeAdministrative(uint256 taskId) {\\n        require(!_isTaskAdministrative(taskId), \\\"TaskManaged: invalid task type\\\");\\n        _;\\n    }\\n\\n    modifier taskMustBeApproved(uint256 taskId) {\\n        require(_isTaskApproved(taskId), \\\"TaskManaged: task is not approved\\\");\\n        _;\\n    }\\n\\n    modifier taskMustNotBeFinalized(uint256 taskId) {\\n        require(!_isTaskFinalized(taskId), \\\"TaskManaged: task is finalized\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _taskIdCounter = 1;\\n    }\\n\\n    function _getRequiredNrApprovals(uint256 taskId) internal view virtual returns (uint);\\n\\n    function _taskExists(uint256 taskId) internal view virtual returns (bool) {\\n        return _tasks[taskId].id > 0;\\n    }\\n\\n    function _isTaskAdministrative(uint256 taskId) internal view virtual returns (bool) {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        return _tasks[taskId].administrative;\\n    }\\n\\n    function _isTaskApproved(uint256 taskId) internal view virtual returns (bool) {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        return _tasks[taskId].nrApprovals >= _getRequiredNrApprovals(taskId);\\n    }\\n\\n    function _isTaskFinalized(uint256 taskId) internal view virtual returns (bool) {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        return _tasks[taskId].finalized;\\n    }\\n\\n    function _getTaskURI(uint256 taskId) internal view virtual returns (string memory) {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        return _tasks[taskId].uri;\\n    }\\n\\n    function _getTaskNrApprovals(uint256 taskId) internal view virtual returns (uint) {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        return _tasks[taskId].nrApprovals;\\n    }\\n\\n    function _createTask(\\n        string memory taskURI,\\n        bool isAdministrative\\n    ) internal virtual returns (uint256) {\\n        uint256 taskId = _taskIdCounter;\\n        _taskIdCounter++;\\n        Task memory task = Task(taskId, taskURI, isAdministrative, 0, false);\\n        _tasks[taskId] = task;\\n        emit TaskCreated(taskId, taskURI, isAdministrative);\\n        return taskId;\\n    }\\n\\n    function _approveTask(address doer, uint256 taskId) internal virtual {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        require(!_taskApprovals[taskId][doer], \\\"TaskManaged: task is already approved\\\");\\n        _taskApprovals[taskId][doer] = true;\\n        _tasks[taskId].nrApprovals += 1;\\n        emit TaskApproved(taskId);\\n    }\\n\\n    function _withdrawTaskApproval(address doer, uint256 taskId) internal virtual {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        require(_taskApprovals[taskId][doer], \\\"TaskManaged: task is not approved\\\");\\n        _taskApprovals[taskId][doer] = false;\\n        _tasks[taskId].nrApprovals -= 1;\\n        emit TaskApprovalWithdrawn(taskId);\\n    }\\n\\n    function _finalizeTask(uint256 taskId, string memory reason) internal virtual {\\n        require(_taskExists(taskId), \\\"TaskManaged: task does not exist\\\");\\n        _tasks[taskId].finalized = true;\\n        emit TaskFinalized(taskId, reason);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/ETHVault.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ETHVault {\\n\\n    bool private _enableDeposit;\\n\\n    event DepositEnabled();\\n    event DepositDisabled();\\n    event ETHTransferred(address to, uint256 amount);\\n\\n    constructor() {\\n        _enableDeposit = false;\\n    }\\n\\n    function _isDepositEnabled() internal view returns (bool) {\\n        return _enableDeposit;\\n    }\\n\\n    function _setEnableDeposit(bool enableDeposit) internal {\\n        _enableDeposit = enableDeposit;\\n        if (_enableDeposit) {\\n            emit DepositEnabled();\\n        } else {\\n            emit DepositDisabled();\\n        }\\n    }\\n\\n    function _ETHTransfer(\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(to != address(0), \\\"ETHVault: cannot transfer to zero\\\");\\n        require(amount > 0, \\\"ETHVault: amount is zero\\\");\\n        require(amount <= address(this).balance, \\\"ETHVault: transfer more than balance\\\");\\n\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n        require(success, \\\"ETHVault: failed to transfer\\\");\\n        emit ETHTransferred(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/ERC20Vault.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ERC20Vault {\\n\\n    event ERC20Transferred(address tokenContract, address to, uint256 amount);\\n    event ERC20Approved(address tokenContract, address spender, uint256 amount);\\n\\n    function _ERC20Transfer(\\n        address tokenContract,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(tokenContract != address(0), \\\"ERC20Vault: zero token address\\\");\\n        require(to != address(0), \\\"ERC20Vault: cannot transfer to zero\\\");\\n        require(amount > 0, \\\"ERC20Vault: amount is zero\\\");\\n        require(amount <= IERC20(tokenContract).balanceOf(address(this)),\\n                                \\\"ERC20Vault: transfer more than balance\\\");\\n\\n        IERC20(tokenContract).transfer(to, amount);\\n        emit ERC20Transferred(tokenContract, to, amount);\\n    }\\n\\n    function _ERC20Approve(\\n        address tokenContract,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(tokenContract != address(0), \\\"ERC20Vault: zero token address\\\");\\n        require(spender != address(0), \\\"ERC20Vault: zero address for spender\\\");\\n\\n        IERC20(tokenContract).approve(spender, amount);\\n        emit ERC20Approved(tokenContract, spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/ERC721Vault.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ERC721Vault is IERC721Receiver {\\n\\n    event ERC721Transferred(address tokenContract, address to, uint256 tokenId);\\n    event ERC721Approved(address tokenContract, address to, uint256 tokenId);\\n    event ERC721ApprovedForAll(address tokenContract, address operator, bool approved);\\n\\n    function onERC721Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* tokenId */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    }\\n\\n    function _ERC721Transfer(\\n        address tokenContract,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(tokenContract != address(0), \\\"ERC721Vault: zero token address\\\");\\n        require(to != address(0), \\\"ERC721Vault: cannot transfer to zero\\\");\\n\\n        IERC721(tokenContract).safeTransferFrom(address(this), to, tokenId, \\\"\\\");\\n        emit ERC721Transferred(tokenContract, to, tokenId);\\n    }\\n\\n    // operator can be the zero address.\\n    function _ERC721Approve(\\n        address tokenContract,\\n        address operator,\\n        uint256 tokenId\\n    ) internal {\\n        require(tokenContract != address(0), \\\"ERC721Vault: zero token address\\\");\\n\\n        IERC721(tokenContract).approve(operator, tokenId);\\n        emit ERC721Approved(tokenContract, operator, tokenId);\\n    }\\n\\n    function _ERC721SetApprovalForAll(\\n        address tokenContract,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(tokenContract != address(0), \\\"ERC721Vault: zero token address\\\");\\n        require(operator != address(0), \\\"ERC721Vault: zero address for operator\\\");\\n\\n        IERC721(tokenContract).setApprovalForAll(operator, approved);\\n        emit ERC721ApprovedForAll(tokenContract, operator, approved);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/arteq-tech/contracts/abstract/ERC1155Vault.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the art\u00e8Q Technologies contracts (https://github.com/arteq-tech/contracts).\\n * Copyright (c) 2022 art\u00e8Q Technologies (https://arteq.tech)\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io>\\n///\\n/// @notice Use at your own risk\\nabstract contract ERC1155Vault is IERC1155Receiver {\\n\\n    event ERC1155Transferred(address tokenContract, address to, uint256 tokenId, uint256 amount);\\n    event ERC1155ApprovedForAll(address tokenContract, address operator, bool approved);\\n\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n\\n    function onERC1155Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* id */,\\n        uint256 /* value */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address /* operator */,\\n        address /* from */,\\n        uint256[] calldata /* ids */,\\n        uint256[] calldata /* values */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"));\\n    }\\n\\n    function _ERC1155Transfer(\\n        address tokenContract,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        require(tokenContract != address(0), \\\"ERC1155Vault: zero token address\\\");\\n        require(to != address(0), \\\"ERC1155Vault: cannot transfer to zero\\\");\\n\\n        IERC1155(tokenContract).safeTransferFrom(address(this), to, tokenId, amount, \\\"\\\");\\n        emit ERC1155Transferred(tokenContract, to, tokenId, amount);\\n    }\\n\\n    function _ERC1155SetApprovalForAll(\\n        address tokenContract,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(tokenContract != address(0), \\\"ERC1155Vault: zero token address\\\");\\n        require(operator != address(0), \\\"ERC1155Vault: zero address for operator\\\");\\n\\n        IERC1155(tokenContract).setApprovalForAll(operator, approved);\\n        emit ERC1155ApprovedForAll(tokenContract, operator, approved);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialAdmins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"initialCreators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"initialApprovers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"initialExecutors\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CreatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CreatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ERC1155ApprovedForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC1155Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ERC721ApprovedForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExecutorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExecutorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FinalizerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FinalizerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskApprovalWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"administrative\",\"type\":\"bool\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finalizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TaskFinalized\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ERC1155SetApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC1155Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ERC721SetApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NR_OF_ADMINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NR_OF_ADMINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeAdded\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addFinalizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"}],\"name\":\"approveAdminTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"approveTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskURI\",\"type\":\"string\"}],\"name\":\"createAdminTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskURI\",\"type\":\"string\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"executeAdminTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"executeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"finalizeAdminTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"finalizeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNrAdmins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"getNrOfApprovals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"getTaskURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepositEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFinalizer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeRemoved\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFinalizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeRemoved\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toBeReplaced\",\"type\":\"address\"}],\"name\":\"replaceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"}],\"name\":\"setEnableDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"}],\"name\":\"withdrawAdminTaskApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"withdrawTaskApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "QlindoTaskManager", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c615db34d128a4ee002006d76897934f0b13b62d00000000000000000000000055c84dd2f587885129d448315499fa92b5d06f81000000000000000000000000548730ef6c35ccac1caa7772c2f24d153ef3b1d90000000000000000000000006443fd423ff590d40ec784e3fb17b753684f3e990000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c615db34d128a4ee002006d76897934f0b13b62d0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000c615db34d128a4ee002006d76897934f0b13b62d0000000000000000000000006443fd423ff590d40ec784e3fb17b753684f3e9900000000000000000000000055c84dd2f587885129d448315499fa92b5d06f810000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c615db34d128a4ee002006d76897934f0b13b62d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}