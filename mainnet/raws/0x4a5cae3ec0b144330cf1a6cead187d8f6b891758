{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface ENS {\r\n    function owner(bytes32 node) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title ENSAsciiNormalizer\r\n * @author royalfork.eth\r\n * @notice UTS-46 normalization for ENS domains.\r\n */\r\ncontract ENSAsciiNormalizer {\r\n\tENS public ens;\r\n\r\n\t// Each index in idnamap refers to an ascii code point.\r\n\t// If idnamap[char] > 2, char maps to a valid ascii character.\r\n\t// Otherwise, idna[char] returns Rule.DISALLOWED or\r\n\t// Rule.VALID.\r\n\tbytes1[] public idnamap;\r\n\tenum Rule { DISALLOWED, VALID }\r\n\r\n\tconstructor (ENS _ens, bytes memory asciimap) {\r\n\t\tens = _ens;\r\n\t\tfor(uint i = 0; i < asciimap.length; i += 2) {\r\n\t\t\tbytes1 r = asciimap[i+1];\r\n\t\t\tfor(uint8 j = 0; j < uint8(asciimap[i]); j++) {\r\n\t\t\t\tidnamap.push(r);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    /**\r\n     * @notice Find ENS owner of domain.\r\n     * @param domain Domain to lookup.\r\n\t * @return domainOwner Owner of domain.\r\n\t * @return node Namehash of domain.\r\n\t */\r\n\tfunction owner(string memory domain) external view returns (address domainOwner, bytes32 node) {\r\n\t\t(,node) = namehash(domain);\r\n\t\treturn (ens.owner(node), node);\r\n\t}\r\n\r\n    /**\r\n     * @notice Compute namehash of domain after UTS-46 validation and\r\n     *         normalization.  Reverts if domain is invalid, or not ASCII.\r\n     * @param domain Domain to namehash.\r\n\t * @return normalized Normalized domain.\r\n\t * @return node Namehash of domain.\r\n\t */\r\n\tfunction namehash(string memory domain) public view returns (string memory normalized, bytes32 node) {\r\n\t\t// Process labels (in reverse order for namehash).\r\n\t\tuint i = bytes(domain).length;\r\n\t\tuint lastDot = i;\r\n\t\tnode = bytes32(0);\r\n\t\tfor (; i > 0; i--) {\r\n\t\t\tbytes1 c = bytes(domain)[i-1];\r\n\r\n\t\t\tif (c == '.') {\r\n\t\t\t\tnode = keccak256(abi.encodePacked(node, labelhash(domain, i, lastDot)));\r\n\t\t\t\tlastDot = i-1;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\trequire(c < 0x80);\r\n\t\t\tbytes1 r = idnamap[uint8(c)];\r\n\t\t\trequire(uint8(r) != uint8(Rule.DISALLOWED));\r\n\t\t\tif (uint8(r) > 1) {\r\n\t\t\t\tbytes(domain)[i-1] = r;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (domain, keccak256(abi.encodePacked(node, labelhash(domain, i, lastDot))));\r\n\t}\r\n\r\n    /**\r\n     * @notice Compute labelhash of label. This function does not perform validation/normalization.\r\n     * @param label Label to hash.\r\n\t * @return hash Labelhash of label.\r\n\t */\r\n\tfunction labelhash(string memory label) external pure returns (bytes32 hash) {\r\n\t\treturn labelhash(label, 0, bytes(label).length);\r\n\t}\r\n\r\n\tfunction labelhash(string memory domain, uint start, uint end) internal pure returns (bytes32 hash) {\r\n\t\tassembly (\"memory-safe\") {\r\n\t\t\thash := keccak256(add(add(domain, 0x20), start), sub(end, start))\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"asciimap\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idnamap\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"labelhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"namehash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"normalized\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"domainOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ENSAsciiNormalizer", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000442d00020101000a010700016101620163016401650166016701680169016a016b016c016d016e016f0170017101720173017401750176017701780179017a06001a01050000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3141df77db8202f4a1a0376559cc4b9449e697c535b60fb11a0f11d48f865fa3"}]}