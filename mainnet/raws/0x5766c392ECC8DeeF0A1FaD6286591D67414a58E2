{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vaults/SingleAssetVaultV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"./SingleAssetVault.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\n\\n/// @dev This version adds support for using \\\"boosted\\\" user balances.\\n///  Boosted user balances will take user's staking balance into account.\\ncontract SingleAssetVaultV2 is SingleAssetVault {\\n  event StakingContractUpdated(address _staking);\\n  /// @dev Track the boosted balances for all users\\n  mapping(address => uint256) internal boostedUserBalances;\\n  /// @dev Track the total boosted balance\\n  uint256 internal totalBoostedBalance;\\n\\n  /// @dev Struct to store the formula weights that is used to calculate the boosted balance.\\n  struct BoostFormulaWeights {\\n    uint128 vaultBalanceWeight;\\n    uint128 stakingBalanceWeight;\\n  }\\n  BoostFormulaWeights public boostFormulaWeights;\\n  /// @dev Address of the staking contract\\n  address public stakingContract;\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() initializer {}\\n\\n  function initializeV2(\\n    string memory _name,\\n    string memory _symbol,\\n    address _governance,\\n    address _gatekeeper,\\n    address _feeCollection,\\n    address _strategyDataStoreAddress,\\n    address _token,\\n    address _accessManager,\\n    address _vaultRewards,\\n    address _stakingContract\\n  ) external virtual initializer {\\n    __SingleAssetVaultV2_init(\\n      _name,\\n      _symbol,\\n      _governance,\\n      _gatekeeper,\\n      _feeCollection,\\n      _strategyDataStoreAddress,\\n      _token,\\n      _accessManager,\\n      _vaultRewards,\\n      _stakingContract\\n    );\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __SingleAssetVaultV2_init(\\n    string memory _name,\\n    string memory _symbol,\\n    address _governance,\\n    address _gatekeeper,\\n    address _feeCollection,\\n    address _strategyDataStoreAddress,\\n    address _token,\\n    address _accessManager,\\n    address _vaultRewards,\\n    address _stakingContract\\n  ) internal {\\n    __SingleAssetVault_init(\\n      _name,\\n      _symbol,\\n      _governance,\\n      _gatekeeper,\\n      _feeCollection,\\n      _strategyDataStoreAddress,\\n      _token,\\n      _accessManager,\\n      _vaultRewards\\n    );\\n    __SingleAssetVaultV2_init_unchained(_stakingContract);\\n  }\\n\\n  function __SingleAssetVaultV2_init_unchained(address _stakingContract) internal {\\n    require(_stakingContract != address(0), \\\"!staking\\\");\\n    stakingContract = _stakingContract;\\n    boostFormulaWeights.vaultBalanceWeight = 1;\\n    boostFormulaWeights.stakingBalanceWeight = 9;\\n  }\\n\\n  function version() external pure virtual override returns (string memory) {\\n    return \\\"0.2.0\\\";\\n  }\\n\\n  /// @notice Query the boosted vault balance of the user.\\n  /// @dev If no boosted vault balance but there is a normal balance for the user, it means the boosted balance hasn't been inited yet.\\n  ///   Return the normal balance to keep it backward compatible.\\n  /// @param _user the address of the user to query\\n  /// @return the boosted balance of the user\\n  function boostedBalanceOf(address _user) external view returns (uint256) {\\n    require(_user != address(0), \\\"!user\\\");\\n    if (boostedUserBalances[_user] == 0 && balanceOf(_user) > 0) {\\n      return balanceOf(_user);\\n    }\\n    return boostedUserBalances[_user];\\n  }\\n\\n  /// @notice Return the total of boosted balances\\n  /// @dev If no total boosted balance but there is totalSupply, it means the boosted balance hasn't been inited yet.\\n  ///  Return the normal totalSupply in this case.\\n  function totalBoostedSupply() external view returns (uint256) {\\n    if (totalBoostedBalance == 0 && totalSupply() > 0) {\\n      return totalSupply();\\n    }\\n    return totalBoostedBalance;\\n  }\\n\\n  /// @notice Set the address of the staking contract. Can only be called by governance.\\n  /// @dev This needs to be called after upgrading from v1 to v2 version to ensure the staking contract address is set.\\n  /// @param _stakingContract The address of the staking contract.\\n  function setStakingContract(address _stakingContract) external {\\n    _onlyGovernance();\\n    require(_stakingContract != address(0), \\\"!staking\\\");\\n    if (_stakingContract != stakingContract) {\\n      stakingContract = _stakingContract;\\n      emit StakingContractUpdated(_stakingContract);\\n    }\\n  }\\n\\n  /// @notice Set the weight used to calculate the boosted balance. Can only be called by governance.\\n  /// @dev This needs to be called after upgrading from v1 to v2 version.\\n  ///  Also once this is called, the `updateBoostedBalancesForUsers` should be called as well with all the vault user addresses to recalculate the boosted balances.\\n  function setBoostedFormulaWeights(uint128 _vaultWeight, uint128 _stakingWeight) external {\\n    _onlyGovernance();\\n    boostFormulaWeights.vaultBalanceWeight = _vaultWeight;\\n    boostFormulaWeights.stakingBalanceWeight = _stakingWeight;\\n  }\\n\\n  /// @notice Recalculate the boosted balances for the given array of users.\\n  /// @dev Before the boosted balance is updated for a user, it will also ensure the rewards up to this point is calculated for the user.\\n  ///  This function must be called whenever `setBoostedFormulaWeights` is called to recalcuate the boosted balances for users.\\n  ///  It can also be called at anytime afterwards to reset the boosted balances for a user (or users).\\n  function updateBoostedBalancesForUsers(address[] calldata _users) external {\\n    uint256 totalBalanceToReduce;\\n    uint256 totalBalanceToAdd;\\n    for (uint256 i = 0; i < _users.length; i++) {\\n      if (vaultRewards != address(0)) {\\n        IYOPRewards(vaultRewards).calculateVaultRewards(_users[i]);\\n      }\\n      uint256 oldBoostedBalance = boostedUserBalances[_users[i]];\\n      uint256 newBoostedBalance = _calculateBoostedBalanceForUser(_users[i]);\\n      boostedUserBalances[_users[i]] = newBoostedBalance;\\n      totalBalanceToReduce += oldBoostedBalance;\\n      totalBalanceToAdd += newBoostedBalance;\\n    }\\n    // only update the storage value once at the end to save gas\\n    totalBoostedBalance = totalBoostedBalance - totalBalanceToReduce + totalBalanceToAdd;\\n  }\\n\\n  /// @notice Returns the latest boosted balance of the user based on their latest staking and vault positions\\n  ///  Use this function and boostedBalanceOf to check if a user's boosted balance should be updated\\n  /// @param _user the address of the user to query\\n  /// @return the latest boosted balance for the user\\n  function latestBoostedBalanceOf(address _user) external view returns (uint256) {\\n    return _calculateBoostedBalanceForUser(_user);\\n  }\\n\\n  function _calculateBoostedBalanceForUser(address _user) internal view returns (uint256) {\\n    return\\n      VaultUtils.calculateBoostedVaultBalance(\\n        _user,\\n        stakingContract,\\n        address(this),\\n        boostFormulaWeights.vaultBalanceWeight,\\n        boostFormulaWeights.stakingBalanceWeight\\n      );\\n  }\\n\\n  /// @dev This hook is called by the OZ ERC20 contract after the user balance is updated.\\n  ///  At this point we can update the boosted balance as well.\\n  function _afterTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256\\n  ) internal virtual override {\\n    uint256 totalReduce;\\n    uint256 totalAdd;\\n    if (_from != address(0)) {\\n      uint256 newBoostedBalance = _calculateBoostedBalanceForUser(_from);\\n      uint256 oldBoostedBalance = boostedUserBalances[_from];\\n      boostedUserBalances[_from] = newBoostedBalance;\\n      totalReduce += oldBoostedBalance;\\n      totalAdd += newBoostedBalance;\\n    }\\n    if (_to != address(0)) {\\n      uint256 newBoostedBalance = _calculateBoostedBalanceForUser(_to);\\n      uint256 oldBoostedBalance = boostedUserBalances[_to];\\n      boostedUserBalances[_to] = newBoostedBalance;\\n      totalReduce += oldBoostedBalance;\\n      totalAdd += newBoostedBalance;\\n    }\\n    totalBoostedBalance = totalBoostedBalance - totalReduce + totalAdd;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/SingleAssetVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IHealthCheck.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IAccessControlManager.sol\\\";\\nimport \\\"../interfaces/IFeeCollection.sol\\\";\\nimport \\\"./SingleAssetVaultBase.sol\\\";\\n\\n///  @dev NOTE: do not add any new state variables to this contract. If needed, see {VaultDataStorage.sol} instead.\\ncontract SingleAssetVault is SingleAssetVaultBase, PausableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event StrategyReported(\\n    address indexed _strategyAddress,\\n    uint256 _gain,\\n    uint256 _loss,\\n    uint256 _debtPaid,\\n    uint256 _totalGain,\\n    uint256 _totalLoss,\\n    uint256 _totalDebt,\\n    uint256 _debtAdded,\\n    uint256 _debtRatio\\n  );\\n\\n  uint256 internal constant SECONDS_PER_YEAR = 31_556_952; // 365.2425 days\\n  string internal constant API_VERSION = \\\"0.1.0\\\";\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    address _governance,\\n    address _gatekeeper,\\n    address _feeCollection,\\n    address _strategyDataStoreAddress,\\n    address _token,\\n    address _accessManager,\\n    address _vaultRewards\\n  ) external initializer {\\n    __SingleAssetVault_init(\\n      _name,\\n      _symbol,\\n      _governance,\\n      _gatekeeper,\\n      _feeCollection,\\n      _strategyDataStoreAddress,\\n      _token,\\n      _accessManager,\\n      _vaultRewards\\n    );\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __SingleAssetVault_init(\\n    string memory _name,\\n    string memory _symbol,\\n    address _governance,\\n    address _gatekeeper,\\n    address _feeCollection,\\n    address _strategyDataStoreAddress,\\n    address _token,\\n    address _accessManager,\\n    address _vaultRewards\\n  ) internal {\\n    __SingleAssetVaultBase_init(\\n      _name,\\n      _symbol,\\n      _governance,\\n      _gatekeeper,\\n      _feeCollection,\\n      _strategyDataStoreAddress,\\n      _token,\\n      _accessManager,\\n      _vaultRewards\\n    );\\n    _pause();\\n  }\\n\\n  function version() external pure virtual returns (string memory) {\\n    return API_VERSION;\\n  }\\n\\n  function pause() external {\\n    _onlyGovernanceOrGatekeeper(governance);\\n    _pause();\\n  }\\n\\n  function unpause() external {\\n    _onlyGovernance();\\n    _unpause();\\n  }\\n\\n  /// @notice Deposits `_amount` `token`, issuing shares to `recipient`. If the\\n  ///  Vault is in Emergency Shutdown, deposits will not be accepted and this\\n  ///  call will fail.\\n  /// @dev Measuring quantity of shares to issues is based on the total\\n  ///  outstanding debt that this contract has (\\\"expected value\\\") instead\\n  ///  of the total balance sheet it has (\\\"estimated value\\\") has important\\n  ///  security considerations, and is done intentionally. If this value were\\n  ///  measured against external systems, it could be purposely manipulated by\\n  ///  an attacker to withdraw more assets than they otherwise should be able\\n  ///  to claim by redeeming their shares.\\n  ///  On deposit, this means that shares are issued against the total amount\\n  ///  that the deposited capital can be given in service of the debt that\\n  ///  Strategies assume. If that number were to be lower than the \\\"expected\\n  ///  value\\\" at some future point, depositing shares via this method could\\n  ///  entitle the depositor to *less* than the deposited value once the\\n  ///  \\\"realized value\\\" is updated from further reports by the Strategies\\n  ///  to the Vaults.\\n  ///  Care should be taken by integrators to account for this discrepancy,\\n  ///  by using the view-only methods of this contract (both off-chain and\\n  ///  on-chain) to determine if depositing into the Vault is a \\\"good idea\\\".\\n  /// @param _amount The quantity of tokens to deposit, defaults to all.\\n  ///  caller's address.\\n  /// @param _recipient the address that will receive the vault shares\\n  /// @return The issued Vault shares.\\n  function deposit(uint256 _amount, address _recipient) external whenNotPaused nonReentrant returns (uint256) {\\n    _onlyNotEmergencyShutdown();\\n    return _deposit(_amount, _recipient);\\n  }\\n\\n  /// @notice Withdraws the calling account's tokens from this Vault, redeeming\\n  ///  amount `_shares` for an appropriate amount of tokens.\\n  ///  See note on `setWithdrawalQueue` for further details of withdrawal\\n  ///  ordering and behavior.\\n  /// @dev Measuring the value of shares is based on the total outstanding debt\\n  ///  that this contract has (\\\"expected value\\\") instead of the total balance\\n  ///  sheet it has (\\\"estimated value\\\") has important security considerations,\\n  ///  and is done intentionally. If this value were measured against external\\n  ///  systems, it could be purposely manipulated by an attacker to withdraw\\n  ///  more assets than they otherwise should be able to claim by redeeming\\n  ///  their shares.\\n\\n  ///  On withdrawal, this means that shares are redeemed against the total\\n  ///  amount that the deposited capital had \\\"realized\\\" since the point it\\n  ///  was deposited, up until the point it was withdrawn. If that number\\n  ///  were to be higher than the \\\"expected value\\\" at some future point,\\n  ///  withdrawing shares via this method could entitle the depositor to\\n  ///  *more* than the expected value once the \\\"realized value\\\" is updated\\n  ///  from further reports by the Strategies to the Vaults.\\n\\n  ///  Under exceptional scenarios, this could cause earlier withdrawals to\\n  ///  earn \\\"more\\\" of the underlying assets than Users might otherwise be\\n  ///  entitled to, if the Vault's estimated value were otherwise measured\\n  ///  through external means, accounting for whatever exceptional scenarios\\n  ///  exist for the Vault (that aren't covered by the Vault's own design.)\\n  ///  In the situation where a large withdrawal happens, it can empty the\\n  ///  vault balance and the strategies in the withdrawal queue.\\n  ///  Strategies not in the withdrawal queue will have to be harvested to\\n  ///  rebalance the funds and make the funds available again to withdraw.\\n  /// @param _maxShares How many shares to try and redeem for tokens, defaults to all.\\n  /// @param _recipient The address to issue the shares in this Vault to.\\n  /// @param _maxLoss The maximum acceptable loss to sustain on withdrawal in basis points.\\n  /// @return The quantity of tokens redeemed for `_shares`.\\n  function withdraw(\\n    uint256 _maxShares,\\n    address _recipient,\\n    uint256 _maxLoss\\n  ) external whenNotPaused nonReentrant returns (uint256) {\\n    _onlyNotEmergencyShutdown();\\n    return _withdraw(_maxShares, _recipient, _maxLoss);\\n  }\\n\\n  /// @notice Reports the amount of assets the calling Strategy has free (usually in terms of ROI).\\n  ///  The performance fee is determined here, off of the strategy's profits\\n  ///  (if any), and sent to governance.\\n  ///  The strategist's fee is also determined here (off of profits), to be\\n  ///  handled according to the strategist on the next harvest.\\n  ///  This may only be called by a Strategy managed by this Vault.\\n  /// @dev For approved strategies, this is the most efficient behavior.\\n  ///  The Strategy reports back what it has free, then Vault \\\"decides\\\"\\n  ///  whether to take some back or give it more. Note that the most it can\\n  ///  take is `gain + _debtPayment`, and the most it can give is all of the\\n  ///  remaining reserves. Anything outside of those bounds is abnormal behavior.\\n  ///  All approved strategies must have increased diligence around\\n  ///  calling this function, as abnormal behavior could become catastrophic.\\n  /// @param _gain Amount Strategy has realized as a gain on it's investment since its last report, and is free to be given back to Vault as earnings\\n  /// @param _loss Amount Strategy has realized as a loss on it's investment since its last report, and should be accounted for on the Vault's balance sheet.\\n  ///  The loss will reduce the debtRatio. The next time the strategy will harvest, it will pay back the debt in an attempt to adjust to the new debt limit.\\n  /// @param _debtPayment Amount Strategy has made available to cover outstanding debt\\n  /// @return Amount of debt outstanding (if totalDebt > debtLimit or emergency shutdown).\\n  function report(\\n    uint256 _gain,\\n    uint256 _loss,\\n    uint256 _debtPayment\\n  ) external returns (uint256) {\\n    address strat = _msgSender();\\n    _validateStrategy(strat);\\n    require(token.balanceOf(strat) >= (_gain + _debtPayment), \\\"!balance\\\");\\n\\n    VaultUtils.checkStrategyHealth(\\n      healthCheck,\\n      strat,\\n      _gain,\\n      _loss,\\n      _debtPayment,\\n      _debtOutstanding(strat),\\n      strategies[strat].totalDebt\\n    );\\n    totalDebt = VaultUtils.reportLoss(strategies, strat, totalDebt, _strategyDataStore(), _loss);\\n    // Returns are always \\\"realized gains\\\"\\n    strategies[strat].totalGain = strategies[strat].totalGain + _gain;\\n\\n    // Assess both management fee and performance fee, and issue both as shares of the vault\\n    uint256 totalFees = VaultUtils.assessFees(\\n      token,\\n      feeCollection,\\n      strategies,\\n      strat,\\n      _gain,\\n      managementFee,\\n      _strategyDataStore().strategyPerformanceFee(address(this), strat)\\n    );\\n    // Compute the line of credit the Vault is able to offer the Strategy (if any)\\n    uint256 credit = _creditAvailable(strat);\\n    // Outstanding debt the Strategy wants to take back from the Vault (if any)\\n    // NOTE: debtOutstanding <= StrategyInfo.totalDebt\\n    uint256 debt = _debtOutstanding(strat);\\n    uint256 debtPayment = Math.min(debt, _debtPayment);\\n\\n    if (debtPayment > 0) {\\n      _decreaseDebt(strat, debtPayment);\\n      debt = debt - debtPayment;\\n    }\\n\\n    // Update the actual debt based on the full credit we are extending to the Strategy\\n    // or the returns if we are taking funds back\\n    // NOTE: credit + self.strategies[msg.sender].totalDebt is always < self.debtLimit\\n    // NOTE: At least one of `credit` or `debt` is always 0 (both can be 0)\\n    if (credit > 0) {\\n      _increaseDebt(strat, credit);\\n    }\\n\\n    // Give/take balance to Strategy, based on the difference between the reported gains\\n    // (if any), the debt payment (if any), the credit increase we are offering (if any),\\n    // and the debt needed to be paid off (if any)\\n    // NOTE: This is just used to adjust the balance of tokens between the Strategy and\\n    //       the Vault based on the Strategy's debt limit (as well as the Vault's).\\n    uint256 totalAvailable = _gain + debtPayment;\\n    if (totalAvailable < credit) {\\n      // credit surplus, give to Strategy\\n      token.safeTransfer(strat, credit - totalAvailable);\\n    } else if (totalAvailable > credit) {\\n      // credit deficit, take from Strategy\\n      token.safeTransferFrom(strat, address(this), totalAvailable - credit);\\n    }\\n    // else, don't do anything because it is balanced\\n\\n    _updateLockedProfit(_gain, totalFees, _loss);\\n    // solhint-disable-next-line not-rely-on-time\\n    strategies[strat].lastReport = block.timestamp;\\n    // solhint-disable-next-line not-rely-on-time\\n    lastReport = block.timestamp;\\n\\n    StrategyInfo memory info = strategies[strat];\\n    uint256 ratio = _strategyDataStore().strategyDebtRatio(address(this), strat);\\n    emit StrategyReported(\\n      strat,\\n      _gain,\\n      _loss,\\n      debtPayment,\\n      info.totalGain,\\n      info.totalLoss,\\n      info.totalDebt,\\n      credit,\\n      ratio\\n    );\\n\\n    if (ratio == 0 || emergencyShutdown) {\\n      // Take every last penny the Strategy has (Emergency Exit/revokeStrategy)\\n      // NOTE: This is different than `debt` in order to extract *all* of the returns\\n      return IStrategy(strat).estimatedTotalAssets();\\n    } else {\\n      // Otherwise, just return what we have as debt outstanding\\n      return debt;\\n    }\\n  }\\n\\n  function _deposit(uint256 _amount, address _recipient) internal returns (uint256) {\\n    require(_recipient != address(0), \\\"!recipient\\\");\\n    if (accessManager != address(0)) {\\n      require(IAccessControlManager(accessManager).hasAccess(_msgSender(), address(this)), \\\"!access\\\");\\n    }\\n    //TODO: do we also want to cap the `_amount` too?\\n    uint256 amount = _ensureValidDepositAmount(_msgSender(), _amount);\\n    uint256 shares = _issueSharesForAmount(_recipient, amount);\\n    token.safeTransferFrom(_msgSender(), address(this), amount);\\n    return shares;\\n  }\\n\\n  function _issueSharesForAmount(address _recipient, uint256 _amount) internal returns (uint256) {\\n    uint256 supply = totalSupply();\\n    uint256 shares = supply > 0 ? (_amount * supply) / _freeFunds() : _amount;\\n\\n    require(shares > 0, \\\"!amount\\\");\\n    // _mint will call '_beforeTokenTransfer' which will call \\\"calculateRewards\\\" on the YOPVaultRewards contract\\n    _mint(_recipient, shares);\\n    return shares;\\n  }\\n\\n  function _withdraw(\\n    uint256 _maxShares,\\n    address _recipient,\\n    uint256 _maxLoss\\n  ) internal returns (uint256) {\\n    require(_recipient != address(0), \\\"!recipient\\\");\\n    require(_maxLoss <= MAX_BASIS_POINTS, \\\"!loss\\\");\\n    uint256 shares = _ensureValidShares(_msgSender(), _maxShares);\\n    uint256 value = _shareValue(shares);\\n    uint256 vaultBalance = token.balanceOf(address(this));\\n    uint256 totalLoss = 0;\\n    if (value > vaultBalance) {\\n      // We need to go get some from our strategies in the withdrawal queue\\n      // NOTE: This performs forced withdrawals from each Strategy. During\\n      // forced withdrawal, a Strategy may realize a loss. That loss\\n      // is reported back to the Vault, and the will affect the amount\\n      // of tokens that the withdrawer receives for their shares. They\\n      // can optionally specify the maximum acceptable loss (in BPS)\\n      // to prevent excessive losses on their withdrawals (which may\\n      // happen in certain edge cases where Strategies realize a loss)\\n      totalLoss = _withdrawFromStrategies(value);\\n      if (totalLoss > 0) {\\n        value = value - totalLoss;\\n      }\\n      vaultBalance = token.balanceOf(address(this));\\n    }\\n    // NOTE: We have withdrawn everything possible out of the withdrawal queue,\\n    // but we still don't have enough to fully pay them back, so adjust\\n    // to the total amount we've freed up through forced withdrawals\\n    if (value > vaultBalance) {\\n      value = vaultBalance;\\n      // NOTE: Burn # of shares that corresponds to what Vault has on-hand,\\n      // including the losses that were incurred above during withdrawals\\n      shares = _sharesForAmount(value + totalLoss);\\n    }\\n    // NOTE: This loss protection is put in place to revert if losses from\\n    // withdrawing are more than what is considered acceptable.\\n    require(totalLoss <= (_maxLoss * (value + totalLoss)) / MAX_BASIS_POINTS, \\\"loss limit\\\");\\n    // burn shares\\n    // _burn will call '_beforeTokenTransfer' which will call \\\"calculateRewards\\\" on the YOPVaultRewards contract\\n    _burn(_msgSender(), shares);\\n\\n    // Withdraw remaining balance to _recipient (may be different to msg.sender) (minus fee)\\n    token.safeTransfer(_recipient, value);\\n    return value;\\n  }\\n\\n  function _withdrawFromStrategies(uint256 _withdrawValue) internal returns (uint256) {\\n    uint256 totalLoss = 0;\\n    uint256 value = _withdrawValue;\\n    address[] memory withdrawQueue = _strategyDataStore().withdrawQueue(address(this));\\n    for (uint256 i = 0; i < withdrawQueue.length; i++) {\\n      address strategyAddress = withdrawQueue[i];\\n      IStrategy strategyToWithdraw = IStrategy(strategyAddress);\\n      uint256 vaultBalance = token.balanceOf(address(this));\\n      if (value <= vaultBalance) {\\n        // there are enough tokens in the vault now, no need to continue\\n        break;\\n      }\\n      // NOTE: Don't withdraw more than the debt so that Strategy can still\\n      // continue to work based on the profits it has\\n      // NOTE: This means that user will lose out on any profits that each\\n      // Strategy in the queue would return on next harvest, benefiting others\\n      uint256 amountNeeded = Math.min(value - vaultBalance, strategies[strategyAddress].totalDebt);\\n      if (amountNeeded == 0) {\\n        // nothing to withdraw from the strategy, try the next one\\n        continue;\\n      }\\n      uint256 loss = strategyToWithdraw.withdraw(amountNeeded);\\n      uint256 withdrawAmount = token.balanceOf(address(this)) - vaultBalance;\\n      if (loss > 0) {\\n        value = value - loss;\\n        totalLoss = totalLoss + loss;\\n        totalDebt = VaultUtils.reportLoss(strategies, strategyAddress, totalDebt, _strategyDataStore(), loss);\\n      }\\n\\n      // Reduce the Strategy's debt by the amount withdrawn (\\\"realized returns\\\")\\n      // NOTE: This doesn't add to returns as it's not earned by \\\"normal means\\\"\\n      _decreaseDebt(strategyAddress, withdrawAmount);\\n    }\\n    return totalLoss;\\n  }\\n\\n  function _ensureValidShares(address _account, uint256 _shares) internal view returns (uint256) {\\n    uint256 shares = Math.min(_shares, balanceOf(_account));\\n    require(shares > 0, \\\"!shares\\\");\\n    return shares;\\n  }\\n\\n  function _increaseDebt(address _strategy, uint256 _amount) internal {\\n    strategies[_strategy].totalDebt = strategies[_strategy].totalDebt + _amount;\\n    totalDebt = totalDebt + _amount;\\n  }\\n\\n  function _decreaseDebt(address _strategy, uint256 _amount) internal {\\n    strategies[_strategy].totalDebt = strategies[_strategy].totalDebt - _amount;\\n    totalDebt = totalDebt - _amount;\\n  }\\n\\n  function _ensureValidDepositAmount(address _account, uint256 _amount) internal view returns (uint256) {\\n    uint256 amount = Math.min(_amount, token.balanceOf(_account));\\n    amount = Math.min(amount, _availableDepositLimit());\\n\\n    require(amount > 0, \\\"!amount\\\");\\n    return amount;\\n  }\\n\\n  function _updateLockedProfit(\\n    uint256 _gain,\\n    uint256 _totalFees,\\n    uint256 _loss\\n  ) internal {\\n    // Profit is locked and gradually released per block\\n    // NOTE: compute current locked profit and replace with sum of current and new\\n    uint256 locakedProfileBeforeLoss = _calculateLockedProfit() + _gain - _totalFees;\\n    if (locakedProfileBeforeLoss > _loss) {\\n      lockedProfit = locakedProfileBeforeLoss - _loss;\\n    } else {\\n      lockedProfit = 0;\\n    }\\n  }\\n\\n  // solhint-disable-next-line no-unused-vars\\n  function _authorizeUpgrade(address) internal view override {\\n    _onlyGovernance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IStaking {\\n  function totalWorkingSupply() external view returns (uint256);\\n\\n  function workingBalanceOf(address _user) external view returns (uint256);\\n}\\n\\ninterface IStakingV2 {\\n  function stakeForUser(\\n    uint248 _amount,\\n    uint8 _lockPeriod,\\n    address _to\\n  ) external returns (uint256);\\n\\n  function stakeAndBoostForUser(\\n    uint248 _amount,\\n    uint8 _lockPeriod,\\n    address _to,\\n    address[] calldata _vaultsToBoost\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHealthCheck.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IHealthCheck {\\n  function check(\\n    address callerStrategy,\\n    uint256 profit,\\n    uint256 loss,\\n    uint256 debtPayment,\\n    uint256 debtOutstanding,\\n    uint256 totalDebt\\n  ) external view returns (bool);\\n\\n  function doHealthCheck(address _strategy) external view returns (bool);\\n\\n  function enableCheck(address _strategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n  // *** Events *** //\\n  event Harvested(uint256 _profit, uint256 _loss, uint256 _debtPayment, uint256 _debtOutstanding);\\n  event StrategistUpdated(address _newStrategist);\\n  event KeeperUpdated(address _newKeeper);\\n  event MinReportDelayUpdated(uint256 _delay);\\n  event MaxReportDelayUpdated(uint256 _delay);\\n  event ProfitFactorUpdated(uint256 _profitFactor);\\n  event DebtThresholdUpdated(uint256 _debtThreshold);\\n  event EmergencyExitEnabled();\\n\\n  // *** The following functions are used by the Vault *** //\\n  /// @notice returns the address of the token that the strategy wants\\n  function want() external view returns (IERC20);\\n\\n  /// @notice the address of the Vault that the strategy belongs to\\n  function vault() external view returns (address);\\n\\n  /// @notice if the strategy is active\\n  function isActive() external view returns (bool);\\n\\n  /// @notice migrate the strategy to the new one\\n  function migrate(address _newStrategy) external;\\n\\n  /// @notice withdraw the amount from the strategy\\n  function withdraw(uint256 _amount) external returns (uint256);\\n\\n  /// @notice the amount of total assets managed by this strategy that should not account towards the TVL of the strategy\\n  function delegatedAssets() external view returns (uint256);\\n\\n  /// @notice the total assets that the strategy is managing\\n  function estimatedTotalAssets() external view returns (uint256);\\n\\n  // *** public read functions that can be called by anyone *** //\\n  function name() external view returns (string memory);\\n\\n  function harvester() external view returns (address);\\n\\n  function strategyProposer() external view returns (address);\\n\\n  function strategyDeveloper() external view returns (address);\\n\\n  function tendTrigger(uint256 _callCost) external view returns (bool);\\n\\n  function harvestTrigger(uint256 _callCost) external view returns (bool);\\n\\n  // *** write functions that can be called by the governance, the strategist or the keeper *** //\\n  function tend() external;\\n\\n  function harvest() external;\\n\\n  // *** write functions that can be called by the governance or the strategist ***//\\n\\n  function setHarvester(address _havester) external;\\n\\n  function setVault(address _vault) external;\\n\\n  /// @notice `minReportDelay` is the minimum number of blocks that should pass for `harvest()` to be called.\\n  function setMinReportDelay(uint256 _delay) external;\\n\\n  function setMaxReportDelay(uint256 _delay) external;\\n\\n  /// @notice `profitFactor` is used to determine if it's worthwhile to harvest, given gas costs.\\n  function setProfitFactor(uint256 _profitFactor) external;\\n\\n  /// @notice Sets how far the Strategy can go into loss without a harvest and report being required.\\n  function setDebtThreshold(uint256 _debtThreshold) external;\\n\\n  // *** write functions that can be called by the governance, or the strategist, or the guardian, or the management *** //\\n  function setEmergencyExit() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControlManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IAccessControlManager {\\n  function hasAccess(address _user, address _vault) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeCollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IFeeCollection {\\n  function collectManageFee(uint256 _amount) external;\\n\\n  function collectPerformanceFee(address _strategy, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/SingleAssetVaultBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./BaseVault.sol\\\";\\nimport \\\"../libraries/VaultUtils.sol\\\";\\n\\n///  @dev NOTE: do not add any new state variables to this contract. If needed, see {VaultDataStorage.sol} instead.\\nabstract contract SingleAssetVaultBase is BaseVault {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __SingleAssetVaultBase_init_unchained(address _token) internal {\\n    require(_token != address(0), \\\"!token\\\");\\n    token = IERC20Upgradeable(_token);\\n    // the vault decimals need to match the tokens to avoid any conversion\\n    vaultDecimals = ERC20Upgradeable(address(token)).decimals();\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __SingleAssetVaultBase_init(\\n    string memory _name,\\n    string memory _symbol,\\n    address _governance,\\n    address _gatekeeper,\\n    address _feeCollection,\\n    address _strategyDataStoreAddress,\\n    address _token,\\n    address _accessManager,\\n    address _vaultRewards\\n  ) internal {\\n    __BaseVault__init(\\n      _name,\\n      _symbol,\\n      _governance,\\n      _gatekeeper,\\n      _feeCollection,\\n      _strategyDataStoreAddress,\\n      _accessManager,\\n      _vaultRewards\\n    );\\n    __SingleAssetVaultBase_init_unchained(_token);\\n  }\\n\\n  /// @notice Returns the total quantity of all assets under control of this\\n  ///   Vault, whether they're loaned out to a Strategy, or currently held in\\n  ///   the Vault.\\n  /// @return The total assets under control of this Vault.\\n  function totalAsset() external view returns (uint256) {\\n    return _totalAsset();\\n  }\\n\\n  /// @notice the remaining amount of underlying tokens that still can be deposited into the vault before reaching the limit\\n  function availableDepositLimit() external view returns (uint256) {\\n    return _availableDepositLimit();\\n  }\\n\\n  /// @notice Determines the maximum quantity of shares this Vault can facilitate a\\n  ///  withdrawal for, factoring in assets currently residing in the Vault,\\n  ///  as well as those deployed to strategies on the Vault's balance sheet.\\n  /// @dev Regarding how shares are calculated, see dev note on `deposit`.\\n  ///  If you want to calculated the maximum a user could withdraw up to,\\n  ///  you want to use this function.\\n  /// Note that the amount provided by this function is the theoretical\\n  ///  maximum possible from withdrawing, the real amount depends on the\\n  ///  realized losses incurred during withdrawal.\\n  /// @return The total quantity of shares this Vault can provide.\\n  function maxAvailableShares() external view returns (uint256) {\\n    return _maxAvailableShares();\\n  }\\n\\n  /// @notice Gives the price for a single Vault share.\\n  /// @dev See dev note on `withdraw`.\\n  /// @return The value of a single share.\\n  function pricePerShare() external view returns (uint256) {\\n    return _shareValue(10**vaultDecimals);\\n  }\\n\\n  /// @notice Determines if `_strategy` is past its debt limit and if any tokens\\n  ///  should be withdrawn to the Vault.\\n  /// @param _strategy The Strategy to check.\\n  /// @return The quantity of tokens to withdraw.\\n  function debtOutstanding(address _strategy) external view returns (uint256) {\\n    return _debtOutstanding(_strategy);\\n  }\\n\\n  /// @notice Amount of tokens in Vault a Strategy has access to as a credit line.\\n  ///  This will check the Strategy's debt limit, as well as the tokens\\n  ///  available in the Vault, and determine the maximum amount of tokens\\n  ///  (if any) the Strategy may draw on.\\n  /// In the rare case the Vault is in emergency shutdown this will return 0.\\n  /// @param _strategy The Strategy to check.\\n  /// @return The quantity of tokens available for the Strategy to draw on.\\n  function creditAvailable(address _strategy) external view returns (uint256) {\\n    return _creditAvailable(_strategy);\\n  }\\n\\n  /// @notice Provide an accurate expected value for the return this `strategy`\\n  /// would provide to the Vault the next time `report()` is called\\n  /// (since the last time it was called).\\n  /// @param _strategy The Strategy to determine the expected return for.\\n  /// @return The anticipated amount `strategy` should make on its investment since its last report.\\n  function expectedReturn(address _strategy) external view returns (uint256) {\\n    return _expectedReturn(_strategy);\\n  }\\n\\n  /// @notice send the tokens that are not managed by the vault to the governance\\n  /// @param _token the token to send\\n  /// @param _amount the amount of tokens to send\\n  function sweep(address _token, uint256 _amount) external {\\n    _onlyGovernance();\\n    require(address(token) != _token, \\\"!token\\\");\\n    _sweep(_token, _amount, governance);\\n  }\\n\\n  function _totalAsset() internal view returns (uint256) {\\n    return token.balanceOf(address(this)) + totalDebt;\\n  }\\n\\n  function _availableDepositLimit() internal view returns (uint256) {\\n    return depositLimit > _totalAsset() ? depositLimit - _totalAsset() : 0;\\n  }\\n\\n  function _shareValue(uint256 _sharesAmount) internal view returns (uint256) {\\n    uint256 supply = totalSupply();\\n    // if the value is empty then the price is 1:1\\n    return supply == 0 ? _sharesAmount : (_sharesAmount * _freeFunds()) / supply;\\n  }\\n\\n  function _calculateLockedProfit() internal view returns (uint256) {\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 lockedFundRatio = (block.timestamp - lastReport) * lockedProfitDegradation;\\n    return\\n      lockedFundRatio < DEGRADATION_COEFFICIENT\\n        ? lockedProfit - (lockedFundRatio * lockedProfit) / DEGRADATION_COEFFICIENT\\n        : 0;\\n  }\\n\\n  function _freeFunds() internal view returns (uint256) {\\n    return _totalAsset() - _calculateLockedProfit();\\n  }\\n\\n  function _sharesForAmount(uint256 _amount) internal view returns (uint256) {\\n    uint256 freeFunds_ = _freeFunds();\\n    return freeFunds_ > 0 ? (_amount * totalSupply()) / freeFunds_ : 0;\\n  }\\n\\n  function _maxAvailableShares() internal view returns (uint256) {\\n    uint256 shares_ = _sharesForAmount(token.balanceOf(address(this)));\\n    address[] memory withdrawQueue = _strategyDataStore().withdrawQueue(address(this));\\n    for (uint256 i = 0; i < withdrawQueue.length; i++) {\\n      shares_ = shares_ + _sharesForAmount(strategies[withdrawQueue[i]].totalDebt);\\n    }\\n    return shares_;\\n  }\\n\\n  function _debtOutstanding(address _strategy) internal view returns (uint256) {\\n    _validateStrategy(_strategy);\\n    return VaultUtils.debtOutstanding(emergencyShutdown, _totalAsset(), _strategyDataStore(), strategies, _strategy);\\n  }\\n\\n  function _creditAvailable(address _strategy) internal view returns (uint256) {\\n    if (emergencyShutdown) {\\n      return 0;\\n    }\\n    _validateStrategy(_strategy);\\n    return VaultUtils.creditAvailable(token, _totalAsset(), totalDebt, _strategyDataStore(), strategies, _strategy);\\n  }\\n\\n  function _expectedReturn(address _strategy) internal view returns (uint256) {\\n    _validateStrategy(_strategy);\\n    return VaultUtils.expectedReturn(strategies, _strategy);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/BaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IVaultStrategyDataStore.sol\\\";\\nimport \\\"../interfaces/IYOPRewards.sol\\\";\\nimport \\\"./VaultMetaDataStore.sol\\\";\\n\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\n/// @dev This contract is marked abstract to avoid being used directly.\\n///  NOTE: do not add any new state variables to this contract. If needed, see {VaultDataStorage.sol} instead.\\nabstract contract BaseVault is ERC20PermitUpgradeable, VaultMetaDataStore {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event StrategyAdded(address indexed _strategy);\\n  event StrategyMigrated(address indexed _oldVersion, address indexed _newVersion);\\n  event StrategyRevoked(address indexed _strategy);\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  // solhint-disable-next-line\\n  function __BaseVault__init_unchained() internal {}\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseVault__init(\\n    string memory _name,\\n    string memory _symbol,\\n    address _governance,\\n    address _gatekeeper,\\n    address _feeCollection,\\n    address _strategyDataStoreAddress,\\n    address _accessManager,\\n    address _vaultRewards\\n  ) internal {\\n    __ERC20_init(_name, _symbol);\\n    __ERC20Permit_init(_name);\\n    __VaultMetaDataStore_init(\\n      _governance,\\n      _gatekeeper,\\n      _feeCollection,\\n      _strategyDataStoreAddress,\\n      _accessManager,\\n      _vaultRewards\\n    );\\n    __BaseVault__init_unchained();\\n  }\\n\\n  /// @notice returns decimals value of the vault\\n  function decimals() public view override returns (uint8) {\\n    return vaultDecimals;\\n  }\\n\\n  /// @notice Init a new strategy. This should only be called by the {VaultStrategyDataStore} and should not be invoked manually.\\n  ///   Use {VaultStrategyDataStore.addStrategy} to manually add a strategy to a Vault.\\n  /// @dev This will be called by the {VaultStrategyDataStore} when a strategy is added to a given Vault.\\n  function addStrategy(address _strategy) external virtual returns (bool) {\\n    _onlyNotEmergencyShutdown();\\n    _onlyStrategyDataStore();\\n    return _addStrategy(_strategy);\\n  }\\n\\n  /// @notice Migrate a new strategy. This should only be called by the {VaultStrategyDataStore} and should not be invoked manually.\\n  ///   Use {VaultStrategyDataStore.migrateStrategy} to manually migrate a strategy for a Vault.\\n  /// @dev This will called be the {VaultStrategyDataStore} when a strategy is migrated.\\n  ///  This will then call the strategy to migrate (as the strategy only allows the vault to call the migrate function).\\n  function migrateStrategy(address _oldVersion, address _newVersion) external virtual returns (bool) {\\n    _onlyStrategyDataStore();\\n    return _migrateStrategy(_oldVersion, _newVersion);\\n  }\\n\\n  /// @notice called by the strategy to revoke itself. Should not be called by any other means.\\n  ///  Use {VaultStrategyDataStore.revokeStrategy} to revoke a strategy manually.\\n  /// @dev The strategy could talk to the {VaultStrategyDataStore} directly when revoking itself.\\n  ///  However, that means we will need to change the interfaces to Strategies and make them incompatible with Yearn's strategies.\\n  ///  To avoid that, the strategies will continue talking to the Vault and the Vault will then let the {VaultStrategyDataStore} know.\\n  function revokeStrategy() external {\\n    _validateStrategy(_msgSender());\\n    _strategyDataStore().revokeStrategyByStrategy(_msgSender());\\n    emit StrategyRevoked(_msgSender());\\n  }\\n\\n  function strategy(address _strategy) external view returns (StrategyInfo memory) {\\n    return strategies[_strategy];\\n  }\\n\\n  function strategyDebtRatio(address _strategy) external view returns (uint256) {\\n    return _strategyDataStore().strategyDebtRatio(address(this), _strategy);\\n  }\\n\\n  /// @dev It doesn't inherit openzepplin's ERC165 implementation to save on contract size\\n  ///  but it is compatible with ERC165\\n  function supportsInterface(bytes4 _interfaceId) external view virtual returns (bool) {\\n    // 0x01ffc9a7 is the interfaceId of IERC165 itself\\n    return _interfaceId == type(IVault).interfaceId || _interfaceId == 0x01ffc9a7;\\n  }\\n\\n  /// @dev This is called when tokens are minted, transferred or burned by the ERC20 implementation from openzeppelin\\n  // solhint-disable-next-line no-unused-vars\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256\\n  ) internal override {\\n    if (_from == address(0)) {\\n      // this is a mint event, track block time for the account\\n      dt[_to] = block.number;\\n    } else {\\n      // this is a transfer or burn event, make sure it is at least 1 block later from deposit to prevent flash loan\\n      // this will cause a small issue that if a user minted some tokens before, and then mint some more and withdraw (burn) or transfer previously minted tokens in the same block, this will fail.\\n      // But it should not be a issue for majority of users and it does prevent flash loan\\n      require(block.number > dt[_from], \\\"!block\\\");\\n    }\\n    if (vaultRewards != address(0)) {\\n      if (_from != address(0)) {\\n        IYOPRewards(vaultRewards).calculateVaultRewards(_from);\\n      }\\n      if (_to != address(0)) {\\n        IYOPRewards(vaultRewards).calculateVaultRewards(_to);\\n      }\\n    }\\n  }\\n\\n  function _strategyDataStore() internal view returns (IVaultStrategyDataStore) {\\n    return IVaultStrategyDataStore(strategyDataStore);\\n  }\\n\\n  function _onlyStrategyDataStore() internal view {\\n    require(_msgSender() == strategyDataStore, \\\"!strategyStore\\\");\\n  }\\n\\n  /// @dev ensure the vault is not in emergency shutdown mode\\n  function _onlyNotEmergencyShutdown() internal view {\\n    require(emergencyShutdown == false, \\\"emergency shutdown\\\");\\n  }\\n\\n  function _validateStrategy(address _strategy) internal view {\\n    require(strategies[_strategy].activation > 0, \\\"!strategy\\\");\\n  }\\n\\n  function _addStrategy(address _strategy) internal returns (bool) {\\n    /* solhint-disable not-rely-on-time */\\n    strategies[_strategy] = StrategyInfo({\\n      activation: block.timestamp,\\n      lastReport: block.timestamp,\\n      totalDebt: 0,\\n      totalGain: 0,\\n      totalLoss: 0\\n    });\\n    emit StrategyAdded(_strategy);\\n    return true;\\n    /* solhint-enable */\\n  }\\n\\n  function _migrateStrategy(address _oldVersion, address _newVersion) internal returns (bool) {\\n    StrategyInfo memory info = strategies[_oldVersion];\\n    strategies[_oldVersion].totalDebt = 0;\\n    strategies[_newVersion] = StrategyInfo({\\n      activation: info.activation,\\n      lastReport: info.lastReport,\\n      totalDebt: info.totalDebt,\\n      totalGain: 0,\\n      totalLoss: 0\\n    });\\n    IStrategy(_oldVersion).migrate(_newVersion);\\n    emit StrategyMigrated(_oldVersion, _newVersion);\\n    return true;\\n  }\\n\\n  function _sweep(\\n    address _token,\\n    uint256 _amount,\\n    address _to\\n  ) internal {\\n    IERC20Upgradeable token_ = IERC20Upgradeable(_token);\\n    _amount = Math.min(_amount, token_.balanceOf(address(this)));\\n    token_.safeTransfer(_to, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/VaultUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IHealthCheck.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IFeeCollection.sol\\\";\\nimport \\\"../interfaces/IVaultStrategyDataStore.sol\\\";\\n\\n///@dev This library will include some of the stateless functions used by the SingleAssetVault\\n/// The main reason to put these function in the library is to reduce the size of the main contract\\nlibrary VaultUtils {\\n  uint256 internal constant SECONDS_PER_YEAR = 31_556_952; // 365.2425 days\\n  uint256 internal constant MAX_BASIS_POINTS = 10_000;\\n\\n  function calculateBoostedVaultBalance(\\n    address _user,\\n    address _stakingContract,\\n    address _vaultContract,\\n    uint128 _vaultBalanceWeight,\\n    uint128 _stakingBalanceWeight\\n  ) external view returns (uint256) {\\n    uint256 stakingPoolSize = IStaking(_stakingContract).workingBalanceOf(_user);\\n    uint256 totalStakingSize = IStaking(_stakingContract).totalWorkingSupply();\\n    uint256 userVaultBalance = IVault(_vaultContract).balanceOf(_user);\\n    uint256 totalVaultSize = IVault(_vaultContract).totalSupply();\\n    uint128 totalWeight = _vaultBalanceWeight + _stakingBalanceWeight;\\n    // boostedBalance = min(1 * userVaultBalance + 9 * stakingPoolSize/totalStakingSize*totalVaultSize, 10 * userVaultBalance);\\n    return\\n      Math.min(\\n        _vaultBalanceWeight *\\n          userVaultBalance +\\n          (totalStakingSize == 0 ? 0 : ((_stakingBalanceWeight * stakingPoolSize * totalVaultSize) / totalStakingSize)),\\n        totalWeight * userVaultBalance\\n      );\\n  }\\n\\n  function checkStrategyHealth(\\n    address _healthCheck,\\n    address _strategy,\\n    uint256 _gain,\\n    uint256 _loss,\\n    uint256 _debtPayment,\\n    uint256 _debtOutstanding,\\n    uint256 _totalDebt\\n  ) external {\\n    if (_healthCheck != address(0)) {\\n      IHealthCheck check = IHealthCheck(_healthCheck);\\n      if (check.doHealthCheck(_strategy)) {\\n        require(check.check(_strategy, _gain, _loss, _debtPayment, _debtOutstanding, _totalDebt), \\\"!healthy\\\");\\n      } else {\\n        check.enableCheck(_strategy);\\n      }\\n    }\\n  }\\n\\n  function assessManagementFee(\\n    uint256 _lastReport,\\n    uint256 _totalDebt,\\n    uint256 _delegateAssets,\\n    uint256 _managementFee\\n  ) public view returns (uint256) {\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 duration = block.timestamp - _lastReport;\\n    require(duration > 0, \\\"!block\\\"); // should not be called twice within the same block\\n    // the managementFee is per year, so only charge the management fee for the period since last time it is charged.\\n    if (_managementFee > 0) {\\n      uint256 strategyTVL = _totalDebt - _delegateAssets;\\n      return (strategyTVL * _managementFee * duration) / SECONDS_PER_YEAR / MAX_BASIS_POINTS;\\n    }\\n    return 0;\\n  }\\n\\n  function assessStrategyPerformanceFee(uint256 _performanceFee, uint256 _gain) public pure returns (uint256) {\\n    return (_gain * _performanceFee) / MAX_BASIS_POINTS;\\n  }\\n\\n  function calculateFees(\\n    mapping(address => StrategyInfo) storage _strategies,\\n    address _strategy,\\n    uint256 _gain,\\n    uint256 _managementFee,\\n    uint256 _performanceFee\\n  ) public view returns (uint256 totalFee, uint256 performanceFee) {\\n    // Issue new shares to cover fees\\n    // solhint-disable-next-line not-rely-on-time\\n    if (_strategies[_strategy].activation == block.timestamp) {\\n      return (0, 0); // NOTE: Just added, no fees to assess\\n    }\\n    if (_gain == 0) {\\n      // The fees are not charged if there hasn't been any gains reported\\n      return (0, 0);\\n    }\\n    uint256 managementFee_ = assessManagementFee(\\n      _strategies[_strategy].lastReport,\\n      _strategies[_strategy].totalDebt,\\n      IStrategy(_strategy).delegatedAssets(),\\n      _managementFee\\n    );\\n    uint256 strategyPerformanceFee_ = assessStrategyPerformanceFee(_performanceFee, _gain);\\n    uint256 totalFee_ = Math.min(_gain, managementFee_ + strategyPerformanceFee_);\\n    return (totalFee_, strategyPerformanceFee_);\\n  }\\n\\n  function assessFees(\\n    IERC20Upgradeable _token,\\n    address _feeCollection,\\n    mapping(address => StrategyInfo) storage _strategies,\\n    address _strategy,\\n    uint256 _gain,\\n    uint256 _managementFee,\\n    uint256 _performanceFee\\n  ) external returns (uint256) {\\n    uint256 totalFee_;\\n    uint256 performanceFee_;\\n    (totalFee_, performanceFee_) = calculateFees(_strategies, _strategy, _gain, _managementFee, _performanceFee);\\n\\n    if (totalFee_ > 0) {\\n      _token.approve(_feeCollection, totalFee_);\\n      uint256 managementFee_ = totalFee_ - performanceFee_;\\n      if (managementFee_ > 0) {\\n        IFeeCollection(_feeCollection).collectManageFee(managementFee_);\\n      }\\n      if (performanceFee_ > 0) {\\n        IFeeCollection(_feeCollection).collectPerformanceFee(_strategy, performanceFee_);\\n      }\\n    }\\n    return totalFee_;\\n  }\\n\\n  function reportLoss(\\n    mapping(address => StrategyInfo) storage _strategies,\\n    address _strategy,\\n    uint256 _totalDebt,\\n    IVaultStrategyDataStore _strategyDataStore,\\n    uint256 _loss\\n  ) public returns (uint256) {\\n    if (_loss > 0) {\\n      require(_strategies[_strategy].totalDebt >= _loss, \\\"!loss\\\");\\n      uint256 tRatio_ = _strategyDataStore.vaultTotalDebtRatio(address(this));\\n      uint256 straRatio_ = _strategyDataStore.strategyDebtRatio(address(this), _strategy);\\n      // make sure we reduce our trust with the strategy by the amount of loss\\n      if (tRatio_ != 0) {\\n        uint256 c = Math.min((_loss * tRatio_) / _totalDebt, straRatio_);\\n        _strategyDataStore.updateStrategyDebtRatio(address(this), _strategy, straRatio_ - c);\\n      }\\n      _strategies[_strategy].totalLoss = _strategies[_strategy].totalLoss + _loss;\\n      _strategies[_strategy].totalDebt = _strategies[_strategy].totalDebt - _loss;\\n      _totalDebt = _totalDebt - _loss;\\n    }\\n    return _totalDebt;\\n  }\\n\\n  function creditAvailable(\\n    IERC20Upgradeable _token,\\n    uint256 _totalAsset,\\n    uint256 _totalDebt,\\n    IVaultStrategyDataStore _strategyDataStore,\\n    mapping(address => StrategyInfo) storage _strategies,\\n    address _strategy\\n  ) external view returns (uint256) {\\n    uint256 vaultTotalDebtLimit_ = (_totalAsset * _strategyDataStore.vaultTotalDebtRatio(address(this))) /\\n      MAX_BASIS_POINTS;\\n\\n    uint256 strategyDebtLimit_ = (_totalAsset * _strategyDataStore.strategyDebtRatio(address(this), _strategy)) /\\n      MAX_BASIS_POINTS;\\n    uint256 strategyTotalDebt_ = _strategies[_strategy].totalDebt;\\n    uint256 strategyMinDebtPerHarvest_ = _strategyDataStore.strategyMinDebtPerHarvest(address(this), _strategy);\\n    uint256 strategyMaxDebtPerHarvest_ = _strategyDataStore.strategyMaxDebtPerHarvest(address(this), _strategy);\\n\\n    if ((strategyDebtLimit_ <= strategyTotalDebt_) || (vaultTotalDebtLimit_ <= _totalDebt)) {\\n      return 0;\\n    }\\n\\n    uint256 available_ = strategyDebtLimit_ - strategyTotalDebt_;\\n    available_ = Math.min(available_, vaultTotalDebtLimit_ - _totalDebt);\\n    available_ = Math.min(available_, _token.balanceOf(address(this)));\\n\\n    return available_ < strategyMinDebtPerHarvest_ ? 0 : Math.min(available_, strategyMaxDebtPerHarvest_);\\n  }\\n\\n  function debtOutstanding(\\n    bool _emergencyShutdown,\\n    uint256 _totalAsset,\\n    IVaultStrategyDataStore _strategyDataStore,\\n    mapping(address => StrategyInfo) storage _strategies,\\n    address _strategy\\n  ) external view returns (uint256) {\\n    if (_strategyDataStore.vaultTotalDebtRatio(address(this)) == 0) {\\n      return _strategies[_strategy].totalDebt;\\n    }\\n    uint256 strategyLimit_ = (_totalAsset * _strategyDataStore.strategyDebtRatio(address(this), _strategy)) /\\n      MAX_BASIS_POINTS;\\n    uint256 strategyTotalDebt_ = _strategies[_strategy].totalDebt;\\n\\n    if (_emergencyShutdown) {\\n      return strategyTotalDebt_;\\n    } else if (strategyTotalDebt_ <= strategyLimit_) {\\n      return 0;\\n    } else {\\n      return strategyTotalDebt_ - strategyLimit_;\\n    }\\n  }\\n\\n  function expectedReturn(mapping(address => StrategyInfo) storage _strategies, address _strategy)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    uint256 strategyLastReport_ = _strategies[_strategy].lastReport;\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 sinceLastHarvest_ = block.timestamp - strategyLastReport_;\\n    uint256 totalHarvestTime_ = strategyLastReport_ - _strategies[_strategy].activation;\\n\\n    // NOTE: If either `sinceLastHarvest_` or `totalHarvestTime_` is 0, we can short-circuit to `0`\\n    if ((sinceLastHarvest_ > 0) && (totalHarvestTime_ > 0) && (IStrategy(_strategy).isActive())) {\\n      // # NOTE: Unlikely to throw unless strategy accumalates >1e68 returns\\n      // # NOTE: Calculate average over period of time where harvests have occured in the past\\n      return (_strategies[_strategy].totalGain * sinceLastHarvest_) / totalHarvestTime_;\\n    } else {\\n      return 0;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal onlyInitializing {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultStrategyDataStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IVaultStrategyDataStore {\\n  function strategyPerformanceFee(address _vault, address _strategy) external view returns (uint256);\\n\\n  function strategyActivation(address _vault, address _strategy) external view returns (uint256);\\n\\n  function strategyDebtRatio(address _vault, address _strategy) external view returns (uint256);\\n\\n  function strategyMinDebtPerHarvest(address _vault, address _strategy) external view returns (uint256);\\n\\n  function strategyMaxDebtPerHarvest(address _vault, address _strategy) external view returns (uint256);\\n\\n  function vaultStrategies(address _vault) external view returns (address[] memory);\\n\\n  function vaultTotalDebtRatio(address _vault) external view returns (uint256);\\n\\n  function withdrawQueue(address _vault) external view returns (address[] memory);\\n\\n  function revokeStrategyByStrategy(address _strategy) external;\\n\\n  function setVaultManager(address _vault, address _manager) external;\\n\\n  function setMaxTotalDebtRatio(address _vault, uint256 _maxTotalDebtRatio) external;\\n\\n  function addStrategy(\\n    address _vault,\\n    address _strategy,\\n    uint256 _debtRatio,\\n    uint256 _minDebtPerHarvest,\\n    uint256 _maxDebtPerHarvest,\\n    uint256 _performanceFee\\n  ) external;\\n\\n  function updateStrategyPerformanceFee(\\n    address _vault,\\n    address _strategy,\\n    uint256 _performanceFee\\n  ) external;\\n\\n  function updateStrategyDebtRatio(\\n    address _vault,\\n    address _strategy,\\n    uint256 _debtRatio\\n  ) external;\\n\\n  function updateStrategyMinDebtHarvest(\\n    address _vault,\\n    address _strategy,\\n    uint256 _minDebtPerHarvest\\n  ) external;\\n\\n  function updateStrategyMaxDebtHarvest(\\n    address _vault,\\n    address _strategy,\\n    uint256 _maxDebtPerHarvest\\n  ) external;\\n\\n  function migrateStrategy(\\n    address _vault,\\n    address _oldStrategy,\\n    address _newStrategy\\n  ) external;\\n\\n  function revokeStrategy(address _vault, address _strategy) external;\\n\\n  function setWithdrawQueue(address _vault, address[] calldata _queue) external;\\n\\n  function addStrategyToWithdrawQueue(address _vault, address _strategy) external;\\n\\n  function removeStrategyFromWithdrawQueue(address _vault, address _strategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYOPRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IYOPRewards {\\n  /// @notice Returns the current emission rate (per epoch) for vault rewards and the current number of epoch (start from 1).\\n  function rate() external view returns (uint256 _rate, uint256 _epoch);\\n\\n  /// @notice Returns the current ratio of community emissions for vault users\\n  function vaultsRewardsWeight() external view returns (uint256);\\n\\n  /// @notice Returns the current ratio of community emissions for staking users\\n  function stakingRewardsWeight() external view returns (uint256);\\n\\n  /// @notice Set the ratios of community emission for vaults and staking respectively. Governance only. Should emit an event.\\n  function setRewardsAllocationWeights(uint256 _weightForVaults, uint256 _weightForStaking) external;\\n\\n  /// @notice Get the weight of a Vault\\n  function perVaultRewardsWeight(address vault) external view returns (uint256);\\n\\n  /// @notice Set the weights for vaults. Governance only. Should emit events.\\n  function setPerVaultRewardsWeight(address[] calldata vaults, uint256[] calldata weights) external;\\n\\n  /// @notice Calculate the rewards for the given user in the given vault. Vaults Only.\\n  /// This should be called by every Vault every time a user deposits or withdraws.\\n  function calculateVaultRewards(address _user) external;\\n\\n  /// @notice Calculate the rewards for the given stake id in the staking contract.\\n  function calculateStakingRewards(uint256 _stakeId) external;\\n\\n  /// @notice Allow a user to claim the accrued rewards from both vaults and staking, and transfer the YOP tokens to the given account.\\n  function claimAll(address _to) external;\\n\\n  /// @notice Calculate the unclaimed rewards for the calling user\\n  function allUnclaimedRewards(address _user)\\n    external\\n    view\\n    returns (\\n      uint256 totalRewards,\\n      uint256 vaultsRewards,\\n      uint256 stakingRewards\\n    );\\n}\\n\\ninterface IYOPRewardsV2 {\\n  function claimRewardsForStakes(uint256[] calldata _stakeIds) external returns (uint256, uint256[] memory);\\n\\n  function claimVaultRewardsForUsers(address[] calldata _users) external returns (uint256, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/VaultMetaDataStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"./roles/Governable.sol\\\";\\nimport \\\"./roles/Gatekeeperable.sol\\\";\\nimport \\\"./VaultDataStorage.sol\\\";\\n\\n///  @dev NOTE: do not add any new state variables to this contract. If needed, see {VaultDataStorage.sol} instead.\\nabstract contract VaultMetaDataStore is GovernableUpgradeable, Gatekeeperable, VaultDataStorage {\\n  event EmergencyShutdown(bool _active);\\n  event HealthCheckUpdated(address indexed _healthCheck);\\n  event FeeCollectionUpdated(address indexed _feeCollection);\\n  event ManagementFeeUpdated(uint256 _managementFee);\\n  event StrategyDataStoreUpdated(address indexed _strategyDataStore);\\n  event DepositLimitUpdated(uint256 _limit);\\n  event LockedProfitDegradationUpdated(uint256 _degradation);\\n  event AccessManagerUpdated(address indexed _accessManager);\\n  event VaultRewardsContractUpdated(address indexed _vaultRewards);\\n\\n  /// @notice The maximum basis points. 1 basis point is 0.01% and 100% is 10000 basis points\\n  uint256 internal constant MAX_BASIS_POINTS = 10_000;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __VaultMetaDataStore_init(\\n    address _governance,\\n    address _gatekeeper,\\n    address _feeCollection,\\n    address _strategyDataStore,\\n    address _accessManager,\\n    address _vaultRewards\\n  ) internal {\\n    __Governable_init(_governance);\\n    __Gatekeeperable_init(_gatekeeper);\\n    __VaultDataStorage_init();\\n    __VaultMetaDataStore_init_unchained(_feeCollection, _strategyDataStore, _accessManager, _vaultRewards);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __VaultMetaDataStore_init_unchained(\\n    address _feeCollection,\\n    address _strategyDataStore,\\n    address _accessManager,\\n    address _vaultRewards\\n  ) internal {\\n    _updateFeeCollection(_feeCollection);\\n    _updateStrategyDataStore(_strategyDataStore);\\n    _updateAccessManager(_accessManager);\\n    _updateVaultRewardsContract(_vaultRewards);\\n  }\\n\\n  /// @notice set the address to send the collected fees to. Only can be called by the governance.\\n  /// @param _feeCollection the new address to send the fees to.\\n  function setFeeCollection(address _feeCollection) external {\\n    _onlyGovernance();\\n    _updateFeeCollection(_feeCollection);\\n  }\\n\\n  /// @notice set the management fee in basis points. 1 basis point is 0.01% and 100% is 10000 basis points.\\n  function setManagementFee(uint256 _managementFee) external {\\n    _onlyGovernance();\\n    _updateManagementFee(_managementFee);\\n  }\\n\\n  function setGatekeeper(address _gatekeeper) external {\\n    _onlyGovernance();\\n    _updateGatekeeper(_gatekeeper);\\n  }\\n\\n  function setHealthCheck(address _healthCheck) external {\\n    _onlyGovernanceOrGatekeeper(governance);\\n    _updateHealthCheck(_healthCheck);\\n  }\\n\\n  /// @notice Activates or deactivates Vault mode where all Strategies go into full withdrawal.\\n  /// During Emergency Shutdown:\\n  /// 1. No Users may deposit into the Vault (but may withdraw as usual.)\\n  /// 2. Governance may not add new Strategies.\\n  /// 3. Each Strategy must pay back their debt as quickly as reasonable to minimally affect their position.\\n  /// 4. Only Governance may undo Emergency Shutdown.\\n  ///\\n  /// See contract level note for further details.\\n  ///\\n  /// This may only be called by governance or the guardian.\\n  /// @param _active If true, the Vault goes into Emergency Shutdown. If false, the Vault goes back into Normal Operation.\\n  function setVaultEmergencyShutdown(bool _active) external {\\n    if (_active) {\\n      _onlyGovernanceOrGatekeeper(governance);\\n    } else {\\n      _onlyGovernance();\\n    }\\n    if (emergencyShutdown != _active) {\\n      emergencyShutdown = _active;\\n      emit EmergencyShutdown(_active);\\n    }\\n  }\\n\\n  /// @notice Changes the locked profit degradation.\\n  /// @param _degradation The rate of degradation in percent per second scaled to 1e18.\\n  function setLockedProfileDegradation(uint256 _degradation) external {\\n    _onlyGovernance();\\n    require(_degradation <= DEGRADATION_COEFFICIENT, \\\"!value\\\");\\n    if (lockedProfitDegradation != _degradation) {\\n      lockedProfitDegradation = _degradation;\\n      emit LockedProfitDegradationUpdated(_degradation);\\n    }\\n  }\\n\\n  function setVaultCreator(address _creator) external {\\n    _onlyGovernanceOrGatekeeper(governance);\\n    creator = _creator;\\n  }\\n\\n  function setDepositLimit(uint256 _limit) external {\\n    _onlyGovernanceOrGatekeeper(governance);\\n    _updateDepositLimit(_limit);\\n  }\\n\\n  function setAccessManager(address _accessManager) external {\\n    _onlyGovernanceOrGatekeeper(governance);\\n    _updateAccessManager(_accessManager);\\n  }\\n\\n  function _updateFeeCollection(address _feeCollection) internal {\\n    require(_feeCollection != address(0), \\\"!input\\\");\\n    if (feeCollection != _feeCollection) {\\n      feeCollection = _feeCollection;\\n      emit FeeCollectionUpdated(_feeCollection);\\n    }\\n  }\\n\\n  function _updateManagementFee(uint256 _managementFee) internal {\\n    require(_managementFee < MAX_BASIS_POINTS, \\\"!input\\\");\\n    if (managementFee != _managementFee) {\\n      managementFee = _managementFee;\\n      emit ManagementFeeUpdated(_managementFee);\\n    }\\n  }\\n\\n  function _updateHealthCheck(address _healthCheck) internal {\\n    if (healthCheck != _healthCheck) {\\n      healthCheck = _healthCheck;\\n      emit HealthCheckUpdated(_healthCheck);\\n    }\\n  }\\n\\n  function _updateStrategyDataStore(address _strategyDataStore) internal {\\n    require(_strategyDataStore != address(0), \\\"!input\\\");\\n    if (strategyDataStore != _strategyDataStore) {\\n      strategyDataStore = _strategyDataStore;\\n      emit StrategyDataStoreUpdated(_strategyDataStore);\\n    }\\n  }\\n\\n  function _updateDepositLimit(uint256 _depositLimit) internal {\\n    if (depositLimit != _depositLimit) {\\n      depositLimit = _depositLimit;\\n      emit DepositLimitUpdated(_depositLimit);\\n    }\\n  }\\n\\n  function _updateAccessManager(address _accessManager) internal {\\n    if (accessManager != _accessManager) {\\n      accessManager = _accessManager;\\n      emit AccessManagerUpdated(_accessManager);\\n    }\\n  }\\n\\n  function _updateVaultRewardsContract(address _vaultRewards) internal {\\n    if (vaultRewards != _vaultRewards) {\\n      vaultRewards = _vaultRewards;\\n      emit VaultRewardsContractUpdated(_vaultRewards);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\nstruct StrategyInfo {\\n  uint256 activation;\\n  uint256 lastReport;\\n  uint256 totalDebt;\\n  uint256 totalGain;\\n  uint256 totalLoss;\\n}\\n\\ninterface IVault is IERC20, IERC20Permit {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function activation() external view returns (uint256);\\n\\n  function rewards() external view returns (address);\\n\\n  function managementFee() external view returns (uint256);\\n\\n  function gatekeeper() external view returns (address);\\n\\n  function governance() external view returns (address);\\n\\n  function creator() external view returns (address);\\n\\n  function strategyDataStore() external view returns (address);\\n\\n  function healthCheck() external view returns (address);\\n\\n  function emergencyShutdown() external view returns (bool);\\n\\n  function lockedProfitDegradation() external view returns (uint256);\\n\\n  function depositLimit() external view returns (uint256);\\n\\n  function lastReport() external view returns (uint256);\\n\\n  function lockedProfit() external view returns (uint256);\\n\\n  function totalDebt() external view returns (uint256);\\n\\n  function token() external view returns (address);\\n\\n  function totalAsset() external view returns (uint256);\\n\\n  function availableDepositLimit() external view returns (uint256);\\n\\n  function maxAvailableShares() external view returns (uint256);\\n\\n  function pricePerShare() external view returns (uint256);\\n\\n  function debtOutstanding(address _strategy) external view returns (uint256);\\n\\n  function creditAvailable(address _strategy) external view returns (uint256);\\n\\n  function expectedReturn(address _strategy) external view returns (uint256);\\n\\n  function strategy(address _strategy) external view returns (StrategyInfo memory);\\n\\n  function strategyDebtRatio(address _strategy) external view returns (uint256);\\n\\n  function setRewards(address _rewards) external;\\n\\n  function setManagementFee(uint256 _managementFee) external;\\n\\n  function setGatekeeper(address _gatekeeper) external;\\n\\n  function setStrategyDataStore(address _strategyDataStoreContract) external;\\n\\n  function setHealthCheck(address _healthCheck) external;\\n\\n  function setVaultEmergencyShutdown(bool _active) external;\\n\\n  function setLockedProfileDegradation(uint256 _degradation) external;\\n\\n  function setDepositLimit(uint256 _limit) external;\\n\\n  function sweep(address _token, uint256 _amount) external;\\n\\n  function addStrategy(address _strategy) external returns (bool);\\n\\n  function migrateStrategy(address _oldVersion, address _newVersion) external returns (bool);\\n\\n  function revokeStrategy() external;\\n\\n  /// @notice deposit the given amount into the vault, and return the number of shares\\n  function deposit(uint256 _amount, address _recipient) external returns (uint256);\\n\\n  /// @notice burn the given amount of shares from the vault, and return the number of underlying tokens recovered\\n  function withdraw(\\n    uint256 _shares,\\n    address _recipient,\\n    uint256 _maxLoss\\n  ) external returns (uint256);\\n\\n  function report(\\n    uint256 _gain,\\n    uint256 _loss,\\n    uint256 _debtPayment\\n  ) external returns (uint256);\\n}\\n\\ninterface IBoostedVault {\\n  function totalBoostedSupply() external view returns (uint256);\\n\\n  function boostedBalanceOf(address _user) external view returns (uint256);\\n\\n  function updateBoostedBalancesForUsers(address[] calldata _users) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/roles/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ninterface IGovernable {\\n  function proposeGovernance(address _pendingGovernance) external;\\n\\n  function acceptGovernance() external;\\n}\\n\\nabstract contract GovernableInternal {\\n  event GovenanceUpdated(address _govenance);\\n  event GovenanceProposed(address _pendingGovenance);\\n\\n  /// @dev This contract is used as part of the Vault contract and it is upgradeable.\\n  ///  which means any changes to the state variables could corrupt the data. Do not modify these at all.\\n  /// @notice the address of the current governance\\n  address public governance;\\n  /// @notice the address of the pending governance\\n  address public pendingGovernance;\\n\\n  /// @dev ensure msg.send is the governanace\\n  modifier onlyGovernance() {\\n    require(_getMsgSender() == governance, \\\"governance only\\\");\\n    _;\\n  }\\n\\n  /// @dev ensure msg.send is the pendingGovernance\\n  modifier onlyPendingGovernance() {\\n    require(_getMsgSender() == pendingGovernance, \\\"pending governance only\\\");\\n    _;\\n  }\\n\\n  /// @dev the deployer of the contract will be set as the initial governance\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Governable_init_unchained(address _governance) internal {\\n    require(_getMsgSender() != _governance, \\\"invalid address\\\");\\n    _updateGovernance(_governance);\\n  }\\n\\n  ///@notice propose a new governance of the vault. Only can be called by the existing governance.\\n  ///@param _pendingGovernance the address of the pending governance\\n  function proposeGovernance(address _pendingGovernance) external onlyGovernance {\\n    require(_pendingGovernance != address(0), \\\"invalid address\\\");\\n    require(_pendingGovernance != governance, \\\"already the governance\\\");\\n    pendingGovernance = _pendingGovernance;\\n    emit GovenanceProposed(_pendingGovernance);\\n  }\\n\\n  ///@notice accept the proposal to be the governance of the vault. Only can be called by the pending governance.\\n  function acceptGovernance() external onlyPendingGovernance {\\n    _updateGovernance(pendingGovernance);\\n  }\\n\\n  function _updateGovernance(address _pendingGovernance) internal {\\n    governance = _pendingGovernance;\\n    emit GovenanceUpdated(governance);\\n  }\\n\\n  /// @dev provides an internal function to allow reduce the contract size\\n  function _onlyGovernance() internal view {\\n    require(_getMsgSender() == governance, \\\"governance only\\\");\\n  }\\n\\n  function _getMsgSender() internal view virtual returns (address);\\n}\\n\\n/// @dev Add a `governance` and a `pendingGovernance` role to the contract, and implements a 2-phased nominatiom process to change the governance.\\n///   Also provides a modifier to allow controlling access to functions of the contract.\\ncontract Governable is Context, GovernableInternal {\\n  constructor(address _governance) GovernableInternal() {\\n    __Governable_init_unchained(_governance);\\n  }\\n\\n  function _getMsgSender() internal view override returns (address) {\\n    return _msgSender();\\n  }\\n}\\n\\n/// @dev ungradeable version of the {Governable} contract. Can be used as part of an upgradeable contract.\\nabstract contract GovernableUpgradeable is ContextUpgradeable, GovernableInternal {\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Governable_init(address _governance) internal {\\n    __Context_init();\\n    __Governable_init_unchained(_governance);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _getMsgSender() internal view override returns (address) {\\n    return _msgSender();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/roles/Gatekeeperable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../interfaces/roles/IGatekeeperable.sol\\\";\\n\\n/// @dev Add the `Gatekeeper` role.\\n///   Gatekeepers will help ensure the security of the vaults. They can set vault limits, pause deposits or withdraws.\\n///   For vaults that defined restricted access, they will be able to control the access to these vaults as well.\\n///   This contract also provides a `onlyGatekeeper` modifier to allow controlling access to functions of the contract.\\nabstract contract Gatekeeperable is IGatekeeperable, ContextUpgradeable {\\n  event GatekeeperUpdated(address _guardian);\\n\\n  /// @notice the address of the guardian for the vault\\n  /// @dev This contract is used as part of the Vault contract and it is upgradeable.\\n  ///  which means any changes to the state variables could corrupt the data. Do not modify this at all.\\n  address public gatekeeper;\\n\\n  /// @dev make sure msg.sender is the guardian or the governance\\n  modifier onlyGovernanceOrGatekeeper(address _governance) {\\n    _onlyGovernanceOrGatekeeper(_governance);\\n    _;\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  /// @dev set the initial value for the gatekeeper. The deployer can not be the gatekeeper.\\n  /// @param _gatekeeper the default address of the guardian\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Gatekeeperable_init_unchained(address _gatekeeper) internal {\\n    require(_msgSender() != _gatekeeper, \\\"invalid address\\\");\\n    _updateGatekeeper(_gatekeeper);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Gatekeeperable_init(address _gatekeeper) internal {\\n    __Context_init();\\n    __Gatekeeperable_init_unchained(_gatekeeper);\\n  }\\n\\n  ///@dev this can be used internally to update the gatekeep. If you want to expose it, create an external function in the implementation contract and call this.\\n  function _updateGatekeeper(address _gatekeeper) internal {\\n    require(_gatekeeper != address(0), \\\"address is not valid\\\");\\n    require(_gatekeeper != gatekeeper, \\\"already the gatekeeper\\\");\\n    gatekeeper = _gatekeeper;\\n    emit GatekeeperUpdated(_gatekeeper);\\n  }\\n\\n  function _onlyGovernanceOrGatekeeper(address _governance) internal view {\\n    require((_msgSender() == _governance) || (gatekeeper != address(0) && gatekeeper == _msgSender()), \\\"!authorised\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/VaultDataStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {StrategyInfo} from \\\"../interfaces/IVault.sol\\\";\\n\\n/// @dev this contract is used to declare all the state variables that will be used by a Vault.\\n///  Because the vault itself is upgradeable, changes to state variables could cause data corruption.\\n///  The only safe operation is to add new fields, or rename an existing one (still not recommended to rename a field).\\n///  To avoid any issues, if a new field is needed, we should create a new version of the data store and extend the previous version,\\n///  rather than modifying the state variables directly.\\n// solhint-disable-next-line max-states-count\\ncontract VaultDataStorage {\\n  // ### Vault base properties\\n  uint8 internal vaultDecimals;\\n  bool public emergencyShutdown;\\n  /// @notice timestamp for when the vault is deployed\\n  uint256 public activation;\\n  uint256 public managementFee;\\n  /// @notice degradation for locked profit per second\\n  /// @dev the value is based on 6-hour degradation period (1/(60*60*6) = 0.000046)\\n  ///   NOTE: This is being deprecated by Yearn. See https://github.com/yearn/yearn-vaults/pull/471\\n  uint256 internal lockedProfitDegradation;\\n  uint256 public depositLimit;\\n  /// @notice the timestamp of the last report received from a strategy\\n  uint256 internal lastReport;\\n  /// @notice how much profit is locked and cant be withdrawn\\n  uint256 public lockedProfit;\\n  /// @notice total value borrowed by all the strategies\\n  uint256 public totalDebt;\\n\\n  address public feeCollection;\\n  address public healthCheck;\\n  address public strategyDataStore;\\n  address public accessManager;\\n  address public creator;\\n\\n  IERC20Upgradeable public token;\\n  mapping(address => StrategyInfo) internal strategies;\\n\\n  uint256 internal constant DEGRADATION_COEFFICIENT = 10**18;\\n  address public vaultRewards;\\n  /// @dev This is used to track the last deposit time of a user.\\n  ///  It will be checked before the vault receipt token is transferred and they can only happen at least 1 block later to prevent flash loan attacks\\n  mapping(address => uint256) internal dt;\\n\\n  /// @dev set the default values for the state variables here\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __VaultDataStorage_init() internal {\\n    vaultDecimals = 18;\\n    lockedProfitDegradation = (DEGRADATION_COEFFICIENT * 46) / 10**6;\\n    depositLimit = type(uint256).max;\\n    /* solhint-disable  not-rely-on-time */\\n    activation = block.timestamp;\\n    lastReport = block.timestamp;\\n    /* solhint-enable */\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/roles/IGatekeeperable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IGatekeeperable {\\n  function gatekeeper() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/VaultUtils.sol\": {\r\n        \"VaultUtils\": \"0x3252456634469ce6c2540c02cbfa98320e32f223\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"DepositLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_feeCollection\",\"type\":\"address\"}],\"name\":\"FeeCollectionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"GatekeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovenance\",\"type\":\"address\"}],\"name\":\"GovenanceProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_govenance\",\"type\":\"address\"}],\"name\":\"GovenanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_healthCheck\",\"type\":\"address\"}],\"name\":\"HealthCheckUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_degradation\",\"type\":\"uint256\"}],\"name\":\"LockedProfitDegradationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"StakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategyDataStore\",\"type\":\"address\"}],\"name\":\"StrategyDataStoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldVersion\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newVersion\",\"type\":\"address\"}],\"name\":\"StrategyMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debtPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debtAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vaultRewards\",\"type\":\"address\"}],\"name\":\"VaultRewardsContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFormulaWeights\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"vaultBalanceWeight\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stakingBalanceWeight\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"boostedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"creditAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"debtOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"expectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatekeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatekeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyDataStoreAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultRewards\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatekeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyDataStoreAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"latestBoostedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAvailableShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldVersion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newVersion\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"proposeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtPayment\",\"type\":\"uint256\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_vaultWeight\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stakingWeight\",\"type\":\"uint128\"}],\"name\":\"setBoostedFormulaWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollection\",\"type\":\"address\"}],\"name\":\"setFeeCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gatekeeper\",\"type\":\"address\"}],\"name\":\"setGatekeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_healthCheck\",\"type\":\"address\"}],\"name\":\"setHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_degradation\",\"type\":\"uint256\"}],\"name\":\"setLockedProfileDegradation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setVaultCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setVaultEmergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"strategy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoss\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyDataStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"strategyDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoostedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"updateBoostedBalancesForUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoss\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SingleAssetVaultV2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}