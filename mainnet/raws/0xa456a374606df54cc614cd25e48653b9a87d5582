{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface Imembership\r\n{\r\n     \r\n\r\n    function awardmembership (address memberaddress, uint256 level) external;\r\n\r\n    function getmembershiplevel (address memberaddress) external view returns (uint256);\r\n\r\n    function buymembership (uint256 level) external payable;\r\n\r\n    function setmembershipprice (uint256 price, uint256 level) external;\r\n\r\n    function getmembershipprice (uint256 level) view external returns(uint256);\r\n\r\n    function setbadge(string calldata badgename, address user ) external; \r\n\r\n    function getbadge(string calldata badgename, address user ) view external returns(bool); \r\n\r\n    function addnewowner (address newowner) external;\r\n\r\n    function transferamount(address rec, uint256 amount) external;\r\n\r\n    function getbalance() external view returns (uint256);\r\n\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n  bool private _notEntered;\r\n\r\n  constructor () {\r\n    // Storing an initial non-zero value makes deployment a bit more\r\n    // expensive, but in exchange the refund on every call to nonReentrant\r\n    // will be lower in amount. Since refunds are capped to a percetange of\r\n    // the total transaction's gas, it is best to keep them low in cases\r\n    // like this one, to increase the likelihood of the full refund coming\r\n    // into effect.\r\n    _notEntered = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _notEntered = false;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _notEntered = true;\r\n  }\r\n}\r\n\r\n\r\ncontract membership is Imembership, ReentrancyGuard {\r\n\r\n    //multiowner code\r\n\r\n\r\n    constructor(address[] memory _owners) {\r\n\r\n        _membershipleveltoprice[1] = 200000000000000000;\r\n        _membershipleveltoprice[2] = 500000000000000000;\r\n        _membershipleveltoprice[3] = 2000000000000000000;\r\n        _membershipleveltoprice[4] = 10000000000000000000;\r\n        _membershipleveltoprice[5] = 1000000000000000000000;\r\n\r\n\r\n\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            address owner = _owners[i];\r\n\r\n            require(owner != address(0), \"invalid owner\");\r\n            require(!isOwner[owner], \"owner not unique\");\r\n\r\n            isOwner[owner] = true;\r\n            owners.push(owner);\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    mapping(address => bool) public isOwner;\r\n\r\n    address[] public owners;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"not owner\");\r\n        _;\r\n    }\r\n\r\n\r\n     mapping(address => uint256) private _membershiplevel;\r\n\r\n     mapping(uint256 => uint256) private _membershipleveltoprice;\r\n\r\n     mapping(address => uint256) public _membershipdate;\r\n\r\n     mapping(address => uint256[]) private _badges;\r\n\r\n     mapping(string => mapping(address => bool)) private badge;\r\n\r\n\r\n\r\nfunction addnewowner (address newowner) onlyOwner override external\r\n{\r\n\r\n require(newowner != address(0), \"invalid owner\");\r\n            require(!isOwner[newowner], \"owner not unique\");\r\n\r\n            isOwner[newowner] = true;\r\n            owners.push(newowner);\r\n\r\n\r\n}\r\n\r\nfunction awardmembership (address memberaddress, uint256 level) onlyOwner override external \r\n\r\n{\r\n\r\n_membershiplevel[memberaddress] = level;\r\n_membershipdate[memberaddress] = block.timestamp;\r\n\r\n}\r\n\r\n    function buymembership (uint256 level) override external payable nonReentrant\r\n    {\r\n\r\n    require (_membershipleveltoprice[level] <= msg.value, \"Price does not match requested membership level\");\r\n\r\n    _membershiplevel[msg.sender] = level;\r\n    _membershipdate[msg.sender] = block.timestamp;\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction setmembershipprice (uint256 price, uint256 level) override external onlyOwner\r\n{\r\n\r\n_membershipleveltoprice[level] = price;\r\n\r\n}\r\n\r\nfunction getmembershipprice (uint256 level) override view external returns(uint256)\r\n{\r\n\r\nreturn _membershipleveltoprice[level];\r\n\r\n}\r\n\r\n\r\nfunction getmembershiplevel (address memberaddress) override external view returns (uint256)\r\n\r\n{\r\n\r\nreturn _membershiplevel[memberaddress];\r\n\r\n}\r\n\r\n\r\nfunction getbadge(string calldata badgename, address user ) override external view returns (bool) {\r\n\r\nreturn badge[badgename][user];\r\n\r\n}\r\n\r\nfunction getbalance() override external view returns (uint256) {\r\n\r\nreturn address(this).balance;\r\n\r\n}\r\n\r\nfunction transferamount(address rec, uint256 amount) override external onlyOwner nonReentrant\r\n{\r\n    require (address(this).balance >= amount, \"Insufficient balance\");\r\n\r\n    payable(rec).transfer(amount);\r\n}\r\n\r\n\r\nfunction setbadge(string calldata badgename, address user ) override external onlyOwner {\r\n\r\n badge[badgename][user] = true;\r\n\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_membershipdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"addnewowner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"awardmembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"buymembership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"badgename\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getbadge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberaddress\",\"type\":\"address\"}],\"name\":\"getmembershiplevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getmembershipprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"badgename\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setbadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setmembershipprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rec\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "membership", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000300cd034ded7fbbc05ebd597fdd4fd36d94b2f3d000000000000000000000000ebed2142fe8555e0c232b8e8be24fa2bf6f50419", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://69dd71c7c267f110ecb0d1b07d9ef4c5b37d56efefaef132bf44e68e00a2ed17"}]}