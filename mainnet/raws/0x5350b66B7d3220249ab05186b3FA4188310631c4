{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/strategies/balancer/BalDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../SlotsLib.sol\\\";\\r\\nimport \\\"../../governance/ControllableV2.sol\\\";\\r\\nimport \\\"../../../openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"../../../third_party/balancer/IBVault.sol\\\";\\r\\nimport \\\"../../../third_party/polygon/IRootChainManager.sol\\\";\\r\\nimport \\\"../../interface/ISmartVault.sol\\\";\\r\\nimport \\\"../../interface/IStrategy.sol\\\";\\r\\nimport \\\"../../../third_party/uniswap/IWETH.sol\\\";\\r\\n\\r\\n/// @title Cross chain depositor for BAL and WETH tokens to tetuBAL vault\\r\\n/// @author belbix\\r\\ncontract BalDepositor is ControllableV2 {\\r\\n  using SlotsLib for bytes32;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  // ----- CONSTANTS -------\\r\\n\\r\\n  /// @notice Version of the contract\\r\\n  /// @dev Should be incremented when contract changed\\r\\n  string public constant VERSION = \\\"1.0.0\\\";\\r\\n  address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n  address public constant BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\\r\\n  address public constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\r\\n  bytes32 public constant BALANCER_BAL_WETH_ID = 0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014;\\r\\n  address public constant BPT_BAL_WETH = 0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56;\\r\\n  address public constant POLYGON_BRIDGE = 0xA0c68C638235ee32657e8f720a23ceC1bFc77C77;\\r\\n  address public constant POLYGON_BRIDGE_PREDICATE = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\\r\\n  bytes32 internal constant _DESTINATION_VAULT_KEY = bytes32(uint256(keccak256(\\\"depositor.destination_vault\\\")) - 1);\\r\\n  bytes32 internal constant _ANOTHER_CHAIN_RECIPIENT_KEY = bytes32(uint256(keccak256(\\\"depositor.another_chain_recipient\\\")) - 1);\\r\\n\\r\\n  // ----- EVENTS -------\\r\\n\\r\\n  event DestinationVaultChanged(address oldValue, address newValue);\\r\\n  event AnotherChainRecipientChanged(address oldValue, address newValue);\\r\\n  event Deposited(uint balAmount, uint wethAmount, uint bptAmount);\\r\\n  event Claimed(uint balAmount);\\r\\n  event EthReceived(address sender, uint amount);\\r\\n\\r\\n  // ----- INITIALIZER -------\\r\\n\\r\\n  function initialize(\\r\\n    address controller_\\r\\n  ) external initializer {\\r\\n    ControllableV2.initializeControllable(controller_);\\r\\n\\r\\n    IERC20(WETH).safeApprove(BALANCER_VAULT, type(uint).max);\\r\\n    IERC20(BAL).safeApprove(BALANCER_VAULT, type(uint).max);\\r\\n    IERC20(BAL).safeApprove(POLYGON_BRIDGE_PREDICATE, type(uint).max);\\r\\n  }\\r\\n\\r\\n  modifier onlyHardworkerOrGov() {\\r\\n    require(IController(_controller()).isHardWorker(msg.sender)\\r\\n      || _isGovernance(msg.sender), \\\"Not hardworker or gov\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyGov() {\\r\\n    require(_isGovernance(msg.sender), \\\"Not gov\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // ----- GOV ACTIONS -------\\r\\n\\r\\n  function setDestinationVault(address value_) external onlyGov {\\r\\n    address oldValue = _DESTINATION_VAULT_KEY.getAddress();\\r\\n    IERC20(BPT_BAL_WETH).safeApprove(oldValue, 0);\\r\\n    emit DestinationVaultChanged(oldValue, value_);\\r\\n    _DESTINATION_VAULT_KEY.set(value_);\\r\\n    IERC20(BPT_BAL_WETH).safeApprove(value_, 0);\\r\\n    IERC20(BPT_BAL_WETH).safeApprove(value_, type(uint).max);\\r\\n  }\\r\\n\\r\\n  function setAnotherChainRecipient(address value_) external onlyGov {\\r\\n    address oldValue = _ANOTHER_CHAIN_RECIPIENT_KEY.getAddress();\\r\\n    emit AnotherChainRecipientChanged(oldValue, value_);\\r\\n    _ANOTHER_CHAIN_RECIPIENT_KEY.set(value_);\\r\\n  }\\r\\n\\r\\n  // ----- HARDWORKER ACTIONS -------\\r\\n\\r\\n  function depositBridgedAssets(bytes calldata bridgeData) external onlyHardworkerOrGov {\\r\\n\\r\\n    if (bridgeData.length != 0) {\\r\\n      IRootChainManager(POLYGON_BRIDGE).exit(bridgeData);\\r\\n    }\\r\\n\\r\\n    if (address(this).balance != 0) {\\r\\n      IWETH(WETH).deposit{value : address(this).balance}();\\r\\n    }\\r\\n\\r\\n    uint balBalance = IERC20(BAL).balanceOf(address(this));\\r\\n    uint wethBalance = IERC20(WETH).balanceOf(address(this));\\r\\n\\r\\n    if (balBalance == 0 || wethBalance == 0) {\\r\\n      // not enough balance\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint[] memory maxAmounts = new uint[](2);\\r\\n    maxAmounts[0] = balBalance * 11 / 10;\\r\\n    maxAmounts[1] = wethBalance * 11 / 10;\\r\\n\\r\\n    uint[] memory amounts = new uint[](2);\\r\\n    amounts[0] = balBalance;\\r\\n    amounts[1] = wethBalance;\\r\\n\\r\\n    IAsset[] memory _assets = new IAsset[](2);\\r\\n    _assets[0] = IAsset(BAL);\\r\\n    _assets[1] = IAsset(WETH);\\r\\n\\r\\n    bytes memory userData = abi.encode(IBVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amounts, 0);\\r\\n\\r\\n    IBVault(BALANCER_VAULT).joinPool(\\r\\n      BALANCER_BAL_WETH_ID,\\r\\n      address(this),\\r\\n      address(this),\\r\\n      IBVault.JoinPoolRequest({\\r\\n    assets : _assets,\\r\\n    maxAmountsIn : maxAmounts,\\r\\n    userData : userData,\\r\\n    fromInternalBalance : false\\r\\n    })\\r\\n    );\\r\\n\\r\\n    uint bptBalance = IERC20(BPT_BAL_WETH).balanceOf(address(this));\\r\\n\\r\\n    ISmartVault(_DESTINATION_VAULT_KEY.getAddress()).depositAndInvest(bptBalance);\\r\\n    emit Deposited(balBalance, wethBalance, bptBalance);\\r\\n  }\\r\\n\\r\\n  function claimAndMoveToAnotherChain() external onlyHardworkerOrGov {\\r\\n\\r\\n    address strategy = ISmartVault(_DESTINATION_VAULT_KEY.getAddress()).strategy();\\r\\n    uint balBalanceBefore = IERC20(BAL).balanceOf(address(this));\\r\\n\\r\\n    IStrategy(strategy).doHardWork();\\r\\n\\r\\n    uint balBalance = IERC20(BAL).balanceOf(address(this)) - balBalanceBefore;\\r\\n\\r\\n    require(balBalance != 0, \\\"Zero claim\\\");\\r\\n\\r\\n    bytes memory depositData = abi.encode(balBalance);\\r\\n    IRootChainManager(POLYGON_BRIDGE).depositFor(\\r\\n      _ANOTHER_CHAIN_RECIPIENT_KEY.getAddress(),\\r\\n      BAL,\\r\\n      depositData\\r\\n    );\\r\\n    emit Claimed(balBalance);\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n    emit EthReceived(msg.sender, msg.value);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/SlotsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\r\\n/// @author bogdoslav\\r\\nlibrary SlotsLib {\\r\\n\\r\\n  /// @dev Generates 'unique' slot address from its name\\r\\n  /// @param fullName full slot name in format \\\"eip1967.<contract>.<variable>\\\". For example: \\\"eip1967.controllable.created\\\"\\r\\n  function generate(string memory fullName) internal pure returns (bytes32) {\\r\\n    return bytes32(uint256(keccak256(bytes(fullName))) - 1);\\r\\n  }\\r\\n\\r\\n  function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\\r\\n    bytes memory tempEmptyStringTest = bytes(source);\\r\\n    if (tempEmptyStringTest.length == 0) {\\r\\n      return 0x0;\\r\\n    }\\r\\n    assembly {\\r\\n      result := mload(add(source, 32))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\r\\n    bytes memory bytesArray = new bytes(32);\\r\\n    for (uint256 i; i < 32; i++) {\\r\\n      bytesArray[i] = _bytes32[i];\\r\\n    }\\r\\n    return string(bytesArray);\\r\\n  }\\r\\n\\r\\n  // ************* GETTERS *******************\\r\\n\\r\\n  /// @dev Gets a slot as bytes32\\r\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot as an address\\r\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot as uint256\\r\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot as string\\r\\n  function getString(bytes32 slot) internal view returns (string memory result) {\\r\\n    bytes32 data;\\r\\n    assembly {\\r\\n      data := sload(slot)\\r\\n    }\\r\\n    result = bytes32ToString(data);\\r\\n  }\\r\\n\\r\\n  // ************* ARRAY GETTERS *******************\\r\\n\\r\\n  /// @dev Gets an array length\\r\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot array by index as address\\r\\n  /// @notice First slot is array length, elements ordered backward in memory\\r\\n  /// @notice This is unsafe, without checking array length.\\r\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\r\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\r\\n    assembly {\\r\\n      result := sload(pointer)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // ************* SETTERS *******************\\r\\n\\r\\n  /// @dev Sets a slot with bytes32\\r\\n  /// @notice Check address for 0 at the setter\\r\\n  function set(bytes32 slot, bytes32 value) internal {\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets a slot with address\\r\\n  /// @notice Check address for 0 at the setter\\r\\n  function set(bytes32 slot, address value) internal {\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets a slot with uint\\r\\n  function set(bytes32 slot, uint value) internal {\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets a slot with string (WARNING!!! truncated to 32 bytes)\\r\\n  function set(bytes32 slot, string memory str) internal {\\r\\n    bytes32 value = stringToBytes32(str);\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // ************* ARRAY SETTERS *******************\\r\\n\\r\\n  /// @dev Sets a slot array at index with address\\r\\n  /// @notice First slot is array length, elements ordered backward in memory\\r\\n  /// @notice This is unsafe, without checking array length.\\r\\n  function setAt(bytes32 slot, uint index, address value) internal {\\r\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\r\\n    assembly {\\r\\n      sstore(pointer, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets an array length\\r\\n  function setLength(bytes32 slot, uint length) internal {\\r\\n    assembly {\\r\\n      sstore(slot, length)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Pushes an address to the array\\r\\n  function push(bytes32 slot, address value) internal {\\r\\n    uint length = arrayLength(slot);\\r\\n    setAt(slot, length, value);\\r\\n    setLength(slot, length + 1);\\r\\n  }\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/governance/ControllableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\nimport \\\"../interface/IControllable.sol\\\";\\r\\nimport \\\"../interface/IControllableExtended.sol\\\";\\r\\nimport \\\"../interface/IController.sol\\\";\\r\\n\\r\\n/// @title Implement basic functionality for any contract that require strict control\\r\\n///        V2 is optimised version for less gas consumption\\r\\n/// @dev Can be used with upgradeable pattern.\\r\\n///      Require call initializeControllable() in any case.\\r\\n/// @author belbix\\r\\nabstract contract ControllableV2 is Initializable, IControllable, IControllableExtended {\\r\\n\\r\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\r\\n\\r\\n  event ContractInitialized(address controller, uint ts, uint block);\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  /// @param __controller Controller address\\r\\n  function initializeControllable(address __controller) public initializer {\\r\\n    _setController(__controller);\\r\\n    _setCreated(block.timestamp);\\r\\n    _setCreatedBlock(block.number);\\r\\n    emit ContractInitialized(__controller, block.timestamp, block.number);\\r\\n  }\\r\\n\\r\\n  /// @dev Return true if given address is controller\\r\\n  function isController(address _value) external override view returns (bool) {\\r\\n    return _isController(_value);\\r\\n  }\\r\\n\\r\\n  function _isController(address _value) internal view returns (bool) {\\r\\n    return _value == _controller();\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if given address is setup as governance in Controller\\r\\n  function isGovernance(address _value) external override view returns (bool) {\\r\\n    return _isGovernance(_value);\\r\\n  }\\r\\n\\r\\n  function _isGovernance(address _value) internal view returns (bool) {\\r\\n    return IController(_controller()).governance() == _value;\\r\\n  }\\r\\n\\r\\n  // ************* SETTERS/GETTERS *******************\\r\\n\\r\\n  /// @notice Return controller address saved in the contract slot\\r\\n  function controller() external view override returns (address) {\\r\\n    return _controller();\\r\\n  }\\r\\n\\r\\n  function _controller() internal view returns (address result) {\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Set a controller address to contract slot\\r\\n  function _setController(address _newController) private {\\r\\n    require(_newController != address(0));\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _newController)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation timestamp\\r\\n  /// @return ts Creation timestamp\\r\\n  function created() external view override returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.timestamp\\r\\n  function _setCreated(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation block number\\r\\n  /// @return ts Creation block number\\r\\n  function createdBlock() external view returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.number\\r\\n  function _setCreatedBlock(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n  unchecked {\\r\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n    uint256 newAllowance = oldAllowance - value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface IAsset {\\r\\n}\\r\\n\\r\\ninterface IBVault {\\r\\n  // Internal Balance\\r\\n  //\\r\\n  // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n  // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n  // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n  // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n  //\\r\\n  // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n  // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `user`'s Internal Balance for a set of tokens.\\r\\n     */\\r\\n  function getInternalBalance(address user, IERC20[] calldata tokens) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user's Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n  function manageUserBalance(UserBalanceOp[] calldata ops) external payable;\\r\\n\\r\\n  /**\\r\\n   * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n  struct UserBalanceOp {\\r\\n    UserBalanceOpKind kind;\\r\\n    IAsset asset;\\r\\n    uint256 amount;\\r\\n    address sender;\\r\\n    address payable recipient;\\r\\n  }\\r\\n\\r\\n  // There are four possible operations in `manageUserBalance`:\\r\\n  //\\r\\n  // - DEPOSIT_INTERNAL\\r\\n  // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n  // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n  //\\r\\n  // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n  // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n  // relevant for relayers).\\r\\n  //\\r\\n  // Emits an `InternalBalanceChanged` event.\\r\\n  //\\r\\n  //\\r\\n  // - WITHDRAW_INTERNAL\\r\\n  // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n  //\\r\\n  // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n  // it to the recipient as ETH.\\r\\n  //\\r\\n  // Emits an `InternalBalanceChanged` event.\\r\\n  //\\r\\n  //\\r\\n  // - TRANSFER_INTERNAL\\r\\n  // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n  //\\r\\n  // Reverts if the ETH sentinel value is passed.\\r\\n  //\\r\\n  // Emits an `InternalBalanceChanged` event.\\r\\n  //\\r\\n  //\\r\\n  // - TRANSFER_EXTERNAL\\r\\n  // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\r\\n  // relayers, as it lets them reuse a user's Vault allowance.\\r\\n  //\\r\\n  // Reverts if the ETH sentinel value is passed.\\r\\n  //\\r\\n  // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n  enum UserBalanceOpKind {DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL}\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\r\\n     * interacting with Pools using Internal Balance.\\r\\n     *\\r\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\r\\n     * address.\\r\\n     */\\r\\n  event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\r\\n     */\\r\\n  event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\r\\n\\r\\n  // Pools\\r\\n  //\\r\\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n  // functionality:\\r\\n  //\\r\\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n  // which increase with the number of registered tokens.\\r\\n  //\\r\\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n  // independent of the number of registered tokens.\\r\\n  //\\r\\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n  enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\\r\\n\\r\\n  /**\\r\\n   * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\r\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\r\\n     * changed.\\r\\n     *\\r\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\r\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\r\\n     *\\r\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\r\\n     * multiple Pools may share the same contract.\\r\\n     *\\r\\n     * Emits a `PoolRegistered` event.\\r\\n     */\\r\\n  function registerPool(PoolSpecialization specialization) external returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a Pool is registered by calling `registerPool`.\\r\\n     */\\r\\n  event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a Pool's contract address and specialization setting.\\r\\n     */\\r\\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n  /**\\r\\n   * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\r\\n     *\\r\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\r\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\r\\n     *\\r\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\r\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\r\\n     * ascending order.\\r\\n     *\\r\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\r\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\r\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\r\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\r\\n     * Asset Manager should not be made lightly.\\r\\n     *\\r\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\r\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\r\\n     * different Asset Manager.\\r\\n     *\\r\\n     * Emits a `TokensRegistered` event.\\r\\n     */\\r\\n  function registerTokens(\\r\\n    bytes32 poolId,\\r\\n    IERC20[] calldata tokens,\\r\\n    address[] calldata assetManagers\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\r\\n     */\\r\\n  event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\r\\n\\r\\n  /**\\r\\n   * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\r\\n     *\\r\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\r\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\r\\n     * must be deregistered in the same `deregisterTokens` call.\\r\\n     *\\r\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\r\\n     *\\r\\n     * Emits a `TokensDeregistered` event.\\r\\n     */\\r\\n  function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\r\\n     */\\r\\n  event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns detailed information for a Pool's registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool's token Asset Manager.\\r\\n     */\\r\\n  function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    uint256 cash,\\r\\n    uint256 managed,\\r\\n    uint256 lastChangeBlock,\\r\\n    address assetManager\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens' `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n  function getPoolTokens(bytes32 poolId)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    IERC20[] memory tokens,\\r\\n    uint256[] memory balances,\\r\\n    uint256 lastChangeBlock\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool's contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n  function joinPool(\\r\\n    bytes32 poolId,\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    JoinPoolRequest calldata request\\r\\n  ) external payable;\\r\\n\\r\\n  enum JoinKind {INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT}\\r\\n  enum ExitKind {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT}\\r\\n\\r\\n  struct JoinPoolRequest {\\r\\n    IAsset[] assets;\\r\\n    uint256[] maxAmountsIn;\\r\\n    bytes userData;\\r\\n    bool fromInternalBalance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool's registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool's contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n  function exitPool(\\r\\n    bytes32 poolId,\\r\\n    address sender,\\r\\n    address payable recipient,\\r\\n    ExitPoolRequest calldata request\\r\\n  ) external;\\r\\n\\r\\n  struct ExitPoolRequest {\\r\\n    IAsset[] assets;\\r\\n    uint256[] minAmountsOut;\\r\\n    bytes userData;\\r\\n    bool toInternalBalance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\r\\n     */\\r\\n  event PoolBalanceChanged(\\r\\n    bytes32 indexed poolId,\\r\\n    address indexed liquidityProvider,\\r\\n    IERC20[] tokens,\\r\\n    int256[] deltas,\\r\\n    uint256[] protocolFeeAmounts\\r\\n  );\\r\\n\\r\\n  enum PoolBalanceChangeKind {JOIN, EXIT}\\r\\n\\r\\n  // Swaps\\r\\n  //\\r\\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\r\\n  //\\r\\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\r\\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\r\\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n  // individual swaps.\\r\\n  //\\r\\n  // There are two swap kinds:\\r\\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n  //\\r\\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\r\\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\r\\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\r\\n  // the final intended token.\\r\\n  //\\r\\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n  // much less gas than they would otherwise.\\r\\n  //\\r\\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n  // updating the Pool's internal accounting).\\r\\n  //\\r\\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\r\\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n  //\\r\\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n  //\\r\\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n  //\\r\\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n  enum SwapKind {GIVEN_IN, GIVEN_OUT}\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n  function swap(\\r\\n    SingleSwap calldata singleSwap,\\r\\n    FundManagement calldata funds,\\r\\n    uint256 limit,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n  struct SingleSwap {\\r\\n    bytes32 poolId;\\r\\n    SwapKind kind;\\r\\n    IAsset assetIn;\\r\\n    IAsset assetOut;\\r\\n    uint256 amount;\\r\\n    bytes userData;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\r\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n  function batchSwap(\\r\\n    SwapKind kind,\\r\\n    BatchSwapStep[] calldata swaps,\\r\\n    IAsset[] calldata assets,\\r\\n    FundManagement calldata funds,\\r\\n    int256[] calldata limits,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (int256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n  struct BatchSwapStep {\\r\\n    bytes32 poolId;\\r\\n    uint256 assetInIndex;\\r\\n    uint256 assetOutIndex;\\r\\n    uint256 amount;\\r\\n    bytes userData;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\r\\n     */\\r\\n  event Swap(\\r\\n    bytes32 indexed poolId,\\r\\n    IERC20 indexed tokenIn,\\r\\n    IERC20 indexed tokenOut,\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOut\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n  struct FundManagement {\\r\\n    address sender;\\r\\n    bool fromInternalBalance;\\r\\n    address payable recipient;\\r\\n    bool toInternalBalance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\r\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\r\\n     *\\r\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\r\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\r\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\r\\n     *\\r\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\r\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\r\\n     * approve them for the Vault, or even know a user's address.\\r\\n     *\\r\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\r\\n     * eth_call instead of eth_sendTransaction.\\r\\n     */\\r\\n  function queryBatchSwap(\\r\\n    SwapKind kind,\\r\\n    BatchSwapStep[] calldata swaps,\\r\\n    IAsset[] calldata assets,\\r\\n    FundManagement calldata funds\\r\\n  ) external returns (int256[] memory assetDeltas);\\r\\n\\r\\n  // BasePool.sol\\r\\n\\r\\n  /**\\r\\n* @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\r\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\r\\n     *\\r\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\r\\n     * data, such as the protocol swap fee percentage and Pool balances.\\r\\n     *\\r\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\r\\n     * explicitly use eth_call instead of eth_sendTransaction.\\r\\n     */\\r\\n  function queryExit(\\r\\n    bytes32 poolId,\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256[] memory balances,\\r\\n    uint256 lastChangeBlock,\\r\\n    uint256 protocolSwapFeePercentage,\\r\\n    bytes memory userData\\r\\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/polygon/IRootChainManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IRootChainManager {\\r\\n  event TokenMapped(\\r\\n    address indexed rootToken,\\r\\n    address indexed childToken,\\r\\n    bytes32 indexed tokenType\\r\\n  );\\r\\n\\r\\n  event PredicateRegistered(\\r\\n    bytes32 indexed tokenType,\\r\\n    address indexed predicateAddress\\r\\n  );\\r\\n\\r\\n  function registerPredicate(bytes32 tokenType, address predicateAddress)\\r\\n  external;\\r\\n\\r\\n  function mapToken(\\r\\n    address rootToken,\\r\\n    address childToken,\\r\\n    bytes32 tokenType\\r\\n  ) external;\\r\\n\\r\\n  function cleanMapToken(\\r\\n    address rootToken,\\r\\n    address childToken\\r\\n  ) external;\\r\\n\\r\\n  function remapToken(\\r\\n    address rootToken,\\r\\n    address childToken,\\r\\n    bytes32 tokenType\\r\\n  ) external;\\r\\n\\r\\n  function depositEtherFor(address user) external payable;\\r\\n\\r\\n  function depositFor(\\r\\n    address user,\\r\\n    address rootToken,\\r\\n    bytes calldata depositData\\r\\n  ) external;\\r\\n\\r\\n  function exit(bytes calldata inputData) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface ISmartVault {\\r\\n\\r\\n  function setStrategy(address _strategy) external;\\r\\n\\r\\n  function changeActivityStatus(bool _active) external;\\r\\n\\r\\n  function changeProtectionMode(bool _active) external;\\r\\n\\r\\n  function changePpfsDecreaseAllowed(bool _value) external;\\r\\n\\r\\n  function setLockPeriod(uint256 _value) external;\\r\\n\\r\\n  function setLockPenalty(uint256 _value) external;\\r\\n\\r\\n  function setToInvest(uint256 _value) external;\\r\\n\\r\\n  function doHardWork() external;\\r\\n\\r\\n  function rebalance() external;\\r\\n\\r\\n  function disableLock() external;\\r\\n\\r\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 reward) external;\\r\\n\\r\\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 reward) external;\\r\\n\\r\\n  function deposit(uint256 amount) external;\\r\\n\\r\\n  function depositAndInvest(uint256 amount) external;\\r\\n\\r\\n  function depositFor(uint256 amount, address holder) external;\\r\\n\\r\\n  function withdraw(uint256 numberOfShares) external;\\r\\n\\r\\n  function exit() external;\\r\\n\\r\\n  function getAllRewards() external;\\r\\n\\r\\n  function getReward(address rt) external;\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function strategy() external view returns (address);\\r\\n\\r\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\r\\n\\r\\n  function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n  function underlyingUnit() external view returns (uint256);\\r\\n\\r\\n  function duration() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceInVault() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\\r\\n\\r\\n  function availableToInvestOut() external view returns (uint256);\\r\\n\\r\\n  function earned(address rt, address account) external view returns (uint256);\\r\\n\\r\\n  function earnedWithBoost(address rt, address account) external view returns (uint256);\\r\\n\\r\\n  function rewardPerToken(address rt) external view returns (uint256);\\r\\n\\r\\n  function lastTimeRewardApplicable(address rt) external view returns (uint256);\\r\\n\\r\\n  function rewardTokensLength() external view returns (uint256);\\r\\n\\r\\n  function active() external view returns (bool);\\r\\n\\r\\n  function rewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  function periodFinishForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function rewardRateForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function lastUpdateTimeForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function rewardPerTokenStoredForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function userRewardPerTokenPaidForToken(address _rt, address account) external view returns (uint256);\\r\\n\\r\\n  function rewardsForToken(address _rt, address account) external view returns (uint256);\\r\\n\\r\\n  function userLastWithdrawTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userLastDepositTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userBoostTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userLockTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function addRewardToken(address rt) external;\\r\\n\\r\\n  function removeRewardToken(address rt) external;\\r\\n\\r\\n  function stop() external;\\r\\n\\r\\n  function ppfsDecreaseAllowed() external view returns (bool);\\r\\n\\r\\n  function lockPeriod() external view returns (uint256);\\r\\n\\r\\n  function lockPenalty() external view returns (uint256);\\r\\n\\r\\n  function toInvest() external view returns (uint256);\\r\\n\\r\\n  function depositFeeNumerator() external view returns (uint256);\\r\\n\\r\\n  function lockAllowed() external view returns (bool);\\r\\n\\r\\n  function protectionMode() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n  enum Platform {\\r\\n    UNKNOWN, // 0\\r\\n    TETU, // 1\\r\\n    QUICK, // 2\\r\\n    SUSHI, // 3\\r\\n    WAULT, // 4\\r\\n    IRON, // 5\\r\\n    COSMIC, // 6\\r\\n    CURVE, // 7\\r\\n    DINO, // 8\\r\\n    IRON_LEND, // 9\\r\\n    HERMES, // 10\\r\\n    CAFE, // 11\\r\\n    TETU_SWAP, // 12\\r\\n    SPOOKY, // 13\\r\\n    AAVE_LEND, //14\\r\\n    AAVE_MAI_BAL, // 15\\r\\n    GEIST, //16\\r\\n    HARVEST, //17\\r\\n    SCREAM_LEND, //18\\r\\n    KLIMA, //19\\r\\n    VESQ, //20\\r\\n    QIDAO, //21\\r\\n    SUNFLOWER, //22\\r\\n    NACHO, //23\\r\\n    STRATEGY_SPLITTER, //24\\r\\n    TOMB, //25\\r\\n    TAROT, //26\\r\\n    BEETHOVEN, //27\\r\\n    IMPERMAX, //28\\r\\n    TETU_SF, //29\\r\\n    ALPACA, //30\\r\\n    MARKET, //31\\r\\n    UNIVERSE, //32\\r\\n    MAI_BAL, //33\\r\\n    UMA, //34\\r\\n    SPHERE, //35\\r\\n    BALANCER, //36\\r\\n    SLOT_37, //37\\r\\n    SLOT_38, //38\\r\\n    SLOT_39, //39\\r\\n    SLOT_40, //40\\r\\n    SLOT_41, //41\\r\\n    SLOT_42, //42\\r\\n    SLOT_43, //43\\r\\n    SLOT_44, //44\\r\\n    SLOT_45, //45\\r\\n    SLOT_46, //46\\r\\n    SLOT_47, //47\\r\\n    SLOT_48, //48\\r\\n    SLOT_49, //49\\r\\n    SLOT_50 //50\\r\\n  }\\r\\n\\r\\n  // *************** GOVERNANCE ACTIONS **************\\r\\n  function STRATEGY_NAME() external view returns (string memory);\\r\\n\\r\\n  function withdrawAllToVault() external;\\r\\n\\r\\n  function withdrawToVault(uint256 amount) external;\\r\\n\\r\\n  function salvage(address recipient, address token, uint256 amount) external;\\r\\n\\r\\n  function doHardWork() external;\\r\\n\\r\\n  function investAllUnderlying() external;\\r\\n\\r\\n  function emergencyExit() external;\\r\\n\\r\\n  function pauseInvesting() external;\\r\\n\\r\\n  function continueInvesting() external;\\r\\n\\r\\n  // **************** VIEWS ***************\\r\\n  function rewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n  function rewardPoolBalance() external view returns (uint256);\\r\\n\\r\\n  function buyBackRatio() external view returns (uint256);\\r\\n\\r\\n  function unsalvageableTokens(address token) external view returns (bool);\\r\\n\\r\\n  function vault() external view returns (address);\\r\\n\\r\\n  function investedUnderlyingBalance() external view returns (uint256);\\r\\n\\r\\n  function platform() external view returns (Platform);\\r\\n\\r\\n  function assets() external view returns (address[] memory);\\r\\n\\r\\n  function pausedInvesting() external view returns (bool);\\r\\n\\r\\n  function readyToClaim() external view returns (uint256[] memory);\\r\\n\\r\\n  function poolTotalAmount() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/uniswap/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IWETH {\\r\\n  function deposit() external payable;\\r\\n\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n  function withdraw(uint) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private _initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private _initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !_initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = true;\\r\\n      _initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = false;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IControllable {\\r\\n\\r\\n  function isController(address _contract) external view returns (bool);\\r\\n\\r\\n  function isGovernance(address _contract) external view returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllableExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @dev This interface contains additional functions for Controllable class\\r\\n///      Don't extend the exist Controllable for the reason of huge coherence\\r\\ninterface IControllableExtended {\\r\\n\\r\\n  function created() external view returns (uint256 ts);\\r\\n\\r\\n  function controller() external view returns (address adr);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IController {\\r\\n\\r\\n  function addVaultsAndStrategies(address[] memory _vaults, address[] memory _strategies) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function governance() external view returns (address);\\r\\n\\r\\n  function dao() external view returns (address);\\r\\n\\r\\n  function bookkeeper() external view returns (address);\\r\\n\\r\\n  function feeRewardForwarder() external view returns (address);\\r\\n\\r\\n  function mintHelper() external view returns (address);\\r\\n\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  function fundToken() external view returns (address);\\r\\n\\r\\n  function psVault() external view returns (address);\\r\\n\\r\\n  function fund() external view returns (address);\\r\\n\\r\\n  function distributor() external view returns (address);\\r\\n\\r\\n  function announcer() external view returns (address);\\r\\n\\r\\n  function vaultController() external view returns (address);\\r\\n\\r\\n  function whiteList(address _target) external view returns (bool);\\r\\n\\r\\n  function vaults(address _target) external view returns (bool);\\r\\n\\r\\n  function strategies(address _target) external view returns (bool);\\r\\n\\r\\n  function psNumerator() external view returns (uint256);\\r\\n\\r\\n  function psDenominator() external view returns (uint256);\\r\\n\\r\\n  function fundNumerator() external view returns (uint256);\\r\\n\\r\\n  function fundDenominator() external view returns (uint256);\\r\\n\\r\\n  function isAllowedUser(address _adr) external view returns (bool);\\r\\n\\r\\n  function isDao(address _adr) external view returns (bool);\\r\\n\\r\\n  function isHardWorker(address _adr) external view returns (bool);\\r\\n\\r\\n  function isRewardDistributor(address _adr) external view returns (bool);\\r\\n\\r\\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\\r\\n\\r\\n  function isValidVault(address _vault) external view returns (bool);\\r\\n\\r\\n  function isValidStrategy(address _strategy) external view returns (bool);\\r\\n\\r\\n  function rebalance(address _strategy) external;\\r\\n\\r\\n  // ************ DAO ACTIONS *************\\r\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function changeWhiteListStatus(address[] calldata _targets, bool status) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"AnotherChainRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"DestinationVaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALANCER_BAL_WETH_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALANCER_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPT_BAL_WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLYGON_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLYGON_BRIDGE_PREDICATE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndMoveToAnotherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bridgeData\",\"type\":\"bytes\"}],\"name\":\"depositBridgedAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"}],\"name\":\"initializeControllable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"setAnotherChainRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"setDestinationVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BalDepositor", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}