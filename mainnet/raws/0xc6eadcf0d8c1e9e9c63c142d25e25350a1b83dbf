{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'imChat' token contract\r\n//\r\n// Symbol      : IMC\r\n// Name        : IMC\r\n// Total supply: 1000,000,000.000000000000000000\r\n// Decimals    : 8\r\n//\r\n// imChat Technology Service Limited\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract IMCToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    address public externalContractAddress;\r\n\r\n\r\n    /**\r\n     * \u6784\u9020\u51fd\u6570\r\n     */\r\n    constructor() public {\r\n        symbol = \"IMC\";\r\n        name = \"IMC\";\r\n        decimals = 8;\r\n        _totalSupply = 1000000000 * (10 ** uint(decimals));\r\n        balances[owner] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * \u67e5\u8be2\u4ee3\u5e01\u603b\u53d1\u884c\u91cf\r\n     * @return unit \u4f59\u989d\r\n     */\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n    /**\r\n     * \u67e5\u8be2\u4ee3\u5e01\u4f59\u989d\r\n     * @param _owner address \u67e5\u8be2\u4ee3\u5e01\u7684\u5730\u5740\r\n     * @return balance \u4f59\u989d\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * \u79c1\u6709\u65b9\u6cd5\u4ece\u4e00\u4e2a\u5e10\u6237\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u5e10\u6237\u4ee3\u5e01\r\n     * @param _from address \u53d1\u9001\u4ee3\u5e01\u7684\u5730\u5740\r\n     * @param _to address \u63a5\u53d7\u4ee3\u5e01\u7684\u5730\u5740\r\n     * @param _value uint \u63a5\u53d7\u4ee3\u5e01\u7684\u6570\u91cf\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal{\r\n        // \u786e\u4fdd\u76ee\u6807\u5730\u5740\u4e0d\u4e3a0x0\uff0c\u56e0\u4e3a0x0\u5730\u5740\u4ee3\u8868\u9500\u6bc1\r\n        require(_to != 0x0);\r\n        // \u68c0\u67e5\u53d1\u9001\u8005\u662f\u5426\u62e5\u6709\u8db3\u591f\u4f59\u989d\r\n        require(balances[_from] >= _value);\r\n        // \u68c0\u67e5\u662f\u5426\u6ea2\u51fa\r\n        require(balances[_to] + _value > balances[_to]);\r\n\r\n        // \u4fdd\u5b58\u6570\u636e\u7528\u4e8e\u540e\u9762\u7684\u5224\u65ad\r\n        uint previousBalance = balances[_from].add(balances[_to]);\r\n\r\n        // \u4ece\u53d1\u9001\u8005\u51cf\u6389\u53d1\u9001\u989d\r\n        balances[_from] = balances[_from].sub(_value);\r\n        // \u7ed9\u63a5\u6536\u8005\u52a0\u4e0a\u76f8\u540c\u7684\u91cf\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        // \u901a\u77e5\u4efb\u4f55\u76d1\u542c\u8be5\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // \u5224\u65ad\u53d1\u9001\u3001\u63a5\u6536\u65b9\u7684\u6570\u636e\u662f\u5426\u548c\u8f6c\u6362\u524d\u4e00\u81f4\r\n        assert(balances[_from].add(balances[_to]) == previousBalance);\r\n    }\r\n\r\n    /**\r\n     * \u4ece\u4e3b\u5e10\u6237\u5408\u7ea6\u8c03\u7528\u8005\u53d1\u9001\u7ed9\u522b\u4eba\u4ee3\u5e01\r\n     * @param _to address \u63a5\u53d7\u4ee3\u5e01\u7684\u5730\u5740\r\n     * @param _value uint \u63a5\u53d7\u4ee3\u5e01\u7684\u6570\u91cf\r\n     * @return success \u4ea4\u6613\u6210\u529f\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        // _transfer(msg.sender, _to, _value);\r\n\r\n        if (msg.sender == owner) {\r\n            // ERC20\u5408\u7ea6owner\u8c03\u7528\r\n            _transfer(msg.sender, _to, _value);\r\n\r\n            return true;\r\n        } else {\r\n            // \u5916\u90e8\u5408\u7ea6\u8c03\u7528\uff0c\u9700\u6ee1\u8db3\u5408\u7ea6\u8c03\u7528\u8005\u548c\u4ee3\u5e01\u5408\u7ea6\u6240\u8bbe\u7f6e\u7684\u5916\u90e8\u8c03\u7528\u5408\u7ea6\u5730\u5740\u4e00\u81f4\u6027\r\n            require(msg.sender == externalContractAddress);\r\n\r\n            _transfer(owner, _to, _value);\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8d26\u53f7\u4e4b\u95f4\u4ee3\u5e01\u4ea4\u6613\u8f6c\u79fb\uff0c\u8c03\u7528\u8fc7\u7a0b\uff0c\u4f1a\u68c0\u67e5\u8bbe\u7f6e\u7684\u5141\u8bb8\u6700\u5927\u4ea4\u6613\u989d\r\n     * @param _from address \u53d1\u9001\u8005\u5730\u5740\r\n     * @param _to address \u63a5\u53d7\u8005\u5730\u5740\r\n     * @param _value uint \u8981\u8f6c\u79fb\u7684\u4ee3\u5e01\u6570\u91cf\r\n     * @return success \u4ea4\u6613\u6210\u529f\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        \r\n        if (_from == msg.sender) {\r\n            // \u81ea\u5df1\u8f6c\u8d26\u65f6\u4e0d\u9700\u8981approve\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8f6c\u8d26\r\n            _transfer(_from, _to, _value);\r\n\r\n        } else {\r\n            // \u6388\u6743\u7ed9\u7b2c\u4e09\u65b9\u65f6\uff0c\u9700\u68c0\u67e5\u53d1\u9001\u8005\u662f\u5426\u62e5\u6709\u8db3\u591f\u4f59\u989d\r\n            require(allowed[_from][msg.sender] >= _value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n            _transfer(_from, _to, _value);\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * \u5141\u8bb8\u5e10\u6237\u6388\u6743\u5176\u4ed6\u5e10\u6237\u4ee3\u8868\u4ed6\u4eec\u63d0\u53d6\u4ee3\u5e01\r\n    * @param _spender \u6388\u6743\u5e10\u6237\u5730\u5740\r\n    * @param _value \u4ee3\u5e01\u6570\u91cf\r\n    * @return success \u5141\u8bb8\u6210\u529f\r\n    */\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * \u67e5\u8be2\u88ab\u6388\u6743\u5e10\u6237\u7684\u5141\u8bb8\u63d0\u53d6\u7684\u4ee3\u5e01\u6570\r\n    * @param _owner \u6388\u6743\u8005\u5e10\u6237\u5730\u5740\r\n    * @param _spender \u88ab\u6388\u6743\u8005\u5e10\u6237\u5730\u5740\r\n    * @return remaining \u4ee3\u5e01\u6570\u91cf\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * \u8bbe\u7f6e\u5141\u8bb8\u4e00\u4e2a\u5730\u5740\uff08\u5408\u7ea6\uff09\u4ee5\u6211\uff08\u521b\u5efa\u4ea4\u6613\u8005\uff09\u7684\u540d\u4e49\u53ef\u6700\u591a\u82b1\u8d39\u7684\u4ee3\u5e01\u6570\u3002\r\n     * @param _spender \u88ab\u6388\u6743\u7684\u5730\u5740\uff08\u5408\u7ea6\uff09\r\n     * @param _value \u6700\u5927\u53ef\u82b1\u8d39\u4ee3\u5e01\u6570\r\n     * @param _extraData \u53d1\u9001\u7ed9\u5408\u7ea6\u7684\u9644\u52a0\u6570\u636e\r\n     * @return success \u8bbe\u7f6e\u6210\u529f\r\n     */\r\n    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            // \u901a\u77e5\u5408\u7ea6\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8bbe\u7f6e\u5141\u8bb8\u5916\u90e8\u5408\u7ea6\u5730\u5740\u8c03\u7528\u5f53\u524d\u5408\u7ea6\r\n     * @param _contractAddress \u5408\u7ea6\u5730\u5740\r\n     * @return success \u8bbe\u7f6e\u6210\u529f\r\n     */\r\n    function approveContractCall(address _contractAddress) public onlyOwner returns (bool){\r\n        externalContractAddress = _contractAddress;\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u4e0d\u63a5\u6536 Ether\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"approveContractCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "IMCToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://66ae1990b9768bceb5c47da55ac36ae9c463b1d4b605d484ec846648c9fc2fa4"}]}