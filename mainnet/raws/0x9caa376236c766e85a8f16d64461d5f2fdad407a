{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC20PoolPair is IERC20{\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function pairInfo(address owner) external view returns (uint32, uint, uint32, uint32);\r\n    function mint(address owner, uint256 amount) external;\r\n    function burn(address owner, uint amount) external;\r\n    function updateTokenTime(address owner) external;\r\n    function setInterestRate(uint32 _interestRate) external;\r\n}\r\n\r\ncontract ERC20PoolPair is IERC20PoolPair, ERC20 {\r\n    address public factory;\r\n    address public token;\r\n\r\n    uint32  private blockStartTime; // uses single storage slot, accessible via getReserves\r\n\r\n    uint32 private interestRate = 30;\r\n    uint16 constant private INTEREST_RATE_MOL = 1000;\r\n\r\n     // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    uint8 private _decimals = 18;\r\n\r\n    mapping(address => uint32) private _lpTokensTimes;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'ERC20PoolPair: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    constructor() {\r\n        factory = msg.sender;\r\n        blockStartTime = uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_, address token_, uint32 _interestRate) external lock {\r\n        require(msg.sender == factory, 'DDF: FORBIDDEN'); // sufficient check\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_; \r\n        token = token_;\r\n        interestRate = _interestRate;\r\n    }\r\n\r\n    function pairInfo(address owner) external view override returns (uint32, uint, uint32, uint32){\r\n        return (_lpTokensTimes[owner], balanceOf(owner), interestRate, INTEREST_RATE_MOL);\r\n    }\r\n\r\n    function mint(address owner, uint256 amount) external lock override {\r\n        IERC20(token).transferFrom(_msgSender(), address(this), amount);\r\n        \r\n        _mint(owner, amount);\r\n        _lpTokensTimes[owner] = uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    function burn(address owner, uint amount) external lock override {\r\n        uint allAmount = balanceOf(owner);\r\n        require(amount <= allAmount, \"ERC20PoolPair:burn amount not enough\");\r\n\r\n        uint256 currentAllowance = allowance(owner, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20PoolPair: transfer amount exceeds allowance\");\r\n\r\n        IERC20(token).transfer(owner, amount);\r\n\r\n        _approve(owner, _msgSender(), currentAllowance - amount);\r\n        _burn(owner, amount);\r\n        if(amount == allAmount){\r\n             delete _lpTokensTimes[owner];\r\n        }else{\r\n           _lpTokensTimes[owner] = uint32(block.timestamp % 2 ** 32);\r\n        }\r\n    }\r\n\r\n    function updateTokenTime(address owner) external lock override {\r\n        uint amount = balanceOf(owner);\r\n        require(amount > 0, \"burn amount not enough\");\r\n\r\n        uint256 currentAllowance = allowance(owner, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20PoolPair: transfer amount exceeds allowance\");\r\n\r\n        _lpTokensTimes[owner] = uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    function setInterestRate(uint32 _interestRate) external lock override{\r\n        require(msg.sender == factory, 'DDF: FORBIDDEN'); // sufficient check\r\n        interestRate = _interestRate;\r\n    }\r\n}\r\n\r\ninterface IDDFERC20Factory {\r\n    function getPair(address token) external view returns (address pair);\r\n    function allTokensLength() external view returns (uint);\r\n    function findAllTokens() external view returns (address[] memory);\r\n    function createPair(string memory name_, string memory symbol_, uint8 decimals_, address token, uint32 interestRate) external returns (address pair);\r\n    function setInterestRate(address token, uint32 _interestRate) external;\r\n}\r\n\r\ncontract DDFERC20Factory is IDDFERC20Factory {\r\n    mapping(address => address) private pairs;\r\n    address[] private allTokens;\r\n    address private _owner;\r\n\r\n    event PairCreated(address indexed token, address pair, uint);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"DDFERC20Factory: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function getPair(address token) external view override returns (address pair){\r\n         pair = pairs[token];\r\n    }\r\n\r\n    function allTokensLength() public view override returns (uint) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    function findAllTokens() external view override returns (address[] memory){\r\n        return allTokens;\r\n    }\r\n\r\n    function createPair(string memory name_, string memory symbol_, uint8 decimals_, address token, uint32 interestRate) external onlyOwner override returns (address pair) {\r\n        require(token != address(0), 'DDF: ZERO_ADDRESS');\r\n        require(pairs[token] == address(0), 'DDF: PAIR_EXISTS'); // single check is sufficient\r\n        bytes memory bytecode = type(ERC20PoolPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        ERC20PoolPair(pair).initialize(name_, symbol_, decimals_, token, interestRate);\r\n        pairs[token] = pair;\r\n        allTokens.push(token);\r\n        emit PairCreated(token, pair, allTokens.length);\r\n    }\r\n\r\n    function setInterestRate(address token, uint32 _interestRate) external onlyOwner override{\r\n        address pair = pairs[token]; \r\n        require(pair != address(0), \"ERC721: The DDFFactory query for nonexistent pair\");\r\n\r\n        ERC20PoolPair(pair).setInterestRate(_interestRate);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"interestRate\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_interestRate\",\"type\":\"uint32\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DDFERC20Factory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f1747fb583c07610e66b6e4fc830009bd64518686bfb9a8af22ef68f27bffe5"}]}