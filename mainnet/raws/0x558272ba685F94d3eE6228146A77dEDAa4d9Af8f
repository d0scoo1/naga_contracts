{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PrivateVesting.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @author Vlaunch Team\\n/// @title PrivateVesting contract for a initial investors\\ncontract PrivateVesting is Ownable {\\n    struct Beneficiary {\\n        uint256 amountStep1;\\n        uint256 amountStep2;\\n        uint256 releasedStep1;\\n        uint256 releasedStep2;\\n        bool revoked;\\n    }\\n\\n    uint256 public startStep1;\\n    uint256 public durationStep1;\\n    uint256 public startStep2;\\n    uint256 public durationStep2;\\n    mapping(address => Beneficiary) public beneficiaries;\\n\\n    IERC20 public token;\\n    \\n    /** Constructor\\n    @param owner_ the owner of the contract\\n    @param token_ the token we want to vest\\n    @param startStep1_ the start timestamp od the initial vesting step\\n    @param durationStep1_ the duration of the initial vesting step\\n    @param startStep2_ the start timestamp od the second vesting step\\n    @param durationStep2_ the duration of the second vesting step\\n    */\\n    constructor(address owner_, IERC20 token_, uint256 startStep1_, uint256 durationStep1_, uint256 startStep2_, uint256 durationStep2_) {\\n        require(\\n            startStep1_ + durationStep1_ > block.timestamp,\\n            \\\"TokenVesting: final time is before current time\\\"\\n        );\\n        require(\\n            startStep2_ + durationStep2_ > block.timestamp,\\n            \\\"TokenVesting: final time is before current time\\\"\\n        );\\n        require(durationStep1_ > 0, \\\"TokenVesting 1: duration is 0\\\");\\n        require(durationStep2_ > 0, \\\"TokenVesting 2: duration is 0\\\");\\n        transferOwnership(owner_);\\n\\n        token = token_;\\n        startStep1 = startStep1_;\\n        durationStep1 = durationStep1_;\\n        startStep2 = startStep2_;\\n        durationStep2 = durationStep2_;\\n    }\\n\\n    /** Revoke function\\n    @param beneficiary_ the beneficiary we want to revoke the vsting for\\n    */\\n    function revoke(address beneficiary_) public onlyOwner {\\n        require(\\n            !beneficiaries[beneficiary_].revoked,\\n            \\\"TokenVesting: Beneficiary is already revoked\\\"\\n        );\\n\\n        beneficiaries[beneficiary_].revoked = true;\\n    }\\n\\n    /** Setter\\n    @param startStep1_ the start timestamp od the initial vesting step\\n    @param durationStep1_ the duration of the initial vesting step\\n    @param startStep2_ the start timestamp od the second vesting step\\n    @param durationStep2_ the duration of the second vesting step\\n    */\\n    function setParams(uint256 startStep1_, uint256 durationStep1_, uint256 startStep2_, uint256 durationStep2_) public onlyOwner{\\n        require(\\n            startStep1_ + durationStep1_ > block.timestamp,\\n            \\\"TokenVesting: final time is before current time\\\"\\n        );\\n        require(\\n            startStep2_ + durationStep2_ > block.timestamp,\\n            \\\"TokenVesting: final time is before current time\\\"\\n        );\\n        require(durationStep1_ > 0, \\\"TokenVesting 1: duration is 0\\\");\\n        require(durationStep2_ > 0, \\\"TokenVesting 2: duration is 0\\\");\\n\\n        startStep1 = startStep1_;\\n        durationStep1 = durationStep1_;\\n        startStep2 = startStep2_;\\n        durationStep2 = durationStep2_;\\n    }\\n\\n    /** Create beneficiary function\\n    @param beneficiary_ the beneficiary we want to create a vesting plan\\n    @param amountStep1_ the amount to receive in step 1\\n    @param amountStep2_ the amount to receive in step 2\\n    */\\n    function createBeneficiary(\\n        address beneficiary_,\\n        uint256 amountStep1_,\\n        uint256 amountStep2_\\n    ) public onlyOwner {\\n        require(\\n            beneficiary_ != address(0),\\n            \\\"PrivateTokenVesting: beneficiary is the zero address\\\"\\n        );\\n        require(amountStep1_ > 0, \\\"PrivateTokenVesting: cannot vest 0 tokens\\\");\\n        require(amountStep2_ > 0, \\\"PrivateTokenVesting: cannot vest 0 tokens\\\");\\n        beneficiaries[beneficiary_].amountStep1 = amountStep1_;\\n        beneficiaries[beneficiary_].amountStep2 = amountStep2_;\\n        beneficiaries[beneficiary_].revoked = false;\\n    }\\n\\n    /** Create multiple beneficiaries function\\n    @param beneficiary_ the beneficiary array we want to create a vesting plan\\n    @param amountStep1_ the amount array to receive in step 1\\n    @param amountStep2_ the amount array to receive in step 2\\n    */\\n    function createBeneficiaries(\\n        address[] calldata beneficiary_,\\n        uint256[] calldata amountStep1_,\\n        uint256[] calldata amountStep2_\\n    ) public onlyOwner {\\n        require(beneficiary_.length == amountStep1_.length && beneficiary_.length == amountStep2_.length,\\n        \\\"The arrays in the parameters have different lengths\\\");\\n        require(beneficiary_.length <= 100, \\\"Your array exceeds 100. The function call will be reverted due to exceeding the gas limit\\\" );\\n        for(uint256 i = 0; i < beneficiary_.length; i++) {\\n            createBeneficiary(beneficiary_[i], amountStep1_[i], amountStep2_[i]);\\n        }\\n    }\\n\\n    // The release function \\n    function release() public {\\n        releaseFor(msg.sender);\\n    }\\n\\n    /** Public function that alows a user to release for another address\\n    @param user_ address to release for\\n     */\\n    function releaseFor(address user_) public{\\n        Beneficiary storage beneficiary = beneficiaries[user_];\\n\\n        require(beneficiary.amountStep1 > 0, \\\"PrivateTokenVesting: no amountStep1\\\");\\n        require(beneficiary.amountStep2 > 0, \\\"PrivateTokenVesting: no amountStep2\\\");\\n        require(!beneficiary.revoked, \\\"PrivateTokenVesting: revoked beneficiary\\\");\\n\\n        uint256 unreleasedStep1 = _releasableAmount(beneficiary, false);\\n        uint256 unreleasedStep2 = _releasableAmount(beneficiary, true);\\n        require(unreleasedStep1 + unreleasedStep2 > 0, \\\"PrivateTokenVesting: no tokens are due\\\");\\n\\n        beneficiary.releasedStep1 += unreleasedStep1;\\n        beneficiary.releasedStep2 += unreleasedStep2;\\n        token.transfer(user_, unreleasedStep1 + unreleasedStep2);\\n    }\\n\\n    /** Public function that alows a user to release for multiple addresses\\n    @param users_ the address array to release for\\n     */\\n    function releaseMultiple(address[] calldata users_) public {\\n        require(users_.length <= 100,\\\"Your array exceeds 100. The function call will be reverted due to exceeding thegas limit\\\" );\\n        for(uint256 i = 0; i < users_.length; i++) {\\n            releaseFor(users_[i]);\\n        }\\n    }\\n\\n    /** Owner withdraw function\\n    @param amount_ the amount to withdraw\\n    @param token_ the token to withdraw\\n    */\\n    function withdraw(uint256 amount_, IERC20 token_) public onlyOwner {\\n        require(amount_ > 0);\\n        token_.transfer(msg.sender, amount_);\\n    }\\n\\n    /** Computes the releasable amount of tokens for beneficiary\\n    @param beneficiary_ the beneficiary \\n    @param isStep2_ if the computation should be done for step2\\n     */\\n    function _releasableAmount(Beneficiary memory beneficiary_, bool isStep2_)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        if(!isStep2_){\\n            return _vestedAmount(beneficiary_, isStep2_) - beneficiary_.releasedStep1;\\n        } else {\\n            return _vestedAmount(beneficiary_, isStep2_) - beneficiary_.releasedStep2;\\n        }\\n    }\\n\\n    /** Computes the releasable amount for msg.sender\\n    */\\n    function releasableAmount()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Beneficiary memory beneficiary = beneficiaries[msg.sender];\\n        return _releasableAmount(beneficiary, false) + _releasableAmount(beneficiary, true);\\n    }\\n\\n    /** Computes the releasable amount for user\\n    @param user the beneficiary \\n    */\\n    function releasableAmount(address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Beneficiary memory beneficiary = beneficiaries[user];\\n        return _releasableAmount(beneficiary, false) + _releasableAmount(beneficiary, true);\\n    }\\n\\n    /** Computes the vested amount\\n    @param beneficiary_ the beneficiary \\n    @param isStep2_ if the computation should be done for step2\\n     */\\n    function _vestedAmount(Beneficiary memory beneficiary_, bool isStep2_)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        if(!isStep2_){\\n            uint256 totalBalance = beneficiary_.amountStep1;\\n\\n            if (block.timestamp < startStep1) {\\n                return 0;\\n            } else if (\\n                block.timestamp >= (startStep1 + durationStep1)\\n            ) {\\n                return totalBalance;\\n            } else {\\n                return\\n                    (totalBalance * (block.timestamp - startStep1)) /\\n                    durationStep1;\\n            }\\n        } else {\\n            uint256 totalBalance = beneficiary_.amountStep2;\\n\\n            if (block.timestamp < startStep2) {\\n                return 0;\\n            } else if (\\n                block.timestamp >= (startStep2 + durationStep2)\\n            ) {\\n                return totalBalance;\\n            } else {\\n                return\\n                    (totalBalance * (block.timestamp - startStep2)) /\\n                    durationStep2;\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startStep1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationStep1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startStep2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationStep2_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStep1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStep2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedStep1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedStep2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiary_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountStep1_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountStep2_\",\"type\":\"uint256[]\"}],\"name\":\"createBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStep1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStep2_\",\"type\":\"uint256\"}],\"name\":\"createBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationStep1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationStep2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"releaseFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users_\",\"type\":\"address[]\"}],\"name\":\"releaseMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startStep1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationStep1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startStep2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationStep2_\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStep1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStep2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrivateVesting", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009d4cd7af005a5fe042d425a2e71dce0eda77225200000000000000000000000051fe2e572e97bfeb1d719809d743ec2675924edc0000000000000000000000000000000000000000000000000000000061ed27200000000000000000000000000000000000000000000000000000000001b855000000000000000000000000000000000000000000000000000000000063a57c200000000000000000000000000000000000000000000000000000000001e28500", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}