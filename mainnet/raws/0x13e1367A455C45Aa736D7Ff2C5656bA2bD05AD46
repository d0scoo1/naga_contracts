{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\TokenStake.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract TokenStake is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token; // Address of token contract\r\n    address public tokenOperator; // Address to manage the Stake \r\n\r\n    uint256 public maxMigrationBlocks; // Block numbers to complete the migration\r\n\r\n    mapping (address => uint256) public balances; // Useer Token balance in the contract\r\n\r\n    uint256 public currentStakeMapIndex; // Current Stake Index to avoid math calc in all methods\r\n\r\n    struct StakeInfo {\r\n        bool exist;\r\n        uint256 pendingForApprovalAmount;\r\n        uint256 approvedAmount;\r\n        uint256 rewardComputeIndex;\r\n\r\n        mapping (uint256 => uint256) claimableAmount;\r\n    }\r\n\r\n    // Staking period timestamp (Debatable on timestamp vs blocknumber - went with timestamp)\r\n    struct StakePeriod {\r\n        uint256 startPeriod;\r\n        uint256 submissionEndPeriod;\r\n        uint256 approvalEndPeriod;\r\n        uint256 requestWithdrawStartPeriod;\r\n        uint256 endPeriod;\r\n\r\n        uint256 minStake;\r\n\r\n        bool openForExternal;\r\n\r\n        uint256 windowRewardAmount;\r\n        \r\n    }\r\n\r\n    mapping (uint256 => StakePeriod) public stakeMap;\r\n\r\n    // List of Stake Holders\r\n    address[] stakeHolders; \r\n\r\n    // All Stake Holders\r\n    //mapping(address => mapping(uint256 => StakeInfo)) stakeHolderInfo;\r\n    mapping(address => StakeInfo) stakeHolderInfo;\r\n\r\n    // To store the total stake in a window\r\n    uint256 public windowTotalStake;\r\n\r\n    // Events\r\n    event NewOperator(address tokenOperator);\r\n\r\n    event WithdrawToken(address indexed tokenOperator, uint256 amount);\r\n\r\n    event OpenForStake(uint256 indexed stakeIndex, address indexed tokenOperator, uint256 startPeriod, uint256 endPeriod, uint256 approvalEndPeriod, uint256 rewardAmount);\r\n    event SubmitStake(uint256 indexed stakeIndex, address indexed staker, uint256 stakeAmount);\r\n    event RequestForClaim(uint256 indexed stakeIndex, address indexed staker, bool autoRenewal);\r\n    event ClaimStake(uint256 indexed stakeIndex, address indexed staker, uint256 totalAmount);   \r\n    event RejectStake(uint256 indexed stakeIndex, address indexed staker, address indexed tokenOperator, uint256 returnAmount);\r\n    event AddReward(address indexed staker, uint256 indexed stakeIndex, address tokenOperator, uint256 totalStakeAmount, uint256 rewardAmount, uint256 windowTotalStake);\r\n    event WithdrawStake(uint256 indexed stakeIndex, address indexed staker, uint256 stakeAmount);\r\n\r\n\r\n\r\n    // Modifiers\r\n    modifier onlyOperator() {\r\n        require(\r\n            msg.sender == tokenOperator,\r\n            \"Only operator can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Token Operator should be able to do auto renewal\r\n    modifier allowSubmission() {        \r\n        require(\r\n            now >= stakeMap[currentStakeMapIndex].startPeriod && \r\n            now <= stakeMap[currentStakeMapIndex].submissionEndPeriod && \r\n            stakeMap[currentStakeMapIndex].openForExternal == true, \r\n            \"Staking at this point not allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validStakeLimit(address staker, uint256 stakeAmount) {\r\n\r\n        uint256 stakerTotalStake;\r\n        stakerTotalStake = stakeAmount.add(stakeHolderInfo[staker].pendingForApprovalAmount);\r\n        stakerTotalStake = stakerTotalStake.add(stakeHolderInfo[staker].approvedAmount);\r\n\r\n        // Check for Min Stake\r\n        require(\r\n            stakeAmount > 0 && \r\n            stakerTotalStake >= stakeMap[currentStakeMapIndex].minStake,\r\n            \"Need to have min stake\"\r\n        );\r\n        _;\r\n\r\n    }\r\n\r\n    // Check for auto renewal flag update\r\n    modifier canRequestForClaim(uint256 stakeMapIndex) {\r\n        require(\r\n            (stakeHolderInfo[msg.sender].approvedAmount > 0 || stakeHolderInfo[msg.sender].claimableAmount[stakeMapIndex] > 0) &&  \r\n            now >= stakeMap[stakeMapIndex].requestWithdrawStartPeriod &&\r\n            now <= stakeMap[stakeMapIndex].endPeriod, \r\n            \"Update to auto renewal at this point not allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Check for claim - after the end period when opted out OR after grace period when no more stake windows\r\n    modifier allowClaimStake(uint256 stakeMapIndex) {\r\n\r\n        uint256 graceTime;\r\n        graceTime = stakeMap[stakeMapIndex].endPeriod.sub(stakeMap[stakeMapIndex].requestWithdrawStartPeriod);\r\n\r\n        require(\r\n            (now > stakeMap[stakeMapIndex].endPeriod && stakeHolderInfo[msg.sender].claimableAmount[stakeMapIndex] > 0) ||\r\n            (now > stakeMap[stakeMapIndex].endPeriod.add(graceTime) && stakeHolderInfo[msg.sender].approvedAmount > 0), \"Invalid claim request\"\r\n        );\r\n        _;\r\n\r\n    }\r\n\r\n    constructor(address _token, uint256 _maxMigrationBlocks)\r\n    public\r\n    {\r\n        token = ERC20(_token);\r\n        tokenOperator = msg.sender;\r\n        currentStakeMapIndex = 0;\r\n        windowTotalStake = 0;\r\n        maxMigrationBlocks = _maxMigrationBlocks.add(block.number); \r\n    }\r\n\r\n    function updateOperator(address newOperator) public onlyOwner {\r\n\r\n        require(newOperator != address(0), \"Invalid operator address\");\r\n        \r\n        tokenOperator = newOperator;\r\n\r\n        emit NewOperator(newOperator);\r\n    }\r\n    \r\n    function withdrawToken(uint256 value) public onlyOperator\r\n    {\r\n\r\n        // Check if contract is having required balance \r\n        require(token.balanceOf(address(this)) >= value, \"Not enough balance in the contract\");\r\n        require(token.transfer(msg.sender, value), \"Unable to transfer token to the operator account\");\r\n\r\n        emit WithdrawToken(tokenOperator, value);\r\n        \r\n    }\r\n\r\n    function openForStake(uint256 _startPeriod, uint256 _submissionEndPeriod,  uint256 _approvalEndPeriod, uint256 _requestWithdrawStartPeriod, uint256 _endPeriod, uint256 _windowRewardAmount, uint256 _minStake, bool _openForExternal) public onlyOperator {\r\n\r\n        // Check Input Parameters\r\n        require(_startPeriod >= now && _startPeriod < _submissionEndPeriod && _submissionEndPeriod < _approvalEndPeriod && _approvalEndPeriod < _requestWithdrawStartPeriod && _requestWithdrawStartPeriod < _endPeriod, \"Invalid stake period\");\r\n        require(_windowRewardAmount > 0 && _minStake > 0, \"Invalid inputs\" );\r\n\r\n        // Check Stake in Progress\r\n        require(currentStakeMapIndex == 0 || (now > stakeMap[currentStakeMapIndex].approvalEndPeriod && _startPeriod >= stakeMap[currentStakeMapIndex].requestWithdrawStartPeriod), \"Cannot have more than one stake request at a time\");\r\n\r\n        // Move the staking period to next one\r\n        currentStakeMapIndex = currentStakeMapIndex + 1;\r\n        StakePeriod memory stakePeriod;\r\n\r\n        // Set Staking attributes\r\n        stakePeriod.startPeriod = _startPeriod;\r\n        stakePeriod.submissionEndPeriod = _submissionEndPeriod;\r\n        stakePeriod.approvalEndPeriod = _approvalEndPeriod;\r\n        stakePeriod.requestWithdrawStartPeriod = _requestWithdrawStartPeriod;\r\n        stakePeriod.endPeriod = _endPeriod;\r\n        stakePeriod.windowRewardAmount = _windowRewardAmount;\r\n        stakePeriod.minStake = _minStake;        \r\n        stakePeriod.openForExternal = _openForExternal;\r\n\r\n        stakeMap[currentStakeMapIndex] = stakePeriod;\r\n\r\n        // Add the current window reward to the window total stake \r\n        windowTotalStake = windowTotalStake.add(_windowRewardAmount);\r\n\r\n        emit OpenForStake(currentStakeMapIndex, msg.sender, _startPeriod, _endPeriod, _approvalEndPeriod, _windowRewardAmount);\r\n\r\n    }\r\n\r\n    // To add the Stake Holder\r\n    function _createStake(address staker, uint256 stakeAmount) internal returns(bool) {\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[staker];\r\n\r\n        // Check if the user already staked in the past\r\n        if(stakeInfo.exist) {\r\n\r\n            stakeInfo.pendingForApprovalAmount = stakeInfo.pendingForApprovalAmount.add(stakeAmount);\r\n\r\n        } else {\r\n\r\n            StakeInfo memory req;\r\n\r\n            // Create a new stake request\r\n            req.exist = true;\r\n            req.pendingForApprovalAmount = stakeAmount;\r\n            req.approvedAmount = 0;\r\n            req.rewardComputeIndex = 0;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolderInfo[staker] = req;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolders.push(staker);\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    // To submit a new stake for the current window\r\n    function submitStake(uint256 stakeAmount) public allowSubmission validStakeLimit(msg.sender, stakeAmount) {\r\n\r\n        // Transfer the Tokens to Contract\r\n        require(token.transferFrom(msg.sender, address(this), stakeAmount), \"Unable to transfer token to the contract\");\r\n\r\n        _createStake(msg.sender, stakeAmount);\r\n\r\n        // Update the User balance\r\n        balances[msg.sender] = balances[msg.sender].add(stakeAmount);\r\n\r\n        // Update current stake period total stake - For Auto Approvals\r\n        windowTotalStake = windowTotalStake.add(stakeAmount); \r\n       \r\n        emit SubmitStake(currentStakeMapIndex, msg.sender, stakeAmount);\r\n\r\n    }\r\n\r\n    // To withdraw stake during submission phase\r\n    function withdrawStake(uint256 stakeMapIndex, uint256 stakeAmount) public {\r\n\r\n        require(\r\n            (now >= stakeMap[stakeMapIndex].startPeriod && now <= stakeMap[stakeMapIndex].submissionEndPeriod),\r\n            \"Stake withdraw at this point is not allowed\"\r\n        );\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[msg.sender];\r\n\r\n        // Validate the input Stake Amount\r\n        require(stakeAmount > 0 &&\r\n        stakeInfo.pendingForApprovalAmount >= stakeAmount,\r\n        \"Cannot withdraw beyond stake amount\");\r\n\r\n        // Allow withdaw not less than minStake or Full Amount\r\n        require(\r\n            stakeInfo.pendingForApprovalAmount.sub(stakeAmount) >= stakeMap[stakeMapIndex].minStake || \r\n            stakeInfo.pendingForApprovalAmount == stakeAmount,\r\n            \"Can withdraw full amount or partial amount maintaining min stake\"\r\n        );\r\n\r\n        // Update the staker balance in the staking window\r\n        stakeInfo.pendingForApprovalAmount = stakeInfo.pendingForApprovalAmount.sub(stakeAmount);\r\n\r\n        // Update the User balance\r\n        balances[msg.sender] = balances[msg.sender].sub(stakeAmount);\r\n\r\n        // Update current stake period total stake - For Auto Approvals\r\n        windowTotalStake = windowTotalStake.sub(stakeAmount); \r\n\r\n        // Return to User Wallet\r\n        require(token.transfer(msg.sender, stakeAmount), \"Unable to transfer token to the account\");\r\n\r\n        emit WithdrawStake(stakeMapIndex, msg.sender, stakeAmount);\r\n    }\r\n\r\n    // Reject the stake in the Current Window\r\n    function rejectStake(uint256 stakeMapIndex, address staker) public onlyOperator {\r\n\r\n        // Allow for rejection after approval period as well\r\n        require(now > stakeMap[stakeMapIndex].submissionEndPeriod && currentStakeMapIndex == stakeMapIndex, \"Rejection at this point is not allowed\");\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[staker];\r\n\r\n        // In case of if there are auto renewals reject should not be allowed\r\n        require(stakeInfo.pendingForApprovalAmount > 0, \"No staking request found\");\r\n\r\n        uint256 returnAmount;\r\n        returnAmount = stakeInfo.pendingForApprovalAmount;\r\n\r\n        // transfer back the stake to user account\r\n        require(token.transfer(staker, stakeInfo.pendingForApprovalAmount), \"Unable to transfer token back to the account\");\r\n\r\n        // Update the User Balance\r\n        balances[staker] = balances[staker].sub(stakeInfo.pendingForApprovalAmount);\r\n\r\n        // Update current stake period total stake - For Auto Approvals\r\n        windowTotalStake = windowTotalStake.sub(stakeInfo.pendingForApprovalAmount);\r\n\r\n        // Update the Pending Amount\r\n        stakeInfo.pendingForApprovalAmount = 0;\r\n\r\n        emit RejectStake(stakeMapIndex, staker, msg.sender, returnAmount);\r\n\r\n    }\r\n\r\n    // To update the Auto Renewal - OptIn or OptOut for next stake window\r\n    function requestForClaim(uint256 stakeMapIndex, bool autoRenewal) public canRequestForClaim(stakeMapIndex) {\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[msg.sender];\r\n\r\n        // Check for the claim amount\r\n        require((autoRenewal == true && stakeInfo.claimableAmount[stakeMapIndex] > 0) || (autoRenewal == false && stakeInfo.approvedAmount > 0), \"Invalid auto renew request\");\r\n\r\n        if(autoRenewal) {\r\n\r\n            // Update current stake period total stake - For Auto Approvals\r\n            windowTotalStake = windowTotalStake.add(stakeInfo.claimableAmount[stakeMapIndex]);\r\n\r\n            stakeInfo.approvedAmount = stakeInfo.claimableAmount[stakeMapIndex];\r\n            stakeInfo.claimableAmount[stakeMapIndex] = 0;\r\n\r\n        } else {\r\n\r\n            // Update current stake period total stake - For Auto Approvals\r\n            windowTotalStake = windowTotalStake.sub(stakeInfo.approvedAmount);\r\n\r\n            stakeInfo.claimableAmount[stakeMapIndex] = stakeInfo.approvedAmount;\r\n            stakeInfo.approvedAmount = 0;\r\n\r\n        }\r\n\r\n        emit RequestForClaim(stakeMapIndex, msg.sender, autoRenewal);\r\n\r\n    }\r\n\r\n\r\n    function _calculateRewardAmount(uint256 stakeMapIndex, uint256 stakeAmount) internal view returns(uint256) {\r\n\r\n        uint256 calcRewardAmount;\r\n        calcRewardAmount = stakeAmount.mul(stakeMap[stakeMapIndex].windowRewardAmount).div(windowTotalStake.sub(stakeMap[stakeMapIndex].windowRewardAmount));\r\n        return calcRewardAmount;\r\n    }\r\n\r\n\r\n    // Update reward for staker in the respective stake window\r\n    function computeAndAddReward(uint256 stakeMapIndex, address staker) \r\n    public \r\n    onlyOperator\r\n    returns(bool)\r\n    {\r\n\r\n        // Check for the Incubation Period\r\n        require(\r\n            now > stakeMap[stakeMapIndex].approvalEndPeriod && \r\n            now < stakeMap[stakeMapIndex].requestWithdrawStartPeriod, \r\n            \"Reward cannot be added now\"\r\n        );\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[staker];\r\n\r\n        // Check if reward already computed\r\n        require((stakeInfo.approvedAmount > 0 || stakeInfo.pendingForApprovalAmount > 0 ) && stakeInfo.rewardComputeIndex != stakeMapIndex, \"Invalid reward request\");\r\n\r\n\r\n        // Calculate the totalAmount\r\n        uint256 totalAmount;\r\n        uint256 rewardAmount;\r\n\r\n        // Calculate the reward amount for the current window - Need to consider pendingForApprovalAmount for Auto Approvals\r\n        totalAmount = stakeInfo.approvedAmount.add(stakeInfo.pendingForApprovalAmount);\r\n        rewardAmount = _calculateRewardAmount(stakeMapIndex, totalAmount);\r\n        totalAmount = totalAmount.add(rewardAmount);\r\n\r\n        // Add the reward amount and update pendingForApprovalAmount\r\n        stakeInfo.approvedAmount = totalAmount;\r\n        stakeInfo.pendingForApprovalAmount = 0;\r\n\r\n        // Update the reward compute index to avoid mulitple addition\r\n        stakeInfo.rewardComputeIndex = stakeMapIndex;\r\n\r\n        // Update the User Balance\r\n        balances[staker] = balances[staker].add(rewardAmount);\r\n\r\n        emit AddReward(staker, stakeMapIndex, tokenOperator, totalAmount, rewardAmount, windowTotalStake);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateRewards(uint256 stakeMapIndex, address[] calldata staker) \r\n    external \r\n    onlyOperator\r\n    {\r\n        for(uint256 indx = 0; indx < staker.length; indx++) {\r\n            require(computeAndAddReward(stakeMapIndex, staker[indx]));\r\n        }\r\n    }\r\n\r\n    // To claim from the stake window\r\n    function claimStake(uint256 stakeMapIndex) public allowClaimStake(stakeMapIndex) {\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[msg.sender];\r\n\r\n        uint256 stakeAmount;\r\n        \r\n        // General claim\r\n        if(stakeInfo.claimableAmount[stakeMapIndex] > 0) {\r\n            \r\n            stakeAmount = stakeInfo.claimableAmount[stakeMapIndex];\r\n            stakeInfo.claimableAmount[stakeMapIndex] = 0;\r\n\r\n        } else {\r\n            \r\n            // No more stake windows & beyond grace period\r\n            stakeAmount = stakeInfo.approvedAmount;\r\n            stakeInfo.approvedAmount = 0;\r\n\r\n            // Update current stake period total stake\r\n            windowTotalStake = windowTotalStake.sub(stakeAmount);\r\n        }\r\n\r\n        // Check for balance in the contract\r\n        require(token.balanceOf(address(this)) >= stakeAmount, \"Not enough balance in the contract\");\r\n\r\n        // Update the User Balance\r\n        balances[msg.sender] = balances[msg.sender].sub(stakeAmount);\r\n\r\n        // Call the transfer function\r\n        require(token.transfer(msg.sender, stakeAmount), \"Unable to transfer token back to the account\");\r\n\r\n        emit ClaimStake(stakeMapIndex, msg.sender, stakeAmount);\r\n\r\n    }\r\n\r\n\r\n    // Migration - Load existing Stake Windows & Stakers\r\n    function migrateStakeWindow(uint256 _startPeriod, uint256 _submissionEndPeriod,  uint256 _approvalEndPeriod, uint256 _requestWithdrawStartPeriod, uint256 _endPeriod, uint256 _windowRewardAmount, uint256 _minStake, bool _openForExternal) public onlyOperator {\r\n\r\n        // Add check for Block Number to restrict migration after certain block number\r\n        require(block.number < maxMigrationBlocks, \"Exceeds migration phase\");\r\n\r\n        // Check Input Parameters for past stake windows\r\n        require(now > _startPeriod && _startPeriod < _submissionEndPeriod && _submissionEndPeriod < _approvalEndPeriod && _approvalEndPeriod < _requestWithdrawStartPeriod && _requestWithdrawStartPeriod < _endPeriod, \"Invalid stake period\");\r\n        require(_windowRewardAmount > 0 && _minStake > 0, \"Invalid inputs\" );\r\n\r\n        // Move the staking period to next one\r\n        currentStakeMapIndex = currentStakeMapIndex + 1;\r\n        StakePeriod memory stakePeriod;\r\n\r\n        // Set Staking attributes\r\n        stakePeriod.startPeriod = _startPeriod;\r\n        stakePeriod.submissionEndPeriod = _submissionEndPeriod;\r\n        stakePeriod.approvalEndPeriod = _approvalEndPeriod;\r\n        stakePeriod.requestWithdrawStartPeriod = _requestWithdrawStartPeriod;\r\n        stakePeriod.endPeriod = _endPeriod;\r\n        stakePeriod.windowRewardAmount = _windowRewardAmount;\r\n        stakePeriod.minStake = _minStake;        \r\n        stakePeriod.openForExternal = _openForExternal;\r\n\r\n        stakeMap[currentStakeMapIndex] = stakePeriod;\r\n\r\n\r\n    }\r\n\r\n\r\n    // Migration - Load existing stakes along with computed reward\r\n    function migrateStakes(uint256 stakeMapIndex, address[] calldata staker, uint256[] calldata stakeAmount) external onlyOperator {\r\n\r\n        // Add check for Block Number to restrict migration after certain block number\r\n        require(block.number < maxMigrationBlocks, \"Exceeds migration phase\");\r\n\r\n        // Check Input Parameters\r\n        require(staker.length == stakeAmount.length, \"Invalid Input Arrays\");\r\n\r\n        // Stakers should be for current window\r\n        require(currentStakeMapIndex == stakeMapIndex, \"Invalid Stake Window Index\");\r\n\r\n        for(uint256 indx = 0; indx < staker.length; indx++) {\r\n\r\n            StakeInfo memory req;\r\n\r\n            // Create a stake request with approvedAmount\r\n            req.exist = true;\r\n            req.pendingForApprovalAmount = 0;\r\n            req.approvedAmount = stakeAmount[indx];\r\n            req.rewardComputeIndex = stakeMapIndex;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolderInfo[staker[indx]] = req;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolders.push(staker[indx]);\r\n\r\n            // Update the User balance\r\n            balances[staker[indx]] = stakeAmount[indx];\r\n\r\n            // Update current stake period total stake - Along with Reward\r\n            windowTotalStake = windowTotalStake.add(stakeAmount[indx]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Getter Functions    \r\n    function getStakeHolders() public view returns(address[] memory) {\r\n        return stakeHolders;\r\n    }\r\n\r\n    function getStakeInfo(uint256 stakeMapIndex, address staker) \r\n    public \r\n    view\r\n    returns (bool found, uint256 approvedAmount, uint256 pendingForApprovalAmount, uint256 rewardComputeIndex, uint256 claimableAmount) \r\n    {\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[staker];\r\n        \r\n        found = false;\r\n        if(stakeInfo.exist) {\r\n            found = true;\r\n        }\r\n\r\n        pendingForApprovalAmount = stakeInfo.pendingForApprovalAmount;\r\n        approvedAmount = stakeInfo.approvedAmount;\r\n        rewardComputeIndex = stakeInfo.rewardComputeIndex;\r\n        claimableAmount = stakeInfo.claimableAmount[stakeMapIndex];\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMigrationBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"windowTotalStake\",\"type\":\"uint256\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOperator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvalEndPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"OpenForStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"RejectStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoRenewal\",\"type\":\"bool\"}],\"name\":\"RequestForClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"SubmitStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"}],\"name\":\"claimStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"computeAndAddReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakeMapIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"approvedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingForApprovalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardComputeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMigrationBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissionEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_approvalEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestWithdrawStartPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_openForExternal\",\"type\":\"bool\"}],\"name\":\"migrateStakeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeAmount\",\"type\":\"uint256[]\"}],\"name\":\"migrateStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissionEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_approvalEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestWithdrawStartPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_openForExternal\",\"type\":\"bool\"}],\"name\":\"openForStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rejectStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoRenewal\",\"type\":\"bool\"}],\"name\":\"requestForClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestWithdrawStartPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"openForExternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"windowRewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"submitStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMapIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenStake", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005b7533812759b45c2b44c19e320ba2cd2681b542000000000000000000000000000000000000000000000000000000000002a300", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7a96e8dd6fa51c75d6161b67d1a1ac549336ef8103e36d02c1caeb2f6b133e3"}]}