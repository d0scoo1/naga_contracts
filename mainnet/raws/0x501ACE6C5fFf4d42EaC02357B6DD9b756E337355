{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/risk/CoverageDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/risk/ICoverageDataProvider.sol\\\";\\nimport \\\"../interfaces/utils/IRegistry.sol\\\";\\nimport \\\"../interfaces/ISOLACE.sol\\\";\\nimport \\\"../interfaces/utils/Aave/IAavePriceOracle.sol\\\";\\nimport \\\"../interfaces/utils/Sushiswap/ISushiswapLPToken.sol\\\";\\nimport \\\"../utils/Governable.sol\\\";\\n\\n/**\\n * @title  CoverageDataProvider\\n * @author solace.fi\\n * @notice Holds underwriting pool amounts in `USD`. Provides information to the [**Risk Manager**](./RiskManager.sol) that is the maximum amount of cover that `Solace` protocol can sell as a coverage.\\n*/\\ncontract CoverageDataProvider is ICoverageDataProvider, Governable {\\n\\n    /***************************************\\n     STATE VARIABLES\\n    ***************************************/\\n\\n    /// @notice The balance of underwriting pool in usd.\\n    mapping(string => uint256) private _uwpBalanceOf;\\n\\n    /// @notice The index to underwriting pool.\\n    mapping(uint256 => string) private _indexToUwp;\\n\\n    /// @notice The underwriting pool to index.\\n    mapping(string => uint256) private _uwpToIndex;\\n\\n    /// @notice The underwriting pool count\\n    uint256 public numOfPools;\\n\\n    /// @notice The pool updater.\\n    address private _uwpUpdater;\\n\\n    modifier canUpdate() {\\n      require(msg.sender == super.governance() || msg.sender == _uwpUpdater, \\\"!governance\\\");\\n      _;\\n    }\\n\\n    /**\\n     * @notice Constructs the `CoverageDataProvider` contract.\\n     * @param governance The address of the [governor](/docs/protocol/governance).\\n    */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address governance) Governable(governance) {}\\n\\n    /***************************************\\n     MUTUATOR FUNCTIONS\\n    ***************************************/\\n   \\n    /**\\n      * @notice Resets the underwriting pool balances.\\n      * @param uwpNames The underwriting pool values to set.\\n      * @param amounts The underwriting pool balances in `USD`.\\n    */\\n    function reset(string[] calldata uwpNames, uint256[] calldata amounts) external override canUpdate {\\n      require(uwpNames.length == amounts.length, \\\"length mismatch\\\");\\n      // delete current underwriting pools\\n      uint256 poolCount = numOfPools;\\n      for (uint256 i = poolCount; i > 0; i--) {\\n        string memory uwpName = _indexToUwp[i];\\n        delete _uwpToIndex[uwpName];\\n        delete _indexToUwp[i];\\n        delete _uwpBalanceOf[uwpName];\\n        emit UnderwritingPoolRemoved(uwpName);\\n      }\\n\\n      // set new underwriting pools\\n      numOfPools = 0;\\n      for (uint256 i = 0; i < uwpNames.length; i++) {\\n        set(uwpNames[i], amounts[i]);\\n      }\\n    }\\n\\n    /**\\n     * @notice Sets the balance of the given underwriting pool.\\n     * @param uwpName The underwriting pool name to set balance.\\n     * @param amount The balance of the underwriting pool in `USD`.\\n    */\\n    function set(string calldata uwpName, uint256 amount) public override canUpdate {\\n      require(bytes(uwpName).length > 0, \\\"empty underwriting pool name\\\");\\n     \\n      _uwpBalanceOf[uwpName] = amount;\\n      if (_uwpToIndex[uwpName] == 0) {\\n        uint256 index = numOfPools;\\n        _uwpToIndex[uwpName] = ++index;\\n        _indexToUwp[index] = uwpName;\\n        numOfPools = index;\\n      }\\n      emit UnderwritingPoolSet(uwpName, amount);\\n    }\\n\\n    /**\\n     * @notice Removes the given underwriting pool.\\n     * @param uwpName The underwriting pool name to remove.\\n    */\\n    function remove(string calldata uwpName) external override canUpdate {\\n      uint256 index = _uwpToIndex[uwpName];\\n      if (index == 0) return;\\n\\n      uint256 poolCount = numOfPools;\\n      if (poolCount == 0) return;\\n\\n      if (index != poolCount) {\\n        string memory lastPool = _indexToUwp[poolCount];\\n        _uwpToIndex[lastPool] = index;\\n        _indexToUwp[index] = lastPool;\\n      }\\n\\n      delete _uwpToIndex[uwpName];\\n      delete _indexToUwp[poolCount];\\n      delete _uwpBalanceOf[uwpName];\\n      numOfPools -= 1;\\n      emit UnderwritingPoolRemoved(uwpName);\\n    }\\n\\n    /***************************************\\n     VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Returns the maximum amount of cover in `USD` that Solace as a whole can sell.\\n     * @return cover The max amount of cover in `USD`.\\n    */\\n    function maxCover() external view override returns (uint256 cover) {\\n      // get pool balance\\n      uint256 pools = numOfPools;\\n      for (uint256 i = pools; i > 0; i--) {\\n        cover += balanceOf(_indexToUwp[i]);\\n      }\\n    }\\n   \\n    /**\\n     * @notice Returns the balance of the underwriting pool in `USD`.\\n     * @param uwpName The underwriting pool name to get balance.\\n     * @return amount The balance of the underwriting pool in `USD`.\\n    */\\n    function balanceOf(string memory uwpName) public view override returns (uint256 amount) {\\n      return _uwpBalanceOf[uwpName];\\n    }\\n\\n    /**\\n     * @notice Returns underwriting pool name for given index.\\n     * @param index The underwriting pool index to get.\\n     * @return uwpName The underwriting pool name.\\n    */\\n    function poolOf(uint256 index) external view override returns (string memory uwpName) {\\n      return _indexToUwp[index];\\n    }\\n\\n    /**\\n     * @notice Returns the underwriting pool bot updater address.\\n     * @return uwpUpdater The bot address.\\n    */\\n    function getUwpUpdater() external view override returns (address uwpUpdater) {\\n      return _uwpUpdater;\\n    }\\n\\n    /***************************************\\n     GOVERNANCE FUNCTIONS\\n    ***************************************/\\n    \\n    /**\\n     * @notice Sets the underwriting pool bot updater.\\n     * @param uwpUpdater The bot address to set.\\n    */\\n    function setUwpUpdater(address uwpUpdater) external override onlyGovernance {\\n      require(uwpUpdater != address(0x0), \\\"zero address uwp updater\\\");\\n      _uwpUpdater = uwpUpdater;\\n      emit UwpUpdaterSet(uwpUpdater);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/risk/ICoverageDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title ICoverageDataProvider\\n * @author solace.fi\\n * @notice Holds underwriting pool amounts in `USD`. Provides information to the [**Risk Manager**](./RiskManager.sol) that is the maximum amount of cover that `Solace` protocol can sell as a coverage.\\n*/\\ninterface ICoverageDataProvider {\\n    /***************************************\\n     EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when the underwriting pool is set.\\n    event UnderwritingPoolSet(string uwpName, uint256 amount);\\n\\n    /// @notice Emitted when underwriting pool is removed.\\n    event UnderwritingPoolRemoved(string uwpName);\\n\\n    /// @notice Emitted when underwriting pool updater is set.\\n    event UwpUpdaterSet(address uwpUpdater);\\n\\n    /***************************************\\n     MUTUATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n      * @notice Resets the underwriting pool balances.\\n      * @param uwpNames The underwriting pool values to set.\\n      * @param amounts The underwriting pool balances.\\n    */\\n    function reset(string[] calldata uwpNames, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @notice Sets the balance of the given underwriting pool.\\n     * @param uwpName The underwriting pool name to set balance.\\n     * @param amount The balance of the underwriting pool in `USD`.\\n    */\\n    function set(string calldata uwpName, uint256 amount) external;\\n\\n    /**\\n     * @notice Removes the given underwriting pool.\\n     * @param uwpName The underwriting pool name to remove.\\n    */\\n    function remove(string calldata uwpName) external;\\n\\n    /***************************************\\n     VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice The maximum amount of cover in `USD` that Solace as a whole can sell.\\n     * @return cover The max amount of cover in `USD`.\\n    */\\n    function maxCover() external view returns (uint256 cover);\\n\\n    /**\\n     * @notice Returns the balance of the underwriting pool in `USD`.\\n     * @param uwpName The underwriting pool name to get balance.\\n     * @return amount The balance of the underwriting pool in `USD`.\\n    */\\n    function balanceOf(string memory uwpName) external view returns (uint256 amount); \\n\\n    /**\\n     * @notice Returns underwriting pool name for given index.\\n     * @param index The underwriting pool index to get.\\n     * @return uwpName The underwriting pool name.\\n    */\\n    function poolOf(uint256 index) external view returns (string memory uwpName);\\n\\n    /**\\n     * @notice Returns the underwriting pool bot updater address.\\n     * @return uwpUpdater The bot address.\\n    */\\n    function getUwpUpdater() external view returns (address uwpUpdater);\\n\\n    /***************************************\\n     GOVERNANCE FUNCTIONS\\n    ***************************************/\\n    \\n    /**\\n     * @notice Sets the underwriting pool bot updater.\\n     * @param uwpUpdater The bot address to set.\\n    */\\n    function setUwpUpdater(address uwpUpdater) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/utils/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n\\n/**\\n * @title IRegistry\\n * @author solace.fi\\n * @notice Tracks the contracts of the Solaverse.\\n *\\n * [**Governance**](/docs/protocol/governance) can set the contract addresses and anyone can look them up.\\n *\\n * A key is a unique identifier for each contract. Use [`get(key)`](#get) or [`tryGet(key)`](#tryget) to get the address of the contract. Enumerate the keys with [`length()`](#length) and [`getKey(index)`](#getkey).\\n */\\ninterface IRegistry {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when a record is set.\\n    event RecordSet(string indexed key, address indexed value);\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice The number of unique keys.\\n    function length() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the `value` of a given `key`.\\n     * Reverts if the key is not in the mapping.\\n     * @param key The key to query.\\n     * @param value The value of the key.\\n     */\\n    function get(string calldata key) external view returns (address value);\\n\\n    /**\\n     * @notice Gets the `value` of a given `key`.\\n     * Fails gracefully if the key is not in the mapping.\\n     * @param key The key to query.\\n     * @param success True if the key was found, false otherwise.\\n     * @param value The value of the key or zero if it was not found.\\n     */\\n    function tryGet(string calldata key) external view returns (bool success, address value);\\n\\n    /**\\n     * @notice Gets the `key` of a given `index`.\\n     * @dev Iterable [1,length].\\n     * @param index The index to query.\\n     * @return key The key at that index.\\n     */\\n    function getKey(uint256 index) external view returns (string memory key);\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Sets keys and values.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param keys The keys to set.\\n     * @param values The values to set.\\n     */\\n    function set(string[] calldata keys, address[] calldata values) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISOLACE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title Solace Token (SOLACE)\\n * @author solace.fi\\n * @notice The native governance token of the Solace Coverage Protocol.\\n */\\ninterface ISOLACE is IERC20Metadata {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when a minter is added.\\n    event MinterAdded(address indexed minter);\\n    /// @notice Emitted when a minter is removed.\\n    event MinterRemoved(address indexed minter);\\n\\n    /***************************************\\n    MINT FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Returns true if `account` is authorized to mint [**SOLACE**](../SOLACE).\\n     * @param account Account to query.\\n     * @return status True if `account` can mint, false otherwise.\\n     */\\n    function isMinter(address account) external view returns (bool status);\\n\\n    /**\\n     * @notice Mints new [**SOLACE**](../SOLACE) to the receiver account.\\n     * Can only be called by authorized minters.\\n     * @param account The receiver of new tokens.\\n     * @param amount The number of new tokens.\\n     */\\n    function mint(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Burns [**SOLACE**](../SOLACE) from msg.sender.\\n     * @param amount Amount to burn.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @notice Adds a new minter.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param minter The new minter.\\n     */\\n    function addMinter(address minter) external;\\n\\n    /**\\n     * @notice Removes a minter.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param minter The minter to remove.\\n     */\\n    function removeMinter(address minter) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/utils/Aave/IAavePriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IAavePriceOracle\\n * @author solace.fi\\n * @notice The smart contract that returns the asset prices in `ETH`.\\n*/\\ninterface IAavePriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/utils/Sushiswap/ISushiswapLPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface ISushiswapLPToken {\\n \\n  /**\\n   * @notice Returns the address of `SushiFactory`.\\n   * @return factory The address of the factory.\\n   */\\n  function factory() external view returns (address factory);\\n  \\n  /**\\n   * @notice Returns the first pair token.\\n   * @return token The address of the first pair token.\\n   */\\n  function token0() external view returns (address token);\\n\\n  /**\\n   * @notice Returns the second pair token.\\n   * @return token The address of the second pair token.\\n   */\\n  function token1() external view returns (address token);\\n\\n  /**\\n   * @notice Returns the symbol of the token.\\n   * @return symbol The token symbol.\\n   */\\n  function symbol() external view returns (string memory symbol);\\n\\n  /**\\n   * @notice Returns the name of the token.\\n   * @return name The token name.\\n   */\\n  function name() external view returns (string memory name);\\n\\n  /**\\n   * @notice Returns total token supply.\\n   * @return totalSupply The total supply.\\n   */\\n  function totalSupply() external view returns (uint256 totalSupply);\\n\\n  /**\\n   * @notice Returns account's balance.\\n   * @param account The address of the user.\\n   * @return balance The amount tokens user have.\\n   */\\n  function balanceOf(address account) external view returns (uint256 balance);\\n\\n  /**\\n  * @notice Returns the decimals value.\\n  * @return decimals The decimals value.\\n  */\\n  function decimals() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns LP token reserves.\\n   * @return _reserve0\\n   * @return _reserve1\\n   * @return _blockTimestampLast \\n  */\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n}\"\r\n    },\r\n    \"contracts/utils/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./../interfaces/utils/IGovernable.sol\\\";\\n\\n/**\\n * @title Governable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n   * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setpendinggovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./../interfaces/utils/ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ncontract Governable is IGovernable {\\n\\n    /***************************************\\n    GLOBAL VARIABLES\\n    ***************************************/\\n\\n    // Governor.\\n    address private _governance;\\n\\n    // governance to take over.\\n    address private _pendingGovernance;\\n\\n    bool private _locked;\\n\\n    /**\\n     * @notice Constructs the governable contract.\\n     * @param governance_ The address of the [governor](/docs/protocol/governance).\\n     */\\n    constructor(address governance_) {\\n        require(governance_ != address(0x0), \\\"zero address governance\\\");\\n        _governance = governance_;\\n        _pendingGovernance = address(0x0);\\n        _locked = false;\\n    }\\n\\n    /***************************************\\n    MODIFIERS\\n    ***************************************/\\n\\n    // can only be called by governor\\n    // can only be called while unlocked\\n    modifier onlyGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    // can only be called by pending governor\\n    // can only be called while unlocked\\n    modifier onlyPendingGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _pendingGovernance, \\\"!pending governance\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() public view override returns (address) {\\n        return _governance;\\n    }\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view override returns (address) {\\n        return _pendingGovernance;\\n    }\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view override returns (bool) {\\n        return _locked;\\n    }\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external override onlyGovernance {\\n        _pendingGovernance = pendingGovernance_;\\n        emit GovernancePending(pendingGovernance_);\\n    }\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the pending governor.\\n     */\\n    function acceptGovernance() external override onlyPendingGovernance {\\n        // sanity check against transferring governance to the zero address\\n        // if someone figures out how to sign transactions from the zero address\\n        // consider the entirety of ethereum to be rekt\\n        require(_pendingGovernance != address(0x0), \\\"zero governance\\\");\\n        address oldGovernance = _governance;\\n        _governance = _pendingGovernance;\\n        _pendingGovernance = address(0x0);\\n        emit GovernanceTransferred(oldGovernance, _governance);\\n    }\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external override onlyGovernance {\\n        _locked = true;\\n        // intentionally not using address(0x0), see re-initialization exploit\\n        _governance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        _pendingGovernance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        emit GovernanceTransferred(msg.sender, address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF));\\n        emit GovernanceLocked();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/utils/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IGovernable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setpendinggovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ninterface IGovernable {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when pending Governance is set.\\n    event GovernancePending(address pendingGovernance);\\n    /// @notice Emitted when Governance is set.\\n    event GovernanceTransferred(address oldGovernance, address newGovernance);\\n    /// @notice Emitted when Governance is locked.\\n    event GovernanceLocked();\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() external view returns (address);\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view returns (address);\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view returns (bool);\\n\\n    /***************************************\\n    MUTATORS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external;\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the new governor.\\n     */\\n    function acceptGovernance() external;\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"GovernancePending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uwpName\",\"type\":\"string\"}],\"name\":\"UnderwritingPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uwpName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnderwritingPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uwpUpdater\",\"type\":\"address\"}],\"name\":\"UwpUpdaterSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uwpName\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUwpUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"uwpUpdater\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceIsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cover\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"poolOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uwpName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uwpName\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"uwpNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uwpName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingGovernance_\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uwpUpdater\",\"type\":\"address\"}],\"name\":\"setUwpUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoverageDataProvider", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000501ace0e8d16b92236763e2ded7ae3bc2dffa276", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}