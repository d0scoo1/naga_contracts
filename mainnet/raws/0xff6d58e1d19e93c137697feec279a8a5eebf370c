{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n\r\n    function balanceOf(address to) external view returns (uint);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\ninterface Presale {\r\n\r\n    function getRefund(address _participant) external returns(uint256);\r\n    function claimTokens(address _participant) external returns(uint256);\r\n    function claimAirdrop(address _participant) external returns(uint256);\r\n    function buyPresale(address _participant, uint256 _ETHValue) external returns(uint256);\r\n    function getDeployerBalance(address _deployer) external returns(uint256);\r\n    function getLiquidity() external returns(uint256, uint256);\r\n    function lockLiquidity() external;\r\n    function base(address _participant) external view returns(uint256, uint256, uint256, uint256, uint256, bool, bool);\r\n    function buyer(address _participant) external view returns(uint256, uint256, uint256, uint256, uint256, uint256);\r\n    function tokenomics() external view returns(address, uint256, uint256, uint256, uint256, uint256);\r\n    function state() external view returns(bool, bool, bool, bool);\r\n\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n\r\ncontract PublicSale {\r\n\r\n    address owner;\r\n    address _sale;\r\n    address _presale;\r\n    IDEXRouter public router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    function configAddresses(address _saleAddress, address _presaleAddress) public isOwner {\r\n        _sale = _saleAddress;\r\n        _presale = _presaleAddress;\r\n    }\r\n\r\n    function buyPresale(address _participant) public payable {\r\n        require(_participant == msg.sender);\r\n        uint256 _ethBack = Presale(_sale).buyPresale(_participant, msg.value);\r\n        if (_ethBack > 0) {\r\n            payable(msg.sender).transfer(_ethBack);\r\n        }\r\n    }\r\n\r\n    function claimTokens(address _participant) public {\r\n        require(_participant == msg.sender);\r\n        uint256 _numTokens = Presale(_sale).claimTokens(_participant);\r\n        if (_numTokens > 0) {IERC20(_presale).transfer(_participant, _numTokens);}\r\n    }\r\n\r\n    function claimAirdrop(address _participant) public {\r\n        require(_participant == msg.sender);\r\n        uint256 _numTokens = Presale(_sale).claimAirdrop(_participant);\r\n        if (_numTokens > 0) {IERC20(_presale).transfer(_participant, _numTokens);}\r\n    }\r\n\r\n    function getRefund(address _participant) public {\r\n        require(_participant == msg.sender);\r\n        uint256 _ethRefund = Presale(_sale).getRefund(_participant);\r\n        if (_ethRefund > 0) {\r\n            payable(msg.sender).transfer(_ethRefund);\r\n        }\r\n    }\r\n\r\n    function claimDeployer(address _participant) public {\r\n        require(_participant == msg.sender);\r\n        uint256 _numTokens = Presale(_sale).getDeployerBalance(_participant);\r\n        if (_numTokens > 0) {IERC20(_presale).transfer(_participant, _numTokens);}\r\n    }\r\n\r\n    function addLiquidity(uint256 _tokenBalance, uint256 _ETHBalance) private {\r\n\r\n        if(IERC20(_presale).allowance(address(this), address(router)) < _tokenBalance) {\r\n            IERC20(_presale).approve(address(router), _tokenBalance);\r\n        }\r\n\r\n        router.addLiquidityETH{value: _ETHBalance}(_presale, _tokenBalance, 0, 0, _sale, block.timestamp + 5 minutes);\r\n\r\n    }\r\n\r\n    function handleLiquidity() public isOwner {\r\n        (uint256 token, uint256 eth) = Presale(_sale).getLiquidity();\r\n        addLiquidity(token, eth);\r\n        Presale(_sale).lockLiquidity();\r\n    }\r\n\r\n    function base(address _participant) public view returns(uint256, uint256, uint256, uint256, uint256, bool, bool) {\r\n        return Presale(_sale).base(_participant);\r\n    }\r\n\r\n    function buyer(address _participant) public view returns(uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        return Presale(_sale).buyer(_participant);\r\n    }\r\n\r\n    function tokenomics() public view returns(address, uint256, uint256, uint256, uint256, uint256) {\r\n        return Presale(_sale).tokenomics();\r\n    }\r\n\r\n    function state() public view returns(bool, bool, bool, bool) {\r\n        return Presale(_sale).state();\r\n    }\r\n\r\n    function withdrawToken(address _token) public isOwner {\r\n        IERC20(_token).transfer(owner, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawETH() public isOwner {          \r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function getSelfAddress() public view returns(address) {\r\n        return address(this);\r\n    }\r\n\r\n    receive() external payable { }\r\n    fallback() external payable { }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"buyPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"buyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"claimDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presaleAddress\",\"type\":\"address\"}],\"name\":\"configAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSelfAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handleLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenomics\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PublicSale", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83da3dddd1654fb14007784b513c7924167764551b7e2cf551e32441dc6ce87d"}]}