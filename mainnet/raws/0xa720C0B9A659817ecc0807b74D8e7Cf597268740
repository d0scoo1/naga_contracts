{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/uniswap/v3_swap/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @title Uniswap v3 swap.\\n * @dev Decentralized Exchange.\\n */\\n\\nimport { TokenInterface } from \\\"../../../common/interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\nabstract contract UniswapResolver is Helpers, Events {\\n\\t/**\\n\\t * @dev Buy Function\\n\\t * @notice Swap token(sellAddr) with token(buyAddr), buy token with minimum sell token\\n\\t * @param _buyAddr token to be bought\\n\\t * @param _sellAddr token to be sold\\n\\t * @param _fee pool fees for buyAddr-sellAddr token pair\\n\\t * @param _unitAmt The unit amount of sellAmt/buyAmt with slippage\\n\\t * @param _buyAmt amount of token to be bought\\n\\t * @param _getId Id to get buyAmt\\n\\t * @param _setId Id to store sellAmt\\n\\t */\\n\\tfunction buy(\\n\\t\\taddress _buyAddr,\\n\\t\\taddress _sellAddr,\\n\\t\\tuint24 _fee,\\n\\t\\tuint256 _unitAmt,\\n\\t\\tuint256 _buyAmt,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\t_buy(\\n\\t\\t\\t\\tBuyInfo({\\n\\t\\t\\t\\t\\tbuyAddr: _buyAddr,\\n\\t\\t\\t\\t\\tsellAddr: _sellAddr,\\n\\t\\t\\t\\t\\tfee: _fee,\\n\\t\\t\\t\\t\\tunitAmt: _unitAmt,\\n\\t\\t\\t\\t\\tbuyAmt: _buyAmt\\n\\t\\t\\t\\t}),\\n\\t\\t\\t\\t_getId,\\n\\t\\t\\t\\t_setId\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sell Function\\n\\t * @notice Swap token(sellAddr) with token(buyAddr), buy token with minimum sell token\\n\\t * @param _buyAddr token to be bought\\n\\t * @param _sellAddr token to be sold\\n\\t * @param _fee pool fees for buyAddr-sellAddr token pair\\n\\t * @param _unitAmt The unit amount of buyAmt/sellAmt with slippage\\n\\t * @param _sellAmt amount of token to be sold\\n\\t * @param _getId Id to get sellAmt\\n\\t * @param _setId Id to store buyAmt\\n\\t */\\n\\tfunction sell(\\n\\t\\taddress _buyAddr,\\n\\t\\taddress _sellAddr,\\n\\t\\tuint24 _fee,\\n\\t\\tuint256 _unitAmt,\\n\\t\\tuint256 _sellAmt,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\t_sell(\\n\\t\\t\\t\\tSellInfo({\\n\\t\\t\\t\\t\\tbuyAddr: _buyAddr,\\n\\t\\t\\t\\t\\tsellAddr: _sellAddr,\\n\\t\\t\\t\\t\\tfee: _fee,\\n\\t\\t\\t\\t\\tunitAmt: _unitAmt,\\n\\t\\t\\t\\t\\tsellAmt: _sellAmt\\n\\t\\t\\t\\t}),\\n\\t\\t\\t\\t_getId,\\n\\t\\t\\t\\t_setId\\n\\t\\t\\t);\\n\\t}\\n}\\n\\ncontract ConnectV2UniswapV3Swap is UniswapResolver {\\n\\tstring public constant name = \\\"UniswapV3-Swap-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/uniswap/v3_swap/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { TokenInterface } from \\\"../../../common/interfaces.sol\\\";\\nimport { DSMath } from \\\"../../../common/math.sol\\\";\\nimport { Basic } from \\\"../../../common/basic.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n\\t/**\\n\\t * @dev uniswap v3 Swap Router\\n\\t */\\n\\tISwapRouter02 constant swapRouter =\\n\\t\\tISwapRouter02(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\n\\n\\tstruct BuyInfo {\\n\\t\\taddress buyAddr; //token to be bought\\n\\t\\taddress sellAddr; //token to be sold\\n\\t\\tuint24 fee; //pool fees for buyAddr-sellAddr token pair\\n\\t\\tuint256 unitAmt; //The unit amount of sellAmt/buyAmt with slippage\\n\\t\\tuint256 buyAmt; //amount of token to be bought\\n\\t}\\n\\n\\tstruct SellInfo {\\n\\t\\taddress buyAddr; //token to be bought\\n\\t\\taddress sellAddr; //token to be sold\\n\\t\\tuint24 fee; //pool fees for buyAddr-sellAddr token pair\\n\\t\\tuint256 unitAmt; //The unit amount of buyAmt/sellAmt with slippage.\\n\\t\\tuint256 sellAmt; //amount of token to be bought\\n\\t}\\n\\n\\t/**\\n\\t * @dev Buy Function\\n\\t * @notice Swap token(sellAddr) with token(buyAddr), buy token with minimum sell token\\n\\t * @param buyData Data input for the buy action\\n\\t * @param getId Id to get buyAmt\\n\\t * @param setId Id to store sellAmt\\n\\t */\\n\\tfunction _buy(\\n\\t\\tBuyInfo memory buyData,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t) internal returns (string memory _eventName, bytes memory _eventParam) {\\n\\t\\tuint256 _buyAmt = getUint(getId, buyData.buyAmt);\\n\\n\\t\\t(TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(\\n\\t\\t\\tbuyData.buyAddr,\\n\\t\\t\\tbuyData.sellAddr\\n\\t\\t);\\n\\n\\t\\tuint256 _slippageAmt = convert18ToDec(\\n\\t\\t\\t_sellAddr.decimals(),\\n\\t\\t\\twmul(buyData.unitAmt, convertTo18(_buyAddr.decimals(), _buyAmt))\\n\\t\\t);\\n\\t\\tbool isEth = address(_sellAddr) == wethAddr;\\n\\t\\tconvertEthToWeth(isEth, _sellAddr, _slippageAmt);\\n\\t\\tapprove(_sellAddr, address(swapRouter), _slippageAmt);\\n\\n\\t\\tExactOutputSingleParams memory params = ExactOutputSingleParams({\\n\\t\\t\\ttokenIn: address(_sellAddr),\\n\\t\\t\\ttokenOut: address(_buyAddr),\\n\\t\\t\\tfee: buyData.fee,\\n\\t\\t\\trecipient: address(this),\\n\\t\\t\\tamountOut: _buyAmt,\\n\\t\\t\\tamountInMaximum: _slippageAmt, //require(_sellAmt <= amountInMaximum)\\n\\t\\t\\tsqrtPriceLimitX96: 0\\n\\t\\t});\\n\\t\\tuint256 _sellAmt = swapRouter.exactOutputSingle(params);\\n\\t\\trequire(_slippageAmt >= _sellAmt, \\\"Too much slippage\\\");\\n\\n\\t\\tisEth = address(_buyAddr) == wethAddr;\\n\\t\\tconvertWethToEth(isEth, _buyAddr, _buyAmt);\\n\\n\\t\\tsetUint(setId, _sellAmt);\\n\\n\\t\\t_eventName = \\\"LogBuy(address,address,uint256,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\tbuyData.buyAddr,\\n\\t\\t\\tbuyData.sellAddr,\\n\\t\\t\\t_buyAmt,\\n\\t\\t\\t_sellAmt,\\n\\t\\t\\tgetId,\\n\\t\\t\\tsetId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sell Function\\n\\t * @notice Swap token(sellAddr) with token(buyAddr), to get max buy tokens\\n\\t * @param sellData Data input for the sell action\\n\\t * @param getId Id to get buyAmt\\n\\t * @param setId Id to store sellAmt\\n\\t */\\n\\tfunction _sell(\\n\\t\\tSellInfo memory sellData,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t) internal returns (string memory _eventName, bytes memory _eventParam) {\\n\\t\\tuint256 _sellAmt = getUint(getId, sellData.sellAmt);\\n\\t\\t(TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(\\n\\t\\t\\tsellData.buyAddr,\\n\\t\\t\\tsellData.sellAddr\\n\\t\\t);\\n\\n\\t\\tif (_sellAmt == uint256(-1)) {\\n\\t\\t\\t_sellAmt = sellData.sellAddr == ethAddr\\n\\t\\t\\t\\t? address(this).balance\\n\\t\\t\\t\\t: _sellAddr.balanceOf(address(this));\\n\\t\\t}\\n\\n\\t\\tuint256 _slippageAmt = convert18ToDec(\\n\\t\\t\\t_buyAddr.decimals(),\\n\\t\\t\\twmul(sellData.unitAmt, convertTo18(_sellAddr.decimals(), _sellAmt))\\n\\t\\t);\\n\\n\\t\\tbool isEth = address(_sellAddr) == wethAddr;\\n\\t\\tconvertEthToWeth(isEth, _sellAddr, _sellAmt);\\n\\t\\tapprove(_sellAddr, address(swapRouter), _sellAmt);\\n\\t\\tExactInputSingleParams memory params = ExactInputSingleParams({\\n\\t\\t\\ttokenIn: address(_sellAddr),\\n\\t\\t\\ttokenOut: address(_buyAddr),\\n\\t\\t\\tfee: sellData.fee,\\n\\t\\t\\trecipient: address(this),\\n\\t\\t\\tamountIn: _sellAmt,\\n\\t\\t\\tamountOutMinimum: _slippageAmt, //require(_buyAmt >= amountOutMinimum)\\n\\t\\t\\tsqrtPriceLimitX96: 0\\n\\t\\t});\\n\\t\\tuint256 _buyAmt = swapRouter.exactInputSingle(params);\\n\\t\\trequire(_slippageAmt <= _buyAmt, \\\"Too much slippage\\\");\\n\\n\\t\\tisEth = address(_buyAddr) == wethAddr;\\n\\t\\tconvertWethToEth(isEth, _buyAddr, _buyAmt);\\n\\n\\t\\tsetUint(setId, _buyAmt);\\n\\n\\t\\t_eventName = \\\"LogSell(address,address,uint256,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\tsellData.buyAddr,\\n\\t\\t\\tsellData.sellAddr,\\n\\t\\t\\t_buyAmt,\\n\\t\\t\\t_sellAmt,\\n\\t\\t\\tgetId,\\n\\t\\t\\tsetId\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/uniswap/v3_swap/events.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract Events {\\n\\tevent LogBuy(\\n\\t\\taddress indexed buyToken,\\n\\t\\taddress indexed sellToken,\\n\\t\\tuint256 buyAmt,\\n\\t\\tuint256 sellAmt,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogSell(\\n\\t\\taddress indexed buyToken,\\n\\t\\taddress indexed sellToken,\\n\\t\\tuint256 buyAmt,\\n\\t\\tuint256 sellAmt,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/uniswap/v3_swap/interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\n\\nstruct ExactInputSingleParams {\\n\\taddress tokenIn;\\n\\taddress tokenOut;\\n\\tuint24 fee;\\n\\taddress recipient;\\n\\tuint256 amountIn;\\n\\tuint256 amountOutMinimum;\\n\\tuint160 sqrtPriceLimitX96;\\n}\\n\\nstruct ExactInputParams {\\n\\tbytes path;\\n\\taddress recipient;\\n\\tuint256 amountIn;\\n\\tuint256 amountOutMinimum;\\n}\\n\\nstruct ExactOutputSingleParams {\\n\\taddress tokenIn;\\n\\taddress tokenOut;\\n\\tuint24 fee;\\n\\taddress recipient;\\n\\tuint256 amountOut;\\n\\tuint256 amountInMaximum;\\n\\tuint160 sqrtPriceLimitX96;\\n}\\n\\nstruct ExactOutputParams {\\n\\tbytes path;\\n\\taddress recipient;\\n\\tuint256 amountOut;\\n\\tuint256 amountInMaximum;\\n}\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n\\t/// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n\\t/// @dev In the implementation you must pay the pool tokens owed for the swap.\\n\\t/// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n\\t/// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n\\t/// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n\\t/// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n\\t/// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n\\t/// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n\\t/// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n\\tfunction uniswapV3SwapCallback(\\n\\t\\tint256 amount0Delta,\\n\\t\\tint256 amount1Delta,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another token\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n\\t/// @return amountOut The amount of the received token\\n\\tfunction exactInputSingle(ExactInputSingleParams calldata params)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (uint256 amountOut);\\n\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n\\t/// @return amountOut The amount of the received token\\n\\tfunction exactInput(ExactInputParams calldata params)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (uint256 amountOut);\\n\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another token\\n\\t/// that may remain in the router after the swap.\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n\\t/// @return amountIn The amount of the input token\\n\\tfunction exactOutputSingle(ExactOutputSingleParams calldata params)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (uint256 amountIn);\\n\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n\\t/// that may remain in the router after the swap.\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n\\t/// @return amountIn The amount of the input token\\n\\tfunction exactOutput(ExactOutputParams calldata params)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (uint256 amountIn);\\n}\\n\\ninterface IApproveAndCall {}\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n\\n}\\n\\n/// @title MulticallExtended interface\\n/// @notice Enables calling multiple methods in a single call to the contract with optional validation\\ninterface IMulticallExtended is IMulticall {\\n\\n}\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V2\\ninterface IV2SwapRouter {\\n\\n}\\n\\ninterface ISwapRouter02 is\\n\\tIV2SwapRouter,\\n\\tIV3SwapRouter,\\n\\tIApproveAndCall,\\n\\tIMulticallExtended,\\n\\tISelfPermit\\n{}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function changeEthAddrToWethAddr(address token) internal pure returns(address tokenAddr){\\n        tokenAddr = token == ethAddr ? wethAddr : token;\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ConnectV2UniswapV3Swap", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}