{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n}\r\ncontract TokenVestTeam{\r\n    using SafeMath for uint256;\r\n    IERC20 public vestedToken;\r\n    uint256 public releaseInterval;\r\n    uint256 public lockingPeriod;\r\n    uint256 public releasePer;\r\n    IERC20 public otherToken;\r\n\r\n    address payable public owner;\r\n\r\n    uint256 public totalAddedToken; // total no of tokens vested in contract\r\n    uint256 public totalReleasedToken; // total released tokens \r\n    uint256 public RemainToken;\r\n    uint256 public totalVestor; // total no. of vestors\r\n    uint256 public percentDivider;\r\n    uint256 public minimumLimit;\r\n\r\n    struct VestToken {\r\n        uint256 lockedtilltime;\r\n        uint256 vesttime;\r\n        uint256 amount;\r\n        uint256 completewithdrawtill;\r\n        uint256 persecondLimit;\r\n        uint256 lastWithdrawalTime;\r\n        uint256 totalWithdrawal;\r\n        uint256 remainWithdrawal;\r\n        uint256 releaseinterval;\r\n        uint256 releaseperperinterval;\r\n        bool withdrawan;\r\n    }\r\n\r\n    struct User {\r\n        uint256 totalVestedTokenUser;\r\n        uint256 totalWithdrawedTokenUser;\r\n        uint256 vestCount;\r\n        bool alreadyExists;\r\n    }\r\n\r\n    mapping(address => User) public Vestors;\r\n    mapping(uint256 => address) public VesterID;\r\n    mapping(address => mapping(uint256 => VestToken)) public vestorRecord;\r\n\r\n    event VEST(address Vestors, uint256 amount);\r\n    event RELEASE(address Vestors, uint256 amount);\r\n\r\n\r\n    modifier onlyowner() {\r\n        require(owner == msg.sender, \"only owner\");\r\n        _;\r\n    }\r\n    constructor(address payable _owner, address mainToken) {\r\n        owner = _owner;\r\n        vestedToken = IERC20(mainToken); // address of token that we will stake or vest\r\n        lockingPeriod = 365 days; // locking period in days or no of seconds like 3600 for 1 hour\r\n        releaseInterval = 30 days; // release interval in days or seconds\r\n        releasePer = 50; // release percentage per interval values will be multiplied with 10\r\n        percentDivider = 1000;\r\n        minimumLimit = 1e20; // minimum limit for the vesting in wei\r\n    }\r\n\r\n    /** This method is used to deposit amount in contract \r\n\t* amount will be in wei */\r\n    function vest(uint256 amount) public {\r\n       \r\n        require(amount >= minimumLimit, \"vest more than minimum amount\");\r\n    \r\n        if (!Vestors[msg.sender].alreadyExists) {\r\n            Vestors[msg.sender].alreadyExists = true;\r\n            VesterID[totalVestor] = msg.sender;\r\n            totalVestor++;\r\n        }\r\n\r\n        vestedToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 index = Vestors[msg.sender].vestCount;\r\n        Vestors[msg.sender].totalVestedTokenUser = Vestors[msg.sender]\r\n            .totalVestedTokenUser\r\n            .add(amount);\r\n        totalAddedToken = totalAddedToken.add(amount);\r\n        RemainToken = RemainToken.add(amount);\r\n        vestorRecord[msg.sender][index].lockedtilltime = block.timestamp.add(\r\n            lockingPeriod\r\n        );\r\n        vestorRecord[msg.sender][index].vesttime = block.timestamp;\r\n        vestorRecord[msg.sender][index].amount = amount;\r\n        vestorRecord[msg.sender][index].completewithdrawtill = vestorRecord[msg.sender][index].lockedtilltime.add((percentDivider.div(releasePer)).mul(releaseInterval));\r\n        vestorRecord[msg.sender][index].lastWithdrawalTime = 0;\r\n        vestorRecord[msg.sender][index].totalWithdrawal = 0;\r\n        vestorRecord[msg.sender][index].remainWithdrawal = amount;\r\n\r\n        vestorRecord[msg.sender][index].releaseinterval = releaseInterval;\r\n        vestorRecord[msg.sender][index].releaseperperinterval = releasePer;\r\n\r\n        vestorRecord[msg.sender][index].persecondLimit = amount.div((percentDivider.div(releasePer)).mul(releaseInterval));\r\n\r\n        Vestors[msg.sender].vestCount++;\r\n\r\n        emit VEST(msg.sender, amount);\r\n    }\r\n\r\n   /** This method will used to withdraw vested token \r\n\t* before release, the token will be locked for the locking duration, and then it will release the set percentage for the set period */\r\n    function releaseToken(uint256 index) public {\r\n        require(\r\n            !vestorRecord[msg.sender][index].withdrawan,\r\n            \"already withdrawan\"\r\n        );\r\n        require(\r\n            vestorRecord[msg.sender][index].lockedtilltime < block.timestamp,\r\n            \"cannot release token before locked duration\"\r\n        );\r\n\r\n        uint256 releaseLimitTillNow;\r\n        uint256 commontimestamp;\r\n        (releaseLimitTillNow,commontimestamp) = realtimeReleasePerBlock(msg.sender , index);\r\n        \r\n        vestedToken.transfer(\r\n            msg.sender,\r\n            releaseLimitTillNow\r\n        );\r\n\r\n        totalReleasedToken = totalReleasedToken.add(\r\n            releaseLimitTillNow\r\n        );\r\n        RemainToken = RemainToken.sub(releaseLimitTillNow);\r\n        \r\n        vestorRecord[msg.sender][index].lastWithdrawalTime =  commontimestamp;\r\n        \r\n        vestorRecord[msg.sender][index].totalWithdrawal = vestorRecord[msg.sender][index].totalWithdrawal.add(releaseLimitTillNow);\r\n\r\n        vestorRecord[msg.sender][index].remainWithdrawal = vestorRecord[msg.sender][index].remainWithdrawal.sub(releaseLimitTillNow);\r\n\r\n        Vestors[msg.sender].totalWithdrawedTokenUser = Vestors[msg.sender].totalWithdrawedTokenUser.add(releaseLimitTillNow);\r\n\r\n        if(vestorRecord[msg.sender][index].totalWithdrawal == vestorRecord[msg.sender][index].amount){\r\n            vestorRecord[msg.sender][index].withdrawan = true;\r\n\r\n        }\r\n\r\n        emit RELEASE(\r\n            msg.sender,\r\n            releaseLimitTillNow\r\n        );\r\n    }\r\n\r\n    /** This method will return realtime release amount for particular user's block */\r\n    function realtimeReleasePerBlock(address user, uint256 blockno) public view returns (uint256,uint256) {\r\n\r\n        uint256 ret;\r\n        uint256 commontimestamp;\r\n            if (\r\n                !vestorRecord[user][blockno].withdrawan &&\r\n                vestorRecord[user][blockno].lockedtilltime < block.timestamp\r\n            ) {\r\n                uint256 val;\r\n                uint256 tempwithdrawaltime = vestorRecord[user][blockno].lastWithdrawalTime;\r\n                commontimestamp = block.timestamp;\r\n                if(tempwithdrawaltime == 0){\r\n                    tempwithdrawaltime = vestorRecord[user][blockno].lockedtilltime;\r\n                }\r\n                val = commontimestamp - tempwithdrawaltime;\r\n                val = val.mul(vestorRecord[user][blockno].persecondLimit);\r\n                if (val < vestorRecord[user][blockno].remainWithdrawal) {\r\n                    ret += val;\r\n                } else {\r\n                    ret += vestorRecord[user][blockno].remainWithdrawal;\r\n                }\r\n            }\r\n        return (ret,commontimestamp);\r\n    }\r\n\r\n    /** This method can only be invoked by the owner's address and is used to adjust the Release Interval; the argument will be in seconds */\r\n\r\n    function SetReleaseInterval(uint256 val) external onlyowner {\r\n        releaseInterval = val;\r\n    }\r\n\r\n    \r\n    function SetReleasePercentage(uint256 val) external onlyowner {\r\n        releasePer = val;\r\n    }\r\n\r\n    /** This method can only be invoked by the owner's address and is used to adjust the vesting duration (locking period), the argument will be in seconds */\r\n    function SetLockingPeriod(uint256 val) external onlyowner {\r\n        lockingPeriod = val;\r\n    }\r\n\r\n    /** The base currency is withdrawn using this method */\r\n\r\n    function withdrawBaseCurrency() public onlyowner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"does not have any balance\");\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    /** These two methods will enable the contract owner in withdrawing any incorrectly deposited tokens\r\n    * first call initToken method with passing token contract address as an argument \r\n    * then, as an argument, call withdrawToken with the value in wei */\r\n\r\n    function initToken(address addr) public onlyowner{\r\n        otherToken = IERC20(addr);\r\n    }\r\n    function withdrawToken(uint256 amount) public onlyowner {\r\n        otherToken.transfer(msg.sender\r\n        , amount);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Vestors\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RELEASE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Vestors\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VEST\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RemainToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"SetLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"SetReleaseInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"SetReleasePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VesterID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Vestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVestedTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawedTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"initToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockno\",\"type\":\"uint256\"}],\"name\":\"realtimeReleasePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasePer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"releaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAddedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestorRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedtilltime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completewithdrawtill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"persecondLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseinterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseperperinterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawan\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBaseCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVestTeam", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e89938d7da2304f2fad3bd4ce0fea6ff6cb264be0000000000000000000000005b685863494c33f344081f75e5430c260c224a32", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://062043fee131502f6f4deb20e9db429f792a8c3e373990e78d3f9bc24bf51658"}]}