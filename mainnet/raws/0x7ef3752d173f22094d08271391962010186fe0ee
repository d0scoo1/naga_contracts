{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-03-10\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity 0.6.12;\r\n\r\n\r\n// \r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// \r\n/******************\r\n@title WadRayMath library\r\n@author Aave\r\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\r\n */\r\nlibrary WadRayMath {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal constant _WAD = 1e18;\r\n  uint256 internal constant _HALF_WAD = _WAD / 2;\r\n\r\n  uint256 internal constant _RAY = 1e27;\r\n  uint256 internal constant _HALF_RAY = _RAY / 2;\r\n\r\n  uint256 internal constant _WAD_RAY_RATIO = 1e9;\r\n\r\n  function ray() internal pure returns (uint256) {\r\n    return _RAY;\r\n  }\r\n\r\n  function wad() internal pure returns (uint256) {\r\n    return _WAD;\r\n  }\r\n\r\n  function halfRay() internal pure returns (uint256) {\r\n    return _HALF_RAY;\r\n  }\r\n\r\n  function halfWad() internal pure returns (uint256) {\r\n    return _HALF_WAD;\r\n  }\r\n\r\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return _HALF_WAD.add(a.mul(b)).div(_WAD);\r\n  }\r\n\r\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 halfB = b / 2;\r\n\r\n    return halfB.add(a.mul(_WAD)).div(b);\r\n  }\r\n\r\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return _HALF_RAY.add(a.mul(b)).div(_RAY);\r\n  }\r\n\r\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 halfB = b / 2;\r\n\r\n    return halfB.add(a.mul(_RAY)).div(b);\r\n  }\r\n\r\n  function rayToWad(uint256 a) internal pure returns (uint256) {\r\n    uint256 halfRatio = _WAD_RAY_RATIO / 2;\r\n\r\n    return halfRatio.add(a).div(_WAD_RAY_RATIO);\r\n  }\r\n\r\n  function wadToRay(uint256 a) internal pure returns (uint256) {\r\n    return a.mul(_WAD_RAY_RATIO);\r\n  }\r\n\r\n  /**\r\n   * @dev calculates x^n, in ray. The code uses the ModExp precompile\r\n   * @param x base\r\n   * @param n exponent\r\n   * @return z = x^n, in ray\r\n   */\r\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n    z = n % 2 != 0 ? x : _RAY;\r\n\r\n    for (n /= 2; n != 0; n /= 2) {\r\n      x = rayMul(x, x);\r\n\r\n      if (n % 2 != 0) {\r\n        z = rayMul(z, x);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// \r\ninterface IAccessController {\r\n  event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n  function grantRole(bytes32 role, address account) external;\r\n\r\n  function revokeRole(bytes32 role, address account) external;\r\n\r\n  function renounceRole(bytes32 role, address account) external;\r\n\r\n  function MANAGER_ROLE() external view returns (bytes32);\r\n\r\n  function MINTER_ROLE() external view returns (bytes32);\r\n\r\n  function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n  function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n}\r\n\r\n// \r\ninterface ISTABLEX is IERC20 {\r\n  function mint(address account, uint256 amount) external;\r\n\r\n  function burn(address account, uint256 amount) external;\r\n\r\n  function a() external view returns (IAddressProvider);\r\n}\r\n\r\n// \r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// \r\ninterface IPriceFeed {\r\n  event OracleUpdated(address indexed asset, address oracle, address sender);\r\n  event EurOracleUpdated(address oracle, address sender);\r\n\r\n  function setAssetOracle(address _asset, address _oracle) external;\r\n\r\n  function setEurOracle(address _oracle) external;\r\n\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  function assetOracles(address _asset) external view returns (AggregatorV3Interface);\r\n\r\n  function eurOracle() external view returns (AggregatorV3Interface);\r\n\r\n  function getAssetPrice(address _asset) external view returns (uint256);\r\n\r\n  function convertFrom(address _asset, uint256 _amount) external view returns (uint256);\r\n\r\n  function convertTo(address _asset, uint256 _amount) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface IRatesManager {\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  //current annualized borrow rate\r\n  function annualizedBorrowRate(uint256 _currentBorrowRate) external pure returns (uint256);\r\n\r\n  //uses current cumulative rate to calculate totalDebt based on baseDebt at time T0\r\n  function calculateDebt(uint256 _baseDebt, uint256 _cumulativeRate) external pure returns (uint256);\r\n\r\n  //uses current cumulative rate to calculate baseDebt at time T0\r\n  function calculateBaseDebt(uint256 _debt, uint256 _cumulativeRate) external pure returns (uint256);\r\n\r\n  //calculate a new cumulative rate\r\n  function calculateCumulativeRate(\r\n    uint256 _borrowRate,\r\n    uint256 _cumulativeRate,\r\n    uint256 _timeElapsed\r\n  ) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface ILiquidationManager {\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  function calculateHealthFactor(\r\n    uint256 _collateralValue,\r\n    uint256 _vaultDebt,\r\n    uint256 _minRatio\r\n  ) external view returns (uint256 healthFactor);\r\n\r\n  function liquidationBonus(address _collateralType, uint256 _amount) external view returns (uint256 bonus);\r\n\r\n  function applyLiquidationDiscount(address _collateralType, uint256 _amount)\r\n    external\r\n    view\r\n    returns (uint256 discountedAmount);\r\n\r\n  function isHealthy(\r\n    uint256 _collateralValue,\r\n    uint256 _vaultDebt,\r\n    uint256 _minRatio\r\n  ) external view returns (bool);\r\n}\r\n\r\n// \r\ninterface IVaultsDataProvider {\r\n  struct Vault {\r\n    // borrowedType support USDX / PAR\r\n    address collateralType;\r\n    address owner;\r\n    uint256 collateralBalance;\r\n    uint256 baseDebt;\r\n    uint256 createdAt;\r\n  }\r\n\r\n  //Write\r\n  function createVault(address _collateralType, address _owner) external returns (uint256);\r\n\r\n  function setCollateralBalance(uint256 _id, uint256 _balance) external;\r\n\r\n  function setBaseDebt(uint256 _id, uint256 _newBaseDebt) external;\r\n\r\n  // Read\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  function baseDebt(address _collateralType) external view returns (uint256);\r\n\r\n  function vaultCount() external view returns (uint256);\r\n\r\n  function vaults(uint256 _id) external view returns (Vault memory);\r\n\r\n  function vaultOwner(uint256 _id) external view returns (address);\r\n\r\n  function vaultCollateralType(uint256 _id) external view returns (address);\r\n\r\n  function vaultCollateralBalance(uint256 _id) external view returns (uint256);\r\n\r\n  function vaultBaseDebt(uint256 _id) external view returns (uint256);\r\n\r\n  function vaultId(address _collateralType, address _owner) external view returns (uint256);\r\n\r\n  function vaultExists(uint256 _id) external view returns (bool);\r\n\r\n  function vaultDebt(uint256 _vaultId) external view returns (uint256);\r\n\r\n  function debt() external view returns (uint256);\r\n\r\n  function collateralDebt(address _collateralType) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface IFeeDistributor {\r\n  event PayeeAdded(address indexed account, uint256 shares);\r\n  event FeeReleased(uint256 income, uint256 releasedAt);\r\n\r\n  function release() external;\r\n\r\n  function changePayees(address[] memory _payees, uint256[] memory _shares) external;\r\n\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  function lastReleasedAt() external view returns (uint256);\r\n\r\n  function getPayees() external view returns (address[] memory);\r\n\r\n  function totalShares() external view returns (uint256);\r\n\r\n  function shares(address payee) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface IAddressProvider {\r\n  function setAccessController(IAccessController _controller) external;\r\n\r\n  function setConfigProvider(IConfigProvider _config) external;\r\n\r\n  function setVaultsCore(IVaultsCore _core) external;\r\n\r\n  function setStableX(ISTABLEX _stablex) external;\r\n\r\n  function setRatesManager(IRatesManager _ratesManager) external;\r\n\r\n  function setPriceFeed(IPriceFeed _priceFeed) external;\r\n\r\n  function setLiquidationManager(ILiquidationManager _liquidationManager) external;\r\n\r\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\r\n\r\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\r\n\r\n  function controller() external view returns (IAccessController);\r\n\r\n  function config() external view returns (IConfigProvider);\r\n\r\n  function core() external view returns (IVaultsCore);\r\n\r\n  function stablex() external view returns (ISTABLEX);\r\n\r\n  function ratesManager() external view returns (IRatesManager);\r\n\r\n  function priceFeed() external view returns (IPriceFeed);\r\n\r\n  function liquidationManager() external view returns (ILiquidationManager);\r\n\r\n  function vaultsData() external view returns (IVaultsDataProvider);\r\n\r\n  function feeDistributor() external view returns (IFeeDistributor);\r\n}\r\n\r\n// \r\ninterface IConfigProviderV1 {\r\n  struct CollateralConfig {\r\n    address collateralType;\r\n    uint256 debtLimit;\r\n    uint256 minCollateralRatio;\r\n    uint256 borrowRate;\r\n    uint256 originationFee;\r\n  }\r\n\r\n  event CollateralUpdated(\r\n    address indexed collateralType,\r\n    uint256 debtLimit,\r\n    uint256 minCollateralRatio,\r\n    uint256 borrowRate,\r\n    uint256 originationFee\r\n  );\r\n  event CollateralRemoved(address indexed collateralType);\r\n\r\n  function setCollateralConfig(\r\n    address _collateralType,\r\n    uint256 _debtLimit,\r\n    uint256 _minCollateralRatio,\r\n    uint256 _borrowRate,\r\n    uint256 _originationFee\r\n  ) external;\r\n\r\n  function removeCollateral(address _collateralType) external;\r\n\r\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\r\n\r\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\r\n\r\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\r\n\r\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\r\n\r\n  function setLiquidationBonus(uint256 _bonus) external;\r\n\r\n  function a() external view returns (IAddressProviderV1);\r\n\r\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\r\n\r\n  function collateralIds(address _collateralType) external view returns (uint256);\r\n\r\n  function numCollateralConfigs() external view returns (uint256);\r\n\r\n  function liquidationBonus() external view returns (uint256);\r\n\r\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface ILiquidationManagerV1 {\r\n  function a() external view returns (IAddressProviderV1);\r\n\r\n  function calculateHealthFactor(\r\n    address _collateralType,\r\n    uint256 _collateralValue,\r\n    uint256 _vaultDebt\r\n  ) external view returns (uint256 healthFactor);\r\n\r\n  function liquidationBonus(uint256 _amount) external view returns (uint256 bonus);\r\n\r\n  function applyLiquidationDiscount(uint256 _amount) external view returns (uint256 discountedAmount);\r\n\r\n  function isHealthy(\r\n    address _collateralType,\r\n    uint256 _collateralValue,\r\n    uint256 _vaultDebt\r\n  ) external view returns (bool);\r\n}\r\n\r\n// \r\ninterface IVaultsCoreV1 {\r\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\r\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Liquidated(\r\n    uint256 indexed vaultId,\r\n    uint256 debtRepaid,\r\n    uint256 collateralLiquidated,\r\n    address indexed owner,\r\n    address indexed sender\r\n  );\r\n\r\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\r\n\r\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\r\n\r\n  function deposit(address _collateralType, uint256 _amount) external;\r\n\r\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function withdrawAll(uint256 _vaultId) external;\r\n\r\n  function borrow(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function repayAll(uint256 _vaultId) external;\r\n\r\n  function repay(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function liquidate(uint256 _vaultId) external;\r\n\r\n  //Refresh\r\n  function initializeRates(address _collateralType) external;\r\n\r\n  function refresh() external;\r\n\r\n  function refreshCollateral(address collateralType) external;\r\n\r\n  //upgrade\r\n  function upgrade(address _newVaultsCore) external;\r\n\r\n  //Read only\r\n\r\n  function a() external view returns (IAddressProviderV1);\r\n\r\n  function availableIncome() external view returns (uint256);\r\n\r\n  function cumulativeRates(address _collateralType) external view returns (uint256);\r\n\r\n  function lastRefresh(address _collateralType) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface IWETH {\r\n  function deposit() external payable;\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function withdraw(uint256 wad) external;\r\n}\r\n\r\n// \r\ninterface IGovernorAlpha {\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n    struct Proposal {\r\n        // Unique id for looking up a proposal\r\n        uint256 id;\r\n\r\n        // Creator of the proposal\r\n        address proposer;\r\n\r\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint256 eta;\r\n\r\n        // the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n\r\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint256[] values;\r\n\r\n        // The ordered list of function signatures to be called\r\n        string[] signatures;\r\n\r\n        // The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n\r\n        // The timestamp at which voting begins: holders must delegate their votes prior to this timestamp\r\n        uint256 startTime;\r\n\r\n        // The timestamp at which voting ends: votes must be cast prior to this timestamp\r\n        uint endTime;\r\n\r\n        // Current number of votes in favor of this proposal\r\n        uint256 forVotes;\r\n\r\n        // Current number of votes in opposition to this proposal\r\n        uint256 againstVotes;\r\n\r\n        // Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n\r\n        // Flag marking whether the proposal has been executed\r\n        bool executed;\r\n\r\n        // Receipts of ballots for the entire set of voters\r\n        mapping (address => Receipt) receipts;\r\n    }\r\n\r\n    /// @notice Ballot receipt record for a voter\r\n    struct Receipt {\r\n        // Whether or not a vote has been cast\r\n        bool hasVoted;\r\n\r\n        // Whether or not the voter supports the proposal\r\n        bool support;\r\n\r\n        // The number of votes the voter had, which were cast\r\n        uint votes;\r\n    }\r\n\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(uint256 id, address proposer, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, uint startTime, uint endTime, string description);\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint256 id);\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the Timelock\r\n    event ProposalQueued(uint256 id, uint256 eta);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint256 id);\r\n\r\n    function propose(address[] memory targets, uint256[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description, uint256 endTime) external returns (uint);\r\n\r\n    function queue(uint256 proposalId) external;\r\n\r\n    function execute(uint256 proposalId) external payable;\r\n\r\n    function cancel(uint256 proposalId) external;\r\n\r\n    function castVote(uint256 proposalId, bool support) external;\r\n\r\n    function getActions(uint256 proposalId) external view returns (address[] memory targets, uint256[] memory values, string[] memory signatures, bytes[] memory calldatas);\r\n\r\n    function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory);\r\n\r\n    function state(uint proposalId) external view returns (ProposalState);\r\n\r\n    function quorumVotes() external view returns (uint256);\r\n\r\n    function proposalThreshold() external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface ITimelock {\r\n  event NewAdmin(address indexed newAdmin);\r\n  event NewPendingAdmin(address indexed newPendingAdmin);\r\n  event NewDelay(uint256 indexed newDelay);\r\n  event CancelTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event ExecuteTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event QueueTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n\r\n  function acceptAdmin() external;\r\n\r\n  function queueTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external returns (bytes32);\r\n\r\n  function cancelTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external;\r\n\r\n  function executeTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external payable returns (bytes memory);\r\n\r\n  function delay() external view returns (uint256);\r\n\r\n  function GRACE_PERIOD() external view returns (uint256);\r\n\r\n  function queuedTransactions(bytes32 hash) external view returns (bool);\r\n}\r\n\r\n// \r\ninterface IVotingEscrow {\r\n  enum LockAction { CREATE_LOCK, INCREASE_LOCK_AMOUNT, INCREASE_LOCK_TIME }\r\n\r\n  struct LockedBalance {\r\n    uint256 amount;\r\n    uint256 end;\r\n  }\r\n\r\n  /** Shared Events */\r\n  event Deposit(address indexed provider, uint256 value, uint256 locktime, LockAction indexed action, uint256 ts);\r\n  event Withdraw(address indexed provider, uint256 value, uint256 ts);\r\n  event Expired();\r\n\r\n  function createLock(uint256 _value, uint256 _unlockTime) external;\r\n\r\n  function increaseLockAmount(uint256 _value) external;\r\n\r\n  function increaseLockLength(uint256 _unlockTime) external;\r\n\r\n  function withdraw() external;\r\n\r\n  function expireContract() external;\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint256);\r\n\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  function balanceOfAt(address _owner, uint256 _blockTime) external view returns (uint256);\r\n\r\n  function stakingToken() external view returns (IERC20);\r\n}\r\n\r\n// \r\ninterface IMIMO is IERC20 {\r\n\r\n  function burn(address account, uint256 amount) external;\r\n  \r\n  function mint(address account, uint256 amount) external;\r\n\r\n}\r\n\r\n// \r\ninterface ISupplyMiner {\r\n\r\n  function baseDebtChanged(address user, uint256 newBaseDebt) external;\r\n}\r\n\r\n// \r\ninterface IDebtNotifier {\r\n\r\n  function debtChanged(uint256 _vaultId) external;\r\n\r\n  function setCollateralSupplyMiner(address collateral, ISupplyMiner supplyMiner) external;\r\n\r\n  function a() external view returns (IGovernanceAddressProvider);\r\n\r\n\tfunction collateralSupplyMinerMapping(address collateral) external view returns (ISupplyMiner);\r\n}\r\n\r\n// \r\ninterface IGovernanceAddressProvider {\r\n  function setParallelAddressProvider(IAddressProvider _parallel) external;\r\n\r\n  function setMIMO(IMIMO _mimo) external;\r\n\r\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\r\n\r\n  function setGovernorAlpha(IGovernorAlpha _governorAlpha) external;\r\n\r\n  function setTimelock(ITimelock _timelock) external;\r\n\r\n  function setVotingEscrow(IVotingEscrow _votingEscrow) external;\r\n\r\n  function controller() external view returns (IAccessController);\r\n\r\n  function parallel() external view returns (IAddressProvider);\r\n\r\n  function mimo() external view returns (IMIMO);\r\n\r\n  function debtNotifier() external view returns (IDebtNotifier);\r\n\r\n  function governorAlpha() external view returns (IGovernorAlpha);\r\n\r\n  function timelock() external view returns (ITimelock);\r\n\r\n  function votingEscrow() external view returns (IVotingEscrow);\r\n}\r\n\r\n// \r\ninterface IVaultsCore {\r\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\r\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\r\n  event Liquidated(\r\n    uint256 indexed vaultId,\r\n    uint256 debtRepaid,\r\n    uint256 collateralLiquidated,\r\n    address indexed owner,\r\n    address indexed sender\r\n  );\r\n\r\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\r\n\r\n  function deposit(address _collateralType, uint256 _amount) external;\r\n\r\n  function depositETH() external payable;\r\n\r\n  function depositByVaultId(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function depositETHByVaultId(uint256 _vaultId) external payable;\r\n\r\n  function depositAndBorrow(\r\n    address _collateralType,\r\n    uint256 _depositAmount,\r\n    uint256 _borrowAmount\r\n  ) external;\r\n\r\n  function depositETHAndBorrow(uint256 _borrowAmount) external payable;\r\n\r\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function withdrawETH(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function borrow(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function repayAll(uint256 _vaultId) external;\r\n\r\n  function repay(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function liquidate(uint256 _vaultId) external;\r\n\r\n  function liquidatePartial(uint256 _vaultId, uint256 _amount) external;\r\n\r\n  function upgrade(address payable _newVaultsCore) external;\r\n\r\n  function acceptUpgrade(address payable _oldVaultsCore) external;\r\n\r\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\r\n\r\n  //Read only\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  function WETH() external view returns (IWETH);\r\n\r\n  function debtNotifier() external view returns (IDebtNotifier);\r\n\r\n  function state() external view returns (IVaultsCoreState);\r\n\r\n  function cumulativeRates(address _collateralType) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface IAddressProviderV1 {\r\n  function setAccessController(IAccessController _controller) external;\r\n\r\n  function setConfigProvider(IConfigProviderV1 _config) external;\r\n\r\n  function setVaultsCore(IVaultsCoreV1 _core) external;\r\n\r\n  function setStableX(ISTABLEX _stablex) external;\r\n\r\n  function setRatesManager(IRatesManager _ratesManager) external;\r\n\r\n  function setPriceFeed(IPriceFeed _priceFeed) external;\r\n\r\n  function setLiquidationManager(ILiquidationManagerV1 _liquidationManager) external;\r\n\r\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\r\n\r\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\r\n\r\n  function controller() external view returns (IAccessController);\r\n\r\n  function config() external view returns (IConfigProviderV1);\r\n\r\n  function core() external view returns (IVaultsCoreV1);\r\n\r\n  function stablex() external view returns (ISTABLEX);\r\n\r\n  function ratesManager() external view returns (IRatesManager);\r\n\r\n  function priceFeed() external view returns (IPriceFeed);\r\n\r\n  function liquidationManager() external view returns (ILiquidationManagerV1);\r\n\r\n  function vaultsData() external view returns (IVaultsDataProvider);\r\n\r\n  function feeDistributor() external view returns (IFeeDistributor);\r\n}\r\n\r\n// \r\ninterface IVaultsCoreState {\r\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\r\n\r\n  function initializeRates(address _collateralType) external;\r\n\r\n  function refresh() external;\r\n\r\n  function refreshCollateral(address collateralType) external;\r\n\r\n  function syncState(IVaultsCoreState _stateAddress) external;\r\n\r\n  function syncStateFromV1(IVaultsCoreV1 _core) external;\r\n\r\n  //Read only\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  function availableIncome() external view returns (uint256);\r\n\r\n  function cumulativeRates(address _collateralType) external view returns (uint256);\r\n\r\n  function lastRefresh(address _collateralType) external view returns (uint256);\r\n\r\n  function synced() external view returns (bool);\r\n}\r\n\r\n// \r\ninterface IConfigProvider {\r\n  struct CollateralConfig {\r\n    address collateralType;\r\n    uint256 debtLimit;\r\n    uint256 liquidationRatio;\r\n    uint256 minCollateralRatio;\r\n    uint256 borrowRate;\r\n    uint256 originationFee;\r\n    uint256 liquidationBonus;\r\n    uint256 liquidationFee;\r\n  }\r\n\r\n  event CollateralUpdated(\r\n    address indexed collateralType,\r\n    uint256 debtLimit,\r\n    uint256 liquidationRatio,\r\n    uint256 minCollateralRatio,\r\n    uint256 borrowRate,\r\n    uint256 originationFee,\r\n    uint256 liquidationBonus,\r\n    uint256 liquidationFee\r\n  );\r\n  event CollateralRemoved(address indexed collateralType);\r\n\r\n  function setCollateralConfig(\r\n    address _collateralType,\r\n    uint256 _debtLimit,\r\n    uint256 _liquidationRatio,\r\n    uint256 _minCollateralRatio,\r\n    uint256 _borrowRate,\r\n    uint256 _originationFee,\r\n    uint256 _liquidationBonus,\r\n    uint256 _liquidationFee\r\n  ) external;\r\n\r\n  function removeCollateral(address _collateralType) external;\r\n\r\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\r\n\r\n  function setCollateralLiquidationRatio(address _collateralType, uint256 _liquidationRatio) external;\r\n\r\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\r\n\r\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\r\n\r\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\r\n\r\n  function setCollateralLiquidationBonus(address _collateralType, uint256 _liquidationBonus) external;\r\n\r\n  function setCollateralLiquidationFee(address _collateralType, uint256 _liquidationFee) external;\r\n\r\n  function setMinVotingPeriod(uint256 _minVotingPeriod) external;\r\n\r\n  function setMaxVotingPeriod(uint256 _maxVotingPeriod) external;\r\n\r\n  function setVotingQuorum(uint256 _votingQuorum) external;\r\n\r\n  function setProposalThreshold(uint256 _proposalThreshold) external;\r\n\r\n  function a() external view returns (IAddressProvider);\r\n\r\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\r\n\r\n  function collateralIds(address _collateralType) external view returns (uint256);\r\n\r\n  function numCollateralConfigs() external view returns (uint256);\r\n\r\n  function minVotingPeriod() external view returns (uint256);\r\n\r\n  function maxVotingPeriod() external view returns (uint256);\r\n\r\n  function votingQuorum() external view returns (uint256);\r\n\r\n  function proposalThreshold() external view returns (uint256);\r\n\r\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralLiquidationRatio(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralLiquidationBonus(address _collateralType) external view returns (uint256);\r\n\r\n  function collateralLiquidationFee(address _collateralType) external view returns (uint256);\r\n}\r\n\r\n// \r\ninterface IGenericMiner {\r\n\r\n  struct UserInfo {\r\n    uint256 stake;\r\n    uint256 accAmountPerShare; // User's accAmountPerShare\r\n  }\r\n\r\n  /// @dev This emit when a users' productivity has changed\r\n  /// It emits with the user's address and the the value after the change.\r\n  event StakeIncreased(address indexed user, uint256 stake);\r\n\r\n  /// @dev This emit when a users' productivity has changed\r\n  /// It emits with the user's address and the the value after the change.\r\n  event StakeDecreased(address indexed user, uint256 stake);\r\n\r\n\r\n  function releaseMIMO(address _user) external;\r\n\r\n  function a() external view returns (IGovernanceAddressProvider);\r\n  function stake(address _user) external view returns (uint256);\r\n  function pendingMIMO(address _user) external view returns (uint256);\r\n  \r\n  function totalStake() external view returns (uint256);\r\n  function userInfo(address _user) external view returns (UserInfo memory);\r\n}\r\n\r\n//\r\n/*\r\n    GenericMiner is based on ERC2917. https://github.com/gnufoo/ERC2917-Proposal\r\n\r\n    The Objective of GenericMiner is to implement a decentralized staking mechanism, which calculates _users' share\r\n    by accumulating stake * time. And calculates _users revenue from anytime t0 to t1 by the formula below:\r\n\r\n        user_accumulated_stake(time1) - user_accumulated_stake(time0)\r\n       _____________________________________________________________________________  * (gross_stake(t1) - gross_stake(t0))\r\n       total_accumulated_stake(time1) - total_accumulated_stake(time0)\r\n\r\n*/\r\ncontract GenericMiner is IGenericMiner {\r\n  using SafeMath for uint256;\r\n  using WadRayMath for uint256;\r\n\r\n  mapping(address => UserInfo) private _users;\r\n\r\n  uint256 public override totalStake;\r\n  IGovernanceAddressProvider public override a;\r\n\r\n  uint256 private _balanceTracker;\r\n  uint256 private _accAmountPerShare;\r\n\r\n  constructor(IGovernanceAddressProvider _addresses) public {\r\n    require(address(_addresses) != address(0));\r\n    a = _addresses;\r\n  }\r\n\r\n  /**\r\n    Releases the outstanding MIMO balance to the user.\r\n    @param _user the address of the user for which the MIMO tokens will be released.\r\n  */\r\n  function releaseMIMO(address _user) public override {\r\n    UserInfo storage userInfo = _users[_user];\r\n    _refresh();\r\n    uint256 pending = userInfo.stake.rayMul(_accAmountPerShare.sub(userInfo.accAmountPerShare));\r\n    _balanceTracker = _balanceTracker.sub(pending);\r\n    userInfo.accAmountPerShare = _accAmountPerShare;\r\n    require(a.mimo().transfer(_user, pending));\r\n  }\r\n\r\n  /**\r\n    Returns the number of tokens a user has staked.\r\n    @param _user the address of the user.\r\n    @return number of staked tokens\r\n  */\r\n  function stake(address _user) public view override returns (uint256) {\r\n    return _users[_user].stake;\r\n  }\r\n\r\n  /**\r\n    Returns the number of tokens a user can claim via `releaseMIMO`.\r\n    @param _user the address of the user.\r\n    @return number of MIMO tokens that the user can claim\r\n  */\r\n  function pendingMIMO(address _user) public view override returns (uint256) {\r\n    uint256 currentBalance = a.mimo().balanceOf(address(this));\r\n    uint256 reward = currentBalance.sub(_balanceTracker);\r\n    uint256 accAmountPerShare = _accAmountPerShare.add(reward.rayDiv(totalStake));\r\n\r\n    return _users[_user].stake.rayMul(accAmountPerShare.sub(_users[_user].accAmountPerShare));\r\n  }\r\n\r\n  /**\r\n    Returns the userInfo stored of a user.\r\n    @param _user the address of the user.\r\n    @return `struct UserInfo {\r\n      uint256 stake;\r\n      uint256 rewardDebt;\r\n    }`\r\n  **/\r\n  function userInfo(address _user) public view override returns (UserInfo memory) {\r\n    return _users[_user];\r\n  }\r\n\r\n  /**\r\n    Refreshes the global state and subsequently decreases the stake a user has.\r\n    This is an internal call and meant to be called within derivative contracts.\r\n    @param user the address of the user\r\n    @param value the amount by which the stake will be reduced\r\n  */\r\n  function _decreaseStake(address user, uint256 value) internal {\r\n    require(value > 0, \"STAKE_MUST_BE_GREATER_THAN_ZERO\"); //TODO cleanup error message\r\n\r\n    UserInfo storage userInfo = _users[user];\r\n    require(userInfo.stake >= value, \"INSUFFICIENT_STAKE_FOR_USER\"); //TODO cleanup error message\r\n    _refresh();\r\n    uint256 pending = userInfo.stake.rayMul(_accAmountPerShare.sub(userInfo.accAmountPerShare));\r\n    _balanceTracker = _balanceTracker.sub(pending);\r\n    userInfo.stake = userInfo.stake.sub(value);\r\n    userInfo.accAmountPerShare = _accAmountPerShare;\r\n    totalStake = totalStake.sub(value);\r\n\r\n    require(a.mimo().transfer(user, pending));\r\n    emit StakeDecreased(user, value);\r\n  }\r\n\r\n  /**\r\n    Refreshes the global state and subsequently increases a user's stake.\r\n    This is an internal call and meant to be called within derivative contracts.\r\n    @param user the address of the user\r\n    @param value the amount by which the stake will be increased\r\n  */\r\n  function _increaseStake(address user, uint256 value) internal {\r\n    require(value > 0, \"STAKE_MUST_BE_GREATER_THAN_ZERO\"); //TODO cleanup error message\r\n\r\n    UserInfo storage userInfo = _users[user];\r\n    _refresh();\r\n\r\n    uint256 pending;\r\n    if (userInfo.stake > 0) {\r\n      pending = userInfo.stake.rayMul(_accAmountPerShare.sub(userInfo.accAmountPerShare));\r\n      _balanceTracker = _balanceTracker.sub(pending);\r\n    }\r\n\r\n    totalStake = totalStake.add(value);\r\n    userInfo.stake = userInfo.stake.add(value);\r\n    userInfo.accAmountPerShare = _accAmountPerShare;\r\n\r\n    if (pending > 0) {\r\n      require(a.mimo().transfer(user, pending));\r\n    }\r\n\r\n    emit StakeIncreased(user, value);\r\n  }\r\n\r\n  /**\r\n    Refreshes the global state and subsequently updates a user's stake.\r\n    This is an internal call and meant to be called within derivative contracts.\r\n    @param user the address of the user\r\n    @param stake the new amount of stake for the user\r\n  */\r\n  function _updateStake(address user, uint256 stake) internal returns (bool) {\r\n    uint256 oldStake = _users[user].stake;\r\n    if (stake > oldStake) {\r\n      _increaseStake(user, stake.sub(oldStake));\r\n    }\r\n    if (stake < oldStake) {\r\n      _decreaseStake(user, oldStake.sub(stake));\r\n    }\r\n  }\r\n\r\n  /**\r\n    Internal read function to calculate the number of MIMO tokens that\r\n    have accumulated since the last token release.\r\n    @dev This is an internal call and meant to be called within derivative contracts.\r\n    @return newly accumulated token balance\r\n  */\r\n  function _newTokensReceived() internal view returns (uint256) {\r\n    return a.mimo().balanceOf(address(this)).sub(_balanceTracker);\r\n  }\r\n\r\n  /**\r\n    Updates the internal state variables after accounting for newly received MIMO tokens.\r\n  */\r\n  function _refresh() internal {\r\n    if (totalStake == 0) {\r\n      return;\r\n    }\r\n    uint256 currentBalance = a.mimo().balanceOf(address(this));\r\n    uint256 reward = currentBalance.sub(_balanceTracker);\r\n    _balanceTracker = currentBalance;\r\n\r\n    _accAmountPerShare = _accAmountPerShare.add(reward.rayDiv(totalStake));\r\n  }\r\n}\r\n\r\n// \r\ninterface IDemandMiner {\r\n\r\n  function deposit(uint256 amount) external;\r\n\r\n  function withdraw(uint256 amount) external;\r\n\r\n  function token() external view returns (IERC20);\r\n}\r\n\r\n// \r\ncontract DemandMiner is IDemandMiner, GenericMiner {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  IERC20 public override token;\r\n\r\n  constructor(IGovernanceAddressProvider _addresses, IERC20 _token) public GenericMiner(_addresses) {\r\n    require(address(_token) != address(0));\r\n    require(address(_token) != address(_addresses.mimo()));\r\n    token = _token;\r\n  }\r\n\r\n  /**\r\n    Deposit an ERC20 pool token for staking\r\n    @dev this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.\r\n    @param amount the amount of tokens to be deposited. Unit is in WEI.\r\n  **/\r\n  function deposit(uint256 amount) public override {\r\n    token.safeTransferFrom(msg.sender, address(this), amount);\r\n    _increaseStake(msg.sender, amount);\r\n  }\r\n\r\n  /**\r\n    Withdraw staked ERC20 pool tokens. Will fail if user does not have enough tokens staked.\r\n    @param amount the amount of tokens to be withdrawn. Unit is in WEI.\r\n  **/\r\n  function withdraw(uint256 amount) public override {\r\n    token.safeTransfer(msg.sender, amount);\r\n    _decreaseStake(msg.sender, amount);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IGovernanceAddressProvider\",\"name\":\"_addresses\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"StakeDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"StakeIncreased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"internalType\":\"contract IGovernanceAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingMIMO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"releaseMIMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAmountPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IGenericMiner.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DemandMiner", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000718b7584d410f364fc16724027c07c617b87f2fc0000000000000000000000003cfaa1596777cad9f5004f9a0c443d912e262243", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8af821aba46a626a81fddaec907471e38ff854359d34b89bad4c5e7d2737c26f"}]}