{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract N2BridgeETH {\r\n\r\n  uint chainId;\r\n  address public admin;\r\n  IERC20 public token;\r\n  \r\n  mapping(address => mapping(uint => bool)) public processedNonces;\r\n  mapping(address => uint) public nonces;\r\n\r\n  enum Step { Deposit, Withdraw }\r\n  event Transfer(\r\n    address from,\r\n    address to,\r\n    uint destChainId,\r\n    uint amount,\r\n    uint date,\r\n    uint nonce,\r\n    bytes32 signature,\r\n    Step indexed step\r\n  );\r\n\r\n  constructor() {\r\n    admin = msg.sender;\r\n    uint _chainId;\r\n    assembly {\r\n        _chainId := chainid()\r\n    }\r\n    chainId = _chainId;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(admin == msg.sender, \"Only Admin can perform this operation.\");\r\n    _;\r\n  }\r\n\r\n  function setToken(address _token) external onlyAdmin {\r\n    token = IERC20(_token);\r\n    token.approve(address(this), type(uint).max);\r\n  }\r\n\r\n  function deposit(uint amount)  public onlyAdmin {\r\n    require(token.balanceOf(admin) >= amount, \"not sufficient fund\");\r\n\r\n    // deposit from the admin to the bridge\r\n    token.transferFrom(admin, address(this), amount);\r\n  }\r\n\r\n  function deposit(address to, uint destChainId, uint amount, uint nonce)  public {\r\n    require(nonces[msg.sender] == nonce, 'transfer already processed');\r\n    nonces[msg.sender] += 1;\r\n\r\n    // send tokens via the owner\r\n    token.transferFrom(msg.sender, admin, amount);\r\n\r\n    bytes32 signature = keccak256(abi.encodePacked(msg.sender, to, chainId, destChainId, amount, nonce));\r\n    \r\n    emit Transfer(\r\n      msg.sender,\r\n      to,\r\n      destChainId,\r\n      amount,\r\n      block.timestamp,\r\n      nonce,\r\n      signature,\r\n      Step.Deposit\r\n    );\r\n  }\r\n\r\n  function withdraw(\r\n    address from, \r\n    address to, \r\n    uint srcChainId,\r\n    uint amount, \r\n    uint nonce,\r\n    bytes32 signature\r\n  )  public {\r\n    bytes32 _signature = keccak256(abi.encodePacked(\r\n      from, \r\n      to, \r\n      srcChainId,\r\n      chainId,\r\n      amount,\r\n      nonce\r\n    ));\r\n    require(_signature == signature , 'wrong signature');\r\n    require(processedNonces[from][nonce] == false, 'transfer already processed');\r\n    processedNonces[from][nonce] = true;\r\n    \r\n    // send tokens via the owner\r\n    token.transferFrom(admin, to, amount);\r\n\r\n    emit Transfer(\r\n      from,\r\n      to,\r\n      chainId,\r\n      amount,\r\n      block.timestamp,\r\n      nonce,\r\n      signature,\r\n      Step.Withdraw\r\n    );\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"enum N2BridgeETH.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "N2BridgeETH", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d701f26a290ddf20f54bb52458d68a469cc7c881a7a3996ee3c15cd1d4be0c2"}]}