{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ninterface IMinionFactory {\r\n    function summonMinionAndSafe(\r\n        address,\r\n        string memory,\r\n        uint256,\r\n        uint256\r\n    ) external returns (address);\r\n}\r\n\r\ninterface IMolochFactory {\r\n    function summonMoloch(\r\n        address,\r\n        address,\r\n        address[] memory,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ) external returns (address);\r\n}\r\n\r\ninterface IMOLOCH {\r\n    // brief interface for moloch dao v2\r\n\r\n    function depositToken() external view returns (address);\r\n\r\n    function tokenWhitelist(address token) external view returns (bool);\r\n\r\n    function totalShares() external view returns (uint256);\r\n\r\n    function getProposalFlags(uint256 proposalId)\r\n        external\r\n        view\r\n        returns (bool[6] memory);\r\n\r\n    function getUserTokenBalance(address user, address token)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function members(address user)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function memberAddressByDelegateKey(address user)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function userTokenBalances(address user, address token)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function cancelProposal(uint256 proposalId) external;\r\n\r\n    function submitProposal(\r\n        address applicant,\r\n        uint256 sharesRequested,\r\n        uint256 lootRequested,\r\n        uint256 tributeOffered,\r\n        address tributeToken,\r\n        uint256 paymentRequested,\r\n        address paymentToken,\r\n        string calldata details\r\n    ) external returns (uint256);\r\n\r\n    function withdrawBalance(address token, uint256 amount) external;\r\n\r\n    struct Proposal {\r\n        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as guild kick target for gkick proposals)\r\n        address proposer; // the account that submitted the proposal (can be non-member)\r\n        address sponsor; // the member that sponsored the proposal (moving it into the queue)\r\n        uint256 sharesRequested; // the # of shares the applicant is requesting\r\n        uint256 lootRequested; // the amount of loot the applicant is requesting\r\n        uint256 tributeOffered; // amount of tokens offered as tribute\r\n        address tributeToken; // tribute token contract reference\r\n        uint256 paymentRequested; // amount of tokens requested as payment\r\n        address paymentToken; // payment token contract reference\r\n        uint256 startingPeriod; // the period in which voting can start for this proposal\r\n        uint256 yesVotes; // the total number of YES votes for this proposal\r\n        uint256 noVotes; // the total number of NO votes for this proposal\r\n        bool[6] flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick]\r\n        string details; // proposal details - could be IPFS hash, plaintext, or JSON\r\n        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal\r\n    }\r\n\r\n    function proposals(uint256 proposalId)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function setSharesLoot(\r\n        address[] calldata,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bool mint\r\n    ) external;\r\n\r\n    function setSingleSharesLoot(\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bool\r\n    ) external;\r\n\r\n    function setShaman(address, bool) external;\r\n}\r\n\r\ninterface IMINION {\r\n    function avatar() external view returns (address);\r\n}\r\n\r\n/// @title SafeMinionSummoner - Factory contract to depoy new DAO Minions and Safes\r\n/// @dev Can deploy a minion and a new safe, or just a minion to be attached to an existing safe\r\n/// @author Dekan Brown\r\ncontract DaoSafeMinionSummoner {\r\n    IMinionFactory public minionSummoner;\r\n    IMolochFactory public daoSummoner;\r\n\r\n    struct DSM {\r\n        address summoner;\r\n        address moloch;\r\n        address minion;\r\n        address avatar;\r\n        bool initialized;\r\n    }\r\n\r\n    mapping(uint256 => DSM) public daos;\r\n    uint256 public daoIdx = 0;\r\n\r\n    event SummonComplete(\r\n        address summoner,\r\n        address indexed moloch,\r\n        address minion,\r\n        address avatar,\r\n        string details\r\n    );\r\n\r\n    event SetupComplete(\r\n        address indexed moloch,\r\n        address shaman,\r\n        address[] extraShamans,\r\n        address[] summoners,\r\n        uint256[] summonerShares,\r\n        uint256[] summonerLoot\r\n    );\r\n\r\n    constructor(address _minionSummoner, address _daoSummoner) {\r\n        minionSummoner = IMinionFactory(_minionSummoner);\r\n        daoSummoner = IMolochFactory(_daoSummoner);\r\n    }\r\n\r\n    /// @dev Function to summon minion and configure with a new safe and a dao\r\n    function summonDaoMinionAndSafe(\r\n        // address _summoner,\r\n        uint256 _saltNonce,\r\n        uint256 _periodDuration,\r\n        uint256 _votingPeriodLength,\r\n        uint256 _gracePeriodLength,\r\n        address[] calldata _approvedTokens, // TODO: should this just be the native wrapper\r\n        string calldata details\r\n    ) external returns (address _moloch, address _minion) {\r\n        // Deploy new minion but do not set it up yet\r\n\r\n        _moloch = daoSummoner.summonMoloch(\r\n            msg.sender, // summoner TODO: do we still need this\r\n            address(this), // _shaman,\r\n            _approvedTokens,\r\n            _periodDuration,\r\n            _votingPeriodLength,\r\n            _gracePeriodLength,\r\n            0, // deposit\r\n            3, // dillution bound\r\n            0 // reward\r\n        );\r\n\r\n        _minion = minionSummoner.summonMinionAndSafe(\r\n            _moloch,\r\n            details,\r\n            0,\r\n            _saltNonce\r\n        );\r\n\r\n        IMINION minionContract = IMINION(_minion);\r\n\r\n        daoIdx = daoIdx + 1;\r\n        daos[daoIdx] = DSM(\r\n            msg.sender,\r\n            _moloch,\r\n            _minion,\r\n            minionContract.avatar(),\r\n            false\r\n        );\r\n\r\n        emit SummonComplete(\r\n            msg.sender,\r\n            _moloch,\r\n            _minion,\r\n            minionContract.avatar(),\r\n            details\r\n        );\r\n    }\r\n\r\n    function setUpDaoMinionAndSafe(\r\n        uint256 id,\r\n        address[] memory _summoners,\r\n        uint256[] memory _summonerShares,\r\n        uint256[] memory _summonerLoot,\r\n        address[] memory _shamans \r\n    ) public {\r\n        DSM memory dsm = daos[id];\r\n        require(dsm.summoner == msg.sender, \"!summoner\");\r\n        require(!dsm.initialized, \"already initialized\");\r\n\r\n        IMOLOCH molochContract = IMOLOCH(dsm.moloch);\r\n        daos[id].initialized = true;\r\n\r\n        // summoner gets atleast 1 share\r\n        molochContract.setSingleSharesLoot(\r\n            dsm.summoner,\r\n            1,\r\n            0,\r\n            true\r\n        );\r\n        molochContract.setSharesLoot(\r\n            _summoners,\r\n            _summonerShares,\r\n            _summonerLoot,\r\n            true\r\n        );\r\n        \r\n        molochContract.setShaman(dsm.minion, true);\r\n        for (uint256 i = 0; i < _shamans.length; i++) {\r\n            molochContract.setShaman(_shamans[i], true);\r\n        }\r\n        molochContract.setShaman(address(this), false);\r\n        emit SetupComplete(\r\n            dsm.moloch,\r\n            dsm.minion,\r\n            _shamans,\r\n            _summoners,\r\n            _summonerShares,\r\n            _summonerLoot\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minionSummoner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoSummoner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"moloch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shaman\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"extraShamans\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"summoners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"summonerShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"summonerLoot\",\"type\":\"uint256[]\"}],\"name\":\"SetupComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"summoner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"moloch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minion\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"avatar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"SummonComplete\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"daoIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoSummoner\",\"outputs\":[{\"internalType\":\"contract IMolochFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"summoner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avatar\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minionSummoner\",\"outputs\":[{\"internalType\":\"contract IMinionFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_summoners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_summonerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_summonerLoot\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_shamans\",\"type\":\"address[]\"}],\"name\":\"setUpDaoMinionAndSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saltNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriodLength\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_approvedTokens\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"summonDaoMinionAndSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minion\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DaoSafeMinionSummoner", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc37509a283e2bb67fd151c34e72e826c501e108000000000000000000000000f5add874c8c79b7fa8a86291549a4add50553e52", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://356801fce482ed2d18ebc6ae342682ed62924da230558beb4b65e67524950df0"}]}