{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/beasts/GateToTheSeventhRealmMinter.sol\": {\r\n      \"content\": \"// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@( (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(  @@%@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@%%%%@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(  @@&%%%%%%%&@( (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@%%%%%   %%%%@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@( (@@@@@@@@@@@@@@@@@(  (@%%%* *%%%%%* *%%@@(. @@@@@@@@@@@@@@@@@@( (@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@   @@%%%  %%%     %%%  %%@@   @@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@(          (@@@@@@@@(  (&%%%%%* *%%%***%%%* *%%%&@@( (@@@@@@@@@(          (@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@%%%%%%%%%%         %%%%%%%%%@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@                @@   (@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@ .(@@@                @@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@,           ,  ,@                                ,,           @                @@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@    ..          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@..              @@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@  *   *              *   *                  *    *   *              *   *    *             *   @@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@%                                                                                         @@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@%  @@@@@@@@ @@@@@@@@@ @@@@@@@@ @@@@@@@@@%@@@@@@@@ @@@@@@@@ %@@@@@@@@ @@@@@@@@ %@@@@@@@@%  @@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     @@(((((@ @@(((((@@ @@((((@@ @@(((((@@%@@((((@@ @@(((((@ %@#((((@@ @@((((@@ %@(((((@@%     @@@@@@@@@@@@\\n// @@@@@@@@@@@@@   . @@(@@@(@ @@(@@@(@@ @@@@@@@@ @@(@@@(@@%@@@@@(@@ @@(@@@(@ %@(@@@(@@ @@@@@@@@ %@(@@@(@@%/   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@*  ( @  */  @ @@ */.  @ @ **.  @ @@ */  @@%@ **.  @ @  */  @ %@ */.  @ @ **.  @ %@ */  @@%.   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     @  @&    @   &&  @    @&    @  @&   @%   @&  @ @  @&    %   &&  @    @&    %  @&   @%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@ **. @@((((#@*@@((((#@@*@@((((@@*@@((((#@@%@@(((#@@*@@((((#@*%@((((#@@*@@((((@@*%@((((#@@%#  *@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     @@@@@@@@ @@@@@@@@@ @@@@@@@@ @@@@@@@@@%@@@@@@@@ @@@@@@@@ %@@@@@@@@ @@@@@@@@ %@@@@@@@@%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@ . . &&&&&&&&*&&&&&&&&&*********/************///****//***((/*******/**%&&&&&&&&*%&&&&&&&&%*  *@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   / @@@@@@@@ @@@@@@@@@   %%%%%%%%%.   ,   %           ,   %%%%%%%%   %@@@@@@@@ %@@@@@@@@%,   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     @@ (@(.@ @@ #@@.@@ . %%%%%%.   .     .((((((((((       . %%%%%   %@@(@@(@@ %@ @@(.@@%.   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     @   (  @ @@ *(   @   %%%%       .@@@@@@@@@@@@@@@@@@      ,.%%%   %@ *    @ %@  (  @@%%  %@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@*  * @  ((   .@   (/  @.  %#      (@@@@@@@@@@@@@@@@@@@@@@@((    ,.%   %   (/   .%  ((   @%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   , @@ **  @*@@  ** @@*    ,    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@   .    %@@ ** @@*%@ **  @@%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@ . , @@@@@@@@*@@@@@@@@@*     / (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .      %@@@@@@@@*%@@@@@@@@%* ..@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     %%%%%%%%%%%%%%%%%%%    % .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %%%%%%%%%%%%%%%%%%%%     @@@@@@@@@@@@\\n// @@@@@@@@@@@@@**** @@@@@@@@ @@@@@@@@@ ****%  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  *****%@@@@@@@@ %@@@@@@@@%*****@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   / @@*   (@ @@     @@ ,   %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   %   %@@    @@ %@*   (@@%%  %@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   . @(/(%(/@ @@/(%(/#@     %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@(((((#@ %@/(%(/@@%.   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@%  % @   (  @ @@ *(   @ %   %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@ *    @ %@  (  @@%,   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     @  @&  (.@(  &&  @.    %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   *   %(  @&  (.%( @&  (@%*  *@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@ %%  @@@@@@@@*@@@@@@@@@*  % %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@@@@@@@@*%@@@@@@@@%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   , &&&&&&&&*&&&&&&&&&*    %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   **  %&&@@@&&&*%&&&&&&&&%(  *@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   , @@@@@@@@ @@@@@@@@@     %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@@@@@@@@ %@@@@@@@@%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@*  * @@@@@@@@ @@@@@@@@@ ** (%  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@@((((@@ %@@(((@@@%.   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   , @@ @@@*@ @@ @@@*@@     %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   %   %@@@@@@@@ %@ @@@*@@%%  %@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@ **. @  **  @ @@ **,  @   * %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@ **,  @ %@ **  @@%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   . @  @@    @   @&  @     %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    %  %   @&    %  @@   @%,   @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@   . @@(##((@*@@((##(@@*    %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  *   *%@@(##(@@*%@(##((@@%    @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@     @@@@@@@@*@@@@@@@@@* % %%  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@@@@@@@@*%@@@@@@@@% ,  @@@@@@@@@@@@@\\n// @@@@@@@@@@@@@,..( %%%%%%%%%%%%%%%%%%%    %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        %%%%%%%%%%%%%%%%%%%,  .@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@...( ..................   . %  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              ....  , .....(...@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//\\n// Forgotten Runes Gate to The Seventh Realm\\n// https://forgottenrunes.com\\n// Twitter: @forgottenrunes\\npragma solidity ^0.8.0;\\n\\nimport '../util/Ownablearama.sol';\\nimport '../interfaces/IBookOfLore.sol';\\nimport './interfaces/IBeastsAuctionHouse.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\ninterface IMintable {\\n    function mint(address recipient, uint256 tokenId) external;\\n}\\n\\ncontract GateToTheSeventhRealmMinter is Ownablearama, ReentrancyGuard, EIP712 {\\n    /// @notice The start block for minting\\n    uint256 public startBlock =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice The Merkle root for keyholders\\n    bytes32 public keysMerkleRoot;\\n\\n    /// @notice The Merkle root for spellholders\\n    bytes32 public spellsMerkleRoot;\\n\\n    /// @notice The number of locks on this gate\\n    uint256 public constant NUM_LOCKS = 21;\\n\\n    /// @notice The number of locks unlocked\\n    uint256 public numUnlocked = 0;\\n\\n    /// @notice The address to the Book of Lore\\n    address public bookOfLoreAddress;\\n\\n    /// @notice The address of the Wizards contract\\n    address public wizardsAddress;\\n\\n    /// @notice The address of the Souls contract\\n    address public soulsAddress;\\n\\n    /// @notice The address to the Gate of the Seventh Realm token contract\\n    address public gateOfTheSeventhRealmAddress;\\n\\n    /// @notice The address to the Beasts Auction House token contract\\n    address public auctionHouseAddress;\\n\\n    /// @notice The EIP-712 typehash for the unlock struct used by the contract\\n    bytes32 public constant UNLOCK_TYPEHASH =\\n        keccak256('Unlock(address ownerA,uint256 wizardIdA,address ownerB)');\\n\\n    /// @notice A mapping of the addresses of those who participated in the unlock ceremony\\n    mapping(address => bool) public unlockers;\\n\\n    /// @notice A mapping of wizard (or soul) IDs who participated in the unlock ceremony\\n    mapping(uint256 => bool) public unlockerWizards;\\n\\n    /// @notice The Unlock event is emitted when a lock is unlocked\\n    event Unlocked(\\n        address wizA,\\n        uint256 tokenIdA,\\n        address wizB,\\n        uint256 tokenIdB,\\n        uint256 lockIdx\\n    );\\n\\n    /**\\n     * @dev Create the contract and set initial configuration\\n     * @param _bookOfLoreAddress address to the Book of Lore\\n     * @param _wizardsAddress address to the Wizards token\\n     * @param _soulsAddress address to the Souls token\\n     */\\n    constructor(\\n        address _bookOfLoreAddress,\\n        address _wizardsAddress,\\n        address _soulsAddress\\n    ) EIP712('GateToTheSeventhRealmMinter', '1') {\\n        setBookOfLoreAddress(_bookOfLoreAddress);\\n        setWizardsAddress(_wizardsAddress);\\n        setSoulsAddress(_soulsAddress);\\n    }\\n\\n    /**\\n     * @dev Convenient way to initialize the post-constructor configuration\\n     */\\n    function initialize(\\n        uint256 newStartBlock,\\n        bytes32 newKeysMerkleRoot,\\n        bytes32 newSpellsMerkleRoot,\\n        address newGateOfTheSeventhRealmAddress,\\n        address newAuctionHouseAddress\\n    ) public onlyOwner {\\n        setStartBlock(newStartBlock);\\n        setKeysMerkleRoot(newKeysMerkleRoot);\\n        setSpellsMerkleRoot(newSpellsMerkleRoot);\\n        setGateOfTheSeventhRealmAddress(newGateOfTheSeventhRealmAddress);\\n        setAuctionHouseAddress(newAuctionHouseAddress);\\n    }\\n\\n    /**\\n     * @notice Returns if the minting has started\\n     * @return bool if the minting has started\\n     */\\n    function started() public view returns (bool) {\\n        return block.number >= startBlock;\\n    }\\n\\n    /**\\n     * @notice Unlock a lock from the gate\\n     * @dev Unlocking the gate is a collaboration between two wizards: one with a key and one with a spell. ownerA signs a message and gives that signature to ownerB. ownerB must be the msg.sender. The frontend needs to submit proper proofs matching wizard A and B with a key or spell - this means the frontend needs to know a mapping of wizard (or soul) ids to keys and spells.\\n     * @param ownerA address the partner's address and signer of `signatureA`\\n     * @param wizIdA uint256 the ID of the partner's wizard\\n     * @param wizIdB uint256 the ID of the sender's wizard\\n     * @param wizAMerkleProof bytes32 the proof that wizIdA holds a key or a spell\\n     * @param wizBMerkleProof bytes32 the proof that wizIdB holds a key or a spell\\n     * @param signatureA bytes the signature from the partner\\n     */\\n    function unlock(\\n        address ownerA,\\n        uint256 wizIdA,\\n        uint256 wizIdB,\\n        bytes32[] calldata wizAMerkleProof,\\n        bytes32[] calldata wizBMerkleProof,\\n        bytes memory signatureA\\n    ) public nonReentrant {\\n        require(started(), 'Not started');\\n        require(numUnlocked < NUM_LOCKS, 'Already unlocked');\\n        require(_ownsWizardOrSoul(ownerA, wizIdA), 'Invalid Wiz A Owner');\\n        require(_ownsWizardOrSoul(msg.sender, wizIdB), 'Invalid Wiz B Owner');\\n        require(!unlockers[ownerA], 'Partner already unlocked');\\n        require(!unlockers[msg.sender], 'You already unlocked');\\n        require(!unlockerWizards[wizIdA], 'Wizard A already unlocked');\\n        require(!unlockerWizards[wizIdB], 'Wizard B already unlocked');\\n\\n        require(\\n            (_wizardHoldsKey(wizIdA, wizAMerkleProof) &&\\n                _wizardHoldsSpell(wizIdB, wizBMerkleProof)) ||\\n                (_wizardHoldsKey(wizIdB, wizBMerkleProof) &&\\n                    _wizardHoldsSpell(wizIdA, wizAMerkleProof)),\\n            'Wizard pairing failed'\\n        );\\n\\n        // construct an expected hash, given the parameters\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(abi.encode(UNLOCK_TYPEHASH, ownerA, wizIdA, msg.sender))\\n        );\\n\\n        // now recover the signer from the provided signature\\n        address signer = ECDSA.recover(digest, signatureA);\\n\\n        // make sure the recover extracted a signer, but beware, because this\\n        // can return non-zero for some invalid cases (apparently?)\\n        require(signer != address(0), 'ECDSA: invalid signature');\\n        require(signer == ownerA, 'unlock: signature is not the partner owner');\\n        require(ownerA != msg.sender, 'nice try');\\n\\n        unlockers[msg.sender] = true;\\n        unlockers[ownerA] = true;\\n        unlockerWizards[wizIdA] = true;\\n        unlockerWizards[wizIdB] = true;\\n\\n        IMintable(gateOfTheSeventhRealmAddress).mint(\\n            msg.sender,\\n            numUnlocked * 2\\n        );\\n        IMintable(gateOfTheSeventhRealmAddress).mint(\\n            ownerA,\\n            (numUnlocked * 2) + 1\\n        );\\n\\n        // write the Lore\\n        if (bookOfLoreAddress != address(0)) {\\n            IBookOfLore(bookOfLoreAddress).addLoreWithScribe(\\n                _loreContractAddress(wizIdB),\\n                wizIdB,\\n                0,\\n                false,\\n                ''\\n            );\\n        }\\n\\n        emit Unlocked(ownerA, wizIdA, msg.sender, wizIdB, numUnlocked);\\n\\n        numUnlocked += 1;\\n\\n        if (numUnlocked == NUM_LOCKS) {\\n            IBeastsAuctionHouse(auctionHouseAddress).openTheGate();\\n        }\\n    }\\n\\n    function _wizardHoldsSpell(uint256 wizId, bytes32[] calldata _merkleProof)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return\\n            MerkleProof.verify(\\n                _merkleProof,\\n                spellsMerkleRoot,\\n                keccak256(abi.encodePacked(wizId))\\n            );\\n    }\\n\\n    function _wizardHoldsKey(uint256 wizId, bytes32[] calldata _merkleProof)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return\\n            MerkleProof.verify(\\n                _merkleProof,\\n                keysMerkleRoot,\\n                keccak256(abi.encodePacked(wizId))\\n            );\\n    }\\n\\n    function _loreContractAddress(uint256 wizId)\\n        private\\n        view\\n        returns (address)\\n    {\\n        try IERC721(wizardsAddress).ownerOf(wizId) returns (address) {\\n            return wizardsAddress;\\n        } catch Error(string memory) {\\n            // try a soul\\n        }\\n\\n        try IERC721(soulsAddress).ownerOf(wizId) returns (address) {\\n            return soulsAddress;\\n        } catch Error(string memory) {\\n            // not soul either\\n        }\\n\\n        return wizardsAddress;\\n    }\\n\\n    function _ownsWizardOrSoul(address owner, uint256 wizId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        require(owner != address(0), 'invalid owner');\\n\\n        try IERC721(wizardsAddress).ownerOf(wizId) returns (\\n            address wizardOwner\\n        ) {\\n            if (wizardOwner == owner) {\\n                return true;\\n            }\\n        } catch Error(string memory) {\\n            // try a soul\\n        }\\n\\n        try IERC721(soulsAddress).ownerOf(wizId) returns (address soulOwner) {\\n            if (soulOwner == owner) {\\n                return true;\\n            }\\n        } catch Error(string memory) {\\n            // not soul either\\n        }\\n\\n        return false;\\n    }\\n\\n    function domainSeparator() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * Owner Controls\\n     */\\n\\n    /**\\n     * @dev Set the start block\\n     * @param newStartBlock uint256 the block to start at\\n     */\\n    function setStartBlock(uint256 newStartBlock) public onlyOwner {\\n        startBlock = newStartBlock;\\n    }\\n\\n    /**\\n     * @dev Set the merkle root for key-holder IDs\\n     * @param newMerkleRoot bytes32 the merkle root\\n     */\\n    function setKeysMerkleRoot(bytes32 newMerkleRoot) public onlyOwner {\\n        keysMerkleRoot = newMerkleRoot;\\n    }\\n\\n    /**\\n     * @dev Set the merkle root for spell-holder IDs\\n     * @param newMerkleRoot bytes32 the merkle root\\n     */\\n    function setSpellsMerkleRoot(bytes32 newMerkleRoot) public onlyOwner {\\n        spellsMerkleRoot = newMerkleRoot;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Gate of the Seventh Realm\\n     * @param newGateOfTheSeventhRealmAddress address the address to the contract\\n     */\\n    function setGateOfTheSeventhRealmAddress(\\n        address newGateOfTheSeventhRealmAddress\\n    ) public onlyOwner {\\n        gateOfTheSeventhRealmAddress = newGateOfTheSeventhRealmAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Auction House\\n     * @param newAuctionHouseAddress address the address to the contract\\n     */\\n    function setAuctionHouseAddress(address newAuctionHouseAddress)\\n        public\\n        onlyOwner\\n    {\\n        auctionHouseAddress = newAuctionHouseAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Book of Lore contract\\n     * @param newBookOfLoreAddress address the address to the contract\\n     */\\n    function setBookOfLoreAddress(address newBookOfLoreAddress)\\n        public\\n        onlyOwner\\n    {\\n        bookOfLoreAddress = newBookOfLoreAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Forgotten Runes Wizards Cult tokens\\n     * @param newWizardsAddress address the address to the contract\\n     */\\n    function setWizardsAddress(address newWizardsAddress) public onlyOwner {\\n        wizardsAddress = newWizardsAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of Forgotten Souls contract\\n     * @param newSoulsAddress address the address to the contract\\n     */\\n    function setSoulsAddress(address newSoulsAddress) public onlyOwner {\\n        soulsAddress = newSoulsAddress;\\n    }\\n\\n    /**\\n     * @dev Recover ERC721's accidentally sent to this contract\\n     * @param token IERC721 the address of the token\\n     * @param to address where to send the token\\n     * @param tokenId uint256 the token ID\\n     */\\n    function transferFrom(\\n        IERC721 token,\\n        address to,\\n        uint256 tokenId\\n    ) public onlyOwner {\\n        token.transferFrom(address(this), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Set approval for an operator to manage our ERC721s, again, for emergencies\\n     * @param token IERC721 the address of the token\\n     * @param operator address the operator's address\\n     * @param approved bool operator approval\\n     */\\n    function setApprovalForAll(\\n        IERC721 token,\\n        address operator,\\n        bool approved\\n    ) public onlyOwner {\\n        token.setApprovalForAll(operator, approved);\\n    }\\n\\n    function __remove(address unlocker, uint256 tokenId) public onlyOwner {\\n        delete unlockers[unlocker];\\n        delete unlockerWizards[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/util/Ownablearama.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @dev This implements Ownable plus a few utilities\\n */\\ncontract Ownablearama is Ownable {\\n    /**\\n     * @dev ETH should not be sent to this contract, but in the case that it is\\n     * sent by accident, this function allows the owner to withdraw it.\\n     */\\n    function withdrawAll() public payable onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n\\n    /**\\n     * @dev Again, ERC20s should not be sent to this contract, but if someone\\n     * does, it's nice to be able to recover them\\n     * @param token IERC20 the token address\\n     * @param amount uint256 the amount to send\\n     */\\n    function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {\\n        require(address(msg.sender) != address(0));\\n        token.transfer(msg.sender, amount);\\n    }\\n\\n    // disable renouncing ownership\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBookOfLore.sol\": {\r\n      \"content\": \"interface IBookOfLore {\\n    function addLoreWithScribe(\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 parentLoreId,\\n        bool nsfw,\\n        string memory loreMetadataURI\\n    ) external;\\n\\n    function addLore(\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 parentLoreId,\\n        bool nsfw,\\n        string memory loreMetadataURI\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/beasts/interfaces/IBeastsAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Beasts Auction Houses\\n\\npragma solidity ^0.8.6;\\n\\ninterface IBeastsAuctionHouse {\\n    struct Auction {\\n        // ID for the Beast (ERC721 token ID)\\n        uint256 beastId;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The time that the auction started\\n        uint256 startTime;\\n        // The time that the auction is scheduled to end\\n        uint256 endTime;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // Whether or not the auction has been settled\\n        bool settled;\\n    }\\n\\n    event AuctionCreated(\\n        uint256 indexed beastId,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n\\n    event AuctionBid(\\n        uint256 indexed beastId,\\n        address sender,\\n        uint256 value,\\n        bool extended\\n    );\\n\\n    event AuctionExtended(uint256 indexed beastId, uint256 endTime);\\n\\n    event AuctionSettled(\\n        uint256 indexed beastId,\\n        address winner,\\n        uint256 amount\\n    );\\n\\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\\n\\n    event AuctionReservePriceUpdated(uint256 reservePrice);\\n\\n    event AuctionMinBidIncrementPercentageUpdated(\\n        uint256 minBidIncrementPercentage\\n    );\\n\\n    function settleAuction() external;\\n\\n    function settleCurrentAndCreateNewAuction() external;\\n\\n    function createBid(uint256 beastId) external payable;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function openTheGate() external;\\n\\n    function setTimeBuffer(uint256 timeBuffer) external;\\n\\n    function setReservePrice(uint256 reservePrice) external;\\n\\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage)\\n        external;\\n\\n    function setTreasury(address newTreasury) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bookOfLoreAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wizardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_soulsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wizA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIdA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wizB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIdB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIdx\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_LOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"__remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionHouseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookOfLoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forwardERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateOfTheSeventhRealmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"newKeysMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newSpellsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newGateOfTheSeventhRealmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuctionHouseAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keysMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuctionHouseAddress\",\"type\":\"address\"}],\"name\":\"setAuctionHouseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBookOfLoreAddress\",\"type\":\"address\"}],\"name\":\"setBookOfLoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGateOfTheSeventhRealmAddress\",\"type\":\"address\"}],\"name\":\"setGateOfTheSeventhRealmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setKeysMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSoulsAddress\",\"type\":\"address\"}],\"name\":\"setSoulsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setSpellsMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWizardsAddress\",\"type\":\"address\"}],\"name\":\"setWizardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spellsMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wizIdA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wizIdB\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"wizAMerkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"wizBMerkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"signatureA\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockerWizards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wizardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GateToTheSeventhRealmMinter", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004218948d1da133cf4b0758639a8c065dbdccb2bb000000000000000000000000521f9c7505005cfa19a8e5786a9c3c9c9f5e6f42000000000000000000000000251b5f14a825c537ff788604ea1b58e49b70726f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}