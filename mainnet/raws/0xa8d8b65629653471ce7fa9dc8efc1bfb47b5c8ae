{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IVault {\r\n    function sendToDevWallet() external payable;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n    address _depositorOne;\r\n    address _depositorTwo;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IERC20 BASE = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => uint256) public totalRewardsDistributed;\r\n    mapping (address => mapping (address => uint256)) public totalRewardsToUser;\r\n\r\n    mapping (address => mapping (address => bool)) public canClaimDividendOfUser;\r\n\r\n    mapping (address => bool) public availableRewards;\r\n    mapping (address => address) public pathRewards;\r\n\r\n    mapping (address => bool) public allowed;\r\n    mapping (address => address) public choice;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    address public DEFAULT = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT (Default)\r\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token || msg.sender == _depositorOne || msg.sender == _depositorTwo);\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        address _router,\r\n        address _owner\r\n    ) Auth(_owner) {\r\n        router = _router != address(0) ? IDEXRouter(_router) : IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _token = msg.sender;\r\n        _depositorOne = 0x7f62FFC4730887561320D5bc5fd8651F739C207e;\r\n        _depositorTwo = 0x7f62FFC4730887561320D5bc5fd8651F739C207e;\r\n        allowed[DEFAULT] = true;\r\n        allowed[USDC] = true;\r\n        allowed[DAI] = true;\r\n        IERC20(BASE).approve(_router, 2**256 - 1);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function getTotalRewards(address token) public view returns (uint256) {\r\n        return totalRewardsDistributed[token];\r\n    }\r\n\r\n    function getTotalRewardsToUser(address token, address user) public view returns (uint256) {\r\n        return totalRewardsToUser[token][user];\r\n    }\r\n\r\n    function checkCanClaimDividendOfUser(address user, address claimer) public view returns (bool) {\r\n        return canClaimDividendOfUser[user][claimer];\r\n    }\r\n\r\n    function setReward(\r\n        address _reward,\r\n        bool status\r\n    ) public onlyOwner {\r\n        availableRewards[_reward] = status;\r\n    }\r\n\r\n    function setPathReward(\r\n        address _reward,\r\n        address _path\r\n    ) public onlyOwner {\r\n        pathRewards[_reward] = _path;\r\n    }\r\n\r\n    function getPathReward(\r\n        address _reward\r\n    ) public view returns (address) {\r\n        return pathRewards[_reward];\r\n    }\r\n\r\n    function changeRouterVersion(\r\n        address _router\r\n    ) external onlyOwner {\r\n        IDEXRouter _uniswapV2Router = IDEXRouter(_router);\r\n        router = _uniswapV2Router;\r\n    }\r\n\r\n    function setShare(\r\n        address shareholder,\r\n        uint256 amount\r\n    ) external override onlyToken {\r\n        if (shares[shareholder].amount > 0) {\r\n            if (allowed[choice[shareholder]]) {\r\n                distributeDividend(shareholder, choice[shareholder]);\r\n            } else {\r\n                distributeDividend(shareholder, DEFAULT);\r\n            }\r\n        }\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 amount = msg.value;\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function depositOwner() external payable onlyOwner {\r\n        if (msg.value > 0) {\r\n            uint256 amount = msg.value;\r\n            totalDividends = totalDividends.add(amount);\r\n            dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n        }\r\n    }\r\n\r\n    function distributeDividend(\r\n        address shareholder,\r\n        address rewardAddress\r\n    ) internal {\r\n        require(allowed[rewardAddress], \"Invalid reward address!\");\r\n        if (shares[shareholder].amount == 0) return;\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            if (rewardAddress == address(BASE)) {\r\n                payable(shareholder).transfer(amount);\r\n                totalRewardsDistributed[rewardAddress] = totalRewardsDistributed[rewardAddress].add(amount);  \r\n                totalRewardsToUser[rewardAddress][shareholder] = totalRewardsToUser[rewardAddress][shareholder].add(amount);\r\n            } else {\r\n                IERC20 rewardToken = IERC20(rewardAddress);\r\n                uint256 beforeBalance = rewardToken.balanceOf(shareholder);\r\n                if (pathRewards[rewardAddress] == address(0)) {\r\n                    address[] memory path = new address[](2);\r\n                    path[0] = address(BASE);\r\n                    path[1] = rewardAddress;\r\n                    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0, path, shareholder, block.timestamp);                 \r\n                } else {\r\n                    address[] memory path = new address[](3);\r\n                    path[0] = address(BASE);\r\n                    path[1] = pathRewards[rewardAddress];\r\n                    path[2] = rewardAddress;\r\n                    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0, path, shareholder, block.timestamp);\r\n                }\r\n                uint256 afterBalance = rewardToken.balanceOf(shareholder);\r\n                totalRewardsDistributed[rewardAddress] = totalRewardsDistributed[rewardAddress].add(afterBalance.sub(beforeBalance));\r\n                totalRewardsToUser[rewardAddress][shareholder] = totalRewardsToUser[rewardAddress][shareholder].add(afterBalance.sub(beforeBalance));\r\n            }\r\n        }\r\n    }\r\n\r\n    function makeApprove(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        IERC20(token).approve(spender, amount);\r\n    }\r\n\r\n    function claimDividend(\r\n        address rewardAddress\r\n    ) external {\r\n        distributeDividend(msg.sender, rewardAddress);\r\n    }\r\n\r\n    function setChoice(\r\n        address _choice\r\n    ) external {\r\n        require(allowed[_choice]);\r\n        choice[msg.sender] = _choice;\r\n    }\r\n\r\n    function toggleChoice(\r\n        address _choice\r\n    ) public onlyOwner {\r\n        allowed[_choice] = !allowed[_choice];\r\n    }\r\n\r\n    function getChoice(\r\n        address _choice\r\n    ) public view returns (bool) {\r\n        return allowed[_choice];\r\n    }\r\n\r\n    function claimDividendOfUser(\r\n        address user,\r\n        address rewardAddress\r\n    ) external {\r\n        require(canClaimDividendOfUser[user][msg.sender], \"You can't do that\");\r\n        distributeDividend(user, rewardAddress);\r\n    }\r\n\r\n    function setClaimDividendOfUser(\r\n        address claimer,\r\n        bool status\r\n    ) external {\r\n        canClaimDividendOfUser[msg.sender][claimer] = status;\r\n    }\r\n\r\n    function getUnpaidEarnings(\r\n        address shareholder\r\n    ) public view returns (uint256) {\r\n        if (shares[shareholder].amount == 0) return 0;\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) return 0;\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(\r\n        uint256 share\r\n    ) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(\r\n        address shareholder\r\n    ) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(\r\n        address shareholder\r\n    ) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\r\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function sweep() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function changeBASE(\r\n        address _BASE\r\n    ) external onlyOwner {\r\n        BASE = IERC20(_BASE);\r\n    }\r\n\r\n    function changeWETH(\r\n        address _WETH\r\n    ) external onlyOwner {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    function changeDEFAULT(\r\n        address _DEFAULT\r\n    ) external onlyOwner {\r\n        DEFAULT = _DEFAULT;\r\n    }\r\n\r\n    function changeDepositorOne(\r\n        address depositor\r\n    ) external onlyOwner {\r\n        _depositorOne = depositor;\r\n    }\r\n\r\n    function changeDepositorTwo(\r\n        address depositor\r\n    ) external onlyOwner {\r\n        _depositorTwo = depositor;\r\n    }\r\n\r\n    function newApproval(\r\n        address token,\r\n        address _contract\r\n    ) external onlyOwner {\r\n        IERC20(token).approve(_contract, 2**256 - 1);\r\n    }\r\n\r\n    function transferForeignToken(\r\n        address token,\r\n        address _to\r\n    ) external onlyOwner {\r\n        require(token != address(this), \"Can't withdraw native tokens\");\r\n        IERC20(token).transfer(_to, IERC20(token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ncontract Zero is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"Going to Zero\";\r\n    string constant _symbol = \"ZERO\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 1000000000 * (10 ** _decimals);\r\n    uint256 public _maxWallet = _totalSupply.div(50);\r\n\r\n    uint256 public minAmountToTriggerSwap = 0;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) public isDisabledExempt;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping (address => bool) public _isFree;\r\n\r\n    bool public isFeeOnTransferEnabled = false;\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint256 buyLiquidityFee = 0;\r\n    uint256 buyReflectionFee = 500;\r\n    uint256 buyOperationsFee = 500;\r\n    uint256 buyTreasuryFee = 0;\r\n    uint256 buyTotalFee = 1000;\r\n\r\n    uint256 sellLiquidityFee = 250;\r\n    uint256 sellReflectionFee = 0;\r\n    uint256 sellOperationsFee = 500;\r\n    uint256 sellTreasuryFee = 750;\r\n    uint256 sellTotalFee = 1500;\r\n\r\n    uint256 feeDenominator = 10000;\r\n\r\n    uint256 _liquidityTokensToSwap;\r\n    uint256 _reflectionTokensToSwap;\r\n    uint256 _operationsTokensToSwap;\r\n    uint256 _treasuryTokensToSwap;\r\n\r\n    address public autoLiquidityReceiver = 0x1344974f45eff7b975AE85B69A7067bE7f2D231d;\r\n    address public operationsFeeReceiver = msg.sender;\r\n    address public treasuryFeeReceiver = 0x1344974f45eff7b975AE85B69A7067bE7f2D231d;\r\n\r\n    address public vaultAddress = 0x7618C6ED407EE083DDEcBc013a33218B7453932F;\r\n    IVault public vault = IVault(vaultAddress);\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    DividendDistributor distributor;\r\n    address public distributorAddress;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 private swapMinimumTokens = _totalSupply / 5000;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public vaultEnabled = true;\r\n\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        WETH = router.WETH();\r\n        distributor = new DividendDistributor(_router, msg.sender);\r\n        distributorAddress = address(distributor);\r\n\r\n        isDisabledExempt[msg.sender] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n\r\n        autoLiquidityReceiver = msg.sender;\r\n\r\n        _setAutomatedMarketMakerPair(pair, true);\r\n\r\n        approve(_router, _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(\r\n        address spender\r\n    ) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) return _basicTransfer(sender, recipient, amount);\r\n\r\n        require(tradingEnabled || isDisabledExempt[sender], \"Trading is currently disabled\");\r\n\r\n        address routerAddress = address(router);\r\n        bool isSell = automatedMarketMakerPairs[recipient] || recipient == routerAddress;\r\n\r\n        if (!isSell && !_isFree[recipient]) require((_balances[recipient] + amount) < _maxWallet, \"Max wallet has been triggered\");\r\n\r\n        if (isSell && amount >= minAmountToTriggerSwap) {\r\n            if (shouldSwapBack()) swapBack();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient balance\");\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n        if (!isDividendExempt[recipient]) {\r\n            try distributor.setShare(recipient, _balances[recipient]) {} catch {}\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (bool) {\r\n        if (isFeeOnTransferEnabled) {\r\n            return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n        } else {\r\n            address routerAddress = address(router);\r\n            return ((automatedMarketMakerPairs[sender] || sender == routerAddress) || (automatedMarketMakerPairs[recipient] || recipient == routerAddress)) ? !isFeeExempt[sender] && !isFeeExempt[recipient] : false;\r\n        }\r\n    }\r\n\r\n    function getTotalFee(\r\n        bool selling\r\n    ) public view returns (uint256) {\r\n        return selling ? sellTotalFee : buyTotalFee;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        address routerAddress = address(router);\r\n        bool isSell = automatedMarketMakerPairs[receiver] || receiver == routerAddress;\r\n\r\n        uint256 totalFee = getTotalFee(isSell);\r\n        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\r\n\r\n        if (totalFee > 0) {\r\n            if (isSell) {\r\n                if (sellLiquidityFee > 0) {\r\n                    _liquidityTokensToSwap += feeAmount * sellLiquidityFee / totalFee;\r\n                }\r\n                if (sellOperationsFee > 0) {\r\n                    _operationsTokensToSwap += feeAmount * sellOperationsFee / totalFee;\r\n                }\r\n                if (sellReflectionFee > 0) {\r\n                    _reflectionTokensToSwap += feeAmount * sellReflectionFee / totalFee;\r\n                }\r\n                if (sellTreasuryFee > 0) {\r\n                    _treasuryTokensToSwap += feeAmount * sellTreasuryFee / totalFee;\r\n                }\r\n            } else {\r\n                if (buyLiquidityFee > 0) {\r\n                    _liquidityTokensToSwap += feeAmount * buyLiquidityFee / totalFee;\r\n                }\r\n                if (buyOperationsFee > 0) {\r\n                    _operationsTokensToSwap += feeAmount * buyOperationsFee / totalFee;\r\n                }\r\n                if (buyReflectionFee > 0) {\r\n                    _reflectionTokensToSwap += feeAmount * buyReflectionFee / totalFee;\r\n                }\r\n                if (buyTreasuryFee > 0) {\r\n                    _treasuryTokensToSwap += feeAmount * buyTreasuryFee / totalFee;\r\n                }\r\n            }\r\n        }\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return !automatedMarketMakerPairs[msg.sender] && !inSwap && swapEnabled && _balances[address(this)] >= swapMinimumTokens;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(\r\n        address _pair,\r\n        bool value\r\n    ) public onlyOwner {\r\n        _setAutomatedMarketMakerPair(_pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(\r\n        address _pair,\r\n        bool value\r\n    ) private {\r\n        automatedMarketMakerPairs[_pair] = value;\r\n        isDividendExempt[_pair] = value;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = _liquidityTokensToSwap.add(_operationsTokensToSwap).add(_reflectionTokensToSwap).add(_treasuryTokensToSwap);\r\n        \r\n        uint256 tokensForLiquidity = _liquidityTokensToSwap.div(2);\r\n        uint256 amountToSwap = contractBalance.sub(tokensForLiquidity);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap, 0, path, address(this), block.timestamp);\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 amountETHLiquidity = amountETH.mul(_liquidityTokensToSwap).div(totalTokensToSwap).div(2);\r\n        uint256 amountETHReflection = amountETH.mul(_reflectionTokensToSwap).div(totalTokensToSwap);\r\n        uint256 amountETHOperations = amountETH.mul(_operationsTokensToSwap).div(totalTokensToSwap);\r\n        uint256 amountETHTreasury = amountETH.mul(_treasuryTokensToSwap).div(totalTokensToSwap);\r\n        \r\n        _liquidityTokensToSwap = 0;\r\n        _operationsTokensToSwap = 0;\r\n        _reflectionTokensToSwap = 0;\r\n        _treasuryTokensToSwap = 0;\r\n\r\n        if (amountETHReflection > 0) try distributor.deposit{value: amountETHReflection}() {} catch {}\r\n        if (amountETHOperations > 0) {\r\n            if (vaultEnabled) {\r\n                try vault.sendToDevWallet{value: amountETHOperations}() {} catch {}\r\n            } else {\r\n                payable(operationsFeeReceiver).transfer(amountETHOperations);\r\n            }\r\n        }\r\n        if (amountETHTreasury > 0) payable(treasuryFeeReceiver).transfer(amountETHTreasury);\r\n        if (tokensForLiquidity > 0) router.addLiquidityETH{value: amountETHLiquidity}(address(this), tokensForLiquidity, 0, 0, autoLiquidityReceiver, block.timestamp);\r\n    }\r\n\r\n    function buyTokens(\r\n        uint256 amount,\r\n        address to\r\n    ) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = address(this);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0, path, to, block.timestamp);\r\n    }\r\n    \r\n    function sweep() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function changeWETH(\r\n        address _WETH\r\n    ) external onlyOwner {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    function changeRouterPairDistributor(\r\n        address _router,\r\n        bool _setWETH\r\n    ) external onlyOwner {\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        if (_setWETH) {\r\n            WETH = router.WETH();\r\n        }\r\n        distributor = new DividendDistributor(_router, msg.sender);\r\n        distributorAddress = address(distributor);\r\n    }\r\n\r\n    function transferForeignToken(\r\n        address _token,\r\n        address _to\r\n    ) external onlyOwner {\r\n        require(_token != address(this), \"Can't withdraw native tokens\");\r\n        IERC20(_token).transfer(_to, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    function setMaxWallet(\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        _maxWallet = amount;\r\n    }\r\n\r\n    function setMinAmountToTriggerSwap(\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        minAmountToTriggerSwap = amount;\r\n    }\r\n\r\n    function setIsFeeOnTransferEnabled(\r\n        bool status\r\n    ) external onlyOwner {\r\n        isFeeOnTransferEnabled = status;\r\n    }\r\n\r\n    function setIsDividendExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external onlyOwner {\r\n        isDividendExempt[holder] = exempt;\r\n        exempt ? distributor.setShare(holder, 0) : distributor.setShare(holder, _balances[holder]);\r\n    }\r\n\r\n    function checkIsDividendExempt(\r\n        address holder\r\n    ) public view returns (bool) {\r\n        return isDividendExempt[holder];\r\n    }\r\n\r\n    function setIsDisabledExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external onlyOwner {\r\n        isDisabledExempt[holder] = exempt;\r\n    }\r\n\r\n    function checkIsDisabledExempt(\r\n        address holder\r\n    ) public view returns (bool) {\r\n        return isDisabledExempt[holder];\r\n    }\r\n\r\n    function setIsFeeExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function checkIsFeeExempt(\r\n        address holder\r\n    ) public view returns (bool) {\r\n        return isFeeExempt[holder];\r\n    }\r\n\r\n    function setFree(\r\n        address holder,\r\n        bool exempt\r\n    ) public onlyOwner {\r\n        _isFree[holder] = exempt;\r\n    }\r\n\r\n    function checkFree(\r\n        address holder\r\n    ) public view onlyOwner returns (bool) {\r\n        return _isFree[holder];\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _buyLiquidityFee,\r\n        uint256 _buyReflectionFee,\r\n        uint256 _buyOperationsFee,\r\n        uint256 _buyTreasuryFee,\r\n        uint256 _sellLiquidityFee,\r\n        uint256 _sellReflectionFee,\r\n        uint256 _sellOperationsFee,\r\n        uint256 _sellTreasuryFee,\r\n        uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyReflectionFee = _buyReflectionFee;\r\n        buyOperationsFee = _buyOperationsFee;\r\n        buyTreasuryFee = _buyTreasuryFee;\r\n        buyTotalFee = _buyLiquidityFee.add(_buyReflectionFee).add(_buyOperationsFee).add(_buyTreasuryFee);\r\n\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellReflectionFee = _sellReflectionFee;\r\n        sellOperationsFee = _sellOperationsFee;\r\n        sellTreasuryFee = _sellTreasuryFee;\r\n        sellTotalFee = _sellLiquidityFee.add(_sellReflectionFee).add(_sellOperationsFee).add(_sellTreasuryFee);\r\n\r\n        feeDenominator = _feeDenominator;\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _autoLiquidityReceiver,\r\n        address _operationsFeeReceiver,\r\n        address _treasuryFeeReceiver\r\n    ) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        operationsFeeReceiver = _operationsFeeReceiver;\r\n        treasuryFeeReceiver = _treasuryFeeReceiver;\r\n    }\r\n\r\n    function changeVault(\r\n        address _vaultAddress\r\n    ) external onlyOwner {\r\n        vaultAddress = _vaultAddress;\r\n        vault = IVault(_vaultAddress);\r\n    }\r\n\r\n    function toggleVault(\r\n        bool _enabled\r\n    ) external onlyOwner {\r\n        vaultEnabled = _enabled;\r\n    }\r\n\r\n    function toggleTrading(\r\n        bool _enabled\r\n    ) external onlyOwner {\r\n        tradingEnabled = _enabled;\r\n    }\r\n\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapMinimumTokens = _amount;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n    \r\n    function changeRouterVersion(\r\n        address _router\r\n    ) external onlyOwner returns (address _pair) {\r\n        IDEXRouter _uniswapV2Router = IDEXRouter(_router);\r\n        _pair = IDEXFactory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n        if (_pair == address(0)) _pair = IDEXFactory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        pair = _pair;\r\n        router = _uniswapV2Router;\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_setWETH\",\"type\":\"bool\"}],\"name\":\"changeRouterPairDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"changeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"name\":\"changeWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIsDisabledExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIsDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIsFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDisabledExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeOnTransferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToTriggerSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operationsFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyOperationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellOperationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDisabledExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsFeeOnTransferEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToTriggerSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"toggleTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"toggleVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Zero", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2cf2c31eea525bfeb07fa875245bc6f8c9963876bcfd75fac0e2d1fee669cd17"}]}