{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n*    Telegram : https://t.me/QUADofficial\r\n*    Website  : https://thagunnaz.net\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Quadlife is Context, IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  uint8 public marketingPercent = 100; \r\n  address payable public marketingAddress =\r\n    payable(0xfFe17962DfED9d37840ED835971f193b306B8101); //(0xfFe17962DfED9d37840ED835971f193b306B8101);\r\n\r\n  address payable public liqOwner = payable(0x000000000000000000000000000000000000dEaD);\r\n  \r\n  address private constant UNISWAP_ROUTER =\r\n    0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n  mapping(address => uint256) private _rOwned;\r\n  mapping(address => uint256) private _tOwned;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  mapping(address => bool) private _isExcludedFee;\r\n  mapping(address => bool) private _isExcludedReward;\r\n  address[] private _excluded;\r\n\r\n  string private constant _name = 'QuadLife';\r\n  string private constant _symbol = 'QUAD';\r\n  uint8 private constant _decimals = 9;\r\n\r\n  uint256 private constant MAX = ~uint256(0);\r\n  uint256 private constant _tTotal = 1_000_000_000_000_000 * 10**_decimals;\r\n  uint256 public _maxTxAmount = 10_000_000_000_000 * 10**_decimals; //1%\r\n  uint256 public _maxWalletSize = 30_000_000_000_000 * 10**_decimals; //3%\r\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n  uint256 private _tFeeTotal;\r\n\r\n  uint256 public buyReflectionFee = 1;\r\n  uint256 public sellReflectionFee = 2;\r\n  uint256 private _previousBuyReflectFee = buyReflectionFee;\r\n  uint256 private _previousSellReflectFee = sellReflectionFee;\r\n\r\n  uint256 public buyMktgFee = 7; \r\n  uint256 public sellMktgFee = 5;\r\n  uint256 private _previousBuyMktgFee = buyMktgFee;\r\n  uint256 private _previousSellMktgFee = sellMktgFee;\r\n\r\n  uint256 public buyLpFee = 4;\r\n  uint256 public sellLpFee = 8;\r\n  uint256 private _previousBuyLpFee = buyLpFee;\r\n  uint256 private _previousSellLpFee = sellLpFee;\r\n\r\n  bool isSelling = false;\r\n  uint256 public liquifyRate = 5; //.5%\r\n\r\n  uint256 public launchTime;\r\n  mapping(address => bool) private snipe;\r\n  address[] private _sniped;\r\n  bool public limitsEnabled = false;\r\n\r\n  mapping (address => uint) private cooldown;\r\n  mapping (address => bool) private bots;\r\n\r\n  IUniswapV2Router02 public uniswapV2Router;\r\n  address public uniswapV2Pair;\r\n  mapping(address => bool) private _isUniswapPair;\r\n\r\n  bool private _inSwapAndLiquify;\r\n  bool private _tradingOpen = false;\r\n\r\n  event SwapTokensForETH(uint256 amountIn, address[] path);\r\n  event SwapAndLiquify(\r\n    uint256 tokensSwappedForEth,\r\n    uint256 ethAddedForLp,\r\n    uint256 tokensAddedForLp\r\n  );\r\n\r\n  modifier lockTheSwap() {\r\n    _inSwapAndLiquify = true;\r\n    _;\r\n    _inSwapAndLiquify = false;\r\n  }\r\n\r\n  constructor() {\r\n    _rOwned[_msgSender()] = _rTotal;\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UNISWAP_ROUTER);\r\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n      address(this),\r\n      _uniswapV2Router.WETH()\r\n    );\r\n\r\n    uniswapV2Router = _uniswapV2Router;\r\n\r\n    _isExcludedFee[owner()] = true;\r\n    _isExcludedFee[_msgSender()] = true;\r\n    _isExcludedFee[address(this)] = true;\r\n    _isExcludedFee[address(marketingAddress)] = true;\r\n    _isExcludedFee[address(liqOwner)] = true;\r\n\r\n    emit Transfer(address(0), _msgSender(), _tTotal);\r\n  }\r\n\r\n  function beginContract() external onlyOwner {\r\n    _tradingOpen = true;\r\n    launchTime = block.timestamp;\r\n    limitsEnabled = true;\r\n  }\r\n\r\n  function name() external pure returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() external pure returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() external pure returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() external pure override returns (uint256) {\r\n    return _tTotal;\r\n  }\r\n\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    if (_isExcludedReward[account]) return _tOwned[account];\r\n    return tokenFromReflection(_rOwned[account]);\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      _msgSender(),\r\n      _allowances[sender][_msgSender()].sub(\r\n        amount,\r\n        'ERC20: transfer amount exceeds allowance'\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].sub(\r\n        subtractedValue,\r\n        'ERC20: decreased allowance below zero'\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function isExcludedFromReward(address account) external view returns (bool) {\r\n    return _isExcludedReward[account];\r\n  }\r\n\r\n  function totalFees() external view returns (uint256) {\r\n    return _tFeeTotal;\r\n  }\r\n\r\n  function deliver(uint256 tAmount) external {\r\n    address sender = _msgSender();\r\n    require(\r\n      !_isExcludedReward[sender],\r\n      'Excluded addresses cannot call this function'\r\n    );\r\n    (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rTotal = _rTotal.sub(rAmount);\r\n    _tFeeTotal = _tFeeTotal.add(tAmount);\r\n  }\r\n\r\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n    external\r\n    view\r\n    returns (uint256) {\r\n    require(tAmount <= _tTotal, 'Amount must be less than supply');\r\n    if (!deductTransferFee) {\r\n      (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n      return rAmount;\r\n    } else {\r\n      (uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\r\n      return rTransferAmount;\r\n    }\r\n  }\r\n\r\n  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n    require(rAmount <= _rTotal, 'Amount must be less than total reflections');\r\n    uint256 currentRate = _getRate();\r\n    return rAmount.div(currentRate);\r\n  }\r\n\r\n  function excludeFromReward(address account) external onlyOwner {\r\n    require(!_isExcludedReward[account], 'Account is already excluded');\r\n    if (_rOwned[account] > 0) {\r\n      _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n    }\r\n    _isExcludedReward[account] = true;\r\n    _excluded.push(account);\r\n  }\r\n\r\n  function includeInReward(address account) external onlyOwner {\r\n    require(_isExcludedReward[account], 'Account is already included');\r\n    for (uint256 i = 0; i < _excluded.length; i++) {\r\n      if (_excluded[i] == account) {\r\n        _excluded[i] = _excluded[_excluded.length - 1];\r\n        _tOwned[account] = 0;\r\n        _isExcludedReward[account] = false;\r\n        _excluded.pop();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n    ) private {\r\n    require(owner != address(0), 'ERC20: approve from the zero address');\r\n    require(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function setBot(address[] memory bots_) public onlyOwner {\r\n    for (uint i = 0; i < bots_.length; i++) {\r\n      bots[bots_[i]] = true;\r\n    }\r\n  }\r\n    \r\n  function delBot(address notbot) public onlyOwner {\r\n    bots[notbot] = false;\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n    ) private {\r\n    require(from != address(0), 'ERC20: transfer from the zero address');\r\n    require(to != address(0), 'ERC20: transfer to the zero address');\r\n    require(amount > 0, 'Transfer amount must be greater than zero');\r\n    require(!snipe[to], '!');\r\n    require(!snipe[msg.sender], '!');\r\n\r\n    if(limitsEnabled) { //if excluded from fee, also excluded from max tx & max wallet\r\n      if(from != owner() && to != owner() && !_isExcludedFee[to] && !_isExcludedFee[from]) {\r\n        require(amount <= _maxTxAmount, \"Over the maxTxAmount.\");\r\n      }\r\n      if (to != uniswapV2Pair) {\r\n        require(amount + balanceOf(to) <= _maxWalletSize, \"Over max wallet size.\");\r\n      }\r\n            \r\n      if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFee[to]) {\r\n        require(cooldown[to] < block.timestamp);\r\n        cooldown[to] = block.timestamp + (60 seconds);\r\n      }\r\n            \r\n      if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFee[from]) {\r\n        require(!bots[from] && !bots[to]);\r\n        require(cooldown[to] < block.timestamp);\r\n        cooldown[to] = block.timestamp + (60 seconds);\r\n      }\r\n    }\r\n\r\n    // buy\r\n    if (\r\n      from == uniswapV2Pair &&\r\n      to != address(uniswapV2Router) &&\r\n      !_isExcludedFee[to]\r\n    ) {\r\n      require(_tradingOpen, 'Trading not yet enabled.');\r\n\r\n      if (block.timestamp == launchTime) {\r\n        snipe[to] = true;\r\n        _sniped.push(to);\r\n      }\r\n\r\n    }\r\n\r\n    // sell\r\n    if (!_inSwapAndLiquify && _tradingOpen && to == uniswapV2Pair && !snipe[to] && !snipe[from]) {\r\n      isSelling = true;\r\n      uint256 _contractTokenBalance = balanceOf(address(this));\r\n      if (_contractTokenBalance > 0) {\r\n        if (\r\n          _contractTokenBalance >\r\n          balanceOf(uniswapV2Pair).mul(liquifyRate).div(100)\r\n        ) {\r\n          _contractTokenBalance = balanceOf(uniswapV2Pair).mul(liquifyRate).div(\r\n              100\r\n            );\r\n        }\r\n        _swapTokens(_contractTokenBalance);\r\n      }\r\n    }\r\n\r\n    bool takeFee = true;\r\n\r\n    if(_isExcludedFee[from] || _isExcludedFee[to]){\r\n      takeFee = false;\r\n    }\r\n\r\n    _tokenTransfer(from, to, amount, takeFee);\r\n    isSelling = false;\r\n  }\r\n\r\n  function _swapTokens(uint256 _contractTokenBalance) private lockTheSwap {\r\n    uint256 _lpFee = buyLpFee.add(sellLpFee);\r\n    uint256 _mktgFee = buyMktgFee.add(sellMktgFee);\r\n    uint256 _totalFee = _lpFee.add(_mktgFee);\r\n    uint256 _lpTokens = _contractTokenBalance.mul(_lpFee).div(_totalFee).div(2);\r\n    uint256 _tokensToSwap = _contractTokenBalance.sub(_lpTokens);\r\n    uint256 _balanceBefore = address(this).balance;\r\n    _swapTokensForEth(_tokensToSwap);\r\n    uint256 _balanceReceived = address(this).balance.sub(_balanceBefore);\r\n\r\n    uint256 _marketingETH = _balanceReceived.mul(_mktgFee).div(_totalFee);\r\n    uint256 _lpETH = _balanceReceived.sub(_marketingETH);\r\n    if (_marketingETH > 0) {\r\n      _sendETHToMktg(_marketingETH);\r\n    }\r\n    if (_lpETH > 0) {\r\n      addLiq(_lpTokens, _lpETH);\r\n    }\r\n  }\r\n\r\n  function _sendETHToMktg(uint256 amount) private {\r\n    uint256 marketingAmount = amount.mul(marketingPercent).div(100);\r\n    marketingAddress.transfer(marketingAmount);\r\n  }\r\n\r\n  function addLiq(uint256 tokenAmount, uint256 ethAmount) private {\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n    uniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n      address(this),\r\n      tokenAmount,\r\n      0,\r\n      0,\r\n      liqOwner,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function _swapTokensForEth(uint256 tokenAmount) private {\r\n    // generate the uniswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = uniswapV2Router.WETH();\r\n\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // make the swap\r\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      tokenAmount,\r\n      0, // accept any amount of ETH\r\n      path,\r\n      address(this), // the contract\r\n      block.timestamp\r\n    );\r\n\r\n    emit SwapTokensForETH(tokenAmount, path);\r\n  }\r\n\r\n  function _tokenTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount,\r\n    bool takeFee\r\n    ) private {\r\n    if (!takeFee) _removeAllFee();\r\n\r\n    if (_isExcludedReward[sender] && !_isExcludedReward[recipient]) {\r\n      _transferFromExcluded(sender, recipient, amount);\r\n    } else if (!_isExcludedReward[sender] && _isExcludedReward[recipient]) {\r\n      _transferToExcluded(sender, recipient, amount);\r\n    } else if (_isExcludedReward[sender] && _isExcludedReward[recipient]) {\r\n      _transferBothExcluded(sender, recipient, amount);\r\n    } else {\r\n      _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    if (!takeFee) _restoreAllFee();\r\n  }\r\n\r\n  function _transferStandard(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n    ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferToExcluded(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferFromExcluded(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(tAmount);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferBothExcluded(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(tAmount);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n    _rTotal = _rTotal.sub(rFee);\r\n    _tFeeTotal = _tFeeTotal.add(tFee);\r\n  }\r\n\r\n  function _getValues(uint256 tAmount)\r\n    private\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    (\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getTValues(tAmount);\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n      tAmount,\r\n      tFee,\r\n      tLiquidity,\r\n      _getRate()\r\n    );\r\n    return (\r\n      rAmount,\r\n      rTransferAmount,\r\n      rFee,\r\n      tTransferAmount,\r\n      tFee,\r\n      tLiquidity\r\n    );\r\n  }\r\n\r\n  function _getTValues(uint256 tAmount)\r\n    private\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 tFee = _calculateReflectFee(tAmount);\r\n    uint256 tLiquidity = _calculateLiquidityFee(tAmount);\r\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n    return (tTransferAmount, tFee, tLiquidity);\r\n  }\r\n\r\n  function _getRValues(\r\n    uint256 tAmount,\r\n    uint256 tFee,\r\n    uint256 tLiquidity,\r\n    uint256 currentRate\r\n  )\r\n    private\r\n    pure\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 rAmount = tAmount.mul(currentRate);\r\n    uint256 rFee = tFee.mul(currentRate);\r\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n    return (rAmount, rTransferAmount, rFee);\r\n  }\r\n\r\n  function _getRate() private view returns (uint256) {\r\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n    return rSupply.div(tSupply);\r\n  }\r\n\r\n  function _getCurrentSupply() private view returns (uint256, uint256) {\r\n    uint256 rSupply = _rTotal;\r\n    uint256 tSupply = _tTotal;\r\n    for (uint256 i = 0; i < _excluded.length; i++) {\r\n      if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply)\r\n        return (_rTotal, _tTotal);\r\n      rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n      tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n    }\r\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n    return (rSupply, tSupply);\r\n  }\r\n\r\n  function _takeLiquidity(uint256 tLiquidity) private {\r\n    uint256 currentRate = _getRate();\r\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n    _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n    if (_isExcludedReward[address(this)])\r\n      _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n  }\r\n\r\n  function _calculateReflectFee(uint256 _amount)\r\n    private\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 fee = isSelling ? sellReflectionFee : buyReflectionFee;\r\n    return _amount.mul(fee).div(10**2);\r\n  }\r\n\r\n  function _calculateLiquidityFee(uint256 _amount)\r\n    private\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 fee = isSelling\r\n      ? sellMktgFee.add(sellLpFee)\r\n      : buyMktgFee.add(buyLpFee);\r\n    return _amount.mul(fee).div(10**2);\r\n  }\r\n\r\n  function _calculateLpFee(uint256 _amount) private view returns (uint256) {\r\n    uint256 fee = isSelling ? sellLpFee : buyLpFee;\r\n    return _amount.mul(fee).div(10**2);\r\n  }\r\n\r\n  function _removeAllFee() private {\r\n    _previousBuyReflectFee = buyReflectionFee;\r\n    _previousBuyMktgFee = buyMktgFee;\r\n    _previousBuyLpFee = buyLpFee;\r\n\r\n    _previousSellReflectFee = sellReflectionFee;\r\n    _previousSellMktgFee = sellMktgFee;\r\n    _previousSellLpFee = sellLpFee;\r\n\r\n    buyReflectionFee = 0;\r\n    buyMktgFee = 0;\r\n    buyLpFee = 0;\r\n\r\n    sellReflectionFee = 0;\r\n    sellMktgFee = 0;\r\n    sellLpFee = 0;\r\n  }\r\n\r\n  function _restoreAllFee() private {\r\n    buyReflectionFee = _previousBuyReflectFee;\r\n    buyMktgFee = _previousBuyMktgFee;\r\n    buyLpFee = _previousBuyLpFee;\r\n\r\n    sellReflectionFee = _previousSellReflectFee;\r\n    sellMktgFee = _previousSellMktgFee;\r\n    sellLpFee = _previousSellLpFee;\r\n  }\r\n\r\n  function isExcludedFromFee(address account) external view returns (bool) {\r\n    return _isExcludedFee[account];\r\n  }\r\n\r\n  function excludeFromFee(address account) external onlyOwner {\r\n    _isExcludedFee[account] = true;\r\n  }\r\n\r\n  function includeInFee(address account) external onlyOwner {\r\n    _isExcludedFee[account] = false;\r\n  }\r\n\r\n  function setTaxes(uint256 _lpbuy, uint256 _lpsell, uint256 _mktgbuy, uint256 _mktgsell, uint8 mktgperc, uint256 _refbuy, uint256 _refsell) external onlyOwner {\r\n    require(_lpbuy <= 25, 'cannot be above 25%');\r\n    require(\r\n      _lpbuy.add(buyMktgFee).add(buyReflectionFee) <= 25,\r\n      'overall fees cannot be above 25%'\r\n    );\r\n    buyLpFee = _lpbuy;\r\n\r\n    require(_lpsell <= 25, 'cannot be above 25%');\r\n    require(\r\n      _lpsell.add(sellMktgFee).add(sellReflectionFee) <= 25,\r\n      'overall fees cannot be above 25%'\r\n    );\r\n    sellLpFee = _lpsell;\r\n\r\n    require(mktgperc <= 100, 'can only be 0-100');\r\n    marketingPercent = mktgperc;\r\n\r\n    require(_mktgbuy <= 25, 'cannot be above 25%');\r\n    require(\r\n      _mktgbuy.add(buyReflectionFee).add(buyLpFee) <= 25,\r\n      'overall fees cannot be above 25%'\r\n    );\r\n    buyMktgFee = _mktgbuy;\r\n\r\n    require(_mktgsell <= 25, 'cannot be above 25%');\r\n    require(\r\n      _mktgsell.add(sellReflectionFee).add(sellLpFee) <= 25,\r\n      'overall fees cannot be above 25%'\r\n    );\r\n    sellMktgFee = _mktgsell;\r\n\r\n    require(_refbuy <= 25, 'cannot be above 25%');\r\n    require(\r\n      _refbuy.add(buyMktgFee).add(buyLpFee) <= 25,\r\n      'overall fees cannot be above 25%'\r\n    );\r\n    buyReflectionFee = _refbuy;\r\n\r\n    require(_refsell <= 25, 'cannot be above 25%');\r\n    require(\r\n      _refsell.add(sellMktgFee).add(sellLpFee) <= 25,\r\n      'overall fees cannot be above 25%'\r\n    );\r\n    sellReflectionFee = _refsell;\r\n\r\n  }\r\n\r\n  function setAddresses(address _marketingAddress, address _liqOwner) external onlyOwner {\r\n    marketingAddress = payable(_marketingAddress);\r\n    liqOwner = payable(_liqOwner);\r\n\r\n  }\r\n\r\n  function airdrop(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner {\r\n    require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop\r\n    for(uint256 i = 0; i < airdropWallets.length; i++){\r\n      address wallet = airdropWallets[i];\r\n      uint256 amount = amounts[i] * 10**_decimals;\r\n    _transfer(msg.sender, wallet, amount);\r\n    }\r\n  }\r\n\r\n  function _setMaxWalletSizePercent(uint256 maxWalletSize) external onlyOwner {\r\n    _maxWalletSize = maxWalletSize * 10**_decimals;\r\n  }\r\n   \r\n  function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n    _maxTxAmount = maxTxAmount * 10**_decimals;\r\n  }\r\n\r\n  function setLimitsEnabled(bool onoff) external onlyOwner() {\r\n    limitsEnabled = onoff;\r\n  }\r\n    \r\n  function transferToAddressETH(address payable _recipient, uint256 _amount)\r\n    external\r\n    onlyOwner\r\n  {\r\n    _amount = _amount == 0 ? address(this).balance : _amount;\r\n    _recipient.transfer(_amount);\r\n  }\r\n\r\n  function setLiquifyRate(uint256 rate) external onlyOwner {\r\n    liquifyRate = rate;\r\n  }\r\n\r\n  receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwappedForEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAddedForLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAddedForLp\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"_setMaxWalletSizePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMktgFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMktgFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liqOwner\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setLimitsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setLiquifyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpbuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpsell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mktgbuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mktgsell\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"mktgperc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_refbuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refsell\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToAddressETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Quadlife", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d6df0a6837499b47a963228eb2ae43cf68402b57535efe2ad93a94abde396f25"}]}