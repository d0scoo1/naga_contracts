{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-03-30\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IComp {\r\n    function delegate(address delegatee) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ninterface IGovernorBravo {\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\r\n    function castVote(uint proposalId, uint8 support) external;\r\n}\r\n\r\ncontract CrowdProposal {\r\n    /// @notice The crowd proposal author\r\n    address payable public immutable author;\r\n\r\n    /// @notice Governance proposal data\r\n    address[] public targets;\r\n    uint[] public values;\r\n    string[] public signatures;\r\n    bytes[] public calldatas;\r\n    string public description;\r\n\r\n    /// @notice COMP token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorBravo` contract address\r\n    address public immutable governor;\r\n\r\n    /// @notice Governance proposal id\r\n    uint public govProposalId;\r\n    /// @notice Terminate flag\r\n    bool public terminated;\r\n\r\n    /// @notice An event emitted when the governance proposal is created\r\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\r\n    /// @notice An event emitted when the crowd proposal is terminated\r\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\r\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\r\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\r\n\r\n    /**\r\n    * @notice Construct crowd proposal\r\n    * @param author_ The crowd proposal author\r\n    * @param targets_ The ordered list of target addresses for calls to be made\r\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures_ The ordered list of function signatures to be called\r\n    * @param calldatas_ The ordered list of calldata to be passed to each call\r\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\r\n    * @param comp_ `COMP` token contract address\r\n    * @param governor_ Compound protocol `GovernorBravo` contract address\r\n    */\r\n    constructor(address payable author_,\r\n                address[] memory targets_,\r\n                uint[] memory values_,\r\n                string[] memory signatures_,\r\n                bytes[] memory calldatas_,\r\n                string memory description_,\r\n                address comp_,\r\n                address governor_) public {\r\n        author = author_;\r\n\r\n        // Save proposal data\r\n        targets = targets_;\r\n        values = values_;\r\n        signatures = signatures_;\r\n        calldatas = calldatas_;\r\n        description = description_;\r\n\r\n        // Save Compound contracts data\r\n        comp = comp_;\r\n        governor = governor_;\r\n\r\n        terminated = false;\r\n\r\n        // Delegate votes to the crowd proposal\r\n        IComp(comp_).delegate(address(this));\r\n    }\r\n\r\n    /// @notice Create governance proposal\r\n    function propose() external returns (uint) {\r\n        require(govProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\r\n        require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\r\n\r\n        // Create governance proposal and save proposal id\r\n        govProposalId = IGovernorBravo(governor).propose(targets, values, signatures, calldatas, description);\r\n        emit CrowdProposalProposed(address(this), author, govProposalId);\r\n\r\n        return govProposalId;\r\n    }\r\n\r\n    /// @notice Terminate the crowd proposal, send back staked COMP tokens\r\n    function terminate() external {\r\n        require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\r\n        require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\r\n\r\n        terminated = true;\r\n\r\n        // Transfer staked COMP tokens from the crowd proposal contract back to the author\r\n        IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));\r\n\r\n        emit CrowdProposalTerminated(address(this), author);\r\n    }\r\n\r\n    /// @notice Vote for the governance proposal with all delegated votes\r\n    function vote() external {\r\n        require(govProposalId > 0, 'CrowdProposal::vote: gov proposal has not been created yet');\r\n        // Support the proposal, vote value = 1\r\n        IGovernorBravo(governor).castVote(govProposalId, 1);\r\n\r\n        emit CrowdProposalVoted(address(this), govProposalId);\r\n    }\r\n}\r\n\r\ncontract CrowdProposalFactory {\r\n    /// @notice `COMP` token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorBravo` contract address\r\n    address public immutable governor;\r\n    /// @notice Minimum Comp tokens required to create a crowd proposal\r\n    uint public immutable compStakeAmount;\r\n\r\n    /// @notice An event emitted when a crowd proposal is created\r\n    event CrowdProposalCreated(address indexed proposal, address indexed author, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\r\n\r\n     /**\r\n     * @notice Construct a proposal factory for crowd proposals\r\n     * @param comp_ `COMP` token contract address\r\n     * @param governor_ Compound protocol `GovernorBravo` contract address\r\n     * @param compStakeAmount_ The minimum amount of Comp tokes required for creation of a crowd proposal\r\n     */\r\n    constructor(address comp_,\r\n                address governor_,\r\n                uint compStakeAmount_) public {\r\n        comp = comp_;\r\n        governor = governor_;\r\n        compStakeAmount = compStakeAmount_;\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new crowd proposal\r\n    * @notice Call `Comp.approve(factory_address, compStakeAmount)` before calling this method\r\n    * @param targets The ordered list of target addresses for calls to be made\r\n    * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures The ordered list of function signatures to be called\r\n    * @param calldatas The ordered list of calldata to be passed to each call\r\n    * @param description The block at which voting begins: holders must delegate their votes prior to this block\r\n    */\r\n    function createCrowdProposal(address[] memory targets,\r\n                                 uint[] memory values,\r\n                                 string[] memory signatures,\r\n                                 bytes[] memory calldatas,\r\n                                 string memory description) external {\r\n        CrowdProposal proposal = new CrowdProposal(msg.sender, targets, values, signatures, calldatas, description, comp, governor);\r\n        emit CrowdProposalCreated(address(proposal), msg.sender, targets, values, signatures, calldatas, description);\r\n\r\n        // Stake COMP and force proposal to delegate votes to itself\r\n        IComp(comp).transferFrom(msg.sender, address(proposal), compStakeAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"author_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CrowdProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdProposal", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ec405bcd169633c0d8edc8ef869e164e42b9ec1e000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c0da02939e1441f497fd74f78ce7decb17b6652900000000000000000000000000000000000000000000000000000000000000010000000000000000000000003d9819210a31b4961b30ef54be2aed79b9c9cd3b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000295f736574436f6e7472696275746f72436f6d70537065656428616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000057c970568668087c05352456a3f59b58b03300660000000000000000000000000000000000000000000000000011dbd6ab4648340000000000000000000000000000000000000000000000000000000000000b802320536563757269747920536f6c7574696f6e7320466f7220436f6d706f756e6420476f7665726e616e63650a232053756d6d6172793a200a0a0a232320476f616c0a0a496d706c656d656e7420536563757269747920536f6c7574696f6e7320746f2070726576656e7420616e64206d69746967617465206c6f7373206f662066756e647320726573756c74696e672066726f6d207365637572697479207269736b7320696e74726f647563656420627920636f6d6d756e6974792d70726f706f73656420757067726164657320746f2074686520436f6d706f756e642070726f746f636f6c2e0a0a0a23232050726f626c656d0a0a41732065766964656e63656420696e20726563656e74206d61726b6574206576656e747320616e64207370656369666963616c6c792050726f706f73616c2036322c20676f7665726e616e63652075706772616465732063616e20696e74726f64756365206e6577207365637572697479207269736b20766563746f727320776869636820636f756c6420726573756c7420696e2072657075746174696f6e616c2064616d61676520746f207468652070726f746f636f6c20616e6420706f737369626c65206c6f7373206f6620757365722066756e64732e205365637572697479206973206120636f6e74696e756f7573206566666f727420616e642073686f756c64207468657265666f7265206265207365656e20616e64206164647265737365642066726f6d206120686f6c69737469632c20636f6e74696e756f75732070657273706563746976652e0a0a0a2323204261636b67726f756e640a0a466f722074686520706173742074776f2079656172732c204f70656e5a657070656c696e2068617320776f726b656420666f726d616c6c7920616e6420696e666f726d616c6c79207769746820436f6d706f756e6420746f20706572666f726d205b31302b207365637572697479206175646974735d2868747470733a2f2f626c6f672e6f70656e7a657070656c696e2e636f6d2f3f733d636f6d706f756e64292c20646576656c6f702061205b7374616e64617264697a65642076657273696f6e206f6620476f7665726e6f72416c70686120616e6420476f7665726e6f72427261766f20636f6e7472616374735d2868747470733a2f2f626c6f672e6f70656e7a657070656c696e2e636f6d2f676f7665726e6f722d736d6172742d636f6e74726163742f292c20696e74726f6475636520736563757269747920626573742070726163746963657320666f72205b736166657220676f7665726e616e63652073797374656d735d2868747470733a2f2f626c6f672e6f70656e7a657070656c696e2e636f6d2f736d6172742d636f6e74726163742d73656375726974792d67756964656c696e65732d342d737472617465676965732d666f722d73616665722d676f7665726e616e63652d73797374656d732f292c20616e6420646576656c6f7020626573706f6b65205b74687265617420646574656374696f6e206167656e7420736372697074735d2868747470733a2f2f6769746875622e636f6d2f666f7274612d70726f746f636f6c2f666f7274612d6167656e742d6578616d706c65732f747265652f6d61737465722f636f6d706f756e642d747329206d6f6e69746f72696e6720436f6d706f756e642e0a0a41732074686520636f6d6d756e69747920617373756d6573206772656174657220726573706f6e736962696c69747920666f72207468652070726f746f636f6c20616e6420746865207374616b6573206265636f6d65206869676865722c20436f6d706f756e64277320646563656e7472616c697a6564207068617365206f662067726f7774682064656d616e647320636f6d70726568656e7369766520616e6420636f6e74696e756f75732073656375726974792070726f63657373657320746f207468726976652e0a0a0a232320436f6e7472696275746f72206772616e740a0a4f70656e5a657070656c696e2069732072657175657374696e6720612073747265616d696e67206772616e7420666f722074686520536563757269747920536f6c7574696f6e732072657461696e65722066656520746f20626567696e20696d706c656d656e746174696f6e206f66206120636f6d70726568656e7369766520736574206f6620626573742d696e2d636c61737320536563757269747920536f6c7574696f6e73207468726f7567686f757420616c6c20737461676573206f662074686520436f6d706f756e6420676f7665726e616e63652070726f706f73616c206c6966656379636c652c2074686520656c656d656e7473206f6620776869636820696e636c7564653a0a0a0a0a2a2050726f746f636f6c205365637572697479204f66666963657220746f2070726f766964652061647669736f727920736572766963657320616e64207265636f6d6d656e646174696f6e73206f6e20696d70726f76656d656e747320746f2074686520676f7665726e616e63652070726f6365737320287370656369666963616c6c7920696e207468652061726561206f6620696e636964656e7420616e6420656d657267656e637920726573706f6e7365290a2a20536563757269747920547261696e696e6720616e64207461696c6f72656420636f6d6d756e69747920737570706f7274207370656369666963616c6c792064657369676e656420746f20656475636174652074686520636f6d6d756e69747920746f20736563757269747920626573742070726163746963657320616e64207468726561747320696e2074686520446546692073706163652072656c6174656420746f2074686520436f6d706f756e642070726f746f636f6c0a2a20436f6e74696e756f757320417564697473206f6620616c6c206e657720636f646520696e74726f647563656420627920676f7665726e616e63652070726f706f73616c730a2a20436f6e74696e756f757320546872656174204d6f6e69746f72696e67206f662074686520436f6d706f756e642050726f746f636f6c0a0a5b5365652066756c6c2070726f706f73616c20616e6420666f72756d2064697363757373696f6e5d2868747470733a2f2f7777772e636f6d702e78797a2f742f6175646974696e672d636f6d706f756e642d70726f746f636f6c2f32353433290a0a5374617274696e67204d617263682033302c20323032322c2020616e64206166746572206675727468657220666565646261636b2066726f6d2074686520436f6d6d756e6974792c204f70656e5a657070656c696e2c2077696c6c2063726561746520616e206164646974696f6e616c2070726f706f73616c20746f20636f7665722074686520706572666f726d616e636520666565207061796d656e7420696e206163636f7264616e636520776974682074686520666f726d756c61206f75746c696e656420696e207468652066756c6c2070726f706f73616c2e0a0a0a2323205265666572656e6365730a0a2d20466f72756d2044697363757373696f6e206f6e20726576696577696e67206c6172676520636f6465206368616e6765733a205b68747470733a2f2f7777772e636f6d702e78797a2f742f6d6f72652d7269676f726f75732d70726f636573732d6f6e2d726576696577696e672d6c617267652d636f64652d6368616e6765732d72652d636f6d702d6275672d392d32392d32312f323332362f325d2868747470733a2f2f7777772e636f6d702e78797a2f742f6d6f72652d7269676f726f75732d70726f636573732d6f6e2d726576696577696e672d6c617267652d636f64652d6368616e6765732d72652d636f6d702d6275672d392d32392d32312f323332362f32290a0a2d20506174636820666f722050726f706f73616c2036333a2068747470733a2f2f7777772e636f6d702e78797a2f742f636f6d706f756e642d70726f706f73616c2d36332d74656d706f726172792d70617463682d666f722d636f6d702d646973747269627574696f6e2d6275672d392d32392d32312f32333237", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d93e6fc21ed5511ad90cbb71917ffbbeef987f1f5ef12dfe5a3f9c2dcf9c8656"}]}