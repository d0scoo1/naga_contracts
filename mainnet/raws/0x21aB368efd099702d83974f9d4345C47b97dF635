{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract TokenTimelock {\r\n\r\n    // Mapping of ERC20s and their respective release time.\r\n    mapping (address => uint) ReleaseTime;\r\n    // beneficiary of released tokens\r\n    address private immutable beneficiary;\r\n\r\n    constructor() {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    // Returns the release time for the corresponding token.\r\n    function getReleaseTime(address _token) public view virtual returns (uint256) {\r\n        return ReleaseTime[_token];\r\n    }\r\n\r\n    // Locks tokens on behalf of the beneficiary. A lock must be longer than a month, but shorter than a year.\r\n    function lockToken(address _token, uint64 _releaseTime) public {\r\n        require(msg.sender == beneficiary, \"Locker must be beneficiary\");\r\n        require(_releaseTime > block.timestamp + 30 days, \"Lock must be at least a month long.\");\r\n        require(_releaseTime < block.timestamp + 365 days, \"Lock must be less than a year long.\");\r\n        ReleaseTime[_token] = _releaseTime;\r\n    }\r\n\r\n    // Transfers tokens held by the timelock to the beneficiary. Will only succeed if invoked after the release time.\r\n    function release(address _token) public virtual {\r\n        require(block.timestamp >= ReleaseTime[_token], \"TokenTimelock: current time is before release time\");\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\r\n        IERC20(_token).transfer(beneficiary, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_releaseTime\",\"type\":\"uint64\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenTimelock", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70ac4f6aa96b034c209fd1a60b7fd37d2e7093f9649896ff250c8fea34fe8784"}]}