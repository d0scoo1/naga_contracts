{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/IPiRats.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IPiRats is IERC721 {\r\n\r\n    struct CrewCaptain {\r\n        bool isCrew;\r\n        uint8 body;\r\n        uint8 clothes;\r\n        uint8 face;\r\n        uint8 mouth;\r\n        uint8 eyes;\r\n        uint8 head;\r\n        uint8 legendRank;\r\n    }\r\n    \r\n    function paidTokens() external view returns (uint256);\r\n    function maxTokens() external view returns (uint256);\r\n    function mintPiRat(address recipient, uint16 amount, uint256 seed) external;\r\n    function plankPiRat(address recipient, uint16 amount, uint256 seed, uint256 _burnToken) external;\r\n    function getTokenTraits(uint256 tokenId) external view returns (CrewCaptain memory);\r\n    function isCrew(uint256 tokenId) external view returns(bool);\r\n    function getBalanceCrew(address owner) external view returns (uint16);\r\n    function getBalanceCaptain(address owner) external view returns (uint16);\r\n    function getTotalRank(address owner) external view returns (uint256);\r\n    function walletOfOwner(address owner) external view returns (uint256[] memory);\r\n    function getTotalPiratsMinted() external view returns(uint256 totalPiratsMinted);\r\n    function getTotalPiratsBurned() external view returns(uint256 totalPiratsBurned);\r\n    function getTotalPirats() external view returns(uint256 totalPirats);\r\n  \r\n}\r\n// File: contracts/IPOTMTraits.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IPOTMTraits {\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n  function selectMintTraits(uint256 seed) external view returns (IPiRats.CrewCaptain memory t);\r\n  function selectPlankTraits(uint256 seed) external view returns (IPiRats.CrewCaptain memory t);\r\n}\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/POTMTraits.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////\r\n//     \u2554\u2550\u2557\u2566\u2566\u2550\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557       //\r\n//     \u2560\u2550\u255d\u2551\u2560\u2566\u255d\u2560\u2550\u2563 \u2551 \u255a\u2550\u2557       //\r\n//     \u2569  \u2569\u2569\u255a\u2550\u2569 \u2569 \u2569 \u255a\u2550\u255d       //\r\n//     \u2554\u2550\u2557\u2554\u2550\u2557  \u2554\u2566\u2557\u2566 \u2566\u2554\u2550\u2557      //\r\n//     \u2551 \u2551\u2560\u2563    \u2551 \u2560\u2550\u2563\u2551\u2563       //\r\n//     \u255a\u2550\u255d\u255a     \u2569 \u2569 \u2569\u255a\u2550\u255d      //\r\n//\u2554\u2566\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557\u2566  \u2566\u2554\u2550\u2557\u2566\u2550\u2557\u2554\u2550\u2557\u2554\u2550\u2557//\r\n//\u2551\u2551\u2551\u2551\u2563  \u2551 \u2560\u2550\u2563\u255a\u2557\u2554\u255d\u2551\u2563 \u2560\u2566\u255d\u255a\u2550\u2557\u2551\u2563 //\r\n//\u2569 \u2569\u255a\u2550\u255d \u2569 \u2569 \u2569 \u255a\u255d \u255a\u2550\u255d\u2569\u255a\u2550\u255a\u2550\u255d\u255a\u2550\u255d//\r\n////////////////////////////////\r\n\r\ncontract PiRatTraits is Ownable, IPOTMTraits {\r\n\r\n  using Strings for uint256;\r\n\r\n  struct Trait {\r\n    string name;\r\n    string png;\r\n  }\r\n\r\n  string[7] private _traitTypes = [\r\n    \"Body\",\r\n    \"Clothes\",\r\n    \"Face\",\r\n    \"Mouth\",\r\n    \"Eyes\",\r\n    \"Head\",\r\n    \"Legend Rank\"\r\n  ];\r\n\r\n  string[3] private _captainRanks = [\r\n    \"8\",\r\n    \"9\",\r\n    \"10\"\r\n  ];\r\n\r\n  string[7] private _crewRanks = [\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"7\"\r\n  ];\r\n\r\n  mapping(uint8 => mapping(uint8 => Trait)) private traitData;\r\n\r\n  IPiRats public potm;\r\n\r\n    // list of probabilities for each trait type\r\n    // 0 - 6 are associated with Crew, 7 - 11 are associated with Captains\r\n    uint8[][14] private rarities;\r\n    // list of aliases for Walker's Alias algorithm\r\n    // 0 - 6 are associated with Crew, 7 - 11 are associated with Captains\r\n    uint8[][14] private aliases;\r\n\r\n    constructor() {\r\n        // A.J. Walker's Alias Algorithm //\r\n        \r\n        // CREW //\r\n        // body\r\n        rarities[0] = [15, 35, 55, 95, 125, 155, 175, 255];\r\n        aliases[0] = [0, 1, 2, 3, 4, 5, 6, 7];\r\n        // clothes\r\n        rarities[1] = [51, 54, 57, 64, 72, 90, 194, 199, 202, 207, 212, 135, 177, 219, 141, 183, 225, 147, 189, 231, 135, 135, 135, 135, 246, 150, 150, 156, 165, 171, 180, 186, 195, 201, 210, 243, 255];\r\n        aliases[1] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\r\n        // face\r\n        rarities[2] = [51 ,54 ,57, 64, 72, 90, 194, 199, 202, 207, 212];\r\n        aliases[2] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        // mouth\r\n        rarities[3] = [255, 120, 195, 45, 75];\r\n        aliases[3] = [0, 1, 2, 3, 4];\r\n        // eyes\r\n        rarities[4] = [75, 180, 165, 120, 60, 150, 105, 195, 45, 225, 75, 45, 195, 120, 255];\r\n        aliases[4] =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n        // head\r\n        rarities[5] = [77, 255, 128, 77, 153, 153, 153, 77, 153, 230, 77, 77, 77, 204, 179, 230, 77, 179, 128, 179, 153, 230, 77, 77, 102, 77, 153, 153, 204, 77];\r\n        aliases[5] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28];\r\n        // Legend\r\n        rarities[6] = [255, 175, 125, 95, 55, 35, 15];\r\n        aliases[6] = [0, 1, 2, 3, 4, 5, 6];      \r\n\r\n        // CAPTAIN //\r\n        // body\r\n        rarities[7] = [15, 32, 32, 32, 32, 32, 16, 65];\r\n        aliases[7] = [0, 1, 2, 3, 4, 5, 6, 7];\r\n        // clothes\r\n        rarities[8] = [153, 153, 255, 102, 77, 230];\r\n        aliases[8] = [0, 1, 2, 3, 4, 5];\r\n        // face\r\n        rarities[9] = [243, 189, 133, 133, 57, 95, 152, 135, 133, 57, 222, 168, 57, 57, 38, 114, 114, 114, 255];\r\n        aliases[9] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\r\n        // mouth\r\n        rarities[10] = [255, 120, 195, 45, 75];\r\n        aliases[10] = [0, 1, 2, 3, 4];\r\n        // eyes\r\n        rarities[11] = [75, 180, 165, 120, 60, 150, 105, 195, 45, 225, 75, 45, 195, 120, 255];\r\n        aliases[11] =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n        // head\r\n        rarities[12] = [153, 153, 255, 102, 77, 230];\r\n        aliases[12] = [0, 1, 2, 3, 4, 5];\r\n        // Legend\r\n        rarities[13] = [255, 175, 125];\r\n        aliases[13] = [0, 1, 2]; \r\n    }\r\n\r\n  /// ADMIN ///\r\n\r\n  function setPOTM(address _potm) external onlyOwner {\r\n    potm = IPiRats(_potm);\r\n  }\r\n\r\n  function uploadTraits(uint8 traitType, uint8[] calldata traitIds, Trait[] calldata traits) external onlyOwner {\r\n    require(traitIds.length == traits.length, \"Mismatched inputs\");\r\n    for (uint i = 0; i < traits.length; i++) {\r\n      traitData[traitType][traitIds[i]] = Trait(\r\n        traits[i].name,\r\n        traits[i].png\r\n      );\r\n    }\r\n  }\r\n\r\n  /// SELECT TRATIS ///\r\n\r\n    function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\r\n        uint8 trait = uint8(seed) % uint8(rarities[traitType].length);\r\n        if (seed >> 8 < rarities[traitType][trait]) return trait;\r\n        return aliases[traitType][trait];\r\n    }\r\n\r\n    function selectMintTraits(uint256 seed) external override view returns (IPiRats.CrewCaptain memory t) {\r\n    require(_msgSender() == address(potm), \"You cannot do that - selectMintTraits\");  \r\n        t.isCrew = (seed & 0xFFFF) % 10 != 0;\r\n        uint8 shift = t.isCrew ? 0 : 7;\r\n        seed >>= 16;\r\n        t.body = selectTrait(uint16(seed & 0xFFFF), 0 + shift);\r\n        seed >>= 16;\r\n        t.clothes = selectTrait(uint16(seed & 0xFFFF), 1 + shift);\r\n        seed >>= 16;\r\n        t.face = selectTrait(uint16(seed & 0xFFFF), 2 + shift);\r\n        seed >>= 16;\r\n        t.mouth = selectTrait(uint16(seed & 0xFFFF), 3 + shift);\r\n        seed >>= 16;\r\n        t.eyes = selectTrait(uint16(seed & 0xFFFF), 4 + shift);\r\n        seed >>= 16;\r\n        t.head = selectTrait(uint16(seed & 0xFFFF), 5 + shift);\r\n        seed >>= 16;\r\n        t.legendRank = selectTrait(uint16(seed & 0xFFFF), 6 + shift);\r\n    }\r\n\r\n    function selectPlankTraits(uint256 seed) external override view returns (IPiRats.CrewCaptain memory t) {\r\n    require(_msgSender() == address(potm), \"You cannot do that - selectPlankTraits\");  \r\n        t.isCrew = (seed & 0xFFFF) % 25 != 0;\r\n        uint8 shift = t.isCrew ? 0 : 7;\r\n        seed >>= 16;\r\n        t.body = selectTrait(uint16(seed & 0xFFFF), 0 + shift);\r\n        seed >>= 16;\r\n        t.clothes = selectTrait(uint16(seed & 0xFFFF), 1 + shift);\r\n        seed >>= 16;\r\n        t.face = selectTrait(uint16(seed & 0xFFFF), 2 + shift);\r\n        seed >>= 16;\r\n        t.mouth = selectTrait(uint16(seed & 0xFFFF), 3 + shift);\r\n        seed >>= 16;\r\n        t.eyes = selectTrait(uint16(seed & 0xFFFF), 4 + shift);\r\n        seed >>= 16;\r\n        t.head = selectTrait(uint16(seed & 0xFFFF), 5 + shift);\r\n        seed >>= 16;\r\n        t.legendRank = selectTrait(uint16(seed & 0xFFFF), 6 + shift);\r\n    }\r\n\r\n  /// RENDER ///\r\n\r\n  function drawTrait(Trait memory trait) internal pure returns (string memory) {\r\n    return string(abi.encodePacked(\r\n      '<image x=\"4\" y=\"4\" width=\"32\" height=\"32\" image-rendering=\"pixelated\" preserveAspectRatio=\"xMidYMid\" xlink:href=\"data:image/png;base64,',\r\n      trait.png,\r\n      '\"/>'\r\n    ));\r\n  }\r\n\r\n  function drawSVG(uint256 tokenId) internal view returns (string memory) {\r\n    string memory svgString;\r\n    IPiRats.CrewCaptain memory s = potm.getTokenTraits(tokenId);\r\n    if (s.isCrew) {\r\n    svgString = string(abi.encodePacked(\r\n      drawTrait(traitData[0][s.body]),\r\n      drawTrait(traitData[1][s.clothes]),\r\n      drawTrait(traitData[2][s.face]),\r\n      drawTrait(traitData[3][s.mouth]),\r\n      drawTrait(traitData[4][s.eyes]),\r\n      drawTrait(traitData[5][s.head])\r\n    ));\r\n  } else {\r\n    svgString = string(abi.encodePacked(\r\n      drawTrait(traitData[0][s.body]),\r\n      drawTrait(traitData[8][s.clothes]),\r\n      drawTrait(traitData[9][s.face]),\r\n      drawTrait(traitData[3][s.mouth]),\r\n      drawTrait(traitData[4][s.eyes]),\r\n      drawTrait(traitData[12][s.head])\r\n    ));\r\n  }\r\n  return string(abi.encodePacked(\r\n    '<svg id=\"potm\" width=\"100%\" height=\"100%\" version=\"1.1\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">',\r\n    svgString,\r\n    \"</svg>\"\r\n   ));\r\n }\r\n\r\n  function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\r\n    return string(abi.encodePacked(\r\n      '{\"trait_type\":\"',\r\n      traitType,\r\n      '\",\"value\":\"',\r\n      value,\r\n      '\"}'\r\n    ));\r\n  }\r\n\r\n  function compileAttributes(uint256 tokenId) internal view returns (string memory) {\r\n    IPiRats.CrewCaptain memory s = potm.getTokenTraits(tokenId);\r\n    string memory traits;\r\n    if (s.isCrew) {\r\n      traits = string(abi.encodePacked(\r\n        attributeForTypeAndValue(_traitTypes[0], traitData[0][s.body].name),',',\r\n        attributeForTypeAndValue(_traitTypes[1], traitData[1][s.clothes].name),',',\r\n        attributeForTypeAndValue(_traitTypes[2], traitData[2][s.face].name),',',\r\n        attributeForTypeAndValue(_traitTypes[3], traitData[3][s.mouth].name),',',\r\n        attributeForTypeAndValue(_traitTypes[4], traitData[4][s.eyes].name),',',\r\n        attributeForTypeAndValue(_traitTypes[5], traitData[5][s.head].name),',',\r\n        attributeForTypeAndValue(\"Legend Rank\", _crewRanks[s.legendRank]),','\r\n      ));\r\n    } else {\r\n      traits = string(abi.encodePacked(\r\n        attributeForTypeAndValue(_traitTypes[0], traitData[0][s.body].name),',',\r\n        attributeForTypeAndValue(_traitTypes[1], traitData[8][s.clothes].name),',',\r\n        attributeForTypeAndValue(_traitTypes[2], traitData[9][s.face].name),',',\r\n        attributeForTypeAndValue(_traitTypes[3], traitData[3][s.mouth].name),',',\r\n        attributeForTypeAndValue(_traitTypes[4], traitData[4][s.eyes].name),',',\r\n        attributeForTypeAndValue(_traitTypes[5], traitData[12][s.head].name),',',\r\n        attributeForTypeAndValue(\"Legend Rank\", _captainRanks[s.legendRank]),','\r\n      ));\r\n    }\r\n\r\n    return string(abi.encodePacked(\r\n      '[',\r\n      traits,\r\n      '{\"trait_type\":\"Generation\",\"value\":',\r\n      tokenId <= potm.paidTokens() ? '\"Gen 0\"' : '\"Gen 1\"',\r\n      '},{\"trait_type\":\"Type\",\"value\":',\r\n      s.isCrew ? '\"Crew\"' : '\"Captain\"',\r\n      '}]'\r\n    ));\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n    require(_msgSender() == address(potm), \"You cannot do that - tokenURI\");\r\n    IPiRats.CrewCaptain memory s = potm.getTokenTraits(tokenId);\r\n\r\n    string memory metadata = string(abi.encodePacked(\r\n      '{\"name\": \"',\r\n      s.isCrew ? 'Crew #' : 'Captain #',\r\n      tokenId.toString(),\r\n      '\", \"description\": \"Thousands of Captains and their trusty Crew set sail on a voyage across the metaverse. A treasure of $BOOTY awaits, but danger and rough seas lay ahead. All the metadata and images are generated and stored 100% on-chain. No website, No IPFS. No API. Just the Ethereum blockchain.\", \"image\": \"data:image/svg+xml;base64,',\r\n      base64(bytes(drawSVG(tokenId))),\r\n      '\", \"attributes\":',\r\n      compileAttributes(tokenId),\r\n      \"}\"\r\n    ));\r\n\r\n    return string(abi.encodePacked(\r\n      \"data:application/json;base64,\",\r\n      base64(bytes(metadata))\r\n    ));\r\n  }\r\n\r\n  \r\n  string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n  function base64(bytes memory data) internal pure returns (string memory) {\r\n    if (data.length == 0) return '';\r\n    \r\n    // load the table into memory\r\n    string memory table = TABLE;\r\n\r\n    // multiply by 4/3 rounded up\r\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n    // add some extra buffer at the end required for the writing\r\n    string memory result = new string(encodedLen + 32);\r\n\r\n    assembly {\r\n      // set the actual output length\r\n      mstore(result, encodedLen)\r\n      \r\n      // prepare the lookup table\r\n      let tablePtr := add(table, 1)\r\n      \r\n      // input ptr\r\n      let dataPtr := data\r\n      let endPtr := add(dataPtr, mload(data))\r\n      \r\n      // result ptr, jump over length\r\n      let resultPtr := add(result, 32)\r\n      \r\n      // run over the input, 3 bytes at a time\r\n      for {} lt(dataPtr, endPtr) {}\r\n      {\r\n          dataPtr := add(dataPtr, 3)\r\n          \r\n          // read 3 bytes\r\n          let input := mload(dataPtr)\r\n          \r\n          // write 4 characters\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n      }\r\n      \r\n      // padding with '='\r\n      switch mod(mload(data), 3)\r\n      case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n      case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n}\r\n// 0xHooch //", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potm\",\"outputs\":[{\"internalType\":\"contract IPiRats\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"selectMintTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCrew\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"clothes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"face\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legendRank\",\"type\":\"uint8\"}],\"internalType\":\"struct IPiRats.CrewCaptain\",\"name\":\"t\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"selectPlankTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCrew\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"clothes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"face\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legendRank\",\"type\":\"uint8\"}],\"internalType\":\"struct IPiRats.CrewCaptain\",\"name\":\"t\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_potm\",\"type\":\"address\"}],\"name\":\"setPOTM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"internalType\":\"struct PiRatTraits.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"uploadTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PiRatTraits", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f73e1a38bc84267fcf4f44b14166109a30ab363dce2f76e0382bb48acedcb02"}]}