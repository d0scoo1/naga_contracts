{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/lendingpool/KyokoLendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../credit/CreditSystem.sol\\\";\\nimport \\\"../interfaces/IKToken.sol\\\";\\nimport \\\"../token/KToken.sol\\\";\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"./LendingPoolStorage.sol\\\";\\nimport \\\"../libraries/ReserveLogic.sol\\\";\\nimport \\\"./DataTypes.sol\\\";\\nimport \\\"../libraries/ValidationLogic.sol\\\";\\n\\n/**\\n * @dev kyoko ERC20 lending pool\\n */\\ncontract KyokoLendingPool is\\n    ILendingPool,\\n    LendingPoolStorage,\\n    AccessControlEnumerableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using SafeMathUpgradeable for uint256;\\n\\n    bytes32 public constant LENDING_POOL_ADMIN =\\n        keccak256(\\\"LENDING_POOL_ADMIN\\\");\\n\\n    uint256 public constant LENDINGPOOL_REVISION = 0x0;\\n\\n    modifier whenNotPaused() {\\n        _whenNotPaused();\\n        _;\\n    }\\n\\n    function _whenNotPaused() internal view {\\n        require(!_paused, \\\"LP_IS_PAUSED\\\");\\n    }\\n\\n    CreditSystem public creditContract;\\n\\n    /**\\n     * @dev only the lending pool admin can operate.\\n     */\\n    modifier onlyLendingPoolAdmin() {\\n        require(\\n            hasRole(LENDING_POOL_ADMIN, _msgSender()),\\n            \\\"Only the lending pool admin has permission to do this operation\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev initialize lending pool with credit system\\n     */\\n    function initialize(address _creditContract) public initializer {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        creditContract = CreditSystem(_creditContract);\\n    }\\n\\n    /**\\n    * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n    * - E.g. User deposits 100 USDT and gets in return 100 kUSDT\\n    * @param asset The address of the underlying asset to deposit\\n    * @param amount The amount to be deposited\\n    * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n    *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n    *   is a different wallet\\n    **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external override whenNotPaused {\\n        DataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n        ValidationLogic.validateDeposit(reserve, amount);\\n\\n        address kToken = reserve.kTokenAddress;\\n        reserve.updateState();\\n        reserve.updateInterestRates(asset, kToken, amount, 0);\\n\\n        IERC20Upgradeable(asset).safeTransferFrom(msg.sender, kToken, amount);\\n\\n        IKToken(kToken).mint(onBehalfOf, amount, reserve.liquidityIndex);\\n\\n        emit Deposit(asset, msg.sender, onBehalfOf, amount);\\n    }\\n\\n    /**\\n    * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent kTokens owned\\n    * E.g. User has 100 kUSDT, calls withdraw() and receives 100 USDT, burning the 100 kUSDT\\n    * @param asset The address of the underlying asset to withdraw\\n    * @param amount The underlying amount to be withdrawn\\n    *   - Send the value type(uint256).max in order to withdraw the whole kToken balance\\n    * @param to Address that will receive the underlying, same as msg.sender if the user\\n    *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n    *   different wallet\\n    * @return The final amount withdrawn\\n    **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external override whenNotPaused returns (uint256) {\\n        DataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n        address kToken = reserve.kTokenAddress;\\n        uint256 userBalance = IKToken(kToken).balanceOf(msg.sender);\\n        uint256 amountToWithdraw = amount;\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n        ValidationLogic.validateWithdraw(\\n            asset,\\n            amountToWithdraw,\\n            userBalance,\\n            _reserves\\n        );\\n        reserve.updateState();\\n        reserve.updateInterestRates(asset, kToken, 0, amountToWithdraw);\\n        IKToken(kToken).burn(\\n            msg.sender,\\n            to,\\n            amountToWithdraw,\\n            reserve.liquidityIndex\\n        );\\n        emit Withdraw(asset, msg.sender, to, amountToWithdraw);\\n        return amountToWithdraw;\\n    }\\n\\n    /**\\n    * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n    * already had enough credit line, or he was given enough allowance by a credit delegator on the\\n    * corresponding debt token\\n    * - E.g. User borrows 100 USDT passing as `onBehalfOf` his own address, receiving the 100 USDT in his wallet\\n    *   and 100 variable debt tokens\\n    * @param asset The address of the underlying asset to borrow\\n    * @param amount The amount to be borrowed\\n    * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n    * calling the function if he wants to borrow against his own credit line, or the address of the credit delegator\\n    * if he has been given credit delegation allowance\\n    **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external override whenNotPaused {\\n        require(amount > 0, \\\"BORROW_AMOUNT_LESS_THAN_ZERO\\\");\\n        DataTypes.ReserveData storage reserve = _reserves[asset];\\n        _executeBorrow(\\n            ExecuteBorrowParams(\\n                asset,\\n                msg.sender,\\n                onBehalfOf,\\n                amount,\\n                reserve.kTokenAddress,\\n                true\\n            )\\n        );\\n    }\\n\\n    /**\\n    * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n    * - E.g. User repays 100 USDT, burning 100 variable debt tokens of the `onBehalfOf` address\\n    * @param asset The address of the borrowed underlying asset previously borrowed\\n    * @param amount The amount to repay\\n    * - Send the value type(uint256).max in order to repay the whole debt for `asset`\\n    * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n    * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n    * other borrower whose debt should be removed\\n    * @return The final amount repaid\\n    **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external override whenNotPaused returns (uint256) {\\n        DataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n        uint256 variableDebt = IERC20Upgradeable(\\n            reserve.variableDebtTokenAddress\\n        ).balanceOf(onBehalfOf);\\n\\n        ValidationLogic.validateRepay(\\n            reserve,\\n            amount,\\n            onBehalfOf,\\n            variableDebt\\n        );\\n\\n        uint256 paybackAmount = variableDebt;\\n\\n        if (amount < paybackAmount) {\\n            paybackAmount = amount;\\n        }\\n\\n        reserve.updateState();\\n\\n        IVariableDebtToken(reserve.variableDebtTokenAddress).burn(\\n            onBehalfOf,\\n            paybackAmount,\\n            reserve.variableBorrowIndex\\n        );\\n\\n        address kToken = reserve.kTokenAddress;\\n        reserve.updateInterestRates(asset, kToken, paybackAmount, 0);\\n\\n        IERC20Upgradeable(asset).safeTransferFrom(\\n            msg.sender,\\n            kToken,\\n            paybackAmount\\n        );\\n\\n        IKToken(kToken).handleRepayment(msg.sender, paybackAmount);\\n\\n        emit Repay(asset, onBehalfOf, msg.sender, paybackAmount);\\n\\n        return paybackAmount;\\n    }\\n\\n    /**\\n    * @dev Initializes a reserve, activating it, assigning an kToken and debt tokens and an\\n    * interest rate strategy\\n    * - Only callable by the LendingPoolAdmin role\\n    * @param asset The address of the underlying asset of the reserve\\n    * @param kTokenAddress The address of the kToken that will be assigned to the reserve\\n    * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n    * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n    * @param reserveDecimals The decimals of the underlying asset of the reserve\\n    * @param reserveFactor The factor of the underlying asset of the reserve\\n    **/\\n    function initReserve(\\n        address asset,\\n        address kTokenAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress,\\n        uint8 reserveDecimals,\\n        uint16 reserveFactor\\n    ) external override onlyLendingPoolAdmin {\\n        require(AddressUpgradeable.isContract(asset), \\\"NOT_CONTRACT\\\");\\n\\n        _reserves[asset].init(\\n            kTokenAddress,\\n            variableDebtAddress,\\n            interestRateStrategyAddress\\n        );\\n\\n        _addReserveToList(asset, reserveDecimals, reserveFactor);\\n        emit InitReserve(asset, kTokenAddress, variableDebtAddress, interestRateStrategyAddress, reserveDecimals, reserveFactor);\\n    }\\n\\n    function _addReserveToList(\\n        address asset,\\n        uint8 reserveDecimals,\\n        uint16 reserveFactor\\n    ) internal {\\n        uint256 reservesCount = _reservesCount;\\n\\n        bool reserveAlreadyAdded = _reserves[asset].id != 0 ||\\n            _reservesList[0] == asset;\\n\\n        if (!reserveAlreadyAdded) {\\n            _reserves[asset].id = uint8(reservesCount);\\n            _reserves[asset].decimals = uint8(reserveDecimals);\\n            _reserves[asset].factor = uint16(reserveFactor);\\n            _reservesList[reservesCount] = asset;\\n\\n            _reservesCount = reservesCount + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _reserves[asset].getNormalizedDebt();\\n    }\\n\\n    function paused() external view override returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n    * @dev Set the _pause state of a reserve\\n    * - Only callable by the LendingPoolAdmin role\\n    * @param val `true` to pause the reserve, `false` to un-pause it\\n    */\\n    function setPause(bool val) external override onlyLendingPoolAdmin {\\n        _paused = val;\\n        if (_paused) {\\n            emit Paused();\\n        } else {\\n            emit Unpaused();\\n        }\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        address kTokenAddress;\\n        bool releaseUnderlying;\\n    }\\n\\n    function _executeBorrow(ExecuteBorrowParams memory vars) internal {\\n        DataTypes.ReserveData storage reserve = _reserves[vars.asset];\\n\\n        (\\n            uint256 totalDebtInWEI,\\n            uint256 availableBorrowsInWEI\\n        ) = getUserAccountData(vars.user);\\n\\n        ValidationLogic.validateBorrow(\\n            availableBorrowsInWEI,\\n            reserve,\\n            vars.amount\\n        );\\n\\n        reserve.updateState();\\n\\n        IVariableDebtToken(reserve.variableDebtTokenAddress).mint(\\n            vars.user,\\n            vars.onBehalfOf,\\n            vars.amount,\\n            reserve.variableBorrowIndex\\n        );\\n\\n        reserve.updateInterestRates(\\n            vars.asset,\\n            vars.kTokenAddress,\\n            0,\\n            vars.releaseUnderlying ? vars.amount : 0\\n        );\\n\\n        if (vars.releaseUnderlying) {\\n            IKToken(vars.kTokenAddress).transferUnderlyingTo(\\n                vars.user,\\n                vars.amount\\n            );\\n        }\\n\\n        emit Borrow(\\n            vars.asset,\\n            vars.user,\\n            vars.onBehalfOf,\\n            vars.amount,\\n            reserve.currentVariableBorrowRate\\n        );\\n    }\\n\\n    /**\\n    * @dev Returns the state and configuration of the reserve\\n    * @param asset The address of the underlying asset of the reserve\\n    * @return The state of the reserve\\n    **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        override\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[asset];\\n    }\\n\\n    /**\\n    * @dev Returns the user account data across all the reserves\\n    * @param user The address of the user\\n    * @return totalDebtInWEI the total debt in WEI of the user\\n    * @return availableBorrowsInWEI the borrowing power left of the user\\n    **/\\n    function getUserAccountData(address user)\\n        public\\n        view\\n        override\\n        returns (uint256 totalDebtInWEI, uint256 availableBorrowsInWEI)\\n    {\\n        totalDebtInWEI = GenericLogic.calculateUserAccountData(\\n            user,\\n            _reserves,\\n            _reservesList,\\n            _reservesCount\\n        );\\n        uint256 creditLine = creditContract.getG2GCreditLine(user);\\n\\n        availableBorrowsInWEI = totalDebtInWEI >= creditLine\\n            ? 0\\n            : creditLine.sub(totalDebtInWEI);\\n    }\\n\\n    /**\\n    * @dev Updates the address of the interest rate strategy contract\\n    * - Only callable by the LendingPoolAdmin role\\n    * @param asset The address of the underlying asset of the reserve\\n    * @param rateStrategyAddress The address of the interest rate strategy contract\\n    **/\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external override onlyLendingPoolAdmin {\\n        _reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\\n    }\\n\\n    /**\\n    * @dev Returns the normalized income per unit of asset\\n    * @param asset The address of the underlying asset of the reserve\\n    * @return The reserve's normalized income\\n    */\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _reserves[asset].getNormalizedIncome();\\n    }\\n\\n    /**\\n    * @dev Returns the list of the initialized reserves\\n    **/\\n    function getReservesList()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        address[] memory _activeReserves = new address[](_reservesCount);\\n\\n        for (uint256 i = 0; i < _reservesCount; i++) {\\n            _activeReserves[i] = _reservesList[i];\\n        }\\n        return _activeReserves;\\n    }\\n\\n    /**\\n    * @dev Sets the reserve factor of the reserve\\n    * @param asset The address of the underlying asset in reserve\\n    * @param reserveFactor The reserve factor\\n    **/\\n    function setReserveFactor(address asset, uint16 reserveFactor)\\n        external\\n        onlyLendingPoolAdmin\\n    {\\n        DataTypes.ReserveData storage reserve = _reserves[asset];\\n        reserve.setReserveFactor(reserveFactor);\\n        emit ReserveFactorChanged(asset, reserveFactor);\\n    }\\n\\n    /**\\n    * @dev Sets the active state of the reserve\\n    * @param asset The address of the underlying asset in reserve\\n    * @param active The active state\\n    **/\\n    function setActive(address asset, bool active)\\n        external\\n        onlyLendingPoolAdmin\\n    {\\n        DataTypes.ReserveData storage reserve = _reserves[asset];\\n        reserve.setActive(active);\\n        emit ReserveActiveChanged(asset, active);\\n    }\\n\\n    /**\\n    * @dev Gets the active state of the reserve\\n    * @param asset The address of the underlying asset in reserve\\n    * @return The active state\\n    **/\\n    function getActive(address asset) external view override returns (bool) {\\n        DataTypes.ReserveData storage reserve = _reserves[asset];\\n        return reserve.getActive();\\n    }\\n\\n    /**\\n    * @dev Sets the credit system address of the lending pool\\n    * @param _creditContract The address of the underlying asset in reserve\\n    * - Only callable by the LendingPoolAdmin role\\n    **/\\n    function setCreditStrategy(address _creditContract)\\n        external\\n        override\\n        onlyLendingPoolAdmin\\n    {\\n        creditContract = CreditSystem(_creditContract);\\n        emit CreditStrategyChanged(_creditContract);\\n    }\\n\\n    /**\\n    * @dev Gets the credit system address of the lending pool\\n    **/\\n    function getCreditStrategy() external view override returns (address) {\\n        return address(creditContract);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/KToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IKToken.sol\\\";\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"../libraries/KyokoMath.sol\\\";\\nimport \\\"./IncentivizedERC20.sol\\\";\\n\\n/**\\n * @dev if the user deposit token, then will mint corresponding KToken.\\n * @dev it is similar to a certificate of deposit.\\n */\\ncontract KToken is Initializable, IncentivizedERC20, IKToken {\\n    using KyokoMath for uint256;\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bytes public constant EIP712_REVISION = bytes(\\\"1\\\");\\n    bytes32 internal constant EIP712_DOMAIN =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    uint256 public constant KTOKEN_REVISION = 0x1;\\n\\n    /// @dev owner => next valid nonce to submit with permit()\\n    mapping(address => uint256) public _nonces;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    ILendingPool internal _pool;\\n    address internal _treasury;\\n    address internal _underlyingAsset;\\n\\n    modifier onlyLendingPool() {\\n        require(\\n            _msgSender() == address(_pool),\\n            \\\"CT_CALLER_MUST_BE_LENDING_POOL\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the kToken\\n     * @param pool The address of the lending pool where this kToken will be used\\n     * @param treasury The address of the Kyoko treasury, receiving the fees on this kToken\\n     * @param underlyingAsset The address of the underlying asset of this kToken (E.g. USDT for kUSDT)\\n     * @param kTokenDecimals The decimals of the kToken, same as the underlying asset's\\n     * @param kTokenName The name of the kToken\\n     * @param kTokenSymbol The symbol of the kToken\\n     */\\n    function initialize(\\n        ILendingPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        uint8 kTokenDecimals,\\n        string calldata kTokenName,\\n        string calldata kTokenSymbol,\\n        bytes calldata params\\n    ) external override initializer {\\n        IncentivizedERC20.initialize(kTokenName, kTokenSymbol, kTokenDecimals); // Do not forget this call!\\n\\n        uint256 chainId;\\n\\n        //solium-disable-next-line\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN,\\n                keccak256(bytes(kTokenName)),\\n                keccak256(EIP712_REVISION),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n\\n        _setName(kTokenName);\\n        _setSymbol(kTokenSymbol);\\n        _setDecimals(kTokenDecimals);\\n\\n        _pool = pool;\\n        _treasury = treasury;\\n        _underlyingAsset = underlyingAsset;\\n\\n        emit Initialized(\\n            underlyingAsset,\\n            address(pool),\\n            treasury,\\n            kTokenDecimals,\\n            kTokenName,\\n            kTokenSymbol,\\n            params\\n        );\\n    }\\n\\n    /**\\n     * @dev Burns kTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * - Only callable by the LendingPool, as extra state updates there need to be managed\\n     * @param user The owner of the kTokens, getting them burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external override onlyLendingPool {\\n        uint256 amountScaled = amount.rayDiv(index);\\n        require(amountScaled != 0, \\\"CT_INVALID_BURN_AMOUNT\\\");\\n        _burn(user, amountScaled);\\n\\n        IERC20Upgradeable(_underlyingAsset).safeTransfer(\\n            receiverOfUnderlying,\\n            amount\\n        );\\n\\n        emit Transfer(user, address(0), amount);\\n        emit Burn(user, receiverOfUnderlying, amount, index);\\n    }\\n\\n    /**\\n     * @dev Mints `amount` kTokens to `user`\\n     * - Only callable by the LendingPool, as extra state updates there need to be managed\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external override onlyLendingPool returns (bool) {\\n        uint256 previousBalance = super.balanceOf(user);\\n\\n        uint256 amountScaled = amount.rayDiv(index);\\n        require(amountScaled != 0, \\\"CT_INVALID_MINT_AMOUNT\\\");\\n        _mint(user, amountScaled);\\n\\n        emit Transfer(address(0), user, amount);\\n        emit Mint(user, amount, index);\\n\\n        return previousBalance == 0;\\n    }\\n\\n    /**\\n     * @dev Mints kTokens to the reserve treasury\\n     * - Only callable by the LendingPool\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index)\\n        external\\n        override\\n        onlyLendingPool\\n    {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        address treasury = _treasury;\\n\\n        // Compared to the normal mint, we don't check for rounding errors.\\n        // The amount to mint can easily be very small since it is a fraction of the interest ccrued.\\n        // In that case, the treasury will experience a (very small) loss, but it\\n        // wont cause potentially valid transactions to fail.\\n        _mint(treasury, amount.rayDiv(index));\\n\\n        emit Transfer(address(0), treasury, amount);\\n        emit Mint(treasury, amount, index);\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address user)\\n        public\\n        view\\n        override(IncentivizedERC20, IERC20Upgradeable)\\n        returns (uint256)\\n    {\\n        return\\n            super.balanceOf(user).rayMul(\\n                _pool.getReserveNormalizedIncome(_underlyingAsset)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return super.balanceOf(user);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user)\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return (super.balanceOf(user), super.totalSupply());\\n    }\\n\\n    /**\\n     * @dev calculates the total supply of the specific kToken\\n     * since the balance of every single user increases over time, the total supply\\n     * does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply()\\n        public\\n        view\\n        override(IncentivizedERC20, IERC20Upgradeable)\\n        returns (uint256)\\n    {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            currentSupplyScaled.rayMul(\\n                _pool.getReserveNormalizedIncome(_underlyingAsset)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n     * @return the scaled total supply\\n     **/\\n    function scaledTotalSupply()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Kyoko treasury, receiving the fees on this kToken\\n     **/\\n    function RESERVE_TREASURY_ADDRESS() public view returns (address) {\\n        return _treasury;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the underlying asset of this kToken (E.g. USDT for kUSDT)\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() public view override returns (address) {\\n        return _underlyingAsset;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the lending pool where this kToken is used\\n     **/\\n    function POOL() public view returns (ILendingPool) {\\n        return _pool;\\n    }\\n\\n    /**\\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n     * assets in borrow(), withdraw()\\n     * @param target The recipient of the kTokens\\n     * @param amount The amount getting transferred\\n     * @return The amount transferred\\n     **/\\n    function transferUnderlyingTo(address target, uint256 amount)\\n        external\\n        override\\n        onlyLendingPool\\n        returns (uint256)\\n    {\\n        IERC20Upgradeable(_underlyingAsset).safeTransfer(target, amount);\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Invoked to execute actions on the kToken side after a repayment.\\n     * @param user The user executing the repayment\\n     * @param amount The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 amount)\\n        external\\n        override\\n        onlyLendingPool\\n    {}\\n\\n    /**\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(owner != address(0), \\\"INVALID_OWNER\\\");\\n        //solium-disable-next-line\\n        require(block.timestamp <= deadline, \\\"INVALID_EXPIRATION\\\");\\n        uint256 currentValidNonce = _nonces[owner];\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        currentValidNonce,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        require(owner == ecrecover(digest, v, r, s), \\\"INVALID_SIGNATURE\\\");\\n        _nonces[owner] = currentValidNonce.add(1);\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Transfers the kTokens between two users. Validates the transfer\\n     * (ie checks for valid credit line after the transfer) if required\\n     * @param from The source address\\n     * @param to The destination address\\n     * @param amount The amount getting transferred\\n     * @param validate `true` if the transfer needs to be validated\\n     **/\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool validate\\n    ) internal {\\n        address underlyingAsset = _underlyingAsset;\\n        ILendingPool pool = _pool;\\n\\n        uint256 index = pool.getReserveNormalizedIncome(underlyingAsset);\\n\\n        uint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);\\n        uint256 toBalanceBefore = super.balanceOf(to).rayMul(index);\\n\\n        super._transfer(from, to, amount.rayDiv(index));\\n\\n        // if (validate) {\\n        //   pool.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);\\n        // }\\n\\n        emit BalanceTransfer(from, to, amount, index);\\n    }\\n\\n    /**\\n     * @dev Overrides the parent _transfer to force validated transfer() and transferFrom()\\n     * @param from The source address\\n     * @param to The destination address\\n     * @param amount The amount getting transferred\\n     **/\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        _transfer(from, to, amount, true);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/IncentivizedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n **/\\nabstract contract IncentivizedERC20 is\\n    ContextUpgradeable,\\n    IERC20Upgradeable,\\n    IERC20MetadataUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @return The name of the token\\n     **/\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @return The symbol of the token\\n     **/\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @return The decimals of the token\\n     **/\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @return The total supply of the token\\n     **/\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return The balance of the token\\n     **/\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of tokens from _msgSender() to recipient\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, `false` otherwise\\n     **/\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        emit Transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the allowance of spender on the tokens owned by owner\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend the owner's tokens\\n     * @return The amount of owner's tokens spender is allowed to spend\\n     **/\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Allows `spender` to spend the tokens owned by _msgSender()\\n     * @param spender The user allowed to spend _msgSender() tokens\\n     * @return `true`\\n     **/\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of token from sender to recipient, if _msgSender() is allowed to do so\\n     * @param sender The owner of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, `false` otherwise\\n     **/\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increases the allowance of spender to spend _msgSender() tokens\\n     * @param spender The user allowed to spend on behalf of _msgSender()\\n     * @param addedValue The amount being added to the allowance\\n     * @return `true`\\n     **/\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance of spender to spend _msgSender() tokens\\n     * @param spender The user allowed to spend on behalf of _msgSender()\\n     * @param subtractedValue The amount being subtracted to the allowance\\n     * @return `true`\\n     **/\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 oldSenderBalance = _balances[sender];\\n        _balances[sender] = oldSenderBalance.sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        // uint256 oldRecipientBalance = _balances[recipient];\\n        _balances[recipient] = _balances[recipient].add(amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.add(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.sub(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/ValidationLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../lendingpool/DataTypes.sol\\\";\\nimport \\\"../credit/CreditSystem.sol\\\";\\nimport \\\"./KyokoMath.sol\\\";\\nimport \\\"./PercentageMath.sol\\\";\\nimport \\\"./ReserveLogic.sol\\\";\\nimport \\\"./GenericLogic.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using SafeMathUpgradeable for uint256;\\n    using KyokoMath for uint256;\\n    using PercentageMath for uint256;\\n\\n    uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 4000;\\n    uint256 public constant REBALANCE_UP_USAGE_RATIO_THRESHOLD = 0.95 * 1e27; //usage ratio of 95%\\n\\n    /**\\n    * @dev Validates a deposit action\\n    * @param reserve The reserve object on which the user is depositing\\n    * @param amount The amount to be deposited\\n    */\\n    function validateDeposit(DataTypes.ReserveData storage reserve, uint256 amount) external view {\\n        bool isActive = reserve.getActive();\\n        require(amount != 0, \\\"VL_INVALID_AMOUNT\\\");\\n        require(isActive, \\\"VL_NO_ACTIVE_RESERVE\\\");\\n    }\\n\\n    /**\\n    * @dev Validates a withdraw action\\n    * @param reserveAddress The address of the reserve\\n    * @param amount The amount to be withdrawn\\n    * @param userBalance The balance of the user\\n    * @param reservesData The reserves state\\n    */\\n    function validateWithdraw(\\n        address reserveAddress,\\n        uint256 amount,\\n        uint256 userBalance,\\n        mapping(address => DataTypes.ReserveData) storage reservesData\\n    ) external view {\\n        require(amount != 0, \\\"VL_INVALID_AMOUNT\\\");\\n        require(amount <= userBalance, \\\"VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE\\\");\\n\\n        bool isActive = reservesData[reserveAddress].getActive();\\n        require(isActive, \\\"VL_NO_ACTIVE_RESERVE\\\");\\n    }\\n\\n    struct ValidateBorrowLocalVars {\\n        uint256 userBorrowBalance;\\n        uint256 availableLiquidity;\\n        bool isActive;\\n    }\\n\\n    /**\\n    * @dev Validates a borrow action\\n    * @param availableBorrowsInWEI available borrows in WEI\\n    * @param reserve The reserve state from which the user is borrowing\\n    * @param amount The amount to be borrowed\\n    */\\n\\n    function validateBorrow(\\n        uint256 availableBorrowsInWEI,\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount\\n    ) external view {\\n        ValidateBorrowLocalVars memory vars;\\n        require(availableBorrowsInWEI > 0, \\\"available credit line not enough\\\");\\n        uint256 decimals_ = 1 ether;\\n        uint256 borrowsAmountInWEI = amount.div(10**reserve.decimals).mul(uint256(decimals_));\\n        require(borrowsAmountInWEI <= availableBorrowsInWEI, \\\"borrows exceed credit line\\\");\\n        \\n        vars.isActive = reserve.getActive();\\n\\n        require(vars.isActive, \\\"VL_NO_ACTIVE_RESERVE\\\");\\n        require(amount > 0, \\\"VL_INVALID_AMOUNT\\\");\\n    }\\n\\n    /**\\n    * @dev Validates a repay action\\n    * @param reserve The reserve state from which the user is repaying\\n    * @param amountSent The amount sent for the repayment. Can be an actual value or type(uint256).min\\n    * @param onBehalfOf The address of the user msg.sender is repaying for\\n    * @param variableDebt The borrow balance of the user\\n    */\\n    function validateRepay(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amountSent,\\n        address onBehalfOf,\\n        uint256 variableDebt\\n    ) external view {\\n        bool isActive = reserve.getActive();\\n\\n        require(isActive, \\\"VL_NO_ACTIVE_RESERVE\\\");\\n\\n        require(amountSent > 0, \\\"VL_INVALID_AMOUNT\\\");\\n\\n        require(variableDebt > 0, \\\"VL_NO_DEBT_OF_SELECTED_TYPE\\\");\\n\\n        require(\\n            amountSent != type(uint256).max || msg.sender == onBehalfOf,\\n            \\\"VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\\"\\n        );\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libraries/ReserveLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../lendingpool/DataTypes.sol\\\";\\nimport \\\"../interfaces/IVariableDebtToken.sol\\\";\\nimport \\\"../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport \\\"./MathUtils.sol\\\";\\nimport \\\"./KyokoMath.sol\\\";\\nimport \\\"./PercentageMath.sol\\\";\\nimport \\\"../interfaces/IKToken.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n    using SafeMathUpgradeable for uint256;\\n\\tusing KyokoMath for uint256;\\n    using PercentageMath for uint256;\\n\\n    /**\\n    * @dev Emitted when the state of a reserve is updated\\n    * @param asset The address of the underlying asset of the reserve\\n    * @param liquidityRate The new liquidity rate\\n    * @param variableBorrowRate The new variable borrow rate\\n    * @param liquidityIndex The new liquidity index\\n    * @param variableBorrowIndex The new variable borrow index\\n    **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    /**\\n    * @dev Initializes a reserve\\n    * @param reserve The reserve object\\n    * @param kTokenAddress The address of the overlying ktoken contract\\n    * @param variableDebtTokenAddress The address of the variable debt token\\n    * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n    **/\\n    function init(\\n        DataTypes.ReserveData storage reserve, \\n        address kTokenAddress,\\n        address variableDebtTokenAddress,\\n        address interestRateStrategyAddress\\n    ) external {\\n        require(reserve.kTokenAddress == address(0), \\\"the reserve already initialized\\\");\\n\\n        reserve.isActive = true;\\n        reserve.liquidityIndex = uint128(KyokoMath.ray());\\n        reserve.variableBorrowIndex = uint128(KyokoMath.ray());\\n        reserve.kTokenAddress = kTokenAddress;\\n        reserve.variableDebtTokenAddress = variableDebtTokenAddress;\\n        reserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n    }\\n\\n    /**\\n    * @dev Updates the liquidity cumulative index and the variable borrow index.\\n    * @param reserve the reserve object\\n    **/\\n    function updateState(DataTypes.ReserveData storage reserve) internal {\\n        uint256 scaledVariableDebt =\\n            IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\\n        uint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\n        uint256 previousLiquidityIndex = reserve.liquidityIndex;\\n        uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\n\\n        (uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) =\\n            _updateIndexes(\\n                reserve,\\n                scaledVariableDebt,\\n                previousLiquidityIndex,\\n                previousVariableBorrowIndex,\\n                lastUpdatedTimestamp\\n            );\\n\\n        _mintToTreasury(\\n            reserve,\\n            scaledVariableDebt,\\n            previousVariableBorrowIndex,\\n            newLiquidityIndex,\\n            newVariableBorrowIndex\\n        );\\n    }\\n\\n    /**\\n    * @dev Updates the reserve indexes and the timestamp of the update\\n    * @param reserve The reserve reserve to be updated\\n    * @param scaledVariableDebt The scaled variable debt\\n    * @param liquidityIndex The last stored liquidity index\\n    * @param variableBorrowIndex The last stored variable borrow index\\n    * @param timestamp The last operate time of reserve\\n    **/\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 scaledVariableDebt,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256, uint256) {\\n        uint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\n        uint256 newLiquidityIndex = liquidityIndex;\\n        uint256 newVariableBorrowIndex = variableBorrowIndex;\\n\\n        //only cumulating if there is any income being produced\\n        if (currentLiquidityRate > 0) {\\n            // 1 + ratePerSecond * (delta_t / seconds in a year)\\n            uint256 cumulatedLiquidityInterest =\\n                MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\n            newLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\n            require(newLiquidityIndex <= type(uint128).max, \\\"RL_LIQUIDITY_INDEX_OVERFLOW\\\");\\n\\n            reserve.liquidityIndex = uint128(newLiquidityIndex);\\n\\n            //we need to ensure that there is actual variable debt before accumulating  \\n            if (scaledVariableDebt != 0) {\\n                uint256 cumulatedVariableBorrowInterest =\\n                    MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp);\\n                newVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\n                require(\\n                    newVariableBorrowIndex <= type(uint128).max,\\n                    \\\"RL_VARIABLE_BORROW_INDEX_OVERFLOW\\\"\\n                );\\n                reserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\n            }\\n        }\\n\\n        //solium-disable-next-line\\n        reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n        return (newLiquidityIndex, newVariableBorrowIndex);\\n    }\\n\\n    struct MintToTreasuryLocalVars {\\n        uint256 currentVariableDebt;\\n        uint256 previousVariableDebt;\\n        uint256 totalDebtAccrued;\\n        uint256 amountToMint;\\n        uint16 reserveFactor;\\n        uint40 stableSupplyUpdatedTimestamp;\\n    }\\n\\n    /**\\n    * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor for the\\n    * specific asset.\\n    * @param reserve The reserve reserve to be updated\\n    * @param scaledVariableDebt The current scaled total variable debt\\n    * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\n    * @param newLiquidityIndex The new liquidity index\\n    * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\n    **/\\n    function _mintToTreasury(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 scaledVariableDebt,\\n        uint256 previousVariableBorrowIndex,\\n        uint256 newLiquidityIndex,\\n        uint256 newVariableBorrowIndex\\n    ) internal {\\n        MintToTreasuryLocalVars memory vars;\\n\\n        vars.reserveFactor = getReserveFactor(reserve);\\n\\n        if (vars.reserveFactor == 0) {\\n            return;\\n        }\\n\\n        //calculate the last principal variable debt\\n        vars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\n\\n        //calculate the new total supply after accumulation of the index\\n        vars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\n\\n        //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n        vars.totalDebtAccrued = vars\\n            .currentVariableDebt\\n            .sub(vars.previousVariableDebt);\\n\\n        vars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\n\\n        if (vars.amountToMint != 0) {\\n            IKToken(reserve.kTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\n        }\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        uint256 availableLiquidity;\\n        uint256 newLiquidityRate;\\n        uint256 newVariableRate;\\n        uint256 totalVariableDebt;\\n    }\\n\\n    /**\\n    * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\n    * @param reserve The address of the reserve to be updated\\n    * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\n    * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n    **/\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage reserve,\\n        address reserveAddress,\\n        address kTokenAddress,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken\\n    ) internal {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n\\n\\n        //calculates the total variable debt locally using the scaled total supply instead\\n        //of totalSupply(), as it's noticeably cheaper. Also, the index has been\\n        //updated by the previous updateState() call\\n        vars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress)\\n            .scaledTotalSupply()\\n            .rayMul(reserve.variableBorrowIndex);\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newVariableRate\\n        ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(\\n            reserveAddress,\\n            kTokenAddress,\\n            liquidityAdded,\\n            liquidityTaken,\\n            vars.totalVariableDebt,\\n            getReserveFactor(reserve)\\n        );\\n\\n        require(vars.newLiquidityRate <= type(uint128).max, \\\"RL_LIQUIDITY_RATE_OVERFLOW\\\");\\n        require(vars.newVariableRate <= type(uint128).max, \\\"RL_VARIABLE_BORROW_RATE_OVERFLOW\\\");\\n\\n        reserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\n        reserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\n\\n        emit ReserveDataUpdated(\\n            reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newVariableRate,\\n            reserve.liquidityIndex,\\n            reserve.variableBorrowIndex\\n        );\\n    }\\n\\n    /**\\n    * @dev Returns the ongoing normalized variable debt for the reserve\\n    * A value of 1e27 means there is no debt. As time passes, the income is accrued\\n    * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n    * @param reserve The reserve object\\n    * @return The normalized variable debt. expressed in ray\\n    **/\\n    function getNormalizedDebt(DataTypes.ReserveData storage reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return reserve.variableBorrowIndex;\\n        }\\n\\n        uint256 cumulated =\\n            MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\n                reserve.variableBorrowIndex\\n            );\\n\\n        return cumulated;\\n    }\\n\\n    /**\\n    * @dev Returns the ongoing normalized income for the reserve\\n    * A value of 1e27 means there is no income. As time passes, the income is accrued\\n    * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n    * @param reserve The reserve object\\n    * @return the normalized income. expressed in ray\\n    **/\\n    function getNormalizedIncome(DataTypes.ReserveData storage reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n        //if the index was updated in the same block, no need to perform any calculation\\n        return reserve.liquidityIndex;\\n        }\\n\\n        uint256 cumulated =\\n            MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\n                reserve.liquidityIndex\\n            );\\n\\n        return cumulated;\\n    }\\n\\n    /**\\n    * @dev Sets the active state of the reserve\\n    * @param self The reserve configuration\\n    * @param active The active state\\n    **/\\n    function setActive(DataTypes.ReserveData storage self, bool active) internal {\\n        self.isActive = active;\\n    }\\n\\n    /**\\n    * @dev Gets the active state of the reserve\\n    * @param self The reserve configuration\\n    * @return The active state\\n    **/\\n    function getActive(DataTypes.ReserveData storage self) internal view returns (bool) {\\n        return self.isActive;\\n    }\\n    \\n    /**\\n    * @dev Sets the reserve factor of the reserve\\n    * @param self The reserve configuration\\n    * @param reserveFactor The reserve factor\\n    **/\\n    function setReserveFactor(DataTypes.ReserveData storage self, uint16 reserveFactor)\\n        internal \\n    {\\n        require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, \\\"RC_INVALID_RESERVE_FACTOR\\\");\\n        self.factor = reserveFactor;\\n    }\\n\\n    /**\\n    * @dev Gets the reserve factor of the reserve\\n    * @param self The reserve configuration\\n    * @return The reserve factor\\n    **/\\n    function getReserveFactor(DataTypes.ReserveData storage self)\\n        internal\\n        view\\n        returns (uint16)\\n    {\\n        return self.factor;\\n    }\\n\\n    /**\\n    * @dev Gets the decimals of the underlying asset of the reserve\\n    * @param self The reserve configuration\\n    * @return The decimals of the asset\\n    **/\\n    function getDecimal(DataTypes.ReserveData storage self)\\n        internal\\n        view\\n        returns (uint8)\\n    {\\n        return self.decimals;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libraries/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title PercentageMath library\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\nlibrary PercentageMath {\\n    uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n    uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n    /**\\n    * @dev Executes a percentage multiplication\\n    * @param value The value of which the percentage needs to be calculated\\n    * @param percentage The percentage of the value to be calculated\\n    * @return The percentage of value\\n    **/\\n    function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n        if (value == 0 || percentage == 0) {\\n            return 0;\\n        }\\n\\n        require(\\n            value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n            \\\"MATH_MULTIPLICATION_OVERFLOW\\\"\\n        );\\n\\n        return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n    }\\n\\n    /**\\n    * @dev Executes a percentage division\\n    * @param value The value of which the percentage needs to be calculated\\n    * @param percentage The percentage of the value to be calculated\\n    * @return The value divided the percentage\\n    **/\\n    function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n        require(percentage != 0, \\\"MATH_DIVISION_BY_ZERO\\\");\\n        uint256 halfPercentage = percentage / 2;\\n\\n        require(\\n            value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n            \\\"MATH_MULTIPLICATION_OVERFLOW\\\"\\n        );\\n\\n        return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libraries/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./KyokoMath.sol\\\";\\n\\nlibrary MathUtils {\\n    using SafeMathUpgradeable for uint256;\\n    using KyokoMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n    * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n    * @param rate The interest rate, in ray\\n    * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n    * @return The interest rate linearly accumulated during the timeDelta, in ray\\n    **/\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) \\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(KyokoMath.ray());\\n    }\\n\\n    /**\\n    * @dev Function to calculate the interest using a compounded interest rate formula\\n    * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n    *\\n    *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n    *\\n    * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n    * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n    *\\n    * @param rate The interest rate, in ray\\n    * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n    * @return The interest rate compounded during the timeDelta, in ray\\n    **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return KyokoMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n        return KyokoMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n    }\\n\\n    /**\\n    * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n    * @param rate The interest rate (in ray)\\n    * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n    **/\\n    function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libraries/KyokoMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary KyokoMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n/**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfWAD) / b, \\\"MATH_MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"MATH_DIVISION_BY_ZERO\\\");\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, \\\"MATH_MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, \\\"MATH_MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"MATH_DIVISION_BY_ZERO\\\");\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, \\\"MATH_MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, \\\"MATH_ADDITION_OVERFLOW\\\");\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, \\\"MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/GenericLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../lendingpool/DataTypes.sol\\\";\\nimport \\\"./KyokoMath.sol\\\";\\nimport \\\"./PercentageMath.sol\\\";\\nimport \\\"./ReserveLogic.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nlibrary GenericLogic {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using SafeMathUpgradeable for uint256;\\n    using KyokoMath for uint256;\\n    using PercentageMath for uint256;\\n\\n    struct CalculateUserAccountDataVars {\\n        uint256 decimals;\\n        uint256 tokenUnit;\\n        uint256 compoundedBorrowBalance;\\n        uint256 totalDebtInWEI;\\n        uint256 i;\\n        address currentReserveAddress;\\n    }\\n\\n    /**\\n    * @dev Calculates the user total Debt in WEI across the reserves.\\n    * @param user The address of the user\\n    * @param reservesData Data of all the reserves\\n    * @param reserves The list of the available reserves\\n    * @param reservesCount the count of reserves\\n    * @return The total debt of the user in WEI\\n    **/\\n    function calculateUserAccountData(\\n        address user,\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reserves,\\n        uint256 reservesCount\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        CalculateUserAccountDataVars memory vars;\\n        for (vars.i = 0; vars.i < reservesCount; vars.i++) {\\n\\n            vars.currentReserveAddress = reserves[vars.i];\\n            DataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\\n\\n            vars.decimals = currentReserve.getDecimal();\\n            uint256 decimals_ = 1 ether;\\n            vars.tokenUnit = uint256(decimals_).div(10**vars.decimals);\\n\\n            uint256 currentReserveBorrows = IERC20Upgradeable(currentReserve.variableDebtTokenAddress).balanceOf(user);\\n            if (currentReserveBorrows > 0) {\\n                vars.totalDebtInWEI = vars.totalDebtInWEI.add(\\n                    uint256(1).mul(currentReserveBorrows).mul(vars.tokenUnit)\\n                );\\n            }\\n        }\\n        return vars.totalDebtInWEI;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lendingpool/LendingPoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./DataTypes.sol\\\";\\nimport \\\"../libraries/ReserveLogic.sol\\\";\\n\\n\\ncontract LendingPoolStorage {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\n\\tmapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n\\t//the list of the available reserves, structured as a mapping for gas savings reasons\\n\\tmapping(uint256 => address) _reservesList;\\n\\n\\tuint256 internal _reservesCount;\\n\\n\\tbool internal _paused;\\n\\n}\"\r\n    },\r\n    \"/contracts/lendingpool/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //this current state of the asset;\\n        bool isActive;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the last update time of the reserve\\n        uint40 lastUpdateTimestamp;\\n        //address of the ktoken\\n        address kTokenAddress;\\n        //address of the debt token\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        // Reserve factor\\n        uint16 factor;\\n        uint8 decimals;\\n        //the id of the reserve.Represents the position in the list of the active reserves.\\n        uint8 id;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IVariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./IScaledBalanceToken.sol\\\";\\nimport \\\"./IInitializableDebtToken.sol\\\";\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param onBehalfOf The address of the user on which behalf minting has been performed\\n   * @param value The amount to be minted\\n   * @param index The last index of the reserve\\n   **/\\n  event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return `true` if the the previous balance of the user is 0\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when variable debt is burnt\\n   * @param user The user which debt has been burned\\n   * @param amount The amount of debt being burned\\n   * @param index The index of the user\\n   **/\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Burns user variable debt\\n   * @param user The user which debt is burnt\\n   * @param index The variable debt index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IReserveInterestRateStrategy {\\n    function baseVariableBorrowRate() external view returns (uint256);\\n\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n    function calculateInterestRates(\\n        uint256 availableLiquidity,\\n        uint256 totalVariableDebt,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address kToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalVariableDebt,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate\\n        );\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../lendingpool/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the kTokens\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of kTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRate\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on initReserve()\\n     **/\\n    event InitReserve(\\n        address asset,\\n        address kTokenAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress,\\n        uint8 reserveDecimals,\\n        uint16 reserveFactor\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve factor is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param factor The new reserve factor\\n     **/\\n    event ReserveFactorChanged(address indexed asset, uint256 factor);\\n\\n    /**\\n     * @dev Emitted when a reserve active state is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param active The new reserve active state\\n     **/\\n    event ReserveActiveChanged(address indexed asset, bool active);\\n\\n    /**\\n     * @dev Emitted when credit system is updated\\n     * @param creditContract The address of the new credit system\\n     **/\\n    event CreditStrategyChanged(address creditContract);\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying kTokens.\\n     * - E.g. User deposits 100 USDT and gets in return 100 kUSDT\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the kTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of kTokens\\n     *   is a different wallet\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent kTokens owned\\n     * E.g. User has 100 kUSDT, calls withdraw() and receives 100 USDT, burning the 100 aUSDT\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole kToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already had a credit line, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token\\n     * - E.g. User borrows 100 USDT passing as `onBehalfOf` his own address, receiving the 100 USDT in his wallet\\n     *   and 100 variable debt tokens\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own credit, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDT, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset`\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalDebtInWEI the total debt in WEI of the user\\n     * @return availableBorrowsInWEI the borrowing power left of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (uint256 totalDebtInWEI, uint256 availableBorrowsInWEI);\\n\\n    function initReserve(\\n        address reserve,\\n        address kTokenAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress,\\n        uint8 reserveDecimals,\\n        uint16 reserveFactor\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(\\n        address reserve,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n\\n    function getActive(address asset) external view returns (bool);\\n\\n    function setCreditStrategy(address creditContract) external;\\n\\n    function getCreditStrategy() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IKToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"./IScaledBalanceToken.sol\\\";\\nimport \\\"./IInitializableKToken.sol\\\";\\n\\ninterface IKToken is IERC20Upgradeable, IScaledBalanceToken, IInitializableKToken {\\n\\t\\n    /**\\n    * @dev Emitted after the mint action\\n    * @param from The address performing the mint\\n    * @param value The amount being\\n    * @param index The new liquidity index of the reserve\\n    **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n    * @dev Mints `amount` kTokens to `user`\\n    * @param user The address receiving the minted tokens\\n    * @param amount The amount of tokens getting minted\\n    * @param index The new liquidity index of the reserve\\n    * @return `true` if the the previous balance of the user was 0\\n    */\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n    * @dev Emitted after kTokens are burned\\n    * @param from The owner of the kTokens, getting them burned\\n    * @param target The address that will receive the underlying\\n    * @param value The amount being burned\\n    * @param index The new liquidity index of the reserve\\n    **/\\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n    /**\\n    * @dev Emitted during the transfer action\\n    * @param from The user whose tokens are being transferred\\n    * @param to The recipient\\n    * @param value The amount being transferred\\n    * @param index The new liquidity index of the reserve\\n    **/\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n    /**\\n    * @dev Burns kTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n    * @param user The owner of the kTokens, getting them burned\\n    * @param receiverOfUnderlying The address that will receive the underlying\\n    * @param amount The amount being burned\\n    * @param index The new liquidity index of the reserve\\n    **/\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n    * @dev Mints kTokens to the reserve treasury\\n    * @param amount The amount of tokens getting minted\\n    * @param index The new liquidity index of the reserve\\n    */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n    * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n    * assets in borrow(), withdraw() and flashLoan()\\n    * @param user The recipient of the underlying\\n    * @param amount The amount getting transferred\\n    * @return The amount transferred\\n    **/\\n    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n    /**\\n    * @dev Invoked to execute actions on the kToken side after a repayment.\\n    * @param user The user executing the repayment\\n    * @param amount The amount getting repaid\\n    **/\\n    function handleRepayment(address user, uint256 amount) external;\\n\\n    /**\\n    * @dev Returns the address of the underlying asset of this kToken (E.g. USDT for kUSDT)\\n    **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IInitializableKToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./ILendingPool.sol\\\";\\n\\ninterface IInitializableKToken {\\n    /**\\n    * @dev Emitted when an kToken is initialized\\n    * @param underlyingAsset The address of the underlying asset\\n    * @param pool The address of the associated lending pool\\n    * @param treasury The address of the treasury\\n    * @param kTokenDecimals the decimals of the underlying\\n    * @param kTokenName the name of the kToken\\n    * @param kTokenSymbol the symbol of the kToken\\n    * @param params A set of encoded parameters for additional initialization\\n    **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        uint8 kTokenDecimals,\\n        string kTokenName,\\n        string kTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n    * @dev Initializes the kToken\\n    * @param pool The address of the lending pool where this kToken will be used\\n    * @param treasury The address of the Kyoko treasury, receiving the fees on this kToken\\n    * @param underlyingAsset The address of the underlying asset of this kToken (E.g. USDT for kUSDT)\\n    * @param kTokenDecimals The decimals of the kToken, same as the underlying asset's\\n    * @param kTokenName The name of the kToken\\n    * @param kTokenSymbol The symbol of the kToken\\n    */\\n    function initialize(\\n        ILendingPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        uint8 kTokenDecimals,\\n        string calldata kTokenName,\\n        string calldata kTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IInitializableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./ILendingPool.sol\\\";\\n\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param debtTokenDecimals the decimals of the debt token\\n   * @param debtTokenName the name of the debt token\\n   * @param debtTokenSymbol the symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the debt token.\\n   * @param pool The address of the lending pool where this kToken will be used\\n   * @param underlyingAsset The address of the underlying asset of this kToken (E.g. USDT for kUSDT)\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address underlyingAsset,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\"\r\n    },\r\n    \"/contracts/credit/CreditSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\n/**\\n * @dev this contract represents the credit line in the whitelist.\\n * @dev the guild's credit line amount\\n * @dev the decimals is 1e18.\\n */\\ncontract CreditSystem is AccessControlEnumerableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    /// the role manage total credit manager\\n    bytes32 public constant ROLE_CREDIT_MANAGER =\\n        keccak256(\\\"ROLE_CREDIT_MANAGER\\\");\\n\\n    uint8 public constant G2G_MASK = 0x0E;\\n    uint8 public constant CCAL_MASK = 0x0D;\\n    uint8 constant IS_G2G_START_BIT_POSITION = 0;\\n    uint8 constant IS_CCAL_START_BIT_POSITION = 1;\\n\\n    struct CreditInfo {\\n        //ERC20 credit line\\n        uint256 g2gCreditLine;\\n        //ccal module credit line\\n        uint256 ccalCreditLine;\\n        //bit 0: g2g isActive flag(0==false, 1==true)\\n        //bit 1: ccal isActive flag(0==false, 1==true)\\n        uint8 flag;\\n    }\\n\\n    // the credit line\\n    mapping(address => CreditInfo) whiteList;\\n    //g2g whiteList Set\\n    EnumerableSetUpgradeable.AddressSet private g2gWhiteSet;\\n    //ccal whiteList Set\\n    EnumerableSetUpgradeable.AddressSet private ccalWhiteSet;\\n\\n    event SetG2GCreditLine(address user, uint256 amount);\\n\\n    event SetCCALCreditLine(address user, uint256 amount);\\n\\n    // event SetPaused(address user, bool flag);\\n    event SetG2GActive(address user, bool active);\\n\\n    event SetCCALActive(address user, bool active);\\n\\n    event RemoveG2GCredit(address user);\\n\\n    event RemoveCCALCredit(address user);\\n\\n    modifier onlyCreditManager() {\\n        require(\\n            hasRole(ROLE_CREDIT_MANAGER, _msgSender()),\\n            \\\"only the manager has permission to perform this operation.\\\"\\n        );\\n        _;\\n    }\\n\\n    // constructor() {\\n    //     _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    // }\\n    function initialize() public initializer {\\n        __AccessControlEnumerable_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * set the address's g2g module credit line\\n     * @dev user the guild in the whiteList\\n     * @dev amount the guild credit line amount\\n     * @dev 1U = 1e18\\n     */\\n    function setG2GCreditLine(address user, uint256 amount)\\n        public\\n        onlyCreditManager\\n    {\\n        whiteList[user].g2gCreditLine = amount;\\n        setG2GActive(user, amount > 0);\\n\\n        emit SetG2GCreditLine(user, amount);\\n    }\\n\\n    /**\\n     * @dev set the address's g2g module credit active status\\n     */\\n    function setG2GActive(address user, bool active) public onlyCreditManager {\\n        //set user flag\\n        setG2GFlag(user, active);\\n        //set user white set\\n        if (active) {\\n            uint256 userG2GCreditLine = getG2GCreditLine(user);\\n            userG2GCreditLine > 0 ? g2gWhiteSet.add(user) : g2gWhiteSet.remove(user);\\n        } else {\\n            g2gWhiteSet.remove(user);\\n        }\\n\\n        emit SetG2GActive(user, active);\\n    }\\n\\n    function setG2GFlag(address user, bool active) private {\\n        uint8 flag = whiteList[user].flag;\\n        flag =\\n            (flag & G2G_MASK) |\\n            (uint8(active ? 1 : 0) << IS_G2G_START_BIT_POSITION);\\n        whiteList[user].flag = flag;\\n    }\\n\\n    /**\\n     * set the address's ccal module credit line\\n     * @dev user the guild in the whiteList\\n     * @dev amount the guild credit line amount\\n     * @dev 1U = 1e18\\n     */\\n    function setCCALCreditLine(address user, uint256 amount)\\n        public\\n        onlyCreditManager\\n    {\\n        whiteList[user].ccalCreditLine = amount;\\n        setCCALActive(user, amount > 0);\\n\\n        emit SetCCALCreditLine(user, amount);\\n    }\\n\\n    /**\\n     * @dev set the address's ccal module credit active status\\n     */\\n    function setCCALActive(address user, bool active) public onlyCreditManager {\\n        //set user flag\\n        setCCALFlag(user, active);\\n        //set user white set\\n        if (active) {\\n            uint256 userCCALCreditLine = getCCALCreditLine(user);\\n            userCCALCreditLine > 0 ? ccalWhiteSet.add(user) : ccalWhiteSet.remove(user);\\n        } else {\\n            ccalWhiteSet.remove(user);\\n        }\\n\\n        emit SetCCALActive(user, active);\\n    }\\n\\n    function setCCALFlag(address user, bool active) private {\\n        uint8 flag = whiteList[user].flag;\\n        flag =\\n            (flag & CCAL_MASK) |\\n            (uint8(active ? 1 : 0) << IS_CCAL_START_BIT_POSITION);\\n        whiteList[user].flag = flag;\\n    }\\n\\n    /**\\n     * remove the address's g2g module credit line\\n     */\\n    function removeG2GCredit(address user) public onlyCreditManager {\\n        whiteList[user].g2gCreditLine = 0;\\n        setG2GActive(user, false);\\n\\n        emit RemoveG2GCredit(user);\\n    }\\n\\n    /**\\n     * remove the address's ccal module credit line\\n     */\\n    function removeCCALCredit(address user) public onlyCreditManager {\\n        whiteList[user].ccalCreditLine = 0;\\n        setCCALActive(user, false);\\n\\n        emit RemoveCCALCredit(user);\\n    }\\n\\n\\n    /**\\n     * @dev query the user credit line\\n     * @param user the address which to query\\n     * @return G2G credit line\\n     */\\n    function getG2GCreditLine(address user) public view returns (uint256) {\\n        CreditInfo memory credit = whiteList[user];\\n        return credit.g2gCreditLine;\\n    }\\n\\n    /**\\n     * @dev query the user credit line\\n     * @param user the address which to query\\n     * @return CCAL credit line\\n     */\\n    function getCCALCreditLine(address user) public view returns (uint256) {\\n        CreditInfo memory credit = whiteList[user];\\n        return credit.ccalCreditLine;\\n    }\\n\\n    /**\\n     * @dev query the white list addresses in G2G\\n     */\\n    function getG2GWhiteList() public view returns (address[] memory) {\\n        return g2gWhiteSet.values();\\n    }\\n\\n    /**\\n     * @dev query the white list addresses in CCAL\\n     */\\n    function getCCALWhiteList() public view returns (address[] memory) {\\n        return ccalWhiteSet.values();\\n    }\\n\\n    /**\\n     * @dev query the address state\\n     */\\n    function getState(address user) public view returns (bool, bool) {\\n        uint8 activeFlag = whiteList[user].flag;\\n        return (\\n            activeFlag & ~G2G_MASK != 0,\\n            activeFlag & ~CCAL_MASK != 0\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/libraries/ReserveLogic.sol\": {\r\n        \"ReserveLogic\": \"0x0Af2645Bc7509aFB59b3a20B9dbf650475FA1076\"\r\n      },\r\n      \"/contracts/libraries/ValidationLogic.sol\": {\r\n        \"ValidationLogic\": \"0x9C897bfb9Ace55d8085c3131dd33bd3fDb008784\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditContract\",\"type\":\"address\"}],\"name\":\"CreditStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reserveDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"}],\"name\":\"InitReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ReserveActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDINGPOOL_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditContract\",\"outputs\":[{\"internalType\":\"contract CreditSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"kTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDebtInWEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsInWEI\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"reserveDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditContract\",\"type\":\"address\"}],\"name\":\"setCreditStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KyokoLendingPool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}