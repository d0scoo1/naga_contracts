{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/PlayingCards.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.9;\r\n\r\n\r\ncontract PlayingCards {\r\n    // a playing card\r\n    struct Card {\r\n        uint8 number; // 0 - 12, maps on to numbers array\r\n        uint8 suit; // 0 - 3, maps on to suits array\r\n    }\r\n\r\n    // text representation of spades, clubs, hearts, diamonds\r\n    string[] public suits = [\r\n        \"c\", \"d\", \"h\", \"s\"\r\n    ];\r\n\r\n    // text representation of card numbers/characters\r\n    string[] public numbers = [\r\n        \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\", \"A\"\r\n    ];\r\n\r\n    // array of the 52 playable the cards in a deck\r\n    Card[52] public cards;\r\n\r\n    /*\r\n     * EVENTS\r\n     */\r\n\r\n    event CardsInitialised();\r\n\r\n    /*\r\n     * CONSTRUCTOR\r\n     */\r\n\r\n    /**\r\n     * @dev constructor initialises the 52 card deck and emits the CardsInitialised event\r\n     */\r\n    constructor()\r\n    {\r\n        uint8 cardIdx = 0;\r\n        for (uint8 i = 0; i < numbers.length; i++) {\r\n            for (uint8 j = 0; j < suits.length; j++) {\r\n                cards[cardIdx] = Card(i, j);\r\n                cardIdx = cardIdx + 1;\r\n            }\r\n        }\r\n        emit CardsInitialised();\r\n    }\r\n\r\n    /*\r\n     * PUBLIC GETTERS\r\n     */\r\n\r\n    /**\r\n     * @dev getCardNumberAsUint returns the number value for a card as an array idx\r\n     * @dev that can be passed to the numbers[] array or used in calculations\r\n     *\r\n     * @param cardId uint8 ID of the card from 0 - 51\r\n     * @return uint8\r\n     */\r\n    function getCardNumberAsUint(uint8 cardId) public validCardId(cardId) view returns (uint8) {\r\n        return cards[cardId].number;\r\n    }\r\n\r\n    /**\r\n     * @dev getCardSuitAsUint returns the suit value for a card as an array idx\r\n     * @dev that can be passed to the suits[] array or used in calculations\r\n     *\r\n     * @param cardId uint8 ID of the card from 0 - 51\r\n     * @return uint8\r\n     */\r\n    function getCardSuitAsUint(uint8 cardId) public validCardId(cardId) view returns (uint8) {\r\n        return cards[cardId].suit;\r\n    }\r\n\r\n    /**\r\n     * @dev getCardNumberAsStr returns the string value for a card's number, for example \"A\" (Ace)\r\n     *\r\n     * @param cardId uint8 ID of the card from 0 - 51\r\n     * @return string\r\n     */\r\n    function getCardNumberAsStr(uint8 cardId) public validCardId(cardId) view returns (string memory) {\r\n        return numbers[cards[cardId].number];\r\n    }\r\n\r\n    /**\r\n     * @dev getCardSuitAsStr returns the string value for a card's suit, for example \"s\" (Spade)\r\n     *\r\n     * @param cardId uint8 ID of the card from 0 - 51\r\n     * @return string\r\n     */\r\n    function getCardSuitAsStr(uint8 cardId) public validCardId(cardId) view returns (string memory) {\r\n        return suits[cards[cardId].suit];\r\n    }\r\n\r\n    /**\r\n     * @dev getCardAsString returns the string value for a card, for example \"As\" (Ace of Spades)\r\n     *\r\n     * @param cardId uint8 ID of the card from 0 - 51\r\n     * @return string\r\n     */\r\n    function getCardAsString(uint8 cardId) public validCardId(cardId) view returns (string memory) {\r\n        return string(abi.encodePacked(numbers[cards[cardId].number], suits[cards[cardId].suit]));\r\n    }\r\n\r\n    /**\r\n     * @dev getCardAsComponents returns the number and suit IDs for a card, as stored in numbers and suits arrays\r\n     *\r\n     * @param cardId uint8 ID of the card from 0 - 51\r\n     * @return number uint8 number/figure ID of card (0 - 12)\r\n     * @return suit uint8 suit ID of card (0 - 3)\r\n     */\r\n    function getCardAsComponents(uint8 cardId) public validCardId(cardId) view returns (uint8 number, uint8 suit) {\r\n        return (cards[cardId].number, cards[cardId].suit);\r\n    }\r\n\r\n    /**\r\n     * @dev getCardAsSvg returns the SVG XML for a card, which can be rendered as an img src in a UI\r\n     *\r\n     * @param cardId uint8 ID of the card from 0 - 51\r\n     * @return string SVG XML of card\r\n     */\r\n    function getCardAsSvg(uint8 cardId) public validCardId(cardId) view returns (string memory) {\r\n        // based on https://commons.wikimedia.org/wiki/Category:SVG_playing_cards\r\n        string[3] memory parts;\r\n        parts[0] = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 72 62\\\" width=\\\"2.5in\\\" height=\\\"2.147in\\\">\";\r\n        parts[1] = getCardBody(cards[cardId].number, cards[cardId].suit, 7, 32, 1);\r\n        parts[2] = \"</svg>\";\r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2]));\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev getCardBody will generate the internal SVG elements for the given card ID\r\n     *\r\n     * @param numberId uint8 number id as per the numbers array\r\n     * @param suitId uint8 suit id as per the suits array\r\n     * @param fX uint256 x coordinate for the number/figure\r\n     * @param sX uint256 x coordinate for the suit\r\n     * @param rX uint256 x coordinate for the surrounding rectangle\r\n     * @return string SVG elements\r\n     */\r\n    function getCardBody(uint8 numberId, uint8 suitId, uint256 fX, uint256 sX, uint256 rX)\r\n    validSuitId(suitId) validNumberId(numberId)\r\n    public pure returns (string memory) {\r\n        string memory colour = \"red\";\r\n        if (suitId == 0 || suitId == 3) {\r\n            colour = \"#000\";\r\n        }\r\n\r\n        string[25] memory parts;\r\n        parts[0] = \"<symbol id=\\\"S\";\r\n        parts[1] = toString(suitId);\r\n        parts[2] = \"\\\" viewBox=\\\"-600 -600 1200 1200\\\">\";\r\n        parts[3] = getSuitPath(suitId);\r\n        parts[4] = \"</symbol>\";\r\n        parts[5] = \"<symbol id=\\\"F\";\r\n        parts[6] = toString(numberId);\r\n        parts[7] = \"\\\" viewBox=\\\"-600 -600 1200 1200\\\">\";\r\n        parts[8] = getNumberPath(numberId);\r\n        parts[9] = \"</symbol>\";\r\n        parts[10] = \"<rect width=\\\"70\\\" height=\\\"60\\\" x=\\\"\";\r\n        parts[11] = toString(rX);\r\n        parts[12] = \"\\\" y=\\\"1\\\" rx=\\\"6\\\" ry=\\\"6\\\" fill=\\\"white\\\" stroke=\\\"black\\\"/>\";\r\n        parts[13] = \"<use xlink:href=\\\"#F\";\r\n        parts[14] = toString(numberId);\r\n        parts[15] = \"\\\" height=\\\"32\\\" width=\\\"32\\\" x=\\\"\";\r\n        parts[16] = toString(fX);\r\n        parts[17] = \"\\\" y=\\\"16\\\" stroke=\\\"\";\r\n        parts[18] = colour;\r\n        parts[19] = \"\\\"/>\";\r\n        parts[20] = \"<use xlink:href=\\\"#S\";\r\n        parts[21] = toString(suitId);\r\n        parts[22] = \"\\\" height=\\\"32\\\" width=\\\"32\\\" x=\\\"\";\r\n        parts[23] = toString(sX);\r\n        parts[24] = \"\\\" y=\\\"16\\\"/>\";\r\n\r\n        string memory output = string(\r\n            abi.encodePacked(\r\n                parts[0],\r\n                parts[1],\r\n                parts[2],\r\n                parts[3],\r\n                parts[4],\r\n                parts[5],\r\n                parts[6],\r\n                parts[7],\r\n                parts[8]\r\n            )\r\n        );\r\n        output = string(\r\n            abi.encodePacked(\r\n                output,\r\n                parts[9],\r\n                parts[10],\r\n                parts[11],\r\n                parts[12],\r\n                parts[13],\r\n                parts[14],\r\n                parts[15],\r\n                parts[16]\r\n            )\r\n        );\r\n        output = string(\r\n            abi.encodePacked(\r\n                output,\r\n                parts[17],\r\n                parts[18],\r\n                parts[19],\r\n                parts[20],\r\n                parts[21],\r\n                parts[22],\r\n                parts[23],\r\n                parts[24]\r\n            )\r\n        );\r\n\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev getSuitPath will generate the internal SVG path element for the given suit ID\r\n     *\r\n     * @param suitId uint8 suit id as per the suits array\r\n     * @return string SVG path element\r\n     */\r\n    function getSuitPath(uint8 suitId) public validSuitId(suitId) pure returns (string memory) {\r\n        if (suitId == 0) {\r\n            // club\r\n            return \"<path d=\\\"M30 150c5 235 55 250 100 350h-260c45-100 95-115 100-350a10 10 0 0 0-20 0 210 210 0 1 1-74-201 10 10 0 0 0 14-14 230 230 0 1 1 220 0 10 10 0 0 0 14 14 210 210 0 1 1-74 201 10 10 0 0 0-20 0Z\\\" fill=\\\"#000\\\"/>\";\r\n        } else if (suitId == 1) {\r\n            // diamond\r\n            return \"<path d=\\\"M-400 0C-350 0 0-450 0-500 0-450 350 0 400 0 350 0 0 450 0 500 0 450-350 0-400 0Z\\\" fill=\\\"red\\\"/>\";\r\n        } else if (suitId == 2) {\r\n            // heart\r\n            return \"<path d=\\\"M0-300c0-100 100-200 200-200s200 100 200 250C400 0 0 400 0 500 0 400-400 0-400-250c0-150 100-250 200-250S0-400 0-300Z\\\" fill=\\\"red\\\"/>\";\r\n        } else if (suitId == 3) {\r\n            // spade\r\n            return \"<path d=\\\"M0-500c100 250 355 400 355 685a150 150 0 0 1-300 0 10 10 0 0 0-20 0c0 200 50 215 95 315h-260c45-100 95-115 95-315a10 10 0 0 0-20 0 150 150 0 0 1-300 0c0-285 255-435 355-685Z\\\" fill=\\\"#000\\\"/>\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev getNumberPath will generate the internal SVG path element for the given number ID\r\n     *\r\n     * @param numberId uint8 number id as per the numbers array\r\n     * @return string SVG path element\r\n     */\r\n    function getNumberPath(uint8 numberId) public validNumberId(numberId) pure returns (string memory) {\r\n        string[3] memory parts;\r\n        parts[0] = \"<path d=\\\"\";\r\n        if (numberId == 0) {\r\n            // 2\r\n            parts[1] = \"M-225-225c-20-40 25-235 225-235s225 135 225 235c0 200-450 385-450 685h450V300\";\r\n        } else if (numberId == 1) {\r\n            // 3\r\n            parts[1] = \"M-250-320v-140h450L-110-80c10-10 60-40 110-40 200 0 250 120 250 270 0 200-80 310-280 310s-230-160-230-160\";\r\n        } else if (numberId == 2) {\r\n            // 4\r\n            parts[1] = \"M50 460h200m-100 0v-920l-450 635v25h570\";\r\n        } else if (numberId == 3) {\r\n            // 5\r\n            parts[1] = \"M170-460h-345l-35 345s10-85 210-85c100 0 255 120 255 320S180 460-20 460s-235-175-235-175\";\r\n        } else if (numberId == 4) {\r\n            // 6\r\n            parts[1] = \"M-250 100a250 250 0 0 1 500 0v110a250 250 0 0 1-500 0v-420A250 250 0 0 1 0-460c150 0 180 60 200 85\";\r\n        } else if (numberId == 5) {\r\n            // 7\r\n            parts[1] = \"M-265-320v-140h530C135-200-90 100-90 460\";\r\n        } else if (numberId == 6) {\r\n            // 8\r\n            parts[1] = \"M-1-50a205 205 0 1 1 2 0h-2a255 255 0 1 0 2 0Z\";\r\n        } else if (numberId == 7) {\r\n            // 9\r\n            parts[1] = \"M250-100a250 250 0 0 1-500 0v-110a250 250 0 0 1 500 0v420A250 250 0 0 1 0 460c-150 0-180-60-200-85\";\r\n        } else if (numberId == 8) {\r\n            // 10\r\n            parts[1] = \"M-260 430v-860M-50 0v-310a150 150 0 0 1 300 0v620a150 150 0 0 1-300 0Z\";\r\n        } else if (numberId == 9) {\r\n            // jack\r\n            parts[1] = \"M50-460h200m-100 0v710a100 100 0 0 1-400 0v-30\";\r\n        } else if (numberId == 10) {\r\n            // queen\r\n            parts[1] = \"M-260 100c300 0 220 360 520 360M-175 0v-285a175 175 0 0 1 350 0v570a175 175 0 0 1-350 0Z\";\r\n        } else if (numberId == 11) {\r\n            // king\r\n            parts[1] = \"M-285-460h200m-100 0v920m-100 0h200M85-460h200m-100 20-355 595M85 460h200m-100-20L-10-70\";\r\n        } else if (numberId == 12) {\r\n            // ace\r\n            parts[1] = \"M-270 460h160m-90-10L0-460l200 910m-90 10h160m-390-330h240\";\r\n        }\r\n\r\n        parts[2] = \"\\\" stroke-width=\\\"80\\\" stroke-linecap=\\\"square\\\" stroke-miterlimit=\\\"1.5\\\" fill=\\\"none\\\"/>\";\r\n\r\n        string memory output = string(\r\n            abi.encodePacked(parts[0], parts[1], parts[2])\r\n        );\r\n        return output;\r\n    }\r\n\r\n    /*\r\n     * PRIVATE FUNCTIONS\r\n     */\r\n\r\n    /**\r\n     * @dev toString converts a given uint256 to a string. Primarily used in SVG, JSON, string name,\r\n     * @dev and hash generation\r\n     *\r\n     * @param value uint256 number to convert\r\n     * @return string number as a string\r\n     */\r\n    function toString(uint256 value) private pure returns (string memory) {\r\n        // Inspired by OraclizeAPI\"s implementation - MIT license\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n        uint256 _tmpN = value;\r\n        if (_tmpN == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = _tmpN;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (_tmpN != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(_tmpN % 10)));\r\n            _tmpN /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /*\r\n     * MODIFIERS\r\n     */\r\n\r\n    /**\r\n     * @dev validCardId ensures a given card Id is valid\r\n     *\r\n     * @param cardId uint8 id of card\r\n     */\r\n    modifier validCardId(uint8 cardId) {\r\n        require(cardId >= 0 && cardId < 52, \"invalid cardId\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev validSuitId ensures a given suit Id is valid (0 - 3)\r\n     *\r\n     * @param suitId uint8 id of suit\r\n     */\r\n    modifier validSuitId(uint8 suitId) {\r\n        require(suitId >= 0 && suitId < 4, \"invalid suitId\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev validNumberId ensures a given number Id is valid (0 - 12)\r\n     *\r\n     * @param numberId uint8 id of suit\r\n     */\r\n    modifier validNumberId(uint8 numberId) {\r\n        require(numberId >= 0 && numberId < 13, \"invalid numberId\");\r\n        _;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CardsInitialised\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"suit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardAsComponents\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"suit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardAsString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardAsSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numberId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"suitId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rX\",\"type\":\"uint256\"}],\"name\":\"getCardBody\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardNumberAsStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardNumberAsUint\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardSuitAsStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardSuitAsUint\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numberId\",\"type\":\"uint8\"}],\"name\":\"getNumberPath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"suitId\",\"type\":\"uint8\"}],\"name\":\"getSuitPath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numbers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"suits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PlayingCards", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4fa5e66bc7c5c63fd0cfebb0b4448be8b0b8c457bd45bcb3a80721f408822dc7"}]}