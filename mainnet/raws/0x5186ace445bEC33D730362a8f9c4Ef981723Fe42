{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"WAGGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./interfaces/IWildAbduction.sol\\\";\\nimport \\\"./interfaces/IBank.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/ILAND.sol\\\";\\nimport \\\"./interfaces/IRandomizer.sol\\\";\\n\\ncontract WAGGame is Ownable, Pausable, ERC721Enumerable {\\n\\n    bool private _reentrant = false;\\n\\n    modifier nonReentrant() {\\n        require(!_reentrant, \\\"No reentrancy\\\");\\n        _reentrant = true;\\n        _;\\n        _reentrant = false;\\n    }\\n\\n    struct Whitelist {\\n    bool isWhitelisted;\\n    uint16 numMinted;\\n    bool freeMint;\\n    }\\n\\n    bool public hasPublicSaleStarted;\\n    uint256 public presalePrice = 0.025 ether;\\n    uint256 public publicPrice = 0.04 ether;\\n    uint256 maxLandCost = 70000 ether;\\n    uint256 maxTokens = 40000;\\n    uint256 private startedTime;\\n\\n    mapping (address => Whitelist) private _whitelistAddresses;\\n    mapping (address => bool) private _freeMintAddresses;\\n\\n    ILAND public land;\\n    ITraits public traits;\\n    IWildAbduction wagNFT;\\n    IBank bank;\\n\\n    constructor(ILAND _land, ITraits _traits, IWildAbduction _wagNFT) ERC721(\\\"WAG Game\\\", 'WGAME') {\\n        land = _land;\\n        hasPublicSaleStarted = false;\\n        wagNFT = _wagNFT;\\n        _pause;\\n        traits = _traits;\\n        startedTime = block.timestamp;\\n    }\\n\\n    modifier requireContractsSet() {\\n      require(address(land) != address(0) && address(traits) != address(0) \\n        && address(wagNFT) != address(0) && address(bank) != address(0)\\n        , \\\"Contracts not set\\\");\\n      _;\\n    }\\n\\n    function setBank(address _bank) external onlyOwner {\\n        bank = IBank(_bank);\\n    }\\n    \\n\\n    /* EXTERNAL */\\n\\n    /**\\n     * mint a token - 88.75% Cowboy, 10% Alien, 1.25% Mutant\\n     * The first 11.11% are free to claim, the remaining cost $LAND\\n     */\\n\\n     function mint(uint256 amount, bool stake) external payable whenNotPaused nonReentrant requireContractsSet {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        uint16 minted = wagNFT.minted();\\n        uint256 paidTokens = wagNFT.getPaidTokens();\\n        require(amount + minted <= maxTokens);\\n        require(amount > 0 && amount <= 20, \\\"Invalid mint amount\\\");\\n\\n        if (minted < paidTokens) {\\n            require(minted + amount <= paidTokens, \\\"All gen 0's minted\\\");\\n            if (hasPublicSaleStarted) {\\n                require(msg.value >= amount * publicPrice, \\\"Invalid payment amount\\\");\\n            } else {\\n                require(_whitelistAddresses[_msgSender()].isWhitelisted, \\\"Not on whitelist\\\");\\n                if (_whitelistAddresses[_msgSender()].freeMint == true) {\\n                    require(msg.value == (amount * presalePrice) - presalePrice);\\n                    _whitelistAddresses[_msgSender()].freeMint = false;\\n                } else {\\n                    require(msg.value == amount * presalePrice, \\\"Invalid payment amount\\\");\\n                }\\n                require(_whitelistAddresses[_msgSender()].numMinted + amount <= 20, \\\"too many mints\\\");\\n                _whitelistAddresses[_msgSender()].numMinted += uint16(amount);\\n            }\\n        } else {\\n            require(msg.value == 0);\\n        }\\n\\n        uint256 totalLandCost = 0;\\n        uint16[] memory tokenIds = new uint16[](amount);\\n        uint256 seed = 0;\\n\\n        for  (uint i = 0; i < amount; i++) {\\n            minted++;\\n            seed = random(minted);\\n            address recipient = _msgSender();\\n\\n            if (minted <= paidTokens || ((seed >> 245) % 10) != 0) {\\n                recipient = _msgSender();\\n            } else {\\n                recipient = bank.randomAlienOwner(seed >> 144);\\n                if (recipient == address(0x0)) {\\n                    recipient = _msgSender();\\n                }\\n            }\\n\\n            tokenIds[i] = minted;\\n            if (!stake || recipient != _msgSender()) {\\n                wagNFT.mint(recipient, seed);\\n            } else {\\n                wagNFT.mint(address(bank), seed);\\n            }\\n            totalLandCost += mintCost(minted, paidTokens);\\n        }\\n\\n        if (totalLandCost > 0) {\\n            land.burn(_msgSender(), totalLandCost);\\n        }\\n\\n        if (stake) {\\n            bank.addManyToBankAndPack(_msgSender(), tokenIds);\\n        }\\n    }\\n\\n    function addToWhitelist(address[] calldata addressesToAdd, bool freeMint) external onlyOwner {\\n        for (uint256 i = 0; i < addressesToAdd.length; i++) {\\n            _whitelistAddresses[addressesToAdd[i]] = Whitelist(true, 0, freeMint);\\n        }\\n    }\\n\\n    function setPublicSaleStart(bool started) external onlyOwner {\\n        hasPublicSaleStarted = started;\\n        if(hasPublicSaleStarted) {\\n            startedTime = block.timestamp;\\n        }\\n    } \\n\\n     /**\\n     * the first 4444 are paid in ETH\\n     * 4445 - 20,000 are 20000 $land\\n     * 20,001 - 30,000 are 40000 $land\\n     * 30,001 - 40,000 are 70000 $land\\n     * @param tokenId the ID to check the cost of to mint\\n   * @return the cost of the given token ID\\n   */\\n    function mintCost(uint256 tokenId, uint256 paidTokens) public view returns (uint256) {\\n        if (tokenId <= paidTokens) return 0;\\n        if (tokenId <= maxTokens * 1 / 2) return 20000 ether;\\n        if (tokenId <= maxTokens * 3 / 4) return 40000 ether;\\n        return 70000 ether;\\n    }\\n\\n    /** INTERNAL */\\n\\n  /**\\n   * the first 25% (ETH purchases) go to the minter\\n   * the remaining 80% have a 10% chance to be given to a random staked dragon\\n   * @param seed a random value to select a recipient from\\n   * @return the address of the recipient (either the minter or the Dragon thief's owner)\\n   */\\n    function selectRecipient(uint256 seed, uint256 minted, uint256 paidTokens) internal view returns (address) {\\n        if (minted <= paidTokens || ((seed >> 245) % 10) != 0) return _msgSender(); // top 10 bits haven't been used\\n        address thief = bank.randomAlienOwner(seed >> 144); // 144 bits reserved for trait selection\\n        if (thief == address(0x0)) return _msgSender();\\n        return thief;\\n    }\\n\\n    /**\\n     * generates a pseudorandom number\\n     * @param seed a value ensure different outcomes for different sources in the same block\\n   * @return a pseudorandom value\\n   */\\n    function random(uint256 seed) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        tx.origin,\\n                        blockhash(block.number - 1),\\n                        block.timestamp,\\n                        seed\\n                    )\\n                )\\n            );\\n    }\\n\\n    \\n    /** ADMIN */\\n    /**\\n    * enables owner to pause / unpause contract\\n    */\\n    function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    function setmaxLandCost(uint256 _amount) external requireContractsSet onlyOwner {\\n        maxLandCost = _amount;\\n    } \\n\\n    /**\\n    * allows owner to withdraw funds from minting\\n    */\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n}\"\r\n    },\r\n    \"interfaces/IRandomizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer {\\n    function random() external view returns (uint256);\\n    function randomCall() external;\\n}\"\r\n    },\r\n    \"interfaces/ILAND.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.1;\\n\\ninterface ILAND {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    // function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"interfaces/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.1;\\n\\ninterface ITraits {\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n  function selectTrait(uint16 seed, uint8 traitType) external view returns(uint8);\\n}\"\r\n    },\r\n    \"interfaces/IBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"../Bank.sol\\\";\\n\\ninterface IBank {\\n    function addManyToBankAndPack(address account, uint16[] calldata tokenIds) external;\\n    function randomAlienOwner(uint256 seed) external view returns (address);\\n    function bank(uint256) external view returns(uint16, uint80, address);\\n    function totalLANDEarned() external view returns(uint256);\\n    function lastClaimTimestamp() external view returns(uint256);\\n    function setOldTokenInfo(uint256 _tokenId) external;\\n\\n    function pack(uint256, uint256) external view returns(Bank.Stake memory);\\n    function packIndices(uint256) external view returns(uint256);\\n\\n}\"\r\n    },\r\n    \"interfaces/IWildAbduction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.1;\\n\\ninterface IWildAbduction {\\n\\n    // struct to store each token's traits\\n    struct CowboyAlien {\\n        bool isCowboy;\\n        bool isMutant;\\n        uint8 pants;\\n        uint8 top;\\n        uint8 hat;\\n        uint8 weapon;\\n        uint8 accessory;\\n        uint8 alphaIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getPaidTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (CowboyAlien memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Bank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./LAND.sol\\\";\\nimport \\\"./WildAbduction.sol\\\";\\nimport \\\"./interfaces/IBank.sol\\\";\\nimport \\\"./interfaces/ILAND.sol\\\";\\nimport \\\"./interfaces/IWildAbduction.sol\\\";\\nimport \\\"./interfaces/IRandomizer.sol\\\";\\nimport \\\"./WAGGame.sol\\\";\\n\\ncontract Bank is Ownable, IERC721Receiver, Pausable {\\n\\n    // maximum alpha score for a Alien\\n    uint8 public constant MAX_ALPHA = 8;\\n\\n    // struct to store a stake's token, owner, and earning values\\n    struct Stake {\\n        uint16 tokenId;\\n        uint80 value;\\n        address owner;\\n    }\\n\\n    event CowboyStaked(address owner, uint256 tokenId, uint256 value);\\n    event MutantStaked(address owner, uint256 tokenId, uint256 value);\\n    event AlienStaked(address owner, uint256 tokenId, uint256 value);\\n    event CowboyClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n    event MutantClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n    event AlienClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n\\n    // reference to the WAG NFT contract\\n    WildAbduction public game;\\n    // reference to WAG game contract\\n    WAGGame public wag;\\n    // reference to the $LAND contract for minting $LAND earnings\\n    ILAND public land;\\n\\n    // maps tokenId to stake\\n    mapping(uint256 => Stake) public bank;\\n    // maps alpha to all Alien stakes with that alpha\\n    mapping(uint256 => Stake[]) public pack;\\n    // tracks location of each Alien in Pack\\n    mapping(uint256 => uint256) public packIndices;\\n    // total alpha scores staked\\n    uint256 public totalAlphaStaked = 0;\\n    // any rewards distributed when no ... are staked\\n    uint256 public unaccountedRewards = 0;\\n    // amount of $LAND due for each alpha point staked\\n    uint256 public LANDPerAlpha = 0;\\n\\n    // Cowboy earn 9000 $LAND per day\\n    uint256 public DAILY_LAND_RATE = 9000 ether;\\n\\n    // Mutant earn 27000 $LAND per day\\n    uint256 public MUTANT_DAILY_LAND_RATE = 27000 ether;\\n\\n    // Cowboy must have 2 days worth of $LAND to unstake or else it's too cold\\n    uint256 public MINIMUM_TO_EXIT = 2 days;\\n    // aliens take a 20% tax on all $LAND claimed\\n    uint256 public constant LAND_CLAIM_TAX_PERCENTAGE = 20;\\n    // master tax which is progessively decreasing;\\n    uint256 public MASTER_TAX = 30;\\n    // there will only ever be (roughly) 2.4 billion $LAND earned through staking\\n    uint256 public constant MAXIMUM_GLOBAL_LAND = 2400000000 ether;\\n\\n    // amount of $LAND earned so far\\n    uint256 public totalLANDEarned;\\n    // number of Cowboy staked in the Bank\\n    uint256 public totalCowboyStaked;\\n    // number of Mutant staked in the Bank\\n    uint256 public totalMutantStaked;\\n    // the last time $LAND was claimed\\n    uint256 public lastClaimTimestamp;\\n\\n    // emergency rescue to allow unstaking without any checks but without $LAND\\n    bool public rescueEnabled = false;\\n\\n    bool private _reentrant = false;\\n\\n    modifier nonReentrant() {\\n        require(!_reentrant, \\\"No reentrancy\\\");\\n        _reentrant = true;\\n        _;\\n        _reentrant = false;\\n    }\\n\\n    constructor() {}\\n\\n    function setContracts(address _game, address _land, address _wag) external onlyOwner {\\n        game = WildAbduction(_game);\\n        land = ILAND(_land);\\n        wag = WAGGame(_wag);\\n    }\\n\\n    /***STAKING */\\n\\n    /**\\n     * adds Cowboy and Alien to the Bank and Pack\\n     * @param account the address of the staker\\n   * @param tokenIds the IDs of the Cowboy and Aliens to stake\\n   */\\n    function addManyToBankAndPack(address account, uint16[] calldata tokenIds) external nonReentrant {\\n        require( _msgSender() == tx.origin || _msgSender() == address(wag), \\\"DONT GIVE YOUR TOKENS AWAY\\\");\\n        require(account == tx.origin, \\\"account to token mismatch\\\");\\n\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            if (tokenIds[i] == 0) {\\n                continue;\\n            }\\n\\n            if (_msgSender() != address(wag)) {// dont do this step if its a mint + stake\\n                require(game.ownerOf(tokenIds[i]) == _msgSender(), \\\"NOT YOUR TOKEN\\\");\\n                game.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n            }\\n            if (isMutant(tokenIds[i]))\\n                _addCowboyToBank(account, tokenIds[i], true);\\n            else if (isCowboy(tokenIds[i]))\\n                _addCowboyToBank(account, tokenIds[i], false);\\n            else\\n                _addAlienToBank(account, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * adds a single Cowboy to the Bank\\n     * @param account the address of the staker\\n   * @param tokenId the ID of the Cowboy to add to the Bank\\n   */\\n    function _addCowboyToBank(address account, uint256 tokenId, bool _mutant) internal whenNotPaused _updateEarnings {\\n        bank[tokenId] = Stake({\\n        owner : account,\\n        tokenId : uint16(tokenId),\\n        value : uint80(block.timestamp)\\n        });\\n        \\n        if (_mutant) {\\n            totalMutantStaked += 1;\\n            emit MutantStaked(account, tokenId, block.timestamp);\\n        } else {\\n            totalCowboyStaked += 1;\\n            emit CowboyStaked(account, tokenId, block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * adds a single Alien to the Pack\\n     * @param account the address of the staker\\n   * @param tokenId the ID of the Alien to add to the Pack\\n   */\\n    function _addAlienToBank(address account, uint256 tokenId) internal {\\n        uint256 alpha = _alphaForAlien(tokenId);\\n        totalAlphaStaked += alpha;\\n        // Portion of earnings ranges from 8 to 5\\n        packIndices[tokenId] = pack[alpha].length;\\n        // Store the location of the Alien in the Pack\\n        pack[alpha].push(Stake({\\n        owner : account,\\n        tokenId : uint16(tokenId),\\n        value : uint80(LANDPerAlpha)\\n        }));\\n        // Add the Alien to the Pack\\n        emit AlienStaked(account, tokenId, LANDPerAlpha);\\n    }\\n\\n    /***CLAIMING / UNSTAKING */\\n\\n    /**\\n     * realize $LAND earnings and optionally unstake tokens from the Bank / Pack\\n     * to unstake a Cowboy it will require it has 2 days worth of $LAND unclaimed\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n   */\\n    function claimManyFromBankAndPack(uint16[] calldata tokenIds, bool unstake) external nonReentrant whenNotPaused _updateEarnings {\\n        require(_msgSender() == tx.origin || _msgSender() == address(wag) , \\\"Only EOA\\\");\\n        uint256 owed = 0;\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            if (isMutant(tokenIds[i]))\\n                owed += _claimCowboyFromBank(tokenIds[i], unstake, false);\\n            else if (isCowboy(tokenIds[i]))\\n                owed += _claimCowboyFromBank(tokenIds[i], unstake, true);\\n            else\\n                owed += _claimAlienFromPack(tokenIds[i], unstake);\\n        }\\n\\n        // pay master tax when claiming, will be progressively decreased;\\n        owed *= (100 - MASTER_TAX) / 100;\\n\\n        if (owed == 0) return;\\n        land.mint(_msgSender(), owed);\\n    }\\n\\n    /**\\n     * realize $LAND earnings for a single Cowboy/Mutant and optionally unstake it\\n     * if not unstaking, pay a 20% tax to the staked Aliens\\n     * if unstaking, there is a 50% chance all $LAND is stolen\\n     * @param tokenId the ID of the Cowboy to claim earnings from\\n   * @param unstake whether or not to unstake the Cowboy\\n   * @return owed - the amount of $LAND earned\\n   */\\n    function _claimCowboyFromBank(uint256 tokenId, bool unstake, bool cowboy) internal returns (uint256 owed) {\\n        Stake memory stake = bank[tokenId];\\n        require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n        require(!(unstake && block.timestamp - stake.value < MINIMUM_TO_EXIT), \\\"GONNA BE COLD WITHOUT TWO DAY'S LAND\\\");\\n\\n        // get rate for cowboys\\n        uint256 unstaking_rate = DAILY_LAND_RATE;\\n        // set rate if its a mutant\\n        if (!cowboy) {\\n            unstaking_rate = MUTANT_DAILY_LAND_RATE;\\n        }\\n\\n        if (totalLANDEarned < MAXIMUM_GLOBAL_LAND) {\\n            owed = (block.timestamp - stake.value) * unstaking_rate / 1 days;\\n        } else if (stake.value > lastClaimTimestamp) {\\n            owed = 0;\\n            // $LAND production stopped already\\n        } else {\\n            owed = (lastClaimTimestamp - stake.value) * unstaking_rate / 1 days;\\n            // stop earning additional $LAND if it's all been earned\\n        }\\n\\n        if (unstake) {\\n            if (cowboy) {\\n                if (random(block.timestamp) & 1 == 1) {// 50% chance of all $LAND stolen\\n                _payAlienTax(owed);\\n                owed = 0;\\n                totalCowboyStaked -= 1;\\n                }\\n            } else {\\n                totalMutantStaked -= 1;\\n            }\\n            \\n            game.transferFrom(address(this), _msgSender(), tokenId);\\n            // send back Cowboy\\n            delete bank[tokenId];\\n            \\n\\n        } else {\\n            if (cowboy) {\\n                _payAlienTax(owed * LAND_CLAIM_TAX_PERCENTAGE / 100);\\n                // percentage tax to staked aliens\\n                owed = owed * (100 - LAND_CLAIM_TAX_PERCENTAGE) / 100;\\n                // remainder goes to Cowboy owner\\n            }\\n            bank[tokenId] = Stake({\\n                owner : _msgSender(),\\n                tokenId : uint16(tokenId),\\n                value : uint80(block.timestamp)\\n                });\\n            // reset stake\\n        }\\n        if (cowboy) {\\n            emit CowboyClaimed(tokenId, unstake, owed);\\n        } else {\\n            emit MutantClaimed(tokenId, unstake, owed);\\n        }\\n    }\\n\\n    /**\\n     * realize $LAND earnings for a single Alien and optionally unstake it\\n     * Aliens earn $LAND proportional to their Alpha rank\\n     * @param tokenId the ID of the Alien to claim earnings from\\n   * @param unstake whether or not to unstake the Alien\\n   * @return owed - the amount of $LAND earned\\n   */\\n    function _claimAlienFromPack(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n        require(game.ownerOf(tokenId) == address(this), \\\"AINT A PART OF THE PACK\\\");\\n        uint256 alpha = _alphaForAlien(tokenId);\\n        Stake memory stake = pack[alpha][packIndices[tokenId]];\\n        require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n        owed = (alpha) * (LANDPerAlpha - stake.value);\\n        // Calculate portion of tokens based on Alpha\\n        if (unstake) {\\n            totalAlphaStaked -= alpha;\\n            // Remove Alpha from total staked\\n            game.transferFrom(address(this), _msgSender(), tokenId);\\n            // Send back Alien\\n            Stake memory lastStake = pack[alpha][pack[alpha].length - 1];\\n            pack[alpha][packIndices[tokenId]] = lastStake;\\n            // Shuffle last Alien to current position\\n            packIndices[lastStake.tokenId] = packIndices[tokenId];\\n            pack[alpha].pop();\\n            // Remove duplicate\\n            delete packIndices[tokenId];\\n            // Delete old mapping\\n        } else {\\n            pack[alpha][packIndices[tokenId]] = Stake({\\n            owner : _msgSender(),\\n            tokenId : uint16(tokenId),\\n            value : uint80(LANDPerAlpha)\\n            });\\n            // reset stake\\n        }\\n        emit AlienClaimed(tokenId, unstake, owed);\\n    }\\n\\n    /***ACCOUNTING */\\n\\n    /**\\n     * add $LAND to claimable pot for the Pack\\n     * @param amount $LAND to add to the pot\\n   */\\n    function _payAlienTax(uint256 amount) internal {\\n        if (totalAlphaStaked == 0) {// if there's no staked aliens\\n            unaccountedRewards += amount;\\n            // keep track of $LAND due to aliens\\n            return;\\n        }\\n        // makes sure to include any unaccounted $LAND\\n        LANDPerAlpha += (amount + unaccountedRewards) / totalAlphaStaked;\\n        unaccountedRewards = 0;\\n    }\\n\\n    /**\\n     * tracks $LAND earnings to ensure it stops once 2.4 billion is eclipsed\\n     */\\n    modifier _updateEarnings() {\\n        if (totalLANDEarned < MAXIMUM_GLOBAL_LAND) {\\n            totalLANDEarned +=\\n            (block.timestamp - lastClaimTimestamp)\\n            * totalCowboyStaked\\n            * DAILY_LAND_RATE / 1 days;\\n\\n            totalLANDEarned +=\\n            (block.timestamp - lastClaimTimestamp)\\n            * totalMutantStaked\\n            * MUTANT_DAILY_LAND_RATE / 1 days;\\n            lastClaimTimestamp = block.timestamp;\\n        }\\n        _;\\n    }\\n\\n    /***ADMIN */\\n\\n    function setSettings(uint256 rate, uint256 mutant_rate, uint256 exit) external onlyOwner {\\n        MINIMUM_TO_EXIT = exit;\\n        DAILY_LAND_RATE = rate;\\n        MUTANT_DAILY_LAND_RATE = mutant_rate;\\n    }\\n\\n    /**\\n     * allows owner to enable \\\"rescue mode\\\"\\n     * simplifies accounting, prioritizes tokens out in emergency\\n     */\\n    function setRescueEnabled(bool _enabled) external onlyOwner {\\n        rescueEnabled = _enabled;\\n    }\\n\\n    /**\\n     * enables owner to pause / unpause minting\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    /**\\n     * reduces master tax\\n     */\\n    function reduceMasterTax(uint256 tax) external onlyOwner {\\n        MASTER_TAX = tax;\\n    }\\n\\n    /***READ ONLY */\\n\\n    /**\\n     * checks if a token is a Cowboy\\n     * @param tokenId the ID of the token to check\\n   * @return Cowboy - whether or not a token is a Cowboy\\n   */\\n    function isCowboy(uint256 tokenId) public view returns (bool Cowboy) {\\n        (Cowboy, , , , , , ,) = game.tokenTraits(tokenId);\\n    }\\n\\n    /**\\n     * checks if a token is a Cowboy\\n     * @param tokenId the ID of the token to check\\n   * @return Mutant - whether or not a token is a Cowboy\\n   */\\n    function isMutant(uint256 tokenId) public view returns (bool Mutant) {\\n        (,Mutant, , , , , ,) = game.tokenTraits(tokenId);\\n    }\\n\\n\\n    /**\\n     * gets the alpha score for a Alien\\n     * @param tokenId the ID of the Alien to get the alpha score for\\n   * @return the alpha score of the Alien (5-8)\\n   */\\n    function _alphaForAlien(uint256 tokenId) internal view returns (uint8) {\\n        (, , , , , , , uint8 alphaIndex) = game.tokenTraits(tokenId);\\n        return MAX_ALPHA - alphaIndex;\\n    }\\n\\n    /**\\n     * chooses a random Alien Cowboy when a newly minted token is stolen\\n     * @param seed a random value to choose a Alien from\\n   * @return the owner of the randomly selected Alien Cowboy\\n   */\\n    function randomAlienOwner(uint256 seed) external view returns (address) {\\n        if (totalAlphaStaked == 0) return address(0x0);\\n        uint256 bucket = (seed & 0xFFFFFFFF) % totalAlphaStaked;\\n        // choose a value from 0 to total alpha staked\\n        uint256 cumulative;\\n        seed >>= 32;\\n        // loop through each bucket of Aliens with the same alpha score\\n        for (uint i = MAX_ALPHA - 3; i <= MAX_ALPHA; i++) {\\n            cumulative += pack[i].length * i;\\n            // if the value is not inside of that bucket, keep going\\n            if (bucket >= cumulative) continue;\\n            // get the address of a random Alien with that alpha score\\n            return pack[i][seed % pack[i].length].owner;\\n        }\\n        return address(0x0);\\n    }\\n\\n    /**\\n     * generates a pseudorandom number\\n     * @param seed a value ensure different outcomes for different sources in the same block\\n   * @return a pseudorandom value\\n   */\\n    function random(uint256 seed) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        tx.origin,\\n                        blockhash(block.number - 1),\\n                        block.timestamp,\\n                        seed\\n                    )\\n                )\\n            );\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        require(from == address(0x0), \\\"Cannot send tokens to Barn directly\\\");\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"WildAbduction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./interfaces/IWildAbduction.sol\\\";\\nimport \\\"./interfaces/IBank.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/ILAND.sol\\\";\\n\\n\\ncontract WildAbduction is IWildAbduction, ERC721Enumerable, Ownable, Pausable {\\n\\n    struct LastWrite {\\n        uint64 time;\\n        uint64 blockNum;\\n    }\\n\\n    event CowboyMinted(uint256 indexed tokenId);\\n    event MutantMinted(uint256 indexed tokenId);\\n    event AlienMinted(uint256 indexed tokenId);\\n    event CowboyStolen(uint256 indexed tokenId);\\n    event CowboyBurned(uint256 indexed tokenId);\\n    event AlienBurned(uint256 indexed tokenId);\\n\\n\\n    // max number of tokens that can be minted: 40000 in production\\n    uint256 public maxTokens;\\n    // max number of mutants that can be minted as gen 0: 55 in production\\n    uint256 public MUTANT_COUNT;\\n    // number of tokens that can be claimed for a fee: 4444\\n    uint256 public PAID_TOKENS;\\n    // number of tokens have been minted so far\\n    uint16 public override minted;\\n\\n\\n    // mapping from tokenId to a struct containing the token's traits\\n    mapping(uint256 => CowboyAlien) public tokenTraits;\\n    // mapping from hashed(tokenTrait) to the tokenId it's associated with\\n    // used to ensure there are no duplicates\\n    mapping(uint256 => uint256) public existingCombinations;\\n\\n    // reference to bank\\n    IBank public bank;\\n    // reference to Traits\\n    ITraits public traits;\\n    \\n    // address => allowedToCallFunctions\\n    mapping(address => bool) private admins;\\n\\n    constructor(uint256 _maxTokens) ERC721(\\\"WAG Game\\\", 'WGAME') {\\n        maxTokens = _maxTokens;\\n        admins[msg.sender] = true;\\n        PAID_TOKENS = 4444;\\n        _pause();\\n    }\\n\\n    function setContracts(address _bank, address _traits) external onlyOwner {\\n        bank = IBank(_bank);\\n        traits = ITraits(_traits);\\n    }\\n\\n\\n    /** \\n    * Mint a token - any payment / game logic should be handled in the game contract. \\n    * This will just generate random traits and mint a token to a designated address.\\n    */\\n    function mint(address recipient, uint256 seed) external override whenNotPaused {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        require(minted + 1 <= maxTokens, \\\"All tokens minted\\\");\\n        minted++;\\n        generate(minted, seed);\\n        if(tx.origin != recipient && recipient != address(bank)) {\\n            emit CowboyStolen(minted);\\n        }\\n        _safeMint(recipient, minted);\\n    }\\n\\n    /** \\n    * Burn a token - any game logic should be handled before this function.\\n    */\\n    function burn(uint256 tokenId) external override whenNotPaused {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        require(ownerOf(tokenId) == tx.origin, \\\"Oops you don't own that\\\");\\n        if(tokenTraits[tokenId].isCowboy) {\\n            emit CowboyBurned(tokenId);\\n        }\\n        else {\\n            emit AlienBurned(tokenId);\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override(ERC721) {\\n        // allow admin contracts to be send without approval\\n        if(!admins[_msgSender()]) {\\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        }\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /** INTERNAL */\\n\\n    /**\\n    * generates traits for a specific token, checking to make sure it's unique\\n    * @param tokenId the id of the token to generate traits for\\n    * @param seed a pseudorandom 256 bit number to derive traits from\\n    * @return t - a struct of traits for the given token ID\\n    */\\n    function generate(uint256 tokenId, uint256 seed) internal returns (CowboyAlien memory t) {\\n        t = selectTraits(seed);\\n\\n        // only 55 mutants\\n        if (t.isMutant && MUTANT_COUNT == 55 && minted <= PAID_TOKENS) {\\n            return generate(tokenId, random(seed));\\n        }\\n        if (existingCombinations[structToHash(t)] == 0) {\\n            tokenTraits[tokenId] = t;\\n            existingCombinations[structToHash(t)] = tokenId;\\n            return t;\\n        }\\n        return generate(tokenId, random(seed));\\n    }\\n\\n    /**\\n     * uses A.J. Walker's Alias algorithm for O(1) rarity table lookup\\n     * ensuring O(1) instead of O(n) reduces mint cost by more than 50%\\n     * probability & alias tables are generated off-chain beforehand\\n     * @param seed portion of the 256 bit seed to remove trait correlation\\n   * @param traitType the trait type to select a trait for\\n   * @return the ID of the randomly selected trait\\n   */\\n    function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\\n        return traits.selectTrait(seed, traitType);\\n    }\\n\\n    \\n\\n    /**\\n     * selects the species and all of its traits based on the seed value\\n     * @param seed a pseudorandom 256 bit number to derive traits from\\n   * @return t -  a struct of randomly selected traits\\n   */\\n    function selectTraits(uint256 seed) internal view returns (CowboyAlien memory t) {\\n\\n        t.isMutant = (seed & 0xFFFF) % 3 == 0 && (seed & 0xFFFF) % 7 == 0;\\n\\n        if (t.isMutant) {\\n            t.isCowboy = true;\\n        } else {\\n            // not exactly 88.75%\\n            t.isCowboy = (seed & 0xFFFF) % 10 != 0;\\n        }\\n\\n        seed >>= 16;\\n        t.pants = selectTrait(uint16(seed & 0xFFFF), 0 );\\n\\n        seed >>= 16;\\n        t.top = selectTrait(uint16(seed & 0xFFFF), 1 );\\n\\n        seed >>= 16;\\n        t.hat = selectTrait(uint16(seed & 0xFFFF), 2 );\\n\\n        seed >>= 16;\\n        t.weapon = selectTrait(uint16(seed & 0xFFFF), 3);\\n\\n        seed >>= 16;\\n        t.accessory = selectTrait(uint16(seed & 0xFFFF), 4);\\n\\n        seed >>= 16;\\n        if (!t.isCowboy) {\\n            t.alphaIndex = selectTrait(uint16(seed & 0xFFFF), 5);\\n        }\\n    }\\n\\n    /**\\n    * converts a struct to a 256 bit hash to check for uniqueness\\n    * @param s the struct to pack into a hash\\n    * @return the 256 bit hash of the struct\\n    */\\n    function structToHash(CowboyAlien memory s) internal pure returns (uint256) {\\n        return uint256(keccak256(\\n                abi.encodePacked(\\n                    s.isCowboy,\\n                    s.isMutant,\\n                    s.pants,\\n                    s.top,\\n                    s.hat,\\n                    s.weapon,\\n                    s.accessory,\\n                    s.alphaIndex\\n                )\\n            ));\\n    }\\n\\n    /**\\n     * generates a pseudorandom number\\n     * @param seed a value ensure different outcomes for different sources in the same block\\n   * @return a pseudorandom value\\n   */\\n    function random(uint256 seed) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        tx.origin,\\n                        blockhash(block.number - 1),\\n                        block.timestamp,\\n                        seed\\n                    )\\n                )\\n            );\\n    }\\n\\n\\n    /***READ */\\n\\n    function getTokenTraits(uint256 tokenId) external view override returns (CowboyAlien memory) {\\n        return tokenTraits[tokenId];\\n    }\\n\\n    function getPaidTokens() external view override returns (uint256) {\\n        return PAID_TOKENS;\\n    }\\n\\n\\n    /** ADMIN */\\n\\n    /**\\n    * updates the number of tokens for sale\\n    */\\n    function setPaidTokens(uint256 _paidTokens) external onlyOwner {\\n        PAID_TOKENS = uint16(_paidTokens);\\n    }\\n\\n    /**\\n    * enables owner to pause / unpause minting\\n    */\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    /**\\n    * enables an address to mint / burn\\n    * @param addr the address to enable\\n    */\\n    function addAdmin(address addr) external onlyOwner {\\n        admins[addr] = true;\\n    }\\n\\n    /**\\n    * disables an address from minting / burning\\n    * @param addr the address to disbale\\n    */\\n    function removeAdmin(address addr) external onlyOwner {\\n        admins[addr] = false;\\n    }\\n\\n    /** Traits */\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"Token ID does not exist\\\");\\n        return traits.tokenURI(tokenId);\\n    }\\n\\n}\"\r\n    },\r\n    \"LAND.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LAND is ERC20, Ownable {\\n\\n    // a mapping from an address to whether or not it can mint / burn\\n    mapping(address => bool) controllers;\\n\\n    constructor() ERC20(\\\"LAND\\\", \\\"LAND\\\") { }\\n\\n    /**\\n     * mints $LAND to a recipient\\n     * @param to the recipient of the $LAND\\n   * @param amount the amount of $LAND to mint\\n   */\\n    function mint(address to, uint256 amount) external {\\n        require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * burns $LAND from a holder\\n     * @param from the holder of the $LAND\\n   * @param amount the amount of $LAND to burn\\n   */\\n    function burn(address from, uint256 amount) external {\\n        require(controllers[msg.sender], \\\"Only controllers can burn\\\");\\n        _burn(from, amount);\\n    }\\n\\n    /**\\n     * enables an address to mint / burn\\n     * @param controller the address to enable\\n   */\\n    function addController(address controller) external onlyOwner {\\n        controllers[controller] = true;\\n    }\\n\\n    /**\\n     * disables an address from minting / burning\\n     * @param controller the address to disbale\\n   */\\n    function removeController(address controller) external onlyOwner {\\n        controllers[controller] = false;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ILAND\",\"name\":\"_land\",\"type\":\"address\"},{\"internalType\":\"contract ITraits\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"contract IWildAbduction\",\"name\":\"_wagNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToAdd\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"freeMint\",\"type\":\"bool\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPublicSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"land\",\"outputs\":[{\"internalType\":\"contract ILAND\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTokens\",\"type\":\"uint256\"}],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"}],\"name\":\"setPublicSaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setmaxLandCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WAGGame", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000057e6ca35b729117eb17912eff8bb2e6c2ff03eaa0000000000000000000000000d36a885473a0f3633b7390cfecd6fc633fe4d630000000000000000000000009fe0c91e9032d4978dadfc1f2bf506fead0b951c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}