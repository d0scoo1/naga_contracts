{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20Token {\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface IERC721 {\r\n\r\n    function mint(address to, uint32 _assetType, uint32 _customDetails) external returns (bool success);\r\n\r\n}\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract JOYNSeller is Ownable {\r\n    \r\n    address public tokenAddress;\r\n    address public nftAddress;\r\n    address public sellingWallet;\r\n    \r\n    struct assetDescription {\r\n        uint256 price;\r\n        uint32 details;\r\n    }\r\n    mapping(uint => assetDescription) public assets;\r\n    \r\n    constructor() {\r\n        sellingWallet = 0x742c6aFf3cC30E6AC1576aaAade52d356E4C85B4;\r\n        nftAddress = 0x631473485618e7fa0D777dF30A41cfF63F807D7D;\r\n        tokenAddress = 0xeAA2484Dc3CdC2fA34098e2e2A1e70047355e3F0;\r\n        fillAssets(1, (1500 ether), 1000000);\r\n        fillAssets(2, (3000 ether), 2000000);\r\n        fillAssets(3, (7500 ether), 3000000);\r\n        fillAssets(4, (10000 ether), 4000000);\r\n        fillAssets(5, (15000 ether), 5000000);\r\n        fillAssets(6, (75000 ether), 6000000);\r\n        fillAssets(7, (65500 ether), 7000000);\r\n        fillAssets(8, (40000 ether), 8000000);\r\n        fillAssets(9, (90000 ether), 9000000);\r\n        fillAssets(10, (55000 ether), 10000000);\r\n        fillAssets(11, (105000 ether), 11000000);\r\n        fillAssets(12, (50000 ether), 12000000);\r\n        fillAssets(13, (22500 ether), 13000000);\r\n        fillAssets(14, (30000 ether), 14000000);\r\n        fillAssets(15, (45000 ether), 15000000);\r\n    }\r\n    \r\n    function fillAssets(uint256 _id, uint256 _price, uint32 _details) private {\r\n        assets[_id].price = _price;\r\n        assets[_id].details = _details;\r\n    }\r\n    \r\n    function bytesToUint(bytes memory b) private pure returns (uint256){\r\n        uint256 number;\r\n        for(uint i=0;i<b.length;i++){\r\n            number = number + uint(uint8(b[i]))*(2**(8*(b.length-(i+1))));\r\n        }\r\n        return number;\r\n    }\r\n    \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public returns (bool success) {\r\n        require(tokenAddress == _token);\r\n        uint assetType = bytesToUint(_extraData);\r\n        require(assets[assetType].price <= _value);\r\n        IERC20Token token = IERC20Token(tokenAddress);\r\n        require(token.transferFrom(_from, sellingWallet, assets[assetType].price), \"ERC20 Transfer error\");\r\n        IERC721 nft = IERC721(nftAddress);\r\n        require(nft.mint(_from, uint32(assetType), assets[assetType].details));\r\n        return true;\r\n    }\r\n    \r\n    function setPrice(uint256 _assetId, uint256 _newPrice) public onlyOwner {\r\n        assets[_assetId].price = _newPrice;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"details\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "JOYNSeller", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd1bc19c16c3aa81f9987c335c2d35236f0a5b0e2bea85719ee9994bb39bb251"}]}