{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@yield-protocol/vault-v2/contracts/other/notional/NotionalMultiOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.6;\\n\\nimport \\\"@yield-protocol/utils-v2/contracts/access/AccessControl.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastBytes32Bytes6.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/IOracle.sol\\\";\\n\\n\\n/**\\n * @title NotionalMultiOracle\\n  * @notice We value fCash assets at face value. We still need to account from conversions\\n * between fCash's 8 decimals and the decimals of the underlying.\\n */\\ncontract NotionalMultiOracle is IOracle, AccessControl {\\n    using CastBytes32Bytes6 for bytes32;\\n\\n    event SourceSet(bytes6 indexed notionalId, bytes6 indexed underlyingId, address underlying);\\n\\n    struct Source {\\n        uint8 baseDecimals;\\n        uint8 quoteDecimals;\\n        bool set;\\n    }\\n\\n    uint8 public constant FCASH_DECIMALS = 8;\\n    mapping(bytes6 => mapping(bytes6 => Source)) public sources;\\n\\n    /// @dev Set or reset an oracle source and its inverse\\n    function setSource(bytes6 notionalId, bytes6 underlyingId, IERC20Metadata underlying)\\n        external auth\\n    {\\n        require (notionalId != underlyingId, \\\"Wrong input\\\");\\n        sources[notionalId][underlyingId] = Source({\\n            baseDecimals: FCASH_DECIMALS, // I'm assuming here that fCash has 18 decimals\\n            quoteDecimals: underlying.decimals(), // Ideally we would get the underlying from fCash\\n            set: true\\n        });\\n        emit SourceSet(notionalId, underlyingId, address(underlying));\\n\\n        sources[underlyingId][notionalId] = Source({\\n            baseDecimals: underlying.decimals(), // We are reversing the base and the quote\\n            quoteDecimals: FCASH_DECIMALS,\\n            set: true\\n        });\\n        emit SourceSet(underlyingId, notionalId, address(underlying));\\n    }\\n\\n    /// @dev Convert amountBase base into quote at the latest oracle price.\\n    function peek(bytes32 baseId, bytes32 quoteId, uint256 amountBase)\\n        external view virtual override\\n        returns (uint256 amountQuote, uint256 updateTime)\\n    {\\n        if (baseId == quoteId) return (amountBase, block.timestamp);\\n        (amountQuote, updateTime) = _peek(baseId.b6(), quoteId.b6(), amountBase);\\n    }\\n\\n    /// @dev Convert amountBase base into quote at the latest oracle price, updating state if necessary. Same as `peek` for this oracle.\\n    function get(bytes32 baseId, bytes32 quoteId, uint256 amountBase)\\n        external virtual override\\n        returns (uint256 amountQuote, uint256 updateTime)\\n    {\\n        if (baseId == quoteId) return (amountBase, block.timestamp);\\n        (amountQuote, updateTime) = _peek(baseId.b6(), quoteId.b6(), amountBase);\\n    }\\n\\n    /// @dev Convert amountBase base into quote at the latest oracle price.\\n    function _peek(bytes6 baseId, bytes6 quoteId, uint256 amountBase)\\n        private view\\n        returns (uint amountQuote, uint updateTime)\\n    {\\n        Source memory source = sources[baseId][quoteId];\\n        require (source.set == true, \\\"Source not found\\\");\\n        // fUSDC/USDC: 1 fUSDC (*10^8) * (1^6)/(10^8 fUSDC per USDC) = 10^6 USDC wei\\n        amountQuote = amountBase * (10 ** source.quoteDecimals) / (10 ** source.baseDecimals);\\n        updateTime = block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes4` identifier. These are expected to be the \\n * signatures for all the functions in the contract. Special roles should be exposed\\n * in the external API and be unique:\\n *\\n * ```\\n * bytes4 public constant ROOT = 0x00000000;\\n * ```\\n *\\n * Roles represent restricted access to a function call. For that purpose, use {auth}:\\n *\\n * ```\\n * function foo() public auth {\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `ROOT`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {setRoleAdmin}.\\n *\\n * WARNING: The `ROOT` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\ncontract AccessControl {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes4 adminRole;\\n    }\\n\\n    mapping (bytes4 => RoleData) private _roles;\\n\\n    bytes4 public constant ROOT = 0x00000000;\\n    bytes4 public constant ROOT4146650865 = 0x00000000; // Collision protection for ROOT, test with ROOT12007226833()\\n    bytes4 public constant LOCK = 0xFFFFFFFF;           // Used to disable further permissioning of a function\\n    bytes4 public constant LOCK8605463013 = 0xFFFFFFFF; // Collision protection for LOCK, test with LOCK10462387368()\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role\\n     *\\n     * `ROOT` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes4 indexed role, bytes4 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call.\\n     */\\n    event RoleGranted(bytes4 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes4 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Give msg.sender the ROOT role and create a LOCK role with itself as the admin role and no members. \\n     * Calling setRoleAdmin(msg.sig, LOCK) means no one can grant that msg.sig role anymore.\\n     */\\n    constructor () {\\n        _grantRole(ROOT, msg.sender);   // Grant ROOT to msg.sender\\n        _setRoleAdmin(LOCK, LOCK);      // Create the LOCK role by setting itself as its own admin, creating an independent role tree\\n    }\\n\\n    /**\\n     * @dev Each function in the contract has its own role, identified by their msg.sig signature.\\n     * ROOT can give and remove access to each function, lock any further access being granted to\\n     * a specific action, or even create other roles to delegate admin control over a function.\\n     */\\n    modifier auth() {\\n        require (_hasRole(msg.sig, msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allow only if the caller has been granted the admin role of `role`.\\n     */\\n    modifier admin(bytes4 role) {\\n        require (_hasRole(_getRoleAdmin(role), msg.sender), \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes4 role, address account) external view returns (bool) {\\n        return _hasRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes4 role) external view returns (bytes4) {\\n        return _getRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n\\n     * If ``role``'s admin role is not `adminRole` emits a {RoleAdminChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function setRoleAdmin(bytes4 role, bytes4 adminRole) external virtual admin(role) {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes4 role, address account) external virtual admin(role) {\\n        _grantRole(role, account);\\n    }\\n\\n    \\n    /**\\n     * @dev Grants all of `role` in `roles` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - For each `role` in `roles`, the caller must have ``role``'s admin role.\\n     */\\n    function grantRoles(bytes4[] memory roles, address account) external virtual {\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), \\\"Only admin\\\");\\n            _grantRole(roles[i], account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets LOCK as ``role``'s admin role. LOCK has no members, so this disables admin management of ``role``.\\n\\n     * Emits a {RoleAdminChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function lockRole(bytes4 role) external virtual admin(role) {\\n        _setRoleAdmin(role, LOCK);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes4 role, address account) external virtual admin(role) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes all of `role` in `roles` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - For each `role` in `roles`, the caller must have ``role``'s admin role.\\n     */\\n    function revokeRoles(bytes4[] memory roles, address account) external virtual {\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), \\\"Only admin\\\");\\n            _revokeRole(roles[i], account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes4 role, address account) external virtual {\\n        require(account == msg.sender, \\\"Renounce only for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _hasRole(bytes4 role, address account) internal view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _getRoleAdmin(bytes4 role) internal view returns (bytes4) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function _setRoleAdmin(bytes4 role, bytes4 adminRole) internal virtual {\\n        if (_getRoleAdmin(role) != adminRole) {\\n            _roles[role].adminRole = adminRole;\\n            emit RoleAdminChanged(role, adminRole);\\n        }\\n    }\\n\\n    function _grantRole(bytes4 role, address account) internal {\\n        if (!_hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes4 role, address account) internal {\\n        if (_hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/cast/CastBytes32Bytes6.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastBytes32Bytes6 {\\n    function b6(bytes32 x) internal pure returns (bytes6 y){\\n        require (bytes32(y = bytes6(x)) == x, \\\"Cast overflow\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"@yield-protocol/vault-interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Doesn't refresh the price, but returns the latest value available without doing any transactional operations:\\n     * @return value in wei\\n     */\\n    function peek(\\n        bytes32 base,\\n        bytes32 quote,\\n        uint256 amount\\n    ) external view returns (uint256 value, uint256 updateTime);\\n\\n    /**\\n     * @notice Does whatever work or queries will yield the most up-to-date price, and returns it.\\n     * @return value in wei\\n     */\\n    function get(\\n        bytes32 base,\\n        bytes32 quote,\\n        uint256 amount\\n    ) external returns (uint256 value, uint256 updateTime);\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"newAdminRole\",\"type\":\"bytes4\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes6\",\"name\":\"notionalId\",\"type\":\"bytes6\"},{\"indexed\":true,\"internalType\":\"bytes6\",\"name\":\"underlyingId\",\"type\":\"bytes6\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"SourceSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FCASH_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK8605463013\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT4146650865\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"baseId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"quoteId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"roles\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"lockRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"baseId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"quoteId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"}],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"roles\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"adminRole\",\"type\":\"bytes4\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"notionalId\",\"type\":\"bytes6\"},{\"internalType\":\"bytes6\",\"name\":\"underlyingId\",\"type\":\"bytes6\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"setSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"\",\"type\":\"bytes6\"},{\"internalType\":\"bytes6\",\"name\":\"\",\"type\":\"bytes6\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"baseDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NotionalMultiOracle", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}