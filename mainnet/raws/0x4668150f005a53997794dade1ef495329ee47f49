{"status": "1", "message": "OK", "result": [{"SourceCode": "/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n////import \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: UNLICENSED\r\n\r\npragma solidity =0.8.6;\r\n\r\n// solcurity: E1, index what could be useful for offchain reading. Do not index dynamic types like strings or bytes.\r\n// solcurity: E5\r\ncontract cLendingEventEmitter {\r\n    event LoanTermsChanged(\r\n        uint256 previousYearlyInterst,\r\n        uint256 newYearlyInterst,\r\n        uint256 previousLoanDefaultThresholdPercent,\r\n        uint256 newLoanDefaultThresholdPercent,\r\n        uint256 timestamp,\r\n        address changedBy\r\n    );\r\n\r\n    event NewTokenAdded(\r\n        address token,\r\n        uint256 collaterability,\r\n        address liquidationBeneficiary,\r\n        uint256 timestamp,\r\n        address addedBy\r\n    );\r\n\r\n    event TokenLiquidationBeneficiaryChanged(\r\n        address token,\r\n        address oldBeneficiary,\r\n        address newBeneficiary,\r\n        uint256 timestamp,\r\n        address changedBy\r\n    );\r\n\r\n    event TokenCollaterabilityChanged(\r\n        address token,\r\n        uint256 oldCollaterability,\r\n        uint256 newCollaterability,\r\n        uint256 timestamp,\r\n        address changedBy\r\n    );\r\n\r\n    event CollateralAdded(address token, uint256 amount, uint256 timestamp, address addedBy);\r\n\r\n    event LoanTaken(uint256 amount, uint256 timestamp, address takenBy);\r\n\r\n    event Repayment(address token, uint256 amountTokens, uint256 timestamp, address addedBy);\r\n\r\n    event InterestPaid(address paidInToken, uint256 interestAmountInDAI, uint256 timestamp, address paidBy);\r\n\r\n    event Liquidation(\r\n        address userWhoWasLiquidated,\r\n        uint256 totalCollateralValueLiquidated,\r\n        uint256 timestamp,\r\n        address caller\r\n    );\r\n\r\n    event CollateralReclaimed(address token, uint256 amount, uint256 timestamp, address byWho);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: UNLICENSED\r\n\r\npragma solidity =0.8.6;\r\n\r\nstruct DebtorSummary {\r\n    uint256 timeLastBorrow; // simple timestamp\r\n    uint256 amountDAIBorrowed; // denominated in DAI units (1e18)\r\n    uint256 pendingInterests; // interests accumulated from previous loans\r\n    // Meaning 1 DAI = 1e18 here since DAI is 1e18\r\n    Collateral[] collateral;\r\n}\r\n\r\nstruct Collateral {\r\n    address collateralAddress;\r\n    uint256 amountCollateral;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: UNLICENSED\r\npragma solidity =0.8.6;\r\n\r\n////import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title Library housing all the different function helpers that take space in the main contract\r\n * @author CVault Finance\r\n */\r\nlibrary CLendingLibrary {\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address person,\r\n        uint256 sendAmount\r\n    ) internal returns (uint256 transferedAmount) {\r\n        uint256 balanceBefore = token.balanceOf(address(this));\r\n        token.transferFrom(person, address(this), sendAmount);\r\n        uint256 balanceAfter = token.balanceOf(address(this));\r\n\r\n        transferedAmount = balanceAfter - balanceBefore;\r\n        require(transferedAmount == sendAmount, \"UNSUPPORTED_TOKEN\");\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/ContextUpgradeable.sol\";\r\n////import \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/macos/dev/cLend/contracts/CLending.sol\r\n*/\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: UNLICENSED\r\n\r\npragma solidity =0.8.6;\r\n\r\n////import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n////import \"./CLendingLibrary.sol\";\r\n////import \"./types/CLendingTypes.sol\";\r\n////import \"./CLendingEventEmitter.sol\";\r\n\r\n/**\r\n * @title Lending contract for CORE and CoreDAO\r\n * @author CVault Finance\r\n */\r\ncontract CLending is OwnableUpgradeable, cLendingEventEmitter {\r\n    using CLendingLibrary for IERC20;\r\n\r\n    IERC20 public constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 public constant CORE_TOKEN = IERC20(0x62359Ed7505Efc61FF1D56fEF82158CcaffA23D7);\r\n    address private constant DEADBEEF = 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF;\r\n\r\n    mapping(address => DebtorSummary) public debtorSummary;\r\n    mapping(address => uint256) public collaterabilityOfToken;\r\n    mapping(address => address) public liquidationBeneficiaryOfToken;\r\n    mapping(address => bool) public isAngel;\r\n\r\n\r\n    address public coreDAOTreasury;\r\n    uint256 public yearlyPercentInterest;\r\n    uint256 public loanDefaultThresholdPercent;\r\n    IERC20 public coreDAO; // initialized hence not immutable but should be\r\n\r\n    bool private entered;\r\n    bool private holyIntervention;\r\n\r\n    /// @dev upfront storage allocation for further upgrades\r\n    uint256[52] private _____gap;\r\n\r\n    modifier nonEntered {\r\n        require(!entered, \"NO_REENTRY\");\r\n        entered = true;\r\n        _;\r\n        entered = false;\r\n    }\r\n\r\n    modifier notHaram {\r\n        require(!holyIntervention,\"GOD_SAYS_NO\");\r\n        _;\r\n    }\r\n\r\n    function editAngels(address _angel, bool _isAngel) external onlyOwner {\r\n        isAngel[_angel] = _isAngel;\r\n    }\r\n\r\n    function intervenienteHomine() external {\r\n        require(isAngel[msg.sender] || msg.sender == owner(),\"HERETICAL\");\r\n        holyIntervention = true;\r\n    }\r\n\r\n    function godIsDead() external onlyOwner {\r\n        holyIntervention = false;\r\n    }\r\n\r\n    function initialize(\r\n        address _coreDAOTreasury,\r\n        IERC20 _daoToken,\r\n        uint256 _yearlyPercentInterest,\r\n        uint256 _loanDefaultThresholdPercent,\r\n        uint256 _coreTokenCollaterability\r\n    ) external initializer {\r\n        require(msg.sender == 0x5A16552f59ea34E44ec81E58b3817833E9fD5436, \"BUM\");\r\n        __Ownable_init();\r\n\r\n        coreDAOTreasury = _coreDAOTreasury;\r\n\r\n        changeLoanTerms(_yearlyPercentInterest, _loanDefaultThresholdPercent);\r\n\r\n        require(loanDefaultThresholdPercent > 100, \"WOULD_LIQUIDATE\");\r\n\r\n        addNewToken(address(_daoToken), DEADBEEF, 1, 18);\r\n        addNewToken(address(CORE_TOKEN), DEADBEEF, _coreTokenCollaterability, 18);\r\n        addNewToken(address(DAI), _coreDAOTreasury, 1, 18); // DAI should never be liquidated but this is just in case\r\n\r\n        coreDAO = _daoToken;\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"ETH_NOT_ACCEPTED\");\r\n    }\r\n\r\n    // It should be noted that this will change everything backwards in time meaning some people might be liquidated right away\r\n    function changeLoanTerms(uint256 _yearlyPercentInterest, uint256 _loanDefaultThresholdPercent) public onlyOwner {\r\n        require(_loanDefaultThresholdPercent > 100, \"WOULD_LIQUIDATE\");\r\n\r\n        emit LoanTermsChanged(\r\n            yearlyPercentInterest,\r\n            _yearlyPercentInterest,\r\n            loanDefaultThresholdPercent,\r\n            _loanDefaultThresholdPercent,\r\n            block.timestamp,\r\n            msg.sender\r\n        );\r\n\r\n        yearlyPercentInterest = _yearlyPercentInterest;\r\n        loanDefaultThresholdPercent = _loanDefaultThresholdPercent;\r\n    }\r\n\r\n    function editTokenCollaterability(address token, uint256 newCollaterability) external onlyOwner {\r\n        emit TokenCollaterabilityChanged(\r\n            token,\r\n            collaterabilityOfToken[token],\r\n            newCollaterability,\r\n            block.timestamp,\r\n            msg.sender\r\n        );\r\n        require(liquidationBeneficiaryOfToken[token] != address(0), \"NOT_ADDED\");\r\n        collaterabilityOfToken[token] = newCollaterability;\r\n    }\r\n\r\n    // warning this does not support different amount than 18 decimals\r\n    function addNewToken(\r\n        address token,\r\n        address liquidationBeneficiary,\r\n        uint256 collaterabilityInDAI,\r\n        uint256 decimals\r\n    ) public onlyOwner {\r\n        /// 1e18 CORE = 5,500 e18 DAI\r\n        /// 1units CORE = 5,500units DAI\r\n        // $1DAI = 1e18 units\r\n\r\n        /// wBTC = 1e8\r\n        /// collaterability of wbtc  40,000e10\r\n        /// totalCollaterability = how much UNITS of DAI one UNIT of this token is worth\r\n        // Collapse = worth less than 1 dai per unit ( 1e18 token is worth less than $1 or token has higher decimals than than 1e18)\r\n        require(decimals == 18, \"UNSUPPORTED_DECIMALS\");\r\n        require(\r\n            collaterabilityOfToken[token] == 0 && liquidationBeneficiaryOfToken[token] == address(0),\r\n            \"ALREADY_ADDED\"\r\n        );\r\n        if (liquidationBeneficiary == address(0)) {\r\n            liquidationBeneficiary = DEADBEEF;\r\n        } // covers not send to 0 tokens\r\n        require(collaterabilityInDAI > 0, \"INVALID_COLLATERABILITY\");\r\n        emit NewTokenAdded(token, collaterabilityInDAI, liquidationBeneficiary, block.timestamp, msg.sender);\r\n        liquidationBeneficiaryOfToken[token] = liquidationBeneficiary;\r\n        collaterabilityOfToken[token] = collaterabilityInDAI;\r\n    }\r\n\r\n    function editTokenLiquidationBeneficiary(address token, address newBeneficiary) external onlyOwner {\r\n        // Since beneficiary defaults to deadbeef it cannot be 0 if its been added before\r\n        require(liquidationBeneficiaryOfToken[token] != address(0), \"NOT_ADDED\");\r\n        require(token != address(CORE_TOKEN) && token != address(coreDAO), \"CANNOT_MODIFY\"); // Those should stay burned or floor doesnt hold\r\n        if (newBeneficiary == address(0)) {\r\n            newBeneficiary = DEADBEEF;\r\n        } // covers not send to 0 tokens\r\n        emit TokenLiquidationBeneficiaryChanged(\r\n            token,\r\n            liquidationBeneficiaryOfToken[token],\r\n            newBeneficiary,\r\n            block.timestamp,\r\n            msg.sender\r\n        );\r\n        liquidationBeneficiaryOfToken[token] = newBeneficiary;\r\n    }\r\n\r\n    // Repays the loan supplying collateral and not adding it\r\n    // solcurity: C48\r\n    function repayLoan(IERC20 token, uint256 amount) external notHaram nonEntered {\r\n\r\n        (uint256 totalDebt, ) = _liquidateDeliquent(msg.sender);\r\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\r\n        uint256 tokenCollateralAbility = collaterabilityOfToken[address(token)];\r\n        uint256 offeredCollateralValue = amount * tokenCollateralAbility;\r\n        uint256 _accruedInterest = accruedInterest(msg.sender);\r\n\r\n        require(offeredCollateralValue > 0, \"NOT_ENOUGH_COLLATERAL_OFFERED\"); // covers both cases its a not supported token and 0 case\r\n        require(totalDebt > 0, \"NOT_DEBT\");\r\n        require(offeredCollateralValue >= _accruedInterest, \"INSUFFICIENT_AMOUNT\"); // Has to be done because we have to update debt time\r\n        require(amount > 0, \"REPAYMENT_NOT_SUCESSFUL\");\r\n\r\n        // Note that acured interest is never bigger than 10% of supplied collateral because of liquidateDelinquent call above\r\n        if (offeredCollateralValue > totalDebt) {\r\n\r\n            amount = quantityOfTokenForValueInDAI(totalDebt, tokenCollateralAbility);\r\n\r\n            require(amount > 0, \"REPAYMENT_NOT_SUCESSFUL\");\r\n            userSummaryStorage.amountDAIBorrowed = 0;\r\n\r\n            // Updating debt time is not nessesary since accrued interest on 0 will always be 0\r\n        } else {\r\n            userSummaryStorage.amountDAIBorrowed -= (offeredCollateralValue - _accruedInterest);\r\n\r\n\r\n\r\n            // Send the repayment amt\r\n        }\r\n        \r\n        // Nessesary to do it after the change of amount\r\n        token.safeTransferFrom(msg.sender, amount); // amount is changed if user supplies more than is neesesry to wipe their debt and interest\r\n\r\n        emit Repayment(address(token), amount, block.timestamp, msg.sender);\r\n\r\n        // Interst handling\r\n        // Interest is always repaid here because of the offeredCollateralValue >= _accruedInterest check\r\n        uint256 amountTokensForInterestRepayment = quantityOfTokenForValueInDAI(\r\n            _accruedInterest,\r\n            tokenCollateralAbility\r\n        );\r\n\r\n        if (amountTokensForInterestRepayment > 0) {\r\n\r\n            _safeTransfer(address(token), coreDAOTreasury, amountTokensForInterestRepayment);\r\n\r\n        }\r\n        _wipeInterestOwed(userSummaryStorage);\r\n        emit InterestPaid(address(token), _accruedInterest, block.timestamp, msg.sender);\r\n    }\r\n\r\n    function quantityOfTokenForValueInDAI(uint256 quantityOfDAI, uint256 tokenCollateralAbility)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(tokenCollateralAbility > 0, \"TOKEN_UNSUPPORTED\");\r\n        return quantityOfDAI / tokenCollateralAbility;\r\n    }\r\n\r\n    // solcurity: C48\r\n    function _supplyCollateral(\r\n        DebtorSummary storage userSummaryStorage,\r\n        address user,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) private nonEntered {\r\n        // Clear previous borrows & collateral for this user if they are delinquent\r\n        _liquidateDeliquent(user);\r\n\r\n        uint256 tokenCollateralAbility = collaterabilityOfToken[address(token)]; // essentially a whitelist\r\n\r\n        require(token != DAI, \"DAI_IS_ONLY_FOR_REPAYMENT\");\r\n        require(tokenCollateralAbility != 0, \"NOT_ACCEPTED\");\r\n        require(amount > 0, \"!AMOUNT\");\r\n        require(user != address(0), \"NO_ADDRESS\");\r\n\r\n        // Transfer the token from owner, ////important this is first because of interest repayment which can send\r\n        token.safeTransferFrom(user, amount);\r\n\r\n        // We add collateral into the user struct\r\n        _upsertCollateralInUserSummary(userSummaryStorage, token, amount);\r\n        emit CollateralAdded(address(token), amount, block.timestamp, msg.sender);\r\n    }\r\n\r\n    function addCollateral(IERC20 token, uint256 amount) external {\r\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\r\n        _supplyCollateral(userSummaryStorage, msg.sender, token, amount);\r\n    }\r\n\r\n    function addCollateralAndBorrow(\r\n        IERC20 tokenCollateral,\r\n        uint256 amountCollateral,\r\n        uint256 amountBorrow\r\n    ) external notHaram {\r\n\r\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\r\n        _supplyCollateral(userSummaryStorage, msg.sender, tokenCollateral, amountCollateral);\r\n        _borrow(userSummaryStorage, msg.sender, amountBorrow);\r\n    }\r\n\r\n    function borrow(uint256 amount) external notHaram {\r\n\r\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\r\n        _borrow(userSummaryStorage, msg.sender, amount);\r\n    }\r\n\r\n    // Repays all users accumulated interest with margin\r\n    // Then checks if borrow can be preformed, adds it to total borrowed as well as transfers the dai to user\r\n    // solcurity: C48\r\n    function _borrow(\r\n        DebtorSummary storage userSummaryStorage,\r\n        address user,\r\n        uint256 amountBorrow\r\n    ) private nonEntered {\r\n        // We take users accrued interest and the amount borrowed\r\n        // We repay the accured interest from the loan amount, by adding it on top of the loan amount\r\n        uint256 totalCollateral = userCollateralValue(user); // Value of collateral in DAI\r\n        uint256 userAccruedInterest = accruedInterest(user); // Interest in DAI\r\n        uint256 totalAmountBorrowed = userSummaryStorage.amountDAIBorrowed;\r\n        uint256 totalDebt = userAccruedInterest + totalAmountBorrowed;\r\n\r\n        require(totalDebt < totalCollateral, \"OVER_DEBTED\");\r\n        require(amountBorrow > 0, \"NO_BORROW\"); // This is intentional after adding accured interest\r\n        require(user != address(0), \"NO_ADDRESS\");\r\n\r\n        uint256 userRemainingCollateral = totalCollateral - totalDebt; // User's collateral before making this loan\r\n\r\n        // If the amount borrow is higher than remaining collateral, cap it\r\n        if (amountBorrow > userRemainingCollateral) {\r\n            amountBorrow = userRemainingCollateral;\r\n        }\r\n        userSummaryStorage.amountDAIBorrowed += amountBorrow;\r\n        _wipeInterestOwed(userSummaryStorage); // because we added it to their borrowed amount\r\n\r\n        // carry forward the previous interest\r\n        userSummaryStorage.pendingInterests = userAccruedInterest;\r\n\r\n        DAI.transfer(user, amountBorrow); // DAI transfer function doesnt need safe transfer\r\n\r\n        emit LoanTaken(amountBorrow, block.timestamp, user);\r\n    }\r\n\r\n    function _upsertCollateralInUserSummary(\r\n        DebtorSummary storage userSummaryStorage,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) private returns (uint256 collateralIndex) {\r\n        // Insert or update operation\r\n        require(amount != 0, \"INVALID_AMOUNT\");\r\n        bool collateralAdded;\r\n\r\n        // Loops over all provided collateral, checks if its there and if it is edit it\r\n        uint256 length = userSummaryStorage.collateral.length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            Collateral storage collateral = userSummaryStorage.collateral[i];\r\n\r\n            if (collateral.collateralAddress == address(token)) {\r\n                \r\n                collateral.amountCollateral += amount;\r\n                collateralIndex = i;\r\n                collateralAdded = true;\r\n            }\r\n        }\r\n\r\n        // If it has not been already supplied we push it on\r\n        if (!collateralAdded) {\r\n\r\n            collateralIndex = userSummaryStorage.collateral.length;\r\n            \r\n            userSummaryStorage.collateral.push(\r\n                Collateral({collateralAddress: address(token), amountCollateral: amount})\r\n            );\r\n        }\r\n    }\r\n\r\n    function _isLiquidable(uint256 totalDebt, uint256 totalCollateral) private view returns (bool) {\r\n        return totalDebt > (totalCollateral * loanDefaultThresholdPercent) / 100;\r\n    }\r\n\r\n    // Liquidates people in default\r\n    // solcurity: C48\r\n    function liquidateDelinquent(address user) external notHaram nonEntered returns (uint256 totalDebt, uint256 totalCollateral)  {\r\n        return _liquidateDeliquent(user);\r\n    }\r\n\r\n    function _liquidateDeliquent(address user) private returns (uint256 totalDebt, uint256 totalCollateral) {\r\n        totalDebt = userTotalDebt(user); // This is with interest\r\n        totalCollateral = userCollateralValue(user);\r\n\r\n        if (_isLiquidable(totalDebt, totalCollateral)) {\r\n\r\n            // user is in default, wipe their debt and collateral\r\n            _liquidate(user); // only callsite\r\n            emit Liquidation(user, totalCollateral, block.timestamp, msg.sender);\r\n            return (0, 0);\r\n        }\r\n    }\r\n\r\n    // Only called in liquidatedliquent\r\n    // function of great consequence\r\n    // Loops over all user supplied collateral of user, and sends it\r\n    // to burn/beneficiary + pays 0.5% to caller if caller is not the user being liquidated.\r\n    function _liquidate(address user) private  {\r\n        // solcurity: C2 - debtorSummary[user]\r\n        uint256 length = debtorSummary[user].collateral.length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 amount = debtorSummary[user].collateral[i].amountCollateral;\r\n            address currentCollateralAddress = debtorSummary[user].collateral[i].collateralAddress;\r\n            \r\n            if (\r\n                msg.sender == user || // User liquidates himself no incentive.\r\n                currentCollateralAddress == address(coreDAO) || // no incentive for coreDAO to maintain floor, burned anyway\r\n                currentCollateralAddress == address(CORE_TOKEN)\r\n            ) {\r\n\r\n                // no incentive for core to maintain floor, and its burned anyway\r\n                _safeTransfer(\r\n                    currentCollateralAddress, //token\r\n                    liquidationBeneficiaryOfToken[currentCollateralAddress], // to\r\n                    amount //amount\r\n                );\r\n            } else {\r\n\r\n                // Someone else liquidates user 0.5% incentive (1/200)\r\n                _safeTransfer(\r\n                    currentCollateralAddress, //token\r\n                    liquidationBeneficiaryOfToken[currentCollateralAddress], // to\r\n                    (amount * 199) / 200 //amount 99.5%\r\n                );\r\n\r\n                _safeTransfer(\r\n                    currentCollateralAddress, //token\r\n                    msg.sender, // to\r\n                    amount / 200 //amount 0.5%\r\n                );\r\n            }\r\n        }\r\n\r\n        // remove all collateral and debt\r\n        delete debtorSummary[user];\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(bytes4(keccak256(bytes(\"transfer(address,uint256)\"))), to, value)\r\n        );\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function reclaimAllCollateral() external notHaram nonEntered {\r\n        (uint256 totalDebt,) = _liquidateDeliquent(msg.sender);\r\n\r\n        // Can only reclaim if there is collateral and 0 debt.\r\n        // If user was liquidated by above call, then this will revert\r\n        require(totalDebt == 0, \"STILL_IN_DEBT\");\r\n\r\n        // solcurity: C2 - debtorSummary[msg.sender]\r\n        uint256 length = debtorSummary[msg.sender].collateral.length;\r\n        require(length > 0, \"NOTHING_TO_CLAIM\");\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address collateralAddress = debtorSummary[msg.sender].collateral[i].collateralAddress;\r\n            uint256 amount = debtorSummary[msg.sender].collateral[i].amountCollateral;\r\n\r\n            require(amount > 0, \"SAFETY_CHECK_FAIL\");\r\n\r\n            _safeTransfer(\r\n                collateralAddress, //token\r\n                msg.sender, // to\r\n                amount //amount\r\n            );\r\n                        \r\n            emit CollateralReclaimed(collateralAddress, amount, block.timestamp, msg.sender);\r\n        }\r\n\r\n        // User doesnt have collateral anymore and paid off debt, bye\r\n        delete debtorSummary[msg.sender];\r\n    }\r\n\r\n    function userCollaterals(address user) public view returns (Collateral[] memory) {\r\n        return debtorSummary[user].collateral;\r\n    }\r\n\r\n    function userTotalDebt(address user) public view returns (uint256) {\r\n        return accruedInterest(user) + debtorSummary[user].amountDAIBorrowed;\r\n    }\r\n\r\n    function accruedInterest(address user) public view returns (uint256) {\r\n        DebtorSummary memory userSummaryMemory = debtorSummary[user];\r\n        uint256 timeSinceLastLoan = block.timestamp - userSummaryMemory.timeLastBorrow;\r\n\r\n        // Formula :\r\n        // Accrued interest =\r\n        // (DAI borrowed * percent interest per year * time since last loan ) / 365 days * 100\r\n        // + interest already pending ( from previous updates )\r\n        return\r\n            ((userSummaryMemory.amountDAIBorrowed * yearlyPercentInterest * timeSinceLastLoan) / 365_00 days) + // 365days * 100 in seconds\r\n            userSummaryMemory.pendingInterests;\r\n    }\r\n\r\n    function _wipeInterestOwed(DebtorSummary storage userSummaryStorage) private {\r\n        userSummaryStorage.timeLastBorrow = block.timestamp;\r\n\r\n        // solcurity: C38\r\n        userSummaryStorage.pendingInterests = 0; // clear user pending interests\r\n    }\r\n\r\n    function userCollateralValue(address user) public view returns (uint256 collateral) {\r\n        Collateral[] memory userCollateralTokens = debtorSummary[user].collateral;\r\n        for (uint256 i = 0; i < userCollateralTokens.length; i++) {\r\n            Collateral memory currentToken = userCollateralTokens[i];\r\n\r\n            uint256 tokenDebit = collaterabilityOfToken[currentToken.collateralAddress] * currentToken.amountCollateral;\r\n            collateral += tokenDebit;\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byWho\",\"type\":\"address\"}],\"name\":\"CollateralReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidInToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmountInDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidBy\",\"type\":\"address\"}],\"name\":\"InterestPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userWhoWasLiquidated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateralValueLiquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"takenBy\",\"type\":\"address\"}],\"name\":\"LoanTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousYearlyInterst\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newYearlyInterst\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousLoanDefaultThresholdPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanDefaultThresholdPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"LoanTermsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collaterability\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidationBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"NewTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"Repayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollaterability\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollaterability\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"TokenCollaterabilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"TokenLiquidationBeneficiaryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"accruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"}],\"name\":\"addCollateralAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidationBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collaterabilityInDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"addNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yearlyPercentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDefaultThresholdPercent\",\"type\":\"uint256\"}],\"name\":\"changeLoanTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterabilityOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreDAO\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreDAOTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeLastBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDAIBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingInterests\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_angel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAngel\",\"type\":\"bool\"}],\"name\":\"editAngels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollaterability\",\"type\":\"uint256\"}],\"name\":\"editTokenCollaterability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"editTokenLiquidationBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"godIsDead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreDAOTreasury\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_daoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_yearlyPercentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDefaultThresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreTokenCollaterability\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervenienteHomine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAngel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidateDelinquent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationBeneficiaryOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanDefaultThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantityOfDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCollateralAbility\",\"type\":\"uint256\"}],\"name\":\"quantityOfTokenForValueInDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimAllCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userCollaterals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"}],\"internalType\":\"struct Collateral[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearlyPercentInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CLending", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://de5ac97e1b558cb70882bdbb26cd4e1f43706cbf0b3f2fac9dceb08bc46755f2"}]}