{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.14;\r\n\r\ninterface RocketStorageInterface {\r\n  function getAddress(bytes32 _key) external view returns (address);\r\n}\r\n\r\ninterface RocketDepositPoolInterface {\r\n  function assignDeposits() external;\r\n}\r\n\r\ninterface RocketMinipoolQueueInterface {\r\n  function getTotalLength() external view returns (uint256);\r\n  function getLength(MinipoolDeposit _depositType) external view returns (uint256);\r\n}\r\n\r\ninterface RocketDAOProtocolSettingsDepositInterface {\r\n  function getMaximumDepositAssignments() external view returns (uint256);\r\n}\r\n\r\nenum MinipoolDeposit {\r\n  None,\r\n  Full,\r\n  Half,\r\n  Empty\r\n}\r\n\r\ncontract RocketDepositPoolQueue {\r\n  RocketStorageInterface rocketStorage;\r\n\r\n  constructor(RocketStorageInterface rocketStorageAddress) {\r\n    rocketStorage = RocketStorageInterface(rocketStorageAddress);\r\n  }\r\n\r\n  function getQueueLength() public view returns (uint256) {\r\n    RocketMinipoolQueueInterface queue = RocketMinipoolQueueInterface(getContractAddress(\"rocketMinipoolQueue\"));\r\n    return queue.getTotalLength();\r\n  }\r\n\r\n  function getHalfQueueLength() public view returns (uint256) {\r\n    RocketMinipoolQueueInterface queue = RocketMinipoolQueueInterface(getContractAddress(\"rocketMinipoolQueue\"));\r\n    return queue.getLength(MinipoolDeposit.Half);\r\n  }\r\n\r\n  function getAssignmentCount() public view returns (uint256) {\r\n    RocketDAOProtocolSettingsDepositInterface settings = RocketDAOProtocolSettingsDepositInterface(getContractAddress(\"rocketDAOProtocolSettingsDeposit\"));\r\n    return settings.getMaximumDepositAssignments();\r\n  }\r\n\r\n  function clearQueue() public {\r\n    clearQueueUpTo(getQueueLength());\r\n  }\r\n\r\n  function clearHalfQueue() public {\r\n    clearQueueUpTo(getHalfQueueLength());\r\n  }\r\n\r\n  function clearQueueUpTo(uint256 minipoolCount) public {\r\n    RocketDepositPoolInterface depositPool = RocketDepositPoolInterface(getContractAddress(\"rocketDepositPool\"));\r\n    uint256 step = getAssignmentCount();\r\n    for (uint256 i = 0; i < minipoolCount; i += step) {\r\n      depositPool.assignDeposits();\r\n    }\r\n  }\r\n\r\n  function getContractAddress(string memory contractName) private view returns (address) {\r\n    return rocketStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", contractName)));\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"rocketStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"clearHalfQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minipoolCount\",\"type\":\"uint256\"}],\"name\":\"clearQueueUpTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssignmentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHalfQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RocketDepositPoolQueue", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa46", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://29b5338b9192f609f7a6b536ecf37b15645552306643906d14112b0f377266c1"}]}