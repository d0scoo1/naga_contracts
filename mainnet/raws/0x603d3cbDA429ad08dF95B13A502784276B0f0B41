{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/sale/PublicSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IPublicSale.sol\\\";\\nimport \\\"../interfaces/IWTON.sol\\\";\\nimport \\\"../interfaces/ITON.sol\\\";\\nimport \\\"../common/ProxyAccessCommon.sol\\\";\\nimport \\\"./PublicSaleStorage.sol\\\";\\n\\ninterface IIERC20Burnable {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external ;\\n}\\n\\ncontract PublicSale is\\n    PublicSaleStorage,\\n    ProxyAccessCommon,\\n    ReentrancyGuard,\\n    IPublicSale\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event AddedWhiteList(address indexed from, uint256 tier);\\n    event ExclusiveSaled(address indexed from, uint256 amount);\\n    event Deposited(address indexed from, uint256 amount);\\n\\n    event Claimed(address indexed from, uint256 amount);\\n    event Withdrawal(address indexed from, uint256 amount);\\n    event DepositWithdrawal(address indexed from, uint256 amount, uint256 liquidityAmount);\\n\\n    modifier nonZero(uint256 _value) {\\n        require(_value > 0, \\\"PublicSale: zero\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address _addr) {\\n        require(_addr != address(0), \\\"PublicSale: zero address\\\");\\n        _;\\n    }\\n\\n    modifier beforeStartAddWhiteTime() {\\n        require(\\n            startAddWhiteTime == 0 ||\\n                (startAddWhiteTime > 0 && block.timestamp < startAddWhiteTime),\\n            \\\"PublicSale: not beforeStartAddWhiteTime\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier beforeEndAddWhiteTime() {\\n        require(\\n            endAddWhiteTime == 0 ||\\n                (endAddWhiteTime > 0 && block.timestamp < endAddWhiteTime),\\n            \\\"PublicSale: not beforeEndAddWhiteTime\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier greaterThan(uint256 _value1, uint256 _value2) {\\n        require(_value1 > _value2, \\\"PublicSale: non greaterThan\\\");\\n        _;\\n    }\\n\\n    modifier lessThan(uint256 _value1, uint256 _value2) {\\n        require(_value1 < _value2, \\\"PublicSale: non less than\\\");\\n        _;\\n    }\\n\\n    function changeTONOwner(\\n        address _address\\n    )\\n        external\\n        override\\n        onlyOwner\\n    {\\n        getTokenOwner = _address;\\n    }\\n\\n    function setAllsetting(\\n        uint256[8] calldata _Tier,\\n        uint256[6] calldata _amount,\\n        uint256[8] calldata _time,\\n        uint256[] calldata _claimTimes,\\n        uint256[] calldata _claimPercents\\n    )\\n        external\\n        override\\n        onlyOwner\\n        beforeStartAddWhiteTime\\n    {\\n        uint256 balance = saleToken.balanceOf(address(this));\\n        require((_amount[0] + _amount[1]) <= balance && 1 ether <= balance, \\\"amount err\\\");\\n        require(_time[6] < _claimTimes[0], \\\"time err\\\");\\n        require((deployTime + delayTime) < _time[0], \\\"snapshot need later\\\");\\n        require(_time[0] < _time[1], \\\"whitelist before snapshot\\\");\\n        require(_claimTimes.length > 0 &&  _claimTimes.length == _claimPercents.length, \\\"need the claimSet\\\");\\n        \\n        if(snapshot != 0) {\\n            require(isProxyAdmin(msg.sender), \\\"only DAO can set\\\");\\n        }\\n\\n        setTier(\\n            _Tier[0], _Tier[1], _Tier[2], _Tier[3]\\n        );\\n        setTierPercents(\\n            _Tier[4], _Tier[5], _Tier[6], _Tier[7]\\n        );\\n        setSaleAmount(\\n            _amount[0],\\n            _amount[1]\\n        );\\n        setTokenPrice(\\n            _amount[2],\\n            _amount[3]\\n        );\\n        setHardcap(\\n            _amount[4],\\n            _amount[5]\\n        );\\n        setSnapshot(_time[0]);\\n        setExclusiveTime(\\n            _time[1],\\n            _time[2],\\n            _time[3],\\n            _time[4]\\n        );\\n        setOpenTime(\\n            _time[5],\\n            _time[6]\\n        );\\n        setEachClaim(\\n            _time[7],\\n            _claimTimes,\\n            _claimPercents\\n        );\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setSnapshot(\\n        uint256 _snapshot\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_snapshot)\\n        beforeStartAddWhiteTime\\n    {\\n        snapshot = _snapshot;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setExclusiveTime(\\n        uint256 _startAddWhiteTime,\\n        uint256 _endAddWhiteTime,\\n        uint256 _startExclusiveTime,\\n        uint256 _endExclusiveTime\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_startAddWhiteTime)\\n        nonZero(_endAddWhiteTime)\\n        nonZero(_startExclusiveTime)\\n        nonZero(_endExclusiveTime)\\n        beforeStartAddWhiteTime\\n    {\\n        require(\\n            (_startAddWhiteTime < _endAddWhiteTime) &&\\n            (_endAddWhiteTime < _startExclusiveTime) &&\\n            (_startExclusiveTime < _endExclusiveTime),\\n            \\\"PublicSale : Round1time err\\\"\\n        );\\n        startAddWhiteTime = _startAddWhiteTime;\\n        endAddWhiteTime = _endAddWhiteTime;\\n        startExclusiveTime = _startExclusiveTime;\\n        endExclusiveTime = _endExclusiveTime;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setOpenTime(\\n        uint256 _startDepositTime,\\n        uint256 _endDepositTime\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_startDepositTime)\\n        nonZero(_endDepositTime)\\n        beforeStartAddWhiteTime\\n    {\\n        require(\\n            (_startDepositTime < _endDepositTime),\\n            \\\"PublicSale : Round2time err\\\"\\n        );\\n        startDepositTime = _startDepositTime;\\n        endDepositTime = _endDepositTime;\\n    }\\n\\n    function setEachClaim(\\n        uint256 _claimCounts,\\n        uint256[] calldata _claimTimes,\\n        uint256[] calldata _claimPercents\\n    )\\n        public\\n        override\\n        onlyOwner\\n        beforeStartAddWhiteTime\\n    {\\n        totalClaimCounts = _claimCounts;\\n        uint256 i = 0;\\n        uint256 y = 0;\\n        for (i = 0; i < _claimCounts; i++) {\\n            claimTimes.push(_claimTimes[i]);\\n            if (i != 0){\\n                require(claimTimes[i-1] < claimTimes[i], \\\"PublicSale: claimtime err\\\");\\n            }\\n            claimPercents.push(_claimPercents[i]);\\n            y = y + _claimPercents[i];\\n        }\\n\\n        require(y == 100, \\\"claimPercents err\\\");\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setAllTier(\\n        uint256[4] calldata _tier,\\n        uint256[4] calldata _tierPercent\\n    ) external override onlyOwner {\\n        require(\\n            stanTier1 <= _tier[0] &&\\n            stanTier2 <= _tier[1] &&\\n            stanTier3 <= _tier[2] &&\\n            stanTier4 <= _tier[3],\\n            \\\"tier set error\\\"\\n        );\\n        setTier(\\n            _tier[0],\\n            _tier[1],\\n            _tier[2],\\n            _tier[3]\\n        );\\n        setTierPercents(\\n            _tierPercent[0],\\n            _tierPercent[1],\\n            _tierPercent[2],\\n            _tierPercent[3]\\n        );\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setTier(\\n        uint256 _tier1,\\n        uint256 _tier2,\\n        uint256 _tier3,\\n        uint256 _tier4\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_tier1)\\n        nonZero(_tier2)\\n        nonZero(_tier3)\\n        nonZero(_tier4)\\n        beforeStartAddWhiteTime\\n    {\\n        tiers[1] = _tier1;\\n        tiers[2] = _tier2;\\n        tiers[3] = _tier3;\\n        tiers[4] = _tier4;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setTierPercents(\\n        uint256 _tier1,\\n        uint256 _tier2,\\n        uint256 _tier3,\\n        uint256 _tier4\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_tier1)\\n        nonZero(_tier2)\\n        nonZero(_tier3)\\n        nonZero(_tier4)\\n        beforeStartAddWhiteTime\\n    {\\n        require(\\n            _tier1.add(_tier2).add(_tier3).add(_tier4) == 10000,\\n            \\\"PublicSale: Sum should be 10000\\\"\\n        );\\n        tiersPercents[1] = _tier1;\\n        tiersPercents[2] = _tier2;\\n        tiersPercents[3] = _tier3;\\n        tiersPercents[4] = _tier4;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setAllAmount(\\n        uint256[2] calldata _expectAmount,\\n        uint256[2] calldata _priceAmount\\n    ) external override onlyOwner {\\n        setSaleAmount(\\n            _expectAmount[0],\\n            _expectAmount[1]\\n        );\\n        setTokenPrice(\\n            _priceAmount[0],\\n            _priceAmount[1]\\n        );\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setSaleAmount(\\n        uint256 _totalExpectSaleAmount,\\n        uint256 _totalExpectOpenSaleAmount\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_totalExpectSaleAmount)\\n        beforeStartAddWhiteTime\\n    {\\n        totalExpectSaleAmount = _totalExpectSaleAmount;\\n        totalExpectOpenSaleAmount = _totalExpectOpenSaleAmount;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function setTokenPrice(\\n        uint256 _saleTokenPrice,\\n        uint256 _payTokenPrice\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_saleTokenPrice)\\n        nonZero(_payTokenPrice)\\n        beforeStartAddWhiteTime\\n    {\\n        saleTokenPrice = _saleTokenPrice;\\n        payTokenPrice = _payTokenPrice;\\n    }\\n\\n    function setHardcap (\\n        uint256 _hardcapAmount,\\n        uint256 _changePercent\\n    )\\n        public\\n        override\\n        onlyOwner\\n        nonZero(_changePercent)\\n        beforeStartAddWhiteTime\\n    {\\n        require(_changePercent <= maxPer && _changePercent >= minPer,\\\"PublicSale: need to set min,max\\\");\\n        hardCap = _hardcapAmount;\\n        changeTOS = _changePercent;\\n    }\\n\\n    function distributionByRounds(\\n        uint256 startRound,\\n        uint256 endRound\\n    ) \\n        public\\n        view\\n        returns(uint256[] memory)\\n    {   \\n        if(startRound == 0) {\\n            startRound = 1;\\n        }\\n        if(totalClaimCounts < startRound) {\\n            startRound = totalClaimCounts;\\n        }\\n        if(endRound < startRound) {\\n            endRound = startRound;\\n        }\\n        if(totalClaimCounts < endRound || endRound == 0) {\\n            endRound = totalClaimCounts;\\n        }\\n\\n        uint length = endRound.sub(startRound.sub(1));\\n        uint256[] memory claims = new uint256[](length);\\n\\n        if(block.timestamp > endExclusiveTime && startRound != 0 ) {\\n            for(uint256 i = 0; i < length; i++) {\\n                uint256 amount = (((totalExSaleAmount.add(totalOpenSaleAmount())).mul(claimPercents[startRound.add(i).sub(1)])).div(100));\\n                claims[i] = amount;\\n            }\\n        } \\n        else {\\n            for(uint256 i = 0; i < length; i++) {\\n                uint256 amount = (((totalExpectSaleAmount.add(totalExpectOpenSaleAmount)).mul(claimPercents[startRound.add(i).sub(1)])).div(100));\\n                claims[i] = amount;\\n            }\\n        }\\n        return claims;\\n    }\\n\\n    function distributionByRound(\\n        uint256 _round\\n    )\\n        public\\n        view\\n        returns(uint256)\\n    {\\n        if(block.timestamp > endExclusiveTime && _round != 0) {\\n            return (((totalExSaleAmount.add(totalOpenSaleAmount())).mul(claimPercents[(_round-1)])).div(100));\\n\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function totalExpectOpenSaleAmountView()\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        if (block.timestamp < endExclusiveTime) return totalExpectOpenSaleAmount;\\n        else return totalExpectOpenSaleAmount.add(totalRound1NonSaleAmount());\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function totalRound1NonSaleAmount()\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return totalExpectSaleAmount.sub(totalExSaleAmount);\\n    }\\n\\n\\n    function _toRAY(uint256 v) internal pure returns (uint256) {\\n        return v * 10 ** 9;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function calculSaleToken(uint256 _amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 tokenSaleAmount =\\n            _amount.mul(payTokenPrice).div(saleTokenPrice);\\n        return tokenSaleAmount;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function calculPayToken(uint256 _amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 tokenPayAmount = _amount.mul(saleTokenPrice).div(payTokenPrice);\\n        return tokenPayAmount;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function calculTier(address _address)\\n        public\\n        view\\n        override\\n        nonZeroAddress(address(sTOS))\\n        nonZero(tiers[1])\\n        nonZero(tiers[2])\\n        nonZero(tiers[3])\\n        nonZero(tiers[4])\\n        returns (uint256)\\n    {\\n        uint256 sTOSBalance = sTOS.balanceOfAt(_address, snapshot);\\n        uint256 tier;\\n        if (sTOSBalance >= tiers[1] && sTOSBalance < tiers[2]) {\\n            tier = 1;\\n        } else if (sTOSBalance >= tiers[2] && sTOSBalance < tiers[3]) {\\n            tier = 2;\\n        } else if (sTOSBalance >= tiers[3] && sTOSBalance < tiers[4]) {\\n            tier = 3;\\n        } else if (sTOSBalance >= tiers[4]) {\\n            tier = 4;\\n        } else if (sTOSBalance < tiers[1]) {\\n            tier = 0;\\n        }\\n        return tier;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function calculTierAmount(address _address)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        LibPublicSale.UserInfoEx storage userEx = usersEx[_address];\\n        uint256 tier = calculTier(_address);\\n        if (userEx.join == true && tier > 0) {\\n            uint256 salePossible =\\n                totalExpectSaleAmount\\n                    .mul(tiersPercents[tier])\\n                    .div(tiersAccount[tier])\\n                    .div(10000);\\n            return salePossible;\\n        } else if (tier > 0) {\\n            uint256 tierAccount = tiersAccount[tier].add(1);\\n            uint256 salePossible =\\n                totalExpectSaleAmount\\n                    .mul(tiersPercents[tier])\\n                    .div(tierAccount)\\n                    .div(10000);\\n            return salePossible;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function calculOpenSaleAmount(address _account, uint256 _amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        LibPublicSale.UserInfoOpen storage userOpen = usersOpen[_account];\\n        uint256 depositAmount = userOpen.depositAmount.add(_amount);\\n        uint256 openSalePossible =\\n            totalExpectOpenSaleAmountView().mul(depositAmount).div(\\n                totalDepositAmount.add(_amount)\\n            );\\n        return openSalePossible;\\n    }\\n\\n    function currentRound() public view returns (uint256 round) {\\n        if (block.timestamp > claimTimes[totalClaimCounts-1]) {\\n            return totalClaimCounts;\\n        }\\n        for (uint256 i = 0; i < totalClaimCounts; i++) {\\n            if (block.timestamp < claimTimes[i]) {\\n                return i;\\n            }\\n        }\\n    }\\n\\n    function calculClaimAmount(address _account, uint256 _round)\\n        public\\n        view\\n        override\\n        returns (uint256 _reward, uint256 _totalClaim, uint256 _refundAmount)\\n    {\\n        if (block.timestamp < startClaimTime) return (0, 0, 0);\\n        if (_round > totalClaimCounts) return (0, 0, 0);\\n\\n        LibPublicSale.UserClaim storage userClaim = usersClaim[_account];\\n        (, uint256 realSaleAmount, uint256 refundAmount) = totalSaleUserAmount(_account);   //\uc720\uc800\uac00 \ucd1d \uad6c\ub9e4\ud55c token\uc758 \uc591\uc744 Return \ud568\\n\\n        if (realSaleAmount == 0 ) return (0, 0, 0);\\n        if (userClaim.claimAmount >= realSaleAmount) return (0, 0, 0);    //userClaim.claimAmount  = contract\uc5d0\uc11c \uc720\uc800\uc5d0\uac8c \uc900\uc591\\n\\n        if (_round != 0) {\\n            uint256 amount = realSaleAmount.mul(claimPercents[(_round.sub(1))]).div(100);\\n            return (amount, realSaleAmount, refundAmount);\\n        }\\n\\n        //\ud574\ub2f9 \ub77c\uc6b4\ub4dc\uc5d0\uc11c \ubc1b\uc544\uc57c\ud558\ub294 \ud1a0\ud070\uc758 \uc591 -> (realSaleAmount * claimPercents[i] / 100) : \ud574\ub2f9 \ub77c\uc6b4\ub4dc\uc5d0\uc11c \ubc1b\uc544\uc57c\ud558\ub294 \ud1a0\ud070\uc758 \uc591\\n        uint256 round = currentRound();\\n\\n        if (totalClaimCounts == round && _round == 0) {\\n            uint256 amount = realSaleAmount - userClaim.claimAmount;\\n            return (amount, realSaleAmount, refundAmount);\\n        }\\n\\n        uint256 expectedClaimAmount;\\n        for (uint256 i = 0; i < round; i++) {\\n            expectedClaimAmount = expectedClaimAmount.add((realSaleAmount.mul(claimPercents[i]).div(100)));\\n        }\\n\\n        //Round\ub97c 0\uc73c\ub85c \ub123\uc73c\uba74 \ud604\uc7ac \ub0b4\uac00 \ubc1b\uc744 \uc218 \uc788\ub294 \uc591\uc744 \ub9ac\ud134\ud574\uc8fc\uace0 1 \uc774\uc0c1\uc744 \ub123\uc73c\uba74 \ud574\ub2f9 \ub77c\uc6b4\ub4dc\uc5d0\uc11c \ubc1b\uc744 \uc218 \uc788\ub294 \ud1a0\ud070\uc758 \uc591\uc744 \ub9ac\ud134\ud574\uc90c\\n        if (_round == 0) {\\n            uint256 amount = expectedClaimAmount - userClaim.claimAmount;\\n            return (amount, realSaleAmount, refundAmount);\\n        }\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function totalSaleUserAmount(address user) public override view returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount) {\\n        LibPublicSale.UserInfoEx storage userEx = usersEx[user];\\n\\n        if (userEx.join) {\\n            (uint256 realPayAmount, uint256 realSaleAmount, uint256 refundAmount) = openSaleUserAmount(user);\\n            return ( realPayAmount.add(userEx.payAmount), realSaleAmount.add(userEx.saleAmount), refundAmount);\\n        } else {\\n            return openSaleUserAmount(user);\\n        }\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function openSaleUserAmount(address user) public override view returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount) {\\n        LibPublicSale.UserInfoOpen storage userOpen = usersOpen[user];\\n\\n        if (!userOpen.join || userOpen.depositAmount == 0) return (0, 0, 0);\\n\\n        uint256 openSalePossible = calculOpenSaleAmount(user, 0);\\n        uint256 realPayAmount = calculPayToken(openSalePossible);\\n        uint256 depositAmount = userOpen.depositAmount;\\n        uint256 realSaleAmount = 0;\\n        uint256 returnAmount = 0;\\n\\n        if (realPayAmount < depositAmount) {\\n            returnAmount = depositAmount.sub(realPayAmount);\\n            realSaleAmount = calculSaleToken(realPayAmount);\\n        } else {\\n            realPayAmount = userOpen.depositAmount;\\n            realSaleAmount = calculSaleToken(depositAmount);\\n        }\\n\\n        return (realPayAmount, realSaleAmount, returnAmount);\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function totalOpenSaleAmount() public override view returns (uint256){\\n        uint256 _calculSaleToken = calculSaleToken(totalDepositAmount);\\n        uint256 _totalAmount = totalExpectOpenSaleAmountView();\\n\\n        if (_calculSaleToken < _totalAmount) return _calculSaleToken;\\n        else return _totalAmount;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function totalOpenPurchasedAmount() public override view returns (uint256){\\n        uint256 _calculSaleToken = calculSaleToken(totalDepositAmount);\\n        uint256 _totalAmount = totalExpectOpenSaleAmountView();\\n        if (_calculSaleToken < _totalAmount) return totalDepositAmount;\\n        else return  calculPayToken(_totalAmount);\\n    }\\n\\n    function totalWhitelists() external view returns (uint256) {\\n        return whitelists.length;\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function addWhiteList() external override nonReentrant {\\n        require(\\n            block.timestamp >= startAddWhiteTime,\\n            \\\"PublicSale: whitelistStartTime has not passed\\\"\\n        );\\n        require(\\n            block.timestamp < endAddWhiteTime,\\n            \\\"PublicSale: end the whitelistTime\\\"\\n        );\\n        uint256 tier = calculTier(msg.sender);\\n        require(tier >= 1, \\\"PublicSale: need to more sTOS\\\");\\n        LibPublicSale.UserInfoEx storage userEx = usersEx[msg.sender];\\n        require(userEx.join != true, \\\"PublicSale: already attended\\\");\\n\\n        whitelists.push(msg.sender);\\n\\n        userEx.join = true;\\n        userEx.tier = tier;\\n        userEx.saleAmount = 0;\\n        tiersAccount[tier] = tiersAccount[tier].add(1);\\n\\n        emit AddedWhiteList(msg.sender, tier);\\n    }\\n\\n    function _toWAD(uint256 v) public override pure returns (uint256) {\\n        return v / 10 ** 9;\\n    }\\n\\n    function _decodeApproveData(\\n        bytes memory data\\n    ) public override pure returns (uint256 approveData) {\\n        assembly {\\n            approveData := mload(add(data, 0x20))\\n        }\\n    }\\n\\n    function calculTONTransferAmount(\\n        uint256 _amount,\\n        address _sender\\n    )\\n        internal\\n        nonZero(_amount)\\n        nonZeroAddress(_sender)\\n\\n    {\\n        uint256 tonAllowance = IERC20(getToken).allowance(_sender, address(this));\\n        uint256 tonBalance = IERC20(getToken).balanceOf(_sender);\\n\\n        if (tonAllowance > tonBalance) {\\n            tonAllowance = tonBalance; //tonAllowance\uac00 tonBlance\ubcf4\ub2e4 \ub354 \ud074\ub54c \ubb38\uc81c\uac00 \ub41c\ub2e4.\\n        }\\n        if (tonAllowance < _amount) {\\n            uint256 needUserWton;\\n            uint256 needWton = _amount.sub(tonAllowance);\\n            needUserWton = _toRAY(needWton);\\n            require(IWTON(wton).allowance(_sender, address(this)) >= needUserWton, \\\"PublicSale: wton exceeds allowance\\\");\\n            require(IWTON(wton).balanceOf(_sender) >= needUserWton, \\\"need more wton\\\");\\n            IERC20(wton).safeTransferFrom(_sender,address(this),needUserWton);\\n            IWTON(wton).swapToTON(needUserWton);\\n            require(tonAllowance >= _amount.sub(needWton), \\\"PublicSale: ton exceeds allowance\\\");\\n            if (_amount.sub(needWton) > 0) {\\n                IERC20(getToken).safeTransferFrom(_sender, address(this), _amount.sub(needWton));\\n            }\\n        } else {\\n            require(tonAllowance >= _amount && tonBalance >= _amount, \\\"PublicSale: ton exceeds allowance\\\");\\n            IERC20(getToken).safeTransferFrom(_sender, address(this), _amount);\\n        }\\n\\n        if (block.timestamp < endExclusiveTime) {\\n            emit ExclusiveSaled(_sender, _amount);\\n        } else {\\n            emit Deposited(_sender, _amount);\\n        }\\n    }\\n\\n\\n    /// @inheritdoc IPublicSale\\n    function exclusiveSale(\\n        address _sender,\\n        uint256 _amount\\n    )\\n        public\\n        override\\n        nonZero(_amount)\\n        nonZero(totalClaimCounts)\\n        nonReentrant\\n    {\\n        require(\\n            block.timestamp >= startExclusiveTime,\\n            \\\"PublicSale: exclusiveStartTime has not passed\\\"\\n        );\\n        require(\\n            block.timestamp < endExclusiveTime,\\n            \\\"PublicSale: end the exclusiveTime\\\"\\n        );\\n        LibPublicSale.UserInfoEx storage userEx = usersEx[_sender];\\n        require(userEx.join == true, \\\"PublicSale: not registered in whitelist\\\");\\n        uint256 tokenSaleAmount = calculSaleToken(_amount);\\n        uint256 salePossible = calculTierAmount(_sender);\\n\\n        require(\\n            salePossible >= userEx.saleAmount.add(tokenSaleAmount),\\n            \\\"PublicSale: just buy tier's allocated amount\\\"\\n        );\\n\\n        uint256 tier = calculTier(_sender);\\n\\n        if(userEx.payAmount == 0) {\\n            totalRound1Users = totalRound1Users.add(1);\\n            totalUsers = totalUsers.add(1);\\n            tiersExAccount[tier] = tiersExAccount[tier].add(1);\\n        }\\n\\n        userEx.payAmount = userEx.payAmount.add(_amount);\\n        userEx.saleAmount = userEx.saleAmount.add(tokenSaleAmount);\\n\\n        totalExPurchasedAmount = totalExPurchasedAmount.add(_amount);\\n        totalExSaleAmount = totalExSaleAmount.add(tokenSaleAmount);\\n\\n        calculTONTransferAmount(_amount, _sender);\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function deposit(\\n        address _sender,\\n        uint256 _amount\\n    )\\n        public\\n        override\\n        nonReentrant\\n    {\\n        require(\\n            block.timestamp >= startDepositTime,\\n            \\\"PublicSale: don't start depositTime\\\"\\n        );\\n        require(\\n            block.timestamp < endDepositTime,\\n            \\\"PublicSale: end the depositTime\\\"\\n        );\\n\\n        LibPublicSale.UserInfoOpen storage userOpen = usersOpen[_sender];\\n\\n        if (!userOpen.join) {\\n            depositors.push(_sender);\\n            userOpen.join = true;\\n\\n            totalRound2Users = totalRound2Users.add(1);\\n            LibPublicSale.UserInfoEx storage userEx = usersEx[_sender];\\n            if (userEx.payAmount == 0) totalUsers = totalUsers.add(1);\\n        }\\n        userOpen.depositAmount = userOpen.depositAmount.add(_amount);\\n        totalDepositAmount = totalDepositAmount.add(_amount);\\n\\n        calculTONTransferAmount(_amount, _sender);\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function claim() external override {\\n        require(\\n            block.timestamp >= claimTimes[0],\\n            \\\"PublicSale: don't start claimTime\\\"\\n        );\\n        LibPublicSale.UserInfoOpen storage userOpen = usersOpen[msg.sender];\\n        LibPublicSale.UserClaim storage userClaim = usersClaim[msg.sender];\\n        uint256 hardcapcut = hardcapCalcul();\\n        if (hardcapcut == 0) {\\n            require(userClaim.exec != true, \\\"PublicSale: already getRefund\\\");\\n            LibPublicSale.UserInfoEx storage userEx = usersEx[msg.sender];\\n            uint256 refundTON = userEx.payAmount.add(userOpen.depositAmount);\\n            userClaim.exec = true;\\n            IERC20(getToken).safeTransfer(msg.sender, refundTON);\\n        } else {\\n            (uint256 reward, uint256 realSaleAmount, uint256 refundAmount) = calculClaimAmount(msg.sender, 0);\\n            require(\\n                realSaleAmount > 0,\\n                \\\"PublicSale: no purchase amount\\\"\\n            );\\n            require(reward > 0, \\\"PublicSale: no reward\\\");\\n            require(\\n                realSaleAmount.sub(userClaim.claimAmount) >= reward,\\n                \\\"PublicSale: already getAllreward\\\"\\n            );\\n            require(\\n                saleToken.balanceOf(address(this)) >= reward,\\n                \\\"PublicSale: dont have saleToken in pool\\\"\\n            );\\n\\n            userClaim.claimAmount = userClaim.claimAmount.add(reward);\\n\\n            saleToken.safeTransfer(msg.sender, reward);\\n\\n            if (!userClaim.exec && userOpen.join) {\\n                totalRound2UsersClaim = totalRound2UsersClaim.add(1);\\n                userClaim.exec = true;\\n            }\\n\\n            if (refundAmount > 0 && userClaim.refundAmount == 0){\\n                require(refundAmount <= IERC20(getToken).balanceOf(address(this)), \\\"PublicSale: dont have refund ton\\\");\\n                userClaim.refundAmount = refundAmount;\\n                IERC20(getToken).safeTransfer(msg.sender, refundAmount);\\n            }\\n\\n            emit Claimed(msg.sender, reward);\\n        }\\n    }\\n\\n    function hardcapCalcul() public view returns (uint256){\\n        uint256 totalPurchaseTONamount = totalExPurchasedAmount.add(totalOpenPurchasedAmount());\\n        uint256 calculAmount;\\n        if (totalPurchaseTONamount >= hardCap) {\\n            return calculAmount = totalPurchaseTONamount.mul(changeTOS).div(100);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @inheritdoc IPublicSale\\n    function depositWithdraw() external override {\\n        require(block.timestamp > endDepositTime,\\\"PublicSale: need to end the depositTime\\\");\\n        uint256 liquidityTON = hardcapCalcul();\\n        uint256 getAmount;\\n        require(liquidityTON > 0, \\\"PublicSale: don't pass the hardCap\\\");\\n        require(adminWithdraw != true, \\\"PublicSale: already get the TON\\\");\\n        if (totalRound2Users == totalRound2UsersClaim){\\n            getAmount = IERC20(getToken).balanceOf(address(this)).sub(liquidityTON);\\n        } else {\\n            getAmount = totalExPurchasedAmount.add(totalOpenPurchasedAmount()).sub(liquidityTON).sub(2 ether);\\n        }\\n        require(getAmount <= IERC20(getToken).balanceOf(address(this)), \\\"PublicSale: no token to receive\\\");\\n\\n        IWTON(wton).swapFromTON(liquidityTON);\\n        uint256 wtonAmount = IERC20(wton).balanceOf(address(this));\\n\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: wton,\\n                tokenOut: address(tos),\\n                fee: poolFee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: wtonAmount,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            });\\n        ISwapRouter(uniswapRouter).exactInputSingle(params);\\n\\n        uint256 burnAmount = totalExpectSaleAmount.add(totalExpectOpenSaleAmount).sub(totalOpenSaleAmount()).sub(totalExSaleAmount);\\n\\n        uint256 tosAmount = tos.balanceOf(address(this));\\n\\n        adminWithdraw = true;\\n        tos.safeTransfer(liquidityVaultAddress, tosAmount);\\n        IERC20(getToken).safeTransfer(getTokenOwner, getAmount);\\n        IIERC20Burnable(address(saleToken)).burn(burnAmount);\\n        emit DepositWithdrawal(msg.sender, getAmount, liquidityTON);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPublicSale.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IPublicSale {\\n    /// @dev set changeTONOwner\\n    function changeTONOwner(\\n        address _address\\n    ) external; \\n\\n    /// @dev set the allsetting\\n    /// @param _Tier _Tier[0~3] : set the sTOS Tier standard, _Tier[4~7] : set the Tier percents\\n    /// @param _amount _amount[0] : Round1 Sale Amount, _amount[1] : Round2 Sale Amount, _amount[2] : saleToken Price, _amount[3] : TON Price, _amount[4] : hardcap amount, _amount[5] : ton to tos %\\n    /// @param _time _time[0] : sTOS snapshot time, _time[1] : whitelist startTime, _time[2] : whitelist endTime, _time[3] : round1 sale startTime, _time[4] : round1 sale endTime, _time[5] : round2 deposit startTime, _time[6] : round2 deposit endTime, _time[7] : totalClaimCounts\\n    /// @param _claimTimes _claimTimes[] : claim time array\\n    /// @param _claimPercents _claimPercents[] : claim percents array (this is need sum 100)\\n    function setAllsetting(\\n        uint256[8] calldata _Tier,\\n        uint256[6] calldata _amount,\\n        uint256[8] calldata _time,\\n        uint256[] calldata _claimTimes,\\n        uint256[] calldata _claimPercents\\n    ) external;\\n    \\n    /// @dev set snapshot\\n    /// @param _snapshot _snapshot timestamp\\n    function setSnapshot(uint256 _snapshot) external;\\n\\n    /// @dev set information related to exclusive sale\\n    /// @param _startAddWhiteTime start time of addwhitelist\\n    /// @param _endAddWhiteTime end time of addwhitelist\\n    /// @param _startExclusiveTime start time of exclusive sale\\n    /// @param _endExclusiveTime start time of exclusive sale\\n    function setExclusiveTime(\\n        uint256 _startAddWhiteTime,\\n        uint256 _endAddWhiteTime,\\n        uint256 _startExclusiveTime,\\n        uint256 _endExclusiveTime\\n    ) external;\\n\\n    /// @dev set information related to open sale\\n    /// @param _startDepositTime start time of deposit\\n    /// @param _endDepositTime end time of deposit\\n    function setOpenTime(\\n        uint256 _startDepositTime,\\n        uint256 _endDepositTime\\n    ) external;\\n\\n    /// @dev set information related to open sale\\n    /// @param _claimCounts totalClaimCounts from this contract\\n    /// @param _claimTimes claim time array\\n    /// @param _claimPercents claim percents array (this is need sum 100)\\n    function setEachClaim(\\n        uint256 _claimCounts,\\n        uint256[] calldata _claimTimes,\\n        uint256[] calldata _claimPercents\\n    ) external;\\n\\n    /// @dev set information related to tier and tierPercents\\n    /// @param _tier[4] sTOS condition setting\\n    /// @param _tierPercent[4] tier proportion setting\\n    function setAllTier(\\n        uint256[4] calldata _tier,\\n        uint256[4] calldata _tierPercent\\n    ) external;\\n\\n    /// @dev set information related to tier\\n    /// @param _tier1 tier1 condition of STOS hodings\\n    /// @param _tier2 tier2 condition of STOS hodings\\n    /// @param _tier3 tier3 condition of STOS hodings\\n    /// @param _tier4 tier4 condition of STOS hodings\\n    function setTier(\\n        uint256 _tier1,\\n        uint256 _tier2,\\n        uint256 _tier3,\\n        uint256 _tier4\\n    ) external;\\n\\n    /// @dev set information related to tier proportion for exclusive sale\\n    /// @param _tier1 tier1 proportion (If it is 6%, enter as 600 -> To record up to the 2nd decimal point)\\n    /// @param _tier2 tier2 proportion\\n    /// @param _tier3 tier3 proportion\\n    /// @param _tier4 tier4 proportion\\n    function setTierPercents(\\n        uint256 _tier1,\\n        uint256 _tier2,\\n        uint256 _tier3,\\n        uint256 _tier4\\n    ) external;\\n\\n    /// @dev set information related to saleAmount and tokenPrice\\n    /// @param _expectAmount[2] saleAmount setting\\n    /// @param _priceAmount[2] tokenPrice setting\\n    function setAllAmount(\\n        uint256[2] calldata _expectAmount,\\n        uint256[2] calldata _priceAmount\\n    ) external;\\n\\n    /// @dev set information related to sale amount\\n    /// @param _totalExpectSaleAmount expected amount of exclusive sale\\n    /// @param _totalExpectOpenSaleAmount expected amount of open sale\\n    function setSaleAmount(\\n        uint256 _totalExpectSaleAmount,\\n        uint256 _totalExpectOpenSaleAmount\\n    ) external;\\n\\n    /// @dev set information related to token price\\n    /// @param _saleTokenPrice the sale token price\\n    /// @param _payTokenPrice  the funding(pay) token price\\n    function setTokenPrice(uint256 _saleTokenPrice, uint256 _payTokenPrice)\\n        external;\\n\\n    /// @dev set information related to token price\\n    /// @param _hardcapAmount the sale token price\\n    /// @param _changePercent  the funding(pay) token price\\n    function setHardcap (\\n        uint256 _hardcapAmount,\\n        uint256 _changePercent\\n    ) external;\\n\\n    /// @dev view totalExpectOpenSaleAmount\\n    function totalExpectOpenSaleAmountView()\\n        external\\n        view\\n        returns(uint256);\\n\\n    /// @dev view totalRound1NonSaleAmount\\n    function totalRound1NonSaleAmount() \\n        external \\n        view \\n        returns(uint256);\\n\\n    /// @dev calculate the sale Token amount\\n    /// @param _amount th amount\\n    function calculSaleToken(uint256 _amount) external view returns (uint256);\\n\\n    /// @dev calculate the pay Token amount\\n    /// @param _amount th amount\\n    function calculPayToken(uint256 _amount) external view returns (uint256);\\n\\n    /// @dev calculate the tier\\n    /// @param _address user address\\n    function calculTier(address _address) external view returns (uint256);\\n\\n    /// @dev calculate the tier's amount\\n    /// @param _address user address\\n    function calculTierAmount(address _address) external view returns (uint256);\\n\\n    /// @dev calculate the open sale amount\\n    /// @param _account user address\\n    /// @param _amount  amount\\n    function calculOpenSaleAmount(address _account, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev calculate the open sale amount\\n    /// @param _account user address\\n    function calculClaimAmount(address _account, uint256 _period)\\n        external\\n        view\\n        returns (uint256 _reward, uint256 _totalClaim, uint256 _refundAmount);\\n\\n\\n    /// @dev view totalSaleUserAmount\\n    function totalSaleUserAmount(address user) \\n        external \\n        view \\n        returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount);\\n\\n    /// @dev view openSaleUserAmount\\n    function openSaleUserAmount(address user) \\n        external \\n        view \\n        returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount);\\n    \\n    /// @dev view totalOpenSaleAmount\\n    function totalOpenSaleAmount() \\n        external \\n        view \\n        returns (uint256);\\n\\n    /// @dev view totalOpenPurchasedAmount\\n    function totalOpenPurchasedAmount() \\n        external\\n        view \\n        returns (uint256);\\n\\n    /// @dev execute add whitelist\\n    function addWhiteList() external;\\n\\n    /// @dev execute exclusive sale\\n    /// @param _sender user address\\n    /// @param _amount  amount\\n    function exclusiveSale(address _sender,uint256 _amount) external;\\n\\n    /// @dev execute deposit\\n    /// @param _sender user address\\n    /// @param _amount  amount\\n    function deposit(address _sender,uint256 _amount) external;\\n\\n    /// @dev execute the claim\\n    function claim() external;\\n\\n    /// @dev execute the claim\\n    function depositWithdraw() external;\\n\\n    function _decodeApproveData(\\n        bytes memory data\\n    ) external pure returns (uint256 approveData);\\n\\n    function _toWAD(uint256 v) external pure returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWTON.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IWTON {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n\\n    function swapFromTON(uint256 tonAmount) external returns (bool);\\n\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount)\\n        external\\n        returns (bool);\\n\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount)\\n        external\\n        returns (bool);\\n\\n    function renounceTonMinter() external;\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address sender, address recipient) external returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITON.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ITON {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory data\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n\\n    function swapFromTON(uint256 tonAmount) external returns (bool);\\n\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount)\\n        external\\n        returns (bool);\\n\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount)\\n        external\\n        returns (bool);\\n\\n    function renounceTonMinter() external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/ProxyAccessCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract ProxyAccessCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender) || isProxyAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyProxyOwner() {\\n        require(isProxyAdmin(msg.sender), \\\"Accessible: Caller is not an proxy admin\\\");\\n        _;\\n    }\\n\\n    function addProxyAdmin(address _owner)\\n        external\\n        onlyProxyOwner\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n    }\\n\\n    function removeProxyAdmin()\\n        public virtual onlyProxyOwner\\n    {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferProxyAdmin(address newAdmin)\\n        external virtual\\n        onlyProxyOwner\\n    {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyProxyOwner {\\n        grantRole(PROJECT_ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    function removeAdmin() public virtual onlyOwner {\\n        renounceRole(PROJECT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(PROJECT_ADMIN_ROLE, newAdmin);\\n        renounceRole(PROJECT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(PROJECT_ADMIN_ROLE, account);\\n    }\\n\\n    function isProxyAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sale/PublicSaleStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ILockTOS.sol\\\";\\nimport \\\"../libraries/LibPublicSale.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n\\ncontract PublicSaleStorage  {\\n    /// @dev flag for pause proxy\\n    bool public pauseProxy;\\n\\n    uint256 public snapshot = 0;\\n    uint256 public deployTime;              //contract \ubc30\ud3ec\ub41c \uc2dc\uac04\\n    uint256 public delayTime;               //contract\uc640 snapshot\uc0ac\uc774 \uc2dc\uac04\\n\\n    uint256 public startAddWhiteTime = 0;\\n    uint256 public endAddWhiteTime = 0;\\n    uint256 public startExclusiveTime = 0;\\n    uint256 public endExclusiveTime = 0;\\n\\n    uint256 public startDepositTime = 0;        //\uccad\uc57d \uc2dc\uc791\uc2dc\uac04\\n    uint256 public endDepositTime = 0;          //\uccad\uc57d \ub05d\uc2dc\uac04\\n\\n    uint256 public startClaimTime = 0;\\n\\n    uint256 public totalUsers = 0;              //\uc804\uccb4 \uc138\uc77c \ucc38\uc5ec\uc790 (\ub77c\uc6b4\ub4dc1,\ub77c\uc6b4\ub4dc2 \ud3ec\ud568, \uc720\ub2c8\ud06c)\\n    uint256 public totalRound1Users = 0;         //\ub77c\uc6b4\ub4dc 1 \ucc38\uc5ec\uc790\\n    uint256 public totalRound2Users = 0;         //\ub77c\uc6b4\ub4dc 2 \ucc38\uc5ec\uc790\\n    uint256 public totalRound2UsersClaim = 0;    //\ub77c\uc6b4\ub4dc 2 \ucc38\uc5ec\uc790\uc911 claim\ud55c\uc0ac\ub78c\\n\\n    uint256 public totalExSaleAmount = 0;       //\ucd1d exclu \uc2e4\uc81c \ud310\ub9e4\ud1a0\ud070 \uc591 (exclusive)\\n    uint256 public totalExPurchasedAmount = 0;  //\ucd1d \uc9c0\ubd88\ud1a0\ud070 \ubc1b\uc740 \uc591 (exclusive)\\n\\n    uint256 public totalDepositAmount;          //\ucd1d \uccad\uc57d \ud55c \uc591 (openSale)\\n\\n    uint256 public totalExpectSaleAmount;       //\uc608\uc815\ub41c \ud310\ub9e4\ud1a0\ud070 \uc591 (exclusive)\\n    uint256 public totalExpectOpenSaleAmount;   //\uc608\uc815\ub41c \ud310\ub9e4 \ud1a0\ud070\ub7c9 (opensale)\\n\\n    uint256 public saleTokenPrice;  //\ud310\ub9e4\ud558\ub294 \ud1a0\ud070(DOC)\\n    uint256 public payTokenPrice;   //\ubc1b\ub294 \ud1a0\ud070(TON)\\n\\n    uint256 public claimInterval; //\ud074\ub808\uc784 \uac04\uaca9 (epochtime)\\n    uint256 public claimPeriod;   //\ud074\ub808\uc784 \ud69f\uc218\\n    uint256 public claimFirst;    //\ucd08\uae30 \ud074\ub808\uc784 percents\\n\\n    uint256 public hardCap;       //hardcap \uc218\ub7c9 (ton \uae30\uc900)\\n    uint256 public changeTOS;     //ton -> tos\ub85c \ubcc0\uacbd\ud558\ub294 %\\n    uint256 public minPer;        //\ubcc0\uacbd\ud558\ub294 % min\\n    uint256 public maxPer;        //\ubcc0\uacbd\ud558\ub294 % max\\n\\n    uint256 public stanTier1;     //\ucd5c\uc18c \uae30\uc900 Tier1\\n    uint256 public stanTier2;     //\ucd5c\uc18c \uae30\uc900 Tier2\\n    uint256 public stanTier3;     //\ucd5c\uc18c \uae30\uc900 Tier3\\n    uint256 public stanTier4;     //\ucd5c\uc18c \uae30\uc900 Tier4\\n\\n    address public liquidityVaultAddress; //liquidityVault\uc758 Address\\n    ISwapRouter public uniswapRouter;\\n    uint24 public constant poolFee = 3000;\\n\\n    address public getTokenOwner;\\n    address public wton;\\n    address public getToken;\\n\\n    IERC20 public saleToken;\\n    IERC20 public tos;\\n    ILockTOS public sTOS;\\n\\n    address[] public depositors;\\n    address[] public whitelists;\\n\\n    bool public adminWithdraw; //withdraw \uc2e4\ud589\uc5ec\ubd80\\n\\n    uint256 public totalClaimCounts;\\n    uint256[] public claimTimes;\\n    uint256[] public claimPercents; \\n\\n    mapping (address => LibPublicSale.UserInfoEx) public usersEx;\\n    mapping (address => LibPublicSale.UserInfoOpen) public usersOpen;\\n    mapping (address => LibPublicSale.UserClaim) public usersClaim;\\n\\n    mapping (uint => uint256) public tiers;         //\ud2f0\uc5b4\ubcc4 \uac00\uaca9 \uc124\uc815\\n    mapping (uint => uint256) public tiersAccount;  //\ud2f0\uc5b4\ubcc4 \ud654\uc774\ud2b8\ub9ac\uc2a4\ud2b8 \ucc38\uc5ec\uc790 \uc22b\uc790 \uae30\ub85d\\n    mapping (uint => uint256) public tiersExAccount;  //\ud2f0\uc5b4\ubcc4 exclusiveSale \ucc38\uc5ec\uc790 \uc22b\uc790 \uae30\ub85d\\n    mapping (uint => uint256) public tiersPercents;  //\ud2f0\uc5b4\ubcc4 \ud37c\uc13c\ud2b8 \uae30\ub85d\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessRoleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER\\\");\\n    bytes32 public constant PROJECT_ADMIN_ROLE = keccak256(\\\"PROJECT_ADMIN_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockTOS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/LibLockTOS.sol\\\";\\n\\n\\ninterface ILockTOS {\\n    \\n    /// @dev Returns addresses of all holders of LockTOS\\n    function allHolders() external returns (address[] memory);\\n\\n    /// @dev Returns addresses of active holders of LockTOS\\n    function activeHolders() external returns (address[] memory);\\n\\n    /// @dev Returns all withdrawable locks\\n    function withdrawableLocksOf(address user) external view returns (uint256[] memory);\\n\\n    /// @dev Returns all locks of `_addr`\\n    function locksOf(address _addr) external view returns (uint256[] memory);\\n\\n    /// @dev Returns all locks of `_addr`\\n    function activeLocksOf(address _addr) external view returns (uint256[] memory);\\n\\n    /// @dev Total locked amount of `_addr`\\n    function totalLockedAmountOf(address _addr) external view returns (uint256);\\n\\n    /// @dev     jhswuqhdiuwjhdoiehdoijijf   bhabcgfzvg tqafstqfzys amount of `_addr`\\n    function withdrawableAmountOf(address _addr) external view returns (uint256);\\n\\n    /// @dev Returns all locks of `_addr`\\n    function locksInfo(uint256 _lockId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @dev Returns all history of `_addr`\\n    function pointHistoryOf(uint256 _lockId)\\n        external\\n        view\\n        returns (LibLockTOS.Point[] memory);\\n\\n    /// @dev Total vote weight\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Total vote weight at `_timestamp`\\n    function totalSupplyAt(uint256 _timestamp) external view returns (uint256);\\n\\n    /// @dev Vote weight of lock at `_timestamp`\\n    function balanceOfLockAt(uint256 _lockId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Vote weight of lock\\n    function balanceOfLock(uint256 _lockId) external view returns (uint256);\\n\\n    /// @dev Vote weight of a user at `_timestamp`\\n    function balanceOfAt(address _addr, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /// @dev Vote weight of a iser\\n    function balanceOf(address _addr) external view returns (uint256 balance);\\n\\n    /// @dev Increase amount\\n    function increaseAmount(uint256 _lockId, uint256 _value) external;\\n\\n    /// @dev Deposits value for '_addr'\\n    function depositFor(\\n        address _addr,\\n        uint256 _lockId,\\n        uint256 _value\\n    ) external;\\n\\n    /// @dev Create lock using permit\\n    function createLockWithPermit(\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 lockId);\\n\\n    /// @dev Create lock\\n    function createLock(uint256 _value, uint256 _unlockTime)\\n        external\\n        returns (uint256 lockId);\\n\\n    /// @dev Increase\\n    function increaseUnlockTime(uint256 _lockId, uint256 unlockTime) external;\\n\\n    /// @dev Withdraw all TOS\\n    function withdrawAll() external;\\n\\n    /// @dev Withdraw TOS\\n    function withdraw(uint256 _lockId) external;\\n    \\n    /// @dev needCheckpoint\\n    function needCheckpoint() external view returns (bool need);\\n\\n    /// @dev Global checkpoint\\n    function globalCheckpoint() external;\\n\\n    /// @dev set MaxTime\\n    function setMaxTime(uint256 _maxTime) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibPublicSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nlibrary LibPublicSale {\\n    struct UserInfoEx {\\n        bool join;\\n        uint tier;\\n        uint256 payAmount;\\n        uint256 saleAmount;\\n    }\\n\\n    struct UserInfoOpen {\\n        bool join;\\n        uint256 depositAmount;\\n        uint256 payAmount;\\n    }\\n\\n    struct UserClaim {\\n        bool exec;\\n        uint256 claimAmount;\\n        uint256 refundAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibLockTOS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nlibrary LibLockTOS {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 timestamp;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        bool withdrawn;\\n    }\\n\\n    struct SlopeChange {\\n        int256 bias;\\n        int256 slope;\\n        uint256 changeTime;\\n    }\\n\\n    struct LockedBalanceInfo {\\n        uint256 id;\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        uint256 balance;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExclusiveSaled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_decodeApproveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"approveData\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"_toWAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"calculClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculOpenSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculPayToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculSaleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculTierAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeTONOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeTOS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"distributionByRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRound\",\"type\":\"uint256\"}],\"name\":\"distributionByRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAddWhiteTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endExclusiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exclusiveSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcapCalcul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isProxyAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"openSaleUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_realPayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_realSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sTOS\",\"outputs\":[{\"internalType\":\"contract ILockTOS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_expectAmount\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_priceAmount\",\"type\":\"uint256[2]\"}],\"name\":\"setAllAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_tier\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_tierPercent\",\"type\":\"uint256[4]\"}],\"name\":\"setAllTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"_Tier\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[6]\",\"name\":\"_amount\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[8]\",\"name\":\"_time\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimPercents\",\"type\":\"uint256[]\"}],\"name\":\"setAllsetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimPercents\",\"type\":\"uint256[]\"}],\"name\":\"setEachClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startAddWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAddWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startExclusiveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endExclusiveTime\",\"type\":\"uint256\"}],\"name\":\"setExclusiveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changePercent\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDepositTime\",\"type\":\"uint256\"}],\"name\":\"setOpenTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalExpectSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalExpectOpenSaleAmount\",\"type\":\"uint256\"}],\"name\":\"setSaleAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_snapshot\",\"type\":\"uint256\"}],\"name\":\"setSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier4\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier4\",\"type\":\"uint256\"}],\"name\":\"setTierPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payTokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddWhiteTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startExclusiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiersAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiersExAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiersPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tos\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExpectOpenSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExpectOpenSaleAmountView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExpectSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRound1NonSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRound1Users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRound2Users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRound2UsersClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalSaleUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_realPayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_realSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWhitelists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exec\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersEx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"join\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"join\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PublicSale", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}