{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.8.7;\r\n\r\n\r\n// SPDX-License-Identifier: Unlicense\r\ninterface ITraits {\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n  function tokenURINotRevealed(uint256 tokenId) external view returns (string memory);\r\n  function tokenURITopTalents(uint8 topTalentNo, uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IDrawSvg {\r\n  function drawSvg(\r\n    string memory svgBreedColor, string memory svgBreedHead, string memory svgOffhand, string memory svgArmor, string memory svgMainhand\r\n  ) external view returns (string memory);\r\n  function drawSvgNew(\r\n    string memory svgBreedColor, string memory svgBreedHead, string memory svgOffhand, string memory svgArmor, string memory svgMainhand\r\n  ) external view returns (string memory);\r\n}\r\n\r\ninterface INameChange {\r\n  function changeName(address owner, uint256 id, string memory newName) external;\r\n}\r\n\r\ninterface IDogewood {\r\n    // struct to store each token's traits\r\n    struct Doge2 {\r\n        uint8 head;\r\n        uint8 breed;\r\n        uint8 color;\r\n        uint8 class;\r\n        uint8 armor;\r\n        uint8 offhand;\r\n        uint8 mainhand;\r\n        uint16 level;\r\n        uint16 breedRerollCount;\r\n        uint16 classRerollCount;\r\n        uint8 artStyle; // 0: new, 1: old\r\n    }\r\n\r\n    function getTokenTraits(uint256 tokenId) external view returns (Doge2 memory);\r\n    function getGenesisSupply() external view returns (uint256);\r\n    function validateOwnerOfDoge(uint256 id, address who_) external view returns (bool);\r\n    function unstakeForQuest(address[] memory owners, uint256[] memory ids) external;\r\n    function updateQuestCooldown(uint256[] memory doges, uint88 timestamp) external;\r\n    function pull(address owner, uint256[] calldata ids) external;\r\n    function manuallyAdjustDoge(uint256 id, uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level, uint16 breedRerollCount, uint16 classRerollCount, uint8 artStyle) external;\r\n    function transfer(address to, uint256 tokenId) external;\r\n    // function doges(uint256 id) external view returns(uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n}\r\n\r\ninterface IDogewoodForCommonerSale {\r\n    function validateDogeOwnerForClaim(uint256 id, address who_) external view returns (bool);\r\n}\r\n\r\ninterface ICastleForCommonerSale {\r\n    function dogeOwner(uint256 id) external view returns (address);\r\n}\r\n\r\n// interface DogeLike {\r\n//     function pull(address owner, uint256[] calldata ids) external;\r\n//     function manuallyAdjustDoge(uint256 id, uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level) external;\r\n//     function transfer(address to, uint256 tokenId) external;\r\n//     function doges(uint256 id) external view returns(uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n// }\r\ninterface PortalLike {\r\n    function sendMessage(bytes calldata message_) external;\r\n}\r\n\r\ninterface CastleLike {\r\n    function pullCallback(address owner, uint256[] calldata ids) external;\r\n}\r\n\r\ninterface ERC20Like {\r\n    function balanceOf(address from) external view returns(uint256 balance);\r\n    function burn(address from, uint256 amount) external;\r\n    function mint(address from, uint256 amount) external;\r\n    function transfer(address to, uint256 amount) external;\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n}\r\n\r\ninterface ERC1155Like {\r\n    function mint(address to, uint256 id, uint256 amount) external;\r\n    function burn(address from, uint256 id, uint256 amount) external;\r\n}\r\n\r\ninterface ERC721Like {\r\n    function transferFrom(address from, address to, uint256 id) external;   \r\n    function transfer(address to, uint256 id) external;\r\n    function ownerOf(uint256 id) external returns (address owner);\r\n    function mint(address to, uint256 tokenid) external;\r\n}\r\n\r\ninterface QuestLike {\r\n    struct GroupConfig {\r\n        uint16 lvlFrom;\r\n        uint16 lvlTo;\r\n        uint256 entryFee; // additional entry $TREAT\r\n        uint256 initPrize; // init prize pool $TREAT\r\n    }\r\n    struct Action {\r\n        uint256 id; // unique id to distinguish activities\r\n        uint88 timestamp;\r\n        uint256 doge;\r\n        address owner;\r\n        uint256 score;\r\n        uint256 finalScore;\r\n    }\r\n\r\n    function doQuestByAdmin(uint256 doge, address owner, uint256 score, uint8 groupIndex, uint256 combatId) external;\r\n}\r\n\r\ninterface IOracle {\r\n    function request() external returns (uint64 key);\r\n    function getRandom(uint64 id) external view returns(uint256 rand);\r\n}\r\n\r\ninterface IVRF {\r\n    function getRandom(uint256 seed) external returns (uint256);\r\n    function getRandom(string memory seed) external returns (uint256);\r\n    function getRand(uint256 nonce) external view returns (uint256);\r\n    function getRange(uint min, uint max,uint nonce) external view returns(uint);\r\n}\r\n\r\ninterface ICommoner {\r\n    // struct to store each token's traits\r\n    struct Commoner {\r\n        uint8 head;\r\n        uint8 breed;\r\n        uint8 palette;\r\n        uint8 bodyType;\r\n        uint8 clothes;\r\n        uint8 accessory;\r\n        uint8 background;\r\n        uint8 smithing;\r\n        uint8 alchemy;\r\n        uint8 cooking;\r\n    }\r\n\r\n    function getTokenTraits(uint256 tokenId) external view returns (Commoner memory);\r\n    function getGenesisSupply() external view returns (uint256);\r\n    function validateOwner(uint256 id, address who_) external view returns (bool);\r\n    function pull(address owner, uint256[] calldata ids) external;\r\n    function adjust(uint256 id, uint8 head, uint8 breed, uint8 palette, uint8 bodyType, uint8 clothes, uint8 accessory, uint8 background, uint8 smithing, uint8 alchemy, uint8 cooking) external;\r\n    function transfer(address to, uint256 tokenId) external;\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// Creator: Chiru Labs\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\n// error ApprovalCallerNotOwnerNorApproved();\r\n// error ApprovalQueryForNonexistentToken();\r\n// error ApproveToCaller();\r\n// error ApprovalToCurrentOwner();\r\n// error BalanceQueryForZeroAddress();\r\n// error MintToZeroAddress();\r\n// error MintZeroQuantity();\r\n// error OwnerQueryForNonexistentToken();\r\n// error TransferCallerNotOwnerNorApproved();\r\n// error TransferFromIncorrectOwner();\r\n// error TransferToNonERC721ReceiverImplementer();\r\n// error TransferToZeroAddress();\r\n// error URIQueryForNonexistentToken();\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n    address        implementation_;\r\n    address public admin; //Lame requirement from opensea\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n    }\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct AddressData {\r\n        // Realistically, 2**64-1 is more than enough.\r\n        uint64 balance;\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n        uint64 numberMinted;\r\n        // Keeps track of burn count with minimal overhead for tokenomics.\r\n        uint64 numberBurned;\r\n        // For miscellaneous variable(s) pertaining to the address\r\n        // (e.g. number of whitelist mint slots used).\r\n        // If there are multiple variables, please pack them into a uint64.\r\n        uint64 aux;\r\n    }\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 internal _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 internal _burnCounter;\r\n\r\n    // Token name\r\n    string internal _name;\r\n\r\n    // Token symbol\r\n    string internal _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // function init(string memory name_, string memory symbol_) internal {\r\n    //     _name = name_;\r\n    //     _symbol = symbol_;\r\n    //     _currentIndex = _startTokenId();\r\n    // }\r\n\r\n    /**\r\n     * To change the starting tokenId, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than _currentIndex - _startTokenId() times\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view returns (uint256) {\r\n        // Counter underflow is impossible as _currentIndex does not decrement,\r\n        // and it is initialized to _startTokenId()\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert(\"BalanceQueryForZeroAddress()\");\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberBurned);\r\n    }\r\n\r\n    /**\r\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return _addressData[owner].aux;\r\n    }\r\n\r\n    /**\r\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        _addressData[owner].aux = aux;\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr && curr < _currentIndex) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (!ownership.burned) {\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                    // Invariant:\r\n                    // There will always be an ownership that has an address and is not burned\r\n                    // before an ownership that does not have an address and is not burned.\r\n                    // Hence, curr will not underflow.\r\n                    while (true) {\r\n                        curr--;\r\n                        ownership = _ownerships[curr];\r\n                        if (ownership.addr != address(0)) {\r\n                            return ownership;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        revert(\"OwnerQueryForNonexistentToken()\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert(\"URIQueryForNonexistentToken()\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        if (to == owner) revert(\"ApprovalToCurrentOwner()\");\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert(\"ApprovalCallerNotOwnerNorApproved()\");\r\n        }\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert(\"ApprovalQueryForNonexistentToken()\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSender()) revert(\"ApproveToCaller()\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transfer(address to, uint256 tokenId) external {\r\n        require(msg.sender == ownerOf(tokenId), \"NOT_OWNER\");\r\n        if (to == address(0)) revert(\"TransferToZeroAddress()\");\r\n\r\n        _transfer(msg.sender, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        bool isApprovedOrOwner = (_msgSender() == from ||\r\n            isApprovedForAll(from, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert(\"TransferCallerNotOwnerNorApproved()\");\r\n        if (to == address(0)) revert(\"TransferToZeroAddress()\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        bool isApprovedOrOwner = (_msgSender() == from ||\r\n            isApprovedForAll(from, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert(\"TransferCallerNotOwnerNorApproved()\");\r\n        if (to == address(0)) revert(\"TransferToZeroAddress()\");\r\n\r\n        _transfer(from, to, tokenId);\r\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n            revert(\"TransferToNonERC721ReceiverImplementer()\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert(\"MintToZeroAddress()\");\r\n        if (quantity == 0) revert(\"MintZeroQuantity()\");\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint64(quantity);\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n\r\n            if (safe && to.isContract()) {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex);\r\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n                        revert(\"TransferToNonERC721ReceiverImplementer()\");\r\n                    }\r\n                } while (updatedIndex != end);\r\n                // Reentrancy protection\r\n                if (_currentIndex != startTokenId) revert(\"Reentrancy protection\");\r\n            } else {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex++);\r\n                } while (updatedIndex != end);\r\n            }\r\n            _currentIndex = updatedIndex;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        if (prevOwnership.addr != from) revert(\"TransferFromIncorrectOwner()\");\r\n\r\n        // bool isApprovedOrOwner = (_msgSender() == from ||\r\n        //     isApprovedForAll(from, _msgSender()) ||\r\n        //     getApproved(tokenId) == _msgSender());\r\n\r\n        // if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        // if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, from);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            TokenOwnership storage currSlot = _ownerships[tokenId];\r\n            currSlot.addr = to;\r\n            currSlot.startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\r\n            if (nextSlot.addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId != _currentIndex) {\r\n                    nextSlot.addr = from;\r\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev This is equivalent to _burn(tokenId, false)\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        address from = prevOwnership.addr;\r\n\r\n        if (approvalCheck) {\r\n            bool isApprovedOrOwner = (_msgSender() == from ||\r\n                isApprovedForAll(from, _msgSender()) ||\r\n                getApproved(tokenId) == _msgSender());\r\n\r\n            if (!isApprovedOrOwner) revert(\"TransferCallerNotOwnerNorApproved()\");\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, from);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            AddressData storage addressData = _addressData[from];\r\n            addressData.balance -= 1;\r\n            addressData.numberBurned += 1;\r\n\r\n            // Keep track of who burned the token, and the timestamp of burning.\r\n            TokenOwnership storage currSlot = _ownerships[tokenId];\r\n            currSlot.addr = from;\r\n            currSlot.startTimestamp = uint64(block.timestamp);\r\n            currSlot.burned = true;\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\r\n            if (nextSlot.addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId != _currentIndex) {\r\n                    nextSlot.addr = from;\r\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert(\"TransferToNonERC721ReceiverImplementer()\");\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * Should be:\r\n        treat.setMinter(commoners, true)\r\n */\r\ncontract Commoners is ERC721A {\r\n\r\n    using ECDSA for bytes32;\r\n\r\n    // address implementation_;\r\n    // address public admin;\r\n    bool public initialized;\r\n    mapping(address => bool) public auth;\r\n\r\n    // sale variables\r\n    uint256 public constant MAX_SUPPLY = 10_000;\r\n    uint256 public constant DOGE_SUPPLY = 5_001;\r\n    uint256 public totalClaimed; // total claimed amount of genesis doge holders\r\n    // mapping of tokenNo => tokenPartner\r\n    //   tokenNo values => [0: ETH, 1: $ZUG, 2: $CHEETH, 3: $MES, 4: $HONEYD, 5: $SHELL]\r\n    mapping(uint8 => TokenPartner) tokenPartner;\r\n    uint256 public initialSaleMinted; // minted amount of initial public sale\r\n\r\n    IDogewood public dogewood;\r\n    ERC20Like public treat;\r\n    uint8 public saleStatus; // 0 : not in sale, 1: claim & WL & public, 2: public sale\r\n    mapping(uint256 => bool) public dogeClaimed; // tokenId => isClaimed\r\n    mapping(address => uint8) public whitelistMinted; // address => minted_amount\r\n\r\n    mapping(uint256 => ICommoner.Commoner) internal commoners; // traits: tokenId => blockNumber\r\n    mapping(uint256 => uint256) public coolBlocks; // cool blocks to lock metadata: tokenId => blockNumber\r\n    ITraits public traits;\r\n    IVRF public vrf; // random generator\r\n    address public castle;\r\n\r\n    // list of probabilities for each trait type\r\n    // 0 - 7 are associated with head, breed, palette, bodyType, clothes, accessory, background, smithing, alchemy, cooking\r\n    uint8[][10] public rarities;\r\n    // list of aliases for Walker's Alias algorithm\r\n    // 0 - 7 are associated with head, breed, palette, bodyType, clothes, accessory, background, smithing, alchemy, cooking\r\n    uint8[][10] public aliases;\r\n    // mapping from hashed(tokenTrait) to the tokenId it's associated with\r\n    // used to ensure there are no duplicates\r\n    mapping(uint256 => uint256) public existingCombinations;\r\n    bool public revealed;\r\n    mapping(uint256 => uint8) public topTalents; // commonerId => topTalentNo (1~4)\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n            --- End of data\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                DATA STRUCTURE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    struct TokenPartner {\r\n        bool mintActive;\r\n        uint8 maxMintPerTx;\r\n        uint16 totalMinted;\r\n        uint16 mintQuantity;\r\n        uint256 mintPrice;\r\n        ERC20Like token;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event AirdropTopTalent(uint8 talentId, uint256 commonerId);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    MODIFIERS \r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    modifier noCheaters() {\r\n        uint256 size = 0;\r\n        address acc = msg.sender;\r\n        assembly {\r\n            size := extcodesize(acc)\r\n        }\r\n\r\n        require(\r\n            auth[msg.sender] || (msg.sender == tx.origin && size == 0),\r\n            \"you're trying to cheat!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    Admin methods\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function initialize(address dogewood_, address treat_, address vrf_) public {\r\n        require(msg.sender == admin, \"not admin\");\r\n        require(initialized == false, \"already initialized\");\r\n        initialized = true;\r\n\r\n        // init erc721a\r\n        _name = \"Commoners\";\r\n        _symbol = \"COMMONERS\";\r\n        _currentIndex = _startTokenId();\r\n\r\n        auth[msg.sender] = true;\r\n        dogewood = IDogewood(dogewood_);\r\n        treat = ERC20Like(treat_);\r\n        vrf = IVRF(vrf_);\r\n        revealed = false;\r\n\r\n        // I know this looks weird but it saves users gas by making lookup O(1)\r\n        // A.J. Walker's Alias Algorithm\r\n        // head\r\n        rarities[0] = [173, 155, 255, 206, 206, 206, 114, 114, 114];\r\n        aliases[0] = [2, 2, 8, 0, 0, 0, 0, 1, 1];\r\n        // breed\r\n        rarities[1] = [255, 255, 255, 255, 255, 255, 255, 255];\r\n        aliases[1] = [7, 7, 7, 7, 7, 7, 7, 7];\r\n        // palette\r\n        rarities[2] = [255, 188, 255, 229, 153, 76];\r\n        aliases[2] = [2, 2, 5, 0, 0, 1];\r\n        // bodyType\r\n        rarities[3] = [255, 255];\r\n        aliases[3] = [1, 1];\r\n        // clothes\r\n        rarities[4] = [209, 96, 66, 153, 219, 107, 112, 198, 198, 66, 132, 132, 254];\r\n        aliases[4] = [4, 5, 0, 6, 6, 6, 12, 1, 1, 1, 3, 3, 12];\r\n        // accessory\r\n        rarities[5] = [209, 96, 66, 153, 219, 107, 112, 198, 198, 66, 132, 132, 254];\r\n        aliases[5] = [4, 5, 0, 6, 6, 6, 12, 1, 1, 1, 3, 3, 12];\r\n        // background\r\n        rarities[6] = [142, 254, 244, 183, 122, 61];\r\n        aliases[6] = [1, 5, 0, 0, 0, 0];\r\n        // smithing\r\n        rarities[7] = [204, 255, 153, 51]; // [0.5, 0.3, 0.15, 0.05]\r\n        aliases[7] = [1, 3, 0, 0];\r\n        // alchemy\r\n        rarities[8] = [204, 255, 153, 51]; // [0.5, 0.3, 0.15, 0.05]\r\n        aliases[8] = [1, 3, 0, 0];\r\n        // cooking\r\n        rarities[9] = [204, 255, 153, 51]; // [0.5, 0.3, 0.15, 0.05]\r\n        aliases[9] = [1, 3, 0, 0];\r\n    }\r\n\r\n    function setRevealed() external {\r\n        require(msg.sender == admin, \"not admin\");\r\n        require(!revealed, \"already revealed\");\r\n        revealed = true;\r\n        _airdropTopTalents();\r\n    }\r\n\r\n    function setSaleStatus(uint8 status_) public {\r\n        require(msg.sender == admin, \"not admin\");\r\n        saleStatus = status_;\r\n    }\r\n\r\n    function withdraw() external payable {\r\n        require(msg.sender == admin, \"not admin\");\r\n        payable(0x8c8bbDB5C8D9c35FfB4493490172D2787648cAD8).transfer(address(this).balance);\r\n    }\r\n\r\n    function burnPartnerToken(uint8 tokenNo_) external {\r\n        require(msg.sender == admin, \"not admin\");\r\n        tokenPartner[tokenNo_].token.transfer(0x000000000000000000000000000000000000dEaD, tokenPartner[tokenNo_].token.balanceOf(address(this)));\r\n    }\r\n\r\n    function setTreat(address t_) external {\r\n        require(msg.sender == admin);\r\n        treat = ERC20Like(t_);\r\n    }\r\n\r\n    function setPartnerToken(uint8 tokenNo_, bool mintActive_, uint8 maxMintPerTx_, uint16 mintQuantity_,uint256 mintPrice_,  address token_) external {\r\n        require(msg.sender == admin);\r\n        tokenPartner[tokenNo_] = TokenPartner(mintActive_, maxMintPerTx_, 0, mintQuantity_, mintPrice_, ERC20Like(token_));\r\n    }\r\n\r\n    function setCastle(address c_) external {\r\n        require(msg.sender == admin);\r\n        castle = c_;\r\n    }\r\n\r\n    function setTraits(address t_) external {\r\n        require(msg.sender == admin);\r\n        traits = ITraits(t_);\r\n    }\r\n\r\n    function setAuth(address add, bool isAuth) external {\r\n        require(msg.sender == admin);\r\n        auth[add] = isAuth;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external {\r\n        require(msg.sender == admin);\r\n        admin = newOwner;\r\n    }\r\n\r\n    function mintReserve(uint16 quantity_, address to_) external {\r\n        require(msg.sender == admin);\r\n        // require(quantity_ <= 10, \"exceed max quantity\");\r\n        require(totalSupply()+quantity_ <= MAX_SUPPLY-DOGE_SUPPLY, \"sold out\");\r\n        _mintCommoners(to_, quantity_);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    Public methods\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function claimMint(uint16[] memory doges_) external noCheaters {\r\n        require(saleStatus == 1, \"claim is not active\");\r\n        require(doges_.length > 0, \"empty doges\");\r\n        for (uint16 i = 0; i < doges_.length; i++) {\r\n            require(dogeClaimed[doges_[i]] == false, \"already claimed\");\r\n            require(IDogewoodForCommonerSale(address(dogewood)).validateDogeOwnerForClaim(doges_[i], msg.sender), \"invalid owner\");\r\n        }\r\n\r\n        treat.burn(msg.sender, doges_.length * 40 ether);\r\n        for (uint16 i = 0; i < doges_.length; i++) {\r\n            require(dogeClaimed[doges_[i]] == false, \"already claimed\");\r\n            dogeClaimed[doges_[i]] = true;\r\n        }\r\n        totalClaimed += doges_.length;\r\n        _mintCommoners(msg.sender, uint16(doges_.length));\r\n    }\r\n\r\n    // WL with mint with ETH\r\n    //     Max mint per WL = 3\r\n    //     Cost 0.035 ETH\r\n    //     After 48hrs the unclaimed supply will go towards the public sale\r\n    function whitelistMint(uint8 quantity_, bytes memory signature) external payable noCheaters {\r\n        require(saleStatus == 1, \"wl is not active\");\r\n        require(quantity_ > 0, \"empty quantity\");\r\n        require(isValidSignature(msg.sender, signature), \"invalid signature\");\r\n        require(whitelistMinted[msg.sender] + quantity_ <= 3, \"exceeds wl quantity\");\r\n        require(totalSupply()+quantity_ <= MAX_SUPPLY-DOGE_SUPPLY+totalClaimed, \"sold out\");\r\n\r\n        require(msg.value >= uint(quantity_) * 0.035 ether, \"insufficient eth\");\r\n        whitelistMinted[msg.sender] = whitelistMinted[msg.sender] + quantity_;\r\n        _mintCommoners(msg.sender, quantity_);\r\n    }\r\n\r\n    function isValidSignature(address user, bytes memory signature) internal view returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(\"whitelist\", user));\r\n        address signer_ = hash.toEthSignedMessageHash().recover(signature);\r\n        return auth[signer_];\r\n    }\r\n\r\n    // Initial Public Sale\r\n    //     Max mint per Tx = 6\r\n    //     Cost 0.035 ETH or Partner Token\r\n    function publicMintInitial(uint8 quantity_, uint8 tokenNo_) external payable noCheaters {\r\n        require(saleStatus == 1, \"status is not public sale\");\r\n        require(quantity_ <= 6, \"exceed max quantity\");\r\n        require(initialSaleMinted+quantity_ <= 1000, \"exceed initial sale amount\");\r\n        require(totalSupply()+quantity_ <= MAX_SUPPLY-DOGE_SUPPLY+totalClaimed, \"sold out\");\r\n\r\n        if(tokenNo_ == 0) {\r\n            require(msg.value >= uint(quantity_) * 0.035 ether, \"insufficient eth\");\r\n        } else {\r\n            require(tokenPartner[tokenNo_].mintActive == true, \"invalid token\");\r\n            require(tokenPartner[tokenNo_].totalMinted + quantity_ <= tokenPartner[tokenNo_].mintQuantity, \"minted out with this token\");\r\n            tokenPartner[tokenNo_].token.transferFrom(msg.sender, address(this), uint(quantity_) * tokenPartner[tokenNo_].mintPrice);\r\n        }\r\n        initialSaleMinted += quantity_;\r\n        _mintCommoners(msg.sender, quantity_);\r\n    }\r\n\r\n    // Final Public Sale\r\n    //     Max mint per Tx = 6\r\n    //     Cost 0.035 ETH or Partner Token\r\n    function publicMintFinal(uint8 quantity_, uint8 tokenNo_) external payable noCheaters {\r\n        require(saleStatus == 2, \"status is not public sale\");\r\n        require(quantity_ <= 6, \"exceed max quantity\");\r\n        require(totalSupply()+quantity_ <= MAX_SUPPLY, \"sold out\");\r\n\r\n        if(tokenNo_ == 0) {\r\n            require(msg.value >= uint(quantity_) * 0.035 ether, \"insufficient eth\");\r\n        } else {\r\n            require(tokenPartner[tokenNo_].mintActive == true, \"invalid token\");\r\n            require(tokenPartner[tokenNo_].totalMinted + quantity_ <= tokenPartner[tokenNo_].mintQuantity, \"minted out with this token\");\r\n            tokenPartner[tokenNo_].token.transferFrom(msg.sender, address(this), uint(quantity_) * tokenPartner[tokenNo_].mintPrice);\r\n        }\r\n        _mintCommoners(msg.sender, quantity_);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    Internal methods\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _airdropTopTalents() internal {\r\n        uint256 airdropMax_ = _currentIndex > MAX_SUPPLY ? MAX_SUPPLY : (_currentIndex-1);\r\n        for (uint8 i = 1; i <= 4; i++) {\r\n            uint256 topCommoner_;\r\n            do {\r\n                topCommoner_ = (vrf.getRandom(i) % airdropMax_) + 1;\r\n            } while (topTalents[topCommoner_] > 0);\r\n            topTalents[topCommoner_] = i;\r\n\r\n            // Set traits of top talents - commoners[topCommoner_]\r\n            if(i == 1) {\r\n                // Rudy Hammerpaw, Master Blacksmith\r\n                //     uint8 head; Determined\r\n                //     uint8 breed; Pitbull\r\n                //     uint8 palette; 1\r\n                //     uint8 bodyType; A\r\n                //     uint8 clothes; Rudy's Smithing Apron\r\n                //     uint8 accessory; Rudy's Eye Patch\r\n                //     uint8 background; The Forge\r\n                commoners[topCommoner_].head = 0;\r\n                commoners[topCommoner_].breed = 6;\r\n                commoners[topCommoner_].palette = 0;\r\n                commoners[topCommoner_].bodyType = 0;\r\n                commoners[topCommoner_].clothes = 13;\r\n                commoners[topCommoner_].accessory = 13;\r\n                commoners[topCommoner_].background = 6;\r\n                commoners[topCommoner_].smithing = 5;\r\n                commoners[topCommoner_].alchemy = 1;\r\n                commoners[topCommoner_].cooking = 1;\r\n            } else if(i == 2) {\r\n                // Catharine Von Schbeagle, Savant of Science\r\n                //     uint8 head; Excited\r\n                //     uint8 breed; Beagle\r\n                //     uint8 palette; 1\r\n                //     uint8 bodyType; A\r\n                //     uint8 clothes; Goggles of Science\r\n                //     uint8 accessory; Von Schbeagle's Lab Coat\r\n                //     uint8 background; Artificer's Lab\r\n                commoners[topCommoner_].head = 9;\r\n                commoners[topCommoner_].breed = 8;\r\n                commoners[topCommoner_].palette = 0;\r\n                commoners[topCommoner_].bodyType = 0;\r\n                commoners[topCommoner_].clothes = 14;\r\n                commoners[topCommoner_].accessory = 14;\r\n                commoners[topCommoner_].background = 7;\r\n                commoners[topCommoner_].smithing = 1;\r\n                commoners[topCommoner_].alchemy = 5;\r\n                commoners[topCommoner_].cooking = 1;\r\n            } else if(i == 3) {\r\n                // Charlie Chonkins, Royal Cook\r\n                //     uint8 head; Content\r\n                //     uint8 breed; Corgi\r\n                //     uint8 palette; 1\r\n                //     uint8 bodyType; A\r\n                //     uint8 clothes; Royal Chef's Apron\r\n                //     uint8 accessory; Royal Chef's Hat\r\n                //     uint8 background; The Mess Hall\r\n                commoners[topCommoner_].head = 10;\r\n                commoners[topCommoner_].breed = 2;\r\n                commoners[topCommoner_].palette = 0;\r\n                commoners[topCommoner_].bodyType = 0;\r\n                commoners[topCommoner_].clothes = 15;\r\n                commoners[topCommoner_].accessory = 15;\r\n                commoners[topCommoner_].background = 8;\r\n                commoners[topCommoner_].smithing = 1;\r\n                commoners[topCommoner_].alchemy = 1;\r\n                commoners[topCommoner_].cooking = 5;\r\n            } else if(i == 4) {\r\n                // Prince Pom, Prince of Dogewood Kingdom\r\n                //     uint8 head; Proud\r\n                //     uint8 breed; Pomeranian\r\n                //     uint8 palette; 1\r\n                //     uint8 bodyType; A\r\n                //     uint8 clothes; Coat of the Strategist\r\n                //     uint8 accessory; Dogewood Royal Scepter\r\n                //     uint8 background; The War Room\r\n                commoners[topCommoner_].head = 11;\r\n                commoners[topCommoner_].breed = 9;\r\n                commoners[topCommoner_].palette = 0;\r\n                commoners[topCommoner_].bodyType = 0;\r\n                commoners[topCommoner_].clothes = 16;\r\n                commoners[topCommoner_].accessory = 16;\r\n                commoners[topCommoner_].background = 9;\r\n                commoners[topCommoner_].smithing = 4;\r\n                commoners[topCommoner_].alchemy = 4;\r\n                commoners[topCommoner_].cooking = 4;\r\n            }\r\n            emit AirdropTopTalent(i, topCommoner_);\r\n        }\r\n    }\r\n\r\n    function _mintCommoners(address to_, uint16 quantity_) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        for (uint256 id_ = startTokenId; id_ < startTokenId + quantity_; id_++) {\r\n            uint256 seed = vrf.getRandom(id_);\r\n            generate(id_, seed);\r\n            coolBlocks[id_] = block.number;\r\n        }\r\n        // _safeMint(to_, quantity_);\r\n        // _mint(to_, quantity_, '', false);\r\n        // safe operation with max batch 10\r\n        uint numBatch = quantity_ / 10;\r\n        for (uint256 i = 0; i < numBatch; i++) {\r\n            _mint(to_, 10, '', false);\r\n        }\r\n        uint left_ = quantity_ - (numBatch*10);\r\n        if(left_ > 0) _mint(to_, left_, '', false);\r\n    }\r\n\r\n    /**\r\n    * generates traits for a specific token, checking to make sure it's unique\r\n    * @param tokenId the id of the token to generate traits for\r\n    * @param seed a pseudorandom 256 bit number to derive traits from\r\n    * @return t - a struct of traits for the given token ID\r\n    */\r\n    function generate(uint256 tokenId, uint256 seed) internal returns (ICommoner.Commoner memory t) {\r\n        t = selectTraits(seed);\r\n        commoners[tokenId] = t;\r\n        return t;\r\n\r\n        // keep the following code for future use, current version using different seed, so no need for now\r\n        // if (existingCombinations[structToHash(t)] == 0) {\r\n        //     doges[tokenId] = t;\r\n        //     existingCombinations[structToHash(t)] = tokenId;\r\n        //     return t;\r\n        // }\r\n        // return generate(tokenId, random(seed));\r\n    }\r\n\r\n    /**\r\n    * uses A.J. Walker's Alias algorithm for O(1) rarity table lookup\r\n    * ensuring O(1) instead of O(n) reduces mint cost by more than 50%\r\n    * probability & alias tables are generated off-chain beforehand\r\n    * @param seed portion of the 256 bit seed to remove trait correlation\r\n    * @param traitType the trait type to select a trait for \r\n    * @return the ID of the randomly selected trait\r\n    */\r\n    function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\r\n        uint8 trait = uint8(seed) % uint8(rarities[traitType].length);\r\n        if (seed >> 8 < rarities[traitType][trait]) return trait;\r\n        return aliases[traitType][trait];\r\n    }\r\n\r\n    /**\r\n    * selects the species and all of its traits based on the seed value\r\n    * @param seed a pseudorandom 256 bit number to derive traits from\r\n    * @return t -  a struct of randomly selected traits\r\n    */\r\n    function selectTraits(uint256 seed) internal view returns (ICommoner.Commoner memory t) {    \r\n        t.head = selectTrait(uint16(seed & 0xFFFF), 0);\r\n        seed >>= 16;\r\n        t.breed = selectTrait(uint16(seed & 0xFFFF), 1);\r\n        seed >>= 16;\r\n        t.palette = selectTrait(uint16(seed & 0xFFFF), 2);\r\n        seed >>= 16;\r\n        t.bodyType = selectTrait(uint16(seed & 0xFFFF), 3);\r\n        seed >>= 16;\r\n        t.clothes = selectTrait(uint16(seed & 0xFFFF), 4);\r\n        seed >>= 16;\r\n        t.accessory = selectTrait(uint16(seed & 0xFFFF), 5);\r\n        seed >>= 16;\r\n        t.background = selectTrait(uint16(seed & 0xFFFF), 6);\r\n        seed >>= 16;\r\n        t.smithing = selectTrait(uint16(seed & 0xFFFF), 7);\r\n        seed >>= 16;\r\n        t.alchemy = selectTrait(uint16(seed & 0xFFFF), 8);\r\n        seed >>= 16;\r\n        t.cooking = selectTrait(uint16(seed & 0xFFFF), 9);\r\n        seed >>= 16;\r\n    }\r\n\r\n    /**\r\n    * converts a struct to a 256 bit hash to check for uniqueness\r\n    * @param s the struct to pack into a hash\r\n    * @return the 256 bit hash of the struct\r\n    */\r\n    function structToHash(ICommoner.Commoner memory s) internal pure returns (uint256) {\r\n        return uint256(bytes32(\r\n            abi.encodePacked(\r\n                s.head,\r\n                s.breed,\r\n                s.palette,\r\n                s.bodyType,\r\n                s.clothes,\r\n                s.accessory,\r\n                s.background,\r\n                s.smithing,\r\n                s.alchemy,\r\n                s.cooking\r\n            )\r\n        ));\r\n    }\r\n\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    VIEWERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    // function getGenesisSupply() external pure returns (uint256) {\r\n    //     return GENESIS_SUPPLY;\r\n    // }\r\n\r\n    function validateOwner(uint256 id, address who_) external view returns (bool) { \r\n        return (ownerOf(id) == who_);\r\n    }\r\n\r\n    function getTokenTraits(uint256 tokenId) external view returns (ICommoner.Commoner memory) {\r\n        require(revealed, \"not revealed yet\");\r\n        require(coolBlocks[tokenId] != block.number, \"ERC721Metadata: URI query for cooldown token\");\r\n        return ICommoner.Commoner({\r\n            head: commoners[tokenId].head,\r\n            breed: commoners[tokenId].breed,\r\n            palette: commoners[tokenId].palette,\r\n            bodyType: commoners[tokenId].bodyType,\r\n            clothes: commoners[tokenId].clothes,\r\n            accessory: commoners[tokenId].accessory,\r\n            background: commoners[tokenId].background,\r\n            smithing: commoners[tokenId].smithing,\r\n            alchemy: commoners[tokenId].alchemy,\r\n            cooking: commoners[tokenId].cooking\r\n        });\r\n    }\r\n\r\n    /** RENDER */\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        if(!revealed) return traits.tokenURINotRevealed(tokenId);\r\n        // commoners[tokenId] empty check\r\n        require(coolBlocks[tokenId] != block.number, \"ERC721Metadata: URI query for nonexistent token\");\r\n        if(topTalents[tokenId] > 0) return traits.tokenURITopTalents(topTalents[tokenId], tokenId);\r\n        return traits.tokenURI(tokenId);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    Travel FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function pull(address owner_, uint256[] calldata ids) external {\r\n        require(revealed, \"not revealed yet\");\r\n        require (msg.sender == castle, \"not castle\");\r\n        for (uint256 index = 0; index < ids.length; index++) {\r\n            _transfer(owner_, msg.sender, ids[index]);\r\n        }\r\n        CastleLike(msg.sender).pullCallback(owner_, ids);\r\n    }\r\n\r\n    function adjust(uint256 id, uint8 head, uint8 breed, uint8 palette, uint8 bodyType, uint8 clothes, uint8 accessory, uint8 background, uint8 smithing, uint8 alchemy, uint8 cooking) external {\r\n        require(msg.sender == admin || auth[msg.sender], \"not authorized\");\r\n        commoners[id].head = head;\r\n        commoners[id].breed = breed;\r\n        commoners[id].palette = palette;\r\n        commoners[id].bodyType = bodyType;\r\n        commoners[id].clothes = clothes;\r\n        commoners[id].accessory = accessory;\r\n        commoners[id].background = background;\r\n        commoners[id].smithing = smithing;\r\n        commoners[id].alchemy = alchemy;\r\n        commoners[id].cooking = cooking;\r\n    }\r\n\r\n    // ERC721 receiver\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) public pure returns (bytes4) {\r\n        return 0x150b7a02;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"talentId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commonerId\",\"type\":\"uint256\"}],\"name\":\"AirdropTopTalent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOGE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"palette\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bodyType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"clothes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"smithing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alchemy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cooking\",\"type\":\"uint8\"}],\"name\":\"adjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aliases\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenNo_\",\"type\":\"uint8\"}],\"name\":\"burnPartnerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"castle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"doges_\",\"type\":\"uint16[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coolBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dogeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogewood\",\"outputs\":[{\"internalType\":\"contract IDogewood\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"existingCombinations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"palette\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bodyType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"clothes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"smithing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alchemy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cooking\",\"type\":\"uint8\"}],\"internalType\":\"struct ICommoner.Commoner\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSaleMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dogewood_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrf_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"quantity_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"mintReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quantity_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenNo_\",\"type\":\"uint8\"}],\"name\":\"publicMintFinal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quantity_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenNo_\",\"type\":\"uint8\"}],\"name\":\"publicMintInitial\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuth\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c_\",\"type\":\"address\"}],\"name\":\"setCastle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenNo_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"mintActive_\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"maxMintPerTx_\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"mintQuantity_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setPartnerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"status_\",\"type\":\"uint8\"}],\"name\":\"setSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t_\",\"type\":\"address\"}],\"name\":\"setTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t_\",\"type\":\"address\"}],\"name\":\"setTreat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topTalents\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treat\",\"outputs\":[{\"internalType\":\"contract ERC20Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"}],\"name\":\"validateOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrf\",\"outputs\":[{\"internalType\":\"contract IVRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quantity_\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMinted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Commoners", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9a878566356a98ddfc91ca3e1921ef9eba5807535209457f4f795564c52524a"}]}