{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\nlibrary Strings {\r\n\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED; _; _status = _NOT_ENTERED;\r\n\r\n    }\r\n\r\n}\r\n\r\ninterface IERC721Receiver {\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    uint256[] private _allTokens;\r\n\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId;\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId;\r\n        _allTokensIndex[lastTokenId] = tokenIndex;\r\n\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n//'\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588::'\u2588\u2588::::::::::'\u2588\u2588\u2588::::'\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:'\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:::::::'\u2588\u2588::::::::::'\u2588\u2588\u2588::::'\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:://\r\n// \u2588\u2588.... \u2588\u2588: \u2588\u2588:::::::::'\u2588\u2588 \u2588\u2588:::..... \u2588\u2588::..... \u2588\u2588:::::::: \u2588\u2588:::::::::'\u2588\u2588 \u2588\u2588::: \u2588\u2588.... \u2588\u2588://\r\n// \u2588\u2588:::: \u2588\u2588: \u2588\u2588::::::::'\u2588\u2588:. \u2588\u2588:::::: \u2588\u2588::::::: \u2588\u2588::::::::: \u2588\u2588::::::::'\u2588\u2588:. \u2588\u2588:: \u2588\u2588:::: \u2588\u2588://\r\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:: \u2588\u2588:::::::'\u2588\u2588:::. \u2588\u2588:::: \u2588\u2588::::::: \u2588\u2588:::::::::: \u2588\u2588:::::::'\u2588\u2588:::. \u2588\u2588: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:://\r\n// \u2588\u2588.... \u2588\u2588: \u2588\u2588::::::: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588::: \u2588\u2588::::::: \u2588\u2588::::::::::: \u2588\u2588::::::: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588: \u2588\u2588.... \u2588\u2588://\r\n// \u2588\u2588:::: \u2588\u2588: \u2588\u2588::::::: \u2588\u2588.... \u2588\u2588:: \u2588\u2588::::::: \u2588\u2588:::::::::::: \u2588\u2588::::::: \u2588\u2588.... \u2588\u2588: \u2588\u2588:::: \u2588\u2588://\r\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588: \u2588\u2588:::: \u2588\u2588: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588::::::: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588: \u2588\u2588:::: \u2588\u2588: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:://\r\n//..........................................................................................//\r\n//.......................................................................by Jr Casas........//\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n \r\n\r\n contract BlazzLab is ERC721Enumerable, ReentrancyGuard, Ownable {\r\n\r\n    uint256 public maxSupply = 3333;\r\n    uint256 public price = 0.01 ether;\r\n    uint256 public maxMint = 8;\r\n    uint256 public numTokensMinted;\r\n\r\n    string[10] private thirdNames = ['Finger', 'Bitten Finger', 'Zombie Finger', 'Zombie Bitten Finger', 'Eye', 'Denture', 'Denture Gold', 'Nipple', 'Zombie Nipple', 'Satoshi Hair'];\r\n    string[10] private thirdLayers = [\r\n        '<path fill=\"#FFF\" d=\"m20,13h2v1h-1v1h1v1h-2v-1h-1v-1h1z\"/><path fill=\"#E7C2B3\" d=\"m13,12h6v4h-6v-1h-1v-2h1zm1,1h-1v2h2v-2z\"/><path fill=\"#FFEDEB\" d=\"m13,13h2v2h-2z\"/>',\r\n        '<path fill=\"#E7C2B3\" d=\"m13,12h1v1h-1v2h2v-1h1v-1h1v-1h2v4h-6v-1h-1v-2h1z\"/><path fill=\"#FFEDEB\" d=\"m13,13h1v1h1v1h-2z\"/><path fill=\"#952A00\" d=\"m16,12h1v1h-1v1h-2v-1h2z\"/><path fill=\"#FFF\" d=\"m20,13h2v1h-1v1h1v1h-2v-1h-1v-1h1z\"/>',\r\n        '<path fill=\"#91A58E\" d=\"m13,13h2v2h-2z\"/><path fill=\"#FFF\" d=\"m20,13h2v1h-1v1h1v1h-2v-1h-1v-1h1z\"/><path fill=\"#416E4A\" d=\"m13,12h6v4h-6v-1h-1v-2h1zm1,1h-1v2h2v-2z\"/>',\r\n        '<path fill=\"#91A58E\" d=\"m13,13h1v1h1v1h-2z\"/><path fill=\"#416E4A\" d=\"m13,12h1v1h-1v2h2v-1h1v-1h1v-1h2v4h-6v-1h-1v-2h1z\"/><path fill=\"#FFF\" d=\"m20,13h2v1h-1v1h1v1h-2v-1h-1v-1h1z\"/><path fill=\"#952A00\" d=\"m16,12h1v1h-1v1h-2v-1h2z\"/>',\r\n        '<path fill=\"#E8EBE5\" d=\"m14,12h4v4h-4zm2,1h-1v2h2v-2z\"/><path fill=\"#000\" d=\"m16,13h1v2h-2v-1h1z\"/><path fill=\"#CDCCC7\" d=\"m18,12h1v4h-1v1h-4v-1h4z\"/><path fill=\"#FFF\" d=\"m14,11h4v1h-4v4h-1v-4h1zm1,2h1v1h-1z\"/>',\r\n        '<path fill=\"#FFF\" d=\"m12,15h1v1h1v1h-1v-1h-1zm8,0h1v1h-1v1h-1v-1h1zm-5,1h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#D5948B\" d=\"m12,13h2v1h5v-1h2v1h-1v1h-7v-1h-1z\"/><path fill=\"#CD6F6D\" d=\"m12,14h1v1h7v-1h1v1h-1v1h-7v-1h-1z\"/>',\r\n        '<path fill=\"#FFF\" d=\"m12,15h1v1h-1zm8,0h1v1h-1v1h-1v-1h1zm-5,1h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#CD6F6D\" d=\"m12,14h1v1h7v-1h1v1h-1v1h-7v-1h-1z\"/><path fill=\"#D5948B\" d=\"m12,13h2v1h5v-1h2v1h-1v1h-7v-1h-1z\"/><path fill=\"#e6d309\" d=\"m13,16h1v1h-1z\"/>',\r\n        '<path fill=\"#FCC4A6\" d=\"m15,12h3v1h1v3h-1v1h-3v-1h-1v-3h1zm1,1h-1v3h3v-3z\"/><path fill=\"#B14547\" d=\"m16,14h1v1h-1z\"/><path fill=\"#CC7E6A\" d=\"m17,13h1v3h-3v-1h2z\"/><path fill=\"#E7927C\" d=\"m15,13h2v1h-1v1h-1z\"/>',\r\n        '<path fill=\"#837853\" d=\"m17,13h1v3h-3v-1h2z\"/><path fill=\"#416E4A\" d=\"m15,12h3v1h1v3h-1v1h-3v-1h-1v-3h1zm1,1h-1v3h3v-3z\"/><path fill=\"#94454E\" d=\"m16,14h1v1h-1z\"/><path fill=\"#AE9569\" d=\"m15,13h2v1h-1v1h-1z\"/>',\r\n        '<path fill=\"#423F3D\" d=\"m16,16h1v1h-1v1h1v1h-1v-1h-1v-1h1z\"/><path fill=\"#272A2D\" d=\"m17,14h1v2h-1z\"/><path fill=\"#000\" d=\"m15,11h1v1h1v2h-1v-2h-1z\"/>'];\r\n    string[12] private fourthNames = ['Blue','Evaporated blue','Green','Evaporated green','Yellow','Evaporated yellow','Purple','Evaporated purple','Radioactive','Evaporated Radioactive','Regular','Evaporated regular'];\r\n    string[12] private fourthLayers = [\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#19546D\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#5FA7BE\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#195467\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#117E9C\" d=\"m12,5h8v1h1v1h1v1h1v15h-14v-15h1v-1h1v-1h1zm0,2h-1v1h1zm-1,2h-1v3h1zm10,2h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#19546D\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#5FA7BE\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#195467\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#117E9C\" d=\"m9,10h1v2h1v-2h12v13h-14zm12,1h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#145237\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#6dbf9b\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#275c49\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#22855a\" d=\"m12,5h8v1h1v1h1v1h1v15h-14v-15h1v-1h1v-1h1zm0,2h-1v1h1zm-1,2h-1v3h1zm10,2h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#145237\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#6dbf9b\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#275c49\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#22855a\" d=\"m9,10h1v2h1v-2h12v13h-14zm12,1h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#9c9114\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#ede69a\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#aba13a\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#d6c61e\" d=\"m12,5h8v1h1v1h1v1h1v15h-14v-15h1v-1h1v-1h1zm0,2h-1v1h1zm-1,2h-1v3h1zm10,2h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#9c9114\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#ede69a\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#aba13a\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#d6c61e\" d=\"m9,10h1v2h1v-2h12v13h-14zm12,1h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#611d46\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#f0c2de\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#613b52\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#db7db6\" d=\"m12,5h8v1h1v1h1v1h1v15h-14v-15h1v-1h1v-1h1zm0,2h-1v1h1zm-1,2h-1v3h1zm10,2h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#611d46\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#f0c2de\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#613b52\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#db7db6\" d=\"m9,10h1v2h1v-2h12v13h-14zm12,1h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#2a8a0c\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#87fa64\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#5aa343\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#3cff00\" d=\"m12,5h8v1h1v1h1v1h1v15h-14v-15h1v-1h1v-1h1zm0,2h-1v1h1zm-1,2h-1v3h1zm10,2h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#2a8a0c\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#87fa64\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#5aa343\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#3cff00\" d=\"m9,10h1v2h1v-2h12v13h-14zm12,1h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#629ba1\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#c4eef2\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#646d6e\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#a1e0e6\" d=\"m12,5h8v1h1v1h1v1h1v15h-14v-15h1v-1h1v-1h1zm0,2h-1v1h1zm-1,2h-1v3h1zm10,2h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />',\r\n        '<path fill=\"#FFF\" d=\"m11,7h1v1h-1zm-1,2h1v3h-1zm0,4h1v6h-1z\"/><path fill=\"#629ba1\" d=\"m21,17h1v1h-1zm-9,1h1v1h-1zm8,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#c4eef2\" d=\"m20,11h1v1h-1zm-2,7h1v1h-1zm-5,2h1v1h-1z\" fill-opacity=\"0.5\" /><path fill=\"#646d6e\" d=\"m12,4h8v1h1v1h1v1h1v1h1v15h-1v-15h-1v-1h-1v-1h-1v-1h-8v1h-1v1h-1v1h-1v15h-1v-15h1v-1h1v-1h1v-1h1z\"/><path fill=\"#a1e0e6\" d=\"m9,10h1v2h1v-2h12v13h-14zm12,1h-1v1h1zm-10,2h-1v6h1zm11,4h-1v1h1zm-9,1h-1v1h1zm6,0h-1v1h1zm-5,2h-1v1h1zm7,0h-1v1h1z\" fill-opacity=\"0.3\" />']; \r\n    string[10] private fifthNames = ['ESP','CRJ','GLL6','PQL','EYJ','TER','NF','JOR','AC','KAI'];\r\n    string[10] private fifthLayers = [\r\n        '<path fill=\"#e3aa1b\" d=\"m7,24h18v1h1v1h-6v-1h-9v1h-5v-1h1zm-1,3h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#565C53\" d=\"m11,25h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#949393\" d=\"m12,25h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/><path fill=\"#997314\" d=\"m6,26h20v2h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1z\"/>',\r\n        '<path fill=\"#315779\" d=\"m7,24h2v1h-2zm3,0h2v1h-2zm3,0h2v1h-2zm3,0h2v1h-2zm3,0h2v1h-2zm3,0h2v1h-2zm-16,2h20v2h-16v-1h-2v1h-2z\"/><path fill=\"#c22715\" d=\"m8,27h1v1h-1z\"/><path fill=\"#439C29\" d=\"m9,27h1v1h-1z\"/><path fill=\"#082B3E\" d=\"m9,24h1v1h2v-1h1v1h2v-1h1v1h2v-1h1v1h2v-1h1v1h2v-1h1v1h1v1h-20v-1h3z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/>',\r\n        '<path fill=\"#6e150b\" d=\"m6,25h20v3h-20v-1h1v-1h-1zm3,1h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1z\"/><path fill=\"#952A00\" d=\"m7,24h4v1h-4zm13,0h5v1h-5zm-14,2h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#3F3E40\" d=\"m12,24h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/><path fill=\"#949393\" d=\"m11,24h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/> ',\r\n        '<path fill=\"#8a7c11\" d=\"m8,24h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm-17,2h3v2h-1v-1h-1v1h-1zm6,0h6v2h-1v-1h-4v1h-1zm9,0h3v2h-1v-1h-1v1h-1z\"/><path fill=\"#d9c31c\" d=\"m7,24h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h2v3h-1v-2h-3v2h-3v-2h-6v2h-3v-2h-3v2h-1v-3h1zm1,3h1v1h-1zm6,0h4v1h-4zm9,0h1v1h-1z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/>',\r\n        '<path fill=\"#929491\" d=\"m7,24h18v1h1v1h-2v-1h-1v1h-2v-1h-1v1h-2v-1h-1v1h-2v-1h-1v1h-2v-1h-1v1h-2v-1h-1v1h-2v-1h1zm-1,3h20v1h-20z\"/><path fill=\"#4A4E4D\" d=\"m8,25h1v1h2v-1h1v1h2v-1h1v1h2v-1h1v1h2v-1h1v1h2v-1h1v1h2v1h-20v-1h2z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/>',\r\n        '<path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/><path fill=\"#5C6F41\" d=\"m7,24h18v1h1v3h-20v-3h1zm1,1h-1v2h1zm2,0h-1v2h1zm2,0h-1v2h1zm2,0h-1v2h1zm2,0h-1v2h2v-2zm3,0h-1v2h1zm2,0h-1v2h1zm2,0h-1v2h1zm2,0h-1v2h1z\"/><path fill=\"#3B4A2C\" d=\"m7,25h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h2v2h-2zm3,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1z\"/>',\r\n        '<path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/><path fill=\"#775e8a\" d=\"m7,25h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h2v1h-2zm3,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm-18,2h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h8v1h-8zm9,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#4b3859\" d=\"m7,24h18v1h1v2h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-8v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v-2h1zm1,1h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h2v-1zm3,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1zm2,0h-1v1h1z\"/>',\r\n        '<path fill=\"#9c6f00\" d=\"m8,24h1v2h1v-2h1v2h1v-2h1v2h1v-2h1v2h1v-2h1v2h1v-2h1v2h1v-2h1v2h1v-2h1v2h1v-2h1v2h1v1h-20v-2h1v1h1z\"/><path fill=\"#e6ba4e\" d=\"m11,25h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm-12,2h1v1h-1zm17,0h1v1h-1z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/><path fill=\"#cf9400\" d=\"m7,24h1v2h-1zm2,0h1v2h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,1h1v1h-1zm-19,2h1v1h-1zm2,0h16v1h-16zm17,0h1v1h-1z\"/>',\r\n        '<path fill=\"#2B5D6D\" d=\"m6,26h1v1h-1zm2,0h3v1h-3zm4,0h3v1h-3zm4,0h3v1h-3zm4,0h3v1h-3zm4,0h2v1h-2z\"/><path fill=\"#4a0700\" d=\"m6,25h20v1h-2v1h2v1h-20v-1h1v-1h-1zm3,1h-1v1h3v-1zm4,0h-1v1h3v-1zm4,0h-1v1h3v-1zm4,0h-1v1h3v-1z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/><path fill=\"#952A00\" d=\"m7,24h18v1h-18z\"/>',\r\n        '<path fill=\"#EDEADC\" d=\"m6,25h20v1h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1v-2h-1v2h-1z\"/><path fill=\"#000\" d=\"m7,23h18v1h1v1h1v4h-22v-4h1v-1h1zm1,1h-1v1h-1v3h20v-3h-1v-1z\"/><path fill=\"#C5C7AF\" d=\"m7,24h18v1h-18zm0,2h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1zm2,0h1v2h-1z\"/>']; \r\n    string[13] private sixthNames = ['Plug','LAN','Hand crank','One Button','Ring','Caution','Wind up','Buttons','Lever','Load indicator','Verified','Handle','Winder'];\r\n    string[13] private sixthLayers = [\r\n        '<path fill=\"#631811\" d=\"m24,12h1v1h1v3h-1v1h-1z\"/><path fill=\"#9c2217\" d=\"m27,25h1v3h-1z\"/><path fill=\"#000\" d=\"m26,14h2v1h1v2h-1v1h-1v1h1v1h1v4h1v2h-1v1h-1v-1h1v-2h-1v-4h-1v-1h-1v-1h1v-1h1v-2h-2z\"/> ',\r\n        '<path fill=\"#801e14\" d=\"m5,9h1v1h-1z\"/><path fill=\"#647377\" d=\"m5,10h1v8h-1z\"/><path fill=\"#4A4E4D\" d=\"m7,16h1v4h-1v-1h-1v-2h1z\"/> ',\r\n        '<path fill=\"#6E491E\" d=\"m2,17h2v1h-2z\"/><path fill=\"#000000\" d=\"m7,11h1v5h-1v-1h-1v-3h1z\"/><path fill=\"#647377\" d=\"m5,13h1v5h-2v-1h1z\"/>',\r\n        '<path fill=\"#e3a617\" d=\"m25,12h1v2h-1z\"/><path fill=\"#052B36\" d=\"m24,11h1v4h-1z\"/>',\r\n        '<path fill=\"#3A4446\" d=\"m6,20h2v1h-2zm4,0h1v1h-1zm3,0h1v1h-1zm3,0h1v1h-1zm3,0h1v1h-1zm3,0h1v1h-1zm2,0h2v1h-2z\"/><path fill=\"#5D7272\" d=\"m7,19h18v1h-1v1h1v1h-18v-1h1v-1h-1zm4,1h-1v1h1zm3,0h-1v1h1zm3,0h-1v1h1zm3,0h-1v1h1zm3,0h-1v1h1z\"/>',\r\n        '<path fill=\"#e3c817\" d=\"m7,16h5v4h-1v1h-1v1h-3zm3,1h-1v2h1zm0,3h-1v1h1z\"/><path fill=\"#000\" d=\"m9,17h1v2h-1zm0,3h1v1h-1z\"/><path fill=\"#EFA603\" d=\"m11,20h1v1h-1v1h-1v-1h1z\"/>',\r\n        '<path fill=\"#a13115\" d=\"m26,13h3v3h-1v1h1v3h-3v-3h-1v-1h1zm2,1h-1v1h1zm0,4h-1v1h1z\"/><path fill=\"#263238\" d=\"m24,14h1v5h-1z\"/>',\r\n        '<path fill=\"#ba200b\" d=\"m6,14h1v1h-1z\"/><path fill=\"#1f690f\" d=\"m6,16h1v1h-1z\"/><path fill=\"#263238\" d=\"m7,11h1v7h-1z\"/><path fill=\"#d9cf16\" d=\"m6,12h1v1h-1z\"/>',\r\n        '<path fill=\"#112326\" d=\"m24,14h1v7h-1z\"/><path fill=\"#8a2c19\" d=\"m27,14h2v2h-2z\"/><path fill=\"#3A4D51\" d=\"m26,16h1v1h-1v2h-1v-2h1z\"/>',\r\n        '<path fill=\"#26323A\" d=\"m11,19h10v3h-10zm2,1h-1v1h8v-1z\"/><path fill=\"#184831\" d=\"m17,20h3v1h-3z\"/><path fill=\"#56a81b\" d=\"m12,20h5v1h-5z\"/>',\r\n        '<path fill=\"#117E9C\" d=\"m19,17h6v5h-6zm5,1h-1v1h1zm-3,1h-1v1h1zm2,0h-1v1h1zm-1,1h-1v1h1z\"/><path fill=\"#FFF\" d=\"m23,18h1v1h-1v1h-1v1h-1v-1h-1v-1h1v1h1v-1h1z\"/>',\r\n        '<path fill=\"#3A4446\" d=\"m25,10h2v3h-1v-2h-1zm1,8h1v3h-2v-1h1z\"/><path fill=\"#102f3d\" d=\"m24,9h1v3h-1zm0,10h1v3h-1z\"/><path fill=\"#302919\" d=\"m25,13h3v5h-3z\"/>',\r\n        '<path fill=\"#3A4446\" d=\"m5,10h2v1h-2zm0,2h2v1h-2zm0,2h2v1h-2zm0,2h2v1h-2zm0,2h2v1h-2z\"/><path fill=\"#5A6C6C\" d=\"m5,11h2v1h-2zm0,2h2v1h-2zm0,2h2v1h-2zm0,2h2v1h-2z\"/><path fill=\"#700909\" d=\"m7,13h1v3h-1z\"/>'];       \r\n    string[11] private seventhNames = ['Button','Charge','Vernon','Broken','Weisz','Bamberg','Carroll','Kaufman','Clifton','Ascanio','None'];\r\n    string[11] private seventhLayers = [\r\n        '<path fill=\"#851515\" d=\"m15,2h2v1h-2z\"/><path fill=\"#51514D\" d=\"m12,4h8v1h-8z\"/><path fill=\"#34352B\" d=\"m14,3h4v1h-4z\"/>',\r\n        '<path fill=\"#7fbf24\" d=\"m11,4h4v1h-4z\"/><path fill=\"#2A3B42\" d=\"m10,3h12v1h1v1h-1v1h-12v-1h-1v-1h1zm2,1h-1v1h10v-1z\"/><path fill=\"#E23E36\" d=\"m20,4h1v1h-1z\"/><path fill=\"#FFB31A\" d=\"m18,4h2v1h-2z\"/><path fill=\"#d6d12d\" d=\"m15,4h3v1h-3z\"/>',\r\n        '<path fill=\"#455A60\" d=\"m9,4h1v1h-1zm13,0h1v1h-1z\"/><path fill=\"#364F38\" d=\"m10,3h12v1h-12zm0,2h12v1h-12z\"/><path fill=\"#e8a41c\" d=\"m8,4h1v1h-1zm15,0h1v1h-1z\"/><path fill=\"#1C3331\" d=\"m10,4h12v1h-12z\"/>',\r\n        '<path fill=\"#FFF\" d=\"m19,5h1v1h-1v2h1v1h1v1h-1v-1h-1v-1h-1v1h-1v1h-1v1h-1v-1h1v-1h1v-1h1v-2h1z\"/>',\r\n        '<path fill=\"#916c20\" d=\"m12,3h8v1h-8z\"/><path fill=\"#3F3E40\" d=\"m11,5h10v1h-10z\"/><path fill=\"#45595D\" d=\"m10,4h12v1h-12zm0,2h12v1h-12z\"/>',\r\n        '<path fill=\"#E23E36\" d=\"m11,3h1v1h-1z\"/><path fill=\"#45595D\" d=\"m10,3h1v1h-1zm3,0h9v1h-9zm-5,2h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1zm2,0h1v1h-1z\"/><path fill=\"#439C29\" d=\"m12,3h1v1h-1z\"/><path fill=\"#2B3B41\" d=\"m9,4h14v1h1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1z\"/>',\r\n        '<path fill=\"#2A3B42\" d=\"m15,2h2v1h2v1h1v-1h3v3h-3v-1h-3v1h-2v-1h-3v1h-3v-3h3v1h1v-1h2zm-4,2h-1v1h1zm11,0h-1v1h1z\"/>',\r\n        '<path fill=\"#313335\" d=\"m12,4h8v1h-8z\"/><path fill=\"#99242D\" d=\"m11,3h10v1h-10z\"/><path fill=\"#000\" d=\"m11,5h10v1h-10z\"/>',\r\n        '<path fill=\"#FFF\" d=\"m15,3h2v1h-2z\"/><path fill=\"#99242D\" d=\"m12,2h8v1h-8z\"/><path fill=\"#252B20\" d=\"m10,6h12v1h-12z\"/><path fill=\"#4B4C3C\" d=\"m9,4h14v2h-14z\"/>',\r\n        '<path fill=\"#117E9C\" d=\"m9,6h14v1h-14z\"/><path fill=\"#FFCC01\" d=\"m19,4h1v1h-1z\"/><path fill=\"#2D545A\" d=\"m18,3h3v3h-3zm2,1h-1v1h1z\"/><path fill=\"#082B3E\" d=\"m10,3h8v3h-9v1h-1v-2h1v-1h1zm11,0h1v1h1v1h1v2h-1v-1h-2z\"/>',\r\n        ''];\r\n\r\n  struct BlazzObject {\r\n        uint256 layerThree;\r\n        uint256 layerFour;\r\n        uint256 layerFive;\r\n        uint256 layerSix;\r\n        uint256 layerSeven;\r\n    }\r\n\r\nfunction randomBlazzLab(uint256 tokenId) internal pure returns (BlazzObject memory) {\r\n        \r\n        BlazzObject memory blazzLab;\r\n\r\n        blazzLab.layerThree = getLayerThree(tokenId);\r\n        blazzLab.layerFour = getLayerFour(tokenId);\r\n        blazzLab.layerFive = getLayerFive(tokenId);\r\n        blazzLab.layerSix = getLayerSix(tokenId);\r\n        blazzLab.layerSeven = getLayerSeven(tokenId);\r\n\r\n        return blazzLab;\r\n    }\r\n\r\nfunction getTraits(BlazzObject memory blazzLab) internal view returns (string memory) {\r\n        \r\n        string[17] memory parts;\r\n        \r\n        parts[0] = ', \"attributes\": [{\"trait_type\": \"Souvenir\",\"value\": \"';\r\n        parts[1] = thirdNames[blazzLab.layerThree]; \r\n        parts[2] = '\"}, {\"trait_type\": \"Jar\",\"value\": \"';\r\n        parts[3] = fourthNames[blazzLab.layerFour];\r\n        parts[4] = '\"}, {\"trait_type\": \"Base\",\"value\": \"';\r\n        parts[5] = fifthNames[blazzLab.layerFive];\r\n        parts[6] = '\"}, {\"trait_type\": \"Accessory\",\"value\": \"';\r\n        parts[7] = sixthNames[blazzLab.layerSix];\r\n        parts[8] = '\"}, {\"trait_type\": \"Top\",\"value\": \"';\r\n        parts[9] = seventhNames[blazzLab.layerSeven];\r\n        parts[10] = '\"}], ';\r\n        \r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2]));\r\n                      output = string(abi.encodePacked(output, parts[3], parts[4], parts[5], parts[6], parts[7], parts[8], parts[9], parts[10]));\r\n        return output;\r\n    }    \r\n\r\nfunction random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n\r\nfunction getLayerThree(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER THREE\", toString(tokenId))));\r\n\r\n        uint256 rn3 = rand % 275;\r\n        uint256 l3 = 0;\r\n\r\n        if (rn3 >= 40 && rn3 < 75) { l3 = 1; }\r\n        if (rn3 >= 75 && rn3 < 110) { l3 = 2; }\r\n        if (rn3 >= 110 && rn3 < 140) { l3 = 3; }\r\n        if (rn3 >= 140 && rn3 < 180) { l3 = 4; }\r\n        if (rn3 >= 180 && rn3 < 220) { l3 = 5; }\r\n        if (rn3 >= 220 && rn3 < 245) { l3 = 6; }\r\n        if (rn3 >= 245 && rn3 < 260) { l3 = 7; }\r\n        if (rn3 >= 260 && rn3 < 270) { l3 = 8; }\r\n        if (rn3 >= 270) { l3 = 9; }\r\n        \r\n        return l3;\r\n    }\r\n\r\n    function getLayerFour(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER FOUR\", toString(tokenId))));\r\n\r\n        uint256 rn4 = rand % 310;\r\n        uint256 l4 = 0;\r\n\r\n        if (rn4 >= 35 && rn4 < 65) { l4 = 1; }\r\n        if (rn4 >= 65 && rn4 < 100) { l4 = 2; }\r\n        if (rn4 >= 100 && rn4 < 130) { l4 = 3; }\r\n        if (rn4 >= 130 && rn4 < 155) { l4 = 4; }\r\n        if (rn4 >= 155 && rn4 < 175) { l4 = 5; }\r\n        if (rn4 >= 175 && rn4 < 200) { l4 = 6; }\r\n        if (rn4 >= 200 && rn4 < 220) { l4 = 7; }\r\n        if (rn4 >= 220 && rn4 < 235) { l4 = 8; }\r\n        if (rn4 >= 235 && rn4 < 245) { l4 = 9; }\r\n        if (rn4 >= 245 && rn4 < 280) { l4 = 10; }\r\n        if (rn4 >= 280) { l4 = 11; }\r\n        \r\n        return l4;\r\n    }\r\n\r\n   function getLayerFive(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER FIVE\", toString(tokenId))));\r\n\r\n        uint256 rn5 = rand % 165;\r\n        uint256 l5 = 0;\r\n\r\n        if (rn5 >= 15 && rn5 < 27) { l5 = 1; }\r\n        if (rn5 >= 27 && rn5 < 40) { l5 = 2; }\r\n        if (rn5 >= 40 && rn5 < 60) { l5 = 3; }\r\n        if (rn5 >= 60 && rn5 < 80) { l5 = 4; }\r\n        if (rn5 >= 80 && rn5 < 100) { l5 = 5; }\r\n        if (rn5 >= 100 && rn5 < 120) { l5 = 6; }\r\n        if (rn5 >= 120 && rn5 < 140) { l5 = 7; }\r\n        if (rn5 >= 140 && rn5 < 155) { l5 = 8; }\r\n        if (rn5 >= 155) { l5 = 9; }\r\n        \r\n        \r\n        return l5;\r\n    }\r\n\r\n   function getLayerSix(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER SIX\", toString(tokenId))));\r\n\r\n        uint256 rn6 = rand % 300;\r\n        uint256 l6 = 0;\r\n\r\n        if (rn6 >= 25 && rn6 < 55) { l6 = 1; }\r\n        if (rn6 >= 55 && rn6 < 80) { l6 = 2; }\r\n        if (rn6 >= 80 && rn6 < 110) { l6 = 3; }\r\n        if (rn6 >= 110 && rn6 < 130) { l6 = 4; }\r\n        if (rn6 >= 130 && rn6 < 145) { l6 = 5; }\r\n        if (rn6 >= 145 && rn6 < 160) { l6 = 6; }\r\n        if (rn6 >= 160 && rn6 < 190) { l6 = 7; }\r\n        if (rn6 >= 190 && rn6 < 215) { l6 = 8; }\r\n        if (rn6 >= 215 && rn6 < 245) { l6 = 9; }\r\n        if (rn6 >= 245 && rn6 < 255) { l6 = 10; }\r\n        if (rn6 >= 255 && rn6 < 280) { l6 = 11; }\r\n        if (rn6 >= 280) { l6 = 12; }\r\n        \r\n        return l6;\r\n    }\r\n\r\n function getLayerSeven(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER SEVEN\", toString(tokenId))));\r\n\r\n        uint256 rn7 = rand % 220;\r\n        uint256 l7 = 0;\r\n\r\n        if (rn7 >= 30 && rn7 < 60) { l7 = 1; }\r\n        if (rn7 >= 60 && rn7 < 90) { l7 = 2; }\r\n        if (rn7 >= 90 && rn7 < 110) { l7 = 3; }\r\n        if (rn7 >= 110 && rn7 < 130) { l7 = 4; }\r\n        if (rn7 >= 130 && rn7 < 150) { l7 = 5; }\r\n        if (rn7 >= 150 && rn7 < 165) { l7 = 6; }\r\n         if (rn7 >= 165 && rn7 < 180) { l7 = 7; }\r\n        if (rn7 >= 180 && rn7 < 195) { l7 = 8; }\r\n        if (rn7 >= 195 && rn7 < 205) { l7 = 9; }\r\n        if (rn7 >= 205) { l7 = 10; }\r\n        \r\n        return l7;\r\n    }\r\n\r\n   function getSVG(BlazzObject memory blazzLab) internal view returns (string memory) {\r\n        string[7] memory parts;\r\n\r\n        parts[0] = '<svg id=\"x\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 32 32\"><path fill=\"#94b5ae\" d=\"m0,0h32v32h-32z\"/>';\r\n        parts[1] = thirdLayers[blazzLab.layerThree];\r\n        parts[2] = fourthLayers[blazzLab.layerFour];\r\n        parts[3] = fifthLayers[blazzLab.layerFive];\r\n        parts[4] = sixthLayers[blazzLab.layerSix];\r\n        parts[5] = seventhLayers[blazzLab.layerSeven];\r\n        parts[6] = '<style>#x{shape-rendering: crispedges;}</style></svg>';\r\n\r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]));\r\n\r\n        return output;\r\n    }\r\n\r\n   function tokenURI(uint256 tokenId) override public view returns (string memory) {\r\n        BlazzObject memory blazzLab = randomBlazzLab(tokenId);\r\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Blazz Lab Exp.No #', toString(tokenId), '\", \"description\": \"Blazz Lab is a laboratory full of experiments done by Dr Blazz, an illustrator alter ego. These experiments are completely on-chain and were randomly generated at mint.\"', getTraits(blazzLab), '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(getSVG(blazzLab))), '\"}'))));\r\n        json = string(abi.encodePacked('data:application/json;base64,', json));\r\n        return json;\r\n    }\r\n\r\n    function mint(address destination, uint256 amountOfTokens) private {\r\n        require(totalSupply() < maxSupply, \"All tokens have been minted\");\r\n        require(totalSupply() + amountOfTokens <= maxSupply, \"Minting would exceed max supply\");\r\n        require(amountOfTokens <= maxMint, \"Cannot purchase this many tokens in a transaction\");\r\n        require(amountOfTokens > 0, \"Must mint at least one token\");\r\n        require(price * amountOfTokens == msg.value, \"ETH amount is incorrect\");\r\n\r\n        for (uint256 i = 0; i < amountOfTokens; i++) {\r\n            uint256 tokenId = numTokensMinted + 1;\r\n            _safeMint(destination, tokenId);\r\n            numTokensMinted += 1;\r\n        }\r\n    }\r\n\r\n    function mintForSelf(uint256 amountOfTokens) public payable virtual {\r\n        mint(_msgSender(),amountOfTokens);\r\n    }\r\n\r\n    function mintForFriend(address walletAddress, uint256 amountOfTokens) public payable virtual {\r\n        mint(walletAddress,amountOfTokens);\r\n    }\r\n\r\n    function setPrice(uint256 newPrice) public onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function setMaxMint(uint256 newMaxMint) public onlyOwner {\r\n        maxMint = newMaxMint;\r\n    }\r\n\r\n    function withdrawAll() public payable onlyOwner {\r\n        require(payable(_msgSender()).send(address(this).balance));\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    constructor() ERC721(\"Blazz Lab\", \"BLAZZ\") Ownable() {}\r\n}\r\n\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintForFriend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintForSelf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMint\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BlazzLab", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3966d3680bbcf6a9bbcd3c7e3e2b0c790043383a9eddf720d3ed44ca52e14a9e"}]}