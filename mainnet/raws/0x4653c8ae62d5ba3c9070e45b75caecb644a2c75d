{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/interfaces/IStrategy.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IStrategy {\r\n    function deposit() external;\r\n\r\n    function withdraw(address _to, address _asset) external;\r\n\r\n    function withdraw(address _to, uint256 _amount) external;\r\n\r\n    function withdrawAll() external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IFungibleAssetVaultForDAO.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IFungibleAssetVaultForDAO {\r\n    function deposit(uint256 amount) external payable;\r\n\r\n    function borrow(uint256 amount) external;\r\n\r\n    function getCreditLimit(uint256 amount) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IBaseRewardPool.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBaseRewardPool {\r\n    function withdrawAndUnwrap(uint256 amount, bool claim)\r\n        external\r\n        returns (bool);\r\n\r\n    function withdrawAllAndUnwrap(bool claim) external;\r\n\r\n    function getReward(address _account, bool _claimExtras)\r\n        external\r\n        returns (bool);\r\n\r\n    function donate(uint256 _amount) external returns(bool);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function extraRewards(uint256) external view returns (address);\r\n\r\n    function extraRewardsLength() external view returns (uint256);\r\n\r\n    function rewardToken() external view returns (address);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IBooster.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBooster {\r\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\r\n    function earmarkRewards(uint256 _pid) external returns(bool);\r\n}\r\n// File: contracts/interfaces/I3CRVZap.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface I3CRVZap {\r\n    function add_liquidity(address _pool, uint256[4] calldata _deposit_amounts, uint256 _min_mint_amount) external returns (uint256);\r\n}\r\n// File: contracts/interfaces/ISwapRouter.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface ISwapRouter {\r\n  function uniswapV3SwapCallback(\r\n    int256 amount0Delta,\r\n    int256 amount1Delta,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  struct ExactInputParams {\r\n    bytes path;\r\n    address recipient;\r\n    uint256 deadline;\r\n    uint256 amountIn;\r\n    uint256 amountOutMinimum;\r\n  }\r\n\r\n  function exactInput(ExactInputParams calldata params)\r\n    external\r\n    returns (uint256 amountOut);\r\n\r\n  function quoteExactInput(bytes calldata path, uint256 amountIn)\r\n    external\r\n    returns (uint256 amountOut);\r\n}\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/ICurve.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface ICurve is IERC20 {\r\n    function balances(uint256 index) external view returns (uint256);\r\n    function exchange(uint256 i, uint256 j, uint256 _dx, uint256 _min_dy) external payable returns (uint256);\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/vaults/erc20/strategies/StrategyPUSDConvex.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title JPEG'd PUSD Convex autocompounding strategy\r\n/// @notice This strategy autocompounds Convex rewards from the PUSD/USDC/USDT/DAI Curve pool.\r\n/// @dev The strategy deposits either USDC or PUSD in the Curve pool depending on which one has lower liquidity.\r\n/// The strategy sells reward tokens for USDC. If the pool has less PUSD than USDC, this contract uses the\r\n/// USDC {FungibleAssetVaultForDAO} to mint PUSD using USDC as collateral\r\ncontract StrategyPUSDConvex is AccessControl, IStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for ICurve;\r\n\r\n    event Harvested(uint256 wantEarned);\r\n\r\n    struct Rate {\r\n        uint128 numerator;\r\n        uint128 denominator;\r\n    }\r\n\r\n    /// @param booster Convex Booster's address\r\n    /// @param baseRewardPool Convex BaseRewardPool's address\r\n    /// @param pid The Convex pool id for PUSD/3CRV LP tokens\r\n    struct ConvexConfig {\r\n        IBooster booster;\r\n        IBaseRewardPool baseRewardPool;\r\n        uint256 pid;\r\n    }\r\n\r\n    /// @param zap The 3CRV zap address\r\n    /// @param crv3Index The USDC token index in curve's pool\r\n    /// @param usdcIndex The USDC token index in curve's pool\r\n    /// @param pusdIndex The PUSD token index in curve's pool\r\n    struct ZapConfig {\r\n        I3CRVZap zap;\r\n        uint256 crv3Index;\r\n        uint256 usdcIndex;\r\n        uint256 pusdIndex;\r\n    }\r\n\r\n    /// @param lp The curve LP token\r\n    /// @param ethIndex The eth index in the curve LP pool\r\n    struct CurveSwapConfig {\r\n        ICurve lp;\r\n        uint256 ethIndex;\r\n    }\r\n\r\n    /// @param vault The strategy's vault\r\n    /// @param usdcVault The JPEG'd USDC {FungibleAssetVaultForDAO} address\r\n    struct StrategyConfig {\r\n        address vault;\r\n        IFungibleAssetVaultForDAO usdcVault;\r\n    }\r\n\r\n    struct StrategyTokens {\r\n        ICurve want;\r\n        IERC20 pusd;\r\n        IERC20 weth;\r\n        IERC20 usdc;\r\n        IERC20 cvx;\r\n        IERC20 crv;\r\n    }\r\n\r\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\"STRATEGIST_ROLE\");\r\n\r\n    /// @notice The PUSD/USDC/USDT/DAI Curve LP token\r\n    StrategyTokens public strategyTokens;\r\n\r\n    ISwapRouter public immutable v3Router;\r\n\r\n    address public feeRecipient;\r\n\r\n    CurveSwapConfig public cvxEth;\r\n    CurveSwapConfig public crvEth;\r\n\r\n    ZapConfig public zapConfig;\r\n    ConvexConfig public convexConfig;\r\n    StrategyConfig public strategyConfig;\r\n\r\n    /// @notice The performance fee to be sent to the DAO/strategists\r\n    Rate public performanceFee;\r\n\r\n    /// @notice lifetime strategy earnings denominated in `want` token\r\n    uint256 public earned;\r\n\r\n    /// @param _strategyTokens tokens relevant to this strategy\r\n    /// @param _v3Router The Uniswap V3 router\r\n    /// @param _feeAddress The fee recipient address\r\n    /// @param _cvxEth See {CurveSwapConfig}\r\n    /// @param _crvEth See {CurveSwapConfig}\r\n    /// @param _zapConfig See {ZapConfig} struct\r\n    /// @param _convexConfig See {ConvexConfig} struct\r\n    /// @param _strategyConfig See {StrategyConfig} struct\r\n    /// @param _performanceFee The rate of USDC to be sent to the DAO/strategists\r\n    constructor(\r\n        StrategyTokens memory _strategyTokens,\r\n        address _v3Router,\r\n        address _feeAddress,\r\n        CurveSwapConfig memory _cvxEth,\r\n        CurveSwapConfig memory _crvEth,\r\n        ZapConfig memory _zapConfig,\r\n        ConvexConfig memory _convexConfig,\r\n        StrategyConfig memory _strategyConfig,\r\n        Rate memory _performanceFee\r\n    ) {\r\n        require(address(_strategyTokens.want) != address(0), \"INVALID_WANT\");\r\n        require(address(_strategyTokens.pusd) != address(0), \"INVALID_PUSD\");\r\n        require(address(_strategyTokens.weth) != address(0), \"INVALID_WETH\");\r\n        require(address(_strategyTokens.usdc) != address(0), \"INVALID_USDC\");\r\n\r\n        require(address(_strategyTokens.cvx) != address(0), \"INVALID_CVX\");\r\n        require(address(_strategyTokens.crv) != address(0), \"INVALID_CRV\");\r\n\r\n        require(_v3Router != address(0), \"INVALID_UNISWAP_V3\");\r\n\r\n        require(address(_cvxEth.lp) != address(0), \"INVALID_CVXETH_LP\");\r\n        require(address(_crvEth.lp) != address(0), \"INVALID_CRVETH_LP\");\r\n        require(_cvxEth.ethIndex < 2, \"INVALID_ETH_INDEX\");\r\n        require(_crvEth.ethIndex < 2, \"INVALID_ETH_INDEX\");\r\n\r\n        require(address(_zapConfig.zap) != address(0), \"INVALID_3CRV_ZAP\");\r\n        require(\r\n            _zapConfig.pusdIndex != _zapConfig.crv3Index,\r\n            \"INVALID_CURVE_INDEXES\"\r\n        );\r\n        require(_zapConfig.pusdIndex < 2, \"INVALID_PUSD_CURVE_INDEX\");\r\n        require(_zapConfig.crv3Index < 2, \"INVALID_3CRV_CURVE_INDEX\");\r\n        require(_zapConfig.usdcIndex < 4, \"INVALID_USDC_CURVE_INDEX\");\r\n\r\n        require(\r\n            address(_convexConfig.booster) != address(0),\r\n            \"INVALID_CONVEX_BOOSTER\"\r\n        );\r\n        require(\r\n            address(_convexConfig.baseRewardPool) != address(0),\r\n            \"INVALID_CONVEX_BASE_REWARD_POOL\"\r\n        );\r\n        require(address(_strategyConfig.vault) != address(0), \"INVALID_VAULT\");\r\n        require(\r\n            address(_strategyConfig.usdcVault) != address(0),\r\n            \"INVALID_USDC_VAULT\"\r\n        );\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        setFeeRecipient(_feeAddress);\r\n        setPerformanceFee(_performanceFee);\r\n\r\n        strategyTokens = _strategyTokens;\r\n\r\n        feeRecipient = _feeAddress;\r\n\r\n        cvxEth = _cvxEth;\r\n        crvEth = _crvEth;\r\n\r\n        v3Router = ISwapRouter(_v3Router);\r\n\r\n        zapConfig = _zapConfig;\r\n        convexConfig = _convexConfig;\r\n        strategyConfig = _strategyConfig;\r\n\r\n        _strategyTokens.want.safeApprove(\r\n            address(_convexConfig.booster),\r\n            type(uint256).max\r\n        );\r\n        _strategyTokens.cvx.safeApprove(address(_cvxEth.lp), type(uint256).max);\r\n        _strategyTokens.crv.safeApprove(address(_crvEth.lp), type(uint256).max);\r\n        _strategyTokens.weth.safeApprove(address(_v3Router), type(uint256).max);\r\n        _strategyTokens.usdc.safeApprove(\r\n            address(_strategyConfig.usdcVault),\r\n            type(uint256).max\r\n        );\r\n        _strategyTokens.usdc.safeApprove(\r\n            address(_zapConfig.zap),\r\n            type(uint256).max\r\n        );\r\n        _strategyTokens.pusd.safeApprove(\r\n            address(_zapConfig.zap),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    modifier onlyVault() {\r\n        require(msg.sender == address(strategyConfig.vault), \"NOT_VAULT\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Allows the DAO to set the performance fee\r\n    /// @param _performanceFee The new performance fee\r\n    function setPerformanceFee(Rate memory _performanceFee)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _performanceFee.denominator != 0 &&\r\n                _performanceFee.denominator >= _performanceFee.numerator,\r\n            \"INVALID_RATE\"\r\n        );\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    /// @notice Allows the DAO to set the USDC vault\r\n    /// @param _vault The new USDC vault\r\n    function setUSDCVault(address _vault)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_vault != address(0), \"INVALID_USDC_VAULT\");\r\n        strategyConfig.usdcVault = IFungibleAssetVaultForDAO(_vault);\r\n    }\r\n\r\n    function setFeeRecipient(address _newRecipient)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_newRecipient != address(0), \"INVALID_FEE_RECIPIENT\");\r\n\r\n        feeRecipient = _newRecipient;\r\n    }\r\n\r\n    /// @return The amount of `want` tokens held by this contract\r\n    function heldAssets() public view returns (uint256) {\r\n        return strategyTokens.want.balanceOf(address(this));\r\n    }\r\n\r\n    /// @return The amount of `want` tokens deposited in the Convex pool by this contract\r\n    function depositedAssets() public view returns (uint256) {\r\n        return convexConfig.baseRewardPool.balanceOf(address(this));\r\n    }\r\n\r\n    /// @return The total amount of `want` tokens this contract manages (held + deposited)\r\n    function totalAssets() external view override returns (uint256) {\r\n        return heldAssets() + depositedAssets();\r\n    }\r\n\r\n    /// @notice Allows anyone to deposit the total amount of `want` tokens in this contract into Convex\r\n    function deposit() public override {\r\n        ConvexConfig memory convex = convexConfig;\r\n        convex.booster.depositAll(convex.pid, true);\r\n    }\r\n\r\n    /// @notice Controller only function that allows to withdraw non-strategy tokens (e.g tokens sent accidentally).\r\n    /// CVX and CRV can be withdrawn with this function.\r\n    function withdraw(address _to, address _asset)\r\n        external\r\n        override\r\n        onlyRole(STRATEGIST_ROLE)\r\n    {\r\n        require(_to != address(0), \"INVALID_ADDRESS\");\r\n        require(address(strategyTokens.want) != _asset, \"want\");\r\n        require(address(strategyTokens.pusd) != _asset, \"pusd\");\r\n        require(address(strategyTokens.usdc) != _asset, \"usdc\");\r\n        require(address(strategyTokens.weth) != _asset, \"weth\");\r\n\r\n        uint256 balance = IERC20(_asset).balanceOf(address(this));\r\n        IERC20(_asset).safeTransfer(_to, balance);\r\n    }\r\n\r\n    /// @notice Allows the controller to withdraw `want` tokens. Normally used with a vault withdrawal\r\n    /// @param _to The address to send the tokens to\r\n    /// @param _amount The amount of `want` tokens to withdraw\r\n    function withdraw(address _to, uint256 _amount)\r\n        external\r\n        override\r\n        onlyVault\r\n    {\r\n        ICurve _want = strategyTokens.want;\r\n\r\n        uint256 balance = _want.balanceOf(address(this));\r\n        //if the contract doesn't have enough want, withdraw from Convex\r\n        if (balance < _amount) {\r\n            unchecked {\r\n                convexConfig.baseRewardPool.withdrawAndUnwrap(\r\n                    _amount - balance,\r\n                    false\r\n                );\r\n            }\r\n        }\r\n\r\n        _want.safeTransfer(_to, _amount);\r\n    }\r\n\r\n    /// @notice Allows the controller to withdraw all `want` tokens. Normally used when migrating strategies\r\n    function withdrawAll() external override onlyVault {\r\n        ICurve _want = strategyTokens.want;\r\n\r\n        convexConfig.baseRewardPool.withdrawAllAndUnwrap(true);\r\n\r\n        uint256 balance = _want.balanceOf(address(this));\r\n        _want.safeTransfer(msg.sender, balance);\r\n    }\r\n\r\n    /// @notice Allows members of the `STRATEGIST_ROLE` to compound Convex rewards into Curve\r\n    /// @param minOutCurve The minimum amount of `want` tokens to receive\r\n    function harvest(uint256 minOutCurve) external onlyRole(STRATEGIST_ROLE) {\r\n        convexConfig.baseRewardPool.getReward(address(this), true);\r\n\r\n        IERC20 _usdc = strategyTokens.usdc;\r\n        //Prevent `Stack too deep` errors\r\n        {\r\n            uint256 cvxBalance = strategyTokens.cvx.balanceOf(address(this));\r\n            if (cvxBalance > 0) {\r\n                CurveSwapConfig memory _cvxEth = cvxEth;\r\n                //minOut is not needed here, we already have it on the Curve deposit\r\n                _cvxEth.lp.exchange(\r\n                    1 - _cvxEth.ethIndex,\r\n                    _cvxEth.ethIndex,\r\n                    cvxBalance,\r\n                    0\r\n                );\r\n            }\r\n\r\n            uint256 crvBalance = strategyTokens.crv.balanceOf(address(this));\r\n            if (crvBalance > 0) {\r\n                CurveSwapConfig memory _crvEth = crvEth;\r\n                //minOut is not needed here, we already have it on the Curve deposit\r\n                _crvEth.lp.exchange(\r\n                    1 - _crvEth.ethIndex,\r\n                    _crvEth.ethIndex,\r\n                    crvBalance,\r\n                    0\r\n                );\r\n            }\r\n\r\n            IERC20 _weth = strategyTokens.weth;\r\n            uint256 wethBalance = _weth.balanceOf(address(this));\r\n            require(wethBalance != 0, \"NOOP\");\r\n\r\n            //minOut is not needed here, we already have it on the Curve deposit\r\n            ISwapRouter.ExactInputParams memory params = ISwapRouter\r\n                .ExactInputParams(\r\n                    abi.encodePacked(_weth, uint24(500), _usdc),\r\n                    address(this),\r\n                    block.timestamp,\r\n                    wethBalance,\r\n                    0\r\n                );\r\n\r\n            v3Router.exactInput(params);\r\n        }\r\n\r\n        StrategyConfig memory strategy = strategyConfig;\r\n        ZapConfig memory zap = zapConfig;\r\n\r\n        uint256 usdcBalance = _usdc.balanceOf(address(this));\r\n\r\n        //take the performance fee\r\n        uint256 fee = (usdcBalance * performanceFee.numerator) /\r\n            performanceFee.denominator;\r\n        _usdc.safeTransfer(feeRecipient, fee);\r\n        unchecked {\r\n            usdcBalance -= fee;\r\n        }\r\n\r\n        ICurve _want = strategyTokens.want;\r\n\r\n        uint256 pusdCurveBalance = _want.balances(zap.pusdIndex);\r\n        uint256 crv3Balance = _want.balances(zap.crv3Index);\r\n\r\n        //The curve pool has 4 tokens, we are doing a single asset deposit with either USDC or PUSD\r\n        uint256[4] memory liquidityAmounts = [uint256(0), 0, 0, 0];\r\n        if (crv3Balance > pusdCurveBalance) {\r\n            //if there's more USDC than PUSD in the pool, use USDC as collateral to mint PUSD\r\n            //and deposit it into the Curve pool\r\n            strategy.usdcVault.deposit(usdcBalance);\r\n\r\n            //check the vault's credit limit, it should be 1:1 for USDC\r\n            uint256 toBorrow = strategy.usdcVault.getCreditLimit(usdcBalance);\r\n\r\n            strategy.usdcVault.borrow(toBorrow);\r\n            liquidityAmounts[zap.pusdIndex] = toBorrow;\r\n        } else {\r\n            //if there's more PUSD than USDC in the pool, deposit USDC\r\n            liquidityAmounts[zap.usdcIndex] = usdcBalance;\r\n        }\r\n\r\n        zap.zap.add_liquidity(address(_want), liquidityAmounts, minOutCurve);\r\n\r\n        uint256 wantBalance = heldAssets();\r\n\r\n        deposit();\r\n\r\n        earned += wantBalance;\r\n        emit Harvested(wantBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract ICurve\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pusd\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"cvx\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"crv\",\"type\":\"address\"}],\"internalType\":\"struct StrategyPUSDConvex.StrategyTokens\",\"name\":\"_strategyTokens\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_v3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract ICurve\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyPUSDConvex.CurveSwapConfig\",\"name\":\"_cvxEth\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ICurve\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyPUSDConvex.CurveSwapConfig\",\"name\":\"_crvEth\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract I3CRVZap\",\"name\":\"zap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crv3Index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pusdIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyPUSDConvex.ZapConfig\",\"name\":\"_zapConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IBooster\",\"name\":\"booster\",\"type\":\"address\"},{\"internalType\":\"contract IBaseRewardPool\",\"name\":\"baseRewardPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyPUSDConvex.ConvexConfig\",\"name\":\"_convexConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IFungibleAssetVaultForDAO\",\"name\":\"usdcVault\",\"type\":\"address\"}],\"internalType\":\"struct StrategyPUSDConvex.StrategyConfig\",\"name\":\"_strategyConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct StrategyPUSDConvex.Rate\",\"name\":\"_performanceFee\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantEarned\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexConfig\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"booster\",\"type\":\"address\"},{\"internalType\":\"contract IBaseRewardPool\",\"name\":\"baseRewardPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvEth\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxEth\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOutCurve\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heldAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct StrategyPUSDConvex.Rate\",\"name\":\"_performanceFee\",\"type\":\"tuple\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setUSDCVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IFungibleAssetVaultForDAO\",\"name\":\"usdcVault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyTokens\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pusd\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"cvx\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"crv\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3Router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zapConfig\",\"outputs\":[{\"internalType\":\"contract I3CRVZap\",\"name\":\"zap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crv3Index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pusdIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrategyPUSDConvex", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000008ee017541375f6bcd802ba119bddc94dad6911a1000000000000000000000000466a756e9a7401b5e2444a3fcb3c2c12fbea0a54000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000051c2cef9efa48e08557a361b52db34061c025a1b000000000000000000000000b576491f1e6e5e62f1d8f26062ee822b40b0e0d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000008301ae4fc9c624d1d396cbdaa1ed877821d7c5110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a79828df1850e8a3a3064576f380d90aecdd3359000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f403c135812408bfbe8713b5a23a04b3d48aae3100000000000000000000000083a3ce160915675f5bc7cc3cfda5f4cebc7b7a5a000000000000000000000000000000000000000000000000000000000000005b000000000000000000000000f6cbf5e56a8575797069c7a7fbed218adf17e3b2000000000000000000000000fd110cf7985f6b7cab4dc97df1932495cada9d0800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1f62f7c00fb5b5e2b9153bd5075ee36e2c2812f10a516a47a5c47e037c23ab8"}]}