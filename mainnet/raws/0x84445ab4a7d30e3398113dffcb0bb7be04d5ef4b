{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n                                                                    \r\n                                                                    \r\n              .g8\"\"\"bgd                    `7MM\"\"\"YMM               \r\n            .dP'     `M                      MM    `7               \r\n            dM'       `       ,pW\"Wq.        MM   d                 \r\n            MM               6W'   `Wb       MMmmMM                 \r\n            MM.    `7MMF'    8M     M8       MM   Y  ,              \r\n            `Mb.     MM      YA.   ,A9       MM     ,M              \r\n              `\"bmmmdPY       `Ybmd9'      .JMMmmmmMMM              \r\n                                           __,                      \r\n                M******A'     pd*\"*b.     `7MM                      \r\n                Y     A'     (O)   j8       MM                      \r\n                     A'          ,;j9       MM                      \r\n                    A'        ,-='          MM                      \r\n                   A'        Ammmmmmm     .JMML.                    \r\n`7MM\"\"\"Mq.        A'                                                \r\n  MM   `MM.                                                       \r\n  MM   ,M9     `7Mb,od8      ,pW\"Wq.      `7M'   `MF'    `7M'   `MF'\r\n  MMmmdM9        MM' \"'     6W'   `Wb       `VA ,V'        VA   ,V  \r\n  MM             MM         8M     M8         XMX           VA ,V   \r\n  MM             MM         YA.   ,A9       ,V' VA.          VVV    \r\n.JMML.         .JMML.        `Ybmd9'      .AM.   .MA.        ,V     \r\n                                                            ,V      \r\n                                                         OOb\"      \r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0;\r\n\r\ninterface IGoEHelper {\r\n    function isContract(address) external view returns (bool);\r\n    function toString(uint256) external pure returns (string memory);\r\n}\r\n\r\ninterface IGoE20Basic {\r\n    function decimals() external view returns(uint256);\r\n    function transferFrom(address,address,uint256) external returns (bool);    \r\n    function allowance(address,address) external view returns (uint256);\r\n    function transfer(address,uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256); \r\n}\r\n\r\ninterface IGoE721Basic {\r\n    function exists(uint256) external view returns(bool);\r\n    function ownerOf(uint256) external view returns (address);\r\n}\r\n\r\ninterface IGoEBridge {\r\n    function formCrossChainGateRequest(uint256, uint256, address, bool) external view returns(bytes memory);\r\n    function createCrossChainGateRequest(bytes memory _nRequest) external returns(bool);\r\n}\r\n\r\ncontract ProxyData {\r\n    // internal address of proxy\r\n    address internal proxied;\r\n    // internal mapping for authorized address\r\n    mapping(bytes32 => bool) internal authorized;\r\n     // enum for authorization types\r\n    enum AType {\r\n        KEY,\r\n        ADMIN,\r\n        CONTRACT\r\n    }\r\n    address internal _owner;\r\n}\r\n\r\ncontract GoEAccess is ProxyData {\r\n\r\n    constructor(){\r\n\r\n        authorized[_getKec(msg.sender, AType.KEY)] = true;\r\n        _owner = 0xd928775286848A0624342252167c3FFc459bADed;\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n\r\n        return msg.sender;\r\n    }\r\n\r\n    function _getKec(address a, AType t) internal pure returns(bytes32){\r\n\r\n        return(keccak256(abi.encode(a, t)));\r\n    }\r\n\r\n    function _isAuthorized(address _addr) internal view returns(uint8){\r\n        require(_addr != address(0), \"GoEAccess: No Zero Addresses allowed\");\r\n        if(authorized[_getKec(_addr, AType.KEY)]){\r\n            return 3;\r\n        }\r\n        else if(authorized[_getKec(_addr, AType.ADMIN)]){\r\n            return 2;\r\n        }\r\n        else if(authorized[_getKec(_addr, AType.CONTRACT)]){\r\n            return 1;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function authorizeAddress(AType addressType, address authorizedAddress) public keyAllowed {\r\n        require(_isAuthorized(authorizedAddress) == 0, \"GoEAccess: This address is already authorized\");\r\n        _authorizeAddress(addressType, authorizedAddress);\r\n    }\r\n\r\n    function _authorizeAddress(AType _at, address _a) internal {\r\n\r\n        authorized[_getKec(_a, _at)] = true;\r\n    }\r\n\r\n    function _unauthorizeAddress(AType _at, address _a) internal {\r\n\r\n        authorized[_getKec(_a, _at)] = false;\r\n    }\r\n\r\n    modifier keyAllowed() {\r\n        require(_isAuthorized(_msgSender()) == 3, \"GoEAccess: Key person only.\");\r\n        _;\r\n    }\r\n\r\n    modifier adminsAllowed() {\r\n        require(_isAuthorized(_msgSender()) >= 2, \"GoEAccess: Only allowed admins have access\");\r\n        _;\r\n    }\r\n\r\n    modifier contractsAllowed() {\r\n        require(_isAuthorized(_msgSender()) >= 1, \"GoEAccess: Only allowed contracts have access\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public keyAllowed {\r\n        _owner = _newOwner;\r\n    }\r\n\r\n}\r\ncontract GoE20Transactions { \r\n    /**\r\n     * boring ERC20 function to send compliant tokens\r\n     */\r\n    function send20Token(address token, address reciever, uint256 amount) internal returns(bool){\r\n        require(IGoE20Basic(token).balanceOf(address(this)) > amount, \"GoE20Transactions: No enough balance\");\r\n        require(IGoE20Basic(token).transfer(reciever, amount), \"GoE20Transactions: Cannot currently transfer\");\r\n        return true;\r\n    }\r\n    /**\r\n     * boring ERC20 function to recieve compliant tokens\r\n     */\r\n    function recieve20Token(address token, address sender, uint256 amount) internal returns(bool) {\r\n        require(IGoE20Basic(token).allowance(sender, address(this)) >= amount, \"GoE20Transactions: Need to approve the token\");\r\n        require(IGoE20Basic(token).transferFrom(sender, address(this), amount), \"GoE20Transactions: Need to transfer tokens \");\r\n        return true;\r\n    }\r\n}\r\ncontract GoE721Data is ProxyData {\r\n    /**\r\n     * events required by Non-Fungible tokens implementation\r\n     * more info @ https://eips.ethereum.org/EIPS/eip-721[EIP]\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    \r\n    /**\r\n     * variables used by ERC721 standard contracts with additional params : \r\n     * \r\n     * 1. `_attribProxy` parameter which provides onChain data attributes\r\n     * for all Non-Fungible tokens produced by proxy implemented contracts.\r\n     * \r\n     * 2. `_reservedAmount` a certain pre-specified amount of Non-Fungible tokens\r\n     * for the contract to reserve.\r\n     * \r\n     * 3. `_paused` a control variable for ERC721 {mint} function.\r\n     */\r\n    address _attribProxy;\r\n    string  _name;\r\n    string  _symbol;\r\n    string  _baseUrl;\r\n    string  _baseExtention;\r\n    uint256  _mintIdx;\r\n    uint256 _maxSupply;\r\n    uint256 _reservedAmount;\r\n    bool _paused;\r\n\r\n    /**\r\n     * variables required by Non-Fungible tokens implementation\r\n     * more info @ https://eips.ethereum.org/EIPS/eip-721[EIP]\r\n     * to adhere to functionality requested by the EIP. Main fork from OpenZepplin\r\n     * more info @ https://docs.openzeppelin.com/contracts/2.x/api/token/erc721\r\n     */\r\n    mapping(address => uint256) _mintCost;\r\n    mapping(uint256 => address) _owners;\r\n    mapping(address => uint256) _balances;\r\n    mapping(uint256 => address) _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) _operatorApprovals;\r\n\r\n    mapping(uint256 => uint256) _bridged;\r\n    mapping(uint256 => address) _bridgeReference;\r\n}\r\n\r\ncontract Proxy is ProxyData, GoEAccess {\r\n    constructor(address _proxied) {\r\n\r\n        proxied = _proxied;\r\n    }\r\n    /**\r\n     * @notice proxy implementation of {address contract}\r\n     */\r\n    function implementation() public view returns (address) {\r\n\r\n        return proxied;\r\n    }\r\n    /**\r\n     * @notice EIP-897 \"Forwarding Proxy\" implementation\r\n     */\r\n    function proxyType() public pure returns (uint256) {\r\n\r\n        return 1; \r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n   \r\n    fallback () external payable {\r\n        address addr = proxied;\r\n        assembly {\r\n            let freememstart := mload(0x40)\r\n            calldatacopy(freememstart, 0, calldatasize())\r\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\r\n            returndatacopy(freememstart, 0, returndatasize())\r\n            switch success\r\n            case 0 { revert(freememstart, returndatasize()) }\r\n            default { return(freememstart, returndatasize()) }\r\n        }\r\n    }\r\n}\r\n\r\ncontract GoE721Proxy is Proxy, GoE721Data, GoE20Transactions {\r\n\r\n    /**\r\n     * @dev creates a new {GoE721Basic} contract with the passed attributes\r\n     */\r\n    constructor (address proxied, address attribProxy_, string memory name_, string memory symbol_, string memory baseUri_, string memory baseExt_, uint256 maxSupply_, uint256 reservedAmount_, uint256 nativeMintCost_, uint256[] memory mintCosts_, address[] memory mintTokens_) Proxy(proxied) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _baseUrl = baseUri_;\r\n        _baseExtention = baseExt_;\r\n        _maxSupply = maxSupply_;\r\n        _reservedAmount = reservedAmount_;\r\n        _mintCost[address(0)] = nativeMintCost_;\r\n        _mintIdx = 1;\r\n        require(mintTokens_.length == mintCosts_.length, \"GoE721Proxy: Tokens and Costs need to be the same length\");\r\n        for(uint256 i=0; i<mintTokens_.length; i++){\r\n            _mintCost[mintTokens_[i]] = mintCosts_[i];\r\n        }\r\n        _paused = true;\r\n        _attribProxy = attribProxy_;\r\n    }\r\n\r\n    /**\r\n     * @dev upgradable proxy, change the calls to another implementation\r\n     * \r\n     * Still EIP-897 compliant for forwarding proxy\r\n     */\r\n    function changeProxy(address _proxied) external adminsAllowed {\r\n        proxied = _proxied;\r\n    }\r\n    /**\r\n     * onChain attributes contract for all Non-Fungible tokens \"minted\" by\r\n     * the `_proxied` contract\r\n     */\r\n    function changeAttribProxy(address attribProxy_) external adminsAllowed {\r\n        _attribProxy = attribProxy_;\r\n    }\r\n\r\n    function changeURLParams(string memory baseUri_, string memory baseExt_) external adminsAllowed {\r\n        _baseUrl = baseUri_;\r\n        _baseExtention = baseExt_;\r\n    }\r\n\r\n    function pauseToggle() external adminsAllowed {\r\n        _paused = !_paused;\r\n    }\r\n\r\n    function changeMintCost(address token, uint256 cost) external adminsAllowed {\r\n        _mintCost[token] = cost;\r\n    }\r\n\r\n    function withdraw(address token, address to, uint256 amount) external keyAllowed {\r\n        if(token == address(0)){\r\n            require(payable(to).send(amount));\r\n        }else{\r\n            send20Token(token, to, amount);\r\n        }\r\n    }\r\n\r\n    function policyMint(address _to, uint256 _amount) external contractsAllowed {\r\n        require(_mintIdx+_amount <= _maxSupply, \"GoE721Proxy: Total amounts more than reserved\");\r\n        for(uint256 i=0; i<_amount; i++){\r\n            _bridgeMint(_to, _mintIdx);\r\n            _mintIdx += 1;\r\n        }\r\n    }\r\n\r\n    function switchToChain(uint256 tokenId, uint256 chainId) external contractsAllowed {\r\n        address oldOwner = IGoE721Basic(proxied).ownerOf(tokenId);\r\n        require(_bridged[tokenId] == block.chainid || _bridged[tokenId] == 0, \"GoE721Proxy: This token is already not on this chain\");\r\n        require(IGoEBridge(msg.sender).createCrossChainGateRequest(IGoEBridge(msg.sender).formCrossChainGateRequest(chainId, tokenId, oldOwner, true)), \"GoE721Proxy: Cannot switch chains currently\");\r\n        _bridgeBurn(oldOwner, tokenId);\r\n        _bridged[tokenId] = chainId;\r\n        _bridgeReference[tokenId] = oldOwner;\r\n    }\r\n\r\n    function switchFromChain(uint256 tokenId, address tokenOwner) external contractsAllowed {\r\n        require(_bridged[tokenId] != block.chainid, \"GoE721Proxy: This token is already on this chain\");\r\n        _bridgeMint(tokenOwner, tokenId);\r\n        _bridgeReference[tokenId] = tokenOwner;\r\n        _bridged[tokenId] = block.chainid;\r\n    }\r\n\r\n    function _bridgeMint(address to, uint256 tokenId) internal {\r\n        require(!IGoE721Basic(proxied).exists(tokenId), \"GoE721Proxy: Bridge minting does not allow tokens that are already minted\");\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _bridgeBurn(address from, uint256 tokenId) internal {\r\n        address oldOwner = IGoE721Basic(proxied).ownerOf(tokenId);\r\n        require(oldOwner == from, \"GoE721Proxy: Bridge burning does not allow unowned tokens\");\r\n        _tokenApprovals[tokenId] = address(0);\r\n        _balances[oldOwner] -= 1;\r\n        delete _owners[tokenId];\r\n        emit Approval(oldOwner, address(0), tokenId);\r\n        emit Transfer(oldOwner, address(0), tokenId);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxied\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attribProxy_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseUri_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseExt_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeMintCost_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"mintCosts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"mintTokens_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"enum ProxyData.AType\",\"name\":\"addressType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"authorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attribProxy_\",\"type\":\"address\"}],\"name\":\"changeAttribProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"changeMintCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxied\",\"type\":\"address\"}],\"name\":\"changeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseExt_\",\"type\":\"string\"}],\"name\":\"changeURLParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"policyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"switchFromChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"switchToChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GoE721Proxy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000263cd8248161b66ffa792d074250413b756ff7570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000002bc0000000000000000000000000000000000000000000000000214e8348c4f000000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000e476f452e47472f47656e65736973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b476f452e47656e65736973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002068747470733a2f2f6170692e676f652e67672f6765742f6d657461646174612f00000000000000000000000000000000000000000000000000000000000000052e6a736f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4b05ff5cdf496ddb156c5ec29d72efc1a185e204f945fcc9ed8bd4e86dddb56d"}]}