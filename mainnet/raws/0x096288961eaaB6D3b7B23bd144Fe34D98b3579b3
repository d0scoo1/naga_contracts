{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.10;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IDFSRegistry {\r\n \r\n    function getAddr(bytes4 _id) public view virtual returns (address);\r\n\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public virtual;\r\n\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\r\n\r\n    function approveContractChange(bytes32 _id) public virtual;\r\n\r\n    function cancelContractChange(bytes32 _id) public virtual;\r\n\r\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256 digits);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n    //insufficient balance\r\n    error InsufficientBalance(uint256 available, uint256 required);\r\n    //unable to send value, recipient may have reverted\r\n    error SendingValueFail();\r\n    //insufficient balance for call\r\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\r\n    //call to non-contract\r\n    error NonContractCall();\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < amount){\r\n            revert InsufficientBalance(balance, amount);\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!(success)){\r\n            revert SendingValueFail();\r\n        }\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < value){\r\n            revert InsufficientBalanceForCall(balance, value);\r\n        }\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        if (!(isContract(target))){\r\n            revert NonContractCall();\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetAuthAddresses {\r\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\r\n    address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AuthHelper is MainnetAuthAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminVault is AuthHelper {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    error SenderNotAdmin();\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        admin = ADMIN_ADDR;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function changeOwner(address _owner) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function changeAdmin(address _admin) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        admin = _admin;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminAuth is AuthHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\r\n\r\n    error SenderNotOwner();\r\n    error SenderNotAdmin();\r\n\r\n    modifier onlyOwner() {\r\n        if (adminVault.owner() != msg.sender){\r\n            revert SenderNotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (adminVault.admin() != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(_receiver).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyAdmin {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x + y;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x - y;\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x * y;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(address(0))) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) {\r\n        if (!(setCache(_cacheAddr))){\r\n            require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\r\n}\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IManager {\r\n    function last(address) virtual public returns (uint);\r\n    function cdpCan(address, uint, address) virtual public view returns (uint);\r\n    function ilks(uint) virtual public view returns (bytes32);\r\n    function owns(uint) virtual public view returns (address);\r\n    function urns(uint) virtual public view returns (address);\r\n    function vat() virtual public view returns (address);\r\n    function open(bytes32, address) virtual public returns (uint);\r\n    function give(uint, address) virtual public;\r\n    function cdpAllow(uint, address, uint) virtual public;\r\n    function urnAllow(address, uint) virtual public;\r\n    function frob(uint, int, int) virtual public;\r\n    function flux(uint, address, uint) virtual public;\r\n    function move(uint, address, uint) virtual public;\r\n    function exit(address, uint, address, uint) virtual public;\r\n    function quit(uint, address) virtual public;\r\n    function enter(address, uint) virtual public;\r\n    function shift(uint, uint) virtual public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IGem {\r\n    function dec() virtual public returns (uint);\r\n    function gem() virtual public returns (IGem);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public returns (bool);\r\n    function transferFrom(address, address, uint) virtual public returns (bool);\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n    function allowance(address, address) virtual public returns (uint);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IJoin {\r\n    bytes32 public ilk;\r\n\r\n    function dec() virtual public view returns (uint);\r\n    function gem() virtual public view returns (IGem);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IVat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n\r\n    function can(address, address) virtual public view returns (uint);\r\n    function dai(address) virtual public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) virtual public;\r\n    function hope(address) virtual public;\r\n    function move(address, address, uint) virtual public;\r\n    function fork(bytes32, address, address, int, int) virtual public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IWETH {\r\n    function allowance(address, address) public virtual view returns (uint256);\r\n\r\n    function balanceOf(address) public virtual view returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual returns (bool);\r\n\r\n    function deposit() public payable virtual;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary TokenUtils {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    function approveToken(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_tokenAddr == ETH_ADDR) return;\r\n\r\n        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\r\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function pullTokensIfNeeded(\r\n        address _token,\r\n        address _from,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        // handle max uint amount\r\n        if (_amount == type(uint256).max) {\r\n            _amount = getBalance(_token, _from);\r\n        }\r\n\r\n        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\r\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (_amount == type(uint256).max) {\r\n            _amount = getBalance(_token, address(this));\r\n        }\r\n\r\n        if (_to != address(0) && _to != address(this) && _amount != 0) {\r\n            if (_token != ETH_ADDR) {\r\n                IERC20(_token).safeTransfer(_to, _amount);\r\n            } else {\r\n                payable(_to).transfer(_amount);\r\n            }\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function depositWeth(uint256 _amount) internal {\r\n        IWETH(WETH_ADDR).deposit{value: _amount}();\r\n    }\r\n\r\n    function withdrawWeth(uint256 _amount) internal {\r\n        IWETH(WETH_ADDR).withdraw(_amount);\r\n    }\r\n\r\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            return _acc.balance;\r\n        } else {\r\n            return IERC20(_tokenAddr).balanceOf(_acc);\r\n        }\r\n    }\r\n\r\n    function getTokenDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == ETH_ADDR) return 18;\r\n\r\n        return IERC20(_token).decimals();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IPipInterface {\r\n    function read() public virtual returns (bytes32);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ISpotter {\r\n    struct Ilk {\r\n        IPipInterface pip;\r\n        uint256 mat;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    uint256 public par;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract McdRatioHelper is DSMath {\r\n\r\n    IVat public constant vat = IVat(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\r\n    ISpotter public constant spotter = ISpotter(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\r\n    IManager public constant manager = IManager(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\r\n\r\n    /// @notice Gets CDP ratio\r\n    /// @param _vaultId Id of the CDP\r\n    /// @param _nextPrice Next price for user\r\n    function getRatio(uint256 _vaultId, uint256 _nextPrice) public view returns (uint256) {\r\n        bytes32 ilk = manager.ilks(_vaultId);\r\n        uint256 price = (_nextPrice == 0) ? getPrice(ilk) : _nextPrice;\r\n\r\n        (uint256 collateral, uint256 debt) = getCdpInfo(_vaultId, ilk);\r\n\r\n        if (debt == 0) return 0;\r\n\r\n        return rdiv(wmul(collateral, price), debt) / (10**18);\r\n    }\r\n\r\n    /// @notice Gets CDP info (collateral, debt)\r\n    /// @param _vaultId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    function getCdpInfo(uint256 _vaultId, bytes32 _ilk) public view returns (uint256, uint256) {\r\n        address urn = manager.urns(_vaultId);\r\n\r\n        (uint256 collateral, uint256 debt) = vat.urns(_ilk, urn);\r\n        (, uint256 rate, , , ) = vat.ilks(_ilk);\r\n\r\n        return (collateral, rmul(debt, rate));\r\n    }\r\n\r\n    /// @notice Gets a price of the asset\r\n    /// @param _ilk Ilk of the CDP\r\n    function getPrice(bytes32 _ilk) public view returns (uint256) {\r\n        (, uint256 mat) = spotter.ilks(_ilk);\r\n        (, , uint256 spot, , ) = vat.ilks(_ilk);\r\n\r\n        return rmul(rmul(spot, spotter.par()), mat);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nabstract contract ITrigger {\r\n    function isTriggered(bytes memory, bytes memory) public virtual returns (bool);\r\n    function isChangeable() public virtual returns (bool);\r\n    function changedSubData(bytes memory) public virtual returns (bytes memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IMCDPriceVerifier {\r\n    function verifyVaultNextPrice(uint _nextPrice, uint _cdpId) public view virtual returns(bool);\r\n    function verifyNextPrice(uint _nextPrice, bytes32 _ilk) public view virtual returns(bool);\r\n    function setAuthorized(address _address, bool _allowed) public virtual;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetCoreAddresses {\r\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\r\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\r\n    address internal constant DEFISAVER_LOGGER = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\r\n\r\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\r\n    address internal constant BUNDLE_STORAGE_ADDR = 0x223c6aDE533851Df03219f6E3D8B763Bd47f84cf;\r\n    address internal constant STRATEGY_STORAGE_ADDR = 0xF52551F95ec4A2B4299DcC42fbbc576718Dbf933;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract CoreHelper is MainnetCoreAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSRegistry is AdminAuth {\r\n    error EntryAlreadyExistsError(bytes4);\r\n    error EntryNonExistentError(bytes4);\r\n    error EntryNotInChangeError(bytes4);\r\n    error ChangeNotReadyError(uint256,uint256);\r\n    error EmptyPrevAddrError(bytes4);\r\n    error AlreadyInContractChangeError(bytes4);\r\n    error AlreadyInWaitPeriodChangeError(bytes4);\r\n\r\n    event AddNewContract(address,bytes4,address,uint256);\r\n    event RevertToPreviousAddress(address,bytes4,address,address);\r\n    event StartContractChange(address,bytes4,address,address);\r\n    event ApproveContractChange(address,bytes4,address,address);\r\n    event CancelContractChange(address,bytes4,address,address);\r\n    event StartWaitPeriodChange(address,bytes4,uint256);\r\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\r\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\r\n\r\n    struct Entry {\r\n        address contractAddr;\r\n        uint256 waitPeriod;\r\n        uint256 changeStartTime;\r\n        bool inContractChange;\r\n        bool inWaitPeriodChange;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes4 => Entry) public entries;\r\n    mapping(bytes4 => address) public previousAddresses;\r\n\r\n    mapping(bytes4 => address) public pendingAddresses;\r\n    mapping(bytes4 => uint256) public pendingWaitTimes;\r\n\r\n    /// @notice Given an contract id returns the registered address\r\n    /// @dev Id is keccak256 of the contract name\r\n    /// @param _id Id of contract\r\n    function getAddr(bytes4 _id) public view returns (address) {\r\n        return entries[_id].contractAddr;\r\n    }\r\n\r\n    /// @notice Helper function to easily query if id is registered\r\n    /// @param _id Id of contract\r\n    function isRegistered(bytes4 _id) public view returns (bool) {\r\n        return entries[_id].exists;\r\n    }\r\n\r\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\r\n\r\n    /// @notice Adds a new contract to the registry\r\n    /// @param _id Id of contract\r\n    /// @param _contractAddr Address of the contract\r\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\r\n    function addNewContract(\r\n        bytes4 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public onlyOwner {\r\n        if (entries[_id].exists){\r\n            revert EntryAlreadyExistsError(_id);\r\n        }\r\n\r\n        entries[_id] = Entry({\r\n            contractAddr: _contractAddr,\r\n            waitPeriod: _waitPeriod,\r\n            changeStartTime: 0,\r\n            inContractChange: false,\r\n            inWaitPeriodChange: false,\r\n            exists: true\r\n        });\r\n\r\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\r\n    }\r\n\r\n    /// @notice Reverts to the previous address immediately\r\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\r\n    /// @param _id Id of contract\r\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\r\n        if (!(entries[_id].exists)){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (previousAddresses[_id] == address(0)){\r\n            revert EmptyPrevAddrError(_id);\r\n        }\r\n\r\n        address currentAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = previousAddresses[_id];\r\n\r\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\r\n    }\r\n\r\n    /// @notice Starts an address change for an existing entry\r\n    /// @dev Can override a change that is currently in progress\r\n    /// @param _id Id of contract\r\n    /// @param _newContractAddr Address of the new contract\r\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inWaitPeriodChange){\r\n            revert AlreadyInWaitPeriodChangeError(_id);\r\n        }\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inContractChange = true;\r\n\r\n        pendingAddresses[_id] = _newContractAddr;\r\n\r\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\r\n    }\r\n\r\n    /// @notice Changes new contract address, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        address oldContractAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = pendingAddresses[_id];\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        previousAddresses[_id] = oldContractAddr;\r\n\r\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Cancel pending change\r\n    /// @param _id Id of contract\r\n    function cancelContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        address oldContractAddr = pendingAddresses[_id];\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Starts the change for waitPeriod\r\n    /// @param _id Id of contract\r\n    /// @param _newWaitPeriod New wait time\r\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inContractChange){\r\n            revert AlreadyInContractChangeError(_id);\r\n        }\r\n\r\n        pendingWaitTimes[_id] = _newWaitPeriod;\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inWaitPeriodChange = true;\r\n\r\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\r\n    }\r\n\r\n    /// @notice Changes new wait period, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        uint256 oldWaitTime = entries[_id].waitPeriod;\r\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\r\n        \r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n\r\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\r\n    }\r\n\r\n    /// @notice Cancel wait period change\r\n    /// @param _id Id of contract\r\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetTriggerAddresses {\r\n    address public constant CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf;\r\n    address public constant UNISWAP_V3_NONFUNGIBLE_POSITION_MANAGER = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\r\n    address public constant UNISWAP_V3_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\r\n    address public constant MCD_PRICE_VERIFIER = 0xeAa474cbFFA87Ae0F1a6f68a3aBA6C77C656F72c;\r\n}\r\n\r\n\r\n\r\n\r\ncontract TriggerHelper is MainnetTriggerAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract McdRatioTrigger is ITrigger, AdminAuth, McdRatioHelper, CoreHelper, TriggerHelper {\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    error WrongNextPrice(uint256);\r\n\r\n    enum RatioState {\r\n        OVER,\r\n        UNDER\r\n    }\r\n\r\n    enum RatioCheck {\r\n        CURR_RATIO,\r\n        NEXT_RATIO,\r\n        BOTH_RATIOS\r\n    }\r\n    \r\n    /// @param nextPrice price that OSM returns as next price value\r\n    /// @param ratioCheck returns if we want the trigger to look at the current asset price, nextPrice param or both\r\n    struct CallParams {\r\n        uint256 nextPrice;\r\n        uint8 ratioCheck;\r\n    }\r\n\r\n    /// @param vaultId id of the vault whose ratio we check\r\n    /// @param ratio ratio that represents the triggerable point\r\n    /// @param state represents if we want current ratio to be higher or lower than ratio param\r\n    struct SubParams {\r\n        uint256 vaultId;\r\n        uint256 ratio;\r\n        uint8 state;\r\n    }\r\n\r\n    function isTriggered(bytes memory _callData, bytes memory _subData)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        CallParams memory triggerCallData = parseCallInputs(_callData);\r\n        SubParams memory triggerSubData = parseSubInputs(_subData);\r\n\r\n        uint256 checkedRatio;\r\n        bool shouldTriggerCurr;\r\n        bool shouldTriggerNext;\r\n    \r\n        if (RatioCheck(triggerCallData.ratioCheck) == RatioCheck.CURR_RATIO || RatioCheck(triggerCallData.ratioCheck) == RatioCheck.BOTH_RATIOS){\r\n            checkedRatio = getRatio(triggerSubData.vaultId, 0);\r\n            shouldTriggerCurr = shouldTrigger(triggerSubData.state, checkedRatio, triggerSubData.ratio);\r\n        }\r\n\r\n        if (RatioCheck(triggerCallData.ratioCheck) == RatioCheck.NEXT_RATIO || RatioCheck(triggerCallData.ratioCheck) == RatioCheck.BOTH_RATIOS){\r\n            checkedRatio = getRatio(triggerSubData.vaultId, triggerCallData.nextPrice);\r\n            \r\n            shouldTriggerNext = shouldTrigger(triggerSubData.state, checkedRatio, triggerSubData.ratio);\r\n\r\n            // must convert back to wad\r\n            if (triggerCallData.nextPrice != 0) {\r\n                triggerCallData.nextPrice = triggerCallData.nextPrice / 1e9;\r\n            }\r\n\r\n            /// @dev if we don't have access to the next price on-chain this returns true, if we do this compares the nextPrice param we sent\r\n            if (\r\n                !IMCDPriceVerifier(MCD_PRICE_VERIFIER).verifyVaultNextPrice(\r\n                    triggerCallData.nextPrice,\r\n                    triggerSubData.vaultId\r\n                )\r\n            ) {\r\n                revert WrongNextPrice(triggerCallData.nextPrice);\r\n            }\r\n        }\r\n\r\n        return shouldTriggerCurr || shouldTriggerNext;\r\n    }\r\n    \r\n    function shouldTrigger(uint8 state, uint256 checkedRatio, uint256 subbedToRatio) internal pure returns (bool){\r\n        if (RatioState(state) == RatioState.OVER) {\r\n            if (checkedRatio > subbedToRatio) return true;\r\n        }\r\n        if (RatioState(state) == RatioState.UNDER) {\r\n            if (checkedRatio < subbedToRatio) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function changedSubData(bytes memory _subData) public pure override returns (bytes memory) {}\r\n\r\n    function isChangeable() public pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function parseCallInputs(bytes memory _callData)\r\n        internal\r\n        pure\r\n        returns (CallParams memory params)\r\n    {\r\n        params = abi.decode(_callData, (CallParams));\r\n    }\r\n\r\n    function parseSubInputs(bytes memory _subData) internal pure returns (SubParams memory params) {\r\n        params = abi.decode(_subData, (SubParams));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WrongNextPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINLINK_FEED_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCD_PRICE_VERIFIER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_NONFUNGIBLE_POSITION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_subData\",\"type\":\"bytes\"}],\"name\":\"changedSubData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChangeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_subData\",\"type\":\"bytes\"}],\"name\":\"isTriggered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract ISpotter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract IVat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "McdRatioTrigger", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8ec2a5c890a4a33467145240c36d616be9b33979a42444f340a552f9e634e9ea"}]}