{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/helpers/CDPViewer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/IVaultParameters.sol\\\";\\r\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerParameters.sol\\\";\\r\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\\\";\\r\\nimport \\\"../interfaces/IOracleRegistry.sol\\\";\\r\\nimport \\\"../interfaces/wrapped-assets/IWrappedAsset.sol\\\";\\r\\nimport \\\"./IUniswapV2PairFull.sol\\\";\\r\\nimport \\\"./ERC20Like.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Views collaterals in one request to save node requests and speed up dapps.\\r\\n */\\r\\ncontract CDPViewer {\\r\\n\\r\\n    IVault public immutable vault;\\r\\n    IVaultParameters public immutable vaultParameters;\\r\\n    IVaultManagerParameters public immutable vaultManagerParameters;\\r\\n    IVaultManagerBorrowFeeParameters public immutable vaultManagerBorrowFeeParameters;\\r\\n    IOracleRegistry public immutable oracleRegistry;\\r\\n\\r\\n    struct CDP {\\r\\n\\r\\n        // Collateral amount\\r\\n        uint128 collateral;\\r\\n\\r\\n        // Debt amount\\r\\n        uint128 debt;\\r\\n\\r\\n        // Debt + accrued stability fee\\r\\n        uint totalDebt;\\r\\n\\r\\n        // Percentage with 3 decimals\\r\\n        uint32 stabilityFee;\\r\\n\\r\\n        uint32 lastUpdate;\\r\\n\\r\\n        // Percentage with 0 decimals\\r\\n        uint16 liquidationFee;\\r\\n\\r\\n        uint16 oracleType;\\r\\n    }\\r\\n\\r\\n    struct CollateralParameters {\\r\\n\\r\\n        // USDP mint limit\\r\\n        uint128 tokenDebtLimit;\\r\\n\\r\\n        // USDP mint limit\\r\\n        uint128 tokenDebt;\\r\\n\\r\\n        // Percentage with 3 decimals\\r\\n        uint32 stabilityFee;\\r\\n\\r\\n        // Percentage with 3 decimals\\r\\n        uint32 liquidationDiscount;\\r\\n\\r\\n        // Devaluation period in blocks\\r\\n        uint32 devaluationPeriod;\\r\\n\\r\\n        // Percentage with 0 decimals\\r\\n        uint16 liquidationRatio;\\r\\n\\r\\n        // Percentage with 0 decimals\\r\\n        uint16 initialCollateralRatio;\\r\\n\\r\\n        // Percentage with 0 decimals\\r\\n        uint16 liquidationFee;\\r\\n\\r\\n        // Oracle types enabled for this asset\\r\\n        uint16 oracleType;\\r\\n\\r\\n        // Percentage with 2 decimals (basis points)\\r\\n        uint16 borrowFee;\\r\\n\\r\\n        CDP cdp;\\r\\n    }\\r\\n\\r\\n    struct TokenDetails {\\r\\n        address[2] lpUnderlyings;\\r\\n        uint128 balance;\\r\\n        uint128 totalSupply;\\r\\n        uint8 decimals;\\r\\n        address uniswapV2Factory;\\r\\n\\r\\n        address underlyingToken;\\r\\n        uint256 underlyingTokenBalance;\\r\\n        uint256 underlyingTokenTotalSupply;\\r\\n        uint8 underlyingTokenDecimals;\\r\\n        address underlyingTokenUniswapV2Factory;\\r\\n        address[2] underlyingTokenUnderlyings;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    constructor(address _vaultManagerParameters, address _oracleRegistry, address _vaultManagerBorrowFeeParameters) {\\r\\n         IVaultManagerParameters vmp = IVaultManagerParameters(_vaultManagerParameters);\\r\\n         vaultManagerParameters = vmp;\\r\\n         IVaultParameters vp = IVaultParameters(vmp.vaultParameters());\\r\\n         vaultParameters = vp;\\r\\n         vault = IVault(vp.vault());\\r\\n         oracleRegistry = IOracleRegistry(_oracleRegistry);\\r\\n         vaultManagerBorrowFeeParameters = IVaultManagerBorrowFeeParameters(_vaultManagerBorrowFeeParameters);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get parameters of one asset\\r\\n     * @param asset asset address\\r\\n     * @param owner owner address\\r\\n     */\\r\\n    function getCollateralParameters(address asset, address owner)\\r\\n        public\\r\\n        view\\r\\n        returns (CollateralParameters memory r)\\r\\n    {\\r\\n        r.stabilityFee = uint32(vaultParameters.stabilityFee(asset));\\r\\n        r.liquidationFee = uint16(vaultParameters.liquidationFee(asset));\\r\\n        r.initialCollateralRatio = uint16(vaultManagerParameters.initialCollateralRatio(asset));\\r\\n        r.liquidationRatio = uint16(vaultManagerParameters.liquidationRatio(asset));\\r\\n        r.liquidationDiscount = uint32(vaultManagerParameters.liquidationDiscount(asset));\\r\\n        r.devaluationPeriod = uint32(vaultManagerParameters.devaluationPeriod(asset));\\r\\n\\r\\n        r.tokenDebtLimit = uint128(vaultParameters.tokenDebtLimit(asset));\\r\\n        r.tokenDebt = uint128(vault.tokenDebts(asset));\\r\\n        r.oracleType = uint16(oracleRegistry.oracleTypeByAsset(asset));\\r\\n\\r\\n        r.borrowFee = vaultManagerBorrowFeeParameters.getBorrowFee(asset);\\r\\n\\r\\n        if (owner == address(0)) return r;\\r\\n        r.cdp.stabilityFee = uint32(vault.stabilityFee(asset, owner));\\r\\n        r.cdp.liquidationFee = uint16(vault.liquidationFee(asset, owner));\\r\\n        r.cdp.debt = uint128(vault.debts(asset, owner));\\r\\n        r.cdp.totalDebt = vault.getTotalDebt(asset, owner);\\r\\n        r.cdp.collateral = uint128(vault.collaterals(asset, owner));\\r\\n        r.cdp.lastUpdate = uint32(vault.lastUpdate(asset, owner));\\r\\n        r.cdp.oracleType = uint16(vault.oracleType(asset, owner));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get details of one token\\r\\n     * @param asset token address\\r\\n     * @param owner owner address\\r\\n     */\\r\\n    function getTokenDetails(address asset, address owner)\\r\\n        public\\r\\n        view\\r\\n        returns (TokenDetails memory r)\\r\\n    {\\r\\n        address token0;\\r\\n        address token1;\\r\\n\\r\\n        (bool success, bytes memory data) = asset.staticcall{gas:20000}(abi.encodeWithSignature(\\\"token0()\\\"));\\r\\n        if (success && data.length == 32) { // check in this way (and not try/catch) since some tokens has fallback functions\\r\\n            token0 = bytesToAddress(data);\\r\\n\\r\\n            (success, data) = asset.staticcall{gas:20000}(abi.encodeWithSignature(\\\"token1()\\\"));\\r\\n            if (success && data.length == 32) {\\r\\n                token1 = bytesToAddress(data);\\r\\n\\r\\n                (success, data) = asset.staticcall{gas:20000}(abi.encodeWithSignature(\\\"factory()\\\"));\\r\\n                if (success && data.length == 32) {\\r\\n                    r.lpUnderlyings[0] = token0;\\r\\n                    r.lpUnderlyings[1] = token1;\\r\\n                    r.uniswapV2Factory = bytesToAddress(data);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        r.totalSupply = uint128(IUniswapV2PairFull(asset).totalSupply());\\r\\n        r.decimals = uint8(IUniswapV2PairFull(asset).decimals());\\r\\n        if (owner != address(0)) {\\r\\n            r.balance = uint128(ERC20Like(asset).balanceOf(owner));\\r\\n        }\\r\\n\\r\\n        (success, data) = asset.staticcall{gas:20000}(abi.encodeWithSignature(\\\"isUnitProtocolWrappedAsset()\\\"));\\r\\n        if (success && data.length == 32 && bytesToBytes32(data) == keccak256(\\\"UnitProtocolWrappedAsset\\\")) {\\r\\n            r.underlyingToken = address(IWrappedAsset(asset).getUnderlyingToken());\\r\\n\\r\\n            TokenDetails memory underlyingTokenDetails = getTokenDetails(r.underlyingToken, owner);\\r\\n            r.underlyingTokenTotalSupply = underlyingTokenDetails.totalSupply;\\r\\n            r.underlyingTokenDecimals = underlyingTokenDetails.decimals;\\r\\n            r.underlyingTokenBalance = underlyingTokenDetails.balance;\\r\\n            r.underlyingTokenUniswapV2Factory = underlyingTokenDetails.uniswapV2Factory;\\r\\n            r.underlyingTokenUnderlyings[0] = underlyingTokenDetails.lpUnderlyings[0];\\r\\n            r.underlyingTokenUnderlyings[1] = underlyingTokenDetails.lpUnderlyings[1];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory _bytes) private pure returns (address addr) {\\r\\n        assembly {\\r\\n          addr := mload(add(_bytes, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytesToBytes32(bytes memory _bytes) private pure returns (bytes32 _bytes32) {\\r\\n        assembly {\\r\\n          _bytes32 := mload(add(_bytes, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get parameters of many collaterals\\r\\n     * @param assets asset addresses\\r\\n     * @param owner owner address\\r\\n     */\\r\\n    function getMultiCollateralParameters(address[] calldata assets, address owner)\\r\\n        external\\r\\n        view\\r\\n        returns (CollateralParameters[] memory r)\\r\\n    {\\r\\n        uint length = assets.length;\\r\\n        r = new CollateralParameters[](length);\\r\\n        for (uint i = 0; i < length; ++i) {\\r\\n            r[i] = getCollateralParameters(assets[i], owner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get details of many token\\r\\n     * @param assets token addresses\\r\\n     * @param owner owner address\\r\\n     */\\r\\n    function getMultiTokenDetails(address[] calldata assets, address owner)\\r\\n        external\\r\\n        view\\r\\n        returns (TokenDetails[] memory r)\\r\\n    {\\r\\n        uint length = assets.length;\\r\\n        r = new TokenDetails[](length);\\r\\n        for (uint i = 0; i < length; ++i) {\\r\\n            r[i] = getTokenDetails(assets[i], owner);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVault {\\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\\n    function chargeFee ( address asset, address user, uint256 amount ) external;\\n    function col (  ) external view returns ( address );\\n    function colToken ( address, address ) external view returns ( uint256 );\\n    function collaterals ( address, address ) external view returns ( uint256 );\\n    function debts ( address, address ) external view returns ( uint256 );\\n    function depositCol ( address asset, address user, uint256 amount ) external;\\n    function depositEth ( address user ) external payable;\\n    function depositMain ( address asset, address user, uint256 amount ) external;\\n    function destroy ( address asset, address user ) external;\\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\\n    function liquidationFee ( address, address ) external view returns ( uint256 );\\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\\n    function oracleType ( address, address ) external view returns ( uint256 );\\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\\n    function stabilityFee ( address, address ) external view returns ( uint256 );\\n    function tokenDebts ( address ) external view returns ( uint256 );\\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\\n    function update ( address asset, address user ) external;\\n    function usdp (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n    function weth (  ) external view returns ( address payable );\\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\\n    function withdrawEth ( address user, uint256 amount ) external;\\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultParameters {\\n    function canModifyVault ( address ) external view returns ( bool );\\n    function foundation (  ) external view returns ( address );\\n    function isManager ( address ) external view returns ( bool );\\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\\n    function liquidationFee ( address ) external view returns ( uint256 );\\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\\n    function setManager ( address who, bool permit ) external;\\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\\n    function setStabilityFee ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\\n    function setVaultAccess ( address who, bool permit ) external;\\n    function stabilityFee ( address ) external view returns ( uint256 );\\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ninterface IVaultManagerParameters {\\r\\n    function devaluationPeriod ( address ) external view returns ( uint256 );\\r\\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\\r\\n    function liquidationDiscount ( address ) external view returns ( uint256 );\\r\\n    function liquidationRatio ( address ) external view returns ( uint256 );\\r\\n    function maxColPercent ( address ) external view returns ( uint256 );\\r\\n    function minColPercent ( address ) external view returns ( uint256 );\\r\\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\\r\\n    function setCollateral (\\r\\n        address asset,\\r\\n        uint256 stabilityFeeValue,\\r\\n        uint256 liquidationFeeValue,\\r\\n        uint256 initialCollateralRatioValue,\\r\\n        uint256 liquidationRatioValue,\\r\\n        uint256 liquidationDiscountValue,\\r\\n        uint256 devaluationPeriodValue,\\r\\n        uint256 usdpLimit,\\r\\n        uint256[] calldata oracles,\\r\\n        uint256 minColP,\\r\\n        uint256 maxColP\\r\\n    ) external;\\r\\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\\r\\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\\r\\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\\r\\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\\r\\n    function vaultParameters (  ) external view returns ( address );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ninterface IVaultManagerBorrowFeeParameters {\\r\\n\\r\\n    /**\\r\\n     * @notice 1 = 100% = 10000 basis points\\r\\n     **/\\r\\n    function BASIS_POINTS_IN_1() external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Borrow fee receiver\\r\\n     **/\\r\\n    function feeReceiver() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the borrow fee receiver. Only manager is able to call this function\\r\\n     * @param newFeeReceiver The address of fee receiver\\r\\n     **/\\r\\n    function setFeeReceiver(address newFeeReceiver) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the base borrow fee in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\r\\n     * @param newBaseBorrowFeeBasisPoints The borrow fee in basis points\\r\\n     **/\\r\\n    function setBaseBorrowFee(uint16 newBaseBorrowFeeBasisPoints) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the borrow fee for a particular collateral in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\r\\n     * @param asset The address of the main collateral token\\r\\n     * @param newEnabled Is custom fee enabled for asset\\r\\n     * @param newFeeBasisPoints The borrow fee in basis points\\r\\n     **/\\r\\n    function setAssetBorrowFee(address asset, bool newEnabled, uint16 newFeeBasisPoints) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns borrow fee for particular collateral in basis points (1bp = 0.01% = 0.0001)\\r\\n     * @param asset The address of the main collateral token\\r\\n     * @return feeBasisPoints The borrow fee in basis points\\r\\n     **/\\r\\n    function getBorrowFee(address asset) external view returns (uint16 feeBasisPoints);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns borrow fee for usdp amount for particular collateral\\r\\n     * @param asset The address of the main collateral token\\r\\n     * @return The borrow fee\\r\\n     **/\\r\\n    function calcBorrowFeeAmount(address asset, uint usdpAmount) external view returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IOracleRegistry {\\n\\n    struct Oracle {\\n        uint oracleType;\\n        address oracleAddress;\\n    }\\n\\n    function WETH (  ) external view returns ( address );\\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\\n    function maxOracleType (  ) external view returns ( uint256 );\\n    function oracleByAsset ( address asset ) external view returns ( address );\\n    function oracleByType ( uint256 ) external view returns ( address );\\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\\n    function setOracle ( uint256 oracleType, address oracle ) external;\\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\\n    function unsetOracle ( uint256 oracleType ) external;\\n    function unsetOracleForAsset ( address asset ) external;\\n    function unsetOracleForAssets ( address[] memory assets ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/IWrappedAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWrappedAsset is IERC20 /* IERC20WithOptional */ {\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event PositionMoved(address indexed userFrom, address indexed userTo, uint256 amount);\\r\\n\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event TokenWithdraw(address indexed user, address token, uint256 amount);\\r\\n\\r\\n    event FeeChanged(uint256 newFeePercent);\\r\\n    event FeeReceiverChanged(address newFeeReceiver);\\r\\n    event AllowedBoneLockerSelectorAdded(address boneLocker, bytes4 selector);\\r\\n    event AllowedBoneLockerSelectorRemoved(address boneLocker, bytes4 selector);\\r\\n\\r\\n    /**\\r\\n     * @notice Get underlying token\\r\\n     */\\r\\n    function getUnderlyingToken() external view returns (IERC20);\\r\\n\\r\\n    /**\\r\\n     * @notice deposit underlying token and send wrapped token to user\\r\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\r\\n     */\\r\\n    function deposit(address _userAddr, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get wrapped token and return underlying\\r\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\r\\n     */\\r\\n    function withdraw(address _userAddr, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get pending reward amount for user if reward is supported\\r\\n     */\\r\\n    function pendingReward(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice claim pending reward for user if reward is supported\\r\\n     */\\r\\n    function claimReward(address _userAddr) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Manually move position (or its part) to another user (for example in case of liquidation)\\r\\n     * @dev Important! Only trusted contracts must be able to call this method\\r\\n     */\\r\\n    function movePosition(address _userAddrFrom, address _userAddrTo, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev function for checks that asset is unitprotocol wrapped asset.\\r\\n     * @dev For wrapped assets must return keccak256(\\\"UnitProtocolWrappedAsset\\\")\\r\\n     */\\r\\n    function isUnitProtocolWrappedAsset() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/helpers/IUniswapV2PairFull.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\ninterface IUniswapV2PairFull {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/ERC20Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\ninterface ERC20Like {\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint8);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManagerBorrowFeeParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"tokenDebtLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"devaluationPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"initialCollateralRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"borrowFee\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"}],\"internalType\":\"struct CDPViewer.CDP\",\"name\":\"cdp\",\"type\":\"tuple\"}],\"internalType\":\"struct CDPViewer.CollateralParameters\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMultiCollateralParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"tokenDebtLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"devaluationPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"initialCollateralRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"borrowFee\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"}],\"internalType\":\"struct CDPViewer.CDP\",\"name\":\"cdp\",\"type\":\"tuple\"}],\"internalType\":\"struct CDPViewer.CollateralParameters[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMultiTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address[2]\",\"name\":\"lpUnderlyings\",\"type\":\"address[2]\"},{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"underlyingTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"underlyingTokenUniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"underlyingTokenUnderlyings\",\"type\":\"address[2]\"}],\"internalType\":\"struct CDPViewer.TokenDetails[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address[2]\",\"name\":\"lpUnderlyings\",\"type\":\"address[2]\"},{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"underlyingTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"underlyingTokenUniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"underlyingTokenUnderlyings\",\"type\":\"address[2]\"}],\"internalType\":\"struct CDPViewer.TokenDetails\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IOracleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerBorrowFeeParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerBorrowFeeParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract IVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CDPViewer", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e00000000000000000000000075fbfe26b21fd3ea008af0c764949f8214150c8f000000000000000000000000cba7154bfbf898d9ab0cf0e259abab6ccbfb4894", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}