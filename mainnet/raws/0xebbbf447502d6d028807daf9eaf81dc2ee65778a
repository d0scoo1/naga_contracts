{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.8.7;\r\n\r\n\r\n// SPDX-License-Identifier: Unlicense\r\ninterface ITraits {\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IDogewood {\r\n    // struct to store each token's traits\r\n    struct Doge2 {\r\n        uint8 head;\r\n        uint8 breed;\r\n        uint8 color;\r\n        uint8 class;\r\n        uint8 armor;\r\n        uint8 offhand;\r\n        uint8 mainhand;\r\n        uint16 level;\r\n        uint16 breedRerollCount;\r\n        uint16 classRerollCount;\r\n    }\r\n\r\n    function getTokenTraits(uint256 tokenId) external view returns (Doge2 memory);\r\n    function getGenesisSupply() external view returns (uint256);\r\n    function pull(address owner, uint256[] calldata ids) external;\r\n    function manuallyAdjustDoge(uint256 id, uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level, uint16 breedRerollCount, uint16 classRerollCount) external;\r\n    function transfer(address to, uint256 tokenId) external;\r\n    // function doges(uint256 id) external view returns(uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n}\r\n\r\n// interface DogeLike {\r\n//     function pull(address owner, uint256[] calldata ids) external;\r\n//     function manuallyAdjustDoge(uint256 id, uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level) external;\r\n//     function transfer(address to, uint256 tokenId) external;\r\n//     function doges(uint256 id) external view returns(uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n// }\r\ninterface PortalLike {\r\n    function sendMessage(bytes calldata message_) external;\r\n}\r\n\r\ninterface CastleLike {\r\n    function pullCallback(address owner, uint256[] calldata ids) external;\r\n}\r\n\r\n// interface DogewoodLike {\r\n//     function ownerOf(uint256 id) external view returns (address owner_);\r\n//     function activities(uint256 id) external view returns (address owner, uint88 timestamp, uint8 action);\r\n//     function doges(uint256 dogeId) external view returns (uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n// }\r\ninterface ERC20Like {\r\n    function balanceOf(address from) external view returns(uint256 balance);\r\n    function burn(address from, uint256 amount) external;\r\n    function mint(address from, uint256 amount) external;\r\n    function transfer(address to, uint256 amount) external;\r\n}\r\n\r\ninterface ERC1155Like {\r\n    function mint(address to, uint256 id, uint256 amount) external;\r\n    function burn(address from, uint256 id, uint256 amount) external;\r\n}\r\n\r\ninterface ERC721Like {\r\n    function transferFrom(address from, address to, uint256 id) external;   \r\n    function transfer(address to, uint256 id) external;\r\n    function ownerOf(uint256 id) external returns (address owner);\r\n    function mint(address to, uint256 tokenid) external;\r\n}\r\n\r\n/// @dev A simple contract to orchestrate comings and going from the DogewoodPortal\r\ncontract Castle {\r\n\r\n    address implementation_;\r\n    address public admin;\r\n    \r\n    address public portal;\r\n    address public dogewood;\r\n    address public treat;\r\n\r\n    mapping (address => address) public reflection;\r\n    mapping (uint256 => address) public dogeOwner;\r\n\r\n    function initialize(address portal_, address dogewood_, address treat_) external {\r\n        require(msg.sender == admin);\r\n        portal = portal_;\r\n        dogewood   = dogewood_;\r\n        treat = treat_;\r\n    }\r\n\r\n    function setReflection(address key_, address reflection_) external {\r\n        require(msg.sender == admin);\r\n        reflection[key_] = reflection_;\r\n        reflection[reflection_] = key_;\r\n    }\r\n\r\n    /// @dev Send Doges and tokens to PolyLand\r\n    function travel(uint256[] calldata dogeIds, uint256 treatAmount) external {\r\n        address target = reflection[address(this)];\r\n\r\n        uint256 dogesLen   = dogeIds.length;\r\n        uint256 currIndex = 0;\r\n\r\n        bytes[] memory calls = new bytes[]((dogesLen > 0 ? dogesLen + 1 : 0) + (treatAmount > 0 ? 1 : 0));\r\n\r\n        if (dogesLen > 0) {\r\n            _pullIds(dogewood, dogeIds);\r\n\r\n            // This will create doges exactly as they exist in this chain\r\n            for (uint256 i = 0; i < dogeIds.length; i++) {\r\n                calls[i] = _buildData(dogeIds[i]);\r\n            }\r\n\r\n            calls[dogesLen] = abi.encodeWithSelector(this.unstakeMany.selector,reflection[dogewood], msg.sender,  dogeIds);\r\n            currIndex += dogesLen + 1;\r\n        }\r\n\r\n        if (treatAmount > 0) {\r\n            ERC20Like(treat).burn(msg.sender, treatAmount);\r\n            calls[currIndex] = abi.encodeWithSelector(this.mintToken.selector, reflection[address(treat)], msg.sender, treatAmount);\r\n            currIndex++;\r\n        }\r\n\r\n        PortalLike(portal).sendMessage(abi.encode(target, calls));\r\n    }\r\n\r\n    function callDogewood(bytes calldata data) external {\r\n        _onlyPortal();\r\n\r\n        (bool succ, ) = dogewood.call(data);\r\n        require(succ);\r\n    }\r\n\r\n    event D(uint tt);\r\n    event DAD(address al);\r\n\r\n    function unstakeMany(address token, address owner, uint256[] calldata ids) external {\r\n        _onlyPortal();\r\n\r\n        emit DAD(token);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {  \r\n            emit D(ids[i]);\r\n            if (token == dogewood)   delete dogeOwner[ids[i]];\r\n            ERC721Like(token).transfer(owner, ids[i]);\r\n        }\r\n    }\r\n\r\n    function mintToken(address token, address to, uint256 amount) external { \r\n        _onlyPortal();\r\n\r\n        ERC20Like(token).mint(to, amount);\r\n    }\r\n\r\n    function _pullIds(address token, uint256[] calldata ids) internal {\r\n        // The ownership will be checked to the token contract\r\n        IDogewood(token).pull(msg.sender, ids);\r\n    }\r\n\r\n    function pullCallback(address owner, uint256[] calldata ids) external {\r\n        require(msg.sender == dogewood);\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _stake(msg.sender, ids[i], owner);\r\n        }\r\n    }\r\n\r\n    function _buildData(uint256 id) internal view returns (bytes memory data) {\r\n        // (uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n        IDogewood.Doge2 memory doge_ = IDogewood(dogewood).getTokenTraits(id);\r\n        data = abi.encodeWithSelector(this.callDogewood.selector, abi.encodeWithSelector(IDogewood.manuallyAdjustDoge.selector, id, doge_.head, doge_.breed, doge_.color, doge_.class, doge_.armor, doge_.offhand, doge_.mainhand, doge_.level, doge_.breedRerollCount, doge_.classRerollCount));\r\n    }\r\n\r\n    function _stake(address token, uint256 id, address owner) internal {\r\n        require(dogeOwner[id] == address(0), \"already staked\");\r\n        require(msg.sender == token, \"not dogewood contract\");\r\n        require(ERC721Like(token).ownerOf(id) == address(this), \"doge not transferred\");\r\n\r\n        if (token == dogewood)   dogeOwner[id]  = owner;\r\n    }\r\n\r\n    function _onlyPortal() view internal {\r\n        require(msg.sender == portal, \"not portal\");\r\n    } \r\n\r\n    /// @notice dev method to track migration process\r\n    function _emergencyBuildData(uint256 id) external view returns (bytes memory data) {\r\n        require(msg.sender == admin, \"not admin\");\r\n        return _buildData(id);\r\n    } \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tt\",\"type\":\"uint256\"}],\"name\":\"D\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"al\",\"type\":\"address\"}],\"name\":\"DAD\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"_emergencyBuildData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callDogewood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dogeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogewood\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"portal_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dogewood_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treat_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"pullCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reflection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reflection_\",\"type\":\"address\"}],\"name\":\"setReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dogeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"treatAmount\",\"type\":\"uint256\"}],\"name\":\"travel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Castle", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://402237e45c556cb3dfa6e805702652f4646420d55aec906e673b5a382f019397"}]}