{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.10;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IDFSRegistry {\r\n \r\n    function getAddr(bytes4 _id) public view virtual returns (address);\r\n\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public virtual;\r\n\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\r\n\r\n    function approveContractChange(bytes32 _id) public virtual;\r\n\r\n    function cancelContractChange(bytes32 _id) public virtual;\r\n\r\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256 digits);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n    //insufficient balance\r\n    error InsufficientBalance(uint256 available, uint256 required);\r\n    //unable to send value, recipient may have reverted\r\n    error SendingValueFail();\r\n    //insufficient balance for call\r\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\r\n    //call to non-contract\r\n    error NonContractCall();\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < amount){\r\n            revert InsufficientBalance(balance, amount);\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!(success)){\r\n            revert SendingValueFail();\r\n        }\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < value){\r\n            revert InsufficientBalanceForCall(balance, value);\r\n        }\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        if (!(isContract(target))){\r\n            revert NonContractCall();\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetAuthAddresses {\r\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\r\n    address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AuthHelper is MainnetAuthAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminVault is AuthHelper {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    error SenderNotAdmin();\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        admin = ADMIN_ADDR;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function changeOwner(address _owner) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function changeAdmin(address _admin) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        admin = _admin;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminAuth is AuthHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\r\n\r\n    error SenderNotOwner();\r\n    error SenderNotAdmin();\r\n\r\n    modifier onlyOwner() {\r\n        if (adminVault.owner() != msg.sender){\r\n            revert SenderNotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (adminVault.admin() != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(_receiver).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyAdmin {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSRegistry is AdminAuth {\r\n    error EntryAlreadyExistsError(bytes4);\r\n    error EntryNonExistentError(bytes4);\r\n    error EntryNotInChangeError(bytes4);\r\n    error ChangeNotReadyError(uint256,uint256);\r\n    error EmptyPrevAddrError(bytes4);\r\n    error AlreadyInContractChangeError(bytes4);\r\n    error AlreadyInWaitPeriodChangeError(bytes4);\r\n\r\n    event AddNewContract(address,bytes4,address,uint256);\r\n    event RevertToPreviousAddress(address,bytes4,address,address);\r\n    event StartContractChange(address,bytes4,address,address);\r\n    event ApproveContractChange(address,bytes4,address,address);\r\n    event CancelContractChange(address,bytes4,address,address);\r\n    event StartWaitPeriodChange(address,bytes4,uint256);\r\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\r\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\r\n\r\n    struct Entry {\r\n        address contractAddr;\r\n        uint256 waitPeriod;\r\n        uint256 changeStartTime;\r\n        bool inContractChange;\r\n        bool inWaitPeriodChange;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes4 => Entry) public entries;\r\n    mapping(bytes4 => address) public previousAddresses;\r\n\r\n    mapping(bytes4 => address) public pendingAddresses;\r\n    mapping(bytes4 => uint256) public pendingWaitTimes;\r\n\r\n    /// @notice Given an contract id returns the registered address\r\n    /// @dev Id is keccak256 of the contract name\r\n    /// @param _id Id of contract\r\n    function getAddr(bytes4 _id) public view returns (address) {\r\n        return entries[_id].contractAddr;\r\n    }\r\n\r\n    /// @notice Helper function to easily query if id is registered\r\n    /// @param _id Id of contract\r\n    function isRegistered(bytes4 _id) public view returns (bool) {\r\n        return entries[_id].exists;\r\n    }\r\n\r\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\r\n\r\n    /// @notice Adds a new contract to the registry\r\n    /// @param _id Id of contract\r\n    /// @param _contractAddr Address of the contract\r\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\r\n    function addNewContract(\r\n        bytes4 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public onlyOwner {\r\n        if (entries[_id].exists){\r\n            revert EntryAlreadyExistsError(_id);\r\n        }\r\n\r\n        entries[_id] = Entry({\r\n            contractAddr: _contractAddr,\r\n            waitPeriod: _waitPeriod,\r\n            changeStartTime: 0,\r\n            inContractChange: false,\r\n            inWaitPeriodChange: false,\r\n            exists: true\r\n        });\r\n\r\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\r\n    }\r\n\r\n    /// @notice Reverts to the previous address immediately\r\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\r\n    /// @param _id Id of contract\r\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\r\n        if (!(entries[_id].exists)){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (previousAddresses[_id] == address(0)){\r\n            revert EmptyPrevAddrError(_id);\r\n        }\r\n\r\n        address currentAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = previousAddresses[_id];\r\n\r\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\r\n    }\r\n\r\n    /// @notice Starts an address change for an existing entry\r\n    /// @dev Can override a change that is currently in progress\r\n    /// @param _id Id of contract\r\n    /// @param _newContractAddr Address of the new contract\r\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inWaitPeriodChange){\r\n            revert AlreadyInWaitPeriodChangeError(_id);\r\n        }\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inContractChange = true;\r\n\r\n        pendingAddresses[_id] = _newContractAddr;\r\n\r\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\r\n    }\r\n\r\n    /// @notice Changes new contract address, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        address oldContractAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = pendingAddresses[_id];\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        previousAddresses[_id] = oldContractAddr;\r\n\r\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Cancel pending change\r\n    /// @param _id Id of contract\r\n    function cancelContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        address oldContractAddr = pendingAddresses[_id];\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Starts the change for waitPeriod\r\n    /// @param _id Id of contract\r\n    /// @param _newWaitPeriod New wait time\r\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inContractChange){\r\n            revert AlreadyInContractChangeError(_id);\r\n        }\r\n\r\n        pendingWaitTimes[_id] = _newWaitPeriod;\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inWaitPeriodChange = true;\r\n\r\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\r\n    }\r\n\r\n    /// @notice Changes new wait period, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        uint256 oldWaitTime = entries[_id].waitPeriod;\r\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\r\n        \r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n\r\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\r\n    }\r\n\r\n    /// @notice Cancel wait period change\r\n    /// @param _id Id of contract\r\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract StrategyModel {\r\n        \r\n    /// @dev Group of strategies bundled together so user can sub to multiple strategies at once\r\n    /// @param creator Address of the user who created the bundle\r\n    /// @param strategyIds Array of strategy ids stored in StrategyStorage\r\n    struct StrategyBundle {\r\n        address creator;\r\n        uint64[] strategyIds;\r\n    }\r\n\r\n    /// @dev Template/Class which defines a Strategy\r\n    /// @param name Name of the strategy useful for logging what strategy is executing\r\n    /// @param creator Address of the user which created the strategy\r\n    /// @param triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\r\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\r\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\r\n    /// @param continuous If the action is repeated (continuos) or one time\r\n    struct Strategy {\r\n        string name;\r\n        address creator;\r\n        bytes4[] triggerIds;\r\n        bytes4[] actionIds;\r\n        uint8[][] paramMapping;\r\n        bool continuous;\r\n    }\r\n\r\n    /// @dev List of actions grouped as a recipe\r\n    /// @param name Name of the recipe useful for logging what recipe is executing\r\n    /// @param callData Array of calldata inputs to each action\r\n    /// @param subData Used only as part of strategy, subData injected from StrategySub.subData\r\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\r\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\r\n    struct Recipe {\r\n        string name;\r\n        bytes[] callData;\r\n        bytes32[] subData;\r\n        bytes4[] actionIds;\r\n        uint8[][] paramMapping;\r\n    }\r\n\r\n    /// @dev Actual data of the sub we store on-chain\r\n    /// @dev In order to save on gas we store a keccak256(StrategySub) and verify later on\r\n    /// @param userProxy Address of the users smart wallet/proxy\r\n    /// @param isEnabled Toggle if the subscription is active\r\n    /// @param strategySubHash Hash of the StrategySub data the user inputted\r\n    struct StoredSubData {\r\n        bytes20 userProxy; // address but put in bytes20 for gas savings\r\n        bool isEnabled;\r\n        bytes32 strategySubHash;\r\n    }\r\n\r\n    /// @dev Instance of a strategy, user supplied data\r\n    /// @param strategyOrBundleId Id of the strategy or bundle, depending on the isBundle bool\r\n    /// @param isBundle If true the id points to bundle, if false points directly to strategyId\r\n    /// @param triggerData User supplied data needed for checking trigger conditions\r\n    /// @param subData User supplied data used in recipe\r\n    struct StrategySub {\r\n        uint64 strategyOrBundleId;\r\n        bool isBundle;\r\n        bytes[] triggerData;\r\n        bytes32[] subData;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StrategyStorage is StrategyModel, AdminAuth {\r\n\r\n    Strategy[] public strategies;\r\n    bool public openToPublic = false;\r\n\r\n    error NoAuthToCreateStrategy(address,bool);\r\n    event StrategyCreated(uint256 indexed strategyId);\r\n\r\n    modifier onlyAuthCreators {\r\n        if (adminVault.owner() != msg.sender && openToPublic == false) {\r\n            revert NoAuthToCreateStrategy(msg.sender, openToPublic);\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /// @notice Creates a new strategy and writes the data in an array\r\n    /// @dev Can only be called by auth addresses if it's not open to public\r\n    /// @param _name Name of the strategy useful for logging what strategy is executing\r\n    /// @param _triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\r\n    /// @param _actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\r\n    /// @param _paramMapping Describes how inputs to functions are piped from return/subbed values\r\n    /// @param _continuous If the action is repeated (continuos) or one time\r\n    function createStrategy(\r\n        string memory _name,\r\n        bytes4[] memory _triggerIds,\r\n        bytes4[] memory _actionIds,\r\n        uint8[][] memory _paramMapping,\r\n        bool _continuous\r\n    ) public onlyAuthCreators returns (uint256) {\r\n        strategies.push(Strategy({\r\n                name: _name,\r\n                creator: msg.sender,\r\n                triggerIds: _triggerIds,\r\n                actionIds: _actionIds,\r\n                paramMapping: _paramMapping,\r\n                continuous : _continuous\r\n        }));\r\n\r\n        emit StrategyCreated(strategies.length - 1);\r\n\r\n        return strategies.length - 1;\r\n    }\r\n\r\n    /// @notice Switch to determine if bundles can be created by anyone\r\n    /// @dev Callable only by the owner\r\n    /// @param _openToPublic Flag if true anyone can create bundles\r\n    function changeEditPermission(bool _openToPublic) public onlyOwner {\r\n        openToPublic = _openToPublic;\r\n    }\r\n\r\n    ////////////////////////////// VIEW METHODS /////////////////////////////////\r\n\r\n    function getStrategy(uint _strategyId) public view returns (Strategy memory) {\r\n        return strategies[_strategyId];\r\n    }\r\n    function getStrategyCount() public view returns (uint256) {\r\n        return strategies.length;\r\n    }\r\n\r\n    function getPaginatedStrategies(uint _page, uint _perPage) public view returns (Strategy[] memory) {\r\n        Strategy[] memory strategiesPerPage = new Strategy[](_perPage);\r\n\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        end = (end > strategies.length) ? strategies.length : end;\r\n\r\n        uint count = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            strategiesPerPage[count] = strategies[i];\r\n            count++;\r\n        }\r\n\r\n        return strategiesPerPage;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetCoreAddresses {\r\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\r\n    address internal constant PROXY_AUTH_ADDR = 0xD489FfAEEB46b2d7E377850d45E1F8cA3350fc82;\r\n    address internal constant DEFISAVER_LOGGER = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\r\n\r\n    address internal constant SUB_STORAGE_ADDR = 0x0a5e900E8261F826484BD96F0da564C5bB365Ffa;\r\n    address internal constant BUNDLE_STORAGE_ADDR = 0x223c6aDE533851Df03219f6E3D8B763Bd47f84cf;\r\n    address internal constant STRATEGY_STORAGE_ADDR = 0xF52551F95ec4A2B4299DcC42fbbc576718Dbf933;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract CoreHelper is MainnetCoreAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BundleStorage is StrategyModel, AdminAuth, CoreHelper {\r\n\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    StrategyBundle[] public bundles;\r\n    bool public openToPublic = false;\r\n\r\n    error NoAuthToCreateBundle(address,bool);\r\n    error DiffTriggersInBundle(uint64[]);\r\n\r\n    event BundleCreated(uint256 indexed bundleId);\r\n\r\n    modifier onlyAuthCreators {\r\n        if (adminVault.owner() != msg.sender && openToPublic == false) {\r\n            revert NoAuthToCreateBundle(msg.sender, openToPublic);\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev Checks if the triggers in strategies are the same (order also relevant)\r\n    /// @dev If the caller is not owner we do additional checks, we skip those checks for gas savings\r\n    modifier sameTriggers(uint64[] memory _strategyIds) {\r\n        if (msg.sender != adminVault.owner()) {\r\n            Strategy memory firstStrategy = StrategyStorage(STRATEGY_STORAGE_ADDR).getStrategy(_strategyIds[0]);\r\n\r\n            bytes32 firstStrategyTriggerHash = keccak256(abi.encode(firstStrategy.triggerIds));\r\n\r\n            for (uint256 i = 1; i < _strategyIds.length; ++i) {\r\n                Strategy memory s = StrategyStorage(STRATEGY_STORAGE_ADDR).getStrategy(_strategyIds[i]);\r\n\r\n                if (firstStrategyTriggerHash != keccak256(abi.encode(s.triggerIds))) {\r\n                    revert DiffTriggersInBundle(_strategyIds);\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /// @notice Adds a new bundle to array\r\n    /// @dev Can only be called by auth addresses if it's not open to public\r\n    /// @dev Strategies need to have the same number of triggers and ids exists\r\n    /// @param _strategyIds Array of strategyIds that go into a bundle\r\n    function createBundle(\r\n        uint64[] memory _strategyIds\r\n    ) public onlyAuthCreators sameTriggers(_strategyIds) returns (uint256) {\r\n\r\n        bundles.push(StrategyBundle({\r\n            creator: msg.sender,\r\n            strategyIds: _strategyIds\r\n        }));\r\n\r\n        emit BundleCreated(bundles.length - 1);\r\n\r\n        return bundles.length - 1;\r\n    }\r\n\r\n    /// @notice Switch to determine if bundles can be created by anyone\r\n    /// @dev Callable only by the owner\r\n    /// @param _openToPublic Flag if true anyone can create bundles\r\n    function changeEditPermission(bool _openToPublic) public onlyOwner {\r\n        openToPublic = _openToPublic;\r\n    }\r\n\r\n    ////////////////////////////// VIEW METHODS /////////////////////////////////\r\n\r\n    function getStrategyId(uint256 _bundleId, uint256 _strategyIndex) public view returns (uint256) {\r\n        return bundles[_bundleId].strategyIds[_strategyIndex];\r\n    }\r\n\r\n    function getBundle(uint _bundleId) public view returns (StrategyBundle memory) {\r\n        return bundles[_bundleId];\r\n    }\r\n    function getBundleCount() public view returns (uint256) {\r\n        return bundles.length;\r\n    }\r\n\r\n    function getPaginatedBundles(uint _page, uint _perPage) public view returns (StrategyBundle[] memory) {\r\n        StrategyBundle[] memory bundlesPerPage = new StrategyBundle[](_perPage);\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        end = (end > bundles.length) ? bundles.length : end;\r\n\r\n        uint count = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            bundlesPerPage[count] = bundles[i];\r\n            count++;\r\n        }\r\n\r\n        return bundlesPerPage;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SubStorage is StrategyModel, AdminAuth, CoreHelper {\r\n    error SenderNotSubOwnerError(address, uint256);\r\n    error UserPositionsEmpty();\r\n    error SubIdOutOfRange(uint256, bool);\r\n\r\n    event Subscribe(uint256 indexed subId, address indexed proxy, bytes32 indexed subHash, StrategySub subStruct);\r\n    event UpdateData(uint256 indexed subId, bytes32 indexed subHash, StrategySub subStruct);\r\n    event ActivateSub(uint256 indexed subId);\r\n    event DeactivateSub(uint256 indexed subId);\r\n\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    StoredSubData[] public strategiesSubs;\r\n\r\n    /// @notice Checks if subId is init. and if the sender is the owner\r\n    modifier onlySubOwner(uint256 _subId) {\r\n        if (address(strategiesSubs[_subId].userProxy) != msg.sender) {\r\n            revert SenderNotSubOwnerError(msg.sender, _subId);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks if the id is valid (points to a stored bundle/sub)\r\n    modifier isValidId(uint256 _id, bool _isBundle) {\r\n        if (_isBundle) {\r\n            if (_id > (BundleStorage(BUNDLE_STORAGE_ADDR).getBundleCount() - 1)) {\r\n                revert SubIdOutOfRange(_id, _isBundle);\r\n            }\r\n        } else {\r\n            if (_id > (StrategyStorage(STRATEGY_STORAGE_ADDR).getStrategyCount() - 1)) {\r\n                revert SubIdOutOfRange(_id, _isBundle);\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /// @notice Adds users info and records StoredSubData, logs StrategySub\r\n    /// @dev To save on gas we don't store the whole struct but rather the hash of the struct\r\n    /// @param _sub Subscription struct of the user (is not stored on chain, only the hash)\r\n    function subscribeToStrategy(\r\n        StrategySub memory _sub\r\n    ) public isValidId(_sub.strategyOrBundleId, _sub.isBundle) returns (uint256) {\r\n\r\n        bytes32 subStorageHash = keccak256(abi.encode(_sub));\r\n\r\n        strategiesSubs.push(StoredSubData(\r\n            bytes20(msg.sender),\r\n            true,\r\n            subStorageHash\r\n        ));\r\n\r\n        uint256 currentId = strategiesSubs.length - 1;\r\n\r\n        emit Subscribe(currentId, msg.sender, subStorageHash, _sub);\r\n\r\n        return currentId;\r\n    }\r\n\r\n    /// @notice Updates the users subscription data\r\n    /// @dev Only callable by proxy who created the sub.\r\n    /// @param _subId Id of the subscription to update\r\n    /// @param _sub Subscription struct of the user (needs whole struct so we can hash it)\r\n    function updateSubData(\r\n        uint256 _subId,\r\n        StrategySub calldata _sub\r\n    ) public onlySubOwner(_subId) isValidId(_sub.strategyOrBundleId, _sub.isBundle)  {\r\n        StoredSubData storage storedSubData = strategiesSubs[_subId];\r\n\r\n        bytes32 subStorageHash = keccak256(abi.encode(_sub));\r\n\r\n        storedSubData.strategySubHash = subStorageHash;\r\n\r\n        emit UpdateData(_subId, subStorageHash, _sub);\r\n    }\r\n\r\n    /// @notice Enables the subscription for execution if disabled\r\n    /// @dev Must own the sub. to be able to enable it\r\n    /// @param _subId Id of subscription to enable\r\n    function activateSub(\r\n        uint _subId\r\n    ) public onlySubOwner(_subId) {\r\n        StoredSubData storage sub = strategiesSubs[_subId];\r\n\r\n        sub.isEnabled = true;\r\n\r\n        emit ActivateSub(_subId);\r\n    }\r\n\r\n    /// @notice Disables the subscription (will not be able to execute the strategy for the user)\r\n    /// @dev Must own the sub. to be able to disable it\r\n    /// @param _subId Id of subscription to disable\r\n    function deactivateSub(\r\n        uint _subId\r\n    ) public onlySubOwner(_subId) {\r\n        StoredSubData storage sub = strategiesSubs[_subId];\r\n\r\n        sub.isEnabled = false;\r\n\r\n        emit DeactivateSub(_subId);\r\n    }\r\n\r\n    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\r\n\r\n    function getSub(uint _subId) public view returns (StoredSubData memory) {\r\n        return strategiesSubs[_subId];\r\n    }\r\n\r\n    function getSubsCount() public view returns (uint256) {\r\n        return strategiesSubs.length;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SenderNotSubOwnerError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"SubIdOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserPositionsEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"ActivateSub\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"DeactivateSub\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"strategyOrBundleId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isBundle\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"triggerData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct StrategyModel.StrategySub\",\"name\":\"subStruct\",\"type\":\"tuple\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"strategyOrBundleId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isBundle\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"triggerData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct StrategyModel.StrategySub\",\"name\":\"subStruct\",\"type\":\"tuple\"}],\"name\":\"UpdateData\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"}],\"name\":\"activateSub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"}],\"name\":\"deactivateSub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"}],\"name\":\"getSub\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes20\",\"name\":\"userProxy\",\"type\":\"bytes20\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"strategySubHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StrategyModel.StoredSubData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategiesSubs\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"userProxy\",\"type\":\"bytes20\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"strategySubHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"strategyOrBundleId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isBundle\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"triggerData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StrategyModel.StrategySub\",\"name\":\"_sub\",\"type\":\"tuple\"}],\"name\":\"subscribeToStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"strategyOrBundleId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isBundle\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"triggerData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StrategyModel.StrategySub\",\"name\":\"_sub\",\"type\":\"tuple\"}],\"name\":\"updateSubData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SubStorage", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90269fca1257cadf6d06a0b672174d175760e38cc5418e2ee7043b47631449ab"}]}