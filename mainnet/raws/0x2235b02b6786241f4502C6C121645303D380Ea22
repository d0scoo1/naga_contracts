{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IngameItems.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Composable.sol\\\";\\n\\ncontract IngameItems is Composable {\\n    mapping(address => uint256) gemMap;\\n    uint256 public gemCount;\\n\\n    mapping(address => uint256) totemMap;\\n    uint256 public totemCount;\\n\\n    mapping(address => uint256) ghostMap;\\n    uint256 public ghostCount;\\n\\n    mapping(uint256 => mapping(address => uint256)) gemWinsByMonsterBattle; \\n    mapping(uint256 => mapping(address => uint256)) totemWinsByMonsterBattle;\\n    mapping(uint256 => mapping(address => uint256)) ghostWinsByMonsterBattle;\\n\\n    function getGemWinsInMonsterBattle(uint256 battleId, address winner) external returns (uint256) {\\n        return gemWinsByMonsterBattle[battleId][winner];\\n    }\\n\\n    function getTotemWinsInMonsterBattle(uint256 battleId, address winner) external returns (uint256) {\\n        return totemWinsByMonsterBattle[battleId][winner];\\n    }\\n\\n    function getGhostWinsInMonsterBattle(uint256 battleId, address winner) external returns (uint256) {\\n        return ghostWinsByMonsterBattle[battleId][winner];\\n    }\\n\\n    function addGemToPlayer(uint256 battleId, address _address) external onlyComponent {\\n        gemWinsByMonsterBattle[battleId][_address] += 1;\\n        gemMap[_address] += 1;\\n        gemCount++;\\n    }\\n\\n    function removeGemFromPlayer(address _address) external onlyComponent {\\n        if (gemMap[_address] > 0) {\\n            gemMap[_address] -= 1;\\n            gemCount--;\\n        }\\n    }\\n\\n    function moveGem(address fromAddress, address toAddress)\\n        external\\n        onlyComponent\\n    {\\n        if (gemMap[fromAddress] > 0) {\\n            gemMap[fromAddress] -= 1;\\n            gemMap[toAddress] += 1;\\n        }\\n    }\\n\\n    function adminAddGemToPlayerForBattle(uint256 battleId, address _address) external onlyOwner {\\n        gemWinsByMonsterBattle[battleId][_address] += 1;\\n        gemMap[_address] += 1;\\n        gemCount++;\\n    }\\n\\n    function adminAddGemToPlayer(address _address) external onlyOwner {\\n        gemMap[_address] += 1;\\n        gemCount++;\\n    }\\n\\n    function viewGemCountForPlayer(address owner) public view returns (uint256){\\n        return gemMap[owner];\\n    }\\n\\n    // Totems\\n\\n    function addTotemToPlayer(uint256 battleId, address _address) external onlyComponent {\\n        totemWinsByMonsterBattle[battleId][_address] += 1;\\n        totemMap[_address] += 1;\\n        totemCount++;\\n    }\\n\\n    function removeTotemFromPlayer(address _address) external onlyComponent {\\n        if (totemMap[_address] > 0) {\\n            totemMap[_address] -= 1;\\n            totemCount--;\\n        }\\n    }\\n\\n    function moveTotem(address fromAddress, address toAddress)\\n        external\\n        onlyComponent\\n    {\\n        if (totemMap[fromAddress] > 0) {\\n            totemMap[fromAddress] -= 1;\\n            totemMap[toAddress] += 1;\\n        }\\n    }\\n\\n    function adminAddTotemToPlayerForBattle(uint256 battleId, address _address) external onlyOwner {\\n        totemWinsByMonsterBattle[battleId][_address] += 1;\\n        totemMap[_address] += 1;\\n        totemCount++;\\n    }\\n\\n    function adminAddTotemToPlayer(address _address) external onlyOwner {\\n        totemMap[_address] += 1;\\n        totemCount++;\\n    }\\n\\n    function viewTotemCountForPlayer(address owner) public view returns (uint256){\\n        return totemMap[owner];\\n    }\\n\\n    // Ghost\\n\\n    function addGhostToPlayer(uint256 battleId, address _address) external onlyComponent {\\n        ghostWinsByMonsterBattle[battleId][_address] += 1;\\n        ghostMap[_address] += 1;\\n        ghostCount++;\\n    }\\n\\n    function removeGhostFromPlayer(address _address) external onlyComponent {\\n        if (ghostMap[_address] > 0) {\\n            ghostMap[_address] -= 1;\\n            ghostCount--;\\n        }\\n    }\\n\\n    function moveGhost(address fromAddress, address toAddress)\\n        external\\n        onlyComponent\\n    {\\n        if (ghostMap[fromAddress] > 0) {\\n            ghostMap[fromAddress] -= 1;\\n            ghostMap[toAddress] += 1;\\n        }\\n    }\\n\\n    function adminAddGhostToPlayerForBattle(uint256 battleId, address _address) external onlyOwner {\\n        ghostWinsByMonsterBattle[battleId][_address] += 1;\\n        ghostMap[_address] += 1;\\n        ghostCount++;\\n    }\\n\\n    function adminAddGhostToPlayer(address _address) external onlyOwner {\\n        ghostMap[_address] += 1;\\n        ghostCount++;\\n    }\\n\\n    function viewGhostCountForPlayer(address owner) public view returns (uint256){\\n        return ghostMap[owner];\\n    }\\n\\n    // All\\n    function viewAllCountsForPlayer(address owner) public view returns (uint256[] memory){\\n        uint256[] memory arr = new uint256[](3);\\n        arr[0] = gemMap[owner];\\n        arr[1] = totemMap[owner];\\n        arr[2] = ghostMap[owner];\\n        return arr;\\n    }\\n\\n    function viewAllWinsForPlayerInBattle(uint256 battleId, address owner) public view returns (uint256[] memory){\\n        uint256[] memory arr = new uint256[](3);\\n        arr[0] = gemWinsByMonsterBattle[battleId][owner];\\n        arr[1] = totemWinsByMonsterBattle[battleId][owner];\\n        arr[2] = ghostWinsByMonsterBattle[battleId][owner];\\n        return arr;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Composable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Composable is Ownable {\\n    mapping(address => bool) components;\\n\\n    modifier onlyComponent() {\\n       if (!components[msg.sender]) revert();\\n        _;\\n    }\\n\\n    function addComponent(address component, bool value) external onlyOwner {\\n        components[component] = value;\\n    }\\n\\n    function isComponent(address _address) public view returns (bool) {\\n        return components[_address];\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"component\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"addComponent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addGemToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addGhostToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTotemToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminAddGemToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminAddGemToPlayerForBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminAddGhostToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminAddGhostToPlayerForBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminAddTotemToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminAddTotemToPlayerForBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"getGemWinsInMonsterBattle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"getGhostWinsInMonsterBattle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"getTotemWinsInMonsterBattle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ghostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isComponent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"moveGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"moveGhost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"moveTotem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeGemFromPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeGhostFromPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTotemFromPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewAllCountsForPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewAllWinsForPlayerInBattle\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewGemCountForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewGhostCountForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewTotemCountForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IngameItems", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}