{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AutoStrokes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n *\\r\\n *\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\r\\n *\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2588\u2588\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2500\u2584\u2584\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2580\u2588\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2588\u2500\u2584\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\\r\\n *\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2584\u2500\u2584\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2500\u2584\u2580\u2588\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\\r\\n *\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\\r\\n * \\r\\n *                                                     \ud835\udd1f\ud835\udd36 \ud83c\udd50\ud83c\udd59\ud83c\udd61\ud83c\udd54\ud83c\udd69\ud83c\udd58\ud83c\udd50\\r\\n *\\r\\n *   A self contained mechanism to originate and print dynamic line strokes based on \\r\\n *       - token Id \\r\\n *       - secret seed \\r\\n *       - blockchain transactions.\\r\\n *   \\r\\n *  The tokenURI produces different output based on these factors and the generated art pattern changes constantly\\r\\n *  producing unique and rare combinations of stroke color, pattern and origin for each token at a given point.\\r\\n *   \\r\\n */\\r\\n\\r\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\nimport \\\"./StrokePatternGenerator.sol\\\";\\r\\n\\r\\n\\r\\ncontract AutoStrokes is ERC721A, Ownable {\\r\\n  \\r\\n  uint256 maxSupply;\\r\\n  string secretSeed;\\r\\n\\r\\n    constructor() ERC721A(\\\"AutoStrokes\\\", \\\"as\\\") {}\\r\\n\\r\\n    function setContractParams(string memory _secretSeed, uint256 _maxSupply) external onlyOwner {\\r\\n        maxSupply = _maxSupply;\\r\\n        secretSeed = _secretSeed;\\r\\n    }\\r\\n    \\r\\n    function mint(address recipient, uint256 quantity) external payable{\\r\\n        require(totalSupply() + quantity <= maxSupply, \\\"Not enough tokens left\\\");\\r\\n        require(recipient == owner(), \\\"Only owner can mint the tokens\\\");\\r\\n        _safeMint(recipient, quantity);\\r\\n    }\\r\\n    \\r\\n    function getUniqueCode(uint256 tokenId, uint occurence) internal view returns (string memory) {\\r\\n        return Strings.toHexString(uint256(keccak256(abi.encodePacked(tokenId, occurence, secretSeed, block.timestamp, block.difficulty))));\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal pure override returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function getStrokeVariation(uint256 tokenId) internal pure returns(uint8){\\r\\n        uint8[35] memory variationIndicators = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35];\\r\\n        return variationIndicators[tokenId % 35];\\r\\n    }\\r\\n\\r\\n    \\r\\n    function getBackgroundDetails(uint256 tokenId) internal pure returns(string memory, string memory){\\r\\n        string[9] memory backgroundColorCodes = ['2A0A0A', '123456', '033E3E', '000000', '254117', '3b2f2f', '560319', '36013f', '3D0C02'];\\r\\n        string[9] memory backgroundColorNames = ['Seal Brown', 'Deep Sea Blue', 'Deep Teal', 'Black', 'Forest Green', 'Dark Coffee', 'Dark Scarlet', 'Deep Purple', 'Black Bean'];\\r\\n        return (backgroundColorCodes[tokenId % 9], backgroundColorNames[tokenId % 9]);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\\r\\n        uint8 variationIndicator = getStrokeVariation(tokenId);\\r\\n        uint8 numberOfStrokesToPrint = StrokePatternGenerator.getNumberOfStrokesToPrint(getStrokeVariation(tokenId));\\r\\n       (string memory x, string memory y, string memory originLineTag, string memory originPlan, string memory description) = StrokePatternGenerator.getStrokeOriginParameters(variationIndicator, tokenId, secretSeed);\\r\\n\\r\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{', getProperties(tokenId,numberOfStrokesToPrint,x,y,originPlan, variationIndicator), '\\\"name\\\": \\\"Auto Strokes #', Strings.toString(tokenId), '\\\", \\\"description\\\": \\\"',description,'\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(printStrokes(tokenId, numberOfStrokesToPrint, x, y, originLineTag))), '\\\"}'))));\\r\\n        return string(abi.encodePacked('data:application/json;base64,', json));\\r\\n    }\\r\\n\\r\\n    function printStrokes(uint256 tokenId, uint8 numberOfStrokesToPrint, string memory x, string memory y, string memory originLineTag) internal view returns (string memory) {        \\r\\n        string memory prefixTag = getPrefixTag(tokenId);\\r\\n        string memory suffixTag = getSuffixTag(x, y);\\r\\n        string memory uniqueCode = getUniqueCode(tokenId, 1);\\r\\n        string memory strokeSet = StrokePatternGenerator.getStrokePattern(uniqueCode, x, y, 1, secretSeed);\\r\\n        string memory strokes = string(abi.encodePacked(prefixTag, originLineTag, strokeSet));\\r\\n\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 2);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 3);\\r\\n\\r\\n        if(numberOfStrokesToPrint == 60) {\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 4);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 5);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 6);\\r\\n        } \\r\\n\\r\\n        else if (numberOfStrokesToPrint == 90) {\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 4);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 5);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 6);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 7);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 8);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 9);\\r\\n        } \\r\\n        \\r\\n        else if (numberOfStrokesToPrint == 120){\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 4);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 5);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 6);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 7);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 8);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 9);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 10);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 11);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 12);\\r\\n        }\\r\\n\\r\\n        else if (numberOfStrokesToPrint == 150){\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 4);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 5);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 6);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 7);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 8);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 9);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 10);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 11);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 12);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 13);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 14);\\r\\n        strokes = getUpdatedStrokeSet(tokenId, strokes, x, y, 15);\\r\\n        }\\r\\n        return string(abi.encodePacked(strokes,  suffixTag));\\r\\n    }\\r\\n\\r\\n    function getUpdatedStrokeSet(uint256 tokenId, string memory strokes ,string memory x, string memory y, uint8 occurence) internal view returns (string memory){\\r\\n        string memory uniqueCode = getUniqueCode(tokenId, occurence);\\r\\n        string memory strokeSet = StrokePatternGenerator.getStrokePattern(uniqueCode, x, y, occurence, secretSeed);\\r\\n        return string(abi.encodePacked(strokes, strokeSet));\\r\\n    }\\r\\n\\r\\n    function getPrefixTag (uint256 tokenId) internal pure returns (string memory) {           \\r\\n        string[3] memory prefixTag;\\r\\n        prefixTag[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"> <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#';\\r\\n        (string memory colorCode,) = getBackgroundDetails(tokenId);\\r\\n        prefixTag[1] = colorCode;\\r\\n        prefixTag[2] = '\\\"/>';\\r\\n        return string(abi.encodePacked(prefixTag[0], prefixTag[1], prefixTag[2]));\\r\\n    }\\r\\n\\r\\n    function getSuffixTag (string memory x, string memory y) internal pure returns (string memory) {\\r\\n        string[5] memory suffixTag;\\r\\n        suffixTag[0] = '<circle cx=\\\"';\\r\\n        suffixTag[1] = x;\\r\\n        suffixTag[2] = '\\\" cy=\\\"';\\r\\n        suffixTag[3] = y;\\r\\n        suffixTag[4] = '\\\" r=\\\"3\\\" stroke=\\\"black\\\" fill=\\\"white\\\"/></svg>';\\r\\n        return string(abi.encodePacked(suffixTag[0], suffixTag[1], suffixTag[2], suffixTag[3], suffixTag[4]));\\r\\n    }\\r\\n\\r\\n    function getProperties(uint256 tokenId, uint8 numberOfStrokesToPrint, string memory x, string memory y, string memory originPlan, uint8 variationIndicator) internal pure returns (string memory) {\\r\\n        (,string memory colorName) = getBackgroundDetails(tokenId);\\r\\n        string memory originBehaviour = StrokePatternGenerator.getOriginBehaviour(variationIndicator);\\r\\n        return string(abi.encodePacked('\\\"attributes\\\" : [ {\\\"trait_type\\\" : \\\"Background\\\",\\\"value\\\" : \\\"', colorName,'\\\"},{\\\"trait_type\\\" : \\\"Origin\\\",\\\"value\\\" : \\\"', originBehaviour,'\\\"},{\\\"trait_type\\\" : \\\"Origin Path\\\",\\\"value\\\" : \\\"', originPlan,'\\\"},{\\\"trait_type\\\" : \\\"Stroke Count\\\",\\\"value\\\" : \\\"',Strings.toString(numberOfStrokesToPrint),'\\\"},{\\\"trait_type\\\" : \\\"Coordinates\\\",\\\"value\\\" : \\\"(',x,',',y,')\\\"}],'));\\r\\n    }\\r\\n\\r\\n    function withdraw() external payable onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StrokePatternGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * \\r\\n * A custom library for the project Auto Strokes.\\r\\n *                          \\r\\n *                             \ud835\udd1f\ud835\udd36 \ud83c\udd50\ud83c\udd59\ud83c\udd61\ud83c\udd54\ud83c\udd69\ud83c\udd58\ud83c\udd50\\r\\n *\\r\\n */\\r\\n \\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nlibrary StrokePatternGenerator {\\r\\n\\r\\n    function getNumberOfStrokesToPrint(uint8 variationIndicator) public pure returns (uint8) { \\r\\n        if (variationIndicator == 1 || variationIndicator == 6 ||variationIndicator == 11 ||variationIndicator == 16 ||variationIndicator == 21 ||variationIndicator == 26 || variationIndicator == 31) {\\r\\n            return 30;\\r\\n            }\\r\\n        else if (variationIndicator == 2|| variationIndicator == 7 ||variationIndicator == 12 ||variationIndicator == 17 ||variationIndicator == 22 ||variationIndicator == 27 ||variationIndicator == 32) {\\r\\n            return 60;\\r\\n            }\\r\\n        else if (variationIndicator == 3|| variationIndicator == 8 ||variationIndicator == 13 ||variationIndicator == 18 ||variationIndicator == 23 ||variationIndicator == 28 ||variationIndicator == 33) {\\r\\n            return 90;\\r\\n            }\\r\\n        else if (variationIndicator == 4|| variationIndicator == 9 ||variationIndicator == 14 ||variationIndicator == 19 ||variationIndicator == 24 ||variationIndicator == 29 ||variationIndicator == 34) {\\r\\n            return 120;\\r\\n            }    \\r\\n        return 150;\\r\\n    }\\r\\n\\r\\n    function getStrokeOriginParameters(uint8 variationIndicator, uint256 tokenId, string memory secretSeed) public view returns (string memory, string memory, string memory, string memory, string memory) { \\r\\n        string memory x;\\r\\n        string memory y;\\r\\n        uint256 xInt;\\r\\n        uint256 yInt;\\r\\n\\r\\n        if (variationIndicator == 1 || variationIndicator == 2 ||variationIndicator == 3 ||variationIndicator == 4 ||variationIndicator == 5) {\\r\\n            x = Strings.toString(getOriginOrdinate(tokenId, 1, secretSeed));\\r\\n            return (x, x, getOriginIndLineTag('0', '0', '350', '350'),'Major Diagonal', 'Strokes originates on major diagonal. Refresh the metadata and observe the change of stroke pattern, color and coordinates.');\\r\\n            }\\r\\n        else if (variationIndicator == 6 ||variationIndicator == 7 ||variationIndicator == 8 || variationIndicator == 9 || variationIndicator == 10) {\\r\\n           xInt = getOriginOrdinate(tokenId, 2, secretSeed);\\r\\n           yInt = 350 - xInt;\\r\\n           return (Strings.toString(xInt), Strings.toString(yInt), getOriginIndLineTag('350', '0', '0', '350'),'Minor Diagonal','Strokes originates on minor diagonal. Refresh the metadata and observe the change of stroke pattern, color and coordinates.');\\r\\n            }\\r\\n        else if (variationIndicator == 11|| variationIndicator == 12 ||variationIndicator == 13 ||variationIndicator == 14 ||variationIndicator == 15) {\\r\\n            y = Strings.toString(getOriginOrdinate(tokenId, 3, secretSeed));\\r\\n            return ('175', y, getOriginIndLineTag('175', '0', '175', '350'),'Vertical', 'Strokes originates on a vertical line. Refresh the metadata and observe the change of stroke pattern, color and coordinates.');\\r\\n            }\\r\\n        else if (variationIndicator == 16|| variationIndicator == 17 ||variationIndicator == 18 ||variationIndicator == 19 ||variationIndicator == 20) {\\r\\n            x = Strings.toString(getOriginOrdinate(tokenId, 4, secretSeed));\\r\\n            return (x, '175', getOriginIndLineTag('0', '175', '350', '175'),'Horizontal', 'Strokes originates on a horizontal line. Refresh the metadata and observe the change of stroke pattern, color and coordinates.');\\r\\n            }\\r\\n        else if (variationIndicator == 21|| variationIndicator == 22 ||variationIndicator == 23 || variationIndicator == 24 || variationIndicator == 25) {\\r\\n\\r\\n           uint256 decision =  getDecisionFactor(tokenId, 5, secretSeed);\\r\\n\\r\\n            if(decision == 1) {\\r\\n              yInt =  getYOrdinateRect(tokenId, 6, secretSeed);\\r\\n              y = Strings.toString(yInt);\\r\\n\\r\\n\\r\\n              if(yInt == 50 || yInt == 300) {\\r\\n                   x = Strings.toString(getXOrdinateRect(tokenId, 7, secretSeed));\\r\\n                }\\r\\n                else {\\r\\n                   xInt = getDecisionFactor(tokenId, 8, secretSeed);\\r\\n                   if (xInt == 1) {\\r\\n                       x = '40';\\r\\n                   }\\r\\n                   else {\\r\\n                       x = '310';\\r\\n                   }\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n            xInt = getXOrdinateRect(tokenId, 6, secretSeed);\\r\\n            x = Strings.toString(xInt);\\r\\n\\r\\n                if(xInt == 40 || xInt == 310) {\\r\\n                    y = Strings.toString(getYOrdinateRect(tokenId, 7, secretSeed));\\r\\n                }\\r\\n                else {\\r\\n                   yInt = getDecisionFactor(tokenId,8, secretSeed);\\r\\n                   if (yInt == 1) {\\r\\n                       y = '50';\\r\\n                   }\\r\\n                   else {\\r\\n                       y = '300';\\r\\n                   }\\r\\n                }\\r\\n            }\\r\\n            return (x, y, getRectOriginIndLineTag(),'Rectangle','Strokes originates on a rectangle. Refresh the metadata and observe the change of stroke pattern, color and coordinates.');    \\r\\n            }\\r\\n        else if (variationIndicator == 26|| variationIndicator == 27 ||variationIndicator == 28 || variationIndicator == 29 || variationIndicator == 30) {\\r\\n            return ('175', '175', '','Center','Strokes originates at the center. Refresh the metadata and observe the change of stroke pattern and color.');    \\r\\n            }    \\r\\n         else {\\r\\n            x = Strings.toString(getOriginOrdinate(tokenId, 9, secretSeed));\\r\\n            y = Strings.toString(getOriginOrdinate(tokenId, 10, secretSeed));\\r\\n            return (x, y, '','Anywhere', 'Strokes can originate anywhere on the viewbox. Refresh the metadata and observe the change of stroke pattern, color and coordinates.');\\r\\n            }            \\r\\n    }\\r\\n\\r\\n    function getOriginBehaviour(uint8 variationIndicator) public pure returns (string memory) { \\r\\n         if (variationIndicator == 26|| variationIndicator == 27 ||variationIndicator == 28 || variationIndicator == 29 || variationIndicator == 30) {\\r\\n            return \\\"Fixed\\\";\\r\\n         }\\r\\n         else {\\r\\n             return \\\"Varying\\\";\\r\\n         }\\r\\n    }\\r\\n\\r\\n    function getStrokePattern(string memory code, string memory xOrdinate, string memory yOrdinate, uint8 occurence, string memory secretSeed) public view returns (string memory) {\\r\\n        string[65] memory stroke;\\r\\n        stroke[0] = '<line x1=\\\"';\\r\\n        stroke[1] = xOrdinate;\\r\\n        stroke[2] = '\\\" y1=\\\"';\\r\\n        stroke[3] = yOrdinate;\\r\\n        stroke[4] ='\\\" x2=\\\"';\\r\\n        stroke[5] =  Strings.toString(getToOrdinate(1, occurence, secretSeed));\\r\\n        stroke[6] = '\\\" y2=\\\"';\\r\\n        stroke[7] =  Strings.toString(getToOrdinate(2, occurence, secretSeed));\\r\\n        stroke[8] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[9] = getStrokeColorCode(code, 2, 8);\\r\\n\\r\\n        stroke[10] = getStrokeCommonTag(xOrdinate, yOrdinate);\\r\\n        stroke[11] =  Strings.toString(getToOrdinate(3, occurence, secretSeed));\\r\\n        stroke[12] = '\\\" y2=\\\"';\\r\\n        stroke[13] =  Strings.toString(getToOrdinate(4, occurence, secretSeed));\\r\\n        stroke[14] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[15] = getStrokeColorCode(code, 8, 14);\\r\\n\\r\\n        stroke[16] =  stroke[10];\\r\\n        stroke[17] =  Strings.toString(getToOrdinate(5, occurence, secretSeed));\\r\\n        stroke[18] = '\\\" y2=\\\"';\\r\\n        stroke[19] =  Strings.toString(getToOrdinate(6, occurence, secretSeed));\\r\\n        stroke[20] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[21] = getStrokeColorCode(code, 14, 20);\\r\\n\\r\\n        stroke[22] =  stroke[10];\\r\\n        stroke[23] =  Strings.toString(getToOrdinate(7, occurence, secretSeed));\\r\\n        stroke[24] = '\\\" y2=\\\"';\\r\\n        stroke[25] =  Strings.toString(getToOrdinate(8, occurence, secretSeed));\\r\\n        stroke[26] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[27] = getStrokeColorCode(code, 20, 26);\\r\\n\\r\\n        stroke[28] =  stroke[10];\\r\\n        stroke[29] =  Strings.toString(getToOrdinate(9, occurence, secretSeed));\\r\\n        stroke[30] = '\\\" y2=\\\"';\\r\\n        stroke[31] =  Strings.toString(getToOrdinate(10, occurence, secretSeed));\\r\\n        stroke[32] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[33] = getStrokeColorCode(code, 26, 32);        \\r\\n\\r\\n        stroke[34] =  stroke[10];\\r\\n        stroke[35] =  Strings.toString(getToOrdinate(11, occurence, secretSeed));\\r\\n        stroke[36] = '\\\" y2=\\\"';\\r\\n        stroke[37] =  Strings.toString(getToOrdinate(12, occurence, secretSeed));\\r\\n        stroke[38] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[39] = getStrokeColorCode(code, 32, 38);    \\r\\n\\r\\n        stroke[40] =  stroke[10];\\r\\n        stroke[41] =  Strings.toString(getToOrdinate(13, occurence, secretSeed));\\r\\n        stroke[42] = '\\\" y2=\\\"';\\r\\n        stroke[43] =  Strings.toString(getToOrdinate(14, occurence, secretSeed));\\r\\n        stroke[44] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[45] = getStrokeColorCode(code, 38, 44);     \\r\\n\\r\\n        stroke[46] =  stroke[10];\\r\\n        stroke[47] =  Strings.toString(getToOrdinate(15, occurence, secretSeed));\\r\\n        stroke[48] = '\\\" y2=\\\"';\\r\\n        stroke[49] =  Strings.toString(getToOrdinate(16, occurence, secretSeed));\\r\\n        stroke[50] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[51] = getStrokeColorCode(code, 44, 50);            \\r\\n             \\r\\n        stroke[52] = stroke[10];\\r\\n        stroke[53] =  Strings.toString(getToOrdinate(17, occurence, secretSeed));\\r\\n        stroke[54] = '\\\" y2=\\\"';\\r\\n        stroke[55] =  Strings.toString(getToOrdinate(18, occurence, secretSeed));\\r\\n        stroke[56] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[57] = getStrokeColorCode(code, 50, 56);                \\r\\n\\r\\n        stroke[58] = stroke[10];\\r\\n        stroke[59] =  Strings.toString(getToOrdinate(19, occurence, secretSeed));\\r\\n        stroke[60] = '\\\" y2=\\\"';\\r\\n        stroke[61] =  Strings.toString(getToOrdinate(20, occurence, secretSeed));\\r\\n        stroke[62] = '\\\" style=\\\"stroke:#';\\r\\n        stroke[63] = getStrokeColorCode(code, 56, 62);  \\r\\n        stroke[64] = '\\\"/>';\\r\\n\\r\\n        string memory output = string(abi.encodePacked(stroke[0], stroke[1], stroke[2], stroke[3], stroke[4], stroke[5], stroke[6], stroke[7], stroke[8], stroke[9], stroke[10]));\\r\\n        output = string(abi.encodePacked(output, stroke[11], stroke[12], stroke[13], stroke[14], stroke[15], stroke[16], stroke[17], stroke[18], stroke[19], stroke[20]));\\r\\n        output = string(abi.encodePacked(output, stroke[21], stroke[22], stroke[23], stroke[24], stroke[25], stroke[26], stroke[27], stroke[28], stroke[29], stroke[30]));\\r\\n        output = string(abi.encodePacked(output, stroke[31], stroke[32], stroke[33], stroke[34], stroke[35], stroke[36], stroke[37], stroke[38], stroke[39], stroke[40]));\\r\\n        output = string(abi.encodePacked(output, stroke[41], stroke[42], stroke[43], stroke[44], stroke[45], stroke[46], stroke[47], stroke[48], stroke[49], stroke[50]));\\r\\n        output = string(abi.encodePacked(output, stroke[51], stroke[52], stroke[53], stroke[54], stroke[55], stroke[56], stroke[57], stroke[58], stroke[59], stroke[60]));\\r\\n        output = string(abi.encodePacked(output, stroke[61], stroke[62], stroke[63], stroke[64]));\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    function getStrokeCommonTag(string memory xOrdinate, string memory yOrdinate) internal pure returns (string memory) {\\r\\n        string[5] memory common;\\r\\n        common[0] = '\\\"/><line x1=\\\"';\\r\\n        common[1] = xOrdinate;\\r\\n        common[2] = '\\\" y1=\\\"';\\r\\n        common[3] = yOrdinate;\\r\\n        common[4] ='\\\" x2=\\\"';\\r\\n        return string(abi.encodePacked(common[0], common[1], common[2], common[3], common[4]));\\r\\n    }\\r\\n\\r\\n    function getOriginIndLineTag(string memory x1, string memory y1, string memory x2, string memory y2) internal pure returns (string memory) {\\r\\n        string[20] memory originIndLine;\\r\\n        originIndLine[0] = '<line stroke-dasharray=\\\"3,10\\\" x1=\\\"';\\r\\n        originIndLine[1] = x1;\\r\\n        originIndLine[2] = '\\\" y1=\\\"';\\r\\n        originIndLine[3] = y1;\\r\\n        originIndLine[4] = '\\\" x2=\\\"';\\r\\n        originIndLine[5] = x2;\\r\\n        originIndLine[6] = '\\\" y2=\\\"';\\r\\n        originIndLine[7] = y2;\\r\\n        originIndLine[8] = '\\\" opacity=\\\"0.05\\\" style=\\\"stroke:white\\\"/>';\\r\\n        return string(abi.encodePacked(originIndLine[0], originIndLine[1], originIndLine[2], originIndLine[3], originIndLine[4], originIndLine[5], originIndLine[6], originIndLine[7], originIndLine[8]));\\r\\n    }\\r\\n\\r\\n    function getRectOriginIndLineTag() internal pure returns (string memory){\\r\\n        return '<line stroke-dasharray=\\\"3,10\\\" x1=\\\"40\\\" y1=\\\"50\\\" x2=\\\"310\\\" y2=\\\"50\\\" opacity=\\\"0.05\\\" style=\\\"stroke:white\\\"/><line stroke-dasharray=\\\"3,10\\\" x1=\\\"40\\\" y1=\\\"50\\\" x2=\\\"40\\\" y2=\\\"300\\\" opacity=\\\"0.05\\\" style=\\\"stroke:white\\\"/><line stroke-dasharray=\\\"3,10\\\" x1=\\\"310\\\" y1=\\\"50\\\" x2=\\\"310\\\" y2=\\\"300\\\" opacity=\\\"0.05\\\" style=\\\"stroke:white\\\"/><line stroke-dasharray=\\\"3,10\\\" x1=\\\"40\\\" y1=\\\"300\\\" x2=\\\"310\\\" y2=\\\"300\\\" opacity=\\\"0.05\\\" style=\\\"stroke:white\\\"/>';\\r\\n    }\\r\\n    \\r\\n    function getStrokeColorCode(string memory code, uint8 startIndex, uint8 endIndex) internal pure returns(string memory) {\\r\\n     bytes memory codebytes = bytes(code);\\r\\n     bytes memory result = new bytes(endIndex-startIndex);\\r\\n       for(uint256 i = startIndex; i < endIndex; i++) {\\r\\n            result[i-startIndex] = codebytes[i];\\r\\n        }return string(result);\\r\\n    }\\r\\n\\r\\n    function getToOrdinate(uint8 factor, uint256 occurence, string memory secretSeed) internal view returns(uint256){\\r\\n        return uint256(keccak256(abi.encodePacked(factor, occurence, secretSeed, block.timestamp))) % 350;\\r\\n    }\\r\\n\\r\\n    function getOriginOrdinate(uint256 tokenId, uint8 factor, string memory secretSeed) internal view returns(uint256){\\r\\n        return uint256(keccak256(abi.encodePacked(tokenId, factor, secretSeed, block.timestamp, block.difficulty))) % 350;\\r\\n    }\\r\\n\\r\\n    function getXOrdinateRect(uint256 tokenId, uint8 factor, string memory secretSeed) internal view returns(uint256){\\r\\n        return uint256(keccak256(abi.encodePacked(tokenId, factor, secretSeed, block.timestamp, block.difficulty))) % 271 + 40;\\r\\n    }\\r\\n\\r\\n    function getYOrdinateRect(uint256 tokenId, uint8 factor, string memory secretSeed) internal view returns(uint256){\\r\\n        return uint256(keccak256(abi.encodePacked(tokenId, factor, secretSeed, block.timestamp, block.difficulty))) % 251 + 50;\\r\\n    }\\r\\n\\r\\n    function getDecisionFactor(uint256 tokenId, uint8 factor, string memory secretSeed) internal view returns(uint256){\\r\\n        return uint256(keccak256(abi.encodePacked(tokenId, factor, secretSeed, block.timestamp, block.difficulty))) % 2 + 1;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/StrokePatternGenerator.sol\": {\r\n        \"StrokePatternGenerator\": \"0x37a1401f9cc2313a26693b461dffa2916e9c7b8b\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_secretSeed\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setContractParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "AutoStrokes", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}