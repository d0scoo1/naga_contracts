{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/BrincStaking.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ninterface IBrincGovToken is IERC20Upgradeable {\r\n    function mint(address _to, uint256 _amount) external;\r\n\r\n    function mintToTreasury(uint256 _amount) external;\r\n\r\n    function getTreasuryOwner() external view returns (address);\r\n}\r\n\r\ninterface IStakedBrincGovToken {\r\n    function mint(address _to, uint256 _amount) external;\r\n\r\n    function burnFrom(address _to, uint256 _amount) external;\r\n}\r\n\r\n// BrincStaking is the contract in which the Brinc token can be staked to earn\r\n// Brinc governance tokens as rewards.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. Staking will\r\n// governable in the future with the Brinc Governance token.\r\n\r\ncontract BrincStaking is OwnableUpgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using SafeERC20Upgradeable for IBrincGovToken;\r\n    // Stake mode\r\n    enum StakeMode {MODE1, MODE2, MODE3, MODE4, MODE5, MODE6}\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 brcStakedAmount; // Amount of BRC tokens the user will stake.\r\n        uint256 gBrcStakedAmount; // Amount of gBRC tokens the user will stake.\r\n        uint256 unlockTimestamp; // Stake block timestamp.\r\n        uint256 rewardDebt; // Receivable reward. See explanation below.\r\n        StakeMode mode; // Stake mode\r\n\r\n        // We do some fancy math here. Basically, any point in time, the amount of govBrinc tokens\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.brcStakedAmount * accGovBrincPerShare) - user.rewardDebt\r\n        //   rewardDebt = staked rewards for a user \r\n\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. The following happens:\r\n        //   1. The pool's `accGovBrincPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        uint256 supply; // Weighted balance of Brinc tokens in the pool\r\n        uint256 lockTime; // Lock time\r\n        uint256 weight; // Weight for the pool\r\n        uint256 accGovBrincPerShare; // Accumulated govBrinc tokens per share, times 1e12. See below.\r\n        bool brcOnly;\r\n    }\r\n\r\n    // Last block number that govBrinc token distribution occurs.\r\n    uint256 lastRewardBlock;\r\n\r\n    // The Brinc TOKEN!\r\n    IERC20Upgradeable public brincToken;\r\n    // The governance Brinc TOKEN!\r\n    IBrincGovToken public govBrincToken;\r\n    // The staked governance Brinc TOKEN!\r\n    IStakedBrincGovToken public stakedGovBrincToken;\r\n    // govBrinc tokens created per block.\r\n    uint256 public govBrincPerBlock;\r\n    // Info of each pool.\r\n    mapping(StakeMode => PoolInfo) public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo[]) public userInfo;\r\n\r\n    // ratioBrcToGov is the ratio of Brinc to govBrinc tokens needed to stake\r\n    uint256 public ratioBrcToGov;\r\n    // gBrcStakeAmount = brc * ratio / 1e10\r\n\r\n    // treasuryRewardBalance is the number of tokens awarded to the treasury address\r\n    // this is implemented this way so that the treasury address will be responsible for paying for the minting of rewards.\r\n    uint256 public treasuryRewardBalance;\r\n\r\n    // paused indicates whether staking is paused.\r\n    // when paused, the staking pools will not update, nor will any gov tokens be minted.\r\n    bool public paused;\r\n    // pausedBlock is the block number that pause was started.\r\n    // 0 if not paused.\r\n    uint256 public pausedBlock;\r\n\r\n    uint256 private govTokenOverMinted;\r\n\r\n    event Deposit(address indexed user, uint256 amount, StakeMode mode);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event TreasuryMint(uint256 amount);\r\n\r\n    event LockTimeChanged(\r\n        StakeMode mode,\r\n        uint256 oldLockTime,\r\n        uint256 newLockTime\r\n    );\r\n    event WeightChanged(\r\n        StakeMode mode,\r\n        uint256 oldWeight,\r\n        uint256 newWeight\r\n    );\r\n    event GovBrincPerBlockChanged(\r\n        uint256 oldGovBrincPerBlock,\r\n        uint256 newGovBrincPerBlock\r\n    );\r\n    event RatioBrcToGovChanged(\r\n        uint256 oldRatioBrcToGov, \r\n        uint256 newRatioBrcToGov\r\n    );\r\n\r\n    event Paused();\r\n    event Resumed();\r\n\r\n    function initialize(\r\n        IERC20Upgradeable _brincToken,\r\n        IBrincGovToken _brincGovToken,\r\n        IStakedBrincGovToken _stakedGovBrincToken,\r\n        uint256 _govBrincPerBlock,\r\n        uint256 _ratioBrcToGov\r\n    ) initializer public {\r\n        brincToken = _brincToken;\r\n        govBrincToken = _brincGovToken;\r\n        stakedGovBrincToken = _stakedGovBrincToken;\r\n        govBrincPerBlock = _govBrincPerBlock;\r\n        lastRewardBlock = block.number;\r\n        ratioBrcToGov = _ratioBrcToGov;\r\n        paused = false;\r\n        pausedBlock = 0;\r\n        poolInfo[StakeMode.MODE1] = PoolInfo({\r\n            supply: 0,\r\n            lockTime:  30 * 24 * 60 * 60, // 30 days in seconds\r\n            weight: 3,\r\n            accGovBrincPerShare: 0,\r\n            // represents the reward amount for each brinc token in the pool\r\n            brcOnly: true\r\n        });\r\n        poolInfo[StakeMode.MODE2] = PoolInfo({\r\n            supply: 0,\r\n            lockTime:  90 * 24 * 60 * 60, // 90 days in seconds\r\n            weight: 5,\r\n            accGovBrincPerShare: 0,\r\n            brcOnly: true\r\n        });\r\n        poolInfo[StakeMode.MODE3] = PoolInfo({\r\n            supply: 0,\r\n            lockTime:  180 * 24 * 60 * 60, // 180 days in seconds\r\n            weight: 10,\r\n            accGovBrincPerShare: 0,\r\n            brcOnly: true\r\n        });\r\n        poolInfo[StakeMode.MODE4] = PoolInfo({\r\n            supply: 0,\r\n            lockTime:  30 * 24 * 60 * 60, // 30 days in seconds\r\n            weight: 10,\r\n            accGovBrincPerShare: 0,\r\n            brcOnly: false\r\n        });\r\n        poolInfo[StakeMode.MODE5] = PoolInfo({\r\n            supply: 0,\r\n            lockTime:  90 * 24 * 60 * 60, // 90 days in seconds\r\n            weight: 40,\r\n            accGovBrincPerShare: 0,\r\n            brcOnly: false\r\n        });\r\n        poolInfo[StakeMode.MODE6] = PoolInfo({\r\n            supply: 0,\r\n            lockTime:  180 * 24 * 60 * 60, // 180 days in seconds\r\n            weight: 500,\r\n            accGovBrincPerShare: 0,\r\n            brcOnly: false\r\n        });\r\n\r\n        __Ownable_init();\r\n    }\r\n\r\n    modifier isNotPaused {\r\n     require(paused == false, \"paused: operations are paused by admin\");\r\n     _;\r\n   }\r\n\r\n   /**\r\n     * @dev pause the staking contract\r\n     * paused features:\r\n     * - deposit\r\n     * - withdraw\r\n     * - updating pools\r\n     */\r\n    /// #if_succeeds {:msg \"pause: paused is true\"}\r\n        /// paused == true;\r\n    function pause() public onlyOwner {\r\n        paused = true;\r\n        pausedBlock = block.number;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev resume the staking contract\r\n     * resumed features:\r\n     * - deposit\r\n     * - withdraw\r\n     * - updating pools\r\n     */\r\n    /// #if_succeeds {:msg \"resume: paused is false\"}\r\n        /// paused == false;\r\n    function resume() public onlyOwner {\r\n        paused = false;\r\n        pausedBlock = 0;\r\n        emit Resumed();\r\n    }\r\n\r\n    /**\r\n     * @dev if paused or not \r\n     *\r\n     * @return paused\r\n     */\r\n    /// #if_succeeds {:msg \"isPaused: returns paused\"}\r\n        /// $result == paused;\r\n    function isPaused() public view returns(bool) {\r\n        return paused;\r\n    }\r\n\r\n    /**\r\n     * @dev block that pause was called.\r\n     *\r\n     * @return pausedBlock\r\n     */\r\n    /// #if_succeeds {:msg \"getPausedBlock: returns PausedBlock\"}\r\n        /// $result == pausedBlock;\r\n    function getPausedBlock() public view returns(uint256) {\r\n        return pausedBlock;\r\n    }\r\n\r\n    /**\r\n     * @dev last reward block that has been recorded\r\n     *\r\n     * @return lastRewardBlock\r\n     */\r\n    /// #if_succeeds {:msg \"getLastRewardBlock: returns lastRewardBlock\"}\r\n        /// $result == lastRewardBlock;\r\n    function getLastRewardBlock() public view returns(uint256) {\r\n        return lastRewardBlock;\r\n    }\r\n\r\n    /**\r\n     * @dev address of the Brinc token contract \r\n     *\r\n     * @return Brinc token address\r\n     */\r\n    /// #if_succeeds {:msg \"getBrincTokenAddress: returns Brinc Token address\"}\r\n        /// $result == address(brincToken);\r\n    function getBrincTokenAddress() public view returns(address) {\r\n        return address(brincToken);\r\n    }\r\n\r\n    /**\r\n     * @dev address of the Brinc Governance token contract \r\n     *\r\n     * @return Brinc Gov token address\r\n     */\r\n    /// #if_succeeds {:msg \"getGovTokenAddress: returns Brinc Gov token address\"}\r\n        /// $result == address(govBrincToken);\r\n    function getGovTokenAddress() public view returns(address) {\r\n        return address(govBrincToken);\r\n    }\r\n\r\n    /**\r\n     * @dev the number of Gov tokens that can be issued per block\r\n     *\r\n     * @return Brinc Gov reward tokens per block\r\n     */\r\n    /// #if_succeeds {:msg \"getGovBrincPerBlock: returns Brinc Gov reward tokens per block\"}\r\n        /// $result == govBrincPerBlock;\r\n    function getGovBrincPerBlock() public view returns(uint256) {\r\n        return govBrincPerBlock;\r\n    }\r\n\r\n    /**\r\n     * @dev The ratio of BRC to gBRC tokens \r\n     * The ratio dictates the amount of tokens of BRC and gBRC required for staking\r\n     *\r\n     * @return BRC to gBRC ratio required for staking\r\n     */\r\n    /// #if_succeeds {:msg \"getRatioBtoG: returns BRC to gBRC ratio required for staking\"}\r\n        /// $result == ratioBrcToGov;\r\n    function getRatioBtoG() public view returns(uint256) {\r\n        return ratioBrcToGov;\r\n    }\r\n\r\n    /**\r\n     * @dev get specified pool supply\r\n     *\r\n     * @return pool's supply\r\n     */\r\n    /// #if_succeeds {:msg \"getPoolSupply: returns pool's supply\"}\r\n        /// $result == poolInfo[_mode].supply;\r\n    function getPoolSupply(StakeMode _mode) public view returns(uint256) {\r\n        return poolInfo[_mode].supply;\r\n    }\r\n\r\n    /**\r\n     * @dev get specified pool lockTime\r\n     *\r\n     * @return pool's lockTime\r\n     */\r\n    /// #if_succeeds {:msg \"getPoolLockTime: returns pool's lockTime\"}\r\n        /// $result == poolInfo[_mode].lockTime;\r\n    function getPoolLockTime(StakeMode _mode) public view returns(uint256) {\r\n        return poolInfo[_mode].lockTime;\r\n    }\r\n    \r\n    /**\r\n     * @dev get specified pool weight\r\n     *\r\n     * @return pool's weight\r\n     */\r\n    /// #if_succeeds {:msg \"getPoolWeight: returns pool's weight\"}\r\n        /// $result == poolInfo[_mode].weight;\r\n    function getPoolWeight(StakeMode _mode) public view returns(uint256) {\r\n        return poolInfo[_mode].weight;\r\n    }\r\n\r\n    /**\r\n     * @dev get specified pool accGovBrincPerShare\r\n     *\r\n     * @return pool's accGovBrincPerShare\r\n     */\r\n    /// #if_succeeds {:msg \"getPoolAccGovBrincPerShare: returns pool's accGovBrincPerShare\"}\r\n        /// $result == poolInfo[_mode].accGovBrincPerShare;\r\n    function getPoolAccGovBrincPerShare(StakeMode _mode) public view returns(uint256) {\r\n        return poolInfo[_mode].accGovBrincPerShare;\r\n    }\r\n\r\n    /**\r\n     * @dev get specified user information with correlating index\r\n     * _address will be required to have an active staking deposit.\r\n     * \r\n     * @return UserInfo\r\n     */\r\n    function getUserInfo(address _address, uint256 _index) public view returns(UserInfo memory) {\r\n        require(userInfo[_address].length > 0, \"getUserInfo: user has not made any stakes\");\r\n        return userInfo[_address][_index];\r\n    }\r\n\r\n    /**\r\n     * @dev gets the number of stakes the user has made.\r\n     * \r\n     * @return UserStakeCount\r\n     */\r\n    /// #if_succeeds {:msg \"getStakeCount: returns user's active stakes\"}\r\n        /// $result == userInfo[_msgSender()].length;\r\n    function getStakeCount() public view returns (uint256) {\r\n        return userInfo[_msgSender()].length;\r\n    }\r\n\r\n    /**\r\n     * @dev gets the total supply of all the rewards that .\r\n     * totalSupply = ( poolSupply1 * poolWeight1 ) + ( poolSupply2 * poolWeight2 ) + ( poolSupply3 * poolWeight3 )\r\n     *\r\n     * @return total supply of all pools\r\n     */\r\n    /*\r\n    // there is an error: `throw e;`\r\n    // seems to be an issue with the scribble compiler\r\n    /// #if_succeeds {:msg \"getTotalSupplyOfAllPools: returns total supply of all pool tokens\"}\r\n        /// let pool1 := poolInfo[StakeMode.MODE1].supply.mul(poolInfo[StakeMode.MODE1].weight) in\r\n        /// let pool2 := poolInfo[StakeMode.MODE2].supply.mul(poolInfo[StakeMode.MODE2].weight) in\r\n        /// let pool3 := poolInfo[StakeMode.MODE3].supply.mul(poolInfo[StakeMode.MODE3].weight) in\r\n        /// let pool4 := poolInfo[StakeMode.MODE4].supply.mul(poolInfo[StakeMode.MODE4].weight) in\r\n        /// let pool5 := poolInfo[StakeMode.MODE5].supply.mul(poolInfo[StakeMode.MODE5].weight) in\r\n        /// let pool6 := poolInfo[StakeMode.MODE6].supply.mul(poolInfo[StakeMode.MODE6].weight) in\r\n        /// $result == pool1.add(pool2).add(pool3).add(pool4).add(pool5).add(pool6);\r\n    */\r\n    function getTotalSupplyOfAllPools() private view returns (uint256) {\r\n        uint256 totalSupply;\r\n\r\n        totalSupply = totalSupply.add(\r\n            poolInfo[StakeMode.MODE1].supply.mul(poolInfo[StakeMode.MODE1].weight)\r\n        )\r\n        .add(\r\n            poolInfo[StakeMode.MODE2].supply.mul(poolInfo[StakeMode.MODE2].weight)\r\n        )\r\n        .add(\r\n            poolInfo[StakeMode.MODE3].supply.mul(poolInfo[StakeMode.MODE3].weight)\r\n        )\r\n        .add(\r\n            poolInfo[StakeMode.MODE4].supply.mul(poolInfo[StakeMode.MODE4].weight)\r\n        )\r\n        .add(\r\n            poolInfo[StakeMode.MODE5].supply.mul(poolInfo[StakeMode.MODE5].weight)\r\n        )\r\n        .add(\r\n            poolInfo[StakeMode.MODE6].supply.mul(poolInfo[StakeMode.MODE6].weight)\r\n        );\r\n\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev gets the pending rewards of a user.]\r\n     * View function to see pending govBrinc on frontend.\r\n     *\r\n     * formula:\r\n     * reward = multiplier * govBrincPerBlock * pool.supply * pool.weight / totalSupply\r\n     *\r\n     * @return pending reward of a user\r\n     */\r\n\r\n    /// #if_succeeds {:msg \"pendingRewards: the pending rewards of a given user should be correct - case: maturity has not passed\"}\r\n        /// let pendingReward, complete := $result in\r\n        /// userInfo[_user][_id].unlockTimestamp > block.timestamp ==> \r\n        /// pendingReward == 0 && complete == false;\r\n    /// #if_succeeds {:msg \"pendingRewards: the pending rewards of a given user should be correct - case: maturity has passed with no pending rewards\"}\r\n        /// let accGovBrincPerShare := old(poolInfo[userInfo[_user][_id].mode].accGovBrincPerShare) in\r\n        /// let totalSupply := old(getTotalSupplyOfAllPools()) in\r\n        /// let multiplier := old(block.number.sub(lastRewardBlock)) in\r\n        /// let govBrincReward := multiplier.mul(govBrincPerBlock).mul(poolInfo[userInfo[_user][_id].mode].supply).mul(poolInfo[userInfo[_user][_id].mode].weight).div(totalSupply) in\r\n        /// let scaled := govBrincReward.mul(1e12).div(poolInfo[userInfo[_user][_id].mode].supply) in\r\n        /// let updatedAccGovBrincPerShare := accGovBrincPerShare.add(scaled) in\r\n        /// let pendingReward, complete := $result in\r\n        /// (block.number > lastRewardBlock) && (poolInfo[userInfo[_user][_id].mode].supply != 0) ==> pendingReward == userInfo[_user][_id].brcStakedAmount.mul(updatedAccGovBrincPerShare).div(1e12).sub(userInfo[_user][_id].rewardDebt) && complete == true;\r\n    /// #if_succeeds {:msg \"pendingRewards: the pending rewards of a given user should be correct - case: maturity has passed with pending rewards\"}\r\n        /// let accGovBrincPerShare := poolInfo[userInfo[_user][_id].mode].accGovBrincPerShare in\r\n        /// let pendingReward, complete := $result in\r\n        /// (userInfo[_user][_id].unlockTimestamp <= block.timestamp) || (poolInfo[userInfo[_user][_id].mode].supply == 0) ==> pendingReward == userInfo[_user][_id].brcStakedAmount.mul(accGovBrincPerShare).div(1e12).sub(userInfo[_user][_id].rewardDebt) && complete == true;\r\n    function pendingRewards(address _user, uint256 _id) public view returns (uint256, bool) {\r\n        require(_id < userInfo[_user].length, \"pendingRewards: invalid stake id\");\r\n\r\n        UserInfo storage user = userInfo[_user][_id];\r\n\r\n        bool withdrawable; // false\r\n\r\n        // only withdrawable after the user's stake has passed maturity\r\n        if (block.timestamp >= user.unlockTimestamp) {\r\n            withdrawable = true;\r\n        }\r\n\r\n        PoolInfo storage pool = poolInfo[user.mode];\r\n        uint256 accGovBrincPerShare = pool.accGovBrincPerShare;\r\n        uint256 totalSupply = getTotalSupplyOfAllPools();\r\n        if (block.number > lastRewardBlock && pool.supply != 0) {\r\n            uint256 multiplier;\r\n            if (paused) {\r\n                multiplier = pausedBlock.sub(lastRewardBlock);\r\n            } else {\r\n                multiplier = block.number.sub(lastRewardBlock);\r\n            }\r\n            \r\n            uint256 govBrincReward =\r\n                multiplier\r\n                    .mul(govBrincPerBlock)\r\n                    .mul(pool.supply) // supply is the number of staked Brinc tokens\r\n                    .mul(pool.weight)\r\n                    .div(totalSupply);\r\n            accGovBrincPerShare = accGovBrincPerShare.add(\r\n                govBrincReward.mul(1e12).div(pool.supply)\r\n            );\r\n        }\r\n        return\r\n            (user.brcStakedAmount.mul(accGovBrincPerShare).div(1e12).sub(user.rewardDebt), withdrawable);\r\n    }\r\n\r\n    function totalRewards(address _user) external view returns (uint256) {\r\n        UserInfo[] storage stakes = userInfo[_user];\r\n        uint256 total;\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            (uint256 reward, bool withdrawable) = pendingRewards(_user, i);\r\n            if (withdrawable) {\r\n                total = total.add(reward);\r\n            }\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @dev updates the lockTime required for stakers to lock up their stakes for. \r\n     * This will be taken as seconds but will be converted to blocks by multiplying by the average block time.\r\n     * This can only be called by the owner of the contract.\r\n     * \r\n     * lock up blocks = lock up time * 13 [avg. block time]\r\n     *\r\n     * @param _updatedLockTime new lock up time\r\n     */\r\n    /// #if_succeeds {:msg \"updateLockTime: the sender must be Owner\"}\r\n        /// old(msg.sender == this.owner());\r\n    /// #if_succeeds {:msg \"updateLockTime: sets lockTime correctly\"}\r\n        /// poolInfo[_mode].lockTime == _updatedLockTime;\r\n    function updateLockTime(StakeMode _mode, uint256 _updatedLockTime) public onlyOwner {\r\n        PoolInfo storage pool = poolInfo[_mode];\r\n        uint256 oldLockTime = pool.lockTime;\r\n        pool.lockTime = _updatedLockTime;\r\n        emit LockTimeChanged(_mode, oldLockTime, _updatedLockTime);\r\n    }\r\n\r\n    /**\r\n     * @dev updates the weight of a specified pool. The mode specified will map to the period \r\n     *\r\n     * @param _mode period of the pool you wish to update\r\n     * @param _weight new weight\r\n     */\r\n    /// #if_succeeds {:msg \"updateWeight: the sender must be Owner\"}\r\n        /// old(msg.sender == this.owner());\r\n    /// #if_succeeds {:msg \"updateWeight: sets weight correctly\"}\r\n        /// poolInfo[_mode].weight == _weight;\r\n    function updateWeight(StakeMode _mode, uint256 _weight) public onlyOwner {\r\n        massUpdatePools();\r\n        PoolInfo storage pool = poolInfo[_mode];\r\n        uint256 oldWeight = pool.weight;\r\n        pool.weight = _weight;\r\n        emit WeightChanged(_mode, oldWeight, _weight);\r\n    }\r\n\r\n    /**\r\n     * @dev updates the govBrincPerBlock reward amount that will be issued to the stakers. This can only be called by the owner of the contract.\r\n     *\r\n     * @param _updatedGovBrincPerBlock new reward amount\r\n     */\r\n    /// #if_succeeds {:msg \"updateGovBrincPerBlock: the sender must be Owner\"}\r\n        /// old(msg.sender == this.owner());\r\n    /// #if_succeeds {:msg \"updateGovBrincPerBlock: sets govBrincPerBlock correctly\"}\r\n        /// govBrincPerBlock == _updatedGovBrincPerBlock;\r\n    function updateGovBrincPerBlock(uint256 _updatedGovBrincPerBlock) public onlyOwner {\r\n        massUpdatePools();\r\n        uint256 oldGovBrincPerBlock = govBrincPerBlock;\r\n        govBrincPerBlock = _updatedGovBrincPerBlock;\r\n        emit GovBrincPerBlockChanged(oldGovBrincPerBlock, govBrincPerBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev updates the ratio of BRC to gBRC tokens required for staking.\r\n     *\r\n     * @param _updatedRatioBrcToGov new ratio of BRC to gBRC for staking\r\n     */\r\n    /// #if_succeeds {:msg \"updateRatioBrcToGov: the sender must be Owner\"}\r\n        /// old(msg.sender == this.owner());\r\n    /// #if_succeeds {:msg \"updateRatioBrcToGov: sets ratioBrcToGov correctly\"}\r\n        /// ratioBrcToGov == _updatedRatioBrcToGov;\r\n    function updateRatioBrcToGov(uint256 _updatedRatioBrcToGov) public onlyOwner {\r\n        uint256 oldRatioBrcToGov = ratioBrcToGov;\r\n        ratioBrcToGov = _updatedRatioBrcToGov;\r\n        emit RatioBrcToGovChanged(oldRatioBrcToGov, ratioBrcToGov);\r\n    }\r\n\r\n    /**\r\n     * @dev staking owner will call to mint treasury tokens\r\n     * implemented this way so that users will not have to pay for the minting of the treasury tokens\r\n     * when pools are updated\r\n     * the `treasuryBalance` variable is used to keep track of the total number of tokens that the\r\n     * the treasury address will be able to mint at any given time.\r\n     */\r\n    /// #if_succeeds {:msg \"treasuryMint: the sender must be Owner\"}\r\n        /// old(msg.sender == this.owner());\r\n    function treasuryMint() public onlyOwner {\r\n        require(treasuryRewardBalance > 0, \"treasuryMint: not enough balance to mint\");\r\n        uint256 balanceToMint;\r\n        balanceToMint = treasuryRewardBalance;\r\n        treasuryRewardBalance = 0;\r\n        govBrincToken.mintToTreasury(balanceToMint);\r\n        emit TreasuryMint(balanceToMint);\r\n    }\r\n\r\n    /**\r\n     * @dev updates all pool information.\r\n     *\r\n     * Note Update reward vairables for all pools. Be careful of gas spending!\r\n     */\r\n    /// #if_succeeds {:msg \"massUpdatePools: case totalSupply == 0\"}\r\n        /// let multiplier := block.number - lastRewardBlock in\r\n        /// let unusedReward := multiplier.mul(govBrincPerBlock) in\r\n        /// getTotalSupplyOfAllPools() > 0 ==> treasuryRewardBalance == old(treasuryRewardBalance) + unusedReward;\r\n    /// #if_succeeds {:msg \"massUpdatePools: updates lastRewardBlock\"}\r\n        /// lastRewardBlock == block.number;\r\n    function massUpdatePools() internal isNotPaused {\r\n        uint256 totalSupply = getTotalSupplyOfAllPools();\r\n        if (totalSupply == 0) {\r\n            if (block.number > lastRewardBlock) {\r\n                uint256 multiplier = block.number.sub(lastRewardBlock);\r\n                uint256 unusedReward = multiplier.mul(govBrincPerBlock);\r\n                treasuryRewardBalance = treasuryRewardBalance.add(unusedReward);\r\n            }\r\n        } else {\r\n            uint256 govBrincReward;\r\n            govBrincReward = govBrincReward.add(updatePool(StakeMode.MODE1));\r\n            govBrincReward = govBrincReward.add(updatePool(StakeMode.MODE2));\r\n            govBrincReward = govBrincReward.add(updatePool(StakeMode.MODE3));\r\n            govBrincReward = govBrincReward.add(updatePool(StakeMode.MODE4));\r\n            govBrincReward = govBrincReward.add(updatePool(StakeMode.MODE5));\r\n            govBrincReward = govBrincReward.add(updatePool(StakeMode.MODE6));\r\n\r\n            if (govTokenOverMinted >= govBrincReward) {\r\n                govTokenOverMinted = govTokenOverMinted.sub(govBrincReward);\r\n            } else {\r\n                govBrincToken.mint(address(this), govBrincReward.sub(govTokenOverMinted));\r\n                govTokenOverMinted = 0;\r\n            }\r\n        }\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev update a given pool. This should be done every time a deposit or withdraw is made. \r\n     *\r\n     * Note Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    /// #if_succeeds {:msg \"updatePool: updates pool's information and mint's reward\"}\r\n        /// let totalSupply := getTotalSupplyOfAllPools() in\r\n        /// let multiplier := block.number.sub(lastRewardBlock) in\r\n        /// let govBrincReward := multiplier.mul(govBrincPerBlock).mul(poolInfo[mode].supply).mul(poolInfo[mode].weight).div(totalSupply) in\r\n        /// (block.number > lastRewardBlock) && (poolInfo[mode].supply != 0) ==> \r\n        /// govBrincToken.balanceOf(address(this)) == govBrincReward && poolInfo[mode].accGovBrincPerShare == poolInfo[mode].accGovBrincPerShare.add(govBrincReward.mul(1e12).div(poolInfo[mode].supply));\r\n    function updatePool(StakeMode mode) internal isNotPaused returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[mode];\r\n        if (block.number <= lastRewardBlock) {\r\n            return 0;\r\n        }\r\n        if (pool.supply == 0) {\r\n            return 0;\r\n        }\r\n        uint256 totalSupply = getTotalSupplyOfAllPools();\r\n        uint256 multiplier = block.number.sub(lastRewardBlock);\r\n        uint256 govBrincReward =\r\n            multiplier\r\n                .mul(govBrincPerBlock)\r\n                .mul(pool.supply)\r\n                .mul(pool.weight)\r\n                .div(totalSupply);\r\n        pool.accGovBrincPerShare = pool.accGovBrincPerShare.add(\r\n            govBrincReward.mul(1e12).div(pool.supply)\r\n        );\r\n        return govBrincReward;\r\n    }\r\n\r\n    /**\r\n     * @dev a user deposits some Brinc token for a given period. The period will be determined based on the pools.\r\n     * Every time a user deposits any stake, the pool will be updated.\r\n     * The user will only be allowed to deposit Brinc tokens to stake if they deposit the equivalent amount in governance tokens.\r\n     *\r\n     * Note Deposit Brinc tokens to BrincStaking for govBrinc token allocation.\r\n     */\r\n    /// #if_succeeds {:msg \"deposit: deposit Brinc token amount is correct\"}\r\n        /// poolInfo[_mode].brcOnly == true ==> brincToken.balanceOf(address(this)) == _amount + old(brincToken.balanceOf(address(this))) && govBrincToken.balanceOf(address(this)) == old(govBrincToken.balanceOf(address(this)));\r\n    /// #if_succeeds {:msg \"deposit: deposit Brinc Gov token amount is correct\"}\r\n        /// poolInfo[_mode].brcOnly == false ==> brincToken.balanceOf(address(this)) == _amount + old(brincToken.balanceOf(address(this))) && govBrincToken.balanceOf(address(this)) == _amount.mul(ratioBrcToGov).div(1e10);\r\n    /// #if_succeeds {:msg \"deposit: successful deposit should update user information correctly\"}\r\n        /// let depositNumber := getStakeCount().sub(1) in\r\n        /// depositNumber > 0 ==>\r\n        /// userInfo[msg.sender][depositNumber].brcStakedAmount == _amount && userInfo[msg.sender][depositNumber].unlockTimestamp == block.timestamp.add(poolInfo[_mode].lockTime) && userInfo[msg.sender][depositNumber].rewardDebt == userInfo[msg.sender][depositNumber].brcStakedAmount.mul(poolInfo[_mode].accGovBrincPerShare).div(1e12) && userInfo[msg.sender][depositNumber].mode == _mode;\r\n    /// #if_succeeds {:msg \"deposit: pool supply is updated correctly\"}\r\n        /// let depositNumber := getStakeCount().sub(1) in\r\n        /// depositNumber > 0 ==>\r\n        /// poolInfo[_mode].supply == old(poolInfo[_mode].supply) + userInfo[msg.sender][depositNumber].brcStakedAmount;\r\n    /// #if_succeeds {:msg \"deposit: userInfo array should increment by one\"}\r\n        /// userInfo[msg.sender].length == old(userInfo[msg.sender].length) + 1;\r\n    function deposit(uint256 _amount, StakeMode _mode) public {\r\n        require(_amount > 0, \"deposit: invalid amount\");\r\n        UserInfo memory user;\r\n        massUpdatePools();\r\n        PoolInfo storage pool = poolInfo[_mode];\r\n        brincToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        user.brcStakedAmount = _amount;\r\n        if (!pool.brcOnly) {\r\n            govBrincToken.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount.mul(ratioBrcToGov).div(1e10)\r\n            );\r\n            user.gBrcStakedAmount = _amount.mul(ratioBrcToGov).div(1e10);\r\n            stakedGovBrincToken.mint(msg.sender, user.gBrcStakedAmount);\r\n        }\r\n        user.unlockTimestamp = block.timestamp.add(pool.lockTime);\r\n        user.rewardDebt = user.brcStakedAmount.mul(pool.accGovBrincPerShare).div(1e12);\r\n        user.mode = _mode;\r\n\r\n        pool.supply = pool.supply.add(user.brcStakedAmount);\r\n        emit Deposit(msg.sender, _amount, _mode);\r\n\r\n        userInfo[msg.sender].push(user);\r\n    }\r\n\r\n    /**\r\n     * @dev a user withdraws their Brinc token that they have staked, including their rewards.\r\n     * Every time a user withdraws their stake, the pool will be updated.\r\n     *\r\n     * Note Withdraw Brinc tokens from BrincStaking.\r\n     */\r\n    /// #if_succeeds {:msg \"withdraw: token deducted from staking contract correctly\"}\r\n        /// let depositNumber := getStakeCount().sub(1) in\r\n        /// let _amount := userInfo[msg.sender][depositNumber].brcStakedAmount in\r\n        /// depositNumber > 0 ==>\r\n        /// old(brincToken.balanceOf(address(this))) == brincToken.balanceOf(address(this)) - _amount;\r\n    /// #if_succeeds {:msg \"withdraw: user's withdrawn Brinc token amount is correct\"}\r\n        /// let depositNumber := getStakeCount().sub(1) in\r\n        /// let _amount := userInfo[msg.sender][depositNumber].brcStakedAmount in\r\n        /// depositNumber > 0 ==>\r\n        /// brincToken.balanceOf(msg.sender) == old(brincToken.balanceOf(msg.sender)) + _amount;\r\n    /// #if_succeeds {:msg \"withdraw: user's withdrawn Brinc Gov reward amount is correct\"}\r\n        /// let reward, complete := old(pendingRewards(msg.sender, userInfo[msg.sender].length - 1)) in\r\n        /// govBrincToken.balanceOf(msg.sender) == reward && complete == true;\r\n    /// #if_succeeds {:msg \"withdraw: user information is updated correctly\"}\r\n        /// let depositNumber := getStakeCount().sub(1) in\r\n        /// let _amount := userInfo[msg.sender][depositNumber].brcStakedAmount in\r\n        /// depositNumber > 0 ==>\r\n        /// userInfo[msg.sender][depositNumber].rewardDebt == userInfo[msg.sender][depositNumber].brcStakedAmount.mul(poolInfo[userInfo[msg.sender][depositNumber].mode].accGovBrincPerShare).div(1e12) && userInfo[msg.sender][depositNumber].mode == userInfo[msg.sender][depositNumber].mode;\r\n    /// #if_succeeds {:msg \"withdraw: pool supply is updated correctly\"}\r\n        /// let depositNumber := getStakeCount().sub(1) in\r\n        /// depositNumber > 0 ==>\r\n        /// poolInfo[userInfo[msg.sender][depositNumber].mode].supply == old(poolInfo[userInfo[msg.sender][depositNumber].mode].supply).sub(userInfo[msg.sender][depositNumber].brcStakedAmount);\r\n    function withdraw(uint256 _id) public {\r\n        require(_id < userInfo[msg.sender].length, \"withdraw: invalid stake id\");\r\n\r\n        UserInfo memory user = userInfo[msg.sender][_id];\r\n        require(user.brcStakedAmount > 0, \"withdraw: nothing to withdraw\");\r\n        require(user.unlockTimestamp <= block.timestamp, \"withdraw: stake is still locked\");\r\n        massUpdatePools();\r\n        PoolInfo storage pool = poolInfo[user.mode];\r\n        uint256 pending =\r\n            user.brcStakedAmount.mul(pool.accGovBrincPerShare).div(1e12).sub(user.rewardDebt);\r\n        safeGovBrincTransfer(msg.sender, pending.add(user.gBrcStakedAmount));\r\n        stakedGovBrincToken.burnFrom(msg.sender, user.gBrcStakedAmount);\r\n        uint256 _amount = user.brcStakedAmount;\r\n        brincToken.safeTransfer(msg.sender, _amount);\r\n        pool.supply = pool.supply.sub(_amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n\r\n        _removeStake(msg.sender, _id);\r\n    }\r\n\r\n    /**\r\n     * @dev a user withdraws their Brinc token that they have staked, without caring their rewards.\r\n     * Only pool's supply will be updated.\r\n     *\r\n     * Note EmergencyWithdraw Brinc tokens from BrincStaking.\r\n     */\r\n    function emergencyWithdraw(uint256 _id) public {\r\n        require(_id < userInfo[msg.sender].length, \"emergencyWithdraw: invalid stake id\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender][_id];\r\n        require(user.brcStakedAmount > 0, \"emergencyWithdraw: nothing to withdraw\");\r\n        PoolInfo storage pool = poolInfo[user.mode];\r\n        safeGovBrincTransfer(msg.sender, user.gBrcStakedAmount);\r\n        stakedGovBrincToken.burnFrom(msg.sender, user.gBrcStakedAmount);\r\n\r\n        uint256 pendingReward =\r\n            user.brcStakedAmount.mul(pool.accGovBrincPerShare).div(1e12).sub(user.rewardDebt);\r\n        govTokenOverMinted = govTokenOverMinted.add(pendingReward);\r\n\r\n        delete user.gBrcStakedAmount;\r\n        uint256 _amount = user.brcStakedAmount;\r\n        delete user.brcStakedAmount;\r\n        brincToken.safeTransfer(msg.sender, _amount);\r\n        pool.supply = pool.supply.sub(_amount);\r\n        emit EmergencyWithdraw(msg.sender, _amount);\r\n\r\n        _removeStake(msg.sender, _id);\r\n    }\r\n\r\n    function _removeStake(address _user, uint256 _id) internal {\r\n        require(_id < userInfo[_user].length, \"invalid _id\");\r\n\r\n        userInfo[_user][_id] = userInfo[_user][userInfo[_user].length - 1];\r\n        userInfo[_user].pop();\r\n    }\r\n\r\n    /**\r\n     * @dev the safe transfer of the governance token rewards to the designated adress with the specified reward. \r\n     * Safe govBrinc transfer function, just in case if rounding error causes pool to not have enough govBrinc tokens.\r\n     *\r\n     * @param _to address to send Brinc Gov token rewards to\r\n     * @param _amount amount of Brinc Gov token rewards to send\r\n     *\r\n     * Note this will be only used internally inside the contract.\r\n     */\r\n    /// #if_succeeds {:msg \"safeGovBrincTransfer: transfer of Brinc Gov token is correct - case _amount > govBrincBal\"}\r\n        /// let initGovBrincBal := old(govBrincToken.balanceOf(_to)) in\r\n        /// let govBrincBal := old(govBrincToken.balanceOf(address(this))) in\r\n        /// _amount > govBrincBal ==> govBrincToken.balanceOf(_to) == initGovBrincBal + govBrincBal;\r\n    /// #if_succeeds {:msg \"safeGovBrincTransfer: transfer of Brinc Gov token is correct - case _amount < govBrincBal\"}\r\n        /// let initGovBrincBal := old(govBrincToken.balanceOf(_to)) in\r\n        /// let govBrincBal := old(govBrincToken.balanceOf(address(this))) in\r\n        /// _amount <= govBrincBal ==> govBrincToken.balanceOf(_to) == initGovBrincBal + _amount;\r\n    function safeGovBrincTransfer(address _to, uint256 _amount) internal {\r\n        uint256 govBrincBal = govBrincToken.balanceOf(address(this));\r\n        if (_amount > govBrincBal) {\r\n            govBrincToken.transfer(_to, govBrincBal);\r\n        } else {\r\n            govBrincToken.transfer(_to, _amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGovBrincPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGovBrincPerBlock\",\"type\":\"uint256\"}],\"name\":\"GovBrincPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"LockTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatioBrcToGov\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatioBrcToGov\",\"type\":\"uint256\"}],\"name\":\"RatioBrcToGovChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Resumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"WeightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"brincToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBrincTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovBrincPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolAccGovBrincPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioBtoG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"brcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gBrcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct BrincStaking.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govBrincPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govBrincToken\",\"outputs\":[{\"internalType\":\"contract IBrincGovToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_brincToken\",\"type\":\"address\"},{\"internalType\":\"contract IBrincGovToken\",\"name\":\"_brincGovToken\",\"type\":\"address\"},{\"internalType\":\"contract IStakedBrincGovToken\",\"name\":\"_stakedGovBrincToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_govBrincPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratioBrcToGov\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGovBrincPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"brcOnly\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBrcToGov\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedGovBrincToken\",\"outputs\":[{\"internalType\":\"contract IStakedBrincGovToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedGovBrincPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateGovBrincPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_updatedLockTime\",\"type\":\"uint256\"}],\"name\":\"updateLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedRatioBrcToGov\",\"type\":\"uint256\"}],\"name\":\"updateRatioBrcToGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"updateWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"brcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gBrcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BrincStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d17ab7876feba83124df854ef1938e0cdc8c52f51787f3055e5badbfc272d7bd"}]}