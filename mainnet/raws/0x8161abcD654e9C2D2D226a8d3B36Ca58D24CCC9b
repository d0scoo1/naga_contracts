{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/distribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.3;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\r\\n\\r\\n//@title SKY Token contract interface\\r\\ninterface token {\\r\\n    function balanceOf(address owner) external returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) external returns (bool success);\\r\\n}\\r\\n\\r\\n//@title SKY Initial Distribution Contract\\r\\ncontract distribution {\\r\\n    uint256 public SKYPrice;\\r\\n\\r\\n    address public token_addr;\\r\\n    token public token_contract = token(token_addr);\\r\\n\\r\\n    AggregatorInterface internal priceFeed;\\r\\n    address public oracle_address = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\r\\n\\r\\n    event sold(address seller, uint256 amount);\\r\\n    event bought(address buyer, uint256 amount);\\r\\n    event priceAdjusted(uint256 oldPrice, uint256 newPrice);\\r\\n\\r\\n    address payable public owner;\\r\\n    uint16 public USDperSKY = 80; //cents\\r\\n\\r\\n    constructor() {\\r\\n        owner = payable(msg.sender);\\r\\n\\r\\n        priceFeed = AggregatorInterface(oracle_address);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Sender not owner!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply two integers with extra checking the result\\r\\n     * @param   a Integer 1\\r\\n     *          b Integer 2\\r\\n     */\\r\\n    function safeMultiply(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 c = a * b;\\r\\n            assert(c / a == b);\\r\\n            return c;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide two integers with checking b is positive\\r\\n     * @param   a Integer 1\\r\\n     *          b Integer 2\\r\\n     */\\r\\n    function safeDivide(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set SKY Token contract address\\r\\n     * @param addr Address of SKY Token contract\\r\\n     */\\r\\n    function set_token_address(address addr) public onlyOwner {\\r\\n        token_addr = addr;\\r\\n        token_contract = token(token_addr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set oracle address, make sure chainlink format supported!\\r\\n     * @param addr Address of oracle contract\\r\\n     */\\r\\n    function set_oracle(address addr) public onlyOwner {\\r\\n        oracle_address = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy SKY tokens directly from the contract\\r\\n     */\\r\\n    function buy_SKY() public payable returns (bool success) {\\r\\n        require(msg.value > 0);\\r\\n\\r\\n        uint256 latest_ETHUSD_USD = getLatestPrice();\\r\\n\\r\\n        uint256 message_USD_value = safeMultiply(msg.value, latest_ETHUSD_USD);\\r\\n        uint256 scaledAmount = safeDivide(message_USD_value, USDperSKY) / 1e6;\\r\\n        require(\\r\\n            token_contract.balanceOf(address(this)) >= scaledAmount,\\r\\n            \\\"contract balance not enough\\\"\\r\\n        );\\r\\n\\r\\n        token_contract.transfer(msg.sender, scaledAmount);\\r\\n\\r\\n        emit bought(msg.sender, scaledAmount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function for when a user sends ether to the contract\\r\\n     * directly instead of calling the function\\r\\n     */\\r\\n    receive() external payable {\\r\\n        buy_SKY();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the SKY token price\\r\\n     * @param   SKYperETH the amount of SKY a user receives for 1 ETH\\r\\n     */\\r\\n    function adjustPrice(uint256 SKYperETH) public onlyOwner {\\r\\n        emit priceAdjusted(SKYPrice, SKYperETH);\\r\\n\\r\\n        SKYPrice = SKYperETH;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev End the SKY token distribution by sending all leftover tokens and ether to the contract owner\\r\\n     */\\r\\n    function endSKYDistr() public onlyOwner {\\r\\n        require(\\r\\n            token_contract.transfer(\\r\\n                owner,\\r\\n                token_contract.balanceOf(address(this))\\r\\n            )\\r\\n        );\\r\\n\\r\\n        owner.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets latest price from priceFeed chainlink oracle in 10^8 units.\\r\\n     */\\r\\n    function getLatestPrice() public view returns (uint256) {\\r\\n        uint256 price = uint256(priceFeed.latestAnswer());\\r\\n        // for ETH / USD price is scaled up by 10 ** 8\\r\\n        return price;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"priceAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SKYPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDperSKY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SKYperETH\",\"type\":\"uint256\"}],\"name\":\"adjustPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_SKY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSKYDistr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set_oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set_token_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_contract\",\"outputs\":[{\"internalType\":\"contract token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "distribution", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}