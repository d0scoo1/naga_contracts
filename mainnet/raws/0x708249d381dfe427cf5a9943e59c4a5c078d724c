{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.3.2 (utils/Strings.sol)\r\n\r\n/*\r\n    @contract BXToken\r\n    @description NFT Contract of bx.com.br\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n    \r\n    function append(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* @dev - name BX Contract\r\n*      - description BX Token used by our projects\r\n*      - author bx.com.br\r\n*      - url https://bx.com.br\r\n */\r\ncontract BXToken {\r\n    \r\n    using Strings for uint256;\r\n    \r\n    mapping (uint256 => address) private tokenOwner;\r\n    mapping (uint256 => uint256) public tokenToPrice;\r\n    mapping (uint256 => uint256) public tokenToBxId;\r\n    \r\n    event Mint(address indexed from_, uint256 tokenId_, uint256 bxId_, string name_, string tokenURI_, uint256 price_);\r\n    event Transfer(address indexed from_, address indexed to_, uint256 tokenId_, uint256 bxId_, uint256 price_);\r\n    \r\n    address payable owner;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n    string private _baseURI;\r\n    string private _baseURL;\r\n\r\n    \r\n    struct NFT {\r\n        uint256 tokenId;\r\n        uint256 bxId;\r\n        string name;\r\n        string group;\r\n        string tokenURI;\r\n    }\r\n    \r\n    NFT[] public _nfts;\r\n    \r\n    constructor(string memory name_, string memory symbol_, string memory baseURI_, string memory baseURL_) {\r\n        owner = payable(msg.sender);\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _baseURI = baseURI_;\r\n        _baseURL = baseURL_;\r\n    }\r\n    \r\n    /**\r\n     * @dev Modifier only contract owner can call method.\r\n     */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Append two strings\r\n     */\r\n    function append(string storage a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns owner of tokenId\r\n     */\r\n    function ownerOf(uint256 tokenId_) public view virtual returns (address) {\r\n        return tokenOwner[tokenId_];\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns token URL in market using tokenID\r\n     */\r\n    function getToken(uint256 tokenId_) public view virtual returns (uint256, string memory, string memory) {\r\n        NFT storage nft = _nfts[tokenId_];\r\n        return (nft.tokenId, nft.name, nft.tokenURI);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns tokenURI using tokenID\r\n     */\r\n    function tokenURI(uint256 tokenId_) public view virtual returns (string memory) {\r\n        NFT storage nft = _nfts[tokenId_];\r\n        return append(_baseURI, nft.tokenURI);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns token URL in market using tokenID\r\n     */\r\n    function tokenURL(uint256 tokenId_) public view virtual returns (string memory) {\r\n        NFT storage nft = _nfts[tokenId_];\r\n        return append(_baseURL, nft.tokenId.toString());\r\n    }\r\n    \r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _nfts.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set price to token. If price is zero, nft cannot be purchased\r\n     */\r\n    function setTokenPrice(uint256 tokenId_, uint256 price_) external {\r\n        require(msg.sender == tokenOwner[tokenId_], 'Not owner of this token');\r\n        tokenToPrice[tokenId_] = price_;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns token price\r\n     */\r\n    function getTokenPrice(uint256 tokenId_) public view virtual returns (uint256) {\r\n        return tokenToPrice[tokenId_];\r\n    }\r\n    \r\n    /**\r\n     * @dev Mint nft. If price is zero, nft cannot be purchased\r\n     */\r\n    function mintNFT(address to_, string memory name_, string memory group_, string memory tokenURI_, uint256 bxId_, uint256 price_) external onlyOwner returns (uint256) {\r\n        require(owner == msg.sender); // Only the Owner can create nfts\r\n        uint256 nftId = totalSupply(); // NFT id\r\n        _nfts.push(NFT(nftId, bxId_, name_, group_, tokenURI_));\r\n        tokenOwner[nftId] = to_;\r\n        tokenToPrice[nftId] = price_;\r\n        tokenToBxId[nftId] = bxId_;\r\n        emit Mint(msg.sender, nftId, bxId_, name_, tokenURI_, price_);\r\n        return nftId;\r\n    }\r\n    \r\n    /**\r\n     * @dev Buy nft. Pay nft price, transfer to seller, change of owner.\r\n     */\r\n    function buy(uint256 tokenId_) external payable {\r\n        uint256 price = tokenToPrice[tokenId_];\r\n        string memory token_not_for_sale = Strings.append('This token is not for sale - ', Strings.toString(price));\r\n        require(price != 0, token_not_for_sale);\r\n        require(msg.value == price, 'Incorrect value');\r\n        \r\n        address seller = tokenOwner[tokenId_];\r\n        require(seller != msg.sender, 'You already have this token');\r\n        \r\n        payable(seller).transfer(msg.value);\r\n        \r\n        tokenOwner[tokenId_] = msg.sender;\r\n        \r\n        tokenToPrice[tokenId_] = 0; // not for sale for now\r\n        \r\n        emit Transfer(seller, msg.sender, tokenId_, tokenToBxId[tokenId_], price);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURL_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bxId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bxId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_nfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bxId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"group\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"group_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bxId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToBxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BXToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000074258546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034258540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001668747470733a2f2f6e66742e62782e636f6d2e62722f00000000000000000000000000000000000000000000000000000000000000000000000000000000001768747470733a2f2f697066732e62782e636f6d2e62722f000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd179ded0c1b46bfb91de4735ed6cac8e56301365828e32fc1cfe8cd5f70ae32"}]}