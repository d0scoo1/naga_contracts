{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File contracts/libs/IERC165.sol\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (`ERC165Checker`).\r\n *\r\n * For an implementation, see `ERC165`.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File contracts/libs/ERC165.sol\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Implementation of the `IERC165` interface.\r\n *\r\n * Contracts may inherit from this and call `_registerInterface` to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC165.supportsInterface`.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See `IERC165.supportsInterface`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File contracts/libs/IERC721.sol\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\nabstract contract IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either `approve` or `setApproveForAll`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual;\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either `approve` or `setApproveForAll`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual;\r\n\r\n    function approve(address to, uint256 tokenId) public virtual;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public virtual;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\nabstract contract IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external virtual view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external virtual view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external virtual view returns (uint256);\r\n}\r\n\r\n// File contracts/libs/Address.sol\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.9;\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    function concatenate(string memory a, string memory b)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n\r\n    /**\r\n     * @dev converts string to integer\r\n     */\r\n\r\n    function str2int(string memory numString) internal pure returns (uint256) {\r\n        uint256 val = 0;\r\n        bytes memory stringBytes = bytes(numString);\r\n        for (uint256 i; i < stringBytes.length; i++) {\r\n            uint256 exp = stringBytes.length - i;\r\n            bytes1 ival = stringBytes[i];\r\n            uint8 uval = uint8(ival);\r\n            uint256 jval = uval - uint256(0x30);\r\n\r\n            val += (uint256(jval) * (10**(exp - 1)));\r\n        }\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * @dev get substring of string\r\n     */\r\n    function substring(\r\n        string memory str,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            result[i - startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    /**\r\n     * @dev gets string length\r\n     */\r\n    function stringLength(string memory str)\r\n        internal\r\n        pure\r\n        returns (uint256 length)\r\n    {\r\n        uint256 i = 0;\r\n        bytes memory string_rep = bytes(str);\r\n\r\n        while (i < string_rep.length) {\r\n            if (string_rep[i] >> 7 == 0) i += 1;\r\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\r\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\r\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\r\n                i += 4;\r\n                //For safety\r\n            else i += 1;\r\n\r\n            length++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev reverses string\r\n     */\r\n    function reverse(string memory _base)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        assert(_baseBytes.length > 0);\r\n\r\n        string memory _tempValue = new string(_baseBytes.length);\r\n        bytes memory _newValue = bytes(_tempValue);\r\n\r\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\r\n            _newValue[_baseBytes.length - i - 1] = _baseBytes[i];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.9;\r\n\r\nlibrary Ints {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File contracts/libs/IERC721Receiver.sol\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\nabstract contract IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Does not support burning tokens to address(0).\r\n *\r\n * Assumes that an owner cannot have more than the 2**128 - 1 (max value of uint128) of supply\r\n */\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintedQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror OwnerQueryForNonexistentToken();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror UnableDetermineTokenOwner();\r\nerror UnableGetTokenOwnerByIndex();\r\nerror URIQueryForNonexistentToken();\r\nerror BurnedQueryForZeroAddress();\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using Address for address;\r\n    using Ints for uint256;\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n    }\r\n\r\n    struct AddressData {\r\n        // Realistically, 2**64-1 is more than enough.\r\n        uint64 balance;\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n        uint64 numberMinted;\r\n        // Keeps track of burn count with minimal overhead for tokenomics.\r\n        uint64 numberBurned;\r\n    }\r\n\r\n    uint256 internal currentIndex;\r\n\r\n    uint256[] internal burnedTokens;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return currentIndex - burnedTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\r\n        return uint256(_addressData[owner].numberBurned);\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function ownershipOf(uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (TokenOwnership memory)\r\n    {\r\n        if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();\r\n\r\n        unchecked {\r\n            for (uint256 curr = tokenId; curr >= 0; curr--) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (!ownership.burned) {\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        revert UnableDetermineTokenOwner();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Added by @dotjiwa to track burned tokens.\r\n     */\r\n    function isBurned(uint256 tokenId) public view returns (bool) {\r\n        return _ownerships[tokenId].burned;\r\n    }\r\n\r\n    function getBurnedTokens() public view returns (uint256[] memory) {\r\n        return burnedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Brought over from ERC721 by @dotjiwa.\r\n     */\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length != 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender()))\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        override\r\n    {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        if (!_checkOnERC721Received(from, to, tokenId, _data))\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return tokenId < currentIndex;\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal {\r\n        _safeMint(to, startTokenId, quantity, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, startTokenId, quantity, _data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\r\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint64(quantity);\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (\r\n                    safe &&\r\n                    !_checkOnERC721Received(address(0), to, updatedIndex, _data)\r\n                ) {\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n\r\n                updatedIndex++;\r\n            }\r\n\r\n            currentIndex = currentIndex + quantity;\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\r\n    function _burn(uint256 tokenId) internal {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        //update balance of owner\r\n        _addressData[prevOwnership.addr].balance -= 1;\r\n        _addressData[prevOwnership.addr].numberBurned += 1;\r\n\r\n        // Keep track of who burned the token, and the timestamp of burning.\r\n        _ownerships[tokenId].addr = prevOwnership.addr;\r\n        _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n        _ownerships[tokenId].burned = true;\r\n\r\n        //store burned token id which will update total supply\r\n        burnedTokens.push(tokenId);\r\n\r\n        unchecked {\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                if (_exists(nextTokenId)) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership\r\n                        .startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\r\n\r\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner(); //also catches burned tokens\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            _ownerships[tokenId].addr = to;\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                if (_exists(nextTokenId)) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership\r\n                        .startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0)\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface NtentTokenUri {\r\n    function tokenUri(uint256 _tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface NtentTransfer {\r\n    function onTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        uint256 _quantity\r\n    ) external view returns (string memory);\r\n}\r\n\r\ncontract NtentArtX is ERC721A {\r\n    using Ints for uint256;\r\n    using Strings for string;\r\n\r\n    event Mint(\r\n        uint256 indexed _startTokenId,\r\n        uint256 indexed _endTokenId,\r\n        uint256 indexed _projectId\r\n    );\r\n\r\n    event TokenBurned(address indexed _tokenOwner, uint256 indexed _tokenId);\r\n\r\n    struct Project {\r\n        string name;\r\n        string artist;\r\n        string description;\r\n        string website;\r\n        string license;\r\n        address purchaseContract;\r\n        address dataContract;\r\n        address tokenUriContract;\r\n        address transferContract;\r\n        bool acceptsMintPass;\r\n        uint256 mintPassProjectId;\r\n        bool dynamic;\r\n        string projectBaseURI;\r\n        string projectBaseIpfsURI;\r\n        uint256 invocations;\r\n        uint256 maxInvocations;\r\n        string scriptJSON;\r\n        mapping(uint256 => string) scripts;\r\n        uint256 scriptCount;\r\n        string ipfsHash;\r\n        bool useHashString;\r\n        bool useIpfs;\r\n        bool active;\r\n        bool locked;\r\n        bool paused;\r\n    }\r\n\r\n    uint256 constant ONE_MILLION = 1_000_000;\r\n    mapping(uint256 => Project) projects;\r\n\r\n    //All financial functions are stripped from struct for visibility\r\n    mapping(uint256 => address) public projectIdToArtistAddress;\r\n    mapping(uint256 => uint256) public projectIdToPricePerTokenInWei;\r\n\r\n    address public ntentAddress;\r\n    uint256 public ntentPercentage = 10;\r\n\r\n    mapping(uint256 => string) public staticIpfsImageLink;\r\n\r\n    address public admin;\r\n    mapping(address => bool) public isRainbowlisted;\r\n    mapping(address => bool) public isMintRainbowlisted;\r\n\r\n    uint256 public nextProjectId = 3;\r\n    uint256 public startProjectId = 3;\r\n\r\n    uint256 private _royaltyBps;\r\n    address payable private _royaltyRecipient;\r\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\r\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\r\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\r\n\r\n    mapping(address => bool) proxyToApproved;\r\n\r\n    modifier onlyValidTokenId(uint256 _tokenId) {\r\n        require(_exists(_tokenId), \"Token ID not exists\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnlocked(uint256 _projectId) {\r\n        require(!projects[_projectId].locked, \"Only if unlocked\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyArtist(uint256 _projectId) {\r\n        require(\r\n            msg.sender == projectIdToArtistAddress[_projectId],\r\n            \"Only artist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRainbowlisted() {\r\n        require(isRainbowlisted[msg.sender], \"Only Rainbowlisted\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyArtistOrRainbowlisted(uint256 _projectId) {\r\n        require(\r\n            isRainbowlisted[msg.sender] ||\r\n                msg.sender == projectIdToArtistAddress[_projectId],\r\n            \"Only artist or Rainbowlisted\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _tokenName, string memory _tokenSymbol)\r\n        ERC721A(_tokenName, _tokenSymbol)\r\n    {\r\n        admin = msg.sender;\r\n        isRainbowlisted[msg.sender] = true;\r\n        ntentAddress = msg.sender;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721A)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            ERC721A.supportsInterface(interfaceId) ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE ||\r\n            interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981 ||\r\n            interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE;\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view override returns (bool) {\r\n        uint256 projectId = tokenIdToProjectId(tokenId);\r\n        return\r\n            (tokenId <\r\n                ((projectId * ONE_MILLION) +\r\n                    projects[projectId].invocations)) &&\r\n            (tokenId >= (projectId * ONE_MILLION) && !isBurned(tokenId));\r\n    }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _projectId,\r\n        uint256 quantity,\r\n        address _by\r\n    ) external returns (uint256 _tokenId) {\r\n        require(\r\n            isMintRainbowlisted[msg.sender],\r\n            \"Must mint from Rainbowlisted minter\"\r\n        );\r\n        require(\r\n            projects[_projectId].invocations + quantity <=\r\n                projects[_projectId].maxInvocations,\r\n            \"Exceeds max invocations\"\r\n        );\r\n        require(\r\n            projects[_projectId].active ||\r\n                _by == projectIdToArtistAddress[_projectId],\r\n            \"Proj must exist and be active\"\r\n        );\r\n        require(\r\n            !projects[_projectId].paused ||\r\n                _by == projectIdToArtistAddress[_projectId],\r\n            \"Purchases are paused\"\r\n        );\r\n\r\n        uint256 tokenId = _mintTokens(_to, _projectId, quantity);\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function _mintTokens(\r\n        address _to,\r\n        uint256 _projectId,\r\n        uint256 quantity\r\n    ) internal returns (uint256 _tokenId) {\r\n        uint256 nextStartTokenId = (_projectId * ONE_MILLION) +\r\n            projects[_projectId].invocations;\r\n\r\n        projects[_projectId].invocations =\r\n            projects[_projectId].invocations +\r\n            quantity;\r\n\r\n        _safeMint(_to, nextStartTokenId, quantity);\r\n\r\n        emit Mint(nextStartTokenId, nextStartTokenId + quantity, _projectId);\r\n\r\n        return nextStartTokenId;\r\n    }\r\n\r\n    function burn(address ownerAddress, uint256 tokenId)\r\n        external\r\n        returns (uint256 _tokenId)\r\n    {\r\n        require(\r\n            isMintRainbowlisted[msg.sender],\r\n            \"Must burn from Rainbowlisted minter\"\r\n        );\r\n        _burn(tokenId);\r\n        emit TokenBurned(ownerAddress, tokenId);\r\n        return tokenId;\r\n    }\r\n\r\n    function updateNtentAddress(address _ntentAddress) public onlyAdmin {\r\n        ntentAddress = _ntentAddress;\r\n    }\r\n\r\n    function updateNtentPercentage(uint256 _ntentPercentage) public onlyAdmin {\r\n        require(_ntentPercentage <= 50, \"Max of 50%\");\r\n        ntentPercentage = _ntentPercentage;\r\n    }\r\n\r\n    function addRainbowlisted(address _address) public onlyAdmin {\r\n        isRainbowlisted[_address] = true;\r\n    }\r\n\r\n    function removeRainbowlisted(address _address) public onlyAdmin {\r\n        isRainbowlisted[_address] = false;\r\n    }\r\n\r\n    function addMintRainbowlisted(address _address) public onlyAdmin {\r\n        isMintRainbowlisted[_address] = true;\r\n    }\r\n\r\n    function removeMintRainbowlisted(address _address) public onlyAdmin {\r\n        isMintRainbowlisted[_address] = false;\r\n    }\r\n\r\n    function getPricePerTokenInWei(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        return projectIdToPricePerTokenInWei[_projectId];\r\n    }\r\n\r\n    function toggleProjectIsLocked(uint256 _projectId)\r\n        public\r\n        onlyRainbowlisted\r\n        onlyUnlocked(_projectId)\r\n    {\r\n        projects[_projectId].locked = true;\r\n    }\r\n\r\n    function toggleProjectIsActive(uint256 _projectId)\r\n        public\r\n        onlyRainbowlisted\r\n    {\r\n        projects[_projectId].active = !projects[_projectId].active;\r\n    }\r\n\r\n    function updateProjectArtistAddress(\r\n        uint256 _projectId,\r\n        address _artistAddress\r\n    ) public onlyArtistOrRainbowlisted(_projectId) {\r\n        projectIdToArtistAddress[_projectId] = _artistAddress;\r\n    }\r\n\r\n    function toggleProjectIsPaused(uint256 _projectId)\r\n        public\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        projects[_projectId].paused = !projects[_projectId].paused;\r\n    }\r\n\r\n    function addProject(\r\n        string memory _projectName,\r\n        address _artistAddress,\r\n        uint256 _pricePerTokenInWei,\r\n        address _purchaseContract,\r\n        bool _acceptsMintPass,\r\n        uint256 _mintPassProjectId,\r\n        bool _dynamic\r\n    ) public onlyRainbowlisted {\r\n        uint256 projectId = nextProjectId;\r\n        projectIdToArtistAddress[projectId] = _artistAddress;\r\n        projects[projectId].name = _projectName;\r\n        projects[projectId].purchaseContract = _purchaseContract;\r\n        projects[projectId].acceptsMintPass = _acceptsMintPass;\r\n        projects[projectId].mintPassProjectId = _mintPassProjectId;\r\n        projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;\r\n        projects[projectId].paused = true;\r\n        projects[projectId].dynamic = _dynamic;\r\n        projects[projectId].maxInvocations = ONE_MILLION;\r\n        if (!_dynamic) {\r\n            projects[projectId].useHashString = false;\r\n        } else {\r\n            projects[projectId].useHashString = true;\r\n        }\r\n        nextProjectId = nextProjectId + 1;\r\n    }\r\n\r\n    function updateProjectPricePerTokenInWei(\r\n        uint256 _projectId,\r\n        uint256 _pricePerTokenInWei\r\n    ) public onlyArtist(_projectId) {\r\n        projectIdToPricePerTokenInWei[_projectId] = _pricePerTokenInWei;\r\n    }\r\n\r\n    function updateProjectName(uint256 _projectId, string memory _projectName)\r\n        public\r\n        onlyUnlocked(_projectId)\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        projects[_projectId].name = _projectName;\r\n    }\r\n\r\n    function updateProjectArtistName(\r\n        uint256 _projectId,\r\n        string memory _projectArtistName\r\n    ) public onlyUnlocked(_projectId) onlyArtistOrRainbowlisted(_projectId) {\r\n        projects[_projectId].artist = _projectArtistName;\r\n    }\r\n\r\n    function updateProjectPurchaseContractInfo(\r\n        uint256 _projectId,\r\n        address _projectPurchaseContract,\r\n        bool _acceptsMintPass,\r\n        uint256 _mintPassProjectId\r\n    ) public onlyUnlocked(_projectId) onlyRainbowlisted {\r\n        projects[_projectId].purchaseContract = _projectPurchaseContract;\r\n        projects[_projectId].acceptsMintPass = _acceptsMintPass;\r\n        projects[_projectId].mintPassProjectId = _mintPassProjectId;\r\n    }\r\n\r\n    function updateProjectDataContractInfo(\r\n        uint256 _projectId,\r\n        address _projectDataContract\r\n    ) public onlyUnlocked(_projectId) onlyRainbowlisted {\r\n        projects[_projectId].dataContract = _projectDataContract;\r\n    }\r\n\r\n    function updateTransferContractInfo(\r\n        uint256 _projectId,\r\n        address _projectTransferContract\r\n    ) public onlyUnlocked(_projectId) onlyRainbowlisted {\r\n        projects[_projectId].transferContract = _projectTransferContract;\r\n    }\r\n\r\n    function updateProjectTokenUriContractInfo(\r\n        uint256 _projectId,\r\n        address _projectTokenUriContract\r\n    ) public onlyUnlocked(_projectId) onlyRainbowlisted {\r\n        projects[_projectId].tokenUriContract = _projectTokenUriContract;\r\n    }\r\n\r\n    function updateProjectDescription(\r\n        uint256 _projectId,\r\n        string memory _projectDescription\r\n    ) public onlyArtist(_projectId) {\r\n        projects[_projectId].description = _projectDescription;\r\n    }\r\n\r\n    function updateProjectWebsite(\r\n        uint256 _projectId,\r\n        string memory _projectWebsite\r\n    ) public onlyArtist(_projectId) {\r\n        projects[_projectId].website = _projectWebsite;\r\n    }\r\n\r\n    function updateProjectLicense(\r\n        uint256 _projectId,\r\n        string memory _projectLicense\r\n    ) public onlyUnlocked(_projectId) onlyArtistOrRainbowlisted(_projectId) {\r\n        projects[_projectId].license = _projectLicense;\r\n    }\r\n\r\n    function updateProjectMaxInvocations(\r\n        uint256 _projectId,\r\n        uint256 _maxInvocations\r\n    ) public onlyArtist(_projectId) {\r\n        require(\r\n            (!projects[_projectId].locked ||\r\n                _maxInvocations < projects[_projectId].maxInvocations),\r\n            \"Only if unlocked\"\r\n        );\r\n        require(\r\n            _maxInvocations > projects[_projectId].invocations,\r\n            \"Max invocations exceeds current\"\r\n        );\r\n        require(_maxInvocations <= ONE_MILLION, \"Cannot exceed 1000000\");\r\n        projects[_projectId].maxInvocations = _maxInvocations;\r\n    }\r\n\r\n    function toggleProjectUseHashString(uint256 _projectId)\r\n        public\r\n        onlyUnlocked(_projectId)\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        require(\r\n            projects[_projectId].invocations == 0,\r\n            \"Cannot modify after token is minted.\"\r\n        );\r\n        projects[_projectId].useHashString = !projects[_projectId]\r\n            .useHashString;\r\n    }\r\n\r\n    function addProjectScript(uint256 _projectId, string memory _script)\r\n        public\r\n        onlyUnlocked(_projectId)\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        projects[_projectId].scripts[\r\n            projects[_projectId].scriptCount\r\n        ] = _script;\r\n        projects[_projectId].scriptCount = projects[_projectId].scriptCount + 1;\r\n    }\r\n\r\n    function updateProjectScript(\r\n        uint256 _projectId,\r\n        uint256 _scriptId,\r\n        string memory _script\r\n    ) public onlyUnlocked(_projectId) onlyArtistOrRainbowlisted(_projectId) {\r\n        require(\r\n            _scriptId < projects[_projectId].scriptCount,\r\n            \"scriptId out of range\"\r\n        );\r\n        projects[_projectId].scripts[_scriptId] = _script;\r\n    }\r\n\r\n    function removeProjectLastScript(uint256 _projectId)\r\n        public\r\n        onlyUnlocked(_projectId)\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        require(\r\n            projects[_projectId].scriptCount > 0,\r\n            \"there are no scripts to remove\"\r\n        );\r\n        delete projects[_projectId].scripts[\r\n            projects[_projectId].scriptCount - 1\r\n        ];\r\n        projects[_projectId].scriptCount = projects[_projectId].scriptCount + 1;\r\n    }\r\n\r\n    function updateProjectScriptJSON(\r\n        uint256 _projectId,\r\n        string memory _projectScriptJSON\r\n    ) public onlyUnlocked(_projectId) onlyArtistOrRainbowlisted(_projectId) {\r\n        projects[_projectId].scriptJSON = _projectScriptJSON;\r\n    }\r\n\r\n    function updateProjectIpfsHash(uint256 _projectId, string memory _ipfsHash)\r\n        public\r\n        onlyUnlocked(_projectId)\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        projects[_projectId].ipfsHash = _ipfsHash;\r\n    }\r\n\r\n    function updateProjectBaseURI(uint256 _projectId, string memory _newBaseURI)\r\n        public\r\n        onlyArtist(_projectId)\r\n    {\r\n        projects[_projectId].projectBaseURI = _newBaseURI;\r\n    }\r\n\r\n    function updateProjectBaseIpfsURI(\r\n        uint256 _projectId,\r\n        string memory _projectBaseIpfsURI\r\n    ) public onlyArtist(_projectId) {\r\n        projects[_projectId].projectBaseIpfsURI = _projectBaseIpfsURI;\r\n    }\r\n\r\n    function toggleProjectUseIpfsForStatic(uint256 _projectId)\r\n        public\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        require(\r\n            !projects[_projectId].dynamic,\r\n            \"can only set static IPFS hash for static projects\"\r\n        );\r\n        projects[_projectId].useIpfs = !projects[_projectId].useIpfs;\r\n    }\r\n\r\n    function toggleProjectIsDynamic(uint256 _projectId)\r\n        public\r\n        onlyUnlocked(_projectId)\r\n        onlyArtistOrRainbowlisted(_projectId)\r\n    {\r\n        require(\r\n            projects[_projectId].invocations == 0,\r\n            \"Can not switch after a token is minted.\"\r\n        );\r\n        if (projects[_projectId].dynamic) {\r\n            projects[_projectId].useHashString = false;\r\n        } else {\r\n            projects[_projectId].useHashString = true;\r\n        }\r\n        projects[_projectId].dynamic = !projects[_projectId].dynamic;\r\n    }\r\n\r\n    function overrideTokenDynamicImageWithIpfsLink(\r\n        uint256 _tokenId,\r\n        string memory _ipfsHash\r\n    ) public onlyArtistOrRainbowlisted(tokenIdToProjectId(_tokenId)) {\r\n        staticIpfsImageLink[_tokenId] = _ipfsHash;\r\n    }\r\n\r\n    function clearTokenIpfsImageUri(uint256 _tokenId)\r\n        public\r\n        onlyArtistOrRainbowlisted(tokenIdToProjectId(_tokenId))\r\n    {\r\n        delete staticIpfsImageLink[tokenIdToProjectId(_tokenId)];\r\n    }\r\n\r\n    function projectDetails(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (\r\n            string memory projectName,\r\n            string memory artist,\r\n            string memory description,\r\n            string memory website,\r\n            string memory license,\r\n            bool dynamic\r\n        )\r\n    {\r\n        projectName = projects[_projectId].name;\r\n        artist = projects[_projectId].artist;\r\n        description = projects[_projectId].description;\r\n        website = projects[_projectId].website;\r\n        license = projects[_projectId].license;\r\n        dynamic = projects[_projectId].dynamic;\r\n    }\r\n\r\n    function projectTokenInfo(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (\r\n            address artistAddress,\r\n            uint256 pricePerTokenInWei,\r\n            uint256 invocations,\r\n            uint256 maxInvocations,\r\n            bool active,\r\n            address purchaseContract,\r\n            address dataContract,\r\n            address tokenUriContract,\r\n            address transferContract,\r\n            bool acceptsMintPass,\r\n            uint256 mintPassProjectId\r\n        )\r\n    {\r\n        artistAddress = projectIdToArtistAddress[_projectId];\r\n        pricePerTokenInWei = projectIdToPricePerTokenInWei[_projectId];\r\n        invocations = projects[_projectId].invocations;\r\n        maxInvocations = projects[_projectId].maxInvocations;\r\n        active = projects[_projectId].active;\r\n        purchaseContract = projects[_projectId].purchaseContract;\r\n        dataContract = projects[_projectId].dataContract;\r\n        tokenUriContract = projects[_projectId].tokenUriContract;\r\n        transferContract = projects[_projectId].transferContract;\r\n        acceptsMintPass = projects[_projectId].acceptsMintPass;\r\n        mintPassProjectId = projects[_projectId].mintPassProjectId;\r\n    }\r\n\r\n    function projectBurnedTokens(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 burnedIndex;\r\n        uint256 burnedTokenId;\r\n        uint256 projectBurnedCount = projectBurnedTokensCount(_projectId);\r\n        uint256[] memory burnedTokenIds = new uint256[](projectBurnedCount);\r\n\r\n        uint256 burnedTokenLength = burnedTokens.length;\r\n        for (uint256 i; i < burnedTokenLength; i++) {\r\n            burnedTokenId = burnedTokens[i];\r\n            if (tokenIdToProjectId(burnedTokenId) == _projectId) {\r\n                burnedTokenIds[burnedIndex] = burnedTokenId;\r\n            }\r\n        }\r\n        return burnedTokenIds;\r\n    }\r\n\r\n    function projectScriptInfo(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (\r\n            string memory scriptJSON,\r\n            uint256 scriptCount,\r\n            bool useHashString,\r\n            string memory ipfsHash,\r\n            bool locked,\r\n            bool paused\r\n        )\r\n    {\r\n        scriptJSON = projects[_projectId].scriptJSON;\r\n        scriptCount = projects[_projectId].scriptCount;\r\n        useHashString = projects[_projectId].useHashString;\r\n        ipfsHash = projects[_projectId].ipfsHash;\r\n        locked = projects[_projectId].locked;\r\n        paused = projects[_projectId].paused;\r\n    }\r\n\r\n    function projectScriptByIndex(uint256 _projectId, uint256 _index)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return projects[_projectId].scripts[_index];\r\n    }\r\n\r\n    function projectURIInfo(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (\r\n            string memory projectBaseURI,\r\n            string memory projectBaseIpfsURI,\r\n            bool useIpfs\r\n        )\r\n    {\r\n        projectBaseURI = projects[_projectId].projectBaseURI;\r\n        projectBaseIpfsURI = projects[_projectId].projectBaseIpfsURI;\r\n        useIpfs = projects[_projectId].useIpfs;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public override {\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _beforeTokenTransfers(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        uint256 _quantity\r\n    ) internal view override {\r\n        //check if custom transfer contract, if so, send call.\r\n        if (\r\n            projects[tokenIdToProjectId(_tokenId)].transferContract !=\r\n            address(0)\r\n        ) {\r\n            NtentTransfer ntentTransfer = NtentTransfer(\r\n                projects[tokenIdToProjectId(_tokenId)].transferContract\r\n            );\r\n            ntentTransfer.onTransfer(_from, _to, _tokenId, _quantity);\r\n        }\r\n    }\r\n\r\n    function bulkTransfer(\r\n        address[] calldata _addressList,\r\n        uint256[] calldata _tokenList\r\n    ) public onlyAdmin {\r\n        uint256 addressLength = _addressList.length;\r\n        uint256 tokenLength = _tokenList.length;\r\n        require(addressLength > 0, \"Address quantity must greater than zero\");\r\n        require(\r\n            addressLength == tokenLength,\r\n            \"Token quantity must equal address quantity\"\r\n        );\r\n\r\n        for (uint256 i; i < addressLength; i++) {\r\n            address _toAddress = _addressList[i];\r\n            uint256 _tokenId = _tokenList[i];\r\n            safeTransferFrom(msg.sender, _toAddress, _tokenId);\r\n        }\r\n    }\r\n\r\n    function projectShowAllTokens(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return projectIdToTokenIds(_projectId);\r\n    }\r\n\r\n    function projectIdToTokenIds(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 tId;\r\n        uint256 tokenId;\r\n        uint256 projTokenLength = projects[_projectId].invocations;\r\n        uint256 projectBurnedCount = projectBurnedTokensCount(_projectId);\r\n        uint256[] memory projectTokens = new uint256[](\r\n            projTokenLength - projectBurnedCount\r\n        );\r\n\r\n        for (uint256 i; i < projTokenLength; i++) {\r\n            tokenId = (_projectId * ONE_MILLION) + i;\r\n            if (isBurned(tokenId) == false) {\r\n                projectTokens[tId] = tokenId;\r\n                tId++;\r\n            }\r\n        }\r\n        return projectTokens;\r\n    }\r\n\r\n    function projectBurnedTokensCount(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 tokenId;\r\n        uint256 count;\r\n        uint256 burnedTokenLength = burnedTokens.length;\r\n        for (uint256 i; i < burnedTokenLength; i++) {\r\n            tokenId = burnedTokens[i];\r\n            if (tokenIdToProjectId(tokenId) == _projectId) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    //example input : 1000004\r\n    function tokenIdToProjectId(uint256 _tokenId)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        //convert to string and reverse\r\n        string memory reversed = _tokenId.toString().reverse();\r\n        //chop off reversed project id from end, reverse back\r\n        string memory strProjectId = reversed\r\n            .substring(6, reversed.stringLength())\r\n            .reverse();\r\n\r\n        return strProjectId.str2int();\r\n    }\r\n\r\n    function tokensOfOwner(address owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 ownerBalance = balanceOf(owner);\r\n        uint256 foundCount;\r\n        address currOwnershipAddr;\r\n\r\n        uint256[] memory ownerTokenIds = new uint256[](ownerBalance);\r\n\r\n        // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\r\n        unchecked {\r\n            for (uint256 i = startProjectId; i < nextProjectId; i++) {\r\n                uint256[] memory projectTokens = projectIdToTokenIds(i);\r\n\r\n                for (uint256 ii; ii < projectTokens.length; ii++) {\r\n                    uint256 tokenId = projectTokens[ii];\r\n\r\n                    TokenOwnership memory ownership = _ownerships[tokenId];\r\n                    if (ownership.addr != address(0)) {\r\n                        currOwnershipAddr = ownership.addr;\r\n                    }\r\n                    if (currOwnershipAddr == owner) {\r\n                        ownerTokenIds[foundCount] = tokenId;\r\n                        foundCount++;\r\n                    }\r\n                    if (foundCount == ownerBalance) {\r\n                        return ownerTokenIds;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        revert UnableGetTokenOwnerByIndex();\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        onlyValidTokenId(_tokenId)\r\n        returns (string memory)\r\n    {\r\n        //check if custom tokenUri contract, if so, use that.\r\n        if (\r\n            projects[tokenIdToProjectId(_tokenId)].tokenUriContract !=\r\n            address(0)\r\n        ) {\r\n            NtentTokenUri ntentTokenUri = NtentTokenUri(\r\n                projects[tokenIdToProjectId(_tokenId)].tokenUriContract\r\n            );\r\n            //if returned tokenUri is not empty, else continue\r\n            string memory tUri = ntentTokenUri.tokenUri(_tokenId);\r\n            if(bytes(tUri).length > 0)\r\n                return tUri;\r\n        }\r\n\r\n        //check if tokenId has a specified image link\r\n        if (bytes(staticIpfsImageLink[_tokenId]).length > 0) {\r\n            return\r\n                projects[tokenIdToProjectId(_tokenId)]\r\n                    .projectBaseIpfsURI\r\n                    .concatenate(staticIpfsImageLink[_tokenId]);\r\n        }\r\n\r\n        //check if the project has a single overall token Uri (mintpass, etc)\r\n        if (\r\n            !projects[tokenIdToProjectId(_tokenId)].dynamic &&\r\n            projects[tokenIdToProjectId(_tokenId)].useIpfs\r\n        ) {\r\n            return\r\n                projects[tokenIdToProjectId(_tokenId)]\r\n                    .projectBaseIpfsURI\r\n                    .concatenate(\r\n                        projects[tokenIdToProjectId(_tokenId)].ipfsHash\r\n                    );\r\n        }\r\n\r\n        return\r\n            projects[tokenIdToProjectId(_tokenId)].projectBaseURI.concatenate(\r\n                _tokenId.toString()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Royalties\r\n     */\r\n\r\n    function updateRoyalties(address payable recipient, uint256 bps)\r\n        external\r\n        onlyRainbowlisted\r\n    {\r\n        _royaltyRecipient = recipient;\r\n        _royaltyBps = bps;\r\n    }\r\n\r\n    function getRoyalties(uint256)\r\n        external\r\n        view\r\n        returns (address payable[] memory recipients, uint256[] memory bps)\r\n    {\r\n        if (_royaltyRecipient != address(0x0)) {\r\n            recipients = new address payable[](1);\r\n            recipients[0] = _royaltyRecipient;\r\n            bps = new uint256[](1);\r\n            bps[0] = _royaltyBps;\r\n        }\r\n        return (recipients, bps);\r\n    }\r\n\r\n    function getFeeRecipients(uint256)\r\n        external\r\n        view\r\n        returns (address payable[] memory recipients)\r\n    {\r\n        if (_royaltyRecipient != address(0x0)) {\r\n            recipients = new address payable[](1);\r\n            recipients[0] = _royaltyRecipient;\r\n        }\r\n        return recipients;\r\n    }\r\n\r\n    function getFeeBps(uint256) external view returns (uint256[] memory bps) {\r\n        if (_royaltyRecipient != address(0x0)) {\r\n            bps = new uint256[](1);\r\n            bps[0] = _royaltyBps;\r\n        }\r\n        return bps;\r\n    }\r\n\r\n    function royaltyInfo(uint256, uint256 value)\r\n        external\r\n        view\r\n        returns (address, uint256)\r\n    {\r\n        return (_royaltyRecipient, (value * _royaltyBps) / 10000);\r\n    }\r\n\r\n    /**\r\n     * Proxy \r\n     */\r\n\r\n    function flipProxyState(address proxyAddress) public onlyRainbowlisted{\r\n        proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];\r\n    }\r\n\r\n    //proxy registration\r\n    function isApprovedForAll(address _owner, address _operator) public view override returns (bool){\r\n        if(proxyToApproved[_operator]) return true;\r\n        return super.isApprovedForAll(_owner, _operator);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\r\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n\r\n        uint256 tokenIdsIdx;\r\n\r\n                // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\r\n        unchecked {\r\n            for (uint256 i = startProjectId; i < nextProjectId; i++) {\r\n                uint256[] memory projectTokens = projectIdToTokenIds(i);\r\n\r\n                for (uint256 ii; ii < projectTokens.length; ii++) {\r\n                    uint256 tokenId = projectTokens[ii];\r\n\r\n                    TokenOwnership memory ownership = _ownerships[tokenId];\r\n                    if (!ownership.burned) {\r\n                        if (tokenIdsIdx == index) {\r\n                            return tokenId;\r\n                        }\r\n                        tokenIdsIdx++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        revert UnableGetTokenOwnerByIndex();\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public override view returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return tokensOfOwner(owner)[index];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableDetermineTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableGetTokenOwnerByIndex\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_startTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_endTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMintRainbowlisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerTokenInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_purchaseContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_acceptsMintPass\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_mintPassProjectId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_dynamic\",\"type\":\"bool\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_script\",\"type\":\"string\"}],\"name\":\"addProjectScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRainbowlisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenList\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"clearTokenIpfsImageUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getPricePerTokenInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintRainbowlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRainbowlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntentPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"overrideTokenDynamicImageWithIpfsLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectBurnedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artist\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"license\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"dynamic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToArtistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToPricePerTokenInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectIdToTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"projectScriptByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectScriptInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"scriptJSON\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"scriptCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useHashString\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectShowAllTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTokenInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvocations\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"purchaseContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenUriContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"acceptsMintPass\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"mintPassProjectId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectURIInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"projectBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectBaseIpfsURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"useIpfs\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMintRainbowlisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"removeProjectLastScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRainbowlisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staticIpfsImageLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsDynamic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectUseHashString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectUseIpfsForStatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntentAddress\",\"type\":\"address\"}],\"name\":\"updateNtentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntentPercentage\",\"type\":\"uint256\"}],\"name\":\"updateNtentPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"updateProjectArtistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectArtistName\",\"type\":\"string\"}],\"name\":\"updateProjectArtistName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectBaseIpfsURI\",\"type\":\"string\"}],\"name\":\"updateProjectBaseIpfsURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"updateProjectBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_projectDataContract\",\"type\":\"address\"}],\"name\":\"updateProjectDataContractInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectDescription\",\"type\":\"string\"}],\"name\":\"updateProjectDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"updateProjectIpfsHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectLicense\",\"type\":\"string\"}],\"name\":\"updateProjectLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInvocations\",\"type\":\"uint256\"}],\"name\":\"updateProjectMaxInvocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"updateProjectName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerTokenInWei\",\"type\":\"uint256\"}],\"name\":\"updateProjectPricePerTokenInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_projectPurchaseContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_acceptsMintPass\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_mintPassProjectId\",\"type\":\"uint256\"}],\"name\":\"updateProjectPurchaseContractInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scriptId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_script\",\"type\":\"string\"}],\"name\":\"updateProjectScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectScriptJSON\",\"type\":\"string\"}],\"name\":\"updateProjectScriptJSON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_projectTokenUriContract\",\"type\":\"address\"}],\"name\":\"updateProjectTokenUriContractInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectWebsite\",\"type\":\"string\"}],\"name\":\"updateProjectWebsite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"updateRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_projectTransferContract\",\"type\":\"address\"}],\"name\":\"updateTransferContractInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NtentArtX", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "345", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000096e74656e742e617274000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064e54454e54580000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea43e44c71b202e1e76d8f5a4647a09af5a76ed773e546e0dcf65a1e6a155e4b"}]}