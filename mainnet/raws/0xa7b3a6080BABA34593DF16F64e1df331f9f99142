{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Sender.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2018-08-06\\n*/\\n\\npragma solidity ^0.4.24;\\n\\n/*\\n    ERC20 Standard Token interface\\n*/\\ncontract IERC20Token {\\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\\n    function name() public constant returns (string) {}\\n    function symbol() public constant returns (string) {}\\n    function decimals() public constant returns (uint8) {}\\n    function totalSupply() public constant returns (uint256) {}\\n    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\\n    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\n}\\n\\n/*\\n    @title Provides support and utilities for contract ownership\\n*/\\ncontract Ownable {\\n    address public owner;\\n    address public newOwner;\\n\\n    event OwnerUpdate(address _prevOwner, address _newOwner);\\n\\n    /*\\n        @dev constructor\\n    */\\n    constructor(address _owner) public {\\n        owner = _owner;\\n    }\\n\\n    /*\\n        @dev allows execution by the owner only\\n    */\\n    modifier ownerOnly {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /*\\n        @dev allows transferring the contract ownership\\n        the new owner still needs to accept the transfer\\n        can only be called by the contract owner\\n\\n        @param _newOwner    new contract owner\\n    */\\n    function transferOwnership(address _newOwner) public ownerOnly {\\n        require(_newOwner != owner);\\n        newOwner = _newOwner;\\n    }\\n\\n    /*\\n        @dev used by a new owner to accept an ownership transfer\\n    */\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwner);\\n        emit OwnerUpdate(owner, newOwner);\\n        owner = newOwner;\\n        newOwner = address(0);\\n    }\\n}\\n\\ncontract BatchTokensTransfer is Ownable {\\n\\n    /*\\n        @dev constructor\\n\\n    */\\n    constructor () public Ownable(msg.sender) {}\\n\\n    function batchTokensTransfer(IERC20Token _token, address[] _usersWithdrawalAccounts, uint256[] _amounts) \\n        public\\n        ownerOnly()\\n        {\\n            require(_usersWithdrawalAccounts.length == _amounts.length);\\n\\n            for (uint i = 0; i < _usersWithdrawalAccounts.length; i++) {\\n                if (_usersWithdrawalAccounts[i] != 0x0) {\\n                    _token.transfer(_usersWithdrawalAccounts[i], _amounts[i]);\\n                }\\n            }\\n        }\\n\\n    function transferToken(IERC20Token _token, address _userWithdrawalAccount, uint256 _amount)\\n        public\\n        ownerOnly()\\n        {\\n            require(_userWithdrawalAccount != 0x0 && _amount > 0);\\n            _token.transfer(_userWithdrawalAccount, _amount);\\n        }\\n\\n    function transferAllTokensToOwner(IERC20Token _token)\\n        public\\n        ownerOnly()\\n        {\\n            uint256 _amount = _token.balanceOf(this);\\n            _token.transfer(owner, _amount);\\n        }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_usersWithdrawalAccounts\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTokensTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferAllTokensToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]", "ContractName": "BatchTokensTransfer", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}