{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Write nested JSON using solidity\r\n * @author Ben Meredith\r\n * @dev https://github.com/bmeredith/solidity-json-writer\r\n */\r\n\r\nlibrary JsonWriter {\r\n  using JsonWriter for string;\r\n\r\n  struct Json {\r\n    int256 depthBitTracker;\r\n    string value;\r\n  }\r\n\r\n  bytes1 constant BACKSLASH = bytes1(uint8(92));\r\n  bytes1 constant BACKSPACE = bytes1(uint8(8));\r\n  bytes1 constant CARRIAGE_RETURN = bytes1(uint8(13));\r\n  bytes1 constant DOUBLE_QUOTE = bytes1(uint8(34));\r\n  bytes1 constant FORM_FEED = bytes1(uint8(12));\r\n  bytes1 constant FRONTSLASH = bytes1(uint8(47));\r\n  bytes1 constant HORIZONTAL_TAB = bytes1(uint8(9));\r\n  bytes1 constant NEWLINE = bytes1(uint8(10));\r\n\r\n  string constant TRUE = \"true\";\r\n  string constant FALSE = \"false\";\r\n  bytes1 constant OPEN_BRACE = \"{\";\r\n  bytes1 constant CLOSED_BRACE = \"}\";\r\n  bytes1 constant OPEN_BRACKET = \"[\";\r\n  bytes1 constant CLOSED_BRACKET = \"]\";\r\n  bytes1 constant LIST_SEPARATOR = \",\";\r\n\r\n  int256 constant MAX_INT256 = type(int256).max;\r\n\r\n  /**\r\n   * @dev Writes the beginning of a JSON array.\r\n   */\r\n  function writeStartArray(Json memory json) public pure returns (Json memory) {\r\n    return writeStart(json, OPEN_BRACKET);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the beginning of a JSON array with a property name as the key.\r\n   */\r\n  function writeStartArray(Json memory json, string memory propertyName)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    return writeStart(json, propertyName, OPEN_BRACKET);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the beginning of a JSON object.\r\n   */\r\n  function writeStartObject(Json memory json)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    return writeStart(json, OPEN_BRACE);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the beginning of a JSON object with a property name as the key.\r\n   */\r\n  function writeStartObject(Json memory json, string memory propertyName)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    return writeStart(json, propertyName, OPEN_BRACE);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the end of a JSON array.\r\n   */\r\n  function writeEndArray(Json memory json) public pure returns (Json memory) {\r\n    return writeEnd(json, CLOSED_BRACKET);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the end of a JSON object.\r\n   */\r\n  function writeEndObject(Json memory json) public pure returns (Json memory) {\r\n    return writeEnd(json, CLOSED_BRACE);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the property name and address value (as a JSON string) as part of a name/value pair of a JSON object.\r\n   */\r\n  function writeAddressProperty(\r\n    Json memory json,\r\n    string memory propertyName,\r\n    address value\r\n  ) public pure returns (Json memory) {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          propertyName,\r\n          '\": \"',\r\n          addressToString(value),\r\n          '\"'\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          '\"',\r\n          propertyName,\r\n          '\": \"',\r\n          addressToString(value),\r\n          '\"'\r\n        )\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the address value (as a JSON string) as an element of a JSON array.\r\n   */\r\n  function writeAddressValue(Json memory json, address value)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          addressToString(value),\r\n          '\"'\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, '\"', addressToString(value), '\"')\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the property name and boolean value (as a JSON literal \"true\" or \"false\") as part of a name/value pair of a JSON object.\r\n   */\r\n  function writeBooleanProperty(\r\n    Json memory json,\r\n    string memory propertyName,\r\n    bool value\r\n  ) public pure returns (Json memory) {\r\n    string memory strValue;\r\n    if (value) {\r\n      strValue = TRUE;\r\n    } else {\r\n      strValue = FALSE;\r\n    }\r\n\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          propertyName,\r\n          '\": ',\r\n          strValue\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, '\"', propertyName, '\": ', strValue)\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the boolean value (as a JSON literal \"true\" or \"false\") as an element of a JSON array.\r\n   */\r\n  function writeBooleanValue(Json memory json, bool value)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    string memory strValue;\r\n    if (value) {\r\n      strValue = TRUE;\r\n    } else {\r\n      strValue = FALSE;\r\n    }\r\n\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, LIST_SEPARATOR, strValue)\r\n      );\r\n    } else {\r\n      json.value = string(abi.encodePacked(json.value, strValue));\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the property name and int value (as a JSON number) as part of a name/value pair of a JSON object.\r\n   */\r\n  function writeIntProperty(\r\n    Json memory json,\r\n    string memory propertyName,\r\n    int256 value\r\n  ) public pure returns (Json memory) {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          propertyName,\r\n          '\": ',\r\n          intToString(value)\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          '\"',\r\n          propertyName,\r\n          '\": ',\r\n          intToString(value)\r\n        )\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the int value (as a JSON number) as an element of a JSON array.\r\n   */\r\n  function writeIntValue(Json memory json, int256 value)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, LIST_SEPARATOR, intToString(value))\r\n      );\r\n    } else {\r\n      json.value = string(abi.encodePacked(json.value, intToString(value)));\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the property name and value of null as part of a name/value pair of a JSON object.\r\n   */\r\n  function writeNullProperty(Json memory json, string memory propertyName)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          propertyName,\r\n          '\": null'\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, '\"', propertyName, '\": null')\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the value of null as an element of a JSON array.\r\n   */\r\n  function writeNullValue(Json memory json) public pure returns (Json memory) {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, \"null\"));\r\n    } else {\r\n      json.value = string(abi.encodePacked(json.value, \"null\"));\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the string text value (as a JSON string) as an element of a JSON array.\r\n   */\r\n  function writeStringProperty(\r\n    Json memory json,\r\n    string memory propertyName,\r\n    string memory value\r\n  ) public pure returns (Json memory) {\r\n    string memory jsonEscapedString = escapeJsonString(value);\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          propertyName,\r\n          '\": \"',\r\n          jsonEscapedString,\r\n          '\"'\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          '\"',\r\n          propertyName,\r\n          '\": \"',\r\n          jsonEscapedString,\r\n          '\"'\r\n        )\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.\r\n   */\r\n  function writeStringValue(Json memory json, string memory value)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    string memory jsonEscapedString = escapeJsonString(value);\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          jsonEscapedString,\r\n          '\"'\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, '\"', jsonEscapedString, '\"')\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the property name and uint value (as a JSON number) as part of a name/value pair of a JSON object.\r\n   */\r\n  function writeUintProperty(\r\n    Json memory json,\r\n    string memory propertyName,\r\n    uint256 value\r\n  ) public pure returns (Json memory) {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          propertyName,\r\n          '\": ',\r\n          uintToString(value)\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          '\"',\r\n          propertyName,\r\n          '\": ',\r\n          uintToString(value)\r\n        )\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the uint value (as a JSON number) as an element of a JSON array.\r\n   */\r\n  function writeUintValue(Json memory json, uint256 value)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, LIST_SEPARATOR, uintToString(value))\r\n      );\r\n    } else {\r\n      json.value = string(abi.encodePacked(json.value, uintToString(value)));\r\n    }\r\n\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the beginning of a JSON array or object based on the token parameter.\r\n   */\r\n  function writeStart(Json memory json, bytes1 token)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, token));\r\n    } else {\r\n      json.value = string(abi.encodePacked(json.value, token));\r\n    }\r\n\r\n    json.depthBitTracker &= MAX_INT256;\r\n    json.depthBitTracker++;\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the beginning of a JSON array or object based on the token parameter with a property name as the key.\r\n   */\r\n  function writeStart(\r\n    Json memory json,\r\n    string memory propertyName,\r\n    bytes1 token\r\n  ) public pure returns (Json memory) {\r\n    if (json.depthBitTracker < 0) {\r\n      json.value = string(\r\n        abi.encodePacked(\r\n          json.value,\r\n          LIST_SEPARATOR,\r\n          '\"',\r\n          propertyName,\r\n          '\": ',\r\n          token\r\n        )\r\n      );\r\n    } else {\r\n      json.value = string(\r\n        abi.encodePacked(json.value, '\"', propertyName, '\": ', token)\r\n      );\r\n    }\r\n\r\n    json.depthBitTracker &= MAX_INT256;\r\n    json.depthBitTracker++;\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes the end of a JSON array or object based on the token parameter.\r\n   */\r\n  function writeEnd(Json memory json, bytes1 token)\r\n    public\r\n    pure\r\n    returns (Json memory)\r\n  {\r\n    json.value = string(abi.encodePacked(json.value, token));\r\n    json.depthBitTracker = setListSeparatorFlag(json);\r\n\r\n    if (getCurrentDepth(json) != 0) {\r\n      json.depthBitTracker--;\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * @dev Escapes any characters that required by JSON to be escaped.\r\n   */\r\n  function escapeJsonString(string memory value)\r\n    public\r\n    pure\r\n    returns (string memory str)\r\n  {\r\n    bytes memory b = bytes(value);\r\n    bool foundEscapeChars;\r\n\r\n    for (uint256 i; i < b.length; i++) {\r\n      if (b[i] == BACKSLASH) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      } else if (b[i] == DOUBLE_QUOTE) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      } else if (b[i] == FRONTSLASH) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      } else if (b[i] == HORIZONTAL_TAB) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      } else if (b[i] == FORM_FEED) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      } else if (b[i] == NEWLINE) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      } else if (b[i] == CARRIAGE_RETURN) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      } else if (b[i] == BACKSPACE) {\r\n        foundEscapeChars = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!foundEscapeChars) {\r\n      return value;\r\n    }\r\n\r\n    for (uint256 i; i < b.length; i++) {\r\n      if (b[i] == BACKSLASH) {\r\n        str = string(abi.encodePacked(str, \"\\\\\\\\\"));\r\n      } else if (b[i] == DOUBLE_QUOTE) {\r\n        str = string(abi.encodePacked(str, '\\\\\"'));\r\n      } else if (b[i] == FRONTSLASH) {\r\n        str = string(abi.encodePacked(str, \"\\\\/\"));\r\n      } else if (b[i] == HORIZONTAL_TAB) {\r\n        str = string(abi.encodePacked(str, \"\\\\t\"));\r\n      } else if (b[i] == FORM_FEED) {\r\n        str = string(abi.encodePacked(str, \"\\\\f\"));\r\n      } else if (b[i] == NEWLINE) {\r\n        str = string(abi.encodePacked(str, \"\\\\n\"));\r\n      } else if (b[i] == CARRIAGE_RETURN) {\r\n        str = string(abi.encodePacked(str, \"\\\\r\"));\r\n      } else if (b[i] == BACKSPACE) {\r\n        str = string(abi.encodePacked(str, \"\\\\b\"));\r\n      } else {\r\n        str = string(abi.encodePacked(str, b[i]));\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * @dev Tracks the recursive depth of the nested objects / arrays within the JSON text\r\n   * written so far. This provides the depth of the current token.\r\n   */\r\n  function getCurrentDepth(Json memory json) public pure returns (int256) {\r\n    return json.depthBitTracker & MAX_INT256;\r\n  }\r\n\r\n  /**\r\n   * @dev The highest order bit of json.depthBitTracker is used to discern whether we are writing the first item in a list or not.\r\n   * if (json.depthBitTracker >> 255) == 1, add a list separator before writing the item\r\n   * else, no list separator is needed since we are writing the first item.\r\n   */\r\n  function setListSeparatorFlag(Json memory json)\r\n    private\r\n    pure\r\n    returns (int256)\r\n  {\r\n    return json.depthBitTracker | (int256(1) << 255);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts an address to a string.\r\n   */\r\n  function addressToString(address _address)\r\n    internal\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    bytes32 value = bytes32(uint256(uint160(_address)));\r\n    bytes16 alphabet = \"0123456789abcdef\";\r\n\r\n    bytes memory str = new bytes(42);\r\n    str[0] = \"0\";\r\n    str[1] = \"x\";\r\n    for (uint256 i; i < 20; i++) {\r\n      str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\r\n      str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n    }\r\n\r\n    return string(str);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts an int to a string.\r\n   */\r\n  function intToString(int256 i) internal pure returns (string memory) {\r\n    if (i == 0) {\r\n      return \"0\";\r\n    }\r\n\r\n    if (i == type(int256).min) {\r\n      // hard-coded since int256 min value can't be converted to unsigned\r\n      return\r\n        \"-57896044618658097711785492504343953926634992332820282019728792003956564819968\";\r\n    }\r\n\r\n    bool negative = i < 0;\r\n    uint256 len;\r\n    uint256 j;\r\n    if (!negative) {\r\n      j = uint256(i);\r\n    } else {\r\n      j = uint256(-i);\r\n      ++len; // make room for '-' sign\r\n    }\r\n\r\n    uint256 l = j;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len;\r\n    while (l != 0) {\r\n      bstr[--k] = bytes1((48 + uint8(l - (l / 10) * 10)));\r\n      l /= 10;\r\n    }\r\n\r\n    if (negative) {\r\n      bstr[0] = \"-\"; // prepend '-'\r\n    }\r\n\r\n    return string(bstr);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a uint to a string.\r\n   */\r\n  function uintToString(uint256 _i) internal pure returns (string memory) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n\r\n    uint256 j = _i;\r\n    uint256 len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len;\r\n    while (_i != 0) {\r\n      bstr[--k] = bytes1((48 + uint8(_i - (_i / 10) * 10)));\r\n      _i /= 10;\r\n    }\r\n\r\n    return string(bstr);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"escapeJsonString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"}],\"name\":\"getCurrentDepth\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"writeAddressProperty\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"writeAddressValue\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"writeBooleanProperty\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"writeBooleanValue\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"bytes1\",\"name\":\"token\",\"type\":\"bytes1\"}],\"name\":\"writeEnd\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"}],\"name\":\"writeEndArray\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"}],\"name\":\"writeEndObject\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"writeIntProperty\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"writeIntValue\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"}],\"name\":\"writeNullProperty\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"}],\"name\":\"writeNullValue\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"},{\"internalType\":\"bytes1\",\"name\":\"token\",\"type\":\"bytes1\"}],\"name\":\"writeStart\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"bytes1\",\"name\":\"token\",\"type\":\"bytes1\"}],\"name\":\"writeStart\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"}],\"name\":\"writeStartArray\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"}],\"name\":\"writeStartArray\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"}],\"name\":\"writeStartObject\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"}],\"name\":\"writeStartObject\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"writeStringProperty\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"writeStringValue\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"propertyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"writeUintProperty\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"json\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"writeUintValue\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"depthBitTracker\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct JsonWriter.Json\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "JsonWriter", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://311de66ade038f9a570d417e8e3eda83afc83cdebfab2bf19af3467e49ba6cb7"}]}