{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/renderer/Mood.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./SVG.sol\\\";\\nimport \\\"./WatchData.sol\\\";\\n\\nenum EyeType {\\n    Open,\\n    Closed,\\n    TopHalf,\\n    BottomHalf,\\n    Wink\\n}\\n\\nenum EyeTickLineType {\\n    Outside,\\n    InsideTop,\\n    InsideBottom\\n}\\n\\nenum EyePosition {\\n    Left,\\n    Right\\n}\\n\\nenum MouthType {\\n    Line,\\n    BottomStroke,\\n    BottomFill,\\n    TopFill,\\n    WholeFill\\n}\\n\\n// Convenience functions for formatting all the metadata related to a particular NFT\\nlibrary Mood {\\n    function render(uint256 _id) public pure returns (string memory) {\\n        WatchData.MoodId moodId = WatchData.MoodId(_id);\\n\\n        if (moodId == WatchData.MoodId.Surprised) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.WholeFill),\\n                        renderEye(EyeType.Open, EyePosition.Left),\\n                        renderEye(EyeType.Open, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Happy) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.BottomStroke),\\n                        renderEye(EyeType.TopHalf, EyePosition.Left),\\n                        renderEye(EyeType.TopHalf, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Relaxed) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.BottomStroke),\\n                        renderEye(EyeType.Closed, EyePosition.Left),\\n                        renderEye(EyeType.Closed, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Excited) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.WholeFill),\\n                        renderEye(EyeType.Open, EyePosition.Left),\\n                        renderEye(EyeType.Open, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Speechless) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderEye(EyeType.Open, EyePosition.Left),\\n                        renderEye(EyeType.Open, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Chilling) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.BottomFill),\\n                        renderEye(EyeType.BottomHalf, EyePosition.Left),\\n                        renderEye(EyeType.BottomHalf, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Annoyed) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.TopFill),\\n                        renderEye(EyeType.BottomHalf, EyePosition.Left),\\n                        renderEye(EyeType.BottomHalf, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Sleepy) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.WholeFill),\\n                        renderEye(EyeType.Closed, EyePosition.Left),\\n                        renderEye(EyeType.Closed, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Unimpressed) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.Line),\\n                        renderEye(EyeType.BottomHalf, EyePosition.Left),\\n                        renderEye(EyeType.BottomHalf, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Meditating) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.Line),\\n                        renderEye(EyeType.Closed, EyePosition.Left),\\n                        renderEye(EyeType.Closed, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Relieved) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.BottomFill),\\n                        renderEye(EyeType.Closed, EyePosition.Left),\\n                        renderEye(EyeType.Closed, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Cheeky) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.BottomFill),\\n                        renderEye(EyeType.TopHalf, EyePosition.Left),\\n                        renderEye(EyeType.Wink, EyePosition.Right)\\n                    )\\n                );\\n        } else if (moodId == WatchData.MoodId.Sus) {\\n            return\\n                svg.g(\\n                    utils.NULL,\\n                    string.concat(\\n                        renderMouth(MouthType.Line),\\n                        renderEye(EyeType.Wink, EyePosition.Left),\\n                        renderEye(EyeType.Wink, EyePosition.Right)\\n                    )\\n                );\\n        }\\n\\n        return utils.NULL;\\n    }\\n\\n    function renderEye(EyeType _type, EyePosition _position)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        if (_type == EyeType.Open) {\\n            return\\n                eyeContainer(\\n                    _position,\\n                    string.concat(\\n                        renderEyePupil(_type),\\n                        renderEyeTicklines(EyeTickLineType.InsideTop)\\n                    )\\n                );\\n        } else if (_type == EyeType.Closed) {\\n            return\\n                eyeContainer(\\n                    _position,\\n                    string.concat(\\n                        renderEyePupil(_type),\\n                        renderEyeTicklines(EyeTickLineType.Outside)\\n                    )\\n                );\\n        } else if (_type == EyeType.BottomHalf) {\\n            return\\n                eyeContainer(\\n                    _position,\\n                    string.concat(\\n                        renderEyePupil(_type),\\n                        renderEyeTicklines(EyeTickLineType.InsideTop)\\n                    )\\n                );\\n        } else if (_type == EyeType.TopHalf) {\\n            return\\n                eyeContainer(\\n                    _position,\\n                    string.concat(\\n                        renderEyePupil(_type),\\n                        renderEyeTicklines(EyeTickLineType.InsideTop)\\n                    )\\n                );\\n        } else if (_type == EyeType.Wink) {\\n            return\\n                eyeContainer(\\n                    _position,\\n                    string.concat(\\n                        renderEyePupil(_type),\\n                        renderEyeTicklines(EyeTickLineType.InsideBottom)\\n                    )\\n                );\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // Eye and Eye helpers\\n    // Contains all contents and purely deals with setting the x/y position.\\n    function eyeContainer(EyePosition _position, string memory _children)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 xPos = _position == EyePosition.Left\\n            ? 124 /* left */\\n            : 236; /* right */\\n        uint256 yPos = 140;\\n\\n        return\\n            svg.g(\\n                svg.prop(\\n                    \\\"transform\\\",\\n                    string.concat(\\n                        \\\"translate(\\\",\\n                        utils.uint2str(xPos),\\n                        \\\" \\\",\\n                        utils.uint2str(yPos),\\n                        \\\")\\\"\\n                    )\\n                ),\\n                string.concat(\\n                    // always use this background circle behind every eye combo / contents.\\n                    svg.circle(\\n                        string.concat(\\n                            svg.prop(\\\"cx\\\", utils.uint2str(0)),\\n                            svg.prop(\\\"cy\\\", utils.uint2str(0)),\\n                            svg.prop(\\\"r\\\", utils.uint2str(36)),\\n                            svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fs\\\")),\\n                            svg.prop(\\\"filter\\\", utils.getDefURL(\\\"insetShadow\\\")),\\n                            svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                            svg.prop(\\\"stroke-opacity\\\", \\\"0.5\\\")\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    _children\\n                )\\n            );\\n    }\\n\\n    function renderEyePupil(EyeType _type)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        if (_type == EyeType.Open) {\\n            return\\n                svg.circle(\\n                    string.concat(\\n                        svg.prop(\\\"r\\\", utils.uint2str(8)),\\n                        svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == EyeType.Closed) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"fill\\\", \\\"none\\\"),\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"d\\\", \\\"M-32.4 0a32.4 32.4 0 0 0 64.8 0\\\"),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == EyeType.BottomHalf) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"d\\\", \\\"M-9 0A9 9 0 0 0 9 0Z\\\"),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == EyeType.TopHalf) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"d\\\", \\\"M9 0A9 9 0 0 0-9 0Z\\\"),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == EyeType.Wink) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"d\\\", \\\"M-8.1-2H8.1\\\"),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        }\\n        return utils.NULL;\\n    }\\n\\n    function renderEyeTicklines(EyeTickLineType _type)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        if (_type == EyeTickLineType.Outside) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\n                            \\\"d\\\",\\n                            \\\"M43.2 0h-4m3.1 9-3.91259-.83165M39.5 17.6l-3.65418-1.62695M34.9 25.4l-3.23607-2.35114M28.9 32.1l-2.67652-2.97258M21.6 37.4l-2-3.4641M13.3 41.1l-1.23607-3.80423M4.5 43l-.41811-3.97809M-4.5 43l.41811-3.97809M-13.3 41.1l1.23607-3.80423M-21.6 37.4l2-3.4641M-28.9 32.1l2.67652-2.97258M-34.9 25.4l3.23607-2.35114M-39.5 17.6l3.65418-1.62695M-42.3 9l3.91259-.83165M-43.2 0h4\\\"\\n                        ),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == EyeTickLineType.InsideTop) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\"),\\n                        svg.prop(\\n                            \\\"d\\\",\\n                            \\\"m-31.7-6.7 3.91259.83165M-29.6-13.2l3.65418 1.62695M-26.2-19l3.23607 2.35114M-21.7-24.1l2.67652 2.97258M-16.2-28.1l2 3.4641M-10-30.8l1.23607 3.80423M-3.4-32.2l.41811 3.97809M3.4-32.2l-.41811 3.97809M10-30.8l-1.23607 3.80423M16.2-28.1l-2 3.4641m7.5.5359-2.67652 2.97258M26.2-19l-3.23607 2.35114M29.6-13.2l-3.65418 1.62695M31.7-6.7l-3.91259.83165\\\"\\n                        )\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == EyeTickLineType.InsideBottom) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\"),\\n                        svg.prop(\\n                            \\\"d\\\",\\n                            \\\"M32.4 0h-4m3.3 6.7-3.91259-.83165M29.6 13.2l-3.65418-1.62695M26.2 19l-3.23607-2.35114M21.7 24.1l-2.67652-2.97258M16.2 28.1l-2-3.4641M10 30.8l-1.23607-3.80423M3.4 32.2l-.41811-3.97809M-3.4 32.2l.41811-3.97809M-10 30.8l1.23607-3.80423M-16.2 28.1l2-3.4641m-7.5-.5359 2.67652-2.97258M-26.2 19l3.23607-2.35114M-29.6 13.2l3.65418-1.62695M-31.7 6.7l3.91259-.83165M-32.4 0h4\\\"\\n                        )\\n                    ),\\n                    utils.NULL\\n                );\\n        }\\n\\n        return utils.NULL;\\n    }\\n\\n    // Mouth and Mouth helpers\\n    function renderMouth(MouthType _type) public pure returns (string memory) {\\n        if (_type == MouthType.Line) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\"),\\n                        svg.prop(\\\"d\\\", \\\"M157.5 223h45\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == MouthType.BottomStroke) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"fill\\\", \\\"none\\\"),\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"opacity\\\", \\\"0.5\\\"),\\n                        svg.prop(\\\"d\\\", \\\"M164.41154 217a18 18 0 0 0 31.17692 0\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == MouthType.BottomFill) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fs\\\")),\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"stroke-opacity\\\", \\\"0.5\\\"),\\n                        svg.prop(\\\"filter\\\", utils.getDefURL(\\\"insetShadow\\\")),\\n                        svg.prop(\\\"d\\\", \\\"M157.5 216a22.5 22.5 0 0 0 45 0Z\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == MouthType.TopFill) {\\n            return\\n                svg.path(\\n                    string.concat(\\n                        svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fs\\\")),\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"stroke-opacity\\\", \\\"0.5\\\"),\\n                        svg.prop(\\\"filter\\\", utils.getDefURL(\\\"insetShadow\\\")),\\n                        svg.prop(\\\"d\\\", \\\"M202.5 240a22.5 22.5 0 0 0-45 0Z\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        } else if (_type == MouthType.WholeFill) {\\n            return\\n                svg.circle(\\n                    string.concat(\\n                        svg.prop(\\\"r\\\", utils.uint2str(11)),\\n                        svg.prop(\\\"cx\\\", utils.uint2str(180)),\\n                        svg.prop(\\\"cy\\\", utils.uint2str(225)),\\n                        svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fs\\\")),\\n                        svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                        svg.prop(\\\"filter\\\", utils.getDefURL(\\\"insetShadow\\\")),\\n                        svg.prop(\\\"stroke-opacity\\\", \\\"0.25\\\")\\n                    ),\\n                    utils.NULL\\n                );\\n        }\\n        return utils.NULL;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/Utils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = \\\"\\\";\\n\\n    // formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat(\\\"0.\\\", utils.uint2str(_a))\\n            : \\\"1\\\";\\n        return\\n            string.concat(\\n                \\\"rgba(\\\",\\n                utils.uint2str(_r),\\n                \\\",\\\",\\n                utils.uint2str(_g),\\n                \\\",\\\",\\n                utils.uint2str(_b),\\n                \\\",\\\",\\n                formattedA,\\n                \\\")\\\"\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/SVG.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"./Utils.sol\\\";\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG's with a simple, web-like API.\\nlibrary svg {\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"g\\\", _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"path\\\", _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"text\\\", _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"line\\\", _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"circle\\\", _props, _children);\\n    }\\n\\n    function rect(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"rect\\\", _props, _children);\\n    }\\n\\n    function filter(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"filter\\\", _props, _children);\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"radialGradient\\\", _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"linearGradient\\\", _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                \\\"stop\\\",\\n                string.concat(\\n                    prop(\\\"stop-color\\\", stopColor),\\n                    \\\" \\\",\\n                    prop(\\\"offset\\\", string.concat(utils.uint2str(offset), \\\"%\\\")),\\n                    \\\" \\\",\\n                    _props\\n                ),\\n                utils.NULL\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"animateTransform\\\", _props, utils.NULL);\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _tag,\\n                \\\" \\\",\\n                _props,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _tag,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/WatchData.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Utils.sol\\\";\\n\\n// Primary library for storing all core constants and rendering data.\\nlibrary WatchData {\\n    /* CONSTANTS */\\n    uint256 public constant WATCH_SIZE = 360;\\n    uint256 public constant CENTER = 180;\\n    uint256 public constant OUTER_BEZEL_RADIUS = 180;\\n    uint256 public constant INNER_BEZEL_RADIUS = 152;\\n    uint256 public constant FACE_RADIUS = 144; // OUTER_BEZEL_RADIUS * 0.8\\n    uint8 public constant GLOW_IN_THE_DARK_ID = 99;\\n\\n    /* IDs */\\n    enum MaterialId {\\n        Pearl,\\n        Copper,\\n        Onyx,\\n        Quartz,\\n        Emerald,\\n        Ruby,\\n        Sapphire,\\n        Amber,\\n        Amethyst,\\n        Obsidian,\\n        Gold,\\n        Diamond\\n    }\\n\\n    enum MoodId {\\n        Surprised,\\n        Happy,\\n        Relaxed,\\n        Excited,\\n        Speechless,\\n        Chilling,\\n        Annoyed,\\n        Sleepy,\\n        Unimpressed,\\n        Meditating,\\n        Relieved,\\n        Cheeky,\\n        Sus\\n    }\\n\\n    enum GlassesId {\\n        None,\\n        LeftMonocle,\\n        RightMonocle,\\n        Flip,\\n        Valentine,\\n        Shutters,\\n        ThreeD,\\n        Ski,\\n        Monolens\\n    }\\n\\n    /* TRAIT STRUCTS */\\n    struct Material {\\n        MaterialId id;\\n        string name;\\n        string[2] vals;\\n        uint256 supply;\\n    }\\n\\n    struct Glasses {\\n        GlassesId id;\\n        string name;\\n        uint256 supply;\\n    }\\n\\n    struct Mood {\\n        MoodId id;\\n        string name;\\n        uint256 supply;\\n    }\\n\\n    struct GlowInTheDarkData {\\n        // contains the light mode colors\\n        string[2] light;\\n        // contains the dark mode colors\\n        string[2] dark;\\n        string name;\\n    }\\n\\n    /* DATA RETRIEVAL */\\n    function getGlowInTheDarkData()\\n        internal\\n        pure\\n        returns (GlowInTheDarkData memory)\\n    {\\n        return\\n            GlowInTheDarkData(\\n                [\\\"#fbfffc\\\", \\\"#d7ffd7\\\"],\\n                [\\\"#052925\\\", \\\"#a4ffa1\\\"],\\n                \\\"Glow In The Dark\\\"\\n            );\\n    }\\n\\n    function getMaterial(uint256 _materialId)\\n        internal\\n        pure\\n        returns (Material memory)\\n    {\\n        Material[12] memory materials = [\\n            Material(\\n                MaterialId.Pearl,\\n                \\\"Ocean Pearl\\\",\\n                [\\\"#ffffff\\\", \\\"#f6e6ff\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Copper,\\n                \\\"Resistor Copper\\\",\\n                [\\\"#f7d1bf\\\", \\\"#5a2c1d\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Onyx,\\n                \\\"Ocean Pearl\\\",\\n                [\\\"#615c5c\\\", \\\"#0f0f0f\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Quartz,\\n                \\\"Block Quartz\\\",\\n                [\\\"#ffb4be\\\", \\\"#81004e\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Emerald,\\n                \\\"Matrix Emerald\\\",\\n                [\\\"#97ff47\\\", \\\"#011601\\\"],\\n                840\\n            ),\\n            Material(MaterialId.Ruby, \\\"404 Ruby\\\", [\\\"#fe3d4a\\\", \\\"#460008\\\"], 840),\\n            Material(\\n                MaterialId.Sapphire,\\n                \\\"Hyperlink Sapphire\\\",\\n                [\\\"#4668ff\\\", \\\"#000281\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Amber,\\n                \\\"Sunset Amber\\\",\\n                [\\\"#ffa641\\\", \\\"#30031f\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Amethyst,\\n                \\\"Candy Amethyst\\\",\\n                [\\\"#f7dfff\\\", \\\"#3671ca\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Obsidian,\\n                \\\"Nether Obsidian\\\",\\n                [\\\"#6f00ff\\\", \\\"#2b003b\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Gold,\\n                \\\"Electric Gold\\\",\\n                [\\\"#fcba7d\\\", \\\"#864800\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Diamond,\\n                \\\"Ethereal Diamond\\\",\\n                [\\\"#b5f9ff\\\", \\\"#30c2c2\\\"],\\n                840\\n            )\\n        ];\\n\\n        return materials[_materialId];\\n    }\\n\\n    function getMood(uint256 _moodId) internal pure returns (Mood memory) {\\n        Mood[13] memory moods = [\\n            Mood(MoodId.Surprised, \\\"Surprised\\\", 840),\\n            Mood(MoodId.Happy, \\\"Happy\\\", 840),\\n            Mood(MoodId.Relaxed, \\\"Relaxed\\\", 840),\\n            Mood(MoodId.Excited, \\\"Excited\\\", 840),\\n            Mood(MoodId.Speechless, \\\"Speechless\\\", 25),\\n            Mood(MoodId.Chilling, \\\"Chilling\\\", 840),\\n            Mood(MoodId.Annoyed, \\\"Annoyed\\\", 840),\\n            Mood(MoodId.Sleepy, \\\"Sleepy\\\", 840),\\n            Mood(MoodId.Unimpressed, \\\"Unimpressed\\\", 840),\\n            Mood(MoodId.Meditating, \\\"Meditating\\\", 840),\\n            Mood(MoodId.Relieved, \\\"Relieved\\\", 840),\\n            Mood(MoodId.Cheeky, \\\"Cheeky\\\", 840),\\n            Mood(MoodId.Sus, \\\"Sus\\\", 840)\\n        ];\\n\\n        return moods[_moodId];\\n    }\\n\\n    function getGlasses(uint256 _glassesId)\\n        internal\\n        pure\\n        returns (Glasses memory)\\n    {\\n        Glasses[9] memory glasses = [\\n            Glasses(GlassesId.None, \\\"None\\\", 840),\\n            Glasses(GlassesId.LeftMonocle, \\\"Left Monocle\\\", 840),\\n            Glasses(GlassesId.RightMonocle, \\\"Right Monocle\\\", 840),\\n            Glasses(GlassesId.Flip, \\\"Flip\\\", 840),\\n            Glasses(GlassesId.Valentine, \\\"Valentine\\\", 840),\\n            Glasses(GlassesId.Shutters, \\\"Shutters\\\", 840),\\n            Glasses(GlassesId.ThreeD, \\\"3D\\\", 840),\\n            Glasses(GlassesId.Ski, \\\"Ski\\\", 840),\\n            Glasses(GlassesId.Monolens, \\\"Monolens\\\", 840)\\n        ];\\n\\n        return glasses[_glassesId];\\n    }\\n\\n    /* UTILS */\\n    // used to determine proper accent colors.\\n    function isLightMaterial(MaterialId _id) internal pure returns (bool) {\\n        return _id == MaterialId.Pearl || _id == MaterialId.Diamond;\\n    }\\n\\n    function getMaterialAccentColor(MaterialId _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.getCssVar(\\\"black\\\");\\n        }\\n\\n        return utils.getCssVar(\\\"white\\\");\\n    }\\n\\n    function getMaterialShadow(MaterialId _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.black_a(85);\\n        }\\n\\n        return utils.white_a(85);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EyeType\",\"name\":\"_type\",\"type\":\"EyeType\"},{\"internalType\":\"enum EyePosition\",\"name\":\"_position\",\"type\":\"EyePosition\"}],\"name\":\"renderEye\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MouthType\",\"name\":\"_type\",\"type\":\"MouthType\"}],\"name\":\"renderMouth\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Mood", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}