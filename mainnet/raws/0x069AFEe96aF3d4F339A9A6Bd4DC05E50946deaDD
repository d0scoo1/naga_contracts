{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts2/SPLSPLGatewayV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./utils/Withdrawable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ninterface GuildAsset {\\n    function getTotalVolume(uint16 _guildType) external view returns (uint256);\\n}\\n\\ninterface SPLGuildPool {\\n    function addEthToGuildPool(uint16 _guildType, address _purchaseBy) external payable;\\n}\\n\\ninterface IngameMoney {\\n    function hashTransactedAt(bytes32 _hash) external view returns(uint256);\\n    function buy(address payable _user, address payable _referrer, uint256 _referralBasisPoint, uint16 _guildType, bytes calldata _signature, bytes32 _hash) external payable;\\n}\\n\\ncontract SPLSPLGatewayV2 is Withdrawable, IngameMoney, Pausable {\\n    struct Campaign {\\n        uint8 purchaseType;\\n        uint8 subPurchaseType;\\n        uint8 proxyPurchaseType;\\n    }\\n\\n    uint8 constant PURCHASE_NORMAL = 0;\\n    uint8 constant PURCHASE_ETH_BACK = 1;\\n    uint8 constant PURCHASE_UP20 = 2;\\n    uint8 constant PURCHASE_REGULAR = 3;\\n    uint8 constant PURCHASE_ETH_BACK_UP20 = 4;\\n\\n    Campaign public campaign;\\n\\n    mapping(uint256 => bool) public payableOptions;\\n    address public validater;\\n\\n    GuildAsset public guildAsset;\\n    SPLGuildPool public guildPool;\\n    uint256 public guildBasisPoint;\\n\\n    uint256 constant BASE = 10000;\\n    uint256 private nonce;\\n    uint16 public chanceDenom;\\n    uint256 public ethBackBasisPoint;\\n    bytes private salt;\\n    mapping(bytes32 => uint256) private _hashTransactedAt;\\n\\n    event Sold(\\n        address indexed user,\\n        address indexed referrer,\\n        uint8 purchaseType,\\n        uint256 grossValue,\\n        uint256 referralValue,\\n        uint256 guildValue,\\n        uint256 netValue,\\n        uint16 indexed guildType\\n    );\\n\\n    event CampaignUpdated(\\n        uint8 purchaseType,\\n        uint8 subPurchaseType,\\n        uint8 proxyPurchaseType\\n    );\\n\\n    event GuildBasisPointUpdated(\\n        uint256 guildBasisPoint\\n    );\\n\\n    constructor(\\n        address _validater,\\n        address _guildAssetAddress,\\n        address payable _guildPoolAddress\\n    ) {\\n        setValidater(_validater);\\n        guildAsset = GuildAsset(_guildAssetAddress);\\n        guildPool = SPLGuildPool(_guildPoolAddress);\\n\\n        setCampaign(0, 0, 0);\\n        updateGuildBasisPoint(1500);\\n        updateEthBackBasisPoint(5000);\\n        updateChance(25);\\n        salt = bytes(\\\"iiNg4uJulaa4Yoh7\\\");\\n\\n        //TODO yamaura\\n        nonce = 120000;\\n\\n        // payableOptions[0] = true;\\n        payableOptions[0.03 ether] = true;\\n        payableOptions[0.05 ether] = true;\\n        payableOptions[0.1 ether] = true;\\n        payableOptions[0.5 ether] = true;\\n        payableOptions[1 ether] = true;\\n        payableOptions[5 ether] = true;\\n        payableOptions[10 ether] = true;\\n    }\\n\\n    function setValidater(address _varidater) public onlyOwner {\\n        validater = _varidater;\\n    }\\n\\n    function setPayableOption(uint256 _option, bool desired) external onlyOwner {\\n        payableOptions[_option] = desired;\\n    }\\n\\n    function setCampaign(\\n        uint8 _purchaseType,\\n        uint8 _subPurchaseType,\\n        uint8 _proxyPurchaseType\\n    )\\n        public\\n        onlyOwner\\n    {\\n        campaign = Campaign(_purchaseType, _subPurchaseType, _proxyPurchaseType);\\n        emit CampaignUpdated(_purchaseType, _subPurchaseType, _proxyPurchaseType);\\n    }\\n\\n    function updateGuildBasisPoint(uint256 _newGuildBasisPoint) public onlyOwner() {\\n        guildBasisPoint = _newGuildBasisPoint;\\n        emit GuildBasisPointUpdated(\\n            guildBasisPoint\\n        );\\n    }\\n\\n    function updateChance(uint16 _newchanceDenom) public onlyOwner {\\n        chanceDenom = _newchanceDenom;\\n    }\\n\\n    function updateEthBackBasisPoint(uint256 _ethBackBasisPoint) public onlyOwner {\\n        ethBackBasisPoint = _ethBackBasisPoint;\\n    }\\n\\n    function buy(\\n        address payable _user,\\n        address payable _referrer,\\n        uint256 _referralBasisPoint,\\n        uint16 _guildType,\\n        bytes memory _signature,\\n        bytes32 _hash\\n    )\\n        public\\n        payable\\n        override\\n        whenNotPaused()\\n    {\\n        require(_referralBasisPoint + ethBackBasisPoint + guildBasisPoint <= BASE, \\\"Invalid basis points\\\");\\n        require(payableOptions[msg.value], \\\"Invalid msg.value\\\");\\n        require(validateSig(encodeData(_user, _referrer, _referralBasisPoint, _guildType), _signature), \\\"Invalid signature\\\");\\n        if (_hash != bytes32(0)) {\\n            recordHash(_hash);\\n        }\\n        uint8 purchaseType = campaign.proxyPurchaseType;\\n        uint256 netValue = msg.value;\\n        uint256 referralValue = _referrerBack(_referrer, _referralBasisPoint);\\n        uint256 guildValue = _guildPoolBack(_guildType);\\n        netValue = msg.value - referralValue - guildValue;\\n\\n        emit Sold(\\n            _user,\\n            _referrer,\\n            purchaseType,\\n            msg.value,\\n            referralValue,\\n            guildValue,\\n            netValue,\\n            _guildType\\n        );\\n    }\\n\\n    function buySPL(\\n        address payable _referrer,\\n        uint256 _referralBasisPoint,\\n        uint16 _guildType,\\n        bytes memory _signature\\n    )\\n        public\\n        payable\\n    {\\n        require(_referralBasisPoint + ethBackBasisPoint + guildBasisPoint <= BASE, \\\"Invalid basis points\\\");\\n        require(payableOptions[msg.value], \\\"Invalid msg.value\\\");\\n        require(validateSig(encodeData(msg.sender, _referrer, _referralBasisPoint, _guildType), _signature), \\\"Invalid signature\\\");\\n\\n        uint8 purchaseType = campaign.purchaseType;\\n        uint256 netValue = msg.value;\\n        uint256 referralValue = 0;\\n        uint256 guildValue = 0;\\n\\n        if (purchaseType == PURCHASE_ETH_BACK || purchaseType == PURCHASE_ETH_BACK_UP20) {\\n            if (getRandom(chanceDenom, nonce, msg.sender) == 0) {\\n                uint256 ethBackValue = _ethBack(payable(msg.sender), ethBackBasisPoint);\\n                netValue = netValue - ethBackValue;\\n            } else {\\n                purchaseType = campaign.subPurchaseType;\\n                referralValue = _referrerBack(_referrer, _referralBasisPoint);\\n                guildValue = _guildPoolBack(_guildType);\\n                netValue = msg.value - referralValue - guildValue;\\n            }\\n            nonce++;\\n        } else {\\n            referralValue = _referrerBack(_referrer, _referralBasisPoint);\\n            guildValue = _guildPoolBack(_guildType);\\n            netValue = msg.value - referralValue - guildValue;\\n        }\\n\\n        emit Sold(\\n            msg.sender,\\n            _referrer,\\n            purchaseType,\\n            msg.value,\\n            referralValue,\\n            guildValue,\\n            netValue,\\n            _guildType\\n        );\\n    }\\n\\n    function hashTransactedAt(bytes32 _hash) public view override returns (uint256) {\\n        return _hashTransactedAt[_hash];\\n    }\\n\\n    function recordHash(bytes32 _hash) internal {\\n        require(_hashTransactedAt[_hash] == 0, \\\"The hash is already transacted\\\");\\n        _hashTransactedAt[_hash] = block.number;\\n    }\\n\\n    function getRandom(uint16 max, uint256 _nonce, address _sender) public view returns (uint16) {\\n        return uint16(\\n            bytes2(\\n                keccak256(\\n                    abi.encodePacked(\\n                        blockhash(block.number-1),\\n                        _sender,\\n                        _nonce,\\n                        salt\\n                    )\\n                )\\n            )\\n        ) % max;\\n    }\\n\\n    function _ethBack(address payable _buyer, uint256 _ethBackBasisPoint) internal returns (uint256) {\\n        uint256 ethBackValue = msg.value * _ethBackBasisPoint / BASE;\\n        _buyer.transfer(ethBackValue);\\n        return ethBackValue;\\n    }\\n\\n    function _guildPoolBack(uint16 _guildType) internal returns (uint256) {\\n        if(_guildType == 0) {\\n            return 0;\\n        }\\n        require(guildAsset.getTotalVolume(_guildType) != 0, \\\"Invalid _guildType\\\");\\n\\n        uint256 guildValue;\\n        guildValue = msg.value * guildBasisPoint / BASE;\\n        guildPool.addEthToGuildPool{value: guildValue}(_guildType, msg.sender);\\n        return guildValue;\\n    }\\n\\n    function _referrerBack(address payable _referrer, uint256 _referralBasisPoint) internal returns (uint256) {\\n        if(_referrer == address(0x0) || _referrer == msg.sender) {\\n            return 0;\\n        }\\n        uint256 referralValue = msg.value * _referralBasisPoint / BASE;\\n        _referrer.transfer(referralValue);\\n        return referralValue;\\n    }\\n\\n    function encodeData(address _sender, address _referrer, uint256 _referralBasisPoint, uint16 _guildType) public pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                            _sender,\\n                            _referrer,\\n                            _referralBasisPoint,\\n                            _guildType\\n                            )\\n                    );\\n    }\\n\\n    function validateSig(bytes32 _message, bytes memory _signature) public view returns (bool) {\\n        require(validater != address(0), \\\"validater must be set\\\");\\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(_message), _signature);\\n        return (signer == validater);\\n    }\\n\\n    function recover(bytes32 _message, bytes memory _signature) public pure returns (address) {\\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(_message), _signature);\\n        return signer;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts2/utils/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Withdrawable is Ownable {\\n\\n    function withdrawEther() external payable onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guildAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_guildPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"subPurchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proxyPurchaseType\",\"type\":\"uint8\"}],\"name\":\"CampaignUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guildBasisPoint\",\"type\":\"uint256\"}],\"name\":\"GuildBasisPointUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grossValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guildValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"guildType\",\"type\":\"uint16\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_guildType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_guildType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buySPL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"subPurchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"proxyPurchaseType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chanceDenom\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_guildType\",\"type\":\"uint16\"}],\"name\":\"encodeData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBackBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getRandom\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildAsset\",\"outputs\":[{\"internalType\":\"contract GuildAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildPool\",\"outputs\":[{\"internalType\":\"contract SPLGuildPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"hashTransactedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableOptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_purchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_subPurchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_proxyPurchaseType\",\"type\":\"uint8\"}],\"name\":\"setCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"desired\",\"type\":\"bool\"}],\"name\":\"setPayableOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_varidater\",\"type\":\"address\"}],\"name\":\"setValidater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newchanceDenom\",\"type\":\"uint16\"}],\"name\":\"updateChance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethBackBasisPoint\",\"type\":\"uint256\"}],\"name\":\"updateEthBackBasisPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGuildBasisPoint\",\"type\":\"uint256\"}],\"name\":\"updateGuildBasisPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"validateSig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "SPLSPLGatewayV2", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af1d50904a05ebe26ecb17333161be2971eb4a69000000000000000000000000a8abf045fe1a9ef0583e436393a6e4e0b483f7170000000000000000000000006bf2592c92aef0b2dd16e25cab3114c99ebd8c4e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}