{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *    xBEAR       BEARBUCKS.FINANCE        T.ME/BEARBUCKS\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * SAFEMATH LIBRARY\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IERC20 BASE = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => uint256) public totalRewardsDistributed;\r\n    mapping (address => mapping (address => uint256)) public totalRewardsToUser;\r\n\r\n    mapping (address => mapping (address => bool)) public canClaimDividendOfUser;\r\n\r\n    mapping (address => bool) public availableRewards;\r\n    mapping (address => address) public pathRewards;\r\n\r\n    mapping (address => bool) public allowed;\r\n    mapping (address => address) public choice;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    //bool public blacklistMode = true;\r\n\r\n    address public USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed; // to be shown in UI\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (\r\n        address _router,\r\n        address _owner\r\n    ) Auth(_owner) {\r\n        router = _router != address(0) ? IDEXRouter(_router) : IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _token = msg.sender;\r\n\r\n        allowed[USDT] = true;\r\n        allowed[USDC] = true;\r\n        allowed[DAI] = true;\r\n\r\n        IERC20(BASE).approve(_router, 2**256 - 1);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function getTotalRewards(address token) public view returns (uint256) {\r\n        return totalRewardsDistributed[token];\r\n    }\r\n\r\n    function getTotalRewardsToUser(address token, address user) public view returns (uint256) {\r\n        return totalRewardsToUser[token][user];\r\n    }\r\n\r\n    function checkCanClaimDividendOfUser(address user, address claimer) public view returns (bool) {\r\n        return canClaimDividendOfUser[user][claimer];\r\n    }\r\n\r\n    function setReward(\r\n        address _reward,\r\n        bool status\r\n    ) public onlyOwner {\r\n        availableRewards[_reward] = status;\r\n    }\r\n\r\n    function setPathReward(\r\n        address _reward,\r\n        address _path\r\n    ) public onlyOwner {\r\n        pathRewards[_reward] = _path;\r\n    }\r\n\r\n    function getPathReward(\r\n        address _reward\r\n    ) public view returns (address) {\r\n        return pathRewards[_reward];\r\n    }\r\n\r\n    function changeRouterVersion(\r\n        address _router\r\n    ) external onlyOwner {\r\n        IDEXRouter _uniswapV2Router = IDEXRouter(_router);\r\n        router = _uniswapV2Router;\r\n    }\r\n\r\n    function setShare(\r\n        address shareholder,\r\n        uint256 amount\r\n    ) external override onlyToken {\r\n\r\n        if (shares[shareholder].amount > 0) {\r\n            if (allowed[choice[shareholder]]) {\r\n                distributeDividend(shareholder, choice[shareholder]);\r\n            } else {\r\n                distributeDividend(shareholder, USDT);\r\n            }\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 amount = msg.value;\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function distributeDividend(\r\n        address shareholder,\r\n        address rewardAddress\r\n    ) internal {\r\n        require(allowed[rewardAddress], \"Invalid reward address!\");\r\n\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n\r\n            if (rewardAddress == address(BASE)) {\r\n\r\n                payable(shareholder).transfer(amount);\r\n                totalRewardsDistributed[rewardAddress] = totalRewardsDistributed[rewardAddress].add(amount);  \r\n                totalRewardsToUser[rewardAddress][shareholder] = totalRewardsToUser[rewardAddress][shareholder].add(amount);\r\n\r\n            } else {\r\n\r\n                IERC20 rewardToken = IERC20(rewardAddress);\r\n\r\n                uint256 beforeBalance = rewardToken.balanceOf(shareholder);\r\n\r\n                if (pathRewards[rewardAddress] == address(0)) {\r\n                    address[] memory path = new address[](2);\r\n                    path[0] = address(BASE);\r\n                    path[1] = rewardAddress;\r\n\r\n                    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n                        0,\r\n                        path,\r\n                        shareholder,\r\n                        block.timestamp\r\n                    );                 \r\n                } else {\r\n                    address[] memory path = new address[](3);\r\n                    path[0] = address(BASE);\r\n                    path[1] = pathRewards[rewardAddress];\r\n                    path[2] = rewardAddress;\r\n\r\n                    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n                        0,\r\n                        path,\r\n                        shareholder,\r\n                        block.timestamp\r\n                    );\r\n\r\n                }\r\n\r\n                uint256 afterBalance = rewardToken.balanceOf(shareholder);\r\n                totalRewardsDistributed[rewardAddress] = totalRewardsDistributed[rewardAddress].add(afterBalance.sub(beforeBalance));\r\n                totalRewardsToUser[rewardAddress][shareholder] = totalRewardsToUser[rewardAddress][shareholder].add(afterBalance.sub(beforeBalance));\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function makeApprove(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        IERC20(token).approve(spender, amount);\r\n    }\r\n\r\n    function claimDividend(\r\n        address rewardAddress\r\n    ) external {\r\n        distributeDividend(msg.sender, rewardAddress);\r\n    }\r\n\r\n    function setChoice(\r\n        address _choice\r\n    ) external {\r\n        require(allowed[_choice]);\r\n        choice[msg.sender] = _choice;\r\n    }\r\n\r\n    function toggleChoice(\r\n        address _choice\r\n    ) public onlyOwner {\r\n        allowed[_choice] = !allowed[_choice];\r\n    }\r\n\r\n    function getChoice(\r\n        address _choice\r\n    ) public view returns (bool) {\r\n        return allowed[_choice];\r\n    }\r\n\r\n    function claimDividendOfUser(\r\n        address user,\r\n        address rewardAddress\r\n    ) external {\r\n        require(canClaimDividendOfUser[user][msg.sender], \"You can't do that\");\r\n\r\n        distributeDividend(user, rewardAddress);\r\n    }\r\n\r\n    function setClaimDividendOfUser(\r\n        address claimer,\r\n        bool status\r\n    ) external {\r\n        canClaimDividendOfUser[msg.sender][claimer] = status;\r\n    }\r\n\r\n    function getUnpaidEarnings(\r\n        address shareholder\r\n    ) public view returns (uint256) {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(\r\n        uint256 share\r\n    ) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(\r\n        address shareholder\r\n    ) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(\r\n        address shareholder\r\n    ) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\r\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function Sweep() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function changeBASE(\r\n        address _BASE\r\n    ) external onlyOwner {\r\n        BASE = IERC20(_BASE);\r\n    }\r\n\r\n    function changeWETH(\r\n        address _WETH\r\n    ) external onlyOwner {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    function changeUSDT(\r\n        address _USDT\r\n    ) external onlyOwner {\r\n        USDT = _USDT;\r\n    }\r\n\r\n    function newApproval(\r\n        address token,\r\n        address _contract\r\n    ) external onlyOwner {\r\n        IERC20(token).approve(_contract, 2**256 - 1);\r\n    }\r\n\r\n    function transferForeignToken(\r\n        address token,\r\n        address _to\r\n    ) external onlyOwner returns (bool _sent) {\r\n        require(token != address(this), \"Can't withdraw native tokens\");\r\n        uint256 _contractBalance = IERC20(token).balanceOf(address(this));\r\n        _sent = IERC20(token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract xBEAR is IERC20, Auth, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MASK = type(uint128).max;\r\n    address BASE = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address DEAD_NON_CHECKSUM = 0x000000000000000000000000000000000000dEaD;\r\n    address WBEAR = 0xd11a3EdaC587faa6bD870683114F5Aa08499f187;\r\n    address TREASURY = 0xdbc85dF60C8E6cF056FF418EdCA44Be368da85D5;\r\n    IERC20 wbear = IERC20(WBEAR);\r\n\r\n    address XBEAR;\r\n    IERC20 xbear;\r\n\r\n    string constant _name = \"Staked Wrapped Bear Bucks\";\r\n    string constant _symbol = \"xBEAR\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 1000000000 * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) public isDisabledExempt;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping (address => bool) public _isFree;\r\n\r\n    bool public isFeeOnTransferEnabled = false;\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    DividendDistributor distributor;\r\n    address public distributorAddress;\r\n\r\n    bool public tradingEnabled = false;\r\n\r\n    bool public canEmergencySweep = true;\r\n    bool public hasEmergencySweeped = false;\r\n    bool public paused = false;\r\n    bool public safetyChecks = false;\r\n\r\n    constructor () Auth(msg.sender) {\r\n        XBEAR = address(this);\r\n        xbear = IERC20(XBEAR);\r\n\r\n        address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, XBEAR);\r\n        _allowances[XBEAR][address(router)] = _totalSupply;\r\n        WETH = router.WETH();\r\n        distributor = new DividendDistributor(_router, msg.sender);\r\n        distributorAddress = address(distributor);\r\n\r\n        isDisabledExempt[msg.sender] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[XBEAR] = true;\r\n        isDividendExempt[DEAD] = true;\r\n\r\n        approve(XBEAR, _totalSupply);\r\n        approve(WBEAR, _totalSupply);\r\n        approve(_router, _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), XBEAR, _totalSupply);\r\n    }\r\n\r\n    function isTreasury(address account) public view returns (bool) {\r\n        return account == TREASURY;\r\n    }\r\n\r\n    modifier onlyTreasury() {\r\n        require(isTreasury(msg.sender), \"!TREASURY\"); _;\r\n    }\r\n\r\n    modifier onlyOwnerOrTreasury() {\r\n        require(isOwner(msg.sender) || isTreasury(msg.sender), \"!OWNER && !TREASURY\"); _;\r\n    }\r\n\r\n    function mint(\r\n        uint256 _amount\r\n    ) external nonReentrant {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(!paused, \"This contract is paused\");\r\n        if (safetyChecks) {\r\n            require(wbear.balanceOf(msg.sender) >= _amount, \"Your wBEAR balance is too low\");\r\n            require(wbear.allowance(msg.sender, XBEAR) >= _amount, \"xBEAR allowance is too low\");\r\n        }\r\n        require(_totalSupply >= _amount, \"The amount exceeds the supply\");\r\n        bool _transfer = wbear.transferFrom(msg.sender, XBEAR, _amount);\r\n        require(_transfer, \"Failed to receive tokens\");\r\n        _transferFrom(XBEAR, msg.sender, _amount);\r\n    }\r\n\r\n    function redeem(\r\n        uint256 _amount\r\n    ) external nonReentrant {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(!paused, \"This contract is paused\");\r\n        if (safetyChecks) {\r\n            require(_balances[msg.sender] >= _amount, \"Your xBEAR balance is too low\");\r\n            require(_allowances[msg.sender][XBEAR] >= _amount, \"xBEAR allowance is too low\");\r\n        }\r\n        require(wbear.balanceOf(XBEAR) >= _amount, \"The contract wBEAR balance is too low\");\r\n        bool _transfer = _transferFrom(msg.sender, XBEAR, _amount);\r\n        require(_transfer, \"Failed to send tokens\");\r\n        wbear.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function depositRewards() external payable onlyTreasury {\r\n        if (msg.value > 0) {\r\n            try distributor.deposit{value: msg.value}() {} catch {}\r\n        }\r\n    }\r\n\r\n    function disableEmergencySweeping() external onlyOwner {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        canEmergencySweep = false;\r\n    }\r\n\r\n    function emergencySweepCustom(\r\n        address _to,\r\n        uint256 _amount,\r\n        bool _disable\r\n    ) external onlyOwner {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(canEmergencySweep, \"Emergency sweeping has been disabled\");\r\n        wbear.transfer(_to, _amount);\r\n        if (_disable) {\r\n            hasEmergencySweeped = true;\r\n        }\r\n    }\r\n\r\n    function emergencySweepFull(\r\n        address _to\r\n    ) external onlyOwner {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(canEmergencySweep, \"Emergency sweeping has been disabled\");\r\n        wbear.transfer(_to, wbear.balanceOf(XBEAR));\r\n        hasEmergencySweeped = true;\r\n    }\r\n\r\n    function togglePaused(\r\n        bool _paused\r\n    ) external onlyOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    function toggleSafetyChecks(\r\n        bool _safetyChecks\r\n    ) external onlyOwner {\r\n        safetyChecks = _safetyChecks;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(\r\n        address spender\r\n    ) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(tradingEnabled, \"Trading is currently disabled\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(\r\n        address _pair,\r\n        bool value\r\n    ) public onlyOwner {\r\n        _setAutomatedMarketMakerPair(_pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(\r\n        address _pair,\r\n        bool value\r\n    ) private {\r\n        automatedMarketMakerPairs[_pair] = value;\r\n        if (value) {\r\n            isDividendExempt[_pair] = true;\r\n        }\r\n        if (!value) {\r\n            isDividendExempt[_pair] = false;\r\n        }\r\n    }\r\n    \r\n    function Sweep() external onlyOwner {\r\n        uint256 balance = XBEAR.balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function changeBASE(\r\n        address _BASE\r\n    ) external onlyOwner {\r\n        BASE = _BASE;\r\n    }\r\n\r\n    function changeWETH(\r\n        address _WETH\r\n    ) external onlyOwner {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    function changeBEAR(\r\n        address _WBEAR,\r\n        bool _approve\r\n    ) external onlyOwner {\r\n        WBEAR = _WBEAR;\r\n        wbear = IERC20(_WBEAR);\r\n        if (_approve) {\r\n            approve(WBEAR, _totalSupply);\r\n        }\r\n    }\r\n\r\n    function changeTREASURY(\r\n        address _TREASURY\r\n    ) external onlyOwnerOrTreasury {\r\n        TREASURY = _TREASURY;\r\n    }\r\n\r\n    function changeRouterPairDistributor(\r\n        address _router,\r\n        bool _setWETH\r\n    ) external onlyOwner {\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, XBEAR);\r\n        _allowances[XBEAR][address(router)] = _totalSupply;\r\n        if (_setWETH) {\r\n            WETH = router.WETH();\r\n        }\r\n        distributor = new DividendDistributor(_router, msg.sender);\r\n        distributorAddress = address(distributor);\r\n    }\r\n\r\n    function transferForeignToken(\r\n        address _token,\r\n        address _to\r\n    ) external onlyOwner returns (bool _sent) {\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(XBEAR);\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function setIsDividendExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external authorized {\r\n        isDividendExempt[holder] = exempt;\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function checkIsDividendExempt(\r\n        address holder\r\n    ) public view returns (bool) {\r\n        return isDividendExempt[holder];\r\n    }\r\n\r\n    function setIsDisabledExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external authorized {\r\n        isDisabledExempt[holder] = exempt;\r\n    }\r\n\r\n    function checkIsDisabledExempt(\r\n        address holder\r\n    ) public view returns (bool) {\r\n        return isDisabledExempt[holder];\r\n    }\r\n\r\n    function setIsFeeExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function checkIsFeeExempt(\r\n        address holder\r\n    ) public view returns (bool) {\r\n        return isFeeExempt[holder];\r\n    }\r\n\r\n    function enableTrading() external authorized {\r\n        if (!tradingEnabled) {\r\n            tradingEnabled = true;\r\n        }\r\n    }\r\n\r\n    function toggleTrading(\r\n        bool _enabled\r\n    ) external authorized {\r\n        tradingEnabled = _enabled;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function changeRouterVersion(\r\n        address _router\r\n    ) external onlyOwner returns (address _pair) {\r\n        IDEXRouter _uniswapV2Router = IDEXRouter(_router);\r\n\r\n        _pair = IDEXFactory(_uniswapV2Router.factory()).getPair(XBEAR, _uniswapV2Router.WETH());\r\n        if (_pair == address(0)) {\r\n            _pair = IDEXFactory(_uniswapV2Router.factory()).createPair(XBEAR, _uniswapV2Router.WETH());\r\n        }\r\n        pair = _pair;\r\n\r\n        router = _uniswapV2Router;\r\n        _allowances[XBEAR][address(router)] = _totalSupply;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canEmergencySweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BASE\",\"type\":\"address\"}],\"name\":\"changeBASE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WBEAR\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"changeBEAR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_setWETH\",\"type\":\"bool\"}],\"name\":\"changeRouterPairDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TREASURY\",\"type\":\"address\"}],\"name\":\"changeTREASURY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"name\":\"changeWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIsDisabledExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIsDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIsFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableEmergencySweeping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"emergencySweepCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencySweepFull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEmergencySweeped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDisabledExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeOnTransferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyChecks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDisabledExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_safetyChecks\",\"type\":\"bool\"}],\"name\":\"toggleSafetyChecks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"toggleTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "xBEAR", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3698c7a42eb81e137dbc7dbbb648217f1ed8e118db7ab3130687e624c2d78a9"}]}