{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governed-owner/GovernedOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./proxies/CommonOwnerProxy.sol\\\";\\nimport \\\"./proxies/BridgeOwnerProxy.sol\\\";\\nimport \\\"./proxies/MessageOwnerProxy.sol\\\";\\nimport \\\"./proxies/SgnOwnerProxy.sol\\\";\\nimport \\\"./proxies/UpgradeableOwnerProxy.sol\\\";\\n\\ncontract GovernedOwnerProxy is\\n    CommonOwnerProxy,\\n    BridgeOwnerProxy,\\n    MessageOwnerProxy,\\n    SgnOwnerProxy,\\n    UpgradeableOwnerProxy\\n{\\n    constructor(address _initializer) OwnerProxyBase(_initializer) {}\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/proxies/CommonOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./OwnerProxyBase.sol\\\";\\nimport \\\"../interfaces/ICommonOwner.sol\\\";\\nimport {SimpleGovernance as sg} from \\\"../SimpleGovernance.sol\\\";\\nimport {OwnerDataTypes as dt} from \\\"./OwnerDataTypes.sol\\\";\\n\\nabstract contract CommonOwnerProxy is OwnerProxyBase {\\n    event TransferOwnershipProposalCreated(uint256 proposalId, address target, uint256 newOwner);\\n    event UpdatePauserProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\\n\\n    function proposeTransferOwnership(address _target, uint256 _newOwner) external {\\n        bytes memory data = abi.encodeWithSelector(ICommonOwner.transferOwnership.selector, _newOwner);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit TransferOwnershipProposalCreated(proposalId, _target, _newOwner);\\n    }\\n\\n    function proposeUpdatePauser(\\n        address _target,\\n        dt.Action _action,\\n        address _account\\n    ) external {\\n        bytes4 selector;\\n        if (_action == dt.Action.Add) {\\n            selector = ICommonOwner.addPauser.selector;\\n        } else if (_action == dt.Action.Remove) {\\n            selector = ICommonOwner.removePauser.selector;\\n        } else {\\n            revert(\\\"invalid action\\\");\\n        }\\n        bytes memory data = abi.encodeWithSelector(selector, _account);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\\n        emit UpdatePauserProposalCreated(proposalId, _target, _action, _account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/proxies/BridgeOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./OwnerProxyBase.sol\\\";\\nimport \\\"../interfaces/IBridgeOwner.sol\\\";\\nimport {SimpleGovernance as sg} from \\\"../SimpleGovernance.sol\\\";\\nimport {OwnerDataTypes as dt} from \\\"./OwnerDataTypes.sol\\\";\\n\\nabstract contract BridgeOwnerProxy is OwnerProxyBase {\\n    // for bridges\\n    event ResetSignersProposalCreated(uint256 proposalId, address target, address[] signers, uint256[] powers);\\n    event NotifyResetSignersProposalCreated(uint256 proposalId, address target);\\n    event IncreaseNoticePeriodProposalCreated(uint256 proposalId, address target, uint256 period);\\n    event SetNativeWrapProposalCreated(uint256 proposalId, address target, address token);\\n    event UpdateSupplyProposalCreated(\\n        uint256 proposalId,\\n        address target,\\n        dt.Action action,\\n        address token,\\n        uint256 supply\\n    );\\n    event UpdateGovernorProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\\n\\n    // for bridge tokens\\n    event UpdateBridgeProposalCreated(uint256 proposalId, address target, address bridgeAddr);\\n    event UpdateBridgeSupplyCapProposalCreated(uint256 proposalId, address target, address bridge, uint256 cap);\\n    event SetBridgeTokenSwapCapProposalCreated(uint256 proposalId, address target, address bridgeToken, uint256 cap);\\n\\n    function proposeResetSigners(\\n        address _target,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.resetSigners.selector, _signers, _powers);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit ResetSignersProposalCreated(proposalId, _target, _signers, _powers);\\n    }\\n\\n    function proposeNotifyResetSigners(address _target) external {\\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.notifyResetSigners.selector);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\\n        emit NotifyResetSignersProposalCreated(proposalId, _target);\\n    }\\n\\n    function proposeIncreaseNoticePeriod(address _target, uint256 _period) external {\\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.increaseNoticePeriod.selector, _period);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit IncreaseNoticePeriodProposalCreated(proposalId, _target, _period);\\n    }\\n\\n    function proposeSetNativeWrap(address _target, address _token) external {\\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.setWrap.selector, _token);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetNativeWrapProposalCreated(proposalId, _target, _token);\\n    }\\n\\n    function proposeUpdateSupply(\\n        address _target,\\n        dt.Action _action,\\n        address _token,\\n        uint256 _supply\\n    ) external {\\n        bytes4 selector;\\n        if (_action == dt.Action.Set) {\\n            selector = IBridgeOwner.setSupply.selector;\\n        } else if (_action == dt.Action.Add) {\\n            selector = IBridgeOwner.increaseSupply.selector;\\n        } else if (_action == dt.Action.Remove) {\\n            selector = IBridgeOwner.decreaseSupply.selector;\\n        } else {\\n            revert(\\\"invalid action\\\");\\n        }\\n        bytes memory data = abi.encodeWithSelector(selector, _token, _supply);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\\n        emit UpdateSupplyProposalCreated(proposalId, _target, _action, _token, _supply);\\n    }\\n\\n    function proposeUpdateGovernor(\\n        address _target,\\n        dt.Action _action,\\n        address _account\\n    ) external {\\n        bytes4 selector;\\n        if (_action == dt.Action.Add) {\\n            selector = IBridgeOwner.addGovernor.selector;\\n        } else if (_action == dt.Action.Remove) {\\n            selector = IBridgeOwner.removeGovernor.selector;\\n        } else {\\n            revert(\\\"invalid action\\\");\\n        }\\n        bytes memory data = abi.encodeWithSelector(selector, _account);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\\n        emit UpdateGovernorProposalCreated(proposalId, _target, _action, _account);\\n    }\\n\\n    function proposeUpdateBridgeSupplyCap(\\n        address _target,\\n        address _bridge,\\n        uint256 _cap\\n    ) external {\\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.updateBridgeSupplyCap.selector, _bridge, _cap);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit UpdateBridgeSupplyCapProposalCreated(proposalId, _target, _bridge, _cap);\\n    }\\n\\n    function proposeSetBridgeTokenSwapCap(\\n        address _target,\\n        address _bridgeToken,\\n        uint256 _swapCap\\n    ) external {\\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.setBridgeTokenSwapCap.selector, _bridgeToken, _swapCap);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetBridgeTokenSwapCapProposalCreated(proposalId, _target, _bridgeToken, _swapCap);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/proxies/MessageOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./OwnerProxyBase.sol\\\";\\nimport \\\"../interfaces/IMessageOwner.sol\\\";\\nimport {SimpleGovernance as sg} from \\\"../SimpleGovernance.sol\\\";\\nimport {OwnerDataTypes as dt} from \\\"./OwnerDataTypes.sol\\\";\\n\\nabstract contract MessageOwnerProxy is OwnerProxyBase {\\n    event SetMsgFeeProposalCreated(uint256 proposalId, address target, dt.MsgFeeType feeType, uint256 fee);\\n    event SetBridgeAddressProposalCreated(\\n        uint256 proposalId,\\n        address target,\\n        dt.BridgeType bridgeType,\\n        address bridgeAddr\\n    );\\n    event SetPreExecuteMessageGasUsageProposalCreated(uint256 proposalId, address target, uint256 usage);\\n\\n    function proposeSetMsgFee(\\n        address _target,\\n        dt.MsgFeeType _feeType,\\n        uint256 _fee\\n    ) external {\\n        bytes4 selector;\\n        if (_feeType == dt.MsgFeeType.PerByte) {\\n            selector = IMessageOwner.setFeePerByte.selector;\\n        } else if (_feeType == dt.MsgFeeType.Base) {\\n            selector = IMessageOwner.setFeeBase.selector;\\n        } else {\\n            revert(\\\"invalid fee type\\\");\\n        }\\n        bytes memory data = abi.encodeWithSelector(selector, _fee);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\\n        emit SetMsgFeeProposalCreated(proposalId, _target, _feeType, _fee);\\n    }\\n\\n    function proposeSetBridgeAddress(\\n        address _target,\\n        dt.BridgeType _bridgeType,\\n        address _bridgeAddr\\n    ) external {\\n        bytes4 selector;\\n        if (_bridgeType == dt.BridgeType.Liquidity) {\\n            selector = IMessageOwner.setLiquidityBridge.selector;\\n        } else if (_bridgeType == dt.BridgeType.PegBridge) {\\n            selector = IMessageOwner.setPegBridge.selector;\\n        } else if (_bridgeType == dt.BridgeType.PegVault) {\\n            selector = IMessageOwner.setPegVault.selector;\\n        } else if (_bridgeType == dt.BridgeType.PegBridgeV2) {\\n            selector = IMessageOwner.setPegBridgeV2.selector;\\n        } else if (_bridgeType == dt.BridgeType.PegVaultV2) {\\n            selector = IMessageOwner.setPegVaultV2.selector;\\n        } else {\\n            revert(\\\"invalid bridge type\\\");\\n        }\\n        bytes memory data = abi.encodeWithSelector(selector, _bridgeAddr);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetBridgeAddressProposalCreated(proposalId, _target, _bridgeType, _bridgeAddr);\\n    }\\n\\n    function proposeSetPreExecuteMessageGasUsage(address _target, uint256 _usage) external {\\n        bytes memory data = abi.encodeWithSelector(IMessageOwner.setPreExecuteMessageGasUsage.selector, _usage);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetPreExecuteMessageGasUsageProposalCreated(proposalId, _target, _usage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/proxies/SgnOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./OwnerProxyBase.sol\\\";\\nimport \\\"../interfaces/ISgnOwner.sol\\\";\\nimport {SimpleGovernance as sg} from \\\"../SimpleGovernance.sol\\\";\\nimport {OwnerDataTypes as dt} from \\\"./OwnerDataTypes.sol\\\";\\n\\nabstract contract SgnOwnerProxy is OwnerProxyBase {\\n    event SetWhitelistEnableProposalCreated(uint256 proposalId, address target, bool enabled);\\n    event UpdateWhitelistedProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\\n    event SetGovContractProposalCreated(uint256 proposalId, address target, address addr);\\n    event SetRewardContractProposalCreated(uint256 proposalId, address target, address addr);\\n    event SetMaxSlashFactorProposalCreated(uint256 proposalId, address target, uint256 maxSlashFactor);\\n    event DrainTokenProposalCreated(uint256 proposalId, address target, address token, uint256 amount);\\n\\n    function proposeSetWhitelistEnable(address _target, bool _enable) external {\\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setWhitelistEnabled.selector, _enable);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetWhitelistEnableProposalCreated(proposalId, _target, _enable);\\n    }\\n\\n    function proposeUpdateWhitelisted(\\n        address _target,\\n        dt.Action _action,\\n        address _account\\n    ) external {\\n        bytes4 selector;\\n        if (_action == dt.Action.Add) {\\n            selector = ISgnOwner.addWhitelisted.selector;\\n        } else if (_action == dt.Action.Remove) {\\n            selector = ISgnOwner.removeWhitelisted.selector;\\n        } else {\\n            revert(\\\"invalid action\\\");\\n        }\\n        bytes memory data = abi.encodeWithSelector(selector, _account);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\\n        emit UpdateWhitelistedProposalCreated(proposalId, _target, _action, _account);\\n    }\\n\\n    function proposeSetGovContract(address _target, address _addr) external {\\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setGovContract.selector, _addr);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetGovContractProposalCreated(proposalId, _target, _addr);\\n    }\\n\\n    function proposeSetRewardContract(address _target, address _addr) external {\\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setRewardContract.selector, _addr);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetRewardContractProposalCreated(proposalId, _target, _addr);\\n    }\\n\\n    function proposeSetMaxSlashFactor(address _target, uint256 _maxSlashFactor) external {\\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setMaxSlashFactor.selector, _maxSlashFactor);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit SetMaxSlashFactorProposalCreated(proposalId, _target, _maxSlashFactor);\\n    }\\n\\n    function proposeDrainToken(\\n        address _target,\\n        address _token,\\n        uint256 _amount\\n    ) external {\\n        bytes memory data;\\n        if (_token == address(0)) {\\n            data = abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"drainToken(uint256\\\"))), _amount);\\n        } else {\\n            data = abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"drainToken(address,uint256\\\"))), _token, _amount);\\n        }\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit DrainTokenProposalCreated(proposalId, _target, _token, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/proxies/UpgradeableOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./OwnerProxyBase.sol\\\";\\nimport \\\"../interfaces/IUpgradeableOwner.sol\\\";\\nimport {SimpleGovernance as sg} from \\\"../SimpleGovernance.sol\\\";\\nimport {OwnerDataTypes as dt} from \\\"./OwnerDataTypes.sol\\\";\\n\\nabstract contract UpgradeableOwnerProxy is OwnerProxyBase {\\n    event ChangeProxyAdminProposalCreated(uint256 proposalId, address target, address proxy, address newAdmin);\\n    event UpgradeProposalCreated(uint256 proposalId, address target, address proxy, address implementation);\\n    event UpgradeAndCallProposalCreated(\\n        uint256 proposalId,\\n        address target,\\n        address proxy,\\n        address implementation,\\n        bytes data\\n    );\\n    event UpgradeToProposalCreated(uint256 proposalId, address target, address implementation);\\n    event UpgradeToAndCallProposalCreated(uint256 proposalId, address target, address implementation, bytes data);\\n\\n    function proposeChangeProxyAdmin(\\n        address _target,\\n        address _proxy,\\n        address _newAdmin\\n    ) external {\\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.changeProxyAdmin.selector, _proxy, _newAdmin);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit ChangeProxyAdminProposalCreated(proposalId, _target, _proxy, _newAdmin);\\n    }\\n\\n    function proposeUpgrade(\\n        address _target,\\n        address _proxy,\\n        address _implementation\\n    ) external {\\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgrade.selector, _proxy, _implementation);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit UpgradeProposalCreated(proposalId, _target, _proxy, _implementation);\\n    }\\n\\n    function proposeUpgradeAndCall(\\n        address _target,\\n        address _proxy,\\n        address _implementation,\\n        bytes calldata _data\\n    ) external {\\n        bytes memory data = abi.encodeWithSelector(\\n            IUpgradeableOwner.upgradeAndCall.selector,\\n            _proxy,\\n            _implementation,\\n            _data\\n        );\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit UpgradeAndCallProposalCreated(proposalId, _target, _proxy, _implementation, _data);\\n    }\\n\\n    function proposeUpgradeTo(address _target, address _implementation) external {\\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgradeTo.selector, _implementation);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit UpgradeToProposalCreated(proposalId, _target, _implementation);\\n    }\\n\\n    function proposeUpgradeToAndCall(\\n        address _target,\\n        address _implementation,\\n        bytes calldata _data\\n    ) external {\\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgradeToAndCall.selector, _implementation, _data);\\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\\n        emit UpgradeToAndCallProposalCreated(proposalId, _target, _implementation, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/proxies/OwnerProxyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../SimpleGovernance.sol\\\";\\n\\nabstract contract OwnerProxyBase {\\n    SimpleGovernance public gov;\\n    address private initializer;\\n\\n    constructor(address _initializer) {\\n        initializer = _initializer;\\n    }\\n\\n    function initGov(SimpleGovernance _gov) public {\\n        require(msg.sender == initializer, \\\"only initializer can init\\\");\\n        require(address(gov) == address(0), \\\"gov addr already set\\\");\\n        gov = _gov;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/interfaces/ICommonOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICommonOwner {\\n    function transferOwnership(address _newOwner) external;\\n\\n    function addPauser(address _account) external;\\n\\n    function removePauser(address _account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/SimpleGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// mainly used for governed-owner to do infrequent sgn/cbridge owner operations,\\n// relatively prefer easy-to-use over gas-efficiency\\ncontract SimpleGovernance {\\n    uint256 public constant THRESHOLD_DECIMAL = 100;\\n    uint256 public constant MIN_ACTIVE_PERIOD = 3600; // one hour\\n    uint256 public constant MAX_ACTIVE_PERIOD = 2419200; // four weeks\\n\\n    using SafeERC20 for IERC20;\\n\\n    enum ParamName {\\n        ActivePeriod,\\n        QuorumThreshold, // default threshold for votes to pass\\n        FastPassThreshold // lower threshold for less critical operations\\n    }\\n\\n    enum ProposalType {\\n        ExternalDefault,\\n        ExternalFastPass,\\n        InternalParamChange,\\n        InternalVoterUpdate,\\n        InternalProxyUpdate,\\n        InternalTransferToken\\n    }\\n\\n    mapping(ParamName => uint256) public params;\\n\\n    struct Proposal {\\n        bytes32 dataHash; // hash(proposalType, targetAddress, calldata)\\n        uint256 deadline;\\n        mapping(address => bool) votes;\\n    }\\n\\n    mapping(uint256 => Proposal) public proposals;\\n    uint256 public nextProposalId;\\n\\n    address[] public voters;\\n    mapping(address => uint256) public voterPowers; // voter addr -> voting power\\n\\n    // NOTE: proxies must be audited open-source non-upgradable contracts with following requirements:\\n    // 1. Truthfully pass along tx sender who called the proxy function as the governance proposer.\\n    // 2. Do not allow arbitrary fastpass proposal with calldata constructed by the proxy callers.\\n    // See ./proxies/CommonOwnerProxy.sol for example.\\n    mapping(address => bool) public proposerProxies;\\n\\n    event Initiated(\\n        address[] voters,\\n        uint256[] powers,\\n        address[] proxies,\\n        uint256 activePeriod,\\n        uint256 quorumThreshold,\\n        uint256 fastPassThreshold\\n    );\\n\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        ProposalType proposalType,\\n        address target,\\n        bytes data,\\n        uint256 deadline,\\n        address proposer\\n    );\\n    event ProposalVoted(uint256 proposalId, address voter, bool vote);\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    event ParamChangeProposalCreated(uint256 proposalId, ParamName name, uint256 value);\\n    event VoterUpdateProposalCreated(uint256 proposalId, address[] voters, uint256[] powers);\\n    event ProxyUpdateProposalCreated(uint256 proposalId, address[] addrs, bool[] ops);\\n    event TransferTokenProposalCreated(uint256 proposalId, address receiver, address token, uint256 amount);\\n\\n    constructor(\\n        address[] memory _voters,\\n        uint256[] memory _powers,\\n        address[] memory _proxies,\\n        uint256 _activePeriod,\\n        uint256 _quorumThreshold,\\n        uint256 _fastPassThreshold\\n    ) {\\n        require(_voters.length > 0 && _voters.length == _powers.length, \\\"invalid init voters\\\");\\n        require(_activePeriod <= MAX_ACTIVE_PERIOD && _activePeriod >= MIN_ACTIVE_PERIOD, \\\"invalid active period\\\");\\n        require(\\n            _quorumThreshold < THRESHOLD_DECIMAL && _fastPassThreshold <= _quorumThreshold,\\n            \\\"invalid init thresholds\\\"\\n        );\\n        for (uint256 i = 0; i < _voters.length; i++) {\\n            _setVoter(_voters[i], _powers[i]);\\n        }\\n        for (uint256 i = 0; i < _proxies.length; i++) {\\n            proposerProxies[_proxies[i]] = true;\\n        }\\n        params[ParamName.ActivePeriod] = _activePeriod;\\n        params[ParamName.QuorumThreshold] = _quorumThreshold;\\n        params[ParamName.FastPassThreshold] = _fastPassThreshold;\\n        emit Initiated(_voters, _powers, _proxies, _activePeriod, _quorumThreshold, _fastPassThreshold);\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function createProposal(address _target, bytes memory _data) external returns (uint256) {\\n        return _createProposal(msg.sender, _target, _data, ProposalType.ExternalDefault);\\n    }\\n\\n    // create proposal through proxy\\n    function createProposal(\\n        address _proposer,\\n        address _target,\\n        bytes memory _data,\\n        ProposalType _type\\n    ) external returns (uint256) {\\n        require(proposerProxies[msg.sender], \\\"sender is not a valid proxy\\\");\\n        require(_type == ProposalType.ExternalDefault || _type == ProposalType.ExternalFastPass, \\\"invalid type\\\");\\n        return _createProposal(_proposer, _target, _data, _type);\\n    }\\n\\n    function createParamChangeProposal(ParamName _name, uint256 _value) external returns (uint256) {\\n        bytes memory data = abi.encode(_name, _value);\\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalParamChange);\\n        emit ParamChangeProposalCreated(proposalId, _name, _value);\\n        return proposalId;\\n    }\\n\\n    function createVoterUpdateProposal(address[] calldata _voters, uint256[] calldata _powers)\\n        external\\n        returns (uint256)\\n    {\\n        require(_voters.length == _powers.length, \\\"voters and powers length not match\\\");\\n        bytes memory data = abi.encode(_voters, _powers);\\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalVoterUpdate);\\n        emit VoterUpdateProposalCreated(proposalId, _voters, _powers);\\n        return proposalId;\\n    }\\n\\n    function createProxyUpdateProposal(address[] calldata _addrs, bool[] calldata _ops) external returns (uint256) {\\n        require(_addrs.length == _ops.length, \\\"_addrs and _ops length not match\\\");\\n        bytes memory data = abi.encode(_addrs, _ops);\\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalProxyUpdate);\\n        emit ProxyUpdateProposalCreated(proposalId, _addrs, _ops);\\n        return proposalId;\\n    }\\n\\n    function createTransferTokenProposal(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) external returns (uint256) {\\n        bytes memory data = abi.encode(_receiver, _token, _amount);\\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalTransferToken);\\n        emit TransferTokenProposalCreated(proposalId, _receiver, _token, _amount);\\n        return proposalId;\\n    }\\n\\n    function voteProposal(uint256 _proposalId, bool _vote) external {\\n        require(voterPowers[msg.sender] > 0, \\\"invalid voter\\\");\\n        Proposal storage p = proposals[_proposalId];\\n        require(block.timestamp < p.deadline, \\\"deadline passed\\\");\\n        p.votes[msg.sender] = _vote;\\n        emit ProposalVoted(_proposalId, msg.sender, _vote);\\n    }\\n\\n    function executeProposal(\\n        uint256 _proposalId,\\n        ProposalType _type,\\n        address _target,\\n        bytes calldata _data\\n    ) external {\\n        require(voterPowers[msg.sender] > 0, \\\"only voter can execute a proposal\\\");\\n        Proposal storage p = proposals[_proposalId];\\n        require(block.timestamp < p.deadline, \\\"deadline passed\\\");\\n        require(keccak256(abi.encodePacked(_type, _target, _data)) == p.dataHash, \\\"data hash not match\\\");\\n        p.deadline = 0;\\n\\n        p.votes[msg.sender] = true;\\n        (, , bool pass) = countVotes(_proposalId, _type);\\n        require(pass, \\\"not enough votes\\\");\\n\\n        if (_type == ProposalType.ExternalDefault || _type == ProposalType.ExternalFastPass) {\\n            (bool success, bytes memory res) = _target.call(_data);\\n            require(success, _getRevertMsg(res));\\n        } else if (_type == ProposalType.InternalParamChange) {\\n            (ParamName name, uint256 value) = abi.decode((_data), (ParamName, uint256));\\n            params[name] = value;\\n            if (name == ParamName.ActivePeriod) {\\n                require(value <= MAX_ACTIVE_PERIOD && value >= MIN_ACTIVE_PERIOD, \\\"invalid active period\\\");\\n            } else if (name == ParamName.QuorumThreshold || name == ParamName.FastPassThreshold) {\\n                require(\\n                    params[ParamName.QuorumThreshold] >= params[ParamName.FastPassThreshold] &&\\n                        value < THRESHOLD_DECIMAL &&\\n                        value > 0,\\n                    \\\"invalid threshold\\\"\\n                );\\n            }\\n        } else if (_type == ProposalType.InternalVoterUpdate) {\\n            (address[] memory addrs, uint256[] memory powers) = abi.decode((_data), (address[], uint256[]));\\n            for (uint256 i = 0; i < addrs.length; i++) {\\n                if (powers[i] > 0) {\\n                    _setVoter(addrs[i], powers[i]);\\n                } else {\\n                    _removeVoter(addrs[i]);\\n                }\\n            }\\n        } else if (_type == ProposalType.InternalProxyUpdate) {\\n            (address[] memory addrs, bool[] memory ops) = abi.decode((_data), (address[], bool[]));\\n            for (uint256 i = 0; i < addrs.length; i++) {\\n                if (ops[i]) {\\n                    proposerProxies[addrs[i]] = true;\\n                } else {\\n                    delete proposerProxies[addrs[i]];\\n                }\\n            }\\n        } else if (_type == ProposalType.InternalTransferToken) {\\n            (address receiver, address token, uint256 amount) = abi.decode((_data), (address, address, uint256));\\n            _transfer(receiver, token, amount);\\n        }\\n        emit ProposalExecuted(_proposalId);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**************************\\n     *  Public View Functions *\\n     **************************/\\n\\n    function getVoters() public view returns (address[] memory, uint256[] memory) {\\n        address[] memory addrs = new address[](voters.length);\\n        uint256[] memory powers = new uint256[](voters.length);\\n        for (uint32 i = 0; i < voters.length; i++) {\\n            addrs[i] = voters[i];\\n            powers[i] = voterPowers[voters[i]];\\n        }\\n        return (addrs, powers);\\n    }\\n\\n    function getVote(uint256 _proposalId, address _voter) public view returns (bool) {\\n        return proposals[_proposalId].votes[_voter];\\n    }\\n\\n    function countVotes(uint256 _proposalId, ProposalType _type)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        uint256 yesVotes;\\n        uint256 totalPower;\\n        for (uint32 i = 0; i < voters.length; i++) {\\n            if (getVote(_proposalId, voters[i])) {\\n                yesVotes += voterPowers[voters[i]];\\n            }\\n            totalPower += voterPowers[voters[i]];\\n        }\\n        uint256 threshold;\\n        if (_type == ProposalType.ExternalFastPass) {\\n            threshold = params[ParamName.FastPassThreshold];\\n        } else {\\n            threshold = params[ParamName.QuorumThreshold];\\n        }\\n        bool pass = (yesVotes >= (totalPower * threshold) / THRESHOLD_DECIMAL);\\n        return (totalPower, yesVotes, pass);\\n    }\\n\\n    /**********************************\\n     * Internal and Private Functions *\\n     **********************************/\\n\\n    // create a proposal and vote yes\\n    function _createProposal(\\n        address _proposer,\\n        address _target,\\n        bytes memory _data,\\n        ProposalType _type\\n    ) private returns (uint256) {\\n        require(voterPowers[_proposer] > 0, \\\"only voter can create a proposal\\\");\\n        uint256 proposalId = nextProposalId;\\n        nextProposalId += 1;\\n        Proposal storage p = proposals[proposalId];\\n        p.dataHash = keccak256(abi.encodePacked(_type, _target, _data));\\n        p.deadline = block.timestamp + params[ParamName.ActivePeriod];\\n        p.votes[_proposer] = true;\\n        emit ProposalCreated(proposalId, _type, _target, _data, p.deadline, _proposer);\\n        return proposalId;\\n    }\\n\\n    function _setVoter(address _voter, uint256 _power) private {\\n        require(_power > 0, \\\"zero power\\\");\\n        if (voterPowers[_voter] == 0) {\\n            // add new voter\\n            voters.push(_voter);\\n        }\\n        voterPowers[_voter] = _power;\\n    }\\n\\n    function _removeVoter(address _voter) private {\\n        require(voterPowers[_voter] > 0, \\\"not a voter\\\");\\n        uint256 lastIndex = voters.length - 1;\\n        for (uint256 i = 0; i < voters.length; i++) {\\n            if (voters[i] == _voter) {\\n                if (i < lastIndex) {\\n                    voters[i] = voters[lastIndex];\\n                }\\n                voters.pop();\\n                voterPowers[_voter] = 0;\\n                return;\\n            }\\n        }\\n        revert(\\\"voter not found\\\"); // this should never happen\\n    }\\n\\n    function _transfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) private {\\n        if (_token == address(0)) {\\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\\\"\\\");\\n            require(sent, \\\"failed to send native token\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function _getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/proxies/OwnerDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nlibrary OwnerDataTypes {\\n    enum Action {\\n        Set,\\n        Add,\\n        Remove\\n    }\\n\\n    enum MsgFeeType {\\n        PerByte,\\n        Base\\n    }\\n\\n    enum BridgeType {\\n        Liquidity,\\n        PegBridge,\\n        PegVault,\\n        PegBridgeV2,\\n        PegVaultV2\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/interfaces/IBridgeOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridgeOwner {\\n    // for bridges\\n\\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external;\\n\\n    function notifyResetSigners() external;\\n\\n    function increaseNoticePeriod(uint256 _period) external;\\n\\n    function setWrap(address _token) external;\\n\\n    function setSupply(address _token, uint256 _supply) external;\\n\\n    function increaseSupply(address _token, uint256 _delta) external;\\n\\n    function decreaseSupply(address _token, uint256 _delta) external;\\n\\n    function addGovernor(address _account) external;\\n\\n    function removeGovernor(address _account) external;\\n\\n    // for bridge tokens\\n\\n    function updateBridge(address _bridge) external;\\n\\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external;\\n\\n    function setBridgeTokenSwapCap(address _bridgeToken, uint256 _swapCap) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/interfaces/IMessageOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageOwner {\\n    function setFeePerByte(uint256 _fee) external;\\n\\n    function setFeeBase(uint256 _fee) external;\\n\\n    function setLiquidityBridge(address _addr) external;\\n\\n    function setPegBridge(address _addr) external;\\n\\n    function setPegVault(address _addr) external;\\n\\n    function setPegBridgeV2(address _addr) external;\\n\\n    function setPegVaultV2(address _addr) external;\\n\\n    function setPreExecuteMessageGasUsage(uint256 _usage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/interfaces/ISgnOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISgnOwner {\\n    function setWhitelistEnabled(bool _whitelistEnabled) external;\\n\\n    function addWhitelisted(address _account) external;\\n\\n    function removeWhitelisted(address _account) external;\\n\\n    function setGovContract(address _addr) external;\\n\\n    function setRewardContract(address _addr) external;\\n\\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governed-owner/interfaces/IUpgradeableOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IUpgradeableOwner {\\n    function changeProxyAdmin(address _proxy, address _newAdmin) external;\\n\\n    function upgrade(address _proxy, address _implementation) external;\\n\\n    function upgradeAndCall(\\n        address _proxy,\\n        address _implementation,\\n        bytes calldata _data\\n    ) external;\\n\\n    function upgradeTo(address _implementation) external;\\n\\n    function upgradeToAndCall(address _implementation, bytes calldata _data) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ChangeProxyAdminProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrainTokenProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"IncreaseNoticePeriodProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"NotifyResetSignersProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"}],\"name\":\"ResetSignersProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OwnerDataTypes.BridgeType\",\"name\":\"bridgeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeAddr\",\"type\":\"address\"}],\"name\":\"SetBridgeAddressProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"SetBridgeTokenSwapCapProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetGovContractProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlashFactor\",\"type\":\"uint256\"}],\"name\":\"SetMaxSlashFactorProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OwnerDataTypes.MsgFeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetMsgFeeProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetNativeWrapProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usage\",\"type\":\"uint256\"}],\"name\":\"SetPreExecuteMessageGasUsageProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetRewardContractProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetWhitelistEnableProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOwner\",\"type\":\"uint256\"}],\"name\":\"TransferOwnershipProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeAddr\",\"type\":\"address\"}],\"name\":\"UpdateBridgeProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"UpdateBridgeSupplyCapProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdateGovernorProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdatePauserProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"UpdateSupplyProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdateWhitelistedProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"UpgradeAndCallProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradeProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"UpgradeToAndCallProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradeToProposalCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"contract SimpleGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SimpleGovernance\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"initGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeChangeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"proposeDrainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"proposeIncreaseNoticePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"proposeNotifyResetSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"proposeResetSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"enum OwnerDataTypes.BridgeType\",\"name\":\"_bridgeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_bridgeAddr\",\"type\":\"address\"}],\"name\":\"proposeSetBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapCap\",\"type\":\"uint256\"}],\"name\":\"proposeSetBridgeTokenSwapCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"proposeSetGovContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlashFactor\",\"type\":\"uint256\"}],\"name\":\"proposeSetMaxSlashFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"enum OwnerDataTypes.MsgFeeType\",\"name\":\"_feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"proposeSetMsgFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"proposeSetNativeWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usage\",\"type\":\"uint256\"}],\"name\":\"proposeSetPreExecuteMessageGasUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"proposeSetRewardContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"proposeSetWhitelistEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newOwner\",\"type\":\"uint256\"}],\"name\":\"proposeTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"proposeUpdateBridgeSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"proposeUpdateGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"proposeUpdatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"proposeUpdateSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"enum OwnerDataTypes.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"proposeUpdateWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"proposeUpgradeAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"proposeUpgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"proposeUpgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GovernedOwnerProxy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000001b9dfc56e38b0f92448659c114e2347bd803911c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}