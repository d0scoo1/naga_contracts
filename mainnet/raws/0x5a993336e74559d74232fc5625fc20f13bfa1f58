{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/BasicTokenAdapters.sol\n\npragma solidity =0.6.7;\n\n////// /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/BasicTokenAdapters.sol\n/// BasicTokenAdapters.sol\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.7; */\n\nabstract contract CollateralLike_2 {\n    function decimals() virtual public view returns (uint256);\n    function transfer(address,uint256) virtual public returns (bool);\n    function transferFrom(address,address,uint256) virtual public returns (bool);\n}\n\nabstract contract DSTokenLike_2 {\n    function mint(address,uint256) virtual external;\n    function burn(address,uint256) virtual external;\n}\n\nabstract contract SAFEEngineLike_3 {\n    function modifyCollateralBalance(bytes32,address,int256) virtual external;\n    function transferInternalCoins(address,address,uint256) virtual external;\n}\n\n/*\n    Here we provide *adapters* to connect the SAFEEngine to arbitrary external\n    token implementations, creating a bounded context for the SAFEEngine. The\n    adapters here are provided as working examples:\n      - `BasicCollateralJoin`: For well behaved ERC20 tokens, with simple transfer semantics.\n      - `ETHJoin`: For native Ether.\n      - `CoinJoin`: For connecting internal coin balances to an external\n                   `Coin` implementation.\n    In practice, adapter implementations will be varied and specific to\n    individual collateral types, accounting for different transfer\n    semantics and token standards.\n    Adapters need to implement two basic methods:\n      - `join`: enter collateral into the system\n      - `exit`: remove collateral from the system\n*/\n\ncontract BasicCollateralJoin {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"BasicCollateralJoin/account-not-authorized\");\n        _;\n    }\n\n    // SAFE database\n    SAFEEngineLike_3  public safeEngine;\n    // Collateral type name\n    bytes32        public collateralType;\n    // Actual collateral token contract\n    CollateralLike_2 public collateral;\n    // How many decimals the collateral token has\n    uint256        public decimals;\n    // Whether this adapter contract is enabled or not\n    uint256        public contractEnabled;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event DisableContract();\n    event Join(address sender, address account, uint256 wad);\n    event Exit(address sender, address account, uint256 wad);\n\n    constructor(address safeEngine_, bytes32 collateralType_, address collateral_) public {\n        authorizedAccounts[msg.sender] = 1;\n        contractEnabled = 1;\n        safeEngine      = SAFEEngineLike_3(safeEngine_);\n        collateralType  = collateralType_;\n        collateral      = CollateralLike_2(collateral_);\n        decimals        = collateral.decimals();\n        require(decimals == 18, \"BasicCollateralJoin/non-18-decimals\");\n        emit AddAuthorization(msg.sender);\n    }\n    /**\n     * @notice Disable this contract\n     */\n    function disableContract() external isAuthorized {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n    /**\n    * @notice Join collateral in the system\n    * @dev This function locks collateral in the adapter and creates a 'representation' of\n    *      the locked collateral inside the system. This adapter assumes that the collateral\n    *      has 18 decimals\n    * @param account Account from which we transferFrom collateral and add it in the system\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\n    **/\n    function join(address account, uint256 wad) external {\n        require(contractEnabled == 1, \"BasicCollateralJoin/contract-not-enabled\");\n        require(int256(wad) >= 0, \"BasicCollateralJoin/overflow\");\n        safeEngine.modifyCollateralBalance(collateralType, account, int256(wad));\n        require(collateral.transferFrom(msg.sender, address(this), wad), \"BasicCollateralJoin/failed-transfer\");\n        emit Join(msg.sender, account, wad);\n    }\n    /**\n    * @notice Exit collateral from the system\n    * @dev This function destroys the collateral representation from inside the system\n    *      and exits the collateral from this adapter. The adapter assumes that the collateral\n    *      has 18 decimals\n    * @param account Account to which we transfer the collateral\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\n    **/\n    function exit(address account, uint256 wad) external {\n        require(wad <= 2 ** 255, \"BasicCollateralJoin/overflow\");\n        safeEngine.modifyCollateralBalance(collateralType, msg.sender, -int256(wad));\n        require(collateral.transfer(account, wad), \"BasicCollateralJoin/failed-transfer\");\n        emit Exit(msg.sender, account, wad);\n    }\n}\n\ncontract ETHJoin {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call a restricted function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"ETHJoin/account-not-authorized\");\n        _;\n    }\n\n    // SAFE database\n    SAFEEngineLike_3 public safeEngine;\n    // Collateral type name\n    bytes32       public collateralType;\n    // Whether this contract is enabled or not\n    uint256       public contractEnabled;\n    // Number of decimals ETH has\n    uint256       public decimals;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event DisableContract();\n    event Join(address sender, address account, uint256 wad);\n    event Exit(address sender, address account, uint256 wad);\n\n    constructor(address safeEngine_, bytes32 collateralType_) public {\n        authorizedAccounts[msg.sender] = 1;\n        contractEnabled                = 1;\n        safeEngine                     = SAFEEngineLike_3(safeEngine_);\n        collateralType                 = collateralType_;\n        decimals                       = 18;\n        emit AddAuthorization(msg.sender);\n    }\n    /**\n     * @notice Disable this contract\n     */\n    function disableContract() external isAuthorized {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n    /**\n    * @notice Join ETH in the system\n    * @param account Account that will receive the ETH representation inside the system\n    **/\n    function join(address account) external payable {\n        require(contractEnabled == 1, \"ETHJoin/contract-not-enabled\");\n        require(int256(msg.value) >= 0, \"ETHJoin/overflow\");\n        safeEngine.modifyCollateralBalance(collateralType, account, int256(msg.value));\n        emit Join(msg.sender, account, msg.value);\n    }\n    /**\n    * @notice Exit ETH from the system\n    * @param account Account that will receive the ETH representation inside the system\n    **/\n    function exit(address payable account, uint256 wad) external {\n        require(int256(wad) >= 0, \"ETHJoin/overflow\");\n        safeEngine.modifyCollateralBalance(collateralType, msg.sender, -int256(wad));\n        emit Exit(msg.sender, account, wad);\n        account.transfer(wad);\n    }\n}\n\ncontract CoinJoin {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"CoinJoin/account-not-authorized\");\n        _;\n    }\n\n    // SAFE database\n    SAFEEngineLike_3 public safeEngine;\n    // Coin created by the system; this is the external, ERC-20 representation, not the internal 'coinBalance'\n    DSTokenLike_2    public systemCoin;\n    // Whether this contract is enabled or not\n    uint256        public contractEnabled;\n    // Number of decimals the system coin has\n    uint256        public decimals;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event DisableContract();\n    event Join(address sender, address account, uint256 wad);\n    event Exit(address sender, address account, uint256 wad);\n\n    constructor(address safeEngine_, address systemCoin_) public {\n        authorizedAccounts[msg.sender] = 1;\n        contractEnabled                = 1;\n        safeEngine                     = SAFEEngineLike_3(safeEngine_);\n        systemCoin                     = DSTokenLike_2(systemCoin_);\n        decimals                       = 18;\n        emit AddAuthorization(msg.sender);\n    }\n    /**\n     * @notice Disable this contract\n     */\n    function disableContract() external isAuthorized {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n    uint256 constant RAY = 10 ** 27;\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"CoinJoin/mul-overflow\");\n    }\n    /**\n    * @notice Join system coins in the system\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\n           When we join, the amount (wad) is multiplied by 10**27 (ray)\n    * @param account Account that will receive the joined coins\n    * @param wad Amount of external coins to join (18 decimal number)\n    **/\n    function join(address account, uint256 wad) external {\n        safeEngine.transferInternalCoins(address(this), account, multiply(RAY, wad));\n        systemCoin.burn(msg.sender, wad);\n        emit Join(msg.sender, account, wad);\n    }\n    /**\n    * @notice Exit system coins from the system and inside 'Coin.sol'\n    * @dev Inside the system, coins have 45 (rad) decimals but outside of it they have 18 decimals (wad).\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter\n    * @param account Account that will receive the exited coins\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\n    **/\n    function exit(address account, uint256 wad) external {\n        require(contractEnabled == 1, \"CoinJoin/contract-not-enabled\");\n        safeEngine.transferInternalCoins(msg.sender, address(this), multiply(RAY, wad));\n        systemCoin.mint(account, wad);\n        emit Exit(msg.sender, account, wad);\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"systemCoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike_3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemCoin\",\"outputs\":[{\"internalType\":\"contract DSTokenLike_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CoinJoin", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e6afa340851d60e75be38494813c09b3356a0090000000000000000000000006cb1e1404b549c28fb6c2e961b1e55a10b1f5a0b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}