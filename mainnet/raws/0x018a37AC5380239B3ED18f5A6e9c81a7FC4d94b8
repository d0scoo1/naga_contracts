{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/yangxiaolin/private/snuon/contracts/libs/GenerateSVG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity  ^0.8.6;\\n\\nimport { Base64 } from 'base64-sol/base64.sol';\\n\\nlibrary GenerateSVG {\\n    struct SVGParams {\\n        bytes[] parts;\\n        string background;\\n    }\\n\\n    struct ContentBounds {\\n        uint8 y1;\\n        uint8 x2;\\n        uint8 y2;\\n        uint8 x1;\\n    }\\n\\n    struct Rect {\\n        uint8 length;\\n        uint8 colorIndex;\\n    }\\n\\n    struct DecodedImage {\\n        uint8 paletteIndex;\\n        ContentBounds bounds;\\n        Rect[] rects;\\n    }\\n\\n    struct TokenURIParams {\\n        bytes[] parts;\\n        string background;\\n    }\\n\\n    function constructTokenURI(TokenURIParams memory params, mapping(uint8 => string[]) storage palettes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        string memory image = generateSVGImage(\\n            SVGParams({ parts: params.parts, background: params.background }),\\n            palettes\\n        );\\n\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                'data:image/svg+xml;base64,',\\n                image\\n            )\\n        );\\n    }\\n\\n    function generateSVG(SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        internal\\n        view\\n        returns (string memory svg)\\n    {\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                '<svg width=\\\"320\\\" height=\\\"320\\\" viewBox=\\\"0 0 320 320\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\">',\\n                '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#', params.background, '\\\" />',\\n                _generateSVGRects(params, palettes),\\n                '</svg>'\\n            )\\n        );\\n    }\\n\\n    function _generateSVGRects(SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        private\\n        view\\n        returns (string memory svg)\\n    {\\n        string[33] memory lookup = [\\n            '0', '10', '20', '30', '40', '50', '60', '70', \\n            '80', '90', '100', '110', '120', '130', '140', '150', \\n            '160', '170', '180', '190', '200', '210', '220', '230', \\n            '240', '250', '260', '270', '280', '290', '300', '310',\\n            '320' \\n        ];\\n\\n        string memory rects;\\n        for (uint8 p = 0; p < params.parts.length; p++) {\\n            DecodedImage memory image = _decodeRLEImage(params.parts[p]);\\n            string[] storage palette = palettes[image.paletteIndex];\\n\\n            uint256 currentX = image.bounds.x1;\\n            uint256 currentY = image.bounds.y1;\\n\\n            string memory part;\\n            for (uint256 i = 0; i < image.rects.length; i++) {\\n                Rect memory rect = image.rects[i];\\n                if (rect.colorIndex != 0) {\\n                    part = string(\\n                        abi.encodePacked(\\n                            part,\\n                            '<rect width=\\\"',\\n                            lookup[rect.length],\\n                            '\\\" height=\\\"10\\\" x=\\\"',\\n                            lookup[32 - currentX - rect.length],\\n                            '\\\" y=\\\"',\\n                            lookup[currentY],\\n                            '\\\" fill=\\\"#',\\n                            palette[rect.colorIndex],\\n                            '\\\" />'\\n                        )\\n                    );\\n                }\\n\\n                currentX += rect.length;\\n                if (currentX == image.bounds.x2) {\\n                    currentX = image.bounds.x1;\\n                    currentY++;\\n                }\\n            }\\n            rects = string(abi.encodePacked(rects, part));\\n        }\\n        return rects;\\n    }\\n\\n    function _decodeRLEImage(bytes memory image) private pure returns (DecodedImage memory) {\\n        uint8 paletteIndex = uint8(image[0]);\\n        ContentBounds memory bounds = ContentBounds({\\n            y1: uint8(image[1]),\\n            x2: uint8(image[2]),\\n            y2: uint8(image[3]),\\n            x1: uint8(image[4])\\n        });\\n\\n        uint256 cursor;\\n        Rect[] memory rects = new Rect[]((image.length - 5) / 2);\\n        for (uint256 i = 5; i < image.length; i += 2) {\\n            rects[cursor] = Rect({ length: uint8(image[i]), colorIndex: uint8(image[i + 1]) });\\n            cursor++;\\n        }\\n        return DecodedImage({ paletteIndex: paletteIndex, bounds: bounds, rects: rects });\\n    }\\n\\n    function generateSVGImage(SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        private\\n        view\\n        returns (string memory svg)\\n    {\\n        return Base64.encode(bytes(generateSVG(params, palettes)));\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[]", "ContractName": "GenerateSVG", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}