{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.6.0;\r\n\r\ninterface IMVDProxy {\r\n\r\n    function init(address votingTokenAddress, address functionalityProposalManagerAddress, address stateHolderAddress, address functionalityModelsManagerAddress, address functionalitiesManagerAddress, address walletAddress, address doubleProxyAddress) external;\r\n\r\n    function getDelegates() external view returns(address[] memory);\r\n    function getToken() external view returns(address);\r\n    function getMVDFunctionalityProposalManagerAddress() external view returns(address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function getMVDFunctionalityModelsManagerAddress() external view returns(address);\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns(address);\r\n    function getDoubleProxyAddress() external view returns(address);\r\n    function setDelegate(uint256 position, address newAddress) external returns(address oldAddress);\r\n    function changeProxy(address newAddress, bytes calldata initPayload) external;\r\n    function isValidProposal(address proposal) external view returns (bool);\r\n    function newProposal(string calldata codeName, bool emergency, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnParametersJSONArray, bool isInternal, bool needsSender, string calldata replaces) external returns(address proposalAddress);\r\n    function startProposal(address proposalAddress) external;\r\n    function disableProposal(address proposalAddress) external;\r\n    function transfer(address receiver, uint256 value, address token) external;\r\n    function transfer721(address receiver, uint256 tokenId, bytes calldata data, bool safe, address token) external;\r\n    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\r\n    function setProposal() external;\r\n    function read(string calldata codeName, bytes calldata data) external view returns(bytes memory returnData);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n    function callFromManager(address location, bytes calldata payload) external returns(bool, bytes memory);\r\n    function emitFromManager(string calldata codeName, address proposal, string calldata replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address location, bool submitable, string calldata methodSignature, bool isInternal, bool needsSender, address proposalAddress) external;\r\n\r\n    function emitEvent(string calldata eventSignature, bytes calldata firstIndex, bytes calldata secondIndex, bytes calldata data) external;\r\n\r\n    event ProxyChanged(address indexed newAddress);\r\n    event DelegateChanged(uint256 position, address indexed oldAddress, address indexed newAddress);\r\n\r\n    event Proposal(address proposal);\r\n    event ProposalCheck(address indexed proposal);\r\n    event ProposalSet(address indexed proposal, bool success);\r\n    event FunctionalitySet(string codeName, address indexed proposal, string replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address indexed replacedLocation, bool replacedWasSubmitable, string replacedMethodSignature, bool replacedWasInternal, bool replacedNeededSender, address indexed replacedProposal);\r\n\r\n    event Event(string indexed key, bytes32 indexed firstIndex, bytes32 indexed secondIndex, bytes data);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IVotingToken {\r\n    function init(string calldata name, string calldata symbol, uint256 decimals, uint256 totalSupply) external;\r\n\r\n    function getProxy() external view returns (address);\r\n    function setProxy() external;\r\n\r\n    function name() external view returns(string memory);\r\n    function symbol() external view returns(string memory);\r\n    function decimals() external view returns(uint256);\r\n\r\n    function mint(uint256 amount) external;\r\n    function burn(uint256 amount) external;\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n}\r\n\r\ninterface IMVDFunctionalityProposalManager {\r\n    function newProposal(string calldata codeName, address location, string calldata methodSignature, string calldata returnAbiParametersArray, string calldata replaces) external returns(address);\r\n    function checkProposal(address proposalAddress) external;\r\n    function getProxy() external view returns (address);\r\n    function setProxy() external;\r\n    function isValidProposal(address proposal) external view returns (bool);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n\r\n    function getProxy() external view returns (address);\r\n    function setProxy() external;\r\n\r\n    function init(address sourceLocation,\r\n        uint256 getMinimumBlockNumberSourceLocationId, address getMinimumBlockNumberFunctionalityAddress,\r\n        uint256 getEmergencyMinimumBlockNumberSourceLocationId, address getEmergencyMinimumBlockNumberFunctionalityAddress,\r\n        uint256 getEmergencySurveyStakingSourceLocationId, address getEmergencySurveyStakingFunctionalityAddress,\r\n        uint256 checkVoteResultSourceLocationId, address checkVoteResultFunctionalityAddress) external;\r\n\r\n    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender) external;\r\n    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender, uint256 position) external;\r\n    function removeFunctionality(string calldata codeName) external returns(bool removed, uint256 position);\r\n    function isValidFunctionality(address functionality) external view returns(bool);\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n    function setCallingContext(address location) external returns(bool);\r\n    function clearCallingContext() external;\r\n    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\r\n    function hasFunctionality(string calldata codeName) external view returns(bool);\r\n    function getFunctionalitiesAmount() external view returns(uint256);\r\n    function functionalitiesToJSON() external view returns(string memory);\r\n    function functionalitiesToJSON(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\r\n    function functionalityNames() external view returns(string memory);\r\n    function functionalityNames(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\r\n    function functionalityToJSON(string calldata codeName) external view returns(string memory);\r\n\r\n    function preConditionCheck(string calldata codeName, bytes calldata data, uint8 submitable, address sender, uint256 value) external view returns(address location, bytes memory payload);\r\n\r\n    function setupFunctionality(address proposalAddress) external returns (bool);\r\n}\r\n\r\ncontract VotingToken is IERC20, IVotingToken {\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _decimals;\r\n    address private _proxy;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name, string memory symbol, uint256 decimals, uint256 totalSupply) public {\r\n        if(totalSupply == 0) {\r\n            return;\r\n        }\r\n        init(name, symbol, decimals, totalSupply);\r\n    }\r\n\r\n    function init(string memory name, string memory symbol, uint256 decimals, uint256 totalSupply) public override {\r\n        require(_totalSupply == 0, \"Init already called!\");\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _totalSupply = totalSupply * (10 ** decimals);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(this), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"ETH not accepted\");\r\n    }\r\n\r\n    function getProxy() public override view returns(address) {\r\n        return _proxy;\r\n    }\r\n\r\n    function name() public override view returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public override view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public override view returns(uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        address txSender = msg.sender;\r\n        if(_proxy == address(0) || !(IMVDFunctionalityProposalManager(IMVDProxy(_proxy).getMVDFunctionalityProposalManagerAddress()).isValidProposal(txSender) && recipient == txSender)) {\r\n            _approve(sender, txSender, _allowances[sender][txSender] = sub(_allowances[sender][txSender], amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\r\n        _approve(msg.sender, spender, add(_allowances[msg.sender][spender], addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\r\n        _approve(msg.sender, spender, sub(_allowances[msg.sender][spender], subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = sub(_balances[sender], amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = add(_balances[recipient], amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\r\n        require(b <= a, errorMessage);\r\n        c = a - b;\r\n    }\r\n\r\n    function setProxy() public override {\r\n        require(_totalSupply != 0, \"Init not called!\");\r\n        require(_proxy == address(0) || _proxy == msg.sender, _proxy != address(0) ? \"Proxy already set!\" : \"Only Proxy can toggle itself!\");\r\n        _proxy = _proxy == address(0) ?  msg.sender : address(0);\r\n    }\r\n\r\n    function mint(uint256 amount) public override {\r\n        require(IMVDFunctionalitiesManager(IMVDProxy(_proxy).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized access!\");\r\n\r\n        _totalSupply = add(_totalSupply, amount);\r\n        _balances[_proxy] = add(_balances[_proxy], amount);\r\n        emit Transfer(address(0), _proxy, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public override {\r\n        _balances[msg.sender] = sub(_balances[msg.sender], amount, \"VotingToken: burn amount exceeds balance\");\r\n        _totalSupply = sub(_totalSupply, amount, \"VotingToken: burn amount exceeds total supply\");\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VotingToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000001312d00000000000000000000000000000000000000000000000000000000000000000443656c6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000443656c6c00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7e8c4a6bfad90fdf9e37ddace6ea3361d616502632ffa02e8e3b67934d1bd693"}]}