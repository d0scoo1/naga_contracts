{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/// @title Base64\\n/// @author Brecht Devos - \\u003cbrecht@loopring.org\\u003e\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n    bytes internal constant TABLE_DECODE =\\n        hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n        hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n        hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n        hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with \\u0027=\\u0027\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with \\u0027=\\u0027\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // read 4 characters\\n                dataPtr := add(dataPtr, 4)\\n                let input := mload(dataPtr)\\n\\n                // write 3 bytes\\n                let output := add(\\n                    add(\\n                        shl(\\n                            18,\\n                            and(\\n                                mload(add(tablePtr, and(shr(24, input), 0xFF))),\\n                                0xFF\\n                            )\\n                        ),\\n                        shl(\\n                            12,\\n                            and(\\n                                mload(add(tablePtr, and(shr(16, input), 0xFF))),\\n                                0xFF\\n                            )\\n                        )\\n                    ),\\n                    add(\\n                        shl(\\n                            6,\\n                            and(\\n                                mload(add(tablePtr, and(shr(8, input), 0xFF))),\\n                                0xFF\\n                            )\\n                        ),\\n                        and(mload(add(tablePtr, and(input, 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"},\"SpectrumDetailsInterface.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\n// Name: Spectrum Details Interface\\n// Design: biron.eth\\n// Buidl: himlate.eth\\n//_______________________________________________________________________________________________________________________________________\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______________________________________________________________________________________________________________________\\n//____/\\\\\\\\\\\\/////////\\\\\\\\\\\\___________________________________________________________________________________________________________________\\n//____\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___________________________________/\\\\\\\\\\\\______________________________________________________________\\n//______\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\/////\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\____/\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\__________\\n//__________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\/////\\\\\\\\\\\\___/\\\\\\\\\\\\//////__\\\\////\\\\\\\\\\\\////__\\\\/\\\\\\\\\\\\/////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\__/\\\\\\\\\\\\///\\\\\\\\\\\\\\\\\\\\///\\\\\\\\\\\\_______\\n//_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\//////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\___\\\\///__\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____\\n//________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_________\\\\//\\\\\\\\///////___\\\\//\\\\\\\\\\\\___________\\\\/\\\\\\\\\\\\_/\\\\\\\\__\\\\/\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____\\n//________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\__________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\____\\n//___________\\\\///////////_____\\\\///____________\\\\//////////_____\\\\////////______\\\\/////____\\\\///___________\\\\/////////___\\\\///___\\\\///___\\\\///____\\n//_______________________________________________________________________________________________________________________________________\\n//_______________________________________________________________________________________________________________________________________\\n//_______________________________________________________________________________________________________________________________________\\n\\ninterface SpectrumDetailsInterface {\\n    function getDetail(uint256 _detail)\\n        external\\n        view\\n        returns (string memory, string memory);\\n}\\n\"},\"SpectrumGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: CC0\\npragma solidity ^0.8.12;\\n\\n// Name: Kinetic Spectrum Generator\\n// Description: Contract that generate each Kinetic Spectrum based on a seed\\n// Twitter: @KineticSpectrum\\n// Design: biron.eth\\n// Buidl: himlate.eth\\n//_______________________________________________________________________________________________________________________________________\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______________________________________________________________________________________________________________________\\n//____/\\\\\\\\\\\\/////////\\\\\\\\\\\\___________________________________________________________________________________________________________________\\n//____\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___________________________________/\\\\\\\\\\\\______________________________________________________________\\n//______\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\/////\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\____/\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\__________\\n//__________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\/////\\\\\\\\\\\\___/\\\\\\\\\\\\//////__\\\\////\\\\\\\\\\\\////__\\\\/\\\\\\\\\\\\/////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\__/\\\\\\\\\\\\///\\\\\\\\\\\\\\\\\\\\///\\\\\\\\\\\\_______\\n//_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\//////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\___\\\\///__\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____\\n//________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_________\\\\//\\\\\\\\///////___\\\\//\\\\\\\\\\\\___________\\\\/\\\\\\\\\\\\_/\\\\\\\\__\\\\/\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____\\n//________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\__________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\____\\n//___________\\\\///////////_____\\\\///____________\\\\//////////_____\\\\////////______\\\\/////____\\\\///___________\\\\/////////___\\\\///___\\\\///___\\\\///____\\n//_______________________________________________________________________________________________________________________________________\\n//_______________________________________________________________________________________________________________________________________\\n//_______________________________________________________________________________________________________________________________________\\n\\nimport \\\"./SVG.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./Base64.sol\\\";\\nimport \\\"./SpectrumGeneratorInterface.sol\\\";\\nimport \\\"./SpectrumDetailsInterface.sol\\\";\\n\\ncontract SpectrumGenerator is SpectrumGeneratorInterface {\\n    uint256 private MIN_LAYERS = 2;\\n    uint256 private MAX_LAYERS = 6;\\n    uint256 private MIN_DURATION = 10;\\n    uint256 private MAX_DURATION = 30;\\n\\n    SpectrumDetailsInterface public spectrumDetails;\\n\\n    mapping(uint256 =\\u003e string) private _tokenURIs;\\n\\n    uint256 public tokenCounter;\\n\\n    constructor(SpectrumDetailsInterface _spectrumDetails) {\\n        spectrumDetails = _spectrumDetails;\\n    }\\n\\n    function createLayer(\\n        string memory _name,\\n        string memory _duration,\\n        string memory _rgb\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                svg.g(\\n                    string.concat(\\n                        svg.prop(\\\"style\\\", \\\"mix-blend-mode: multiply\\\")\\n                    ),\\n                    string.concat(\\n                        svg.circle(\\n                            string.concat(\\n                                svg.prop(\\\"cx\\\", \\\"500\\\"),\\n                                svg.prop(\\\"cy\\\", \\\"500\\\"),\\n                                svg.prop(\\\"r\\\", \\\"500\\\"),\\n                                svg.prop(\\n                                    \\\"fill\\\",\\n                                    string.concat(\\\"url(#\\\", _name, \\\")\\\")\\n                                )\\n                            ),\\n                            utils.NULL\\n                        ),\\n                        svg.animateTransform(\\n                            string.concat(\\n                                svg.prop(\\\"attributeType\\\", \\\"xml\\\"),\\n                                svg.prop(\\\"attributeName\\\", \\\"transform\\\"),\\n                                svg.prop(\\\"type\\\", \\\"rotate\\\"),\\n                                svg.prop(\\\"from\\\", \\\"360 500 500\\\"),\\n                                svg.prop(\\\"to\\\", \\\"0 500 500\\\"),\\n                                svg.prop(\\\"dur\\\", string.concat(_duration, \\\"s\\\")),\\n                                svg.prop(\\\"additive\\\", \\\"sum\\\"),\\n                                svg.prop(\\\"repeatCount\\\", \\\"indefinite\\\")\\n                            )\\n                        )\\n                    )\\n                ),\\n                svg.defs(\\n                    utils.NULL,\\n                    svg.radialGradient(\\n                        string.concat(\\n                            svg.prop(\\\"id\\\", _name),\\n                            svg.prop(\\\"cx\\\", \\\"0\\\"),\\n                            svg.prop(\\\"cy\\\", \\\"0\\\"),\\n                            svg.prop(\\\"r\\\", \\\"1\\\"),\\n                            svg.prop(\\\"gradientUnits\\\", \\\"userSpaceOnUse\\\"),\\n                            svg.prop(\\n                                \\\"gradientTransform\\\",\\n                                \\\"translate(500) rotate(90) scale(1000)\\\"\\n                            )\\n                        ),\\n                        string.concat(\\n                            svg.gradientStop(0, _rgb, utils.NULL),\\n                            svg.gradientStop(\\n                                100,\\n                                _rgb,\\n                                string.concat(svg.prop(\\\"stop-opacity\\\", \\\"0\\\"))\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _getLayers(uint256 seed, uint256 d)\\n        private\\n        view\\n        returns (string memory, string memory)\\n    {\\n        uint256 i;\\n        uint256 iterations = utils.getRandomInteger(\\n            \\\"iterations\\\",\\n            seed,\\n            MIN_LAYERS,\\n            MAX_LAYERS\\n        );\\n        string memory layers;\\n        string memory layersMeta;\\n\\n        while (i \\u003c iterations) {\\n            string memory id = utils.uint2str(i);\\n            uint256 duration = utils.getRandomInteger(\\n                id,\\n                seed,\\n                MIN_DURATION,\\n                MAX_DURATION\\n            );\\n            uint256 r = utils.getRandomInteger(\\n                string.concat(\\\"r_\\\", id),\\n                seed,\\n                0,\\n                255\\n            );\\n            uint256[3] memory arr = [r, 0, 255];\\n            uint256[3] memory shuffledArr = utils.shuffle(arr, i + d);\\n\\n            layers = string.concat(\\n                layers,\\n                createLayer(\\n                    string.concat(\\\"layer_\\\", id),\\n                    utils.uint2str(duration),\\n                    string.concat(\\n                        \\\"rgb(\\\",\\n                        utils.uint2str(shuffledArr[0]),\\n                        \\\",\\\",\\n                        utils.uint2str(shuffledArr[1]),\\n                        \\\",\\\",\\n                        utils.uint2str(shuffledArr[2]),\\n                        \\\")\\\"\\n                    )\\n                )\\n            );\\n\\n            layersMeta = string.concat(\\n                layersMeta,\\n                _createAttribute(\\n                    \\\"Layer Color\\\",\\n                    string.concat(\\n                        utils.uint2str(shuffledArr[0]),\\n                        \\\",\\\",\\n                        utils.uint2str(shuffledArr[1]),\\n                        \\\",\\\",\\n                        utils.uint2str(shuffledArr[2])\\n                    ),\\n                    true\\n                ),\\n                _createAttribute(\\\"Layer Speed\\\", utils.uint2str(duration), true)\\n            );\\n\\n            i++;\\n        }\\n\\n        return (\\n            layers,\\n            string.concat(\\n                _createAttribute(\\\"Layers\\\", utils.uint2str(iterations), true),\\n                layersMeta\\n            )\\n        );\\n    }\\n\\n    function _createSvg(uint256 _seed, uint256 _tokenId)\\n        internal\\n        view\\n        returns (string memory, string memory)\\n    {\\n        uint256 d = _tokenId \\u003c 2\\n            ? 92 + _tokenId\\n            : utils.getRandomInteger(\\\"_detail\\\", _seed, 1, 92);\\n        (string memory detail, string memory detailName) = spectrumDetails\\n            .getDetail(d);\\n        (string memory layers, string memory layersMeta) = _getLayers(_seed, d);\\n\\n        string memory stringSvg = string.concat(\\n            \\u0027\\u003csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 1000 1000\\\"\\u003e\\u0027,\\n            svg.circle(\\n                string.concat(\\n                    svg.prop(\\\"cx\\\", \\\"500\\\"),\\n                    svg.prop(\\\"cy\\\", \\\"500\\\"),\\n                    svg.prop(\\\"r\\\", \\\"500\\\"),\\n                    svg.prop(\\\"fill\\\", \\\"#fff\\\")\\n                ),\\n                utils.NULL\\n            ),\\n            layers,\\n            detail,\\n            \\\"\\u003c/svg\\u003e\\\"\\n        );\\n\\n        return (\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(bytes(stringSvg))\\n                )\\n            ),\\n            string.concat(\\n                \\u0027\\\"attributes\\\":[\\u0027,\\n                _createAttribute(\\\"Detail\\\", detailName, false),\\n                layersMeta,\\n                \\\"]\\\"\\n            )\\n        );\\n    }\\n\\n    function _createAttribute(\\n        string memory _type,\\n        string memory _value,\\n        bool _leadingComma\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                _leadingComma ? \\\",\\\" : \\\"\\\",\\n                \\u0027{\\\"trait_type\\\":\\\"\\u0027,\\n                _type,\\n                \\u0027\\\",\\\"value\\\":\\\"\\u0027,\\n                _value,\\n                \\u0027\\\"}\\u0027\\n            );\\n    }\\n\\n    function _prepareMetadata(\\n        uint256 tokenId,\\n        string memory image,\\n        string memory attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                \\u0027{\\\"name\\\":\\\"Spectrum #\\u0027,\\n                                utils.uint2str(tokenId),\\n                                \\u0027\\\", \\\"description\\\":\\\"Kinetic Spectrums is a collection of dynamic, ever changing artworks stored on the Ethereum Network. Each Spectrum is made by combining 2 to 5 layers of color. These layers multiply with each other and slowly rotate at a different speeds meaning your NFT is constantly changing color and evolving the longer you watch it.\\\", \\u0027,\\n                                attributes,\\n                                \\u0027, \\\"image\\\":\\\"\\u0027,\\n                                image,\\n                                \\u0027\\\"}\\u0027\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function tokenURI(uint256 _tokenId, uint256 _seed)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        (string memory svg64, string memory attributes) = _createSvg(\\n            _seed,\\n            _tokenId\\n        );\\n\\n        return _prepareMetadata(_tokenId, svg64, attributes);\\n    }\\n}\\n\"},\"SpectrumGeneratorInterface.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\n// Name: Spectrum Interface\\n// Design: biron.eth\\n// Buidl: himlate.eth\\n//_______________________________________________________________________________________________________________________________________\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______________________________________________________________________________________________________________________\\n//____/\\\\\\\\\\\\/////////\\\\\\\\\\\\___________________________________________________________________________________________________________________\\n//____\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___________________________________/\\\\\\\\\\\\______________________________________________________________\\n//______\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\/////\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\____/\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\__________\\n//__________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\/////\\\\\\\\\\\\___/\\\\\\\\\\\\//////__\\\\////\\\\\\\\\\\\////__\\\\/\\\\\\\\\\\\/////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\__/\\\\\\\\\\\\///\\\\\\\\\\\\\\\\\\\\///\\\\\\\\\\\\_______\\n//_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\//////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\___\\\\///__\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____\\n//________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_________\\\\//\\\\\\\\///////___\\\\//\\\\\\\\\\\\___________\\\\/\\\\\\\\\\\\_/\\\\\\\\__\\\\/\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____\\n//________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\__________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\____\\n//___________\\\\///////////_____\\\\///____________\\\\//////////_____\\\\////////______\\\\/////____\\\\///___________\\\\/////////___\\\\///___\\\\///___\\\\///____\\n//_______________________________________________________________________________________________________________________________________\\n//_______________________________________________________________________________________________________________________________________\\n//_______________________________________________________________________________________________________________________________________\\n\\ninterface SpectrumGeneratorInterface {\\n    function tokenURI(uint256 _tokenId, uint256 _seed)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"},\"SVG.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\nimport \\\"./Utils.sol\\\";\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG\\u0027s with a simple, web-like API.\\nlibrary svg {\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"g\\\", _props, _children);\\n    }\\n\\n    function defs(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"defs\\\", _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"circle\\\", _props, _children);\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"radialGradient\\\", _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                \\\"stop\\\",\\n                string.concat(\\n                    prop(\\\"stop-color\\\", stopColor),\\n                    \\\" \\\",\\n                    prop(\\\"offset\\\", string.concat(utils.uint2str(offset), \\\"%\\\")),\\n                    \\\" \\\",\\n                    _props\\n                ),\\n                utils.NULL\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"animateTransform\\\", _props, utils.NULL);\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"\\u003c\\\",\\n                _tag,\\n                \\\" \\\",\\n                _props,\\n                \\\"\\u003e\\\",\\n                _children,\\n                \\\"\\u003c/\\\",\\n                _tag,\\n                \\\"\\u003e\\\"\\n            );\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, \\\"=\\\", \\u0027\\\"\\u0027, _val, \\u0027\\\" \\u0027);\\n    }\\n}\\n\"},\"Utils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = \\\"\\\";\\n\\n    function rgbaString(string memory _rgb, string memory _a)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory formattedA = stringsEqual(_a, \\\"100\\\")\\n            ? \\\"1\\\"\\n            : string.concat(\\\"0.\\\", _a);\\n\\n        return string.concat(\\\"rgba(\\\", _rgb, \\\",\\\", formattedA, \\\")\\\");\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        string memory _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = stringsEqual(_a, \\\"100\\\")\\n            ? \\\"1\\\"\\n            : string.concat(\\\"0.\\\", _a);\\n\\n        return\\n            string.concat(\\n                \\\"rgba(\\\",\\n                utils.uint2str(_r),\\n                \\\",\\\",\\n                utils.uint2str(_g),\\n                \\\",\\\",\\n                utils.uint2str(_b),\\n                \\\",\\\",\\n                formattedA,\\n                \\\")\\\"\\n            );\\n    }\\n\\n    function rgbaFromArray(uint256[3] memory _arr, string memory _a)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return rgba(_arr[0], _arr[1], _arr[2], _a);\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // get a random integer in a range of ints\\n    function getRandomInteger(\\n        string memory _name,\\n        uint256 _seed,\\n        uint256 _min,\\n        uint256 _max\\n    ) internal pure returns (uint256) {\\n        if (_max \\u003c= _min) return _min;\\n        return\\n            (uint256(keccak256(abi.encodePacked(_name, _seed))) %\\n                (_max - _min)) + _min;\\n    }\\n\\n    // suffle an array of uints\\n    function shuffle(uint256[3] memory _arr, uint256 _seed)\\n        internal\\n        view\\n        returns (uint256[3] memory)\\n    {\\n        for (uint256 i = 0; i \\u003c _arr.length; i++) {\\n            uint256 n = i +\\n                (uint256(keccak256(abi.encodePacked(block.timestamp, _seed))) %\\n                    (_arr.length - i));\\n            uint256 temp = _arr[n];\\n            _arr[n] = _arr[i];\\n            _arr[i] = temp;\\n        }\\n\\n        return _arr;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract SpectrumDetailsInterface\",\"name\":\"_spectrumDetails\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"spectrumDetails\",\"outputs\":[{\"internalType\":\"contract SpectrumDetailsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpectrumGenerator", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f5b792b209e6acaff4f6928411e6533c1626d527", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19cca46eaa9eda8ba17d1f054842c8bc2f81dde3e2b8faa8e621f4fc8ea019a0"}]}