{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/UserLeveragePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./tokens/erc20permit-upgradeable/ERC20PermitUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./abstract/AbstractLeveragePortfolio.sol\\\";\\r\\nimport \\\"./interfaces/IBMICoverStaking.sol\\\";\\r\\nimport \\\"./interfaces/IBMICoverStakingView.sol\\\";\\r\\n//import \\\"./interfaces/ILiquidityMining.sol\\\";\\r\\nimport \\\"./interfaces/IRewardsGenerator.sol\\\";\\r\\nimport \\\"./interfaces/ILiquidityRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IUserLeveragePool.sol\\\";\\r\\nimport \\\"./interfaces/IShieldMining.sol\\\";\\r\\n\\r\\ncontract UserLeveragePool is AbstractLeveragePortfolio, IUserLeveragePool, ERC20PermitUpgradeable {\\r\\n    using SafeERC20 for ERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using Math for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint256 public constant PREMIUM_DISTRIBUTION_EPOCH = 1 days;\\r\\n    uint256 public constant MAX_PREMIUM_DISTRIBUTION_EPOCHS = 90;\\r\\n\\r\\n    uint256 public constant override EPOCH_DURATION = 1 weeks;\\r\\n    uint256 public constant MAXIMUM_EPOCHS = SECONDS_IN_THE_YEAR / EPOCH_DURATION;\\r\\n    uint256 public constant VIRTUAL_EPOCHS = 2;\\r\\n\\r\\n    uint256 public constant WITHDRAWAL_PERIOD = 8 days;\\r\\n    uint256 public constant override READY_TO_WITHDRAW_PERIOD = 2 days;\\r\\n\\r\\n    uint256 public override epochStartTime;\\r\\n    uint256 public lastDistributionEpoch;\\r\\n\\r\\n    uint256 public lastPremiumDistributionEpoch;\\r\\n    int256 public lastPremiumDistributionAmount;\\r\\n\\r\\n    IPolicyBookFabric.ContractType public override contractType;\\r\\n\\r\\n    ERC20 public stblToken;\\r\\n    IBMICoverStaking public bmiCoverStaking;\\r\\n    IBMICoverStakingView public bmiCoverStakingView;\\r\\n    IRewardsGenerator public rewardsGenerator;\\r\\n    // ILiquidityMining public liquidityMining;\\r\\n    ILiquidityRegistry public liquidityRegistry;\\r\\n    IShieldMining public shieldMining;\\r\\n\\r\\n    mapping(address => WithdrawalInfo) public override withdrawalsInfo;\\r\\n\\r\\n    // mapping(address => uint256) public liquidityFromLM;\\r\\n    mapping(uint256 => int256) public premiumDistributionDeltas;\\r\\n\\r\\n    mapping(address => uint256) public override userLiquidity;\\r\\n\\r\\n    uint256 public stblDecimals;\\r\\n    uint256 public maxCapacities;\\r\\n    bool public override whitelisted;\\r\\n\\r\\n    // new state post v2\\r\\n    uint256 public override a2_ProtocolConstant;\\r\\n\\r\\n    event LiquidityAdded(\\r\\n        address _liquidityHolder,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _newTotalLiquidity\\r\\n    );\\r\\n    event WithdrawalRequested(\\r\\n        address _liquidityHolder,\\r\\n        uint256 _tokensToWithdraw,\\r\\n        uint256 _readyToWithdrawDate\\r\\n    );\\r\\n\\r\\n    modifier updateBMICoverStakingReward() {\\r\\n        _;\\r\\n        forceUpdateBMICoverStakingRewardMultiplier();\\r\\n    }\\r\\n\\r\\n    modifier withPremiumsDistribution() {\\r\\n        _distributePremiums();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __UserLeveragePool_init(\\r\\n        IPolicyBookFabric.ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external override initializer {\\r\\n        __LeveragePortfolio_init();\\r\\n\\r\\n        string memory fullSymbol = string(abi.encodePacked(\\\"bmiV2\\\", _projectSymbol, \\\"Cover\\\"));\\r\\n        __ERC20Permit_init(fullSymbol);\\r\\n        __ERC20_init(_description, fullSymbol);\\r\\n        contractType = _contractType;\\r\\n\\r\\n        epochStartTime = block.timestamp;\\r\\n        lastDistributionEpoch = 1;\\r\\n\\r\\n        lastPremiumDistributionEpoch = _getPremiumDistributionEpoch();\\r\\n        maxCapacities = 3500000 * DECIMALS18;\\r\\n        a2_ProtocolConstant = 50 * PRECISION;\\r\\n    }\\r\\n\\r\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\r\\n        external\\r\\n        override\\r\\n        onlyInjectorOrZero\\r\\n    {\\r\\n        stblToken = ERC20(_contractsRegistry.getUSDTContract());\\r\\n        bmiCoverStaking = IBMICoverStaking(_contractsRegistry.getBMICoverStakingContract());\\r\\n        bmiCoverStakingView = IBMICoverStakingView(\\r\\n            _contractsRegistry.getBMICoverStakingViewContract()\\r\\n        );\\r\\n        rewardsGenerator = IRewardsGenerator(_contractsRegistry.getRewardsGeneratorContract());\\r\\n        policyBookAdmin = _contractsRegistry.getPolicyBookAdminContract();\\r\\n        capitalPool = ICapitalPool(_contractsRegistry.getCapitalPoolContract());\\r\\n        liquidityRegistry = ILiquidityRegistry(_contractsRegistry.getLiquidityRegistryContract());\\r\\n        policyBookRegistry = IPolicyBookRegistry(\\r\\n            _contractsRegistry.getPolicyBookRegistryContract()\\r\\n        );\\r\\n        leveragePortfolioView = ILeveragePortfolioView(\\r\\n            _contractsRegistry.getLeveragePortfolioViewContract()\\r\\n        );\\r\\n        reinsurancePoolAddress = _contractsRegistry.getReinsurancePoolContract();\\r\\n        stblDecimals = stblToken.decimals();\\r\\n        shieldMining = IShieldMining(_contractsRegistry.getShieldMiningContract());\\r\\n    }\\r\\n\\r\\n    function getEpoch(uint256 time) public view override returns (uint256) {\\r\\n        return time.sub(epochStartTime).div(EPOCH_DURATION) + 1;\\r\\n    }\\r\\n\\r\\n    function _getPremiumDistributionEpoch() internal view returns (uint256) {\\r\\n        return block.timestamp / PREMIUM_DISTRIBUTION_EPOCH;\\r\\n    }\\r\\n\\r\\n    function _getSTBLToBMIXRatio(uint256 currentLiquidity) internal view returns (uint256) {\\r\\n        uint256 _currentTotalSupply = totalSupply();\\r\\n\\r\\n        if (_currentTotalSupply == 0) {\\r\\n            return PERCENTAGE_100;\\r\\n        }\\r\\n\\r\\n        return currentLiquidity.mul(PERCENTAGE_100).div(_currentTotalSupply);\\r\\n    }\\r\\n\\r\\n    function convertBMIXToSTBL(uint256 _amount) public view override returns (uint256) {\\r\\n        (, uint256 currentLiquidity) = getNewCoverAndLiquidity();\\r\\n\\r\\n        return _amount.mul(_getSTBLToBMIXRatio(currentLiquidity)).div(PERCENTAGE_100);\\r\\n    }\\r\\n\\r\\n    function convertSTBLToBMIX(uint256 _amount) public view override returns (uint256) {\\r\\n        (, uint256 currentLiquidity) = getNewCoverAndLiquidity();\\r\\n\\r\\n        return _amount.mul(PERCENTAGE_100).div(_getSTBLToBMIXRatio(currentLiquidity));\\r\\n    }\\r\\n\\r\\n    function _getPremiumsDistribution(uint256 lastEpoch, uint256 currentEpoch)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            int256 currentDistribution,\\r\\n            uint256 distributionEpoch,\\r\\n            uint256 newTotalLiquidity\\r\\n        )\\r\\n    {\\r\\n        currentDistribution = lastPremiumDistributionAmount;\\r\\n        newTotalLiquidity = totalLiquidity;\\r\\n        distributionEpoch = Math.min(\\r\\n            currentEpoch,\\r\\n            lastEpoch + MAX_PREMIUM_DISTRIBUTION_EPOCHS + 1\\r\\n        );\\r\\n\\r\\n        for (uint256 i = lastEpoch + 1; i <= distributionEpoch; i++) {\\r\\n            currentDistribution += premiumDistributionDeltas[i];\\r\\n            newTotalLiquidity = newTotalLiquidity.add(uint256(currentDistribution));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _distributePremiums() internal {\\r\\n        uint256 lastEpoch = lastPremiumDistributionEpoch;\\r\\n        uint256 currentEpoch = _getPremiumDistributionEpoch();\\r\\n\\r\\n        if (currentEpoch > lastEpoch) {\\r\\n            (\\r\\n                lastPremiumDistributionAmount,\\r\\n                lastPremiumDistributionEpoch,\\r\\n                totalLiquidity\\r\\n            ) = _getPremiumsDistribution(lastEpoch, currentEpoch);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function whitelist(bool _whitelisted)\\r\\n        external\\r\\n        override\\r\\n        onlyPolicyBookAdmin\\r\\n        updateBMICoverStakingReward\\r\\n    {\\r\\n        whitelisted = _whitelisted;\\r\\n    }\\r\\n\\r\\n    /// @notice set max total liquidity for the pool\\r\\n    /// @param _maxCapacities uint256 the max total liquidity\\r\\n    function setMaxCapacities(uint256 _maxCapacities) external override onlyPolicyBookAdmin {\\r\\n        require(_maxCapacities > 0, \\\"LP: max capacities can't be zero\\\");\\r\\n        maxCapacities = _maxCapacities;\\r\\n    }\\r\\n\\r\\n    function setA2_ProtocolConstant(uint256 _a2_ProtocolConstant)\\r\\n        external\\r\\n        override\\r\\n        onlyPolicyBookAdmin\\r\\n    {\\r\\n        a2_ProtocolConstant = _a2_ProtocolConstant;\\r\\n    }\\r\\n\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() public override {\\r\\n        uint256 _totalBmiMultiplier;\\r\\n        uint256 _poolMultiplier;\\r\\n        uint256 _leverageProvided;\\r\\n        uint256 _poolUR;\\r\\n        address policyBookAddress;\\r\\n        for (uint256 i = 0; i < leveragedCoveragePools.length(); i++) {\\r\\n            policyBookAddress = leveragedCoveragePools.at(i);\\r\\n            IPolicyBook _coveragepool = IPolicyBook(policyBookAddress);\\r\\n\\r\\n            _poolMultiplier = rewardsGenerator.getPolicyBookRewardMultiplier(policyBookAddress);\\r\\n\\r\\n            _leverageProvided = poolsLDeployedAmount[policyBookAddress].mul(PRECISION).div(\\r\\n                totalLiquidity\\r\\n            );\\r\\n\\r\\n            _poolUR = _coveragepool.totalCoverTokens().mul(PERCENTAGE_100).div(\\r\\n                _coveragepool.totalLiquidity()\\r\\n            );\\r\\n\\r\\n            _totalBmiMultiplier = _totalBmiMultiplier.add(\\r\\n                leveragePortfolioView.calcBMIMultiplier(\\r\\n                    BMIMultiplierFactors(\\r\\n                        _poolMultiplier,\\r\\n                        _leverageProvided,\\r\\n                        leveragePortfolioView.calcM(_poolUR, address(this))\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        rewardsGenerator.updatePolicyBookShare(_totalBmiMultiplier.div(10**22)); // 5 decimal places or zero\\r\\n    }\\r\\n\\r\\n    function getNewCoverAndLiquidity()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity)\\r\\n    {\\r\\n        newTotalLiquidity = totalLiquidity;\\r\\n\\r\\n        uint256 lastEpoch = lastPremiumDistributionEpoch;\\r\\n        uint256 currentEpoch = _getPremiumDistributionEpoch();\\r\\n\\r\\n        if (currentEpoch > lastEpoch) {\\r\\n            (, , newTotalLiquidity) = _getPremiumsDistribution(lastEpoch, currentEpoch);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\r\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\r\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\r\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount)\\r\\n        external\\r\\n        override\\r\\n        withPremiumsDistribution\\r\\n        updateBMICoverStakingReward\\r\\n        onlyCapitalPool\\r\\n    {\\r\\n        updateEpochsInfo();\\r\\n\\r\\n        uint256 _totalSeconds =\\r\\n            secondsToEndCurrentEpoch().add(epochsNumber.sub(1).mul(EPOCH_DURATION));\\r\\n\\r\\n        _addPolicyPremiumToDistributions(\\r\\n            _totalSeconds.add(VIRTUAL_EPOCHS * EPOCH_DURATION),\\r\\n            premiumAmount\\r\\n        );\\r\\n\\r\\n        emit PremiumAdded(premiumAmount);\\r\\n    }\\r\\n\\r\\n    /// @dev no need to cap epochs because the maximum policy duration is 1 year\\r\\n    function _addPolicyPremiumToDistributions(uint256 _totalSeconds, uint256 _distributedAmount)\\r\\n        internal\\r\\n    {\\r\\n        uint256 distributionEpochs = _totalSeconds.add(1).div(PREMIUM_DISTRIBUTION_EPOCH).max(1);\\r\\n\\r\\n        int256 distributedPerEpoch = int256(_distributedAmount.div(distributionEpochs));\\r\\n        uint256 nextEpoch = _getPremiumDistributionEpoch() + 1;\\r\\n\\r\\n        premiumDistributionDeltas[nextEpoch] += distributedPerEpoch;\\r\\n        premiumDistributionDeltas[nextEpoch + distributionEpochs] -= distributedPerEpoch;\\r\\n    }\\r\\n\\r\\n    function updateEpochsInfo() public override {\\r\\n        uint256 _lastDistributionEpoch = lastDistributionEpoch;\\r\\n        uint256 _newDistributionEpoch =\\r\\n            Math.min(getEpoch(block.timestamp), _lastDistributionEpoch + MAXIMUM_EPOCHS);\\r\\n\\r\\n        if (_lastDistributionEpoch < _newDistributionEpoch) {\\r\\n            lastDistributionEpoch = _newDistributionEpoch;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function secondsToEndCurrentEpoch() public view override returns (uint256) {\\r\\n        uint256 epochNumber = block.timestamp.sub(epochStartTime).div(EPOCH_DURATION) + 1;\\r\\n\\r\\n        return epochNumber.mul(EPOCH_DURATION).sub(block.timestamp.sub(epochStartTime));\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 _liquidityAmount) external override {\\r\\n        _addLiquidity(_msgSender(), _liquidityAmount);\\r\\n    }\\r\\n\\r\\n    // function addLiquidityFor(address _liquidityHolderAddr, uint256 _liquidityAmount)\\r\\n    //     external\\r\\n    //     override\\r\\n    //     onlyLiquidityAdders\\r\\n    // {\\r\\n    //     _addLiquidity(_liquidityHolderAddr, _liquidityAmount);\\r\\n    // }\\r\\n\\r\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        require(_stakeSTBLAmount <= _liquidityAmount, \\\"LP: Wrong staking amount\\\");\\r\\n\\r\\n        _addLiquidity(_msgSender(), _liquidityAmount);\\r\\n        bmiCoverStaking.stakeBMIXFrom(_msgSender(), convertSTBLToBMIX(_stakeSTBLAmount));\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(address _liquidityHolderAddr, uint256 _liquidityAmount)\\r\\n        internal\\r\\n        withPremiumsDistribution\\r\\n        updateBMICoverStakingReward\\r\\n    {\\r\\n        require(\\r\\n            totalLiquidity.add(_liquidityAmount) <= maxCapacities,\\r\\n            \\\"LP: amount exceed the max capacities\\\"\\r\\n        );\\r\\n\\r\\n        uint256 stblLiquidity = DecimalsConverter.convertFrom18(_liquidityAmount, stblDecimals);\\r\\n        require(stblLiquidity > 0, \\\"LP: Liquidity amount is zero\\\");\\r\\n\\r\\n        updateEpochsInfo();\\r\\n\\r\\n        stblToken.safeTransferFrom(_liquidityHolderAddr, address(capitalPool), stblLiquidity);\\r\\n\\r\\n        capitalPool.addLeverageProvidersHardSTBL(stblLiquidity);\\r\\n\\r\\n        uint256 _liquidityAmountBMIX = convertSTBLToBMIX(_liquidityAmount);\\r\\n\\r\\n        _mint(_liquidityHolderAddr, _liquidityAmountBMIX);\\r\\n        uint256 liquidity = totalLiquidity.add(_liquidityAmount);\\r\\n        totalLiquidity = liquidity;\\r\\n\\r\\n        liquidityRegistry.tryToAddPolicyBook(_liquidityHolderAddr, address(this));\\r\\n\\r\\n        _reevaluateProvidedLeverageStable(LeveragePortfolio.USERLEVERAGEPOOL, _liquidityAmount);\\r\\n        _updateShieldMining(_liquidityHolderAddr, _liquidityAmountBMIX, false);\\r\\n\\r\\n        emit LiquidityAdded(_liquidityHolderAddr, _liquidityAmount, liquidity);\\r\\n    }\\r\\n\\r\\n    function _updateShieldMining(\\r\\n        address liquidityProvider,\\r\\n        uint256 liquidityAmount,\\r\\n        bool isWithdraw\\r\\n    ) internal {\\r\\n        address policyBookAddress;\\r\\n\\r\\n        for (uint256 i = 0; i < leveragedCoveragePools.length(); i++) {\\r\\n            policyBookAddress = leveragedCoveragePools.at(i);\\r\\n\\r\\n            if (shieldMining.getShieldTokenAddress(policyBookAddress) != address(0)) {\\r\\n                shieldMining.updateTotalSupply(\\r\\n                    policyBookAddress,\\r\\n                    address(this),\\r\\n                    liquidityProvider\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (liquidityProvider != address(0)) {\\r\\n            if (isWithdraw) {\\r\\n                userLiquidity[liquidityProvider] = userLiquidity[liquidityProvider].sub(\\r\\n                    liquidityAmount\\r\\n                );\\r\\n            } else {\\r\\n                userLiquidity[liquidityProvider] = userLiquidity[liquidityProvider].add(\\r\\n                    liquidityAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        (, uint256 newTotalLiquidity) = getNewCoverAndLiquidity();\\r\\n\\r\\n        return convertSTBLToBMIX(Math.min(newTotalLiquidity, _getUserAvailableSTBL(_userAddr)));\\r\\n    }\\r\\n\\r\\n    function _getUserAvailableSTBL(address _userAddr) internal view returns (uint256) {\\r\\n        uint256 availableSTBL =\\r\\n            convertBMIXToSTBL(\\r\\n                balanceOf(_userAddr).add(withdrawalsInfo[_userAddr].withdrawalAmount)\\r\\n            );\\r\\n\\r\\n        return availableSTBL;\\r\\n    }\\r\\n\\r\\n    function getWithdrawalStatus(address _userAddr)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (WithdrawalStatus)\\r\\n    {\\r\\n        uint256 readyToWithdrawDate = withdrawalsInfo[_userAddr].readyToWithdrawDate;\\r\\n\\r\\n        if (readyToWithdrawDate == 0) {\\r\\n            return WithdrawalStatus.NONE;\\r\\n        }\\r\\n\\r\\n        if (block.timestamp < readyToWithdrawDate) {\\r\\n            return WithdrawalStatus.PENDING;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            block.timestamp >= readyToWithdrawDate.add(READY_TO_WITHDRAW_PERIOD) &&\\r\\n            !withdrawalsInfo[_userAddr].withdrawalAllowed\\r\\n        ) {\\r\\n            return WithdrawalStatus.EXPIRED;\\r\\n        }\\r\\n\\r\\n        return WithdrawalStatus.READY;\\r\\n    }\\r\\n\\r\\n    // function requestWithdrawalWithPermit(\\r\\n    //     uint256 _tokensToWithdraw,\\r\\n    //     uint8 _v,\\r\\n    //     bytes32 _r,\\r\\n    //     bytes32 _s\\r\\n    // ) external override {\\r\\n    //     permit(_msgSender(), address(this), _tokensToWithdraw, MAX_INT, _v, _r, _s);\\r\\n\\r\\n    //     requestWithdrawal(_tokensToWithdraw);\\r\\n    // }\\r\\n\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw)\\r\\n        public\\r\\n        override\\r\\n        withPremiumsDistribution\\r\\n    {\\r\\n        WithdrawalStatus _withdrawlStatus = getWithdrawalStatus(msg.sender);\\r\\n        require(\\r\\n            _withdrawlStatus == WithdrawalStatus.NONE ||\\r\\n                _withdrawlStatus == WithdrawalStatus.EXPIRED,\\r\\n            \\\"LP: ongoing withdrawl request\\\"\\r\\n        );\\r\\n\\r\\n        require(_tokensToWithdraw > 0, \\\"LP: Amount is zero\\\");\\r\\n\\r\\n        uint256 _stblTokensToWithdraw = convertBMIXToSTBL(_tokensToWithdraw);\\r\\n        uint256 _availableSTBLBalance = _getUserAvailableSTBL(_msgSender());\\r\\n\\r\\n        require(_availableSTBLBalance >= _stblTokensToWithdraw, \\\"LP: Wrong announced amount\\\");\\r\\n\\r\\n        updateEpochsInfo();\\r\\n\\r\\n        require(totalLiquidity >= _stblTokensToWithdraw, \\\"LP: Not enough free liquidity\\\");\\r\\n\\r\\n        _lockTokens(_msgSender(), _tokensToWithdraw);\\r\\n\\r\\n        uint256 _readyToWithdrawDate = block.timestamp.add(WITHDRAWAL_PERIOD);\\r\\n\\r\\n        withdrawalsInfo[_msgSender()] = WithdrawalInfo(\\r\\n            _tokensToWithdraw,\\r\\n            _readyToWithdrawDate,\\r\\n            false\\r\\n        );\\r\\n\\r\\n        liquidityRegistry.registerWithdrawl(address(this), _msgSender());\\r\\n\\r\\n        emit WithdrawalRequested(_msgSender(), _tokensToWithdraw, _readyToWithdrawDate);\\r\\n    }\\r\\n\\r\\n    function _lockTokens(address _userAddr, uint256 _neededTokensToLock) internal {\\r\\n        uint256 _currentLockedTokens = withdrawalsInfo[_userAddr].withdrawalAmount;\\r\\n\\r\\n        if (_currentLockedTokens > _neededTokensToLock) {\\r\\n            this.transfer(_userAddr, _currentLockedTokens - _neededTokensToLock);\\r\\n        } else if (_currentLockedTokens < _neededTokensToLock) {\\r\\n            this.transferFrom(\\r\\n                _userAddr,\\r\\n                address(this),\\r\\n                _neededTokensToLock - _currentLockedTokens\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unlockTokens() external override {\\r\\n        uint256 _lockedAmount = withdrawalsInfo[_msgSender()].withdrawalAmount;\\r\\n\\r\\n        require(_lockedAmount > 0, \\\"LP: Amount is zero\\\");\\r\\n\\r\\n        this.transfer(_msgSender(), _lockedAmount);\\r\\n        delete withdrawalsInfo[_msgSender()];\\r\\n        liquidityRegistry.removeExpiredWithdrawalRequest(_msgSender(), address(this));\\r\\n    }\\r\\n\\r\\n    function withdrawLiquidity()\\r\\n        external\\r\\n        override\\r\\n        withPremiumsDistribution\\r\\n        updateBMICoverStakingReward\\r\\n    {\\r\\n        require(\\r\\n            getWithdrawalStatus(_msgSender()) == WithdrawalStatus.READY,\\r\\n            \\\"LP: Withdrawal is not ready\\\"\\r\\n        );\\r\\n\\r\\n        updateEpochsInfo();\\r\\n\\r\\n        uint256 liquidity = totalLiquidity;\\r\\n        uint256 _currentWithdrawalAmount = withdrawalsInfo[_msgSender()].withdrawalAmount;\\r\\n        uint256 _tokensToWithdraw =\\r\\n            Math.min(_currentWithdrawalAmount, convertSTBLToBMIX(liquidity));\\r\\n\\r\\n        uint256 _stblTokensToWithdraw = convertBMIXToSTBL(_tokensToWithdraw);\\r\\n\\r\\n        capitalPool.withdrawLiquidity(\\r\\n            _msgSender(),\\r\\n            DecimalsConverter.convertFrom18(_stblTokensToWithdraw, stblDecimals),\\r\\n            true\\r\\n        );\\r\\n\\r\\n        _burn(address(this), _tokensToWithdraw);\\r\\n        liquidity = liquidity.sub(_stblTokensToWithdraw);\\r\\n\\r\\n        _currentWithdrawalAmount = _currentWithdrawalAmount.sub(_tokensToWithdraw);\\r\\n\\r\\n        if (_currentWithdrawalAmount == 0) {\\r\\n            delete withdrawalsInfo[_msgSender()];\\r\\n            liquidityRegistry.tryToRemovePolicyBook(_msgSender(), address(this));\\r\\n        } else {\\r\\n            withdrawalsInfo[_msgSender()].withdrawalAllowed = true;\\r\\n            withdrawalsInfo[_msgSender()].withdrawalAmount = _currentWithdrawalAmount;\\r\\n        }\\r\\n\\r\\n        totalLiquidity = liquidity;\\r\\n\\r\\n        _reevaluateProvidedLeverageStable(\\r\\n            LeveragePortfolio.USERLEVERAGEPOOL,\\r\\n            _stblTokensToWithdraw\\r\\n        );\\r\\n        _updateShieldMining(_msgSender(), _tokensToWithdraw, true);\\r\\n\\r\\n        emit LiquidityWithdrawn(_msgSender(), _stblTokensToWithdraw, liquidity);\\r\\n    }\\r\\n\\r\\n    function updateLiquidity(uint256 _lostLiquidity) external override onlyCapitalPool {\\r\\n        updateEpochsInfo();\\r\\n\\r\\n        uint256 _newLiquidity = totalLiquidity.sub(_lostLiquidity);\\r\\n        totalLiquidity = _newLiquidity;\\r\\n\\r\\n        _reevaluateProvidedLeverageStable(LeveragePortfolio.USERLEVERAGEPOOL, _lostLiquidity);\\r\\n        _updateShieldMining(address(0), _lostLiquidity, true);\\r\\n\\r\\n        emit LiquidityWithdrawn(_msgSender(), _lostLiquidity, _newLiquidity);\\r\\n    }\\r\\n\\r\\n    /// @notice returns APY% with 10**5 precision\\r\\n    function getAPY() public view override returns (uint256) {\\r\\n        uint256 lastEpoch = lastPremiumDistributionEpoch;\\r\\n        uint256 currentEpoch = _getPremiumDistributionEpoch();\\r\\n        int256 premiumDistributionAmount = lastPremiumDistributionAmount;\\r\\n\\r\\n        // simulates addLiquidity()\\r\\n        if (currentEpoch > lastEpoch) {\\r\\n            (premiumDistributionAmount, currentEpoch, ) = _getPremiumsDistribution(\\r\\n                lastEpoch,\\r\\n                currentEpoch\\r\\n            );\\r\\n        }\\r\\n\\r\\n        premiumDistributionAmount += premiumDistributionDeltas[currentEpoch + 1];\\r\\n\\r\\n        return\\r\\n            uint256(premiumDistributionAmount).mul(365).mul(10**7).div(\\r\\n                convertBMIXToSTBL(totalSupply()).add(APY_TOKENS)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Getting number stats, access: ANY\\r\\n    /// @return _maxCapacities is a max liquidity of the pool\\r\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\r\\n    /// @return _totalLeveragedLiquidity is becuase to follow the same function in policy book\\r\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\r\\n    /// @return _annualProfitYields is its APY\\r\\n    /// @return _annualInsuranceCost is becuase to follow the same function in policy book\\r\\n    /// @return  _bmiXRatio is multiplied by 10**18. To get STBL representation\\r\\n    function numberStats()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 _maxCapacities,\\r\\n            uint256 _totalSTBLLiquidity,\\r\\n            uint256 _totalLeveragedLiquidity,\\r\\n            uint256 _stakedSTBL,\\r\\n            uint256 _annualProfitYields,\\r\\n            uint256 _annualInsuranceCost,\\r\\n            uint256 _bmiXRatio\\r\\n        )\\r\\n    {\\r\\n        (, _totalSTBLLiquidity) = getNewCoverAndLiquidity();\\r\\n        _maxCapacities = maxCapacities;\\r\\n        _stakedSTBL = rewardsGenerator.getStakedPolicyBookSTBL(address(this));\\r\\n        _annualProfitYields = getAPY().add(bmiCoverStakingView.getPolicyBookAPY(address(this)));\\r\\n        _annualInsuranceCost = 0;\\r\\n        _totalLeveragedLiquidity = 0;\\r\\n        _bmiXRatio = convertBMIXToSTBL(10**18);\\r\\n    }\\r\\n\\r\\n    /// @notice Getting info, access: ANY\\r\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\r\\n    /// @return _insuredContract is an addres of insured contract\\r\\n    /// @return _contractType is becuase to follow the same function in policy book\\r\\n    /// @return _whitelisted is a state of whitelisting\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            string memory _symbol,\\r\\n            address _insuredContract,\\r\\n            IPolicyBookFabric.ContractType _contractType,\\r\\n            bool _whitelisted\\r\\n        )\\r\\n    {\\r\\n        return (symbol(), address(0), contractType, whitelisted);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/tokens/erc20permit-upgradeable/ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.5 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"../../interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport \\\"./EIP712Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\r\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\nabstract contract ERC20PermitUpgradeable is\\r\\n    Initializable,\\r\\n    ERC20Upgradeable,\\r\\n    IERC20PermitUpgradeable,\\r\\n    EIP712Upgradeable\\r\\n{\\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n\\r\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\r\\n\\r\\n    // solhint-disable-next-line var-name-mixedcase\\r\\n    bytes32 private _PERMIT_TYPEHASH;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\r\\n     *\\r\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\r\\n     */\\r\\n    function __ERC20Permit_init(string memory name) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __EIP712_init_unchained(name, \\\"1\\\");\\r\\n        __ERC20Permit_init_unchained(name);\\r\\n    }\\r\\n\\r\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\r\\n        _PERMIT_TYPEHASH = keccak256(\\r\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Permit-permit}.\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual override {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\r\\n\\r\\n        bytes32 structHash =\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    _PERMIT_TYPEHASH,\\r\\n                    owner,\\r\\n                    spender,\\r\\n                    value,\\r\\n                    _nonces[owner].current(),\\r\\n                    deadline\\r\\n                )\\r\\n            );\\r\\n\\r\\n        bytes32 hash = _hashTypedDataV4(structHash);\\r\\n\\r\\n        address signer = recover(hash, v, r, s);\\r\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\r\\n\\r\\n        _nonces[owner].increment();\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        require(\\r\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n            \\\"ECDSA: invalid signature 's' value\\\"\\r\\n        );\\r\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\r\\n\\r\\n        return signer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Permit-nonces}.\\r\\n     */\\r\\n    function nonces(address owner) public view override returns (uint256) {\\r\\n        return _nonces[owner].current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\r\\n        return _domainSeparatorV4();\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/tokens/erc20permit-upgradeable/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version)\\n        internal\\n        initializer\\n    {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal view virtual returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal view virtual returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/DecimalsConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n/// @notice the intention of this library is to be able to easily convert\\r\\n///     one amount of tokens with N decimal places\\r\\n///     to another amount with M decimal places\\r\\nlibrary DecimalsConverter {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function convert(\\r\\n        uint256 amount,\\r\\n        uint256 baseDecimals,\\r\\n        uint256 destinationDecimals\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (baseDecimals > destinationDecimals) {\\r\\n            amount = amount.div(10**(baseDecimals - destinationDecimals));\\r\\n        } else if (baseDecimals < destinationDecimals) {\\r\\n            amount = amount.mul(10**(destinationDecimals - baseDecimals));\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function convertTo18(uint256 amount, uint256 baseDecimals) internal pure returns (uint256) {\\r\\n        return convert(amount, baseDecimals, 18);\\r\\n    }\\r\\n\\r\\n    function convertFrom18(uint256 amount, uint256 destinationDecimals)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return convert(amount, 18, destinationDecimals);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IUserLeveragePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./IClaimingRegistry.sol\\\";\\r\\nimport \\\"./IPolicyBookFacade.sol\\\";\\r\\n\\r\\ninterface IUserLeveragePool {\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    struct WithdrawalInfo {\\r\\n        uint256 withdrawalAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool withdrawalAllowed;\\r\\n    }\\r\\n\\r\\n    struct BMIMultiplierFactors {\\r\\n        uint256 poolMultiplier;\\r\\n        uint256 leverageProvided;\\r\\n        uint256 multiplier;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _type is type of contract\\r\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\r\\n\\r\\n    function userLiquidity(address account) external view returns (uint256);\\r\\n\\r\\n    function a2_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function EPOCH_DURATION() external view returns (uint256);\\r\\n\\r\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\r\\n\\r\\n    function epochStartTime() external view returns (uint256);\\r\\n\\r\\n    function withdrawalsInfo(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _withdrawalAmount,\\r\\n            uint256 _readyToWithdrawDate,\\r\\n            bool _withdrawalAllowed\\r\\n        );\\r\\n\\r\\n    function __UserLeveragePool_init(\\r\\n        IPolicyBookFabric.ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external;\\r\\n\\r\\n    function getEpoch(uint256 time) external view returns (uint256);\\r\\n\\r\\n    /// @notice get STBL equivalent\\r\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice get BMIX equivalent\\r\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice function to get precise current cover and liquidity\\r\\n    function getNewCoverAndLiquidity()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\r\\n\\r\\n    function updateEpochsInfo() external;\\r\\n\\r\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidity(uint256 _liqudityAmount) external;\\r\\n\\r\\n    // /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\r\\n    // /// @param _liquidityHolderAddr is address of address to assign cover\\r\\n    // /// @param _liqudityAmount is amount of stable coin tokens to secure\\r\\n    // function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\r\\n\\r\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\r\\n\\r\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\r\\n\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\r\\n\\r\\n    // function requestWithdrawalWithPermit(\\r\\n    //     uint256 _tokensToWithdraw,\\r\\n    //     uint8 _v,\\r\\n    //     bytes32 _r,\\r\\n    //     bytes32 _s\\r\\n    // ) external;\\r\\n\\r\\n    function unlockTokens() external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity() external;\\r\\n\\r\\n    function getAPY() external view returns (uint256);\\r\\n\\r\\n    function whitelisted() external view returns (bool);\\r\\n\\r\\n    function whitelist(bool _whitelisted) external;\\r\\n\\r\\n    /// @notice set max total liquidity for the pool\\r\\n    /// @param _maxCapacities uint256 the max total liquidity\\r\\n    function setMaxCapacities(uint256 _maxCapacities) external;\\r\\n\\r\\n    function setA2_ProtocolConstant(uint256 _a2_ProtocolConstant) external;\\r\\n\\r\\n    /// @notice Getting number stats, access: ANY\\r\\n    /// @return _maxCapacities is a max liquidity of the pool\\r\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\r\\n    /// @return _totalLeveragedLiquidity is becuase to follow the same function in policy book\\r\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\r\\n    /// @return _annualProfitYields is its APY\\r\\n    /// @return _annualInsuranceCost is becuase to follow the same function in policy book\\r\\n    /// @return  _bmiXRatio is multiplied by 10**18. To get STBL representation\\r\\n    function numberStats()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _maxCapacities,\\r\\n            uint256 _totalSTBLLiquidity,\\r\\n            uint256 _totalLeveragedLiquidity,\\r\\n            uint256 _stakedSTBL,\\r\\n            uint256 _annualProfitYields,\\r\\n            uint256 _annualInsuranceCost,\\r\\n            uint256 _bmiXRatio\\r\\n        );\\r\\n\\r\\n    /// @notice Getting info, access: ANY\\r\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\r\\n    /// @return _insuredContract is an addres of insured contract\\r\\n    /// @return _contractType is becuase to follow the same function in policy book\\r\\n    /// @return _whitelisted is a state of whitelisting\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _symbol,\\r\\n            address _insuredContract,\\r\\n            IPolicyBookFabric.ContractType _contractType,\\r\\n            bool _whitelisted\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IShieldMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IShieldMining {\\r\\n    struct ShieldMiningInfo {\\r\\n        IERC20 rewardsToken;\\r\\n        uint8 decimals;\\r\\n        uint256 firstBlockWithReward;\\r\\n        uint256 lastBlockWithReward;\\r\\n        uint256 lastUpdateBlock;\\r\\n        uint256 rewardTokensLocked;\\r\\n        uint256 rewardPerTokenStored;\\r\\n        uint256 totalSupply;\\r\\n        uint256[] endsOfDistribution;\\r\\n        // new state post v2\\r\\n        uint256 nearestLastBlocksWithReward;\\r\\n        // lastBlockWithReward => rewardPerBlock\\r\\n        mapping(uint256 => uint256) rewardPerBlock;\\r\\n    }\\r\\n\\r\\n    struct ShieldMiningDeposit {\\r\\n        address policyBook;\\r\\n        uint256 amount;\\r\\n        uint256 duration;\\r\\n        uint256 depositRewardPerBlock;\\r\\n        uint256 startBlock;\\r\\n        uint256 endBlock;\\r\\n    }\\r\\n\\r\\n    /// TODO document SM functions\\r\\n    function blocksWithRewardsPassed(address _policyBook) external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken(address _policyBook) external view returns (uint256);\\r\\n\\r\\n    function earned(\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool,\\r\\n        address _account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function updateTotalSupply(\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool,\\r\\n        address liquidityProvider\\r\\n    ) external;\\r\\n\\r\\n    function associateShieldMining(address _policyBook, address _shieldMiningToken) external;\\r\\n\\r\\n    function fillShieldMining(\\r\\n        address _policyBook,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external;\\r\\n\\r\\n    function getRewardFor(\\r\\n        address _userAddress,\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool\\r\\n    ) external;\\r\\n\\r\\n    function getRewardFor(address _userAddress, address _userLeveragePoolAddress) external;\\r\\n\\r\\n    function getReward(address _policyBook, address _userLeveragePool) external;\\r\\n\\r\\n    function getReward(address _userLeveragePoolAddress) external;\\r\\n\\r\\n    function getShieldTokenAddress(address _policyBook) external view returns (address);\\r\\n\\r\\n    function getShieldMiningInfo(address _policyBook)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _rewardsToken,\\r\\n            uint256 _decimals,\\r\\n            uint256 _firstBlockWithReward,\\r\\n            uint256 _lastBlockWithReward,\\r\\n            uint256 _lastUpdateBlock,\\r\\n            uint256 _nearestLastBlocksWithReward,\\r\\n            uint256 _rewardTokensLocked,\\r\\n            uint256 _rewardPerTokenStored,\\r\\n            uint256 _rewardPerBlock,\\r\\n            uint256 _tokenPerDay,\\r\\n            uint256 _totalSupply\\r\\n        );\\r\\n\\r\\n    function getDepositList(\\r\\n        address _account,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (ShieldMiningDeposit[] memory _depositsList);\\r\\n\\r\\n    function countUsersDeposits(address _account) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewardsGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IRewardsGenerator {\\r\\n    struct PolicyBookRewardInfo {\\r\\n        uint256 rewardMultiplier; // includes 5 decimal places\\r\\n        uint256 totalStaked;\\r\\n        uint256 lastUpdateBlock;\\r\\n        uint256 lastCumulativeSum; // includes 100 percentage\\r\\n        uint256 cumulativeReward; // includes 100 percentage\\r\\n    }\\r\\n\\r\\n    struct StakeRewardInfo {\\r\\n        uint256 lastCumulativeSum; // includes 100 percentage\\r\\n        uint256 cumulativeReward;\\r\\n        uint256 stakeAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice this function is called every time policybook's STBL to bmiX rate changes\\r\\n    function updatePolicyBookShare(uint256 newRewardMultiplier) external;\\r\\n\\r\\n    /// @notice aggregates specified nfts into a single one\\r\\n    function aggregate(\\r\\n        address policyBookAddress,\\r\\n        uint256[] calldata nftIndexes,\\r\\n        uint256 nftIndexTo\\r\\n    ) external;\\r\\n\\r\\n    /// @notice migrates stake from the LegacyRewardsGenerator (will be called once for each user)\\r\\n    /// the rewards multipliers must be set in advance\\r\\n    function migrationStake(\\r\\n        address policyBookAddress,\\r\\n        uint256 nftIndex,\\r\\n        uint256 amount,\\r\\n        uint256 currentReward\\r\\n    ) external;\\r\\n\\r\\n    /// @notice informs generator of stake (rewards)\\r\\n    function stake(\\r\\n        address policyBookAddress,\\r\\n        uint256 nftIndex,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice returns policybook's APY multiplied by 10**5\\r\\n    function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns policybook's RewardMultiplier multiplied by 10**5\\r\\n    function getPolicyBookRewardMultiplier(address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev returns PolicyBook reward per block multiplied by 10**25\\r\\n    function getPolicyBookRewardPerBlock(address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns PolicyBook's staked STBL\\r\\n    function getStakedPolicyBookSTBL(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns NFT's staked STBL\\r\\n    function getStakedNFTSTBL(uint256 nftIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns a reward of NFT\\r\\n    function getReward(address policyBookAddress, uint256 nftIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice informs generator of withdrawal (all funds)\\r\\n    function withdrawFunds(address policyBookAddress, uint256 nftIndex) external returns (uint256);\\r\\n\\r\\n    /// @notice informs generator of withdrawal (rewards)\\r\\n    function withdrawReward(address policyBookAddress, uint256 nftIndex)\\r\\n        external\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IPolicyBookRegistry {\\r\\n    struct PolicyBookStats {\\r\\n        string symbol;\\r\\n        address insuredContract;\\r\\n        IPolicyBookFabric.ContractType contractType;\\r\\n        uint256 maxCapacity;\\r\\n        uint256 totalSTBLLiquidity;\\r\\n        uint256 totalLeveragedLiquidity;\\r\\n        uint256 stakedSTBL;\\r\\n        uint256 APY;\\r\\n        uint256 annualInsuranceCost;\\r\\n        uint256 bmiXRatio;\\r\\n        bool whitelisted;\\r\\n    }\\r\\n\\r\\n    function policyBooksByInsuredAddress(address insuredContract) external view returns (address);\\r\\n\\r\\n    function policyBookFacades(address facadeAddress) external view returns (address);\\r\\n\\r\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\r\\n    function add(\\r\\n        address insuredContract,\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        address policyBook,\\r\\n        address facadeAddress\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\r\\n\\r\\n    /// @notice returns required allowances for the policybooks\\r\\n    function getPoliciesPrices(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\r\\n\\r\\n    /// @notice Buys a batch of policies\\r\\n    function buyPolicyBatch(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Checks if provided address is a PolicyBook\\r\\n    function isPolicyBook(address policyBook) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a policyBookFacade\\r\\n    function isPolicyBookFacade(address _facadeAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a user leverage pool\\r\\n    function isUserLeveragePool(address policyBookAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\r\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function countWhitelisted() external view returns (uint256);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\r\\n    function listByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\r\\n    function list(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\r\\n    function listWithStatsByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\r\\n    function listWithStats(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param policyBooks is list of PolicyBooks addresses\\r\\n    function stats(address[] calldata policyBooks)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Return existing Policy Book contract, access: ANY\\r\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\r\\n    function policyBookFor(address insuredContract) external view returns (address);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param insuredContracts is list of insuredContracts in registry\\r\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IPolicyBook.sol\\\";\\r\\nimport \\\"./ILeveragePortfolio.sol\\\";\\r\\n\\r\\ninterface IPolicyBookFacade {\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\r\\n\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicyFor(\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens\\r\\n    ) external;\\r\\n\\r\\n    function policyBook() external view returns (IPolicyBook);\\r\\n\\r\\n    function userLiquidity(address account) external view returns (uint256);\\r\\n\\r\\n    /// @notice virtual funds deployed by reinsurance pool\\r\\n    function VUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by reinsurance pool\\r\\n    function LUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by user leverage pool\\r\\n    function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\r\\n\\r\\n    /// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\r\\n    function totalLeveragedLiquidity() external view returns (uint256);\\r\\n\\r\\n    function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    function rebalancingThreshold() external view returns (uint256);\\r\\n\\r\\n    function safePricingModel() external view returns (bool);\\r\\n\\r\\n    /// @notice policyBookFacade initializer\\r\\n    /// @param pbProxy polciybook address upgreadable cotnract.\\r\\n    function __PolicyBookFacade_init(\\r\\n        address pbProxy,\\r\\n        address liquidityProvider,\\r\\n        uint256 initialDeposit\\r\\n    ) external;\\r\\n\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributor(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @param _buyer who is buying the coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributorFor(\\r\\n        address _buyer,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidity(uint256 _liquidityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _user the one taht add liquidity\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\r\\n\\r\\n    function addLiquidityAndStakeFor(\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\r\\n    /// @dev access: ANY\\r\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity() external;\\r\\n\\r\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\r\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\r\\n    function deployLeverageFundsAfterRebalance(\\r\\n        uint256 deployedAmount,\\r\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\r\\n    ) external;\\r\\n\\r\\n    /// @notice deploy virtual funds (RP vStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\r\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\r\\n\\r\\n    ///@dev in case ur changed of the pools by commit a claim or policy expired\\r\\n    function reevaluateProvidedLeverageStable() external;\\r\\n\\r\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\r\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\r\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\r\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\r\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\r\\n    function setSafePricingModel(bool _safePricingModel) external;\\r\\n\\r\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\r\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice upserts a withdraw request\\r\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\r\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\r\\n\\r\\n    function listUserLeveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _userLeveragePools);\\r\\n\\r\\n    function countUserLeveragePools() external view returns (uint256);\\r\\n\\r\\n    /// @notice get utilization rate of the pool on chain\\r\\n    function getUtilizationRatioPercentage(bool withLeverage) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPolicyBookFabric {\\r\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE, VARIOUS}\\r\\n\\r\\n    /// @notice Create new Policy Book contract, access: ANY\\r\\n    /// @param _contract is Contract to create policy book for\\r\\n    /// @param _contractType is Contract to create policy book for\\r\\n    /// @param _description is bmiXCover token desription for this policy book\\r\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\r\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\r\\n    /// @return _policyBook is address of created contract\\r\\n    function create(\\r\\n        address _contract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol,\\r\\n        uint256 _initialDeposit,\\r\\n        address _shieldMiningToken\\r\\n    ) external returns (address);\\r\\n\\r\\n    function createLeveragePools(\\r\\n        address _insuranceContract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./IClaimingRegistry.sol\\\";\\r\\nimport \\\"./IPolicyBookFacade.sol\\\";\\r\\n\\r\\ninterface IPolicyBook {\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    struct PolicyHolder {\\r\\n        uint256 coverTokens;\\r\\n        uint256 startEpochNumber;\\r\\n        uint256 endEpochNumber;\\r\\n        uint256 paid;\\r\\n        uint256 reinsurancePrice;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalInfo {\\r\\n        uint256 withdrawalAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool withdrawalAllowed;\\r\\n    }\\r\\n\\r\\n    struct BuyPolicyParameters {\\r\\n        address buyer;\\r\\n        address holder;\\r\\n        uint256 epochsNumber;\\r\\n        uint256 coverTokens;\\r\\n        uint256 distributorFee;\\r\\n        address distributor;\\r\\n    }\\r\\n\\r\\n    function policyHolders(address _holder)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function policyBookFacade() external view returns (IPolicyBookFacade);\\r\\n\\r\\n    function setPolicyBookFacade(address _policyBookFacade) external;\\r\\n\\r\\n    function EPOCH_DURATION() external view returns (uint256);\\r\\n\\r\\n    function stblDecimals() external view returns (uint256);\\r\\n\\r\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\r\\n\\r\\n    function whitelisted() external view returns (bool);\\r\\n\\r\\n    function epochStartTime() external view returns (uint256);\\r\\n\\r\\n    // @TODO: should we let DAO to change contract address?\\r\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _contract is address of covered contract\\r\\n    function insuranceContractAddress() external view returns (address _contract);\\r\\n\\r\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _type is type of contract\\r\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\r\\n\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    function totalCoverTokens() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for user leverage pool\\r\\n    // function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for reinsurance pool\\r\\n    // function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    // function bmiRewardMultiplier() external view returns (uint256);\\r\\n\\r\\n    function withdrawalsInfo(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _withdrawalAmount,\\r\\n            uint256 _readyToWithdrawDate,\\r\\n            bool _withdrawalAllowed\\r\\n        );\\r\\n\\r\\n    function __PolicyBook_init(\\r\\n        address _insuranceContract,\\r\\n        IPolicyBookFabric.ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(bool _whitelisted) external;\\r\\n\\r\\n    function getEpoch(uint256 time) external view returns (uint256);\\r\\n\\r\\n    /// @notice get STBL equivalent\\r\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice get BMIX equivalent\\r\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice submits new claim of the policy book\\r\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice submits new appeal claim of the policy book\\r\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice updates info on claim acceptance\\r\\n    function commitClaim(\\r\\n        address claimer,\\r\\n        uint256 claimAmount,\\r\\n        uint256 claimEndTime,\\r\\n        IClaimingRegistry.ClaimStatus status\\r\\n    ) external;\\r\\n\\r\\n    /// @notice forces an update of RewardsGenerator multiplier\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n\\r\\n    /// @notice function to get precise current cover and liquidity\\r\\n    function getNewCoverAndLiquidity()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\r\\n\\r\\n    /// @notice view function to get precise policy price\\r\\n    /// @param _epochsNumber is number of epochs to cover\\r\\n    /// @param _coverTokens is number of tokens to cover\\r\\n    /// @param _buyer address of the user who buy the policy\\r\\n    /// @return totalSeconds is number of seconds to cover\\r\\n    /// @return totalPrice is the policy price which will pay by the buyer\\r\\n    function getPolicyPrice(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _buyer\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalSeconds,\\r\\n            uint256 totalPrice,\\r\\n            uint256 pricePercentage\\r\\n        );\\r\\n\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _buyer who is transferring funds\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributorFee distributor fee (commission). It can't be greater than PROTOCOL_PERCENTAGE\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicy(\\r\\n        address _buyer,\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        uint256 _distributorFee,\\r\\n        address _distributor\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function updateEpochsInfo() external;\\r\\n\\r\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\r\\n\\r\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\r\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\r\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityBuyerAddr address the one that transfer funds\\r\\n    /// @param _liquidityHolderAddr address the one that owns liquidity\\r\\n    /// @param _liquidityAmount uint256 amount to be added on behalf the sender\\r\\n    /// @param _stakeSTBLAmount uint256 the staked amount if add liq and stake\\r\\n    function addLiquidity(\\r\\n        address _liquidityBuyerAddr,\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\r\\n\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\r\\n\\r\\n    // function requestWithdrawalWithPermit(\\r\\n    //     uint256 _tokensToWithdraw,\\r\\n    //     uint8 _v,\\r\\n    //     bytes32 _r,\\r\\n    //     bytes32 _s\\r\\n    // ) external;\\r\\n\\r\\n    function unlockTokens() external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity(address sender) external returns (uint256);\\r\\n\\r\\n    ///@notice for doing defi hard rebalancing, access: policyBookFacade\\r\\n    function updateLiquidity(uint256 _newLiquidity) external;\\r\\n\\r\\n    function getAPY() external view returns (uint256);\\r\\n\\r\\n    /// @notice Getting user stats, access: ANY\\r\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\r\\n\\r\\n    /// @notice Getting number stats, access: ANY\\r\\n    /// @return _maxCapacities is a max token amount that a user can buy\\r\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\r\\n    /// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\r\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\r\\n    /// @return _annualProfitYields is its APY\\r\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\r\\n    function numberStats()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _maxCapacities,\\r\\n            uint256 _totalSTBLLiquidity,\\r\\n            uint256 _totalLeveragedLiquidity,\\r\\n            uint256 _stakedSTBL,\\r\\n            uint256 _annualProfitYields,\\r\\n            uint256 _annualInsuranceCost,\\r\\n            uint256 _bmiXRatio\\r\\n        );\\r\\n\\r\\n    /// @notice Getting info, access: ANY\\r\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\r\\n    /// @return _insuredContract is an addres of insured contract\\r\\n    /// @return _contractType is a type of insured contract\\r\\n    /// @return _whitelisted is a state of whitelisting\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _symbol,\\r\\n            address _insuredContract,\\r\\n            IPolicyBookFabric.ContractType _contractType,\\r\\n            bool _whitelisted\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILiquidityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ILiquidityRegistry {\\r\\n    struct LiquidityInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 lockedAmount;\\r\\n        uint256 availableAmount;\\r\\n        uint256 bmiXRatio; // multiply availableAmount by this num to get stable coin\\r\\n    }\\r\\n\\r\\n    struct WithdrawalRequestInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 requestAmount;\\r\\n        uint256 requestSTBLAmount;\\r\\n        uint256 availableLiquidity;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        uint256 endWithdrawDate;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalSetInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 requestAmount;\\r\\n        uint256 requestSTBLAmount;\\r\\n        uint256 availableSTBLAmount;\\r\\n    }\\r\\n\\r\\n    function tryToAddPolicyBook(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function tryToRemovePolicyBook(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function removeExpiredWithdrawalRequest(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function getPolicyBooksArrLength(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getPolicyBooksArr(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _resultArr);\\r\\n\\r\\n    function getLiquidityInfos(\\r\\n        address _userAddr,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (LiquidityInfo[] memory _resultArr);\\r\\n\\r\\n    function getWithdrawalRequests(\\r\\n        address _userAddr,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (uint256 _arrLength, WithdrawalRequestInfo[] memory _resultArr);\\r\\n\\r\\n    function getWithdrawalSet(\\r\\n        address _userAddr,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (uint256 _arrLength, WithdrawalSetInfo[] memory _resultArr);\\r\\n\\r\\n    function registerWithdrawl(address _policyBook, address _users) external;\\r\\n\\r\\n    function getAllPendingWithdrawalRequestsAmount()\\r\\n        external\\r\\n        returns (uint256 _totalWithdrawlAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILeveragePortfolioView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ILeveragePortfolio.sol\\\";\\nimport \\\"./IUserLeveragePool.sol\\\";\\n\\ninterface ILeveragePortfolioView {\\n    function calcM(uint256 poolUR, address leveragePoolAddress) external view returns (uint256);\\n\\n    function calcMaxLevFunds(ILeveragePortfolio.LevFundsFactors memory factors)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calcBMIMultiplier(IUserLeveragePool.BMIMultiplierFactors memory factors)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPolicyBookFacade(address _policybookAddress)\\n        external\\n        view\\n        returns (IPolicyBookFacade _coveragePool);\\n\\n    function calcNetMPLn(\\n        ILeveragePortfolio.LeveragePortfolio leveragePoolType,\\n        address _policyBookFacade\\n    ) external view returns (uint256 _netMPLn);\\n\\n    function calcMaxVirtualFunds(address policyBookAddress, uint256 vStableWeight)\\n        external\\n        returns (uint256 _amountToDeploy, uint256 _maxAmount);\\n\\n    function calcvStableFormulaforAllPools() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ILeveragePortfolio {\\r\\n    enum LeveragePortfolio {USERLEVERAGEPOOL, REINSURANCEPOOL}\\r\\n    struct LevFundsFactors {\\r\\n        uint256 netMPL;\\r\\n        uint256 netMPLn;\\r\\n        address policyBookAddr;\\r\\n    }\\r\\n\\r\\n    function targetUR() external view returns (uint256);\\r\\n\\r\\n    function d_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function a_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function max_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\r\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\r\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\r\\n    function deployVirtualStableToCoveragePools() external returns (uint256);\\r\\n\\r\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools : access by owner\\r\\n    /// @param threshold uint256 is the reevaluatation threshold\\r\\n    function setRebalancingThreshold(uint256 threshold) external;\\r\\n\\r\\n    /// @notice set the protocol constant : access by owner\\r\\n    /// @param _targetUR uint256 target utitlization ration\\r\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\r\\n    /// @param  _a1_ProtocolConstant uint256 A1 protocol constant\\r\\n    /// @param _max_ProtocolConstant uint256 the max % included\\r\\n    function setProtocolConstant(\\r\\n        uint256 _targetUR,\\r\\n        uint256 _d_ProtocolConstant,\\r\\n        uint256 _a1_ProtocolConstant,\\r\\n        uint256 _max_ProtocolConstant\\r\\n    ) external;\\r\\n\\r\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\r\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\r\\n    /// @return uint256 M facotr\\r\\n    //function calcM(uint256 poolUR) external returns (uint256);\\r\\n\\r\\n    /// @return uint256 the amount of vStable stored in the pool\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\r\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\r\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\r\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\r\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount) external;\\r\\n\\r\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\r\\n    /// @return _coveragePools a list containing policybook addresses\\r\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _coveragePools);\\r\\n\\r\\n    /// @notice get count of coverage pools which get leveraged\\r\\n    function countleveragedCoveragePools() external view returns (uint256);\\r\\n\\r\\n    function updateLiquidity(uint256 _lostLiquidity) external;\\r\\n\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IContractsRegistry {\\r\\n    function getUniswapRouterContract() external view returns (address);\\r\\n\\r\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\r\\n\\r\\n    function getUniswapBMIToUSDTPairContract() external view returns (address);\\r\\n\\r\\n    function getSushiswapRouterContract() external view returns (address);\\r\\n\\r\\n    function getSushiswapBMIToETHPairContract() external view returns (address);\\r\\n\\r\\n    function getSushiswapBMIToUSDTPairContract() external view returns (address);\\r\\n\\r\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\r\\n\\r\\n    function getWETHContract() external view returns (address);\\r\\n\\r\\n    function getUSDTContract() external view returns (address);\\r\\n\\r\\n    function getBMIContract() external view returns (address);\\r\\n\\r\\n    function getPriceFeedContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookFabricContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingViewContract() external view returns (address);\\r\\n\\r\\n    function getLegacyRewardsGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getRewardsGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getBMIUtilityNFTContract() external view returns (address);\\r\\n\\r\\n    function getNFTStakingContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityBridgeContract() external view returns (address);\\r\\n\\r\\n    function getClaimingRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyRegistryContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityRegistryContract() external view returns (address);\\r\\n\\r\\n    function getClaimVotingContract() external view returns (address);\\r\\n\\r\\n    function getReinsurancePoolContract() external view returns (address);\\r\\n\\r\\n    function getLeveragePortfolioViewContract() external view returns (address);\\r\\n\\r\\n    function getCapitalPoolContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookAdminContract() external view returns (address);\\r\\n\\r\\n    function getPolicyQuoteContract() external view returns (address);\\r\\n\\r\\n    function getLegacyBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getSTKBMIContract() external view returns (address);\\r\\n\\r\\n    function getVBMIContract() external view returns (address);\\r\\n\\r\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\r\\n\\r\\n    function getReputationSystemContract() external view returns (address);\\r\\n\\r\\n    function getAaveProtocolContract() external view returns (address);\\r\\n\\r\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\r\\n\\r\\n    function getAaveATokenContract() external view returns (address);\\r\\n\\r\\n    function getCompoundProtocolContract() external view returns (address);\\r\\n\\r\\n    function getCompoundCTokenContract() external view returns (address);\\r\\n\\r\\n    function getCompoundComptrollerContract() external view returns (address);\\r\\n\\r\\n    function getYearnProtocolContract() external view returns (address);\\r\\n\\r\\n    function getYearnVaultContract() external view returns (address);\\r\\n\\r\\n    function getYieldGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getShieldMiningContract() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IClaimingRegistry {\\r\\n    enum ClaimStatus {\\r\\n        CAN_CLAIM,\\r\\n        UNCLAIMABLE,\\r\\n        PENDING,\\r\\n        AWAITING_CALCULATION,\\r\\n        REJECTED_CAN_APPEAL,\\r\\n        REJECTED,\\r\\n        ACCEPTED\\r\\n    }\\r\\n\\r\\n    struct ClaimInfo {\\r\\n        address claimer;\\r\\n        address policyBookAddress;\\r\\n        string evidenceURI;\\r\\n        uint256 dateSubmitted;\\r\\n        uint256 dateEnded;\\r\\n        bool appeal;\\r\\n        ClaimStatus status;\\r\\n        uint256 claimAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice returns anonymous voting duration\\r\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns the whole voting duration\\r\\n    function votingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\r\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\r\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice submits new PolicyBook claim for the user\\r\\n    function submitClaim(\\r\\n        address user,\\r\\n        address policyBookAddress,\\r\\n        string calldata evidenceURI,\\r\\n        uint256 cover,\\r\\n        bool appeal\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim with this index exists\\r\\n    function claimExists(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns claim submition time\\r\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim end time or zero in case it is pending\\r\\n    function claimEndTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is anonymously votable\\r\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if the claim is exposably votable\\r\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\r\\n    function isClaimVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if a claim can be calculated by anyone\\r\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if this claim is pending or awaiting\\r\\n    function isClaimPending(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns how many claims the holder has\\r\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many pending claims are there\\r\\n    function countPendingClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many claims are there\\r\\n    function countClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\r\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns pending claim index by its ordinal index\\r\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim index by its ordinal index\\r\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns current active claim index by policybook and claimer\\r\\n    function claimIndex(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is appealed\\r\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function policyStatus(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns the claim owner (claimer)\\r\\n    function claimOwner(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns the claim PolicyBook\\r\\n    function claimPolicyBook(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns claim info by its index\\r\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\r\\n\\r\\n    function getAllPendingClaimsAmount() external view returns (uint256 _totalClaimsAmount);\\r\\n\\r\\n    function getClaimableAmounts(uint256[] memory _claimIndexes) external view returns (uint256);\\r\\n\\r\\n    /// @notice marks the user's claim as Accepted\\r\\n    function acceptClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice marks the user's claim as Rejected\\r\\n    function rejectClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\r\\n    ///         or offensive.\\r\\n    /// @dev Only the owner of the PolicyBookAdmin can erase/update evidenceUri.\\r\\n    /// @param _claimIndex Claim Index that is going to be updated\\r\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\r\\n    function updateImageUriOfClaim(uint256 _claimIndex, string calldata _newEvidenceURI) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ICapitalPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFacade.sol\\\";\\r\\n\\r\\ninterface ICapitalPool {\\r\\n    struct PremiumFactors {\\r\\n        uint256 epochsNumber;\\r\\n        uint256 premiumPrice;\\r\\n        uint256 vStblDeployedByRP;\\r\\n        uint256 vStblOfCP;\\r\\n        uint256 poolUtilizationRation;\\r\\n        uint256 premiumPerDeployment;\\r\\n        uint256 userLeveragePoolsCount;\\r\\n        IPolicyBookFacade policyBookFacade;\\r\\n    }\\r\\n\\r\\n    enum PoolType {COVERAGE, LEVERAGE, REINSURANCE}\\r\\n\\r\\n    function virtualUsdtAccumulatedBalance() external view returns (uint256);\\r\\n\\r\\n    function liquidityCushionBalance() external view returns (uint256);\\r\\n\\r\\n    /// @notice distributes the policybook premiums into pools (CP, ULP , RP)\\r\\n    /// @dev distributes the balances acording to the established percentages\\r\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\r\\n    /// @param _epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\r\\n    /// @param _protocolFee uint256 the amount of protocol fee earned by premium\\r\\n    function addPolicyHoldersHardSTBL(\\r\\n        uint256 _stblAmount,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _protocolFee\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @notice distributes the hardSTBL from the coverage providers\\r\\n    /// @dev emits PoolBalancedUpdated event\\r\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\r\\n    function addCoverageProvidersHardSTBL(uint256 _stblAmount) external;\\r\\n\\r\\n    /// @notice distributes the hardSTBL from the leverage providers\\r\\n    /// @dev emits PoolBalancedUpdated event\\r\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\r\\n    function addLeverageProvidersHardSTBL(uint256 _stblAmount) external;\\r\\n\\r\\n    /// @notice distributes the hardSTBL from the reinsurance pool\\r\\n    /// @dev emits PoolBalancedUpdated event\\r\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\r\\n    function addReinsurancePoolHardSTBL(uint256 _stblAmount) external;\\r\\n\\r\\n    /// @notice rebalances pools acording to v2 specification and dao enforced policies\\r\\n    /// @dev  emits PoolBalancesUpdated\\r\\n    function rebalanceLiquidityCushion() external;\\r\\n\\r\\n    /// @notice Fullfils policybook claims by transfering the balance to claimer\\r\\n    /// @param _claimer, address of the claimer recieving the withdraw\\r\\n    /// @param _stblAmount uint256 amount to be withdrawn\\r\\n    function fundClaim(address _claimer, uint256 _stblAmount) external;\\r\\n\\r\\n    /// @notice Withdraws liquidity from a specific policbybook to the user\\r\\n    /// @param _sender, address of the user beneficiary of the withdraw\\r\\n    /// @param _stblAmount uint256 amount to be withdrawn\\r\\n    /// @param _isLeveragePool bool wether the pool is ULP or CP(policybook)\\r\\n    function withdrawLiquidity(\\r\\n        address _sender,\\r\\n        uint256 _stblAmount,\\r\\n        bool _isLeveragePool\\r\\n    ) external;\\r\\n\\r\\n    function rebalanceDuration() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBMICoverStakingView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBMICoverStaking.sol\\\";\\r\\n\\r\\ninterface IBMICoverStakingView {\\r\\n    function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    function policyBookByNFT(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function stakingInfoByStaker(\\r\\n        address staker,\\r\\n        address[] calldata policyBooksAddresses,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IBMICoverStaking.PolicyBookInfo[] memory policyBooksInfo,\\r\\n            IBMICoverStaking.UserInfo[] memory usersInfo,\\r\\n            uint256[] memory nftsCount,\\r\\n            IBMICoverStaking.NFTsInfo[][] memory nftsInfo\\r\\n        );\\r\\n\\r\\n    function stakingInfoByToken(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (IBMICoverStaking.StakingInfo memory);\\r\\n\\r\\n    // Not Migratable\\r\\n    // function totalStaked(address user) external view returns (uint256);\\r\\n    // function totalStakedSTBL(address user) external view returns (uint256);\\r\\n    // function getStakerBMIProfit(address staker, address policyBookAddress, uint256 offset, uint256 limit) external view returns (uint256) ;\\r\\n    // function getSlashedBMIProfit(uint256 tokenId) external view returns (uint256);\\r\\n    // function getBMIProfit(uint256 tokenId) external view returns (uint256);\\r\\n    // function uri(uint256 tokenId) external view returns (string memory);\\r\\n    // function tokenOfOwnerByIndex(address user, uint256 index) external view returns (uint256);\\r\\n    // function ownerOf(uint256 tokenId) external view returns (address);\\r\\n    // function getSlashingPercentage() external view returns (uint256);\\r\\n    // function getSlashedStakerBMIProfit( address staker, address policyBookAddress, uint256 offset, uint256 limit) external view returns (uint256 totalProfit) ;\\r\\n    // function balanceOf(address user) external view returns (uint256);\\r\\n    // function _aggregateForEach( address staker, address policyBookAddress, uint256 offset, uint256 limit, function(uint256) view returns (uint256) func) internal view returns (uint256 total);\\r\\n    // function stakedByNFT(uint256 tokenId) external view returns (uint256);\\r\\n    // function stakedSTBLByNFT(uint256 tokenId) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBMICoverStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IBMICoverStaking {\\r\\n    struct StakingInfo {\\r\\n        address policyBookAddress;\\r\\n        uint256 stakedBMIXAmount;\\r\\n    }\\r\\n\\r\\n    struct PolicyBookInfo {\\r\\n        uint256 totalStakedSTBL;\\r\\n        uint256 rewardPerBlock;\\r\\n        uint256 stakingAPY;\\r\\n        uint256 liquidityAPY;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 totalStakedBMIX;\\r\\n        uint256 totalStakedSTBL;\\r\\n        uint256 totalBmiReward;\\r\\n    }\\r\\n\\r\\n    struct NFTsInfo {\\r\\n        uint256 nftIndex;\\r\\n        string uri;\\r\\n        uint256 stakedBMIXAmount;\\r\\n        uint256 stakedSTBLAmount;\\r\\n        uint256 reward;\\r\\n    }\\r\\n\\r\\n    function aggregateNFTs(address policyBookAddress, uint256[] calldata tokenIds) external;\\r\\n\\r\\n    function stakeBMIX(uint256 amount, address policyBookAddress) external;\\r\\n\\r\\n    function stakeBMIXWithPermit(\\r\\n        uint256 bmiXAmount,\\r\\n        address policyBookAddress,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function stakeBMIXFrom(address user, uint256 amount) external;\\r\\n\\r\\n    function stakeBMIXFromWithPermit(\\r\\n        address user,\\r\\n        uint256 bmiXAmount,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // mappings\\r\\n\\r\\n    function _stakersPool(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (address policyBookAddress, uint256 stakedBMIXAmount);\\r\\n\\r\\n    // function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    function restakeBMIProfit(uint256 tokenId) external;\\r\\n\\r\\n    function restakeStakerBMIProfit(address policyBookAddress) external;\\r\\n\\r\\n    function withdrawBMIProfit(uint256 tokenID) external;\\r\\n\\r\\n    function withdrawStakerBMIProfit(address policyBookAddress) external;\\r\\n\\r\\n    function withdrawFundsWithProfit(uint256 tokenID) external;\\r\\n\\r\\n    function withdrawStakerFundsWithProfit(address policyBookAddress) external;\\r\\n\\r\\n    function getSlashedBMIProfit(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function getBMIProfit(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function getSlashedStakerBMIProfit(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (uint256 totalProfit);\\r\\n\\r\\n    function getStakerBMIProfit(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (uint256 totalProfit);\\r\\n\\r\\n    function totalStaked(address user) external view returns (uint256);\\r\\n\\r\\n    function totalStakedSTBL(address user) external view returns (uint256);\\r\\n\\r\\n    function stakedByNFT(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function stakedSTBLByNFT(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function uri(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function tokenOfOwnerByIndex(address user, uint256 index) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/abstract/AbstractLeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/DecimalsConverter.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IPolicyBookRegistry.sol\\\";\\r\\nimport \\\"../interfaces/ILeveragePortfolio.sol\\\";\\r\\nimport \\\"../interfaces/IPolicyBookFabric.sol\\\";\\r\\nimport \\\"../interfaces/IPolicyBook.sol\\\";\\r\\nimport \\\"../interfaces/ICapitalPool.sol\\\";\\r\\nimport \\\"../interfaces/ILeveragePortfolioView.sol\\\";\\r\\n\\r\\nimport \\\"./AbstractDependant.sol\\\";\\r\\n\\r\\nimport \\\"../Globals.sol\\\";\\r\\n\\r\\nabstract contract AbstractLeveragePortfolio is\\r\\n    ILeveragePortfolio,\\r\\n    Initializable,\\r\\n    AbstractDependant\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using Math for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    ICapitalPool public capitalPool;\\r\\n    IPolicyBookRegistry public policyBookRegistry;\\r\\n    ILeveragePortfolioView public leveragePortfolioView;\\r\\n\\r\\n    address public policyBookAdmin;\\r\\n\\r\\n    address public reinsurancePoolAddress;\\r\\n\\r\\n    uint256 public override targetUR;\\r\\n    uint256 public override d_ProtocolConstant;\\r\\n    uint256 public override a_ProtocolConstant;\\r\\n    uint256 public override max_ProtocolConstant;\\r\\n\\r\\n    uint256 public override totalLiquidity;\\r\\n    uint256 public rebalancingThreshold;\\r\\n\\r\\n    mapping(address => uint256) public poolsLDeployedAmount;\\r\\n    mapping(address => uint256) public poolsVDeployedAmount;\\r\\n    EnumerableSet.AddressSet internal leveragedCoveragePools;\\r\\n\\r\\n    event LeverageStableDeployed(address policyBook, uint256 deployedAmount);\\r\\n    event VirtualStableDeployed(address policyBook, uint256 deployedAmount);\\r\\n    event ProvidedLeverageReevaluated(LeveragePortfolio leveragePool);\\r\\n    event PremiumAdded(uint256 premiumAmount);\\r\\n    event LiquidityWithdrawn(\\r\\n        address _liquidityHolder,\\r\\n        uint256 _tokensToWithdraw,\\r\\n        uint256 _newTotalLiquidity\\r\\n    );\\r\\n\\r\\n    modifier onlyPolicyBookFacade() {\\r\\n        require(policyBookRegistry.isPolicyBookFacade(msg.sender), \\\"LP: No access\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCapitalPool() {\\r\\n        require(msg.sender == address(capitalPool), \\\"LP: No access\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicyBookAdmin() {\\r\\n        require(msg.sender == policyBookAdmin, \\\"LP: Not a PBA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __LeveragePortfolio_init() internal initializer {\\r\\n        a_ProtocolConstant = 100 * PRECISION;\\r\\n        d_ProtocolConstant = 5 * PRECISION;\\r\\n        targetUR = 45 * PRECISION;\\r\\n        max_ProtocolConstant = PERCENTAGE_100;\\r\\n        rebalancingThreshold = DEFAULT_REBALANCING_THRESHOLD;\\r\\n    }\\r\\n\\r\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\r\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\r\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\r\\n        external\\r\\n        override\\r\\n        onlyPolicyBookFacade\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            _deployLeverageStableToCoveragePools(\\r\\n                leveragePoolType,\\r\\n                address((IPolicyBookFacade(msg.sender)).policyBook())\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\r\\n    /// @return the amount of vstable to deploy\\r\\n    function deployVirtualStableToCoveragePools()\\r\\n        external\\r\\n        override\\r\\n        onlyPolicyBookFacade\\r\\n        returns (uint256)\\r\\n    {\\r\\n        address policyBookAddr = address((IPolicyBookFacade(msg.sender)).policyBook());\\r\\n\\r\\n        return _deployVirtualStableToCoveragePools(policyBookAddr, 0);\\r\\n    }\\r\\n\\r\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\r\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\r\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for , zero for RP\\r\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\r\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount)\\r\\n        external\\r\\n        virtual\\r\\n        override;\\r\\n\\r\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools\\r\\n    /// @param _threshold uint256 is the reevaluatation threshold\\r\\n    function setRebalancingThreshold(uint256 _threshold) external override onlyPolicyBookAdmin {\\r\\n        rebalancingThreshold = _threshold;\\r\\n    }\\r\\n\\r\\n    /// @notice set the protocol constant\\r\\n    /// @notice set the protocol constant : access by owner\\r\\n    /// @param _targetUR uint256 target utitlization ration\\r\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\r\\n    /// @param  _a1_ProtocolConstant uint256 A1 protocol constant\\r\\n    /// @param _max_ProtocolConstant uint256 the max % included\\r\\n    function setProtocolConstant(\\r\\n        uint256 _targetUR,\\r\\n        uint256 _d_ProtocolConstant,\\r\\n        uint256 _a1_ProtocolConstant,\\r\\n        uint256 _max_ProtocolConstant\\r\\n    ) external override onlyPolicyBookAdmin {\\r\\n        targetUR = _targetUR;\\r\\n        d_ProtocolConstant = _d_ProtocolConstant;\\r\\n        a_ProtocolConstant = _a1_ProtocolConstant;\\r\\n        max_ProtocolConstant = _max_ProtocolConstant;\\r\\n    }\\r\\n\\r\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\r\\n    /// @return _coveragePools a list containing policybook addresses\\r\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _coveragePools)\\r\\n    {\\r\\n        uint256 to = (offset.add(limit)).min(leveragedCoveragePools.length()).max(offset);\\r\\n\\r\\n        _coveragePools = new address[](to - offset);\\r\\n\\r\\n        for (uint256 i = offset; i < to; i++) {\\r\\n            _coveragePools[i - offset] = leveragedCoveragePools.at(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice get count of coverage pools which get leveraged\\r\\n    function countleveragedCoveragePools() external view override returns (uint256) {\\r\\n        return leveragedCoveragePools.length();\\r\\n    }\\r\\n\\r\\n    function _deployVirtualStableToCoveragePools(address policyBookAddress, uint256 vStableWeight)\\r\\n        internal\\r\\n        returns (uint256 deployedAmount)\\r\\n    {\\r\\n        if (vStableWeight == 0) {\\r\\n            vStableWeight = leveragePortfolioView.calcvStableFormulaforAllPools();\\r\\n        }\\r\\n        (uint256 _amountToDeploy, uint256 _maxAmount) =\\r\\n            leveragePortfolioView.calcMaxVirtualFunds(policyBookAddress, vStableWeight);\\r\\n\\r\\n        if (_amountToDeploy > _maxAmount) {\\r\\n            deployedAmount = _maxAmount;\\r\\n        } else {\\r\\n            deployedAmount = _amountToDeploy;\\r\\n        }\\r\\n\\r\\n        if (deployedAmount > 0) {\\r\\n            poolsVDeployedAmount[policyBookAddress] = deployedAmount;\\r\\n            leveragedCoveragePools.add(policyBookAddress);\\r\\n        }\\r\\n\\r\\n        emit VirtualStableDeployed(policyBookAddress, deployedAmount);\\r\\n    }\\r\\n\\r\\n    /// @dev using two formulas , if formula 1 get zero then use the formula 2\\r\\n    /// otherwise get the min value of both\\r\\n    /// calculate the net mpl for the other pool RP or LP\\r\\n    function _deployLeverageStableToCoveragePools(\\r\\n        LeveragePortfolio leveragePoolType,\\r\\n        address policyBookAddress\\r\\n    ) internal returns (uint256 deployedAmount) {\\r\\n        IPolicyBookFacade _policyBookFacade =\\r\\n            leveragePortfolioView.getPolicyBookFacade(policyBookAddress);\\r\\n\\r\\n        uint256 _netMPL;\\r\\n        uint256 _netMPLn;\\r\\n        if (leveragePoolType == LeveragePortfolio.USERLEVERAGEPOOL) {\\r\\n            _netMPL = totalLiquidity.mul(_policyBookFacade.userleveragedMPL()).div(PERCENTAGE_100);\\r\\n\\r\\n            _netMPLn = _netMPLn.add(\\r\\n                ILeveragePortfolio(reinsurancePoolAddress)\\r\\n                    .totalLiquidity()\\r\\n                    .mul(_policyBookFacade.reinsurancePoolMPL())\\r\\n                    .div(PERCENTAGE_100)\\r\\n            );\\r\\n        } else {\\r\\n            _netMPL = totalLiquidity.mul(_policyBookFacade.reinsurancePoolMPL()).div(\\r\\n                PERCENTAGE_100\\r\\n            );\\r\\n        }\\r\\n        _netMPLn = _netMPLn.add(\\r\\n            leveragePortfolioView.calcNetMPLn(leveragePoolType, address(_policyBookFacade))\\r\\n        );\\r\\n\\r\\n        deployedAmount = leveragePortfolioView.calcMaxLevFunds(\\r\\n            LevFundsFactors(_netMPL, _netMPLn, policyBookAddress)\\r\\n        );\\r\\n\\r\\n        if (deployedAmount > 0) {\\r\\n            if (deployedAmount >= poolsVDeployedAmount[policyBookAddress]) {\\r\\n                deployedAmount = deployedAmount.sub(poolsVDeployedAmount[policyBookAddress]);\\r\\n            }\\r\\n\\r\\n            leveragedCoveragePools.add(policyBookAddress);\\r\\n        } else {\\r\\n            leveragedCoveragePools.remove(policyBookAddress);\\r\\n        }\\r\\n        poolsLDeployedAmount[policyBookAddress] = deployedAmount.add(\\r\\n            poolsVDeployedAmount[policyBookAddress]\\r\\n        );\\r\\n\\r\\n        emit LeverageStableDeployed(policyBookAddress, deployedAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice reevaluate all pools provided by the leverage stable upon threshold\\r\\n    /// @param leveragePool LeveragePortfolio is determine the pool which call the function\\r\\n    /// @param newAmount the new amount added or subtracted from the pool\\r\\n    function _reevaluateProvidedLeverageStable(LeveragePortfolio leveragePool, uint256 newAmount)\\r\\n        internal\\r\\n    {\\r\\n        uint256 _newAmountPercentage;\\r\\n        if (totalLiquidity > 0) {\\r\\n            _newAmountPercentage = newAmount.mul(PERCENTAGE_100).div(totalLiquidity);\\r\\n        }\\r\\n        if (\\r\\n            (totalLiquidity > 0 && _newAmountPercentage > rebalancingThreshold) ||\\r\\n            totalLiquidity == 0\\r\\n        ) {\\r\\n            _rebalanceInvestedPools(leveragePool);\\r\\n\\r\\n            emit ProvidedLeverageReevaluated(leveragePool);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice rebalance all pools provided by the leverage stable or virtual stable\\r\\n    /// @param leveragePool LeveragePortfolio is determine the pool which call the function\\r\\n    function _rebalanceInvestedPools(LeveragePortfolio leveragePool) internal {\\r\\n        uint256 vStableWeight;\\r\\n        if (leveragePool == LeveragePortfolio.REINSURANCEPOOL) {\\r\\n            vStableWeight = leveragePortfolioView.calcvStableFormulaforAllPools();\\r\\n        }\\r\\n        address policyBookAddress;\\r\\n\\r\\n        IPolicyBookFacade _policyBookFacade;\\r\\n        for (uint256 i = 0; i < leveragedCoveragePools.length(); i++) {\\r\\n            policyBookAddress = leveragedCoveragePools.at(i);\\r\\n\\r\\n            _policyBookFacade = leveragePortfolioView.getPolicyBookFacade(policyBookAddress);\\r\\n            uint256 deployedAmount;\\r\\n            if (leveragePool == LeveragePortfolio.REINSURANCEPOOL) {\\r\\n                deployedAmount = _deployVirtualStableToCoveragePools(\\r\\n                    policyBookAddress,\\r\\n                    vStableWeight\\r\\n                );\\r\\n\\r\\n                _policyBookFacade.deployVirtualFundsAfterRebalance(deployedAmount);\\r\\n            }\\r\\n\\r\\n            deployedAmount = _deployLeverageStableToCoveragePools(leveragePool, policyBookAddress);\\r\\n            _policyBookFacade.deployLeverageFundsAfterRebalance(deployedAmount, leveragePool);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateLiquidity(uint256 _lostLiquidity) external virtual override;\\r\\n\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external virtual override;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\r\\nuint256 constant DAYS_IN_THE_YEAR = 365;\\r\\nuint256 constant MAX_INT = type(uint256).max;\\r\\n\\r\\nuint256 constant DECIMALS18 = 10**18;\\r\\n\\r\\nuint256 constant PRECISION = 10**25;\\r\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\r\\n\\r\\nuint256 constant BLOCKS_PER_DAY = 6450;\\r\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\r\\n\\r\\nuint256 constant APY_TOKENS = DECIMALS18;\\r\\n\\r\\nuint256 constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\r\\n\\r\\nuint256 constant DEFAULT_REBALANCING_THRESHOLD = 10**23;\\r\\n\\r\\nuint256 constant EPOCH_DAYS_AMOUNT = 7;\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary CountersUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyBook\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deployedAmount\",\"type\":\"uint256\"}],\"name\":\"LeverageStableDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"}],\"name\":\"PremiumAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ILeveragePortfolio.LeveragePortfolio\",\"name\":\"leveragePool\",\"type\":\"uint8\"}],\"name\":\"ProvidedLeverageReevaluated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyBook\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deployedAmount\",\"type\":\"uint256\"}],\"name\":\"VirtualStableDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_readyToWithdrawDate\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPOCH_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PREMIUM_DISTRIBUTION_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREMIUM_DISTRIBUTION_EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READY_TO_WITHDRAW_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIRTUAL_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"_contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectSymbol\",\"type\":\"string\"}],\"name\":\"__UserLeveragePool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a2_ProtocolConstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a_ProtocolConstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSTBLAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"}],\"name\":\"addPolicyPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiCoverStaking\",\"outputs\":[{\"internalType\":\"contract IBMICoverStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiCoverStakingView\",\"outputs\":[{\"internalType\":\"contract IBMICoverStakingView\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPool\",\"outputs\":[{\"internalType\":\"contract ICapitalPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertBMIXToSTBL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertSTBLToBMIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countleveragedCoveragePools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"d_ProtocolConstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILeveragePortfolio.LeveragePortfolio\",\"name\":\"leveragePoolType\",\"type\":\"uint8\"}],\"name\":\"deployLeverageStableToCoveragePools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployVirtualStableToCoveragePools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUpdateBMICoverStakingRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getAvailableBMIXWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewCoverAndLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalCoverTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTotalLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getWithdrawalStatus\",\"outputs\":[{\"internalType\":\"enum IUserLeveragePool.WithdrawalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"_contractType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistributionEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPremiumDistributionAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPremiumDistributionEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leveragePortfolioView\",\"outputs\":[{\"internalType\":\"contract ILeveragePortfolioView\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRegistry\",\"outputs\":[{\"internalType\":\"contract ILiquidityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listleveragedCoveragePools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_coveragePools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapacities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_ProtocolConstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCapacities\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLeveragedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualProfitYields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bmiXRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsLDeployedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsVDeployedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumDistributionDeltas\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsGenerator\",\"outputs\":[{\"internalType\":\"contract IRewardsGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToEndCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a2_ProtocolConstant\",\"type\":\"uint256\"}],\"name\":\"setA2_ProtocolConstant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCapacities\",\"type\":\"uint256\"}],\"name\":\"setMaxCapacities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_d_ProtocolConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_a1_ProtocolConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_ProtocolConstant\",\"type\":\"uint256\"}],\"name\":\"setProtocolConstant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRebalancingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldMining\",\"outputs\":[{\"internalType\":\"contract IShieldMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEpochsInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lostLiquidity\",\"type\":\"uint256\"}],\"name\":\"updateLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"readyToWithdrawDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawalAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UserLeveragePool", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}