{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-05-27\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return safeSub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract EthereumGold is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => bool) private _blacklist;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _amount;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event PutToBlacklist(address indexed target, bool indexed status);\r\n\r\n    constructor () {\r\n        _name = \"Doge Inu\";\r\n        _symbol = \"DINU\";\r\n        _amount = 1 * 10**12 * 10**18;\r\n        _decimals = 18;\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _mint(msgSender, _amount);\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function isBlackList(address account) public view returns (bool) {\r\n        return _blacklist[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address funder, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[funder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].safeSub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function blacklistTarget(address payable targetaddress) public onlyOwner returns (bool){\r\n        require(targetaddress != address(0), \"ERC20: Can't blacklist zero address\");\r\n        require(_blacklist[targetaddress] == false, \"ERC20: Address already in blacklist\");\r\n        _blacklist[targetaddress] = true;\r\n        emit PutToBlacklist(targetaddress, true);\r\n        return true;\r\n    }\r\n    \r\n    function unblacklistTarget(address payable targetaddress) public onlyOwner returns (bool){\r\n        require(targetaddress != address(0), \"ERC20: Can't blacklist zero address\");\r\n        require(_blacklist[targetaddress] == true, \"ERC20: Address not blacklisted\");\r\n\r\n        _blacklist[targetaddress] = false;\r\n        emit PutToBlacklist(targetaddress, false);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_blacklist[sender] == false, \"ERC20: sender address \");\r\n        _balances[sender] = _balances[sender].safeSub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].safeAdd(amount);\r\n    \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address funder, address spender, uint256 amount) internal virtual {\r\n        require(funder != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[funder][spender] = amount;\r\n        emit Approval(funder, spender, amount);\r\n    }\r\n    \r\n      function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.safeAdd(amount);\r\n        _balances[account] = _balances[account].safeAdd(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n}", "ABI": "[]", "ContractName": "SafeMath", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://101b288f6f7d8226b220769eb023041970dcca7624056f19cdea26f58359f9f9"}]}