{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/*******************************************************\r\n *                      Interfaces\r\n *******************************************************/\r\ninterface IAllowlist {\r\n  function initialize(string memory, address) external;\r\n}\r\n\r\n/*******************************************************\r\n *                   Main Contract Logic\r\n *******************************************************/\r\ncontract AllowlistFactory {\r\n  address public allowlistTemplateAddress;\r\n\r\n  constructor(address _allowlistTemplateAddress) {\r\n    allowlistTemplateAddress = _allowlistTemplateAddress;\r\n  }\r\n\r\n  /**\r\n   * @notice Clone and initialize a new allowlist\r\n   * @param allowlistName The name of the allowlist (cannot be changed)\r\n   * @param ownerAddress The address of the new allowlist owner\r\n   * @return allowlistAddress The address of the new allowlist\r\n   */\r\n  function cloneAllowlist(string memory allowlistName, address ownerAddress)\r\n    public\r\n    returns (address allowlistAddress)\r\n  {\r\n    allowlistAddress = _cloneAllowlist();\r\n    IAllowlist(allowlistAddress).initialize(allowlistName, ownerAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Clone and initialize a new allowlist, setting owner to self\r\n   * @param allowlistName The name of the allowlist (cannot be changed)\r\n   * @return allowlistAddress The address of the new allowlist\r\n   */\r\n  function cloneAllowlist(string memory allowlistName)\r\n    public\r\n    returns (address allowlistAddress)\r\n  {\r\n    allowlistAddress = _cloneAllowlist();\r\n    IAllowlist(allowlistAddress).initialize(allowlistName, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Clones the allowlist using EIP-1167 template during new protocol registration\r\n   */\r\n  function _cloneAllowlist() internal returns (address allowlistAddress) {\r\n    bytes20 templateAddress = bytes20(allowlistTemplateAddress);\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(\r\n        clone,\r\n        0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n      )\r\n      mstore(add(clone, 0x14), templateAddress)\r\n      mstore(\r\n        add(clone, 0x28),\r\n        0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n      )\r\n      allowlistAddress := create(0, clone, 0x37)\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowlistTemplateAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allowlistTemplateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"allowlistName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"cloneAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"allowlistAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"allowlistName\",\"type\":\"string\"}],\"name\":\"cloneAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"allowlistAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AllowlistFactory", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004c87e89c1215f92e9f48c1ae2201351ce7170f01", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66f961410ac6e98aef64ca28e682d6c342b6d2412869853a2664ee579d1a3cb5"}]}