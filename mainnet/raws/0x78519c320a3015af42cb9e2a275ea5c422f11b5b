{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vote/VeBend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\n/***\\n *@title VeBend\\n *@notice Votes have a weight depending on time, so that users are\\n *        committed to the future of (whatever they are voting for)\\n *@dev Vote weight decays linearly over time. Lock time cannot be\\n *     more than `MAXTIME` (4 years).\\n */\\n\\n// Voting escrow to have time-weighted votes\\n// Votes have a weight depending on time, so that users are committed\\n// to the future of (whatever they are voting for).\\n// The weight in this implementation is linear, and lock cannot be more than maxtime\\n// w ^\\n// 1 +        /\\n//   |      /\\n//   |    /\\n//   |  /\\n//   |/\\n// 0 +--------+------> time\\n//       maxtime (4 years?)\\n\\n// Interface for checking whether address belongs to a whitelisted\\n// type of a smart wallet.\\n// When new types are added - the whole contract is changed\\n// The check() method is modifying to be able to use caching\\n// for individual wallet addresses\\n\\n//libraries\\nimport {IVeBend} from \\\"./interfaces/IVeBend.sol\\\";\\nimport {IERC20Upgradeable, SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract VeBend is IVeBend, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // We cannot really do block numbers per se b/c slope is per time, not per block\\n    // and per block could be fairly bad b/c Ethereum changes blocktimes.\\n    // What we can do is to extrapolate ***At functions\\n\\n    uint256 private constant DEPOSIT_FOR_TYPE = 0;\\n    uint256 private constant CREATE_LOCK_TYPE = 1;\\n    uint256 private constant INCREASE_LOCK_AMOUNT = 2;\\n    uint256 private constant INCREASE_UNLOCK_TIME = 3;\\n\\n    uint256 public constant WEEK = 7 * 86400; // all future times are rounded by week\\n    uint256 public constant MAXTIME = 4 * 365 * 86400; // 4 years\\n    uint256 public constant MULTIPLIER = 10**18;\\n\\n    address public token;\\n    uint256 public supply;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    //everytime user deposit/withdraw/change_locktime, these values will be updated;\\n    uint256 public override epoch;\\n    mapping(uint256 => Point) public supplyPointHistory; // epoch -> unsigned point.\\n    mapping(address => mapping(uint256 => Point)) public userPointHistory; // user -> Point[user_epoch]\\n    mapping(address => uint256) public userPointEpoch;\\n    mapping(uint256 => int256) public slopeChanges; // time -> signed slope change\\n\\n    string public name;\\n    string public symbol;\\n    uint256 public decimals;\\n\\n    function initialize(address _tokenAddr) external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        token = _tokenAddr;\\n        supplyPointHistory[0] = Point({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n        decimals = 18;\\n        name = \\\"Vote-escrowed BEND\\\";\\n        symbol = \\\"veBEND\\\";\\n    }\\n\\n    function getLocked(address _addr)\\n        external\\n        view\\n        override\\n        returns (LockedBalance memory)\\n    {\\n        return locked[_addr];\\n    }\\n\\n    function getUserPointEpoch(address _userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return userPointEpoch[_userAddress];\\n    }\\n\\n    function getSupplyPointHistory(uint256 _index)\\n        external\\n        view\\n        override\\n        returns (Point memory)\\n    {\\n        return supplyPointHistory[_index];\\n    }\\n\\n    function getUserPointHistory(address _userAddress, uint256 _index)\\n        external\\n        view\\n        override\\n        returns (Point memory)\\n    {\\n        return userPointHistory[_userAddress][_index];\\n    }\\n\\n    /***\\n     *@dev Get the most recently recorded rate of voting power decrease for `_addr`\\n     *@param _addr Address of the user wallet\\n     *@return Value of the slope\\n     */\\n    function getLastUserSlope(address _addr) external view returns (int256) {\\n        uint256 uepoch = userPointEpoch[_addr];\\n        return userPointHistory[_addr][uepoch].slope;\\n    }\\n\\n    /***\\n     *@dev Get the timestamp for checkpoint `_idx` for `_addr`\\n     *@param _addr User wallet address\\n     *@param _idx User epoch number\\n     *@return Epoch time of the checkpoint\\n     */\\n    function userPointHistoryTs(address _addr, uint256 _idx)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userPointHistory[_addr][_idx].ts;\\n    }\\n\\n    /***\\n     *@dev Get timestamp when `_addr`'s lock finishes\\n     *@param _addr User wallet\\n     *@return Epoch time of the lock end\\n     */\\n    function lockedEnd(address _addr) external view returns (uint256) {\\n        return locked[_addr].end;\\n    }\\n\\n    //Struct to avoid \\\"Stack Too Deep\\\"\\n    struct CheckpointParameters {\\n        Point userOldPoint;\\n        Point userNewPoint;\\n        int256 oldDslope;\\n        int256 newDslope;\\n        uint256 epoch;\\n    }\\n\\n    /***\\n     *@dev Record global and per-user data to checkpoint\\n     *@param _addr User's wallet address. No user checkpoint if 0x0\\n     *@param _oldLocked Pevious locked amount / end lock time for the user\\n     *@param _newLocked New locked amount / end lock time for the user\\n     */\\n    function _checkpoint(\\n        address _addr,\\n        LockedBalance memory _oldLocked,\\n        LockedBalance memory _newLocked\\n    ) internal {\\n        CheckpointParameters memory _st;\\n        _st.epoch = epoch;\\n\\n        if (_addr != address(0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (_oldLocked.end > block.timestamp && _oldLocked.amount > 0) {\\n                _st.userOldPoint.slope = _oldLocked.amount / int256(MAXTIME);\\n                _st.userOldPoint.bias =\\n                    _st.userOldPoint.slope *\\n                    int256(_oldLocked.end - block.timestamp);\\n            }\\n            if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\n                _st.userNewPoint.slope = _newLocked.amount / int256(MAXTIME);\\n                _st.userNewPoint.bias =\\n                    _st.userNewPoint.slope *\\n                    int256(_newLocked.end - block.timestamp);\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // _oldLocked.end can be in the past and in the future\\n            // _newLocked.end can ONLY by in the FUTURE unless everything expired than zeros\\n            _st.oldDslope = slopeChanges[_oldLocked.end];\\n            if (_newLocked.end != 0) {\\n                if (_newLocked.end == _oldLocked.end) {\\n                    _st.newDslope = _st.oldDslope;\\n                } else {\\n                    _st.newDslope = slopeChanges[_newLocked.end];\\n                }\\n            }\\n        }\\n        Point memory _lastPoint = Point({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n        if (_st.epoch > 0) {\\n            _lastPoint = supplyPointHistory[_st.epoch];\\n        }\\n        uint256 _lastCheckPoint = _lastPoint.ts;\\n        // _initialLastPoint is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        // Point memory _initialLastPoint = _lastPoint;\\n        uint256 _initBlk = _lastPoint.blk;\\n        uint256 _initTs = _lastPoint.ts;\\n\\n        uint256 _blockSlope = 0; // dblock/dt\\n        if (block.timestamp > _lastPoint.ts) {\\n            _blockSlope =\\n                (MULTIPLIER * (block.number - _lastPoint.blk)) /\\n                (block.timestamp - _lastPoint.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 _ti = (_lastCheckPoint / WEEK) * WEEK;\\n        for (uint256 i; i < 255; i++) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            _ti += WEEK;\\n            int256 d_slope = 0;\\n            if (_ti > block.timestamp) {\\n                // reach future time, reset to blok time\\n                _ti = block.timestamp;\\n            } else {\\n                d_slope = slopeChanges[_ti];\\n            }\\n            _lastPoint.bias =\\n                _lastPoint.bias -\\n                _lastPoint.slope *\\n                int256(_ti - _lastCheckPoint);\\n            _lastPoint.slope += d_slope;\\n            if (_lastPoint.bias < 0) {\\n                // This can happen\\n                _lastPoint.bias = 0;\\n            }\\n            if (_lastPoint.slope < 0) {\\n                // This cannot happen - just in case\\n                _lastPoint.slope = 0;\\n            }\\n            _lastCheckPoint = _ti;\\n            _lastPoint.ts = _ti;\\n            _lastPoint.blk =\\n                _initBlk +\\n                ((_blockSlope * (_ti - _initTs)) / MULTIPLIER);\\n            _st.epoch += 1;\\n            if (_ti == block.timestamp) {\\n                // history filled over, break loop\\n                _lastPoint.blk = block.number;\\n                break;\\n            } else {\\n                supplyPointHistory[_st.epoch] = _lastPoint;\\n            }\\n        }\\n        epoch = _st.epoch;\\n        // Now supplyPointHistory is filled until t=now\\n\\n        if (_addr != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            _lastPoint.slope += _st.userNewPoint.slope - _st.userOldPoint.slope;\\n            _lastPoint.bias += _st.userNewPoint.bias - _st.userOldPoint.bias;\\n            if (_lastPoint.slope < 0) {\\n                _lastPoint.slope = 0;\\n            }\\n            if (_lastPoint.bias < 0) {\\n                _lastPoint.bias = 0;\\n            }\\n        }\\n        // Record the changed point into history\\n        supplyPointHistory[_st.epoch] = _lastPoint;\\n        if (_addr != address(0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [_newLocked.end]\\n            // and add old_user_slope to [_oldLocked.end]\\n            if (_oldLocked.end > block.timestamp) {\\n                // _oldDslope was <something> - _userOldPoint.slope, so we cancel that\\n                _st.oldDslope += _st.userOldPoint.slope;\\n                if (_newLocked.end == _oldLocked.end) {\\n                    _st.oldDslope -= _st.userNewPoint.slope; // It was a new deposit, not extension\\n                }\\n                slopeChanges[_oldLocked.end] = _st.oldDslope;\\n            }\\n            if (_newLocked.end > block.timestamp) {\\n                if (_newLocked.end > _oldLocked.end) {\\n                    _st.newDslope -= _st.userNewPoint.slope; // old slope disappeared at this point\\n                    slopeChanges[_newLocked.end] = _st.newDslope;\\n                }\\n                // else we recorded it already in _oldDslope\\n            }\\n\\n            // Now handle user history\\n            uint256 _userEpoch = userPointEpoch[_addr] + 1;\\n\\n            userPointEpoch[_addr] = _userEpoch;\\n            _st.userNewPoint.ts = block.timestamp;\\n            _st.userNewPoint.blk = block.number;\\n            userPointHistory[_addr][_userEpoch] = _st.userNewPoint;\\n        }\\n    }\\n\\n    /***\\n     *@dev Deposit and lock tokens for a user\\n     *@param _addr User's wallet address\\n     *@param _value Amount to deposit\\n     *@param _unlockTime New time when to unlock the tokens, or 0 if unchanged\\n     *@param _lockedBalance Previous locked amount / timestamp\\n     */\\n    function _depositFor(\\n        address _provider,\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        LockedBalance memory _lockedBalance,\\n        uint256 _type\\n    ) internal {\\n        LockedBalance memory _locked = LockedBalance(\\n            _lockedBalance.amount,\\n            _lockedBalance.end\\n        );\\n        LockedBalance memory _oldLocked = LockedBalance(\\n            _lockedBalance.amount,\\n            _lockedBalance.end\\n        );\\n\\n        uint256 _supplyBefore = supply;\\n        supply = _supplyBefore + _value;\\n        //Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount = _locked.amount + int256(_value);\\n        if (_unlockTime != 0) {\\n            _locked.end = _unlockTime;\\n        }\\n        locked[_beneficiary] = _locked;\\n\\n        // Possibilities\\n        // Both _oldLocked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n\\n        _checkpoint(_beneficiary, _oldLocked, _locked);\\n        if (_value != 0) {\\n            IERC20Upgradeable(token).safeTransferFrom(\\n                _provider,\\n                address(this),\\n                _value\\n            );\\n        }\\n\\n        emit Deposit(\\n            _provider,\\n            _beneficiary,\\n            _value,\\n            _locked.end,\\n            _type,\\n            block.timestamp\\n        );\\n        emit Supply(_supplyBefore, _supplyBefore + _value);\\n    }\\n\\n    /***\\n     *@notice Record total supply to checkpoint\\n     */\\n    function checkpointSupply() public override {\\n        LockedBalance memory _a;\\n        LockedBalance memory _b;\\n        _checkpoint(address(0), _a, _b);\\n    }\\n\\n    function createLockFor(\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime\\n    ) external override {\\n        _createLock(_beneficiary, _value, _unlockTime);\\n    }\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external override {\\n        _createLock(msg.sender, _value, _unlockTime);\\n    }\\n\\n    /***\\n     *@dev Deposit `_value` tokens for `msg.sender` and lock until `_unlockTime`\\n     *@param _value Amount to deposit\\n     *@param _unlockTime Epoch time when tokens unlock, rounded down to whole weeks\\n     */\\n    function _createLock(\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime\\n    ) internal nonReentrant {\\n        _unlockTime = (_unlockTime / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        LockedBalance memory _locked = locked[_beneficiary];\\n\\n        require(_value > 0, \\\"Can't lock zero value\\\");\\n        require(_locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n        require(\\n            _unlockTime > block.timestamp,\\n            \\\"Can only lock until time in the future\\\"\\n        );\\n        require(\\n            _unlockTime <= block.timestamp + MAXTIME,\\n            \\\"Voting lock can be 4 years max\\\"\\n        );\\n\\n        _depositFor(\\n            msg.sender,\\n            _beneficiary,\\n            _value,\\n            _unlockTime,\\n            _locked,\\n            CREATE_LOCK_TYPE\\n        );\\n    }\\n\\n    function increaseAmount(uint256 _value) external override {\\n        _increaseAmount(msg.sender, _value);\\n    }\\n\\n    function increaseAmountFor(address _beneficiary, uint256 _value)\\n        external\\n        override\\n    {\\n        _increaseAmount(_beneficiary, _value);\\n    }\\n\\n    /***\\n     *@dev Deposit `_value` additional tokens for `msg.sender`\\n     *        without modifying the unlock time\\n     *@param _value Amount of tokens to deposit and add to the lock\\n     */\\n    function _increaseAmount(address _beneficiary, uint256 _value)\\n        internal\\n        nonReentrant\\n    {\\n        LockedBalance memory _locked = locked[_beneficiary];\\n\\n        require(_value > 0, \\\"Can't increase zero value\\\");\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(\\n            _locked.end > block.timestamp,\\n            \\\"Cannot add to expired lock. Withdraw\\\"\\n        );\\n\\n        _depositFor(\\n            msg.sender,\\n            _beneficiary,\\n            _value,\\n            0,\\n            _locked,\\n            INCREASE_LOCK_AMOUNT\\n        );\\n    }\\n\\n    /***\\n     *@dev Extend the unlock time for `msg.sender` to `_unlockTime`\\n     *@param _unlockTime New epoch time for unlocking\\n     */\\n    function increaseUnlockTime(uint256 _unlockTime)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        _unlockTime = (_unlockTime / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        require(_locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(_locked.amount > 0, \\\"Nothing is locked\\\");\\n        require(_unlockTime > _locked.end, \\\"Can only increase lock duration\\\");\\n        require(\\n            _unlockTime <= block.timestamp + MAXTIME,\\n            \\\"Voting lock can be 4 years max\\\"\\n        );\\n\\n        _depositFor(\\n            msg.sender,\\n            msg.sender,\\n            0,\\n            _unlockTime,\\n            _locked,\\n            INCREASE_UNLOCK_TIME\\n        );\\n    }\\n\\n    /***\\n     *@dev Withdraw all tokens for `msg.sender`\\n     *@dev Only possible if the lock has expired\\n     */\\n    function withdraw() external override nonReentrant {\\n        LockedBalance memory _locked = LockedBalance(\\n            locked[msg.sender].amount,\\n            locked[msg.sender].end\\n        );\\n\\n        require(block.timestamp >= _locked.end, \\\"The lock didn't expire\\\");\\n        uint256 _value = uint256(_locked.amount);\\n\\n        LockedBalance memory _oldLocked = LockedBalance(\\n            locked[msg.sender].amount,\\n            locked[msg.sender].end\\n        );\\n\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        locked[msg.sender] = _locked;\\n        uint256 _supplyBefore = supply;\\n        supply = _supplyBefore - _value;\\n\\n        // _oldLocked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, _oldLocked, _locked);\\n\\n        IERC20Upgradeable(token).safeTransfer(msg.sender, _value);\\n\\n        emit Withdraw(msg.sender, _value, block.timestamp);\\n        emit Supply(_supplyBefore, _supplyBefore - _value);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /***\\n     *@dev Binary search to estimate timestamp for block number\\n     *@param _block Block to find\\n     *@param _max_epoch Don't go beyond this epoch\\n     *@return Approximate timestamp for block\\n     */\\n    function findBlockEpoch(uint256 _block, uint256 _max_epoch)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = _max_epoch;\\n        for (uint256 i; i <= 128; i++) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (supplyPointHistory[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /***\\n     *@notice Get the current voting power for `msg.sender`\\n     *@dev Adheres to the ERC20 `balanceOf` interface for Metamask & Snapshot compatibility\\n     *@param _addr User wallet address\\n     *@return User's present voting power\\n     */\\n    function balanceOf(address _addr) external view returns (uint256) {\\n        uint256 _t = block.timestamp;\\n\\n        uint256 _epoch = userPointEpoch[_addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory _lastPoint = userPointHistory[_addr][_epoch];\\n            _lastPoint.bias -= _lastPoint.slope * int256(_t - _lastPoint.ts);\\n            if (_lastPoint.bias < 0) {\\n                _lastPoint.bias = 0;\\n            }\\n            return uint256(_lastPoint.bias);\\n        }\\n    }\\n\\n    /***\\n     *@notice Get the current voting power for `msg.sender`\\n     *@dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     *@param _addr User wallet address\\n     *@param _t Epoch time to return voting power at\\n     *@return User voting power\\n     *@dev return the present voting power if _t is 0\\n     */\\n    function balanceOf(address _addr, uint256 _t)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (_t == 0) {\\n            _t = block.timestamp;\\n        }\\n\\n        uint256 _epoch = userPointEpoch[_addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory _lastPoint = userPointHistory[_addr][_epoch];\\n            _lastPoint.bias -= _lastPoint.slope * int256(_t - _lastPoint.ts);\\n            if (_lastPoint.bias < 0) {\\n                _lastPoint.bias = 0;\\n            }\\n            return uint256(_lastPoint.bias);\\n        }\\n    }\\n\\n    //Struct to avoid \\\"Stack Too Deep\\\"\\n    struct Parameters {\\n        uint256 min;\\n        uint256 max;\\n        uint256 maxEpoch;\\n        uint256 dBlock;\\n        uint256 dt;\\n    }\\n\\n    /***\\n     *@notice Measure voting power of `_addr` at block height `_block`\\n     *@dev Adheres to MiniMe `balanceOfAt` interface https//github.com/Giveth/minime\\n     *@param _addr User's wallet address\\n     *@param _block Block to calculate the voting power at\\n     *@return Voting power\\n     */\\n    function balanceOfAt(address _addr, uint256 _block)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        require(_block <= block.number, \\\"Can't exceed lasted block\\\");\\n\\n        Parameters memory _st;\\n\\n        // Binary search\\n        _st.min = 0;\\n        _st.max = userPointEpoch[_addr];\\n\\n        for (uint256 i; i <= 128; i++) {\\n            // Will be always enough for 128-bit numbers\\n            if (_st.min >= _st.max) {\\n                break;\\n            }\\n            uint256 _mid = (_st.min + _st.max + 1) / 2;\\n            if (userPointHistory[_addr][_mid].blk <= _block) {\\n                _st.min = _mid;\\n            } else {\\n                _st.max = _mid - 1;\\n            }\\n        }\\n        Point memory _upoint = userPointHistory[_addr][_st.min];\\n\\n        _st.maxEpoch = epoch;\\n        uint256 _epoch = findBlockEpoch(_block, _st.maxEpoch);\\n        Point memory _point = supplyPointHistory[_epoch];\\n        _st.dBlock = 0;\\n        _st.dt = 0;\\n        if (_epoch < _st.maxEpoch) {\\n            Point memory _point_1 = supplyPointHistory[_epoch + 1];\\n            _st.dBlock = _point_1.blk - _point.blk;\\n            _st.dt = _point_1.ts - _point.ts;\\n        } else {\\n            _st.dBlock = block.number - _point.blk;\\n            _st.dt = block.timestamp - _point.ts;\\n        }\\n        uint256 block_time = _point.ts;\\n        if (_st.dBlock != 0) {\\n            block_time += (_st.dt * (_block - _point.blk)) / _st.dBlock;\\n        }\\n\\n        _upoint.bias -= _upoint.slope * int256(block_time - _upoint.ts);\\n        if (_upoint.bias >= 0) {\\n            return uint256(_upoint.bias);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /***\\n     *@dev Calculate total voting power at some point in the past\\n     *@param point The point (bias/slope) to start search from\\n     *@param t Time to calculate the total voting power at\\n     *@return Total voting power at that time\\n     */\\n    function supplyAt(Point memory point, uint256 t)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        Point memory _lastPoint = point;\\n        uint256 _ti = (_lastPoint.ts / WEEK) * WEEK;\\n        for (uint256 i; i < 255; i++) {\\n            _ti += WEEK;\\n            int256 d_slope = 0;\\n\\n            if (_ti > t) {\\n                _ti = t;\\n            } else {\\n                d_slope = slopeChanges[_ti];\\n            }\\n            _lastPoint.bias -= _lastPoint.slope * int256(_ti - _lastPoint.ts);\\n\\n            if (_ti == t) {\\n                break;\\n            }\\n            _lastPoint.slope += d_slope;\\n            _lastPoint.ts = _ti;\\n        }\\n\\n        if (_lastPoint.bias < 0) {\\n            _lastPoint.bias = 0;\\n        }\\n        return uint256(_lastPoint.bias);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power\\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     *@return Total voting power\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        uint256 _epoch = epoch;\\n        Point memory _lastPoint = supplyPointHistory[_epoch];\\n\\n        return supplyAt(_lastPoint, block.timestamp);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power\\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     *@return Total voting power\\n     */\\n    function totalSupply(uint256 _t) external view returns (uint256) {\\n        if (_t == 0) {\\n            _t = block.timestamp;\\n        }\\n\\n        uint256 _epoch = epoch;\\n        Point memory _lastPoint = supplyPointHistory[_epoch];\\n\\n        return supplyAt(_lastPoint, _t);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power at some point in the past\\n     *@param _block Block to calculate the total voting power at\\n     *@return Total voting power at `_block`\\n     */\\n    function totalSupplyAt(uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number, \\\"Can't exceed the latest block\\\");\\n        uint256 _epoch = epoch;\\n        uint256 _targetEpoch = findBlockEpoch(_block, _epoch);\\n\\n        Point memory _point = supplyPointHistory[_targetEpoch];\\n        uint256 dt = 0;\\n        if (_targetEpoch < _epoch) {\\n            Point memory _pointNext = supplyPointHistory[_targetEpoch + 1];\\n            if (_point.blk != _pointNext.blk) {\\n                dt =\\n                    ((_block - _point.blk) * (_pointNext.ts - _point.ts)) /\\n                    (_pointNext.blk - _point.blk);\\n            }\\n        } else {\\n            if (_point.blk != block.number) {\\n                dt =\\n                    ((_block - _point.blk) * (block.timestamp - _point.ts)) /\\n                    (block.number - _point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n\\n        return supplyAt(_point, _point.ts + dt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vote/interfaces/IVeBend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IVeBend {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    event Deposit(\\n        address indexed provider,\\n        address indexed beneficiary,\\n        uint256 value,\\n        uint256 indexed locktime,\\n        uint256 _type,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function createLockFor(\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime\\n    ) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseAmountFor(address _beneficiary, uint256 _value) external;\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external;\\n\\n    function checkpointSupply() external;\\n\\n    function withdraw() external;\\n\\n    function getLocked(address _addr) external returns (LockedBalance memory);\\n\\n    function getUserPointEpoch(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function getUserPointHistory(address _userAddress, uint256 _index)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function getSupplyPointHistory(uint256 _index)\\n        external\\n        view\\n        returns (Point memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLastUserSlope\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLocked\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct IVeBend.LockedBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSupplyPointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"internalType\":\"struct IVeBend.Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserPointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"internalType\":\"struct IVeBend.Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmountFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyPointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"userPointHistoryTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VeBend", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}