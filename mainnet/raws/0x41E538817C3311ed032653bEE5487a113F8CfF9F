{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FeeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IFeeController.sol\\\";\\n\\nimport { FC_FeeTooLarge } from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title FeeController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The Fee Controller is used by LoanCore to query for fees for different\\n * loan lifecycle interactions (origiations, rollovers, etc). All fees should\\n * have setters and getters and be expressed in BPs. In the future, this contract\\n * could be extended to support more complex logic (introducing a mapping of users\\n * who get a discount, e.g.). Since LoanCore can change the fee controller reference,\\n * any changes to this contract can be newly deployed on-chain and adopted.\\n */\\ncontract FeeController is IFeeController, Ownable {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev Global maximum fees, preventing attacks by owners\\n    ///      which drain principal.\\n    uint256 public constant MAX_ORIGINATION_FEE = 1000;\\n    uint256 public constant MAX_ROLLOVER_FEE = 500;\\n\\n    /// @dev Fee for origination - default is 0.5%\\n    uint256 private originationFee = 50;\\n    /// @dev Fee for rollovers - default is 0.1%\\n    uint256 private rolloverFee = 10;\\n\\n    // ========================================= FEE SETTERS ===========================================\\n\\n    /**\\n     * @notice Set the origination fee to the given value. The caller\\n     *         must be the owner of the contract.\\n     *\\n     * @param _originationFee       The new origination fee, in bps.\\n     */\\n    function setOriginationFee(uint256 _originationFee) external override onlyOwner {\\n        if (_originationFee > MAX_ORIGINATION_FEE) revert FC_FeeTooLarge();\\n\\n        originationFee = _originationFee;\\n        emit UpdateOriginationFee(_originationFee);\\n    }\\n\\n    /**\\n     * @notice Set the origination fee to the given value. The caller\\n     *         must be the owner of the contract.\\n     *\\n     * @param _rolloverFee          The new rollover fee, in bps.\\n     */\\n    function setRolloverFee(uint256 _rolloverFee) external override onlyOwner {\\n        if (_rolloverFee > MAX_ROLLOVER_FEE) revert FC_FeeTooLarge();\\n\\n        rolloverFee = _rolloverFee;\\n        emit UpdateRolloverFee(_rolloverFee);\\n    }\\n\\n    // ========================================= FEE GETTERS ===========================================\\n\\n    /**\\n     * @notice Get the current origination fee in bps.\\n     *\\n     * @return originationFee       The current fee in bps.\\n     */\\n    function getOriginationFee() public view override returns (uint256) {\\n        return originationFee;\\n    }\\n\\n    /**\\n     * @notice Get the current origination fee in bps.\\n     *\\n     * @return rolloverFee       The current fee in bps.\\n     */\\n    function getRolloverFee() public view override returns (uint256) {\\n        return rolloverFee;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IFeeController {\\n    // ================ Events =================\\n\\n    event UpdateOriginationFee(uint256 _newFee);\\n    event UpdateRolloverFee(uint256 _newFee);\\n\\n    // ================ Fee Setters =================\\n\\n    function setOriginationFee(uint256 _originationFee) external;\\n\\n    function setRolloverFee(uint256 _rolloverFee) external;\\n\\n    // ================ Fee Getters =================\\n\\n    function getOriginationFee() external view returns (uint256);\\n\\n    function getRolloverFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/errors/Lending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror OC_ZeroAddress();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice Number of installment periods must be greater than 1 and less than or equal to 1000.\\n *\\n * @param numInstallments               Number of installment periods in loan.\\n */\\nerror OC_NumberInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param verifier                      The address of the verifier contract.\\n * @param data                          The verification data (to be parsed by verifier).\\n * @param vault                         The user's vault subject to verification.\\n */\\nerror OC_PredicateFailed(address verifier, bytes data, address vault);\\n\\n/**\\n * @notice The predicates array is empty.\\n */\\nerror OC_PredicatesArrayEmpty();\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount1155(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring an invalid token ID.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId1155(address asset, int256 tokenId);\\n\\n/**\\n * @notice Provided ERC20 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount20(address asset, uint256 amount);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror RC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Repayment has already been completed for this loan without installments.\\n */\\nerror RC_NoPaymentDue();\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address caller);\\n\\n/**\\n * @notice Loan has not started yet.\\n *\\n * @param startDate                 block timestamp of the startDate of loan stored in LoanData.\\n */\\nerror RC_BeforeStartDate(uint256 startDate);\\n\\n/**\\n * @notice Loan terms do not have any installments, use repay for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_NoInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice Loan terms have installments, use repaypart or repayPartMinimum for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_HasInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice No interest payment or late fees due.\\n *\\n * @param amount                    Minimum interest plus late fee amount returned\\n *                                  from minimum payment calculation.\\n */\\nerror RC_NoMinPaymentDue(uint256 amount);\\n\\n/**\\n * @notice Repaid amount must be larger than zero.\\n */\\nerror RC_RepayPartZero();\\n\\n/**\\n * @notice Amount paramater less than the minimum amount due.\\n *\\n * @param amount                    Amount function call parameter.\\n * @param minAmount                 The minimum amount due.\\n */\\nerror RC_RepayPartLTMin(uint256 amount, uint256 minAmount);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror LC_ZeroAddress();\\n\\n/// @notice Borrower address is same as lender address.\\nerror LC_ReusedNote();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice User address and the specified nonce have already been used.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Installment loan has not defaulted.\\n */\\nerror LC_LoanNotDefaulted();\\n\\n// ================================== Full Insterest Amount Calc ====================================\\n/// @notice All errors prefixed with FIAC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror FIAC_InterestRate(uint256 interestRate);\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deployer is allowed to initialize roles. Caller is not deployer.\\n */\\nerror PN_CannotInitialize();\\n\\n/**\\n * @notice Roles have been initialized.\\n */\\nerror PN_AlreadyInitialized();\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice No token transfers while contract is in paused state.\\n */\\nerror PN_ContractPaused();\\n\\n// ==================================== Fee Controller ======================================\\n/// @notice All errors prefixed with FC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Caller attempted to set a fee which is larger than the global maximum.\\n */\\nerror FC_FeeTooLarge();\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        /// @dev Must be an AssetVault for LoanTermsWithItems\\n        address collateralAddress;\\n        // An encoded list of predicates\\n        bytes items;\\n        // The payable currency for the loan principal and interest\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract\\n        bytes data;\\n        // The verifier contract\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan\\n        LoanState state;\\n        // Number of installment payments made on the loan\\n        uint24 numInstallmentsPaid;\\n        // installment loan specific\\n        // Start date of the loan, using block.timestamp - for determining installment period\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan\\n        LoanTerms terms;\\n        // Remaining balance of the loan. Starts as equal to principal. Can reduce based on\\n        // payments made, can increased based on compounded interest from missed payments and late fees\\n        uint256 balance;\\n        // Amount paid in total by the borrower\\n        uint256 balancePaid;\\n        // Total amount of late fees accrued\\n        uint256 lateFeesAccrued;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"FC_FeeTooLarge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateOriginationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateRolloverFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ORIGINATION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ROLLOVER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOriginationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRolloverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originationFee\",\"type\":\"uint256\"}],\"name\":\"setOriginationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rolloverFee\",\"type\":\"uint256\"}],\"name\":\"setRolloverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FeeController", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}