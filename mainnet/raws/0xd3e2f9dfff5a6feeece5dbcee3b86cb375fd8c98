{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// Sample fixed supply token contract\r\n// Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------------------------\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface\r\n{\r\n\t// Get the total token supply\r\n\tfunction totalSupply() constant returns (uint256 totalSupply);\r\n\r\n\t// Get the account balance of another account with address _owner\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n\t// Send _value amount of tokens to address _to\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n\t// Send _value amount of tokens from address _from to address _to\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t// If this function is called again it overwrites the current allowance with _value.\r\n\t// this function is required for some DEX functionality\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n\t// Returns the amount which _spender is still allowed to withdraw from _owner\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n\t// Triggered when tokens are transferred.\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\t// Triggered whenever approve(address _spender, uint256 _value) is called.\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract FixedSupplyToken is ERC20Interface\r\n{\r\n\tstring public constant symbol = \"BCOIN\";\r\n\tstring public constant name = \"BannerCoin\";\r\n\tuint8 public constant decimals = 8;\r\n\tuint256 _totalSupply = 10000000000000000;\r\n\r\n\t// Owner of this contract\r\n\taddress public owner;\r\n\r\n\t// Balances for each account\r\n\tmapping(address => uint256) balances;\r\n\r\n\t// Owner of account approves the transfer of an amount to another account\r\n\tmapping(address => mapping (address => uint256)) allowed;\r\n\r\n\t// Functions with this modifier can only be executed by the owner\r\n\tmodifier onlyOwner() \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t// Constructor\r\n\tfunction FixedSupplyToken()\r\n\t{\r\n\t\towner = msg.sender;\r\n\t\tbalances[owner] = _totalSupply;\r\n\t}\r\n\r\n\tfunction totalSupply() constant returns (uint256 totalSupply)\r\n\t{\r\n\t\ttotalSupply = _totalSupply;\r\n\t}\r\n\r\n\t// What is the balance of a particular account?\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance)\r\n\t{\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t// Transfer the balance from owner's account to another account\r\n\tfunction transfer(address _to, uint256 _amount) returns (bool success)\r\n\t{\r\n\t\tif\t(\r\n\t\t\t\tbalances[msg.sender] >= _amount &&\r\n\t\t\t\t_amount > 0 &&\r\n\t\t\t\tbalances[_to] + _amount > balances[_to]\r\n\t\t\t)\r\n\t\t{\r\n\t\t\tbalances[msg.sender] -= _amount;\r\n\t\t\tbalances[_to] += _amount;\r\n\t\t\tTransfer(msg.sender, _to, _amount);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t// Send _value amount of tokens from address _from to address _to\r\n\t// The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n\t// tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n\t// fees in sub-currencies; the command should fail unless the _from account has\r\n\t// deliberately authorized the sender of the message via some mechanism; we propose\r\n\t// these standardized APIs for approval:\r\n\tfunction transferFrom(\r\n\t\t\t\taddress _from,\r\n\t\t\t\taddress _to,\r\n\t\t\t\tuint256 _amount\r\n\t\t\t\t) returns (bool success)\r\n\t{\r\n\t\tif\t(\r\n\t\t\t\tbalances[_from] >= _amount &&\r\n\t\t\t\tallowed[_from][msg.sender] >= _amount &&\r\n\t\t\t\t_amount > 0 &&\r\n\t\t\t\tbalances[_to] + _amount > balances[_to]\r\n\t\t\t)\r\n\t\t{\r\n\t\t\tbalances[_from] -= _amount;\r\n\t\t\tallowed[_from][msg.sender] -= _amount;\r\n\t\t\tbalances[_to] += _amount;\r\n\t\t\tTransfer(_from, _to, _amount);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t// If this function is called again it overwrites the current allowance with _value.\r\n\tfunction approve(address _spender, uint256 _amount) returns (bool success)\r\n\t{\r\n\t\tallowed[msg.sender][_spender] = _amount;\r\n\t\tApproval(msg.sender, _spender, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) \r\n\t{\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "FixedSupplyToken", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ea944353fc759068b7f7d7e1fd38822b71804499c46f1a8e07ad3a9aac00c98c"}]}