{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Scanner.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"ISheetFighterToken.sol\\\";\\nimport \\\"ICellToken.sol\\\";\\nimport \\\"IPortal.sol\\\";\\n\\n\\n/// @title Contract to send Sheet Fighters and $CELL between Ethereum and Polygon\\n/// @author Overlord Paper Co.\\n/// @notice A big thank you to 0xBasset from EtherOrcs! This contract is heavily influenced\\n/// @notice by the the EtherOrcs Ethereum <--> Polygon bridge, and 0xBasset was a great\\n/// @notice sounding board during development.\\ncontract Scanner is Ownable {\\n    address public portal;\\n    address public sheetFighterToken;\\n    address public cellToken;\\n    mapping (address => address) public reflection;\\n    mapping (uint256 => address) public sheetOwner;\\n\\n    constructor() Ownable() {}\\n\\n    modifier onlyPortal() {\\n        require(portal != address(0), \\\"Portal must be set\\\");\\n        require(msg.sender == portal, \\\"Only portal can do this\\\");\\n        _;\\n    }\\n\\n\\n    /// @dev Initiatilize state for proxy contract\\n    /// @param portal_ Portal address\\n    /// @param sheetFighterToken_ SheetFighterToken address\\n    /// @param cellToken_ CellToken address\\n    function initialize(\\n        address portal_, \\n        address sheetFighterToken_, \\n        address cellToken_\\n    ) \\n        external \\n        onlyOwner\\n    {\\n        portal = portal_;\\n        sheetFighterToken = sheetFighterToken_;\\n        cellToken = cellToken_;\\n    }\\n\\n    /// @dev Set Ethereum <--> Polygon reflection address\\n    /// @param key_ Address for contract on one network\\n    /// @param reflection_ Address for contract on sister network\\n    function setReflection(address key_, address reflection_) external onlyOwner {\\n        reflection[key_] = reflection_;\\n        reflection[reflection_] = key_;\\n    }\\n\\n    /// @notice Bridge your Sheet Fighter(s) and $CELL between Ethereum and Polygon\\n    /// @notice This contract must be approved to transfer your Sheet Fighter(s) on your behalf\\n    /// @notice Sheet Fighter(s) must be in your wallet (i.e. not staked or bridged) to travel\\n    /// @param sheetFighterIds Ids of the Sheet Fighters being bridged\\n    /// @param cellAmount Amount of $CELL to bridge\\n    function travel(uint256[] calldata sheetFighterIds, uint256 cellAmount) external {\\n        require(sheetFighterIds.length > 0 || cellAmount > 0, \\\"Can't bridge nothing\\\");\\n\\n        // Address of contract on the sister-chain\\n        address target = reflection[address(this)];\\n\\n        uint256 numSheetFighters = sheetFighterIds.length;\\n        uint256 currIndex = 0;\\n\\n        bytes[] memory calls = new bytes[]((numSheetFighters > 0 ? numSheetFighters + 1 : 0) + (cellAmount > 0 ? 1 : 0));\\n\\n        // Handle Sheets\\n        if(numSheetFighters > 0 ) {\\n            // Transfer Sheets to bridge (SheetFighterToken contract then calls callback on this contract)\\n            _pullIds(sheetFighterToken, sheetFighterIds);\\n\\n            // Recreate Sheets on sister-chain exact as they exist on this chain\\n            for(uint256 i = 0; i < numSheetFighters; i++) {\\n                calls[i] = _buildData(sheetFighterIds[i]);\\n            }\\n\\n            calls[numSheetFighters] = abi.encodeWithSelector(this.unstakeMany.selector, reflection[sheetFighterToken], msg.sender, sheetFighterIds);\\n\\n            currIndex += numSheetFighters + 1;\\n        }\\n\\n        // Handle $CELL\\n        if(cellAmount > 0) {\\n            // Burn $CELL on this side of bridge\\n            ICellToken(cellToken).bridgeBurn(msg.sender, cellAmount);\\n\\n            // Add call to mint $CELL on other side of bridge\\n            calls[currIndex] = abi.encodeWithSelector(this.mintCell.selector, reflection[cellToken], msg.sender, cellAmount);\\n        }\\n\\n        // Send messages to portal\\n        IPortal(portal).sendMessage(abi.encode(target, calls));\\n\\n    }\\n\\n    /// @dev Callback function called by SheetFighterToken contract during travel\\n    /// @dev \\\"Stakes\\\" all Sheets being bridged to this contract (i.e. transfers custody to this contract)\\n    /// @param owner Address of the owner of the Sheet Fighters being bridged\\n    /// @param tokenIds Token ids of the Sheet Fighters being bridged\\n    function bridgeTokensCallback(address owner, uint256[] calldata tokenIds) external {\\n        require(msg.sender == sheetFighterToken, \\\"Only SheetFighterToken contract can do this\\\");\\n\\n        for(uint256 i = 0; i < tokenIds.length; i++) {\\n            _stake(msg.sender, tokenIds[i], owner);\\n        }\\n    }\\n\\n    /// @dev Unstake the Sheet Fighters from this contract and transfer ownership to owner\\n    /// @dev Called on the \\\"to\\\" network for bridging\\n    /// @param token Address of the ERC721 contract fot the tokens being bridged\\n    /// @param owner Address of the owner of the Sheet Fighters being bridged\\n    /// @param ids ERC721 token ids of the Sheet Fighters being bridged\\n    function unstakeMany(address token, address owner, uint256[] calldata ids) external onlyPortal {\\n\\n        for (uint256 i = 0; i < ids.length; i++) {  \\n            delete sheetOwner[ids[i]];\\n            IERC721(token).transferFrom(address(this), owner, ids[i]);\\n        }\\n    }\\n\\n    /// @dev Calls the SheetFighterToken contract with given calldata\\n    /// @dev This is used to execute the cross-chain function calls\\n    /// @param data Calldata with which to call SheetFighterToken\\n    function callSheets(bytes calldata data) external onlyPortal {\\n        (bool succ, ) = sheetFighterToken.call(data);\\n        require(succ);\\n    }\\n\\n    /// @dev Mint $CELL on the \\\"to\\\" network\\n    /// @param token Address of CellToken contract\\n    /// @param to Address of user briding $CELL\\n    /// @param amount Amount of $CELL being bridged\\n    function mintCell(address token, address to, uint256 amount) external onlyPortal {\\n        ICellToken(token).bridgeMint(to, amount);\\n    }\\n    \\n    /// @dev Informs other contracts that this contract knows about ERC721s\\n    /// @dev Allows ERC721 safeTransfer and safeTransferFrom transactions to this contract\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @dev Call the bridgeSheets function on the \\\"from\\\" part of the network, which transfers tokens\\n    /// @param tokenAddress Address of SheetFighterToken contract\\n    /// @param tokenIds SheetFighterToken ids of Sheet Fighters being bridged\\n    function _pullIds(address tokenAddress, uint256[] calldata tokenIds) internal {\\n        // The ownership will be checked to the token contract\\n        ISheetFighterToken(tokenAddress).bridgeSheets(msg.sender, tokenIds);\\n    }\\n\\n    /// @dev Set state variables mapping tokenId to owner\\n    /// @param token Address of ERC721 contract\\n    /// @param tokenId ERC721 id for token being staked\\n    /// @param owner Address of owner who is bridging\\n    function _stake(address token, uint256 tokenId, address owner) internal {\\n        require(sheetOwner[tokenId] == address(0), \\\"Token already staked\\\");\\n        require(msg.sender == token, \\\"Not SF contract\\\");\\n        require(IERC721(token).ownerOf(tokenId) == address(this), \\\"Sheet not transferred\\\");\\n\\n        if (token == sheetFighterToken){ \\n            sheetOwner[tokenId] = owner;\\n        }\\n    }\\n\\n    /// @dev build calldata for transaction to update Sheet's stats\\n    /// @param id SheetFighterToken id\\n    function _buildData(uint256 id) internal view returns (bytes memory) {\\n        (uint8 hp, uint8 critical, uint8 heal, uint8 defense, uint8 attack, , ) = ISheetFighterToken(sheetFighterToken).tokenStats(id);\\n        bytes memory data = abi.encodeWithSelector(this.callSheets.selector, abi.encodeWithSelector(ISheetFighterToken.syncBridgedSheet.selector, id, hp, critical, heal, defense, attack));\\n        return data;\\n    }\\n}\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ISheetFighterToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721Enumerable.sol\\\";\\n\\ninterface ISheetFighterToken is IERC721Enumerable {\\n\\n    /// @notice Update the address of the CellToken contract\\n    /// @param _contractAddress Address of the CellToken contract\\n    function setCellTokenAddress(address _contractAddress) external;\\n\\n    /// @notice Update the address which signs the mint transactions\\n    /// @dev    Used for ensuring GPT-3 values have not been altered\\n    /// @param  _mintSigner New address for the mintSigner\\n    function setMintSigner(address _mintSigner) external;\\n\\n    /// @notice Update the address of the bridge\\n    /// @dev Used for authorization\\n    /// @param  _bridge New address for the bridge\\n    function setBridge(address _bridge) external;\\n\\n    /// @notice Update the address of the upgrade contract\\n    /// @dev Used for authorization\\n    /// @param  _upgradeContract New address for the upgrade contract\\n    function setUpgradeContract(address _upgradeContract) external;\\n\\n    /// @dev Withdraw funds as owner\\n    function withdraw() external;\\n\\n    /// @notice Set the sale state: options are 0 (closed), 1 (presale), 2 (public sale) -- only owner can call\\n    /// @dev    Implicitly converts int argument to TokenSaleState type -- only owner can call\\n    /// @param  saleStateId The id for the sale state: 0 (closed), 1 (presale), 2 (public sale)\\n    function setSaleState(uint256 saleStateId) external;\\n\\n    /// @notice Mint up to 20 Sheet Fighters\\n    /// @param  numTokens Number of Sheet Fighter tokens to mint (1 to 20)\\n    function mint(uint256 numTokens) external payable;\\n\\n    /// @notice \\\"Print\\\" a Sheet. Adds GPT-3 flavor text and attributes\\n    /// @dev    This function requires signature verification\\n    /// @param  _tokenIds Array of tokenIds to print\\n    /// @param  _flavorTexts Array of strings with flavor texts concatonated with a pipe character\\n    /// @param  _signature Signature verifying _flavorTexts are unmodified\\n    function print(\\n        uint256[] memory _tokenIds,\\n        string[] memory _flavorTexts,\\n        bytes memory _signature\\n    ) external;\\n\\n    /// @notice Bridge the Sheets\\n    /// @dev Transfers Sheets to bridge\\n    /// @param tokenOwner Address of the tokenOwner who is bridging their tokens\\n    /// @param tokenIds Array of tokenIds that tokenOwner is bridging\\n    function bridgeSheets(address tokenOwner, uint256[] calldata tokenIds) external;\\n\\n    /// @notice Update the sheet to sync with actions that occured on otherside of bridge\\n    /// @param tokenId Id of the SheetFighter\\n    /// @param HP New HP value\\n    /// @param critical New luck value\\n    /// @param heal New heal value\\n    /// @param defense New defense value\\n    /// @param attack New attack value\\n    function syncBridgedSheet(\\n        uint256 tokenId,\\n        uint8 HP,\\n        uint8 critical,\\n        uint8 heal,\\n        uint8 defense,\\n        uint8 attack\\n    ) external;\\n\\n    /// @notice Get Sheet stats\\n    /// @param _tokenId Id of SheetFighter\\n    /// @return tuple containing sheet's stats\\n    function tokenStats(uint256 _tokenId) external view returns(uint8, uint8, uint8, uint8, uint8, uint8, uint8);\\n\\n    /// @notice Return true if token is printed, false otherwise\\n    /// @param _tokenId Id of the SheetFighter NFT\\n    /// @return bool indicating whether or not sheet is printed\\n    function isPrinted(uint256 _tokenId) external view returns(bool);\\n\\n    /// @notice Returns the token metadata and SVG artwork\\n    /// @dev    This generates a data URI, which contains the metadata json, encoded in base64\\n    /// @param _tokenId The tokenId of the token whos metadata and SVG we want\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    /// @notice Update the sheet to via upgrade contract\\n    /// @param tokenId Id of the SheetFighter\\n    /// @param attributeNumber specific attribute to upgrade\\n    /// @param value new attribute value\\n    function updateStats(uint256 tokenId,uint8 attributeNumber,uint8 value) external;\\n}\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICellToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n\\n/// @title  Contract creating fungible in-game utility tokens for the Sheet Fighter game\\n/// @author Overlord Paper Co\\n/// @notice This defines in-game utility tokens that are used for the Sheet Fighter game\\n/// @notice This contract is HIGHLY adapted from the Anonymice $CHEETH contract\\n/// @notice Thank you MouseDev for writing the original $CHEETH contract!\\ninterface ICellToken is IERC20 {\\n\\n    /// @notice Update the address of the SheetFighterToken contract\\n    /// @param _contractAddress Address of the SheetFighterToken contract\\n    function setSheetFighterTokenAddress(address _contractAddress) external;\\n\\n    /// @notice Update the address of the bridge\\n    /// @dev Used for authorization\\n    /// @param  _bridge New address for the bridge\\n    function setBridge(address _bridge) external;\\n\\n    /// @notice Stake multiple Sheets by providing their Ids\\n    /// @param tokenIds Array of SheetFighterToken ids to stake\\n    function stakeByIds(uint256[] calldata tokenIds) external;\\n\\n    /// @notice Unstake all of your SheetFighterTokens and get your rewards\\n    /// @notice This function is more gas efficient than calling unstakeByIds(...) for all ids\\n    /// @dev Tokens are iterated over in REVERSE order, due to the implementation of _remove(...)\\n    function unstakeAll() external;\\n\\n    /// @notice Unstake SheetFighterTokens, given by ids, and get your rewards\\n    /// @notice Use unstakeAll(...) instead if unstaking all tokens for gas efficiency\\n    /// @param tokenIds Array of SheetFighterToken ids to unstake\\n    function unstakeByIds(uint256[] memory tokenIds) external;\\n\\n    /// @notice Claim $CELL tokens as reward for staking a SheetFighterTokens, given by an id\\n    /// @notice This function does not unstake your Sheets\\n    /// @param tokenId SheetFighterToken id\\n    function claimByTokenId(uint256 tokenId) external;\\n\\n    /// @notice Claim $CELL tokens as reward for all SheetFighterTokens staked\\n    /// @notice This function does not unstake your Sheets\\n    function claimAll() external;\\n\\n    /// @notice Mint tokens when bridging\\n    /// @dev This function is only used for bridging to mint tokens on one end\\n    /// @param to Address to send new tokens to\\n    /// @param value Number of new tokens to mint\\n    function bridgeMint(address to, uint256 value) external;\\n\\n    /// @notice Burn tokens when bridging\\n    /// @dev This function is only used for bridging to burn tokens on one end\\n    /// @param from Address to burn tokens from\\n    /// @param value Number of tokens to burn\\n    function bridgeBurn(address from, uint256 value) external;\\n\\n    /// @notice View all rewards claimable by a staker\\n    /// @param staker Address of the staker\\n    /// @return Number of $CELL claimable by the staker\\n    function getAllRewards(address staker) external view returns (uint256);\\n\\n    /// @notice View rewards claimable for a specific SheetFighterToken\\n    /// @param tokenId Id of the SheetFightToken\\n    /// @return Number of $CELL claimable by the staker for this Sheet\\n    function getRewardsByTokenId(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice Get all the token Ids staked by a staker\\n    /// @param staker Address of the staker\\n    /// @return Array of tokens staked\\n    function getTokensStaked(address staker) external view returns (uint256[] memory);\\n\\n    /// @notice Burn cell on behalf of an account\\n    /// @param account Address for account\\n    /// @param amount Amount to burn\\n    function burnFrom(address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPortal {\\n    function sendMessage(bytes calldata message_) external;\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n    function receiveMessage(bytes memory data) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bridgeTokensCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callSheets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cellToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"portal_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sheetFighterToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cellToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintCell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reflection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reflection_\",\"type\":\"address\"}],\"name\":\"setReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheetFighterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sheetOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sheetFighterIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"cellAmount\",\"type\":\"uint256\"}],\"name\":\"travel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Scanner", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}