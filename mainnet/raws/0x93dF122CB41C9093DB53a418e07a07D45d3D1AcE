{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/NFTPreSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Developed by itxToledo\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Represents CriptoMentor Smart Contract\\r\\n */\\r\\ncontract INFTERC721 {\\r\\n    /**\\r\\n     * @dev ERC-721 INTERFACE\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\\r\\n\\r\\n    /**\\r\\n     * @dev CUSTOM INTERFACE\\r\\n     */\\r\\n    function mintTo(uint256 amount, address _to) external {}\\r\\n\\r\\n    function maxMintPerTransaction() public returns (uint256) {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title NFTPreSaleContract.\\r\\n *\\r\\n * @author itxToledo\\r\\n *\\r\\n * @notice This Smart Contract can be used to sell any fixed amount of NFTs where only permissioned\\r\\n * wallets are allowed to buy. Buying is limited to a certain time period.\\r\\n *\\r\\n */\\r\\ncontract NFTPreSale is Ownable {\\r\\n    /**\\r\\n     * @notice The Smart Contract of the NFT being sold\\r\\n     * @dev ERC-721 Smart Contract\\r\\n     */\\r\\n    INFTERC721 public immutable nft;\\r\\n\\r\\n    /**\\r\\n     * @dev MINT DATA\\r\\n     */\\r\\n    uint256 public maxSupply = 110;\\r\\n    uint256 public minted = 50;\\r\\n    uint256 public mintPrice = 0.14 * 10**18;\\r\\n    uint256 public mintStart = 1646695622;\\r\\n    uint256 public mintEnd = 1646879219;\\r\\n    uint256 public maxMintPerWallet = 2;\\r\\n\\r\\n    mapping(address => uint256) public addressToMints;\\r\\n\\r\\n    /**\\r\\n     * @dev Events\\r\\n     */\\r\\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\\r\\n    event Purchase(address indexed buyer, uint256 indexed amount);\\r\\n    event setMaxSupplyEvent(uint256 indexed maxSupply);\\r\\n    event setMintPriceEvent(uint256 indexed mintPrice);\\r\\n    event setMintDatesEvent(uint256 indexed mintStart, uint256 indexed mintEnd);\\r\\n    event setMaxMintPerWalletEvent(uint256 indexed maxMintPerWallet);\\r\\n    event WithdrawAllEvent(address indexed to, uint256 amount);\\r\\n\\r\\n    constructor(address _nftaddress) Ownable() {\\r\\n        nft = INFTERC721(_nftaddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev SALE\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Function to buy one or more NFTs.\\r\\n     *\\r\\n     * @param amount. The amount of NFTs to buy.\\r\\n     */\\r\\n    function buy(uint256 amount) external payable {\\r\\n        /// @dev Verifies that user can mint based on the provided parameters.\\r\\n\\r\\n        require(address(nft) != address(0), \\\"NFT SMART CONTRACT NOT SET\\\");\\r\\n\\r\\n        require(block.timestamp >= mintStart, \\\"SALE HASN'T STARTED YET\\\");\\r\\n        require(block.timestamp < mintEnd, \\\"SALE IS CLOSED\\\");\\r\\n        require(amount > 0, \\\"HAVE TO BUY AT LEAST 1\\\");\\r\\n\\r\\n        require(\\r\\n            amount <= nft.maxMintPerTransaction(),\\r\\n            \\\"CANNOT MINT MORE PER TX\\\"\\r\\n        );\\r\\n        require(\\r\\n            addressToMints[_msgSender()] + amount <= maxMintPerWallet,\\r\\n            \\\"MINT AMOUNT EXCEEDS MAX FOR USER\\\"\\r\\n        );\\r\\n        require(\\r\\n            minted + amount <= maxSupply,\\r\\n            \\\"MINT AMOUNT GOES OVER MAX SUPPLY\\\"\\r\\n        );\\r\\n        require(msg.value == mintPrice * amount, \\\"ETHER SENT NOT CORRECT\\\");\\r\\n\\r\\n        /// @dev Updates contract variables and mints `amount` NFTs to users wallet\\r\\n\\r\\n        minted += amount;\\r\\n        addressToMints[msg.sender] += amount;\\r\\n        nft.mintTo(amount, msg.sender);\\r\\n\\r\\n        emit Purchase(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev OWNER ONLY\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Change the maximum supply of NFTs that are for sale.\\r\\n     *\\r\\n     * @param newMaxSupply. The new max supply.\\r\\n     */\\r\\n    function setMaxSupply(uint256 newMaxSupply) external onlyOwner {\\r\\n        maxSupply = newMaxSupply;\\r\\n        emit setMaxSupplyEvent(newMaxSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the price of nft.\\r\\n     *\\r\\n     * @param newMintPrice. The new mint price.\\r\\n     */\\r\\n    function setMintPrice(uint256 newMintPrice) external onlyOwner {\\r\\n        mintPrice = newMintPrice;\\r\\n        emit setMintPriceEvent(newMintPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the mint dates.\\r\\n     *\\r\\n     * @param newMintStart. The new mint start date.\\r\\n     * @param newMintEnd. The new mint end date.\\r\\n     */\\r\\n    function setMintDates(uint256 newMintStart, uint256 newMintEnd)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        mintStart = newMintStart;\\r\\n        mintEnd = newMintEnd;\\r\\n        emit setMintDatesEvent(newMintStart, newMintEnd);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the max mint per wallet.\\r\\n     *\\r\\n     * @param newMaxMintPerWallet. The new max mint per wallet.\\r\\n     */\\r\\n    function setMaxMintPerWallet(uint256 newMaxMintPerWallet)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        maxMintPerWallet = newMaxMintPerWallet;\\r\\n        emit setMaxMintPerWalletEvent(newMaxMintPerWallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev FINANCE\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to withdraw funds generated from sale.\\r\\n     *\\r\\n     * @param _to. The address to send the funds to.\\r\\n     */\\r\\n    function withdrawAll(address _to) external onlyOwner {\\r\\n        require(_to != address(0), \\\"CANNOT WITHDRAW TO ZERO ADDRESS\\\");\\r\\n\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n\\r\\n        require(contractBalance > 0, \\\"NO ETHER TO WITHDRAW\\\");\\r\\n\\r\\n        payable(_to).transfer(contractBalance);\\r\\n\\r\\n        emit WithdrawAllEvent(_to, contractBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function for receiving Ether\\r\\n     */\\r\\n    receive() external payable {\\r\\n        emit ReceivedEther(msg.sender, msg.value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxMintPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerWalletEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mintStart\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mintEnd\",\"type\":\"uint256\"}],\"name\":\"setMintDatesEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPriceEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract INFTERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMintEnd\",\"type\":\"uint256\"}],\"name\":\"setMintDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTPreSale", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005e6fa6b6fd43cf10f066a26f2d10b47574b8e60c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}