{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value \\u003e 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"PecanMilkCoop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.9 \\u003c0.9.0;\\n\\nimport \\\"./PMCTokens.sol\\\";\\n\\n/*\\n\\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#//\\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@///////////(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\u0026/////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(////////@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@\\u0026///////////////@@@@@@@@@@@@@@@///////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@//////////@@@@@@@@@@@@@@@@@@#//////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@(/////%@@@@@@@@@@@@@@@@//////@(//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@//////////@@@@@@@@@@@@/////#@@@@///////@@///////////////@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@//////////////@@@@@@@/////@@@@@@@@//////////////////////%@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@/////@@@@#////////%@//////@@@@@@@@@@///////\\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@/////@@@@@@@@////////////@@@@@@@@@///////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@/////(@@@@@@@@@@@@//////@@@@@@@@@@/////%@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////#@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@/////////////////////@@@@@@@@@@@@@@@@@@@@@@@@/////@@@@@@@%//////@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@/////////\\u0026@@@@/////////////@@@@@@@@@@@@@@@@@@@@@/////@@@@@@@@@\\u0026/////@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@///////@@@@@@@@@/////@@@///////@@@@@@@@@@@@@@@@@@@/////%@@@@@@@@@@@@@@@@@@@@@@@@@////@@@@@@\\n    @@@@@@@@//////@@@@@@@@@@/////@@@@@@#/////@@@@@@@@@@@@@@@@@@@/////%@@@@@@@@@@@@@@@@@@@@@@@/////@@@@@@\\n    @@@@@@@/////\\u0026@@@@@@@@@@@/////@@@@@@@@/////@@@@@@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@//////@@@@@@@\\n    @@@@@@(/////@@@@@@@@@@@//////@@@@@@@@#/////@@@@@@@@@@@@@@@@@@@@///////@@@@@@@@@@@@@@////////@@@@@@@@\\n    @@@@@@(////%@@@@@@@@@@@/////@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@////////////////////////@@@@@@@@@@@\\n    @@@@@@(/////@@@@@@@@@@@@@\\u0026\\u0026@@@@@@@@@@%/////@@@@@@@@@@@@@@@@@@@@@@@@@\\u0026////////////////%@@@@@@@@@@@@@@\\n    @@@@@@@/////\\u0026@@@@@@@@@@@@@@@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@\\u0026//////@@@@@@@@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@////////@@@@@@@@@@@@@@@@@///////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@////////////@@@@@@@(/////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@/////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@/////\\u0026@@@%/////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@%/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@/////(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@\\u0026/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\\n      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.\\n     @@\\u0027                                                                                            \\u0027@@\\n    @@}                                          PMC TOKENS                                          {@@\\n    @@}                          ERC721 contract by Pecan Milk Cooperative                           {@@\\n   {@@                                    Facebook @pecanmilkcoop                                     @@}\\n    @@}                                    Twitter @pecanmilkcoop                                    {@@\\n    @@}                                     InstaGram @pecanmilk                                     {@@\\n     @@,                                                                                            ,@@\\n      \\\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;\\\"\\n\\n*/\\n\\n/// @title The non-fungible token contract of Pecan Milk Cooperative\\n/// @author Pecan Milk Cooperative (https://pecanmilk.com)\\n/// @dev This safe contract sets up an unlimited collection of non-fungible tokens with innumberable generations.\\n///  Info on how the various aspects of safe contracts fit together are documented in the safe contract Complex Cipher.\\ncontract PecanMilkCoop is PMCTokens {\\n\\n  constructor() PMCTokens(\\n    \\\"Pecan Milk Coop\\\",\\n    \\\"PECAN\\\",\\n    \\\"QmS5Gvpz8o1zKeC1vdpmEqtwtHCbZfzrj35H3MGNGdoRFC\\\",\\n    100)\\n  {\\n    setContractURI(\\\"ipfs://QmeprjbfMa8jmn4YomBtycvxd1ro8tzRPDQSsBmmW9fawb\\\");\\n  }\\n\\n}\\n\"},\"PMCTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.9 \\u003c0.9.0;\\n\\nimport \\\"./Counters.sol\\\";\\nimport \\\"./SimpleTokensSafe.sol\\\";\\n\\n/**\\n *                                                                                                    \\n *                                              *((.                                                  \\n *                                        (((((((((((/                                                \\n *                                       .(((((((((((((,                                              \\n *                                                 ((((((                                             \\n *                                                   ((((((                                           \\n *                              /((((((((              ((((((                                         \\n *                       .(((((((((((((((               (((((((                                       \\n *                        ((((((((((                  *((((((((((                                     \\n *                            /(((((,                (((((( /((((((         _____                     \\n *                            ((((((((((            (((((*    (((((((  (((((((((((((),                \\n *                            ((((((((((((((       (((((        ((((((((((((((((((((().               \\n *                           (((((    *((((((((, ((((((          (((((((.                             \\n *                           (((((        ((((((((((((         (((((((((((                            \\n *                          (((((/            ((((((          (((((,  ((((((                          \\n *                   ((((((((((((                            (((((*     ((((((                        \\n *              (((((((((((((((((((((                        (((((       ,((((((                      \\n *           (((((((((\\u0027    (((((((((((((                     (((((         .(((((             __      \\n *         (((((((         (((((   (((((((                   (((((,                         ((((\\u0027     \\n *        ((((((          (((((      *(((((                   (((((,                       (((((      \\n *       (((((.           (((((        (((((                   ((((((                    ((((((       \\n *      ((((((           ((((((        *(((((                    (((((((              ((((((()        \\n *      (((((.           (((((          (((((                      ((((((((((((((((((((((()           \\n *      ((((((             \\\"\\\"          ,(((((                         \\u0027((((((((((((((()\\u0027              \\n *       (((((.                        (((((                               \\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"                   \\n *       .((((((                     ((((()                                                           \\n *        ((((((((                 (((((()                                                            \\n *         (((((((((();.      /(((((((()                                                              \\n *          (((((((((((((((((((((((()                                                                 \\n *          (((((\\u0027   \\u0027(((((((()\\u0027                                                                      \\n *           (((((                                                                                    \\n *           .(((((                                                                                   \\n *            (((((                                                                                   \\n *             (((((                                                                                  \\n *             ((((((                                                                                 \\n *              (((((                                                                                 \\n *              .(((((                                                                                \\n *                ((((                                                                                \\n *                                                                                                    \\n *\\n *  @title Pecan Milk Coop Generational Non-Fungible Tokens\\n *  @author Pecan Milk Cooperative, LLC \\u003chey@pecanmilk.com\\u003e\\n *  @notice This contract mints generational NFTs created by various artists of the Pecan Milk Coop.\\n *   This abstract in particular, which increments tokenIds for each new mint, is a locale token\\n *   tracker or a limited number of mintable PMC tokens per any number of new generations. A record\\n *   is kept for each token holder and the tokens minted for each generation become increasingly\\n *   historic as each new generation of tokens is borne.\\n */\\nabstract contract PMCTokens is SimpleTokensSafe {\\n\\n  using Strings for uint256;\\n  using Counters for Counters.Counter;\\n\\n  address public executive = 0x736E8502bFf0af7189ed82fF58D1501e860A88a7; // the official Ethereum account of Kenny Zen\\n\\n  /// @dev Emitted when a new token is minted.\\n  event TokenMinted(uint256 indexed tokenId, address indexed minter);\\n\\n  /// @dev Emitted when the supply of tokens for this locale changes.\\n  event TokenCountUpdated(uint256 indexed supply);\\n\\n  string private _generationCID; // the IPFS content identifier of the current generation of tokens\\n\\n  Counters.Counter private _generation; // keeps track of the current generation of tokens\\n  Counters.Counter private _tokenCount; // keeps track of the number of minted tokens\\n\\n  uint256 public premium = 0 ether; // subsidy required to mint one (1) token in wei\\n  uint256 public maxTokensPerMint = 1; // maximum number of tokens allowed per mint\\n  uint256 public airdropsPerMinter = 1; // maximum number of airdrops allowed per minter\\n\\n  uint256 internal _mintableSupply; // total supply of mintable tokens\\n\\n  mapping(uint256 =\\u003e address) public minter; // map of tokenIds to original token holder\\n  mapping(address =\\u003e uint256) public airdropsAllowed; // map of minter addresses to number of allowed airdrops\\n  mapping(address =\\u003e uint256) public airdropsOf; // map of minter addresses to number of minted airdrops\\n  mapping(uint256 =\\u003e string) internal _tokenCID; // map of tokenIds to IPFS content identifier\\n\\n  bool public airdropsOpen = true; // indicates if minter addresses can get airdrops or use their allowed airdrops\\n\\n  /**\\n   * @dev The constructor instantiates the ERC721 standard contract using _localeName and _localeSymbol,\\n   *  creates a new locale for these tokens, pauses the contract and gives birth to the genesis generation of tokens.\\n   * @param _localeName The name of this locale (\\\"Pecan Milk Coop\\\")\\n   * @param _localeSymbol The symbol of this locale (\\\"PECAN\\\")\\n   * @param _genesisCID The content identifier for the genesis generation of tokens (\\\"QmWssz\\\")\\n   * @param _initialSupply The initial supply of tokens for the genesis generation (25)\\n   */\\n  constructor(\\n    string memory _localeName,\\n    string memory _localeSymbol,\\n    string memory _genesisCID,\\n    uint256 _initialSupply)\\n    ERC721(_localeName, _localeSymbol) {\\n      baseURI = \\\"ipfs://\\\";\\n      dateDeployed = block.timestamp;\\n      locale = bytes4(keccak256(abi.encodePacked(_localeName, _localeSymbol, dateDeployed)));\\n      pause(true);\\n      generate(_genesisCID, _initialSupply);\\n  }\\n\\n  /**\\n   * @dev Throws if called by a contract or any account other than the sender.\\n   */\\n  modifier onlyMinter() {\\n    require(tx.origin == _msgSender(), \\\"Only minters :(\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if the _mintAmount is noncompliant, or if there are no more mintable tokens.\\n   * @param _mintAmount The number of tokens to check for compliance\\n   */\\n  modifier mintCompliance(uint256 _mintAmount) {\\n    if (premium == 0 \\u0026\\u0026 msg.value \\u003e= _mintAmount * 0.5 ether) {\\n      // the premium is naught but the subsidy provided is substantial enough to pass as compliant\\n      _augment(owner(), msg.value); // the Coop will accept the substantial subsidy\\n    } else if (_msgSender() != owner()) { // calls by the Coop account pass this compliance check\\n      require(_mintAmount \\u003e 0 \\u0026\\u0026 _mintAmount \\u003c= maxTokensPerMint, \\\"Invalid mint amount!\\\");\\n      if (premium == 0) { // the token will be airdropped when the premium is naught\\n        require(airdropsOf[_msgSender()] + _mintAmount \\u003c= airdropsPerMinter, \\\"Maximum airdrops exceeded :(\\\");\\n        if (msg.value \\u003e 0) { // the premium is naught but still a subsidy was provided\\n          _augment(owner(), msg.value); // the Coop will accept the subsidy as a small donation\\n        }\\n      }\\n    } else if (msg.value \\u003e 0) { // the Coop itself has provided a subsidy to the account of the executive\\n      _augment(executive, msg.value);\\n    }\\n    require(_tokenCount.current() + _mintAmount \\u003c= _mintableSupply, \\\"No more mintables :(\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Set up the minted token. This assigns the address of the orignal holder and asssigns the\\n   *  content identifier of the location where the token\\u0027s metadata lives on IPFS.\\n   * @param _tokenId The tokenId of the token to set up\\n   * @param _minter The address of the original minter\\n   */\\n  function _structureToken(uint256 _tokenId, address _minter) private {\\n    _tokenCID[_tokenId] = _generationCID;\\n    minter[_tokenId] = _minter;\\n    emit TokenMinted(_tokenId, _minter);\\n  }\\n\\n  /**\\n   * @dev Get the number of generations that have been borne.\\n   * @return The current number of generations\\n   */\\n  function generations() public view returns (uint256) {\\n    return _generation.current();\\n  }\\n\\n  /**\\n   * @dev Get the number of tokens that have been minted.\\n   * @return The current token count\\n   */\\n  function totalSupply() public view returns (uint256) {\\n    return _tokenCount.current();\\n  }\\n\\n  /**\\n   * @dev Increment the token count and fetch the latest mintable token.\\n   * @return The next tokenId to mint\\n   * @notice The initial tokenId is 1.\\n   */\\n  function nextToken() internal virtual returns (uint256) {\\n    _tokenCount.increment();\\n    return _tokenCount.current();\\n  }\\n\\n  /**\\n   * @dev Get the number of tokens still available to be minted.\\n   * @return The available token count\\n   */\\n  function availableTokenCount() public view returns (uint256) {\\n    return _mintableSupply - totalSupply();\\n  }\\n\\n  /**\\n   * @dev Get the metadata URI for a particular token. Throws if the token has never been minted.\\n   * @param _tokenId The tokenId of the token for which to retrieve metadata\\n   */\\n  function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n    require(_exists(_tokenId), \\\"Token does not exist!\\\");\\n    return string(abi.encodePacked(baseURI, _tokenCID[_tokenId], \\\"/\\\", _tokenId.toString()));\\n  }\\n\\n  /**\\n   * @dev Get the tokens owned by a particular wallet address by tokenId.\\n   * @param _owner The account to check for ownership\\n   */\\n  function tokensByOwner(address _owner) public view returns (uint256[] memory) {\\n    uint256 balance = balanceOf(_owner);\\n    uint256[] memory owned = new uint256[](balance);\\n    uint256 i = 0;\\n    uint256 currentId = 1;\\n    while (i \\u003c balance \\u0026\\u0026 currentId \\u003c= _tokenCount.current()) {\\n      address currentTokenOwner = ownerOf(currentId);\\n      if (currentTokenOwner == _owner) {\\n        owned[i] = currentId;\\n        i++;\\n      }\\n      currentId++;\\n    }\\n    return owned;\\n  }\\n\\n  /**\\n   * Mint a number of tokens to the _receiver.\\n   * @dev Callable internally only.\\n   * @param _mintAmount The number of tokens to mint\\n   * @param _receiver The address of the account to which to mint _mintAmount of tokens\\n   */\\n  function _mintLoop(address _receiver, uint256 _mintAmount) internal {\\n    for (uint256 i = 0; i \\u003c _mintAmount; i++) {\\n      uint256 _id = nextToken();\\n      _safeMint(_receiver, _id);\\n      _structureToken(_id, _receiver);\\n    }\\n    emit TokenCountUpdated(totalSupply());\\n  }\\n\\n  /**\\n   * Airdrop a number of tokens to the sender.\\n   * @dev Callable by any address. Throws if airdrops are not open or the sender has an invalid\\n   *  number of allowed airdrops.\\n   * @param _mintAmount The number of tokens to airdrop\\n   */\\n  function airDrop(uint256 _mintAmount) public payable nonReentrant onlyMinter whenNotPaused mintCompliance(_mintAmount) {\\n    require(airdropsOpen \\u0026\\u0026 airdropsAllowed[_msgSender()] \\u003e= _mintAmount, \\\"Insufficient airdrops allowed :(\\\");\\n    airdropsAllowed[_msgSender()] -= _mintAmount;\\n    airdropsOf[_msgSender()] += _mintAmount;\\n    _mintLoop(_msgSender(), _mintAmount);\\n  }\\n\\n  /**\\n   * Airdrop a number of tokens to the _receiver, courtesy of the Coop. For giveaways ;)\\n   * @dev Callable by the Coop account only.\\n   * @param _mintAmount The number of tokens to airdrop\\n   * @param _receiver The address of the account to which to gift the minted tokens\\n   */\\n  function airDropForAddress(uint256 _mintAmount, address _receiver) public payable nonReentrant onlyOwner mintCompliance(_mintAmount) {\\n    _mintLoop(_receiver, _mintAmount);\\n  }\\n\\n  /**\\n   * Mint a number of tokens to the sender.\\n   * @dev Callable by any address. Throws if the provided subsidy is noncompliant.\\n   * @param _mintAmount The number of tokens to mint\\n   */\\n  function mint(uint256 _mintAmount) public payable nonReentrant onlyMinter whenNotPaused mintCompliance(_mintAmount) {\\n    if (premium \\u003e 0) { // there is a premium to mint _mintAmount of tokens\\n      // minter must send a subsidy matching or exceeding the premium per token\\n      require(msg.value \\u003e= premium * _mintAmount, \\\"Value sent is incorrect :(\\\");\\n      _augment(owner(), msg.value);\\n      if (airdropsOpen) { // airdrops are open\\n        airdropsAllowed[_msgSender()] += 1; // minter gets one (1) airdrop per mint transaction\\n      }\\n    } else { // the _mintAmount of tokens are airdropped\\n      airdropsOf[_msgSender()] += _mintAmount;\\n    }\\n    _mintLoop(_msgSender(), _mintAmount);\\n  }\\n\\n  /**\\n   * Assign an address to act as the executive.\\n   * @dev Callable by the Coop account only.\\n   * @param _newExec The address of the new executive\\n   */\\n  function setExecutive(address _newExec) external onlyOwner {\\n    require(_newExec != address(0) \\u0026\\u0026 _newExec != burn, \\\"Cannot assign burn as executive.\\\");\\n    executive = _newExec;\\n  }\\n\\n  /**\\n   * Update the premium per token.\\n   * @dev Callable by the Coop account only. The minter must send a subsidy matching or\\n   *  exceeding this premium. Throws if the contract is not paused.\\n   * @param _perTokenPremium The pecuniary amount of the subsidy required to mint a token in wei\\n   */\\n  function setPremium(uint256 _perTokenPremium) public onlyOwner whenPaused {\\n    premium = _perTokenPremium;\\n  }\\n\\n  /**\\n   * Update the maxium number of tokens allowed to be minted per transaction.\\n   * @dev Callable by the Coop account only. Throws if the contract is not paused.\\n   * @param _maxTokens The maximum number of tokens allowed per mint transaction\\n   */\\n  function setMaxTokensPerMint(uint256 _maxTokens) public onlyOwner whenPaused {\\n    maxTokensPerMint = _maxTokens;\\n  }\\n\\n  /**\\n   * Update whether minters can get or use airdrops.\\n   * @dev Callable by the Coop account only. Throws if the contract is not paused.\\n   * @param _open Indicates whether airdrops are open as a boolean value\\n   */\\n  function setAirdropsOpen(bool _open) public onlyOwner whenPaused {\\n    airdropsOpen = _open;\\n  }\\n\\n  /**\\n   * Update the maxium number of airdrops allowed to be minted for every minter address.\\n   * @dev Callable by the Coop account only. Throws if the contract is not paused.\\n   * @param _maxAirdops The maximum number of airdrops allowed for each minter\\n   */\\n  function setAirdropsPerMinter(uint256 _maxAirdops) public onlyOwner whenPaused {\\n    airdropsPerMinter = _maxAirdops;\\n  }\\n\\n  /**\\n   * Update the content identifier for the current generation of tokens.\\n   * @dev Callable by the Coop account only. Theoretically, this would be called only\\n   *  in the event of a mistake or a severe change. Throws if the contract is not paused, or the\\n   *  _cId is invalid.\\n   * @param _cId The updated IPFS content identifier\\n   */\\n  function setCID(string memory _cId) public onlyOwner whenPaused {\\n    require(bytes(_cId).length == 46, \\\"CID missing or invalid.\\\");\\n    _generationCID = _cId;\\n  }\\n\\n  /**\\n   * Update the supply of mintable tokens for the current generation.\\n   * @dev Callable by the Coop account only. Theoretically, this would be called only in\\n   *  the event of a mistake or a severe change, whereby the `_generationCID` is also updated.\\n   *  Throws if the contract is not paused.\\n   * @param _supply The new mintable supply of tokens\\n   */\\n  function setSupply(uint256 _supply) public onlyOwner whenPaused {\\n    require(_supply \\u003e= totalSupply(), \\\"Total supply cannot be depleted.\\\");\\n    _mintableSupply = _supply;\\n  }\\n\\n  /**\\n   * Bear the next generation of mintable tokens by the Coop.\\n   * @dev Callable by the Coop account only. Throws if the contract is not paused, the current\\n   *  generation of tokens is still being minted, the updated supply of tokens is the cipher (0),\\n   *  or the _cId is invalid.\\n   * @param _cId The IPFS content identifier of the new generation of tokens\\n   * @param _generationSupply The supply of tokens for the new generation\\n   */\\n  function generate(string memory _cId, uint256 _generationSupply) public onlyOwner whenPaused {\\n    require(availableTokenCount() == 0 \\u0026\\u0026 _generationSupply \\u003e 0, \\\"Progression not possible.\\\");\\n    require(bytes(_cId).length == 46, \\\"CID missing or invalid.\\\");\\n    _mintableSupply += _generationSupply;\\n    _generationCID = _cId;\\n    _generation.increment();\\n  }\\n\\n  /**\\n   * Withdraw all subsidies, splitting a percentage with the `executive`.\\n   * @dev Callable by the Coop account only. Throws if the subsidized balance is less than\\n   *  100 wei, whereupon the payment splitter would malfunction.\\n   */\\n  function claim() external override onlyOwner {\\n    address _owner = owner(); // the Coop account\\n    uint256 _withdrawn = account(_owner);\\n    require(_withdrawn \\u003e 99, \\\"Insufficient funds :(\\\");\\n    _send(_owner, executive, _withdrawn / 100); // 1% goes to the executive\\n    _send(_owner, _owner, account(_owner));\\n    emit SubsidiesCollected(_withdrawn);\\n  }\\n\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SimpleTokensSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n .\\n .      *77777/\\u0027           77777#\\u0027    `(777777         `\\u00267777       `(777777*              `(77777/\\u0027\\n .      777\\u0027`            777777          7777\\u0026             `77         7777777#               `7%\\n .     7#              #77777            7777%               `7        7  %77777\\u0026              7,\\n .    7              .77777              7777#          ,              7    *777777            \\u0026\\n .                  77777.               7777%        .7,              7      .777777          \\u0026\\n .                77777%                 7777\\u0026    _.(777,              7         777777        \\u0026\\n .              777777                   7777%     `,777,              7           777777      \\u0026\\n .            %77777                     7777#        `7,              7             777777    \\u0026\\n .          ,77777                7      7777#          ,       ,7     7               777777, \\u0026\\n .         77777.               %7       7777%                 \\u0026,      7                 7777777\\n .       77777(              ,777       .77777               /77       7                   #7777\\n .    .77777\\u0026            ,;77777.     ,;777777.          ,/7777     ,;777:.                  \\u002677\\n .\\n .\\n .   Simple Tokens by Kenny Zen Edition ERC721 Vaulted\\n .   Updated Wednesday, May 11, 2022\\n .\\n .   This contract contains a safe.\\n .   Scroll down :)\\n .\\n*/\\n\\npragma solidity \\u003e=0.8.9 \\u003c0.9.0;\\n\\nimport \\\"./Vaulted.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\n/// @title This contract conforms to the ERC721 non-fungible token standard. It can be used to mint\\n///  special distinguishable assets called tokens, each ownable by an Ethereum wallet.\\n/// @author Kenny Zen (https://kennyzen.co)\\n/// @dev This safe contract keeps track of a collection of NFTs and also contains a vault which can\\n///  secure an account of entrusted funds for any address. Info on how the various of aspects of safe\\n///  contracts fit together are documented in the safe contract Complex Cipher.\\nabstract contract SimpleTokensSafe is ERC721, Ownable, Pausable, Vaulted {\\n\\n  using Strings for uint256;\\n\\n  /// @dev Emitted when the contract\\u0027s entire subsidized balance has been claimed.\\n  event SubsidiesCollected(uint256 indexed amountWithdrawn);\\n\\n  bytes4 public locale; // locale selector for this contract\\n\\n  string public baseURI; // base URI to get token metadata\\n  string private _contractURI; // URL to get contract-level metadata\\n\\n  uint256 public dateDeployed; // timestamp of the block within which this contract was added to Ethereum\\n\\n  mapping(uint256 =\\u003e mapping(address =\\u003e bool)) public tokenHeld; // map of tokenIds to any token holder ever\\n\\n  /**\\n  * Function overrides\\n  */\\n  /// Called before any token transfer. @dev See {ERC721-_beforeTokenTransfer}.\\n  function _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override {\\n    super._beforeTokenTransfer(_from, _to, _tokenId);\\n  }\\n\\n  /// Called after any token transfer. @dev See {ERC721-_afterTokenTransfer}.\\n  function _afterTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override {\\n    // address of the new holder of _tokenId is recorded once transfer completes\\n    tokenHeld[_tokenId][_to] = true;\\n    super._afterTokenTransfer(_from, _to, _tokenId);\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n    return super.supportsInterface(_interfaceId);\\n  }\\n\\n  /// Override the function called to renounce contract ownership.\\n  /// @dev Overrides {Ownable-renounceOwnership} by throwing instead. Removing this override function\\n  ///  will make ownership of this contract completely renounceable. Renouncing contract ownership\\n  ///  will then assign control of this contract to the cipher (0) address to be LOST FOREVER.\\n  function renounceOwnership() public view virtual override {\\n    revert(\\\"Ownership is not renounceable.\\\");\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the token holder.\\n   * @param _tokenId The tokenId of the token to check for ownership\\n   */\\n  modifier onlyHolder(uint256 _tokenId) {\\n    require(ownerOf(_tokenId) == _msgSender(), \\\"You don\\u0027t hold this token :(\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Determine if a particular wallet address holds a token.\\n   * @param _holder The account to check for ownership\\n   */\\n  function isTokenHolder(address _holder) public view returns (bool) {\\n    if (balanceOf(_holder) \\u003e 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Determine if a particular token of this contract has been minted.\\n   * @param _tokenId The tokenId of the token to validate existence\\n   */\\n  function isTokenMinted(uint256 _tokenId) external view returns (bool) {\\n    return _exists(_tokenId);\\n  }\\n\\n  /**\\n   * @dev Get the storefront-level metadata URL for this contract.\\n   */\\n  function contractURI() external view returns (string memory) {\\n    return _contractURI;\\n  }\\n\\n  /**\\n   * Get the metadata URI for a particular token.\\n   * @dev Throws if the token has never been minted.\\n   * @param _tokenId The tokenId of the token for which to retrieve metadata\\n   */\\n  function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n    require(_exists(_tokenId), \\\"Token does not exist!\\\");\\n    return string(abi.encodePacked(baseURI, _tokenId.toString()));\\n  }\\n\\n  /**\\n   * Set the base metadata URL for the tokens of this contract.\\n   * @dev Callable by the owner of this contract only.\\n   * @param _uri The URI pointing to the token metadata\\n   */\\n  function setBaseURI(string memory _uri) public onlyOwner {\\n    baseURI = _uri;\\n  }\\n\\n  /**\\n   * Set the storefront-level metadata URL for this contract.\\n   * @dev Callable by the owner of this contract only.\\n   * @param _uri The URL pointing to the contract\\u0027s metadata\\n   */\\n  function setContractURI(string memory _uri) public onlyOwner {\\n    _contractURI = _uri;\\n  }\\n\\n  /**\\n   * Pause or unpause the contract.\\n   * @dev Callable by the owner of this contract only. Throws if the `paused` status has not changed.\\n   * @param _paused The value to which to update the `paused` status of the contract as a boolean\\n   */\\n  function pause(bool _paused) public virtual onlyOwner {\\n    if (_paused) {\\n      _pause();\\n    } else {\\n      _unpause();\\n    }\\n  }\\n\\n  /**\\n   * @dev Claim the entire subsidized balance for the owner of this contract.\\n   * @notice WARNING: If ownership is renounceable, calling this function after renouncing contract\\n   *  ownership will cause this function to throw, leaving any subsidies thereupon unclaimable.\\n   */\\n  function _recover() internal {\\n    address _owner = owner();\\n    uint256 _withdrawn = account(_owner);\\n    _send(_owner, _owner, _withdrawn);\\n    emit SubsidiesCollected(_withdrawn);\\n  }\\n\\n  /**\\n   * Withdraw all subsidies.\\n   * @dev Callable by the owner of this contract only. Does not throw if the subsidized balance\\n   *  is a cipher (0).\\n   * @notice WARNING: If ownership is renounceable, renouncing contract ownership will cause this\\n   *  function to throw, leaving any subsidies thereupon unclaimable.\\n   */\\n  function claim() external virtual onlyOwner {\\n    _recover();\\n  }\\n\\n  /**\\n   * Transfer an NFT that has been sent to the contract directly.\\n   * @dev Callable by the owner of this contract only. Throws if the NFT is not owned by the contract\\n   *  or the _receiver is a contract which does not implement `onERC721Received`.\\n   * @param _implementation Address of the _tokenId\\u0027s ERC721 compliant contract\\n   * @param _receiver Address of the account or contract to which to send the token\\n   * @param _tokenId The tokenId of the token of the _implementation contract\\n   */\\n  function transferNFT(address _implementation, address _receiver, uint256 _tokenId) public onlyOwner {\\n    IERC721(_implementation).safeTransferFrom(address(this), _receiver, _tokenId);\\n  }\\n\\n  /**\\n   * @dev Implementation of the `onERC721Received` function ensures that calls can be made to this\\n   *  contract safely to receive non-fungible tokens.\\n   */\\n  function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  /**\\n   * @dev The `receive` function executes on calls made to this contract to receive ether with no data.\\n   */\\n  receive() virtual override external payable {\\n    /// The ether sent is added to the trust of the contract owner only. @dev See {Vaulted-_augment}.\\n    _augment(owner(), msg.value);\\n  }\\n\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"Vaulted.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n/// @title This is an abstract to construct a safe contract, i.e. a smart contract containing a vault\\n///  which secures a safe of entrusted funds.\\n/// @author Kenny Zen (https://kennyzen.co)\\n/// @dev Info on how the various aspects of safe contracts fit together are documented in the safe contract Complex Cipher.\\nabstract contract Vaulted is Context, ReentrancyGuard {\\n\\n  // The official Ethereum burn address\\n  address public burn = 0x000000000000000000000000000000000000dEaD;\\n\\n  struct Vault {\\n    uint256 safe; // a trusted balance of pecuniary funds\\n    mapping(address =\\u003e uint256) trust; // a map of an address to its trusted balance\\n  }\\n\\n  /// @dev The total trusted balance for this contract is kept in the safe of the Vault struct _vault.\\n  /// @notice The amount of funds kept in the vault\\u0027s safe is only accessible to the address of the\\n  ///  account which has deposited or been entrusted funds.\\n  Vault private _vault;\\n\\n  /**\\n   * Get the trusted balance of a particular account (the account\\u0027s trust).\\n   * @dev Only the account with a trusted balance greater than cipher (0) can claim from its trust.\\n   * @param _account The address of the account for which to retrieve the trust\\n   */\\n  function account(address _account) public view returns (uint256) {\\n    return _vault.trust[_account];\\n  }\\n\\n  /**\\n   * Get the sum of funds entrusted to the vault\\u0027s safe, i.e. the total trusted balance for this contract.\\n   * @dev Any account can add a trusted amount to the vault\\u0027s safe. Any account with a trust greater\\n   *  than cipher (0) can claim from the vault\\u0027s safe an amount no greater than the account\\u0027s trust.\\n   */\\n  function safe() public view returns (uint256) {\\n    return _vault.safe;\\n  }\\n\\n  /**\\n   * Add to the trusted balance of a particular account (the account\\u0027s trust).\\n   * @dev Callable internally only. Use this function when receiving value to augment the balance\\n   *  of the vault\\u0027s safe.\\n   * @param _account The address of the account for which to increase the trust\\n   * @param _amount The pecuniary amount by which to increase the trust and the vault\\u0027s safe in wei\\n   */\\n  function _augment(address _account, uint256 _amount) internal {\\n    _vault.trust[_account] += _amount;\\n    _vault.safe += _amount;\\n  }\\n\\n  /**\\n   * Take away from the trusted balance of a particular account (the account\\u0027s trust).\\n   * @dev Callable internally only. For use when sending value from the safe contract to deplete\\n   *  the balance of the vault\\u0027s safe.\\n   * @param _account The address of the account for which to decrease the trust\\n   * @param _amount The pecuniary amount by which to decrease the trust and the vault\\u0027s safe in wei\\n   * @notice USE WITH CARE: Derivative logic MUST NOT allow for the depletion of entrusted funds in the\\n   *  vault\\u0027s safe. Special attention MUST be paid to ensure the security of the vault\\u0027s safe FOREVER.\\n   */\\n  function _deplete(address _account, uint256 _amount) internal {\\n    require(_vault.safe \\u003e= _amount \\u0026\\u0026 _vault.trust[_account] \\u003e= _amount, \\\"Insufficient funds in vault.\\\");\\n    _vault.trust[_account] -= _amount;\\n    _vault.safe -= _amount;\\n  }\\n\\n  /**\\n   * Deposit an amount to the trust of a particular account.\\n   * @dev Callable by any address. The _account cannot be the cipher (0) or the burn address.\\n   * @param _account The address of the account to which to entrust deposited funds\\n   */\\n  function deposit(address _account) external payable nonReentrant {\\n    require(_account != address(0) \\u0026\\u0026 _account != burn, \\\"Cannot deposit funds to burn.\\\");\\n    _augment(_account, msg.value);\\n  }\\n\\n  /**\\n   * Withdraw an amount from the trust of a particular account.\\n   * @dev Callable by the _account only. Throws on insufficient funds. See {_send}. Can be overridden\\n   *  to extend or restrict behaviour.\\n   * @param _account The address of the account from which to withdraw entrusted funds\\n   * @param _amount The pecuniary amount to withdraw in wei\\n   * @notice USE WITH CARE: Overwrites of this or the `dispatch` function without a call to the\\n   *  `_send` function may leave the balance of this safe contract untouchable.\\n   */\\n  function withdraw(address _account, uint256 _amount) external virtual {\\n    _send(_account, _account, _amount);\\n  }\\n\\n  /**\\n   * @dev See {_send}. Can be overridden to extend or restrict behaviour.\\n   * @notice USE WITH CARE: Overwrites of this or the `withdraw` function without a call to the\\n   *  `_send` function may leave the balance of this safe contract untouchable.\\n   */\\n  function dispatch(address _from, address _to, uint256 _amount) external virtual {\\n    _send(_from, _to, _amount);\\n  }\\n\\n  /**\\n   * Send an amount from the trust of the _from account to the _to address.\\n   * @dev Callable by _from only. Throws on insufficient funds or if _to is the cipher (0)\\n   *  or the burn address.\\n   * @param _from The account from which to dispatch the _amount of trust funds\\n   * @param _to The account to which to send the _amount of funds\\n   * @param _amount The pecuniary amount to send in wei\\n   */\\n  function _send(address _from, address _to, uint256 _amount) internal nonReentrant {\\n    require(_from == _msgSender(), \\\"Unauthorized account.\\\");\\n    require(_to != address(0) \\u0026\\u0026 _to != burn, \\\"Cannot dispatch safe funds to burn.\\\");\\n    require(_amount \\u003c= account(_from), \\\"Insufficient funds in trust :(\\\");\\n    _deplete(_from, _amount);\\n    (bool paid, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n    require(paid, \\\"Payment failed :(\\\");\\n  }\\n\\n  /**\\n   * @dev The `receive` function executes on calls made to the safe contract to receive ether with\\n   *  no data. Can be overridden to extend behaviour.\\n   */\\n  receive() virtual external payable {\\n    // For now, we reject any ether not sent to the vault\\u0027s safe.\\n    // Potentially, logic could be implemented to use the `_augment` function to augment the trust\\n    // of the contract owner, whereupon the owner can withdraw the funds from the vault\\u0027s safe, e.g.\\n    // _augment(owner(), msg.value);\\n    revert(\\\"Nonpayable\\\");\\n  }\\n\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"SubsidiesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"TokenCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"airDropForAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropsAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropsPerMinter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"dispatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_generationSupply\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"isTokenHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locale\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setAirdropsOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAirdops\",\"type\":\"uint256\"}],\"name\":\"setAirdropsPerMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cId\",\"type\":\"string\"}],\"name\":\"setCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExec\",\"type\":\"address\"}],\"name\":\"setExecutive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensPerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perTokenPremium\",\"type\":\"uint256\"}],\"name\":\"setPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenHeld\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PecanMilkCoop", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "995", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6eebae170c821cb7648e2bc6e63e3de24f88016ab971af7f9d97eb1b87381890"}]}