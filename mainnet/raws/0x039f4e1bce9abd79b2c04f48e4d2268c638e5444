{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// store ETH in a contract for the contract owner to withdraw after time has expired for unlock date\r\ncontract ETHLockWallet {\r\n\r\n    address public creator;\r\n    address public owner;\r\n    uint256 public unlockDate;\r\n    uint256 public createdAt;\r\n    string public message;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _creator, address _owner, uint256 _unlockDate, string memory _veryShortMessage) {\r\n        require(_creator == tx.origin || _creator == msg.sender, \"Creator must be caller\");\r\n        creator = _creator;\r\n        owner = _owner;\r\n        unlockDate = _unlockDate;\r\n        createdAt = block.timestamp;\r\n        message = _veryShortMessage;\r\n    }\r\n\r\n    // keep all the ether sent to this address\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    // callable by owner only, after specified time\r\n    function withdraw() public {\r\n        require(tx.origin == owner || msg.sender == owner);\r\n       require(block.timestamp >= unlockDate);\r\n       //now send all the balance\r\n       payable(address(owner)).transfer(address(this).balance);\r\n       emit Withdrew(msg.sender, address(this).balance);\r\n    }\r\n\r\n\r\n    // callable by owner only, after specified time, only for Tokens implementing ERC20\r\n    function withdrawTokens(address _tokenContract) public returns(uint256){\r\n        require(tx.origin == owner || msg.sender == owner);\r\n       require(block.timestamp >= unlockDate);\r\n       ERC20 token = ERC20(_tokenContract);\r\n       //now send all the token balance\r\n       uint256 tokenBalance = token.balanceOf(address(this));\r\n       token.transfer(owner, tokenBalance);\r\n       emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\r\n       return tokenBalance;\r\n    }\r\n\r\n\r\n    function walletInfo() public view returns(address, address, uint256, uint256, uint256, string memory) {\r\n        return (creator, owner, unlockDate, createdAt, address(this).balance, message);\r\n    }\r\n\r\n    event Received(address from, uint256 amount);\r\n    event Withdrew(address to, uint256 amount);\r\n    event WithdrewTokens(address tokenContract, address to, uint256 amount);\r\n}\r\n\r\n// This contract allows for a user to create a new eth holding wallet with a value that remains\r\n// locked until the lock has expired. Lock can include a short message and user that creates the lock\r\n// can specify a differnt address as owner.\r\ncontract ETHLockFactory {\r\n    ETHLockWallet private wallet;\r\n    mapping(address => address[]) private ethWalletsOwned;\r\n    mapping(address => address[]) private ethWalletsCreated;\r\n\r\n    event Withdrew(address to, uint256 amount);\r\n    event WithdrewTokens(address tokenContract, address to, uint256 amount);\r\n    event Created(address wallet, address from, address to, uint256 createdAt, uint256 unlockDate, uint256 amount);\r\n\r\n    function createETHLockWallet(address _owner, uint256 _unlockDate, string memory _veryShortMessage) payable public returns(ETHLockWallet contractAddress){\r\n        // Create new wallet.\r\n        \r\n        wallet = new ETHLockWallet(msg.sender, _owner, _unlockDate, _veryShortMessage);\r\n        \r\n        // Add wallet to sender's wallets and owner's wallets for tracking\r\n        ethWalletsOwned[_owner].push(address(wallet));\r\n        ethWalletsCreated[msg.sender].push(address(wallet));\r\n\r\n        // Send ether from this transaction to the created contract.\r\n        address(wallet).transfer(msg.value);\r\n\r\n        // Emit event.\r\n        emit Created(address(wallet), msg.sender, _owner, block.timestamp, _unlockDate, msg.value);\r\n        return wallet;\r\n    }\r\n\r\n    function getETHWalletsOwned(address _address)public view returns(address[] memory) {\r\n        return ethWalletsOwned[_address];\r\n    }\r\n    function getETHWalletsCreated(address _address)public view returns(address[] memory) {\r\n        return ethWalletsCreated[_address];\r\n    }\r\n\r\n    function getETHWalletInfo(ETHLockWallet _ethWallet) public view returns(address, address, uint256, uint256, uint256, string memory) {\r\n        return _ethWallet.walletInfo();\r\n    }\r\n    \r\n    function withdrawTokens(ETHLockWallet _ethWallet, address _tokenContract) public {\r\n        require( _ethWallet.owner() == msg.sender);\r\n        uint256 tokenBalance = _ethWallet.withdrawTokens(_tokenContract);\r\n       emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\r\n    }\r\n\r\n    function withdrawETH(ETHLockWallet _ethWallet) public {\r\n        require( _ethWallet.owner() == msg.sender);\r\n        _ethWallet.withdraw();\r\n        emit Withdrew(msg.sender, address(_ethWallet).balance);\r\n    }\r\n\r\n    // Prevents accidental sending of ether to the factory\r\n    receive () external payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_veryShortMessage\",\"type\":\"string\"}],\"name\":\"createETHLockWallet\",\"outputs\":[{\"internalType\":\"contract ETHLockWallet\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ETHLockWallet\",\"name\":\"_ethWallet\",\"type\":\"address\"}],\"name\":\"getETHWalletInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getETHWalletsCreated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getETHWalletsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ETHLockWallet\",\"name\":\"_ethWallet\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ETHLockWallet\",\"name\":\"_ethWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHLockFactory", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6cecacf0942275ca2de45c35a0ea91a658dc62e917621585540c6758c3a1b1c9"}]}