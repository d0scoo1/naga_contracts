{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/BridgeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./libraries/ProofParser.sol\\\";\\nimport \\\"./interfaces/ICrossChainBridge.sol\\\";\\nimport \\\"./SimpleTokenProxy.sol\\\";\\nimport \\\"./InternetBondProxy.sol\\\";\\n\\ncontract BridgeRouter {\\n\\n    function peggedTokenAddress(address bridge, address fromToken) public pure returns (address) {\\n        return SimpleTokenProxyUtils.simpleTokenProxyAddress(bridge, bytes32(bytes20(fromToken)));\\n    }\\n\\n    function peggedBondAddress(address bridge, address fromToken) public pure returns (address) {\\n        return InternetBondProxyUtils.internetBondProxyAddress(bridge, bytes32(bytes20(fromToken)));\\n    }\\n\\n    function factoryPeggedToken(address fromToken, address toToken, ICrossChainBridge.Metadata memory metaData, address bridge) public returns (IERC20Mintable) {\\n        /* we must use delegate call because we need to deploy new contract from bridge contract to have valid address */\\n        address targetToken = SimpleTokenProxyUtils.deploySimpleTokenProxy(bridge, bytes32(bytes20(fromToken)), metaData);\\n        require(targetToken == toToken, \\\"bad chain\\\");\\n        /* to token is our new pegged token */\\n        return IERC20Mintable(toToken);\\n    }\\n\\n    function factoryPeggedBond(address fromToken, address toToken, ICrossChainBridge.Metadata memory metaData, address bridge, address feed) public returns (IERC20Mintable) {\\n        /* we must use delegate call because we need to deploy new contract from bridge contract to have valid address */\\n        address targetToken = InternetBondProxyUtils.deployInternetBondProxy(bridge, bytes32(bytes20(fromToken)), metaData, feed);\\n        require(targetToken == toToken, \\\"bad chain\\\");\\n        /* to token is our new pegged token */\\n        return IERC20Mintable(toToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/CrossChainBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ICrossChainBridge.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./libraries/EthereumVerifier.sol\\\";\\nimport \\\"./libraries/ProofParser.sol\\\";\\nimport \\\"./libraries/Utils.sol\\\";\\nimport \\\"./SimpleToken.sol\\\";\\nimport \\\"./InternetBond.sol\\\";\\nimport \\\"./InternetBondRatioFeed.sol\\\";\\nimport \\\"./BridgeRouter.sol\\\";\\n\\ncontract CrossChainBridge is PausableUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable, ICrossChainBridge {\\n\\n    mapping(uint256 => address) private _bridgeAddressByChainId;\\n    address private _consensusAddress;\\n    mapping(bytes32 => bool) private _usedProofs;\\n    address private _tokenImplementation;\\n    mapping(address => address) private _peggedTokenOrigin;\\n    Metadata _nativeTokenMetadata;\\n    address private _bondImplementation;\\n    IInternetBondRatioFeed private _internetBondRatioFeed;\\n    BridgeRouter private _bridgeRouter;\\n\\n    function initialize(\\n        address consensusAddress,\\n        SimpleTokenFactory tokenFactory,\\n        InternetBondFactory bondFactory,\\n        string memory nativeTokenSymbol,\\n        string memory nativeTokenName,\\n        InternetBondRatioFeed bondFeed,\\n        BridgeRouter router\\n    ) public initializer {\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        __CrossChainBridge_init(consensusAddress, tokenFactory, bondFactory, nativeTokenSymbol, nativeTokenName, bondFeed, router);\\n    }\\n\\n    function getTokenImplementation() public view override returns (address) {\\n        return _tokenImplementation;\\n    }\\n\\n    function setTokenFactory(SimpleTokenFactory factory) public onlyOwner {\\n        _tokenImplementation = factory.getImplementation();\\n        require(_tokenImplementation != address(0x0));\\n        emit TokenImplementationChanged(_tokenImplementation);\\n    }\\n\\n    function getBondImplementation() public view override returns (address) {\\n        return _bondImplementation;\\n    }\\n\\n    function setBondFactory(InternetBondFactory factory) public onlyOwner {\\n        _bondImplementation = factory.getImplementation();\\n        require(_bondImplementation != address(0x0));\\n        emit BondImplementationChanged(_tokenImplementation);\\n    }\\n\\n    function getNativeAddress() public view returns (address) {\\n        return _nativeTokenMetadata.originAddress;\\n    }\\n\\n    function getOrigin(address token) internal view returns (uint256, address) {\\n        if (token == _nativeTokenMetadata.originAddress) {\\n            return (0, address(0x0));\\n        }\\n        try IERC20Pegged(token).getOrigin() returns (uint256 chain, address origin) {\\n            return (chain, origin);\\n        } catch {}\\n        return (0, address(0x0));\\n    }\\n\\n    function __CrossChainBridge_init(\\n        address consensusAddress,\\n        SimpleTokenFactory tokenFactory,\\n        InternetBondFactory bondFactory,\\n        string memory nativeTokenSymbol,\\n        string memory nativeTokenName,\\n        InternetBondRatioFeed bondFeed,\\n        BridgeRouter router\\n    ) internal {\\n        _consensusAddress = consensusAddress;\\n        _tokenImplementation = tokenFactory.getImplementation();\\n        _bondImplementation = bondFactory.getImplementation();\\n        _nativeTokenMetadata = Metadata(\\n            Utils.stringToBytes32(nativeTokenSymbol),\\n            Utils.stringToBytes32(nativeTokenName),\\n            Utils.currentChain(),\\n            // generate unique address that will not collide with any contract address\\n            address(bytes20(keccak256(abi.encodePacked(\\\"CrossChainBridge:\\\", nativeTokenSymbol)))),\\n            0x0\\n        );\\n        _internetBondRatioFeed = bondFeed;\\n        _bridgeRouter = router;\\n    }\\n\\n    // HELPER FUNCTIONS\\n\\n    function isPeggedToken(address toToken) public view override returns (bool) {\\n        return _peggedTokenOrigin[toToken] != address(0x00);\\n    }\\n\\n    function getRatio(address token) public view returns (uint256) {\\n        return _internetBondRatioFeed.getRatioFor(token);\\n    }\\n\\n    function getBondType(address token) public view returns (InternetBondType) {\\n        try IERC20InternetBond(token).isRebasing() returns (bool isRebasing) {\\n            if (isRebasing) return InternetBondType.REBASING_BOND;\\n            else return InternetBondType.NONREBASING_BOND;\\n        } catch {\\n        }\\n        return InternetBondType.NOT_BOND;\\n    }\\n\\n    function getNativeRatio(address token) public view returns (uint256) {\\n        try IERC20InternetBond(token).ratio() returns (uint256 ratio) {\\n            return ratio;\\n        } catch {\\n        }\\n        return 0;\\n    }\\n\\n    function createBondMetadata(uint8 version, InternetBondType bondType) internal pure returns (bytes32) {\\n        bytes32 result = 0x0;\\n        result |= bytes32(bytes1(version));\\n        result |= bytes32(bytes1(uint8(bondType))) >> 8;\\n        return result;\\n    }\\n\\n    // DEPOSIT FUNCTIONS\\n\\n    function deposit(uint256 toChain, address toAddress) public payable nonReentrant whenNotPaused override {\\n        _depositNative(toChain, toAddress, msg.value);\\n    }\\n\\n    function deposit(address fromToken, uint256 toChain, address toAddress, uint256 amount) public nonReentrant whenNotPaused override {\\n        (uint256 chain, address origin) = getOrigin(fromToken);\\n        if (chain != 0) {\\n            /* if we have pegged contract then its pegged token */\\n            _depositPegged(fromToken, toChain, toAddress, amount, chain, origin);\\n        } else {\\n            /* otherwise its erc20 token, since we can't detect is it erc20 token it can only return insufficient balance in case of any errors */\\n            _depositErc20(fromToken, toChain, toAddress, amount);\\n        }\\n    }\\n\\n    function _depositNative(uint256 toChain, address toAddress, uint256 totalAmount) internal {\\n        /* sender is our from address because he is locking funds */\\n        address fromAddress = address(msg.sender);\\n        /* lets determine target bridge contract */\\n        address toBridge = _bridgeAddressByChainId[toChain];\\n        require(toBridge != address(0x00), \\\"bad chain\\\");\\n        /* we need to calculate peg token contract address with meta data */\\n        address toToken = _bridgeRouter.peggedTokenAddress(address(toBridge), _nativeTokenMetadata.originAddress);\\n        /* emit event with all these params */\\n        emit DepositLocked(\\n            toChain,\\n            fromAddress, // who send these funds\\n            toAddress, // who can claim these funds in \\\"toChain\\\" network\\n            _nativeTokenMetadata.originAddress, // this is our current native token (e.g. ETH, MATIC, BNB, etc)\\n            toToken, // this is an address of our target pegged token\\n            totalAmount, // how much funds was locked in this contract\\n            _nativeTokenMetadata // meta information about\\n        );\\n    }\\n\\n    function _depositPegged(address fromToken, uint256 toChain, address toAddress, uint256 totalAmount, uint256 chain, address origin) internal {\\n        /* sender is our from address because he is locking funds */\\n        address fromAddress = address(msg.sender);\\n        /* check allowance and transfer tokens */\\n        require(IERC20Upgradeable(fromToken).balanceOf(fromAddress) >= totalAmount, \\\"insufficient balance\\\");\\n        InternetBondType bondType = getBondType(fromToken);\\n        uint256 amt;\\n        if (bondType == InternetBondType.REBASING_BOND) {\\n            amt = _peggedAmountToShares(totalAmount, getRatio(origin));\\n        } else {\\n            amt = totalAmount;\\n        }\\n        address toToken;\\n        if (bondType == InternetBondType.NOT_BOND) {\\n            toToken = _peggedDestinationErc20Token(fromToken, origin, toChain, chain);\\n        } else {\\n            toToken = _peggedDestinationErc20Bond(fromToken, origin, toChain, chain);\\n        }\\n        IERC20Mintable(fromToken).burn(fromAddress, amt);\\n        Metadata memory metaData = Metadata(\\n            Utils.stringToBytes32(IERC20Extra(fromToken).symbol()),\\n            Utils.stringToBytes32(IERC20Extra(fromToken).name()),\\n            chain,\\n            origin,\\n            createBondMetadata(0, bondType)\\n        );\\n        /* emit event with all these params */\\n        emit DepositBurned(\\n            toChain,\\n            fromAddress, // who send these funds\\n            toAddress, // who can claim these funds in \\\"toChain\\\" network\\n            fromToken, // this is our current native token (can be ETH, CLV, DOT, BNB or something else)\\n            toToken, // this is an address of our target pegged token\\n            amt, // how much funds was locked in this contract\\n            metaData,\\n            origin\\n        );\\n    }\\n\\n    function _peggedAmountToShares(uint256 amount, uint256 ratio) internal pure returns (uint256) {\\n        require(ratio > 0, \\\"zero ratio\\\");\\n        return Utils.multiplyAndDivideFloor(amount, ratio, 1e18);\\n    }\\n\\n    function _nativeAmountToShares(uint256 amount, uint256 ratio, uint8 decimals) internal pure returns (uint256) {\\n        require(ratio > 0, \\\"zero ratio\\\");\\n        return Utils.multiplyAndDivideFloor(amount, ratio, 10 ** decimals);\\n    }\\n\\n    function _depositErc20(address fromToken, uint256 toChain, address toAddress, uint256 totalAmount) internal {\\n        /* sender is our from address because he is locking funds */\\n        address fromAddress = address(msg.sender);\\n        InternetBondType bondType = getBondType(fromToken);\\n        /* check allowance and transfer tokens */\\n        {\\n            uint256 balanceBefore = IERC20(fromToken).balanceOf(address(this));\\n            uint256 allowance = IERC20(fromToken).allowance(fromAddress, address(this));\\n            require(totalAmount <= allowance, \\\"insufficient allowance\\\");\\n            require(IERC20(fromToken).transferFrom(fromAddress, address(this), totalAmount), \\\"can't transfer\\\");\\n            uint256 balanceAfter = IERC20(fromToken).balanceOf(address(this));\\n            if (bondType != InternetBondType.REBASING_BOND) {\\n                // Assert that enough coins were transferred to bridge\\n                require(balanceAfter >= balanceBefore + totalAmount, \\\"incorrect behaviour\\\");\\n            } else {\\n                // For rebasing internet bonds we can't assert that exactly totalAmount will be transferred\\n                require(balanceAfter >= balanceBefore, \\\"incorrect behaviour\\\");\\n            }\\n        }\\n        /* lets determine target bridge contract */\\n        address toBridge = _bridgeAddressByChainId[toChain];\\n        require(toBridge != address(0x00), \\\"bad chain\\\");\\n        /* lets pack ERC20 token meta data and scale amount to 18 decimals */\\n        uint256 chain = Utils.currentChain();\\n        uint256 amt;\\n        if (bondType != InternetBondType.REBASING_BOND) {\\n            amt = _amountErc20Token(fromToken, totalAmount);\\n        } else {\\n            amt = _amountErc20Bond(fromToken, totalAmount, getNativeRatio(fromToken));\\n        }\\n        address toToken;\\n        if (bondType == InternetBondType.NOT_BOND) {\\n            toToken = _bridgeRouter.peggedTokenAddress(address(toBridge), fromToken);\\n        } else {\\n            toToken = _bridgeRouter.peggedBondAddress(address(toBridge), fromToken);\\n        }\\n        Metadata memory metaData = Metadata(\\n            Utils.stringToBytes32(IERC20Extra(fromToken).symbol()),\\n            Utils.stringToBytes32(IERC20Extra(fromToken).name()),\\n            chain,\\n            fromToken,\\n            createBondMetadata(0, bondType)\\n        );\\n        /* emit event with all these params */\\n        emit DepositLocked(\\n            toChain,\\n            fromAddress, // who send these funds\\n            toAddress, // who can claim these funds in \\\"toChain\\\" network\\n            fromToken, // this is our current native token (can be ETH, CLV, DOT, BNB or something else)\\n            toToken, // this is an address of our target pegged token\\n            amt, // how much funds was locked in this contract\\n            metaData // meta information about\\n        );\\n    }\\n\\n    function _peggedDestinationErc20Token(address fromToken, address origin, uint256 toChain, uint originChain) internal view returns (address) {\\n        /* lets determine target bridge contract */\\n        address toBridge = _bridgeAddressByChainId[toChain];\\n        require(toBridge != address(0x00), \\\"bad chain\\\");\\n        require(_peggedTokenOrigin[fromToken] == origin, \\\"non-pegged contract not supported\\\");\\n        if (toChain == originChain) {\\n            return _peggedTokenOrigin[fromToken];\\n        } else {\\n            return _bridgeRouter.peggedTokenAddress(address(toBridge), origin);\\n        }\\n    }\\n\\n    function _peggedDestinationErc20Bond(address fromToken, address origin, uint256 toChain, uint originChain) internal view returns (address) {\\n        /* lets determine target bridge contract */\\n        address toBridge = _bridgeAddressByChainId[toChain];\\n        require(toBridge != address(0x00), \\\"bad chain\\\");\\n        require(_peggedTokenOrigin[fromToken] == origin, \\\"non-pegged contract not supported\\\");\\n        if (toChain == originChain) {\\n            return _peggedTokenOrigin[fromToken];\\n        } else {\\n            return _bridgeRouter.peggedBondAddress(address(toBridge), origin);\\n        }\\n    }\\n\\n    function _amountErc20Token(address fromToken, uint256 totalAmount) internal returns (uint256) {\\n        /* lets pack ERC20 token meta data and scale amount to 18 decimals */\\n        require(IERC20Extra(fromToken).decimals() <= 18, \\\"decimals overflow\\\");\\n        totalAmount *= (10 ** (18 - IERC20Extra(fromToken).decimals()));\\n        return totalAmount;\\n    }\\n\\n    function _amountErc20Bond(address fromToken, uint256 totalAmount, uint256 nativeRatio) internal returns (uint256) {\\n        /* lets pack ERC20 token meta data and scale amount to 18 decimals */\\n        uint8 decimals = IERC20Extra(fromToken).decimals();\\n        require(decimals <= 18, \\\"decimals overflow\\\");\\n        uint256 totalShares = _nativeAmountToShares(totalAmount, nativeRatio, decimals);\\n        totalShares *= (10 ** (18 - decimals));\\n        return totalShares;\\n    }\\n\\n    function _currentChainNativeMetaData() internal view returns (Metadata memory) {\\n        return _nativeTokenMetadata;\\n    }\\n\\n    // WITHDRAWAL FUNCTIONS\\n\\n    function withdraw(\\n        bytes calldata /* encodedProof */,\\n        bytes calldata rawReceipt,\\n        bytes memory proofSignature\\n    ) external nonReentrant whenNotPaused override {\\n        uint256 proofOffset;\\n        uint256 receiptOffset;\\n        assembly {\\n            proofOffset := add(0x4, calldataload(4))\\n            receiptOffset := add(0x4, calldataload(36))\\n        }\\n        /* we must parse and verify that tx and receipt matches */\\n        (EthereumVerifier.State memory state, EthereumVerifier.PegInType pegInType) = EthereumVerifier.parseTransactionReceipt(receiptOffset);\\n        ProofParser.Proof memory proof = ProofParser.parseProof(proofOffset);\\n        require(_bridgeAddressByChainId[proof.chainId] == state.contractAddress, \\\"crosschain event from not allowed contract\\\");\\n        state.receiptHash = keccak256(rawReceipt);\\n        proof.status = 0x01; // execution must be successful\\n        proof.receiptHash = state.receiptHash; // ensure that rawReceipt is preimage of receiptHash\\n        bytes32 hash;\\n        assembly {\\n            hash := keccak256(proof, 0x100)\\n        }\\n        // we can trust receipt only if proof is signed by consensus\\n        require(ECDSAUpgradeable.recover(hash, proofSignature) == _consensusAddress, \\\"bad signature\\\");\\n        // withdraw funds to recipient\\n        _withdraw(state, pegInType, hash);\\n    }\\n\\n    function _withdraw(EthereumVerifier.State memory state, EthereumVerifier.PegInType pegInType, bytes32 proofHash) internal {\\n        /* make sure these proofs wasn't used before */\\n        require(!_usedProofs[proofHash], \\\"proof already used\\\");\\n        _usedProofs[proofHash] = true;\\n        if (state.toToken == _nativeTokenMetadata.originAddress) {\\n            _withdrawNative(state);\\n        } else if (pegInType == EthereumVerifier.PegInType.Lock) {\\n            _withdrawPegged(state, state.fromToken);\\n        } else if (state.toToken != state.originToken) {\\n            // origin token is not deployed by our bridge so collision is not possible\\n            _withdrawPegged(state, state.originToken);\\n        } else {\\n            _withdrawErc20(state);\\n        }\\n    }\\n\\n    function _withdrawNative(EthereumVerifier.State memory state) internal {\\n        state.toAddress.transfer(state.totalAmount);\\n        emit WithdrawUnlocked(\\n            state.receiptHash,\\n            state.fromAddress,\\n            state.toAddress,\\n            state.fromToken,\\n            state.toToken,\\n            state.totalAmount\\n        );\\n    }\\n\\n    function _withdrawPegged(EthereumVerifier.State memory state, address origin) internal {\\n        /* create pegged token if it doesn't exist */\\n        Metadata memory metadata = EthereumVerifier.getMetadata(state);\\n        InternetBondType bondType = InternetBondType(uint8(metadata.bondMetadata[1]));\\n        if (bondType == InternetBondType.NOT_BOND) {\\n            _factoryPeggedToken(state.toToken, metadata);\\n        } else {\\n            _factoryPeggedBond(state.toToken, metadata);\\n        }\\n        /* mint tokens (NB: mint for bonds accepts amount in shares) */\\n        IERC20Mintable(state.toToken).mint(state.toAddress, state.totalAmount);\\n        /* emit peg-out event (its just informative event) */\\n        emit WithdrawMinted(\\n            state.receiptHash,\\n            state.fromAddress,\\n            state.toAddress,\\n            state.fromToken,\\n            state.toToken,\\n            state.totalAmount\\n        );\\n    }\\n\\n    function _withdrawErc20(EthereumVerifier.State memory state) internal {\\n        Metadata memory metadata = EthereumVerifier.getMetadata(state);\\n        InternetBondType bondType = InternetBondType(uint8(metadata.bondMetadata[1]));\\n        /* we need to rescale this amount */\\n        uint8 decimals = IERC20Extra(state.toToken).decimals();\\n        require(decimals <= 18, \\\"decimals overflow\\\");\\n        uint256 scaledAmount = state.totalAmount / (10 ** (18 - decimals));\\n        if (bondType == InternetBondType.REBASING_BOND) {\\n            scaledAmount = Utils.multiplyAndDivideCeil(scaledAmount, 10 ** decimals, getNativeRatio(state.toToken));\\n        }\\n        /* transfer tokens and make sure behaviour is correct (just in case) */\\n        uint256 balanceBefore = IERC20(state.toToken).balanceOf(state.toAddress);\\n        require(IERC20Upgradeable(state.toToken).transfer(state.toAddress, scaledAmount), \\\"can't transfer\\\");\\n        uint256 balanceAfter = IERC20(state.toToken).balanceOf(state.toAddress);\\n        require(balanceBefore <= balanceAfter, \\\"incorrect behaviour\\\");\\n        /* emit peg-out event (its just informative event) */\\n        emit WithdrawUnlocked(\\n            state.receiptHash,\\n            state.fromAddress,\\n            state.toAddress,\\n            state.fromToken,\\n            state.toToken,\\n            state.totalAmount\\n        );\\n    }\\n\\n    // OWNER MAINTENANCE FUNCTIONS (owner functions will be reduced in future releases)\\n\\n    function factoryPeggedToken(uint256 fromChain, Metadata calldata metaData) external onlyOwner override {\\n        // make sure this chain is supported\\n        require(_bridgeAddressByChainId[fromChain] != address(0x00), \\\"bad contract\\\");\\n        // calc target token\\n        address toToken = _bridgeRouter.peggedTokenAddress(address(this), metaData.originAddress);\\n        require(_peggedTokenOrigin[toToken] == address(0x00), \\\"already exists\\\");\\n        // deploy new token (its just a warmup operation)\\n        _factoryPeggedToken(toToken, metaData);\\n    }\\n\\n    function _factoryPeggedToken(address toToken, Metadata memory metaData) internal returns (IERC20Mintable) {\\n        address fromToken = metaData.originAddress;\\n        /* if pegged token exist we can just return its address */\\n        if (_peggedTokenOrigin[toToken] != address(0x00)) {\\n            return IERC20Mintable(toToken);\\n        }\\n        /* we must use delegate call because we need to deploy new contract from bridge contract to have valid address */\\n        (bool success, bytes memory returnValue) = address(_bridgeRouter).delegatecall(\\n            abi.encodeWithSignature(\\\"factoryPeggedToken(address,address,(bytes32,bytes32,uint256,address,bytes32),address)\\\", fromToken, toToken, metaData, address(this))\\n        );\\n        if (!success) {\\n            // preserving error message\\n            uint256 returnLength = returnValue.length;\\n            assembly {\\n                revert(add(returnValue, 0x20), returnLength)\\n            }\\n        }\\n        /* now we can mark this token as pegged */\\n        _peggedTokenOrigin[toToken] = fromToken;\\n        /* to token is our new pegged token */\\n        return IERC20Mintable(toToken);\\n    }\\n\\n    function factoryPeggedBond(uint256 fromChain, Metadata calldata metaData) external onlyOwner override {\\n        // make sure this chain is supported\\n        require(_bridgeAddressByChainId[fromChain] != address(0x00), \\\"bad contract\\\");\\n        // calc target token\\n        address toToken = _bridgeRouter.peggedBondAddress(address(this), metaData.originAddress);\\n        require(_peggedTokenOrigin[toToken] == address(0x00), \\\"already exists\\\");\\n        // deploy new token (its just a warmup operation)\\n        _factoryPeggedBond(toToken, metaData);\\n    }\\n\\n    function _factoryPeggedBond(address toToken, Metadata memory metaData) internal returns (IERC20Mintable) {\\n        address fromToken = metaData.originAddress;\\n        if (_peggedTokenOrigin[toToken] != address(0x00)) {\\n            return IERC20Mintable(toToken);\\n        }\\n        /* we must use delegate call because we need to deploy new contract from bridge contract to have valid address */\\n        (bool success, bytes memory returnValue) = address(_bridgeRouter).delegatecall(\\n            abi.encodeWithSignature(\\\"factoryPeggedBond(address,address,(bytes32,bytes32,uint256,address,bytes32),address,address)\\\", fromToken, toToken, metaData, address(this), address(_internetBondRatioFeed))\\n        );\\n        if (!success) {\\n            // preserving error message\\n            uint256 returnLength = returnValue.length;\\n            assembly {\\n                revert(add(returnValue, 0x20), returnLength)\\n            }\\n        }\\n        /* now we can mark this token as pegged */\\n        _peggedTokenOrigin[toToken] = fromToken;\\n        /* to token is our new pegged token */\\n        return IERC20Mintable(toToken);\\n    }\\n\\n    function addAllowedContract(address allowedContract, uint256 toChain) public onlyOwner {\\n        require(_bridgeAddressByChainId[toChain] == address(0x00), \\\"already allowed\\\");\\n        require(toChain > 0, \\\"chain id must be positive\\\");\\n        _bridgeAddressByChainId[toChain] = allowedContract;\\n        emit ContractAllowed(allowedContract, toChain);\\n    }\\n\\n    function removeAllowedContract(uint256 toChain) public onlyOwner {\\n        require(_bridgeAddressByChainId[toChain] != address(0x00), \\\"already disallowed\\\");\\n        require(toChain > 0, \\\"chain id must be positive\\\");\\n        address wasContract = _bridgeAddressByChainId[toChain];\\n        delete _bridgeAddressByChainId[toChain];\\n        emit ContractDisallowed(wasContract, toChain);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function changeConsensus(address consensus) public onlyOwner {\\n        require(consensus != address(0x0), \\\"zero address disallowed\\\");\\n        _consensusAddress = consensus;\\n        emit ConsensusChanged(_consensusAddress);\\n    }\\n\\n    function changeRouter(address router) public onlyOwner {\\n        require(router != address(0x0), \\\"zero address disallowed\\\");\\n        _bridgeRouter = BridgeRouter(router);\\n        // We don't have special event for router change since it's very special technical contract\\n        // In future changing router will be disallowed\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/InternetBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IInternetBondRatioFeed.sol\\\";\\nimport \\\"./SimpleToken.sol\\\";\\nimport \\\"./libraries/Utils.sol\\\";\\n\\ncontract InternetBond is SimpleToken, IERC20InternetBond {\\n\\n    IInternetBondRatioFeed public ratioFeed;\\n    bool internal _rebasing;\\n\\n    function ratio() public view override returns (uint256) {\\n        return ratioFeed.getRatioFor(_originAddress);\\n    }\\n\\n    function isRebasing() public view override returns (bool) {\\n        return _rebasing;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _sharesToBonds(super.totalSupply());\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _sharesToBonds(super.balanceOf(account));\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        uint256 shares = _bondsToShares(amount);\\n        _transfer(_msgSender(), recipient, shares, false);\\n        emit Transfer(_msgSender(), recipient, _sharesToBonds(shares));\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _sharesToBonds(super.allowance(owner, spender));\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        uint256 shares = _bondsToShares(amount);\\n        _approve(_msgSender(), spender, shares, false);\\n        emit Approval(_msgSender(), spender, allowance(_msgSender(), spender));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 shares = _bondsToShares(amount);\\n        _increaseAllowance(_msgSender(), spender, shares, false);\\n        emit Approval(_msgSender(), spender, allowance(_msgSender(), spender));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 shares = _bondsToShares(amount);\\n        _decreaseAllowance(_msgSender(), spender, shares, false);\\n        emit Approval(_msgSender(), spender, allowance(_msgSender(), spender));\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        uint256 shares = _bondsToShares(amount);\\n        _transfer(sender, recipient, shares, false);\\n        emit Transfer(sender, recipient, _sharesToBonds(shares));\\n        _decreaseAllowance(sender, _msgSender(), shares, false);\\n        emit Approval(sender, _msgSender(), allowance(sender, _msgSender()));\\n        return true;\\n    }\\n\\n    // NB: mint accepts amount in shares\\n    function mint(address account, uint256 shares) public onlyOwner override {\\n        require(account != address(0));\\n        _totalSupply += shares;\\n        _balances[account] += shares;\\n        emit Transfer(address(0), account, _sharesToBonds(shares));\\n    }\\n\\n    // NB: burn accepts amount in shares\\n    function burn(address account, uint256 shares) public onlyOwner override {\\n        require(account != address(0));\\n        _balances[account] -= shares;\\n        _totalSupply -= shares;\\n        emit Transfer(account, address(0), _sharesToBonds(shares));\\n    }\\n\\n    function _sharesToBonds(uint256 amount) internal view returns (uint256) {\\n        if (_rebasing) {\\n            uint256 currentRatio = ratio();\\n            require(currentRatio > 0, \\\"ratio not available\\\");\\n            return Utils.multiplyAndDivideCeil(amount, 10 ** decimals(), currentRatio);\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    function _bondsToShares(uint256 amount) internal view returns (uint256) {\\n        if (_rebasing) {\\n            uint256 currentRatio = ratio();\\n            require(currentRatio > 0, \\\"ratio not available\\\");\\n            return Utils.multiplyAndDivideFloor(amount, currentRatio, 10 ** decimals());\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    function initAndObtainOwnership(bytes32 symbol, bytes32 name, uint256 originChain, address originAddress, address ratioFeedAddress, bool rebasing) external emptyOwner {\\n        super.initAndObtainOwnership(symbol, name, originChain, originAddress);\\n        require(ratioFeedAddress != address(0x0), \\\"no ratio feed\\\");\\n        ratioFeed = IInternetBondRatioFeed(ratioFeedAddress);\\n        _rebasing = rebasing;\\n    }\\n}\\n\\ncontract InternetBondFactory {\\n    address private _template;\\n    constructor() {\\n        _template = InternetBondFactoryUtils.deployInternetBondTemplate(this);\\n    }\\n\\n    function getImplementation() public view returns (address) {\\n        return _template;\\n    }\\n}\\n\\nlibrary InternetBondFactoryUtils {\\n\\n    bytes32 constant internal INTERNET_BOND_TEMPLATE_SALT = keccak256(\\\"InternetBondTemplateV1\\\");\\n\\n    bytes constant internal INTERNET_BOND_TEMPLATE_BYTECODE = hex\\\"608060405234801561001057600080fd5b506110c0806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806371ca337d116100ad5780639dc29fac116100715780639dc29fac1461026b578063a457c2d71461027e578063a9059cbb14610291578063dd62ed3e146102a4578063df1f29ee146102b757600080fd5b806371ca337d1461020a5780638da5cb5b146102125780638e29ebb51461023d57806394bfed881461025057806395d89b411461026357600080fd5b8063313ce567116100f4578063313ce567146101b057806339509351146101bf57806340c10f19146101d25780635dfba115146101e557806370a08231146101f757600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd14610188578063265535671461019b575b600080fd5b6101396102da565b6040516101469190610e14565b60405180910390f35b61016261015d366004610d2a565b6102ec565b6040519015158152602001610146565b61017a610348565b604051908152602001610146565b610162610196366004610cee565b61035b565b6101ae6101a9366004610d93565b610400565b005b60405160128152602001610146565b6101626101cd366004610d2a565b61049e565b6101ae6101e0366004610d2a565b6104b9565b600854600160a01b900460ff16610162565b61017a610205366004610ca0565b610560565b61017a610582565b600254610225906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b600854610225906001600160a01b031681565b6101ae61025e366004610d54565b610606565b610139610657565b6101ae610279366004610d2a565b610664565b61016261028c366004610d2a565b6106f9565b61016261029f366004610d2a565b610714565b61017a6102b2366004610cbb565b610752565b600654600754604080519283526001600160a01b03909116602083015201610146565b60606102e760015461078a565b905090565b6000806102f883610860565b905061030733858360006108e6565b6001600160a01b0384163360008051602061106b83398151915261032b8288610752565b60405190815260200160405180910390a360019150505b92915050565b60006102e761035660055490565b61097c565b60008061036783610860565b905061037685858360006109f9565b836001600160a01b0316856001600160a01b031660008051602061104b8339815191526103a28461097c565b60405190815260200160405180910390a36103c08533836000610ab2565b336001600160a01b03861660008051602061106b8339815191526103e48884610752565b60405190815260200160405180910390a3506001949350505050565b6002546001600160a01b03161561041657600080fd5b61042286868686610606565b6001600160a01b03821661046d5760405162461bcd60e51b815260206004820152600d60248201526c1b9bc81c985d1a5bc819995959609a1b60448201526064015b60405180910390fd5b60088054911515600160a01b026001600160a81b03199092166001600160a01b039093169290921717905550505050565b6000806104aa83610860565b90506103073385836000610b5f565b6002546001600160a01b031633146104d057600080fd5b6001600160a01b0382166104e357600080fd5b80600560008282546104f59190610e69565b90915550506001600160a01b03821660009081526003602052604081208054839290610522908490610e69565b90915550506001600160a01b038216600060008051602061104b83398151915261054b8461097c565b60405190815260200160405180910390a35050565b6001600160a01b0381166000908152600360205260408120546103429061097c565b60085460075460405163a1f1d48d60e01b81526001600160a01b039182166004820152600092919091169063a1f1d48d9060240160206040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e79190610dfb565b6002546001600160a01b03161561061c57600080fd5b60028054336001600160a01b031991821617909155600094909455600192909255600655600780549092166001600160a01b03909116179055565b60606102e760005461078a565b6002546001600160a01b0316331461067b57600080fd5b6001600160a01b03821661068e57600080fd5b6001600160a01b038216600090815260036020526040812080548392906106b6908490610fc7565b9250508190555080600560008282546106cf9190610fc7565b90915550600090506001600160a01b03831660008051602061104b83398151915261054b8461097c565b60008061070583610860565b90506103073385836000610ab2565b60008061072083610860565b905061072f33858360006109f9565b6001600160a01b0384163360008051602061104b83398151915261032b8461097c565b6001600160a01b0380831660009081526004602090815260408083209385168352929052908120546107839061097c565b9392505050565b6060816107a557505060408051600081526020810190915290565b600060105b60ff8116156107fc57836107be8284610e81565b60ff16602081106107d1576107d161101e565b1a60f81b6001600160f81b031916156107f1576107ee8183610e81565b91505b60011c607f166107aa565b50600061080a826001610e81565b60ff1667ffffffffffffffff81111561082557610825611034565b6040519080825280601f01601f19166020018201604052801561084f576020820181803683370190505b506020810194909452509192915050565b600854600090600160a01b900460ff16156108dd57600061087f610582565b9050600081116108c75760405162461bcd60e51b8152602060048201526013602482015272726174696f206e6f7420617661696c61626c6560681b6044820152606401610464565b61078383826108d86012600a610efd565b610bbc565b5090565b919050565b6001600160a01b0384166108f957600080fd5b6001600160a01b03831661090c57600080fd5b6001600160a01b038085166000908152600460209081526040808320938716835292905220829055801561097657826001600160a01b0316846001600160a01b031660008051602061106b8339815191528460405161096d91815260200190565b60405180910390a35b50505050565b600854600090600160a01b900460ff16156108dd57600061099b610582565b9050600081116109e35760405162461bcd60e51b8152602060048201526013602482015272726174696f206e6f7420617661696c61626c6560681b6044820152606401610464565b610783836109f36012600a610efd565b83610c01565b6001600160a01b038416610a0c57600080fd5b6001600160a01b038316610a1f57600080fd5b6001600160a01b03841660009081526003602052604081208054849290610a47908490610fc7565b90915550506001600160a01b03831660009081526003602052604081208054849290610a74908490610e69565b9091555050801561097657826001600160a01b0316846001600160a01b031660008051602061104b8339815191528460405161096d91815260200190565b6001600160a01b038416610ac557600080fd5b6001600160a01b038316610ad857600080fd5b6001600160a01b03808516600090815260046020908152604080832093871683529290529081208054849290610b0f908490610fc7565b90915550508015610976576001600160a01b0384811660008181526004602090815260408083209488168084529482529182902054915191825260008051602061106b833981519152910161096d565b6001600160a01b038416610b7257600080fd5b6001600160a01b038316610b8557600080fd5b6001600160a01b03808516600090815260046020908152604080832093871683529290529081208054849290610b0f908490610e69565b6000610bf9610bd4610bce8487610ea6565b85610c3e565b8385610be08289610fde565b610bea9190610fa8565b610bf49190610ea6565b610c71565b949350505050565b6000610bf9610c13610bce8487610ea6565b83610c1f600182610fc7565b86610c2a878a610fde565b610c349190610fa8565b610bea9190610e69565b600082610c4d57506000610342565b82820282848281610c6057610c60611008565b041461078357600019915050610342565b60008282018381101561078357600019915050610342565b80356001600160a01b03811681146108e157600080fd5b600060208284031215610cb257600080fd5b61078382610c89565b60008060408385031215610cce57600080fd5b610cd783610c89565b9150610ce560208401610c89565b90509250929050565b600080600060608486031215610d0357600080fd5b610d0c84610c89565b9250610d1a60208501610c89565b9150604084013590509250925092565b60008060408385031215610d3d57600080fd5b610d4683610c89565b946020939093013593505050565b60008060008060808587031215610d6a57600080fd5b843593506020850135925060408501359150610d8860608601610c89565b905092959194509250565b60008060008060008060c08789031215610dac57600080fd5b863595506020870135945060408701359350610dca60608801610c89565b9250610dd860808801610c89565b915060a08701358015158114610ded57600080fd5b809150509295509295509295565b600060208284031215610e0d57600080fd5b5051919050565b600060208083528351808285015260005b81811015610e4157858101830151858201604001528201610e25565b81811115610e53576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610e7c57610e7c610ff2565b500190565b600060ff821660ff84168060ff03821115610e9e57610e9e610ff2565b019392505050565b600082610eb557610eb5611008565b500490565b600181815b80851115610ef5578160001904821115610edb57610edb610ff2565b80851615610ee857918102915b93841c9390800290610ebf565b509250929050565b600061078360ff841683600082610f1657506001610342565b81610f2357506000610342565b8160018114610f395760028114610f4357610f5f565b6001915050610342565b60ff841115610f5457610f54610ff2565b50506001821b610342565b5060208310610133831016604e8410600b8410161715610f82575081810a610342565b610f8c8383610eba565b8060001904821115610fa057610fa0610ff2565b029392505050565b6000816000190483118215151615610fc257610fc2610ff2565b500290565b600082821015610fd957610fd9610ff2565b500390565b600082610fed57610fed611008565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a26469706673582212202704c0c85a7ffefb8570f6c29df5c6522044694561363ba9c4f84b992471d3fb64736f6c63430008060033\\\";\\n\\n    bytes32 constant internal INTERNET_BOND_TEMPLATE_HASH = keccak256(INTERNET_BOND_TEMPLATE_BYTECODE);\\n\\n    function deployInternetBondTemplate(InternetBondFactory templateFactory) internal returns (address) {\\n        /* we can use any deterministic salt here, since we don't care about it */\\n        bytes32 salt = INTERNET_BOND_TEMPLATE_SALT;\\n        /* concat bytecode with constructor */\\n        bytes memory bytecode = INTERNET_BOND_TEMPLATE_BYTECODE;\\n        /* deploy contract and store result in result variable */\\n        address result;\\n        assembly {\\n            result := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(result != address(0x00), \\\"deploy failed\\\");\\n        /* check that generated contract address is correct */\\n        require(result == internetBondTemplateAddress(templateFactory), \\\"address mismatched\\\");\\n        return result;\\n    }\\n\\n    function internetBondTemplateAddress(InternetBondFactory templateFactory) internal pure returns (address) {\\n        bytes32 hash = keccak256(abi.encodePacked(uint8(0xff), address(templateFactory), INTERNET_BOND_TEMPLATE_SALT, INTERNET_BOND_TEMPLATE_HASH));\\n        return address(bytes20(hash << 96));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/InternetBondProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"./interfaces/ICrossChainBridge.sol\\\";\\n\\ncontract InternetBondProxy {\\n\\n    bytes32 private constant BEACON_SLOT = bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1);\\n\\n    fallback() external {\\n        address bridge;\\n        bytes32 slot = BEACON_SLOT;\\n        assembly {\\n            bridge := sload(slot)\\n        }\\n        address impl = ICrossChainBridge(bridge).getBondImplementation();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {revert(0, returndatasize())}\\n            default {return (0, returndatasize())}\\n        }\\n    }\\n\\n    function setBeacon(address newBeacon) external {\\n        address beacon;\\n        bytes32 slot = BEACON_SLOT;\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n        require(beacon == address(0x00));\\n        assembly {\\n            sstore(slot, newBeacon)\\n        }\\n    }\\n}\\n\\nlibrary InternetBondProxyUtils {\\n\\n    bytes constant internal INTERNET_BOND_PROXY_BYTECODE = hex\\\"608060405234801561001057600080fd5b50610215806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d42afb56146100fd575b60008061005960017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b60001b9050805491506000826001600160a01b0316631626425c6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d79190610185565b90503660008037600080366000845af43d6000803e8080156100f8573d6000f35b3d6000fd5b61011061010b366004610161565b610112565b005b60008061014060017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b8054925090506001600160a01b0382161561015a57600080fd5b9190915550565b60006020828403121561017357600080fd5b813561017e816101c7565b9392505050565b60006020828403121561019757600080fd5b815161017e816101c7565b6000828210156101c257634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146101dc57600080fd5b5056fea2646970667358221220d283edebb1e56b63c1cf809c7a7219bbf056c367c289dabb51fdba5f71cdf44c64736f6c63430008060033\\\";\\n\\n    bytes32 constant internal INTERNET_BOND_PROXY_HASH = keccak256(INTERNET_BOND_PROXY_BYTECODE);\\n\\n    bytes4 constant internal SET_META_DATA_SIG = bytes4(keccak256(\\\"initAndObtainOwnership(bytes32,bytes32,uint256,address,address,bool)\\\"));\\n    bytes4 constant internal SET_BEACON_SIG = bytes4(keccak256(\\\"setBeacon(address)\\\"));\\n\\n    function deployInternetBondProxy(address bridge, bytes32 salt, ICrossChainBridge.Metadata memory metaData, address ratioFeed) internal returns (address) {\\n        /* lets concat bytecode with constructor parameters */\\n        bytes memory bytecode = INTERNET_BOND_PROXY_BYTECODE;\\n        /* deploy new contract and store contract address in result variable */\\n        address result;\\n        assembly {\\n            result := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(result != address(0x00), \\\"deploy failed\\\");\\n        /* setup impl */\\n        (bool success, bytes memory returnValue) = result.call(abi.encodePacked(SET_BEACON_SIG, abi.encode(bridge)));\\n        require(success, string(abi.encodePacked(\\\"setBeacon failed: \\\", returnValue)));\\n        /* setup meta data */\\n        bytes memory inputData = new bytes(0xc4);\\n        bool isRebasing = metaData.bondMetadata[1] == bytes1(0x01);\\n        bytes4 selector = SET_META_DATA_SIG;\\n        assembly {\\n            mstore(add(inputData, 0x20), selector)\\n            mstore(add(inputData, 0x24), mload(metaData))\\n            mstore(add(inputData, 0x44), mload(add(metaData, 0x20)))\\n            mstore(add(inputData, 0x64), mload(add(metaData, 0x40)))\\n            mstore(add(inputData, 0x84), mload(add(metaData, 0x60)))\\n            mstore(add(inputData, 0xa4), ratioFeed)\\n            mstore(add(inputData, 0xc4), isRebasing)\\n        }\\n        (success, returnValue) = result.call(inputData);\\n        require(success, string(abi.encodePacked(\\\"set metadata failed: \\\", returnValue)));\\n        /* return generated contract address */\\n        return result;\\n    }\\n\\n    function internetBondProxyAddress(address deployer, bytes32 salt) internal pure returns (address) {\\n        bytes32 bytecodeHash = keccak256(INTERNET_BOND_PROXY_BYTECODE);\\n        bytes32 hash = keccak256(abi.encodePacked(uint8(0xff), address(deployer), salt, bytecodeHash));\\n        return address(bytes20(hash << 96));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/InternetBondRatioFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IInternetBondRatioFeed.sol\\\";\\n\\ncontract InternetBondRatioFeed is OwnableUpgradeable, IInternetBondRatioFeed {\\n\\n    event OperatorAdded(address operator);\\n    event OperatorRemoved(address operator);\\n\\n    mapping(address => bool) _isOperator;\\n    mapping(address => uint256) private _ratios;\\n\\n    function initialize(address operator) public initializer {\\n        __Ownable_init();\\n        _isOperator[operator] = true;\\n    }\\n\\n    function updateRatioBatch(address[] calldata addresses, uint256[] calldata ratios) public override onlyOperator {\\n        require(addresses.length == ratios.length, \\\"corrupted ratio data\\\");\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _ratios[addresses[i]] = ratios[i];\\n        }\\n    }\\n\\n    function getRatioFor(address token) public view override returns (uint256) {\\n        return _ratios[token];\\n    }\\n\\n    function addOperator(address operator) public onlyOwner {\\n        require(operator != address(0x0), \\\"operator must be non-zero\\\");\\n        require(!_isOperator[operator], \\\"already operator\\\");\\n        _isOperator[operator] = true;\\n        emit OperatorAdded(operator);\\n    }\\n\\n    function removeOperator(address operator) public onlyOwner {\\n        require(_isOperator[operator], \\\"not an operator\\\");\\n        delete _isOperator[operator];\\n        emit OperatorRemoved(operator);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == owner() || _isOperator[msg.sender], \\\"Operator: not allowed\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/SimpleToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract SimpleToken is Context, IERC20, IERC20Mintable, IERC20Pegged {\\n\\n    // pre-defined state\\n    bytes32 internal _symbol; // 0\\n    bytes32 internal _name; // 1\\n    address public owner; // 2\\n\\n    // internal state\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n    uint256 internal _originChain;\\n    address internal _originAddress;\\n\\n    function name() public view returns (string memory) {\\n        return bytes32ToString(_name);\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return bytes32ToString(_symbol);\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        if (_bytes32 == 0) {\\n            return new string(0);\\n        }\\n        uint8 cntNonZero = 0;\\n        for (uint8 i = 16; i > 0; i >>= 1) {\\n            if (_bytes32[cntNonZero + i] != 0) cntNonZero += i;\\n        }\\n        string memory result = new string(cntNonZero + 1);\\n        assembly {\\n            mstore(add(result, 0x20), _bytes32)\\n        }\\n        return result;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount, true);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount, true);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 amount) public virtual returns (bool) {\\n        _increaseAllowance(_msgSender(), spender, amount, true);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 amount) public virtual returns (bool) {\\n        _decreaseAllowance(_msgSender(), spender, amount, true);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount, true);\\n        _decreaseAllowance(sender, _msgSender(), amount, true);\\n        return true;\\n    }\\n\\n    function _increaseAllowance(address owner, address spender, uint256 amount, bool emitEvent) internal {\\n        require(owner != address(0));\\n        require(spender != address(0));\\n        _allowances[owner][spender] += amount;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, _allowances[owner][spender]);\\n        }\\n    }\\n\\n    function _decreaseAllowance(address owner, address spender, uint256 amount, bool emitEvent) internal {\\n        require(owner != address(0));\\n        require(spender != address(0));\\n        _allowances[owner][spender] -= amount;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, _allowances[owner][spender]);\\n        }\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount, bool emitEvent) internal {\\n        require(owner != address(0));\\n        require(spender != address(0));\\n        _allowances[owner][spender] = amount;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, amount);\\n        }\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount, bool emitEvent) internal {\\n        require(sender != address(0));\\n        require(recipient != address(0));\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        if (emitEvent) {\\n            emit Transfer(sender, recipient, amount);\\n        }\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner virtual override {\\n        require(account != address(0));\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public onlyOwner virtual override {\\n        require(account != address(0));\\n        _balances[account] -= amount;\\n        _totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    modifier emptyOwner() {\\n        require(owner == address(0x00));\\n        _;\\n    }\\n\\n    function initAndObtainOwnership(bytes32 symbol, bytes32 name, uint256 originChain, address originAddress) public emptyOwner {\\n        owner = msg.sender;\\n        _symbol = symbol;\\n        _name = name;\\n        _originChain = originChain;\\n        _originAddress = originAddress;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOrigin() public view override returns (uint256, address) {\\n        return (_originChain, _originAddress);\\n    }\\n}\\n\\ncontract SimpleTokenFactory {\\n    address private _template;\\n    constructor() {\\n        _template = SimpleTokenFactoryUtils.deploySimpleTokenTemplate(this);\\n    }\\n\\n    function getImplementation() public view returns (address) {\\n        return _template;\\n    }\\n}\\n\\nlibrary SimpleTokenFactoryUtils {\\n\\n    bytes32 constant internal SIMPLE_TOKEN_TEMPLATE_SALT = keccak256(\\\"SimpleTokenTemplateV1\\\");\\n\\n    bytes constant internal SIMPLE_TOKEN_TEMPLATE_BYTECODE = hex\\\"608060405234801561001057600080fd5b50610a7f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063a457c2d711610066578063a457c2d714610224578063a9059cbb14610237578063dd62ed3e1461024a578063df1f29ee1461028357600080fd5b80638da5cb5b146101cb57806394bfed88146101f657806395d89b41146102095780639dc29fac1461021157600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a57806340c10f191461018d57806370a08231146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d6102a6565b60405161011a919061095e565b60405180910390f35b6101366101313660046108f5565b6102b8565b604051901515815260200161011a565b6005545b60405190815260200161011a565b6101366101663660046108b9565b6102d0565b6040516012815260200161011a565b6101366101883660046108f5565b6102f6565b6101a061019b3660046108f5565b610305565b005b61014a6101b0366004610864565b6001600160a01b031660009081526003602052604090205490565b6002546101de906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b6101a061020436600461091f565b6103b9565b61010d61040a565b6101a061021f3660046108f5565b610417565b6101366102323660046108f5565b6104c5565b6101366102453660046108f5565b6104d4565b61014a610258366004610886565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b600654600754604080519283526001600160a01b0390911660208301520161011a565b60606102b36001546104e3565b905090565b60006102c733848460016105b9565b50600192915050565b60006102df8484846001610661565b6102ec843384600161072c565b5060019392505050565b60006102c733848460016107eb565b6002546001600160a01b0316331461031c57600080fd5b6001600160a01b03821661032f57600080fd5b806005600082825461034191906109b3565b90915550506001600160a01b0382166000908152600360205260408120805483929061036e9084906109b3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6002546001600160a01b0316156103cf57600080fd5b60028054336001600160a01b031991821617909155600094909455600192909255600655600780549092166001600160a01b03909116179055565b60606102b36000546104e3565b6002546001600160a01b0316331461042e57600080fd5b6001600160a01b03821661044157600080fd5b6001600160a01b038216600090815260036020526040812080548392906104699084906109f0565b92505081905550806005600082825461048291906109f0565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016103ad565b60006102c7338484600161072c565b60006102c73384846001610661565b6060816104fe57505060408051600081526020810190915290565b600060105b60ff811615610555578361051782846109cb565b60ff166020811061052a5761052a610a1d565b1a60f81b6001600160f81b0319161561054a5761054781836109cb565b91505b60011c607f16610503565b5060006105638260016109cb565b60ff1667ffffffffffffffff81111561057e5761057e610a33565b6040519080825280601f01601f1916602001820160405280156105a8576020820181803683370190505b506020810194909452509192915050565b6001600160a01b0384166105cc57600080fd5b6001600160a01b0383166105df57600080fd5b6001600160a01b038085166000908152600460209081526040808320938716835292905220829055801561065b57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161065291815260200190565b60405180910390a35b50505050565b6001600160a01b03841661067457600080fd5b6001600160a01b03831661068757600080fd5b6001600160a01b038416600090815260036020526040812080548492906106af9084906109f0565b90915550506001600160a01b038316600090815260036020526040812080548492906106dc9084906109b3565b9091555050801561065b57826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161065291815260200190565b6001600160a01b03841661073f57600080fd5b6001600160a01b03831661075257600080fd5b6001600160a01b038085166000908152600460209081526040808320938716835292905290812080548492906107899084906109f0565b9091555050801561065b576001600160a01b038481166000818152600460209081526040808320948816808452948252918290205491519182527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610652565b6001600160a01b0384166107fe57600080fd5b6001600160a01b03831661081157600080fd5b6001600160a01b038085166000908152600460209081526040808320938716835292905290812080548492906107899084906109b3565b80356001600160a01b038116811461085f57600080fd5b919050565b60006020828403121561087657600080fd5b61087f82610848565b9392505050565b6000806040838503121561089957600080fd5b6108a283610848565b91506108b060208401610848565b90509250929050565b6000806000606084860312156108ce57600080fd5b6108d784610848565b92506108e560208501610848565b9150604084013590509250925092565b6000806040838503121561090857600080fd5b61091183610848565b946020939093013593505050565b6000806000806080858703121561093557600080fd5b84359350602085013592506040850135915061095360608601610848565b905092959194509250565b600060208083528351808285015260005b8181101561098b5785810183015185820160400152820161096f565b8181111561099d576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156109c6576109c6610a07565b500190565b600060ff821660ff84168060ff038211156109e8576109e8610a07565b019392505050565b600082821015610a0257610a02610a07565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fe9609dd4d099f8ee61d515b2ebf66a53d24e78cf669be48b69b627acefde71564736f6c63430008060033\\\";\\n\\n    bytes32 constant internal SIMPLE_TOKEN_TEMPLATE_HASH = keccak256(SIMPLE_TOKEN_TEMPLATE_BYTECODE);\\n\\n    bytes4 constant internal SET_META_DATA_SIG = bytes4(keccak256(\\\"obtainOwnership(bytes32,bytes32)\\\"));\\n\\n    function deploySimpleTokenTemplate(SimpleTokenFactory templateFactory) internal returns (address) {\\n        /* we can use any deterministic salt here, since we don't care about it */\\n        bytes32 salt = SIMPLE_TOKEN_TEMPLATE_SALT;\\n        /* concat bytecode with constructor */\\n        bytes memory bytecode = SIMPLE_TOKEN_TEMPLATE_BYTECODE;\\n        /* deploy contract and store result in result variable */\\n        address result;\\n        assembly {\\n            result := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(result != address(0x00), \\\"deploy failed\\\");\\n        /* check that generated contract address is correct */\\n        require(result == simpleTokenTemplateAddress(templateFactory), \\\"address mismatched\\\");\\n        return result;\\n    }\\n\\n    function simpleTokenTemplateAddress(SimpleTokenFactory templateFactory) internal pure returns (address) {\\n        bytes32 hash = keccak256(abi.encodePacked(uint8(0xff), address(templateFactory), SIMPLE_TOKEN_TEMPLATE_SALT, SIMPLE_TOKEN_TEMPLATE_HASH));\\n        return address(bytes20(hash << 96));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/SimpleTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"./interfaces/ICrossChainBridge.sol\\\";\\n\\ncontract SimpleTokenProxy {\\n\\n    bytes32 private constant BEACON_SLOT = bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1);\\n\\n    fallback() external {\\n        address bridge;\\n        bytes32 slot = BEACON_SLOT;\\n        assembly {\\n            bridge := sload(slot)\\n        }\\n        address impl = ICrossChainBridge(bridge).getTokenImplementation();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {revert(0, returndatasize())}\\n            default {return (0, returndatasize())}\\n        }\\n    }\\n\\n    function setBeacon(address newBeacon) external {\\n        address beacon;\\n        bytes32 slot = BEACON_SLOT;\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n        require(beacon == address(0x00));\\n        assembly {\\n            sstore(slot, newBeacon)\\n        }\\n    }\\n}\\n\\nlibrary SimpleTokenProxyUtils {\\n\\n    bytes constant internal SIMPLE_TOKEN_PROXY_BYTECODE = hex\\\"608060405234801561001057600080fd5b50610215806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d42afb56146100fd575b60008061005960017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b60001b9050805491506000826001600160a01b031663709bc7f36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d79190610185565b90503660008037600080366000845af43d6000803e8080156100f8573d6000f35b3d6000fd5b61011061010b366004610161565b610112565b005b60008061014060017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b8054925090506001600160a01b0382161561015a57600080fd5b9190915550565b60006020828403121561017357600080fd5b813561017e816101c7565b9392505050565b60006020828403121561019757600080fd5b815161017e816101c7565b6000828210156101c257634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146101dc57600080fd5b5056fea2646970667358221220e6ae4b3dc2474e43ff609e19eb520ce54b6f38170a43a6f96541360be5efc2b464736f6c63430008060033\\\";\\n\\n    bytes32 constant internal SIMPLE_TOKEN_PROXY_HASH = keccak256(SIMPLE_TOKEN_PROXY_BYTECODE);\\n\\n    bytes4 constant internal SET_META_DATA_SIG = bytes4(keccak256(\\\"initAndObtainOwnership(bytes32,bytes32,uint256,address)\\\"));\\n    bytes4 constant internal SET_BEACON_SIG = bytes4(keccak256(\\\"setBeacon(address)\\\"));\\n\\n    function deploySimpleTokenProxy(address bridge, bytes32 salt, ICrossChainBridge.Metadata memory metaData) internal returns (address) {\\n        /* lets concat bytecode with constructor parameters */\\n        bytes memory bytecode = SIMPLE_TOKEN_PROXY_BYTECODE;\\n        /* deploy new contract and store contract address in result variable */\\n        address result;\\n        assembly {\\n            result := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(result != address(0x00), \\\"deploy failed\\\");\\n        /* setup impl */\\n        (bool success,) = result.call(abi.encodePacked(SET_BEACON_SIG, abi.encode(bridge)));\\n        require(success, \\\"setBeacon failed\\\");\\n        /* setup meta data */\\n        (success,) = result.call(abi.encodePacked(SET_META_DATA_SIG, abi.encode(metaData)));\\n        require(success, \\\"set metadata failed\\\");\\n        /* return generated contract address */\\n        return result;\\n    }\\n\\n    function simpleTokenProxyAddress(address deployer, bytes32 salt) internal pure returns (address) {\\n        bytes32 bytecodeHash = keccak256(SIMPLE_TOKEN_PROXY_BYTECODE);\\n        bytes32 hash = keccak256(abi.encodePacked(uint8(0xff), address(deployer), salt, bytecodeHash));\\n        return address(bytes20(hash << 96));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ICrossChainBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ninterface ICrossChainBridge {\\n\\n    event ContractAllowed(address contractAddress, uint256 toChain);\\n    event ContractDisallowed(address contractAddress, uint256 toChain);\\n    event ConsensusChanged(address consensusAddress);\\n    event TokenImplementationChanged(address consensusAddress);\\n    event BondImplementationChanged(address consensusAddress);\\n\\n    struct Metadata {\\n        bytes32 symbol;\\n        bytes32 name;\\n        uint256 originChain;\\n        address originAddress;\\n        bytes32 bondMetadata; // encoded metadata version, bond type\\n    }\\n\\n    event DepositLocked(\\n        uint256 chainId,\\n        address indexed fromAddress,\\n        address indexed toAddress,\\n        address fromToken,\\n        address toToken,\\n        uint256 totalAmount,\\n        Metadata metadata\\n    );\\n    event DepositBurned(\\n        uint256 chainId,\\n        address indexed fromAddress,\\n        address indexed toAddress,\\n        address fromToken,\\n        address toToken,\\n        uint256 totalAmount,\\n        Metadata metadata,\\n        address originToken\\n    );\\n\\n    event WithdrawMinted(\\n        bytes32 receiptHash,\\n        address indexed fromAddress,\\n        address indexed toAddress,\\n        address fromToken,\\n        address toToken,\\n        uint256 totalAmount\\n    );\\n    event WithdrawUnlocked(\\n        bytes32 receiptHash,\\n        address indexed fromAddress,\\n        address indexed toAddress,\\n        address fromToken,\\n        address toToken,\\n        uint256 totalAmount\\n    );\\n\\n    enum InternetBondType {\\n        NOT_BOND,\\n        REBASING_BOND,\\n        NONREBASING_BOND\\n    }\\n\\n    function isPeggedToken(address toToken) external returns (bool);\\n\\n    function deposit(uint256 toChain, address toAddress) payable external;\\n\\n    function deposit(address fromToken, uint256 toChain, address toAddress, uint256 amount) external;\\n\\n    function withdraw(bytes calldata encodedProof, bytes calldata rawReceipt, bytes calldata receiptRootSignature) external;\\n\\n    function factoryPeggedToken(uint256 fromChain, Metadata calldata metaData) external;\\n\\n    function factoryPeggedBond(uint256 fromChain, Metadata calldata metaData) external;\\n\\n    function getTokenImplementation() external returns (address);\\n\\n    function getBondImplementation() external returns (address);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mintable {\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\\ninterface IERC20Pegged {\\n\\n    function getOrigin() external view returns (uint256, address);\\n}\\n\\ninterface IERC20Extra {\\n\\n    function name() external returns (string memory);\\n\\n    function decimals() external returns (uint8);\\n\\n    function symbol() external returns (string memory);\\n}\\n\\ninterface IERC20InternetBond {\\n\\n    function ratio() external view returns (uint256);\\n\\n    function isRebasing() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IInternetBondRatioFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\ninterface IInternetBondRatioFeed {\\n\\n    function updateRatioBatch(address[] calldata addresses, uint256[] calldata ratios) external;\\n\\n    function getRatioFor(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/CallDataRLPReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.6;\\n\\nlibrary CallDataRLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    function beginIteration(uint256 listOffset) internal pure returns (uint256 iter) {\\n        return listOffset + _payloadOffset(listOffset);\\n    }\\n\\n    function next(uint256 iter) internal pure returns (uint256 nextIter) {\\n        return iter + itemLength(iter);\\n    }\\n\\n    function payloadLen(uint256 ptr, uint256 len) internal pure returns (uint256) {\\n        return len - _payloadOffset(ptr);\\n    }\\n\\n    function toAddress(uint256 ptr) internal pure returns (address) {\\n        return address(uint160(toUint(ptr, 21)));\\n    }\\n\\n    function toUint(uint256 ptr, uint256 len) internal pure returns (uint256) {\\n        require(len > 0 && len <= 33);\\n        uint256 offset = _payloadOffset(ptr);\\n        uint256 numLen = len - offset;\\n\\n        uint256 result;\\n        assembly {\\n            result := calldataload(add(ptr, offset))\\n            // cut off redundant bytes\\n            result := shr(mul(8, sub(32, numLen)), result)\\n        }\\n        return result;\\n    }\\n\\n    function toUintStrict(uint256 ptr) internal pure returns (uint256) {\\n        // one byte prefix\\n        uint256 result;\\n        assembly {\\n            result := calldataload(add(ptr, 1))\\n        }\\n        return result;\\n    }\\n\\n    function rawDataPtr(uint256 ptr) internal pure returns (uint256) {\\n        return ptr + _payloadOffset(ptr);\\n    }\\n\\n    // @return entire rlp item byte length\\n    function itemLength(uint callDataPtr) internal pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, calldataload(callDataPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                callDataPtr := add(callDataPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := shr(mul(8, sub(32, byteLen)), calldataload(callDataPtr))\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        }\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                callDataPtr := add(callDataPtr, 1)\\n\\n                let dataLen := shr(mul(8, sub(32, byteLen)), calldataload(callDataPtr))\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 callDataPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, calldataload(callDataPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/EthereumVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"./CallDataRLPReader.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"../interfaces/ICrossChainBridge.sol\\\";\\n\\nlibrary EthereumVerifier {\\n\\n    bytes32 constant TOPIC_PEG_IN_LOCKED = keccak256(\\\"DepositLocked(uint256,address,address,address,address,uint256,(bytes32,bytes32,uint256,address,bytes32))\\\");\\n    bytes32 constant TOPIC_PEG_IN_BURNED = keccak256(\\\"DepositBurned(uint256,address,address,address,address,uint256,(bytes32,bytes32,uint256,address,bytes32),address)\\\");\\n\\n    enum PegInType {\\n        None,\\n        Lock,\\n        Burn\\n    }\\n\\n    struct State {\\n        bytes32 receiptHash;\\n        address contractAddress;\\n        uint256 chainId;\\n        address fromAddress;\\n        address payable toAddress;\\n        address fromToken;\\n        address toToken;\\n        uint256 totalAmount;\\n        // metadata fields (we can't use Metadata struct here because of Solidity struct memory layout)\\n        bytes32 symbol;\\n        bytes32 name;\\n        uint256 originChain;\\n        address originAddress;\\n        bytes32 bondMetadata;\\n        address originToken;\\n    }\\n\\n    function getMetadata(State memory state) internal pure returns (ICrossChainBridge.Metadata memory) {\\n        ICrossChainBridge.Metadata memory metadata;\\n        assembly {\\n            metadata := add(state, 0x100)\\n        }\\n        return metadata;\\n    }\\n\\n    function parseTransactionReceipt(uint256 receiptOffset) internal view returns (State memory, PegInType pegInType) {\\n        State memory state;\\n        /* parse peg-in data from logs */\\n        uint256 iter = CallDataRLPReader.beginIteration(receiptOffset + 0x20);\\n        {\\n            /* postStateOrStatus - we must ensure that tx is not reverted */\\n            uint256 statusOffset = iter;\\n            iter = CallDataRLPReader.next(iter);\\n            require(CallDataRLPReader.payloadLen(statusOffset, iter - statusOffset) == 1, \\\"tx is reverted\\\");\\n        }\\n        /* skip cumulativeGasUsed */\\n        iter = CallDataRLPReader.next(iter);\\n        /* logs - we need to find our logs */\\n        uint256 logs = iter;\\n        iter = CallDataRLPReader.next(iter);\\n        uint256 logsIter = CallDataRLPReader.beginIteration(logs);\\n        for (; logsIter < iter;) {\\n            uint256 log = logsIter;\\n            logsIter = CallDataRLPReader.next(logsIter);\\n            /* make sure there is only one peg-in event in logs */\\n            PegInType logType = _decodeReceiptLogs(state, log);\\n            if (logType != PegInType.None) {\\n                require(pegInType == PegInType.None, \\\"multiple logs\\\");\\n                pegInType = logType;\\n            }\\n        }\\n        /* don't allow to process if peg-in type is unknown */\\n        require(pegInType != PegInType.None, \\\"missing logs\\\");\\n        return (state, pegInType);\\n    }\\n\\n    function _decodeReceiptLogs(\\n        State memory state,\\n        uint256 log\\n    ) internal view returns (PegInType pegInType) {\\n        uint256 logIter = CallDataRLPReader.beginIteration(log);\\n        address contractAddress;\\n        {\\n            /* parse smart contract address */\\n            uint256 addressOffset = logIter;\\n            logIter = CallDataRLPReader.next(logIter);\\n            contractAddress = CallDataRLPReader.toAddress(addressOffset);\\n        }\\n        /* topics */\\n        bytes32 mainTopic;\\n        address fromAddress;\\n        address toAddress;\\n        {\\n            uint256 topicsIter = logIter;\\n            logIter = CallDataRLPReader.next(logIter);\\n            // Must be 3 topics RLP encoded: event signature, fromAddress, toAddress\\n            // Each topic RLP encoded is 33 bytes (0xa0[32 bytes data])\\n            // Total payload: 99 bytes. Since it's list with total size bigger than 55 bytes we need 2 bytes prefix (0xf863)\\n            // So total size of RLP encoded topics array must be 101\\n            if (CallDataRLPReader.itemLength(topicsIter) != 101) {\\n                return PegInType.None;\\n            }\\n            topicsIter = CallDataRLPReader.beginIteration(topicsIter);\\n            mainTopic = bytes32(CallDataRLPReader.toUintStrict(topicsIter));\\n            topicsIter = CallDataRLPReader.next(topicsIter);\\n            fromAddress = address(bytes20(uint160(CallDataRLPReader.toUintStrict(topicsIter))));\\n            topicsIter = CallDataRLPReader.next(topicsIter);\\n            toAddress = address(bytes20(uint160(CallDataRLPReader.toUintStrict(topicsIter))));\\n            topicsIter = CallDataRLPReader.next(topicsIter);\\n            require(topicsIter == logIter); // safety check that iteration is finished\\n        }\\n\\n        uint256 ptr = CallDataRLPReader.rawDataPtr(logIter);\\n        logIter = CallDataRLPReader.next(logIter);\\n        uint256 len = logIter - ptr;\\n        {\\n            // parse logs based on topic type and check that event data has correct length\\n            uint256 expectedLen;\\n            if (mainTopic == TOPIC_PEG_IN_LOCKED) {\\n                expectedLen = 0x120;\\n                pegInType = PegInType.Lock;\\n            } else if (mainTopic == TOPIC_PEG_IN_BURNED) {\\n                expectedLen = 0x140;\\n                pegInType = PegInType.Burn;\\n            } else {\\n                return PegInType.None;\\n            }\\n            if (len != expectedLen) {\\n                return PegInType.None;\\n            }\\n        }\\n        {\\n            // read chain id separately and verify that contract that emitted event is relevant\\n            uint256 chainId;\\n            assembly {\\n                chainId := calldataload(ptr)\\n            }\\n            if (chainId != Utils.currentChain()) return PegInType.None;\\n            // All checks are passed after this point, no errors allowed and we can modify state\\n            state.chainId = chainId;\\n            ptr += 0x20;\\n            len -= 0x20;\\n        }\\n\\n        {\\n            uint256 structOffset;\\n            assembly {\\n                // skip 5 fields: receiptHash, contractAddress, chainId, fromAddress, toAddress\\n                structOffset := add(state, 0xa0)\\n                calldatacopy(structOffset, ptr, len)\\n            }\\n        }\\n        state.contractAddress = contractAddress;\\n        state.fromAddress = fromAddress;\\n        state.toAddress = payable(toAddress);\\n        return pegInType;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/ProofParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"./CallDataRLPReader.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary ProofParser {\\n\\n    // Proof is message format signed by the protocol. It contains somewhat redundant information, so only part\\n    // of the proof could be passed into the contract and other part can be inferred from transaction receipt\\n    struct Proof {\\n        uint256 chainId;\\n        uint256 status;\\n        bytes32 transactionHash;\\n        uint256 blockNumber;\\n        bytes32 blockHash;\\n        uint256 transactionIndex;\\n        bytes32 receiptHash;\\n        uint256 transferAmount;\\n    }\\n\\n    function parseProof(uint256 proofOffset) internal pure returns (Proof memory) {\\n        Proof memory proof;\\n        uint256 dataOffset = proofOffset + 0x20;\\n        assembly {\\n            calldatacopy(proof, dataOffset, 0x20) // 1 field (chainId)\\n            dataOffset := add(dataOffset, 0x20)\\n            calldatacopy(add(proof, 0x40), dataOffset, 0x80) // 4 fields * 0x20 = 0x80\\n            dataOffset := add(dataOffset, 0x80)\\n            calldatacopy(add(proof, 0xe0), dataOffset, 0x20) // transferAmount\\n        }\\n        return proof;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libraries/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.6;\\n\\nimport \\\"../SimpleToken.sol\\\";\\n\\nlibrary Utils {\\n\\n    function currentChain() internal view returns (uint256) {\\n        uint256 chain;\\n        assembly {\\n            chain := chainid()\\n        }\\n        return chain;\\n    }\\n\\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    function saturatingMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (a == 0) return 0;\\n            uint256 c = a * b;\\n            if (c / a != b) return type(uint256).max;\\n            return c;\\n        }\\n    }\\n\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return type(uint256).max;\\n            return c;\\n        }\\n    }\\n\\n    // Preconditions:\\n    //  1. a may be arbitrary (up to 2 ** 256 - 1)\\n    //  2. b * c < 2 ** 256\\n    // Returned value: min(floor((a * b) / c), 2 ** 256 - 1)\\n    function multiplyAndDivideFloor(uint256 a, uint256 b, uint256 c) internal pure returns (uint256) {\\n        return saturatingAdd(\\n            saturatingMultiply(a / c, b),\\n            ((a % c) * b) / c // can't fail because of assumption 2.\\n        );\\n    }\\n\\n    // Preconditions:\\n    //  1. a may be arbitrary (up to 2 ** 256 - 1)\\n    //  2. b * c < 2 ** 256\\n    // Returned value: min(ceil((a * b) / c), 2 ** 256 - 1)\\n    function multiplyAndDivideCeil(uint256 a, uint256 b, uint256 c) internal pure returns (uint256) {\\n        return saturatingAdd(\\n            saturatingMultiply(a / c, b),\\n            ((a % c) * b + (c - 1)) / c // can't fail because of assumption 2.\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"}],\"name\":\"BondImplementationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"}],\"name\":\"ConsensusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"ContractAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"ContractDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bondMetadata\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ICrossChainBridge.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"}],\"name\":\"DepositBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bondMetadata\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ICrossChainBridge.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"DepositLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"}],\"name\":\"TokenImplementationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"addAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"changeConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bondMetadata\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICrossChainBridge.Metadata\",\"name\":\"metaData\",\"type\":\"tuple\"}],\"name\":\"factoryPeggedBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bondMetadata\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICrossChainBridge.Metadata\",\"name\":\"metaData\",\"type\":\"tuple\"}],\"name\":\"factoryPeggedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBondType\",\"outputs\":[{\"internalType\":\"enum ICrossChainBridge.InternetBondType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getNativeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"contract SimpleTokenFactory\",\"name\":\"tokenFactory\",\"type\":\"address\"},{\"internalType\":\"contract InternetBondFactory\",\"name\":\"bondFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nativeTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nativeTokenName\",\"type\":\"string\"},{\"internalType\":\"contract InternetBondRatioFeed\",\"name\":\"bondFeed\",\"type\":\"address\"},{\"internalType\":\"contract BridgeRouter\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"isPeggedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"removeAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InternetBondFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setBondFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SimpleTokenFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rawReceipt\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofSignature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrossChainBridge", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}