{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n/*\r\nBusiness Source License 1.1\r\n\r\nLicense text copyright \u00a9 2017 MariaDB Corporation Ab, All Rights Reserved.\r\n\"Business Source License\" is a trademark of MariaDB Corporation Ab.\r\n\r\nTerms\r\n\r\nThe Licensor hereby grants you the right to copy, modify, create derivative\r\nworks, redistribute, and make non-production use of the Licensed Work. The\r\nLicensor may make an Additional Use Grant, above, permitting limited\r\nproduction use.\r\n\r\nEffective on the Change Date, or the fourth anniversary of the first publicly\r\navailable distribution of a specific version of the Licensed Work under this\r\nLicense, whichever comes first, the Licensor hereby grants you rights under\r\nthe terms of the Change License, and the rights granted in the paragraph\r\nabove terminate.\r\n\r\nIf your use of the Licensed Work does not comply with the requirements\r\ncurrently in effect as described in this License, you must purchase a\r\ncommercial license from the Licensor, its affiliated entities, or authorized\r\nresellers, or you must refrain from using the Licensed Work.\r\n\r\nAll copies of the original and modified Licensed Work, and derivative works\r\nof the Licensed Work, are subject to this License. This License applies\r\nseparately for each version of the Licensed Work and the Change Date may vary\r\nfor each version of the Licensed Work released by Licensor.\r\n\r\nYou must conspicuously display this License on each original or modified copy\r\nof the Licensed Work. If you receive the Licensed Work in original or\r\nmodified form from a third party, the terms and conditions set forth in this\r\nLicense apply to your use of that work.\r\n\r\nAny use of the Licensed Work in violation of this License will automatically\r\nterminate your rights under this License for the current and all other\r\nversions of the Licensed Work.\r\n\r\nThis License does not grant you any right in any trademark or logo of\r\nLicensor or its affiliates (provided that you may use a trademark or logo of\r\nLicensor as expressly required by this License).\r\n\r\nTO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON\r\nAN \u201cAS IS\u201d BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,\r\nEXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND\r\nTITLE.\r\n\r\nMariaDB hereby grants you permission to use this License\u2019s text to license\r\nyour works, and to refer to it using the trademark \u201cBusiness Source License\u201d,\r\nas long as you comply with the Covenants of Licensor below.\r\n\r\nCovenants of Licensor\r\n\r\nIn consideration of the right to use this License\u2019s text and the \u201cBusiness\r\nSource License\u201d name and trademark, Licensor covenants to MariaDB, and to all\r\nother recipients of the licensed work to be provided by Licensor:\r\n\r\n1. To specify as the Change License the GPL Version 2.0 or any later version,\r\n   or a license that is compatible with GPL Version 2.0 or a later version,\r\n   where \u201ccompatible\u201d means that software provided under the Change License can\r\n   be included in a program with software provided under GPL Version 2.0 or a\r\n   later version. Licensor may specify additional Change Licenses without\r\n   limitation.\r\n\r\n2. To either: (a) specify an additional grant of rights to use that does not\r\n   impose any additional restriction on the right granted in this License, as\r\n   the Additional Use Grant; or (b) insert the text \u201cNone\u201d.\r\n\r\n3. To specify a Change Date.\r\n\r\n4. Not to modify this License in any other way.\r\n*/\r\n\r\npragma solidity ^0.8.12;\r\n\r\ninterface IBasicERC20 {\r\n\r\n    function balanceOf(\r\n        address _account\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        external\r\n        returns (bool success);\r\n}\r\n\r\npragma solidity ^0.8.12;\r\n\r\ncontract CerbySwapV1_Vault {\r\n\r\n    address token;\r\n    address constant CER_USD_TOKEN = 0x333333f9E4ba7303f1ac0BF8fE1F47d582629194;\r\n    address constant factory = 0x777777C4e9f6E52bC71e15b7C87a85431D956F2D;\r\n\r\n    error CerbySwapV1_Vault_SafeTransferNativeFailed();\r\n    error CerbySwapV1_Vault_CallerIsNotFactory();\r\n    error CerbySwapV1_Vault_AlreadyInitialized();\r\n    error CerbySwapV1_Vault_SafeTransferFailed();\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyFactory {\r\n        if (msg.sender != factory) {\r\n            revert CerbySwapV1_Vault_CallerIsNotFactory();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _token\r\n    )\r\n        external\r\n    {\r\n        // initialize contract only once\r\n        if (token != address(0)) {\r\n            revert CerbySwapV1_Vault_AlreadyInitialized();\r\n        }\r\n\r\n        token = _token;\r\n    }\r\n\r\n    function withdrawEth(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        external\r\n        onlyFactory\r\n    {\r\n        // refer to https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\r\n        (bool success, ) = _to.call{value: _value}(new bytes(0));\r\n\r\n        // we allow only successfull calls\r\n        if (!success) {\r\n            revert CerbySwapV1_Vault_SafeTransferNativeFailed();\r\n        }\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        external\r\n        onlyFactory\r\n    {\r\n        // refer to https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0xa9059cbb, _to, _value));\r\n        \r\n        // we allow successfull calls with (true) or without return data\r\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) {\r\n            revert CerbySwapV1_Vault_SafeTransferFailed();\r\n        }\r\n    }\r\n\r\n    function token0()\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return token;\r\n    }\r\n\r\n    function token1()\r\n        external\r\n        pure\r\n        returns (address)\r\n    {\r\n        return CER_USD_TOKEN;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"CerbySwapV1_Vault_AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CerbySwapV1_Vault_CallerIsNotFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CerbySwapV1_Vault_SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CerbySwapV1_Vault_SafeTransferNativeFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CerbySwapV1_Vault", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd2635a764634242836d315206c8fa33424c1dd219d9b663ef41e22880ba4911"}]}