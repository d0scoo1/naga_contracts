{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Blocklist.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Blocklist\\n * @dev This contract manages a list of addresses and has a simple CRUD\\n */\\ncontract Blocklist is Ownable  {\\n  /**\\n   * @dev The index of each user in the list\\n   */\\n  mapping(address => uint256) private _userIndex;\\n\\n  /**\\n   * @dev The list itself\\n   */\\n  address[] private _userList;\\n\\n  /**\\n   * @notice Event emitted when a user is added to the blocklist\\n   */\\n  event addedToBlocklist(address indexed account, address by);\\n\\n  /**\\n   * @notice Event emitted when a user is removed from the blocklist\\n   */\\n  event removedFromBlocklist(address indexed account, address by);\\n\\n  /**\\n   * @notice Modifier to facilitate checking the blocklist\\n   */\\n  modifier onlyInBlocklist(address account) {\\n    require(isBlocklisted(account), \\\"Not in blocklist\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier to facilitate checking the blocklist\\n   */\\n  modifier onlyNotInBlocklist(address account) {\\n    require(!isBlocklisted(account), \\\"Already in blocklist\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Adds an address to the blocklist\\n   * @param account The address to add\\n   * @return true if the operation succeeded\\n   * @dev Fails if the address was already blocklisted\\n   */\\n  function _addToBlocklist(address account) private onlyNotInBlocklist(account) returns (bool) {\\n    _userIndex[account] = _userList.length;\\n    _userList.push(account);\\n\\n    emit addedToBlocklist(account, msg.sender);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Adds many addresses to the blocklist at once\\n   * @param accounts[] The list of addresses to add\\n   * @dev Fails if at least one of the addresses was already blocklisted\\n   */\\n  function batchAddToBlocklist(address[] calldata accounts) external onlyOwner {\\n    uint256 accountLength = accounts.length;\\n    for (uint256 i; i < accountLength;) {\\n      require(_addToBlocklist(accounts[i]));\\n      unchecked { ++i; }\\n    }\\n  }\\n\\n  /**\\n   * @notice Adds an address to the blocklist\\n   * @param account The address to add\\n   * @return true if the operation succeeded\\n   * @dev Fails if the address was already blocklisted\\n   */\\n  function addToBlocklist(address account) external onlyOwner returns (bool) {\\n    return _addToBlocklist(account);\\n  }\\n\\n  /**\\n   * @dev Removes an address from the blocklist\\n   * @param account The address to remove\\n   * @return true if the operation succeeds\\n   * @dev Fails if the address was not blocklisted\\n   */\\n  function _removeFromBlocklist(address account) private onlyInBlocklist(account) returns (bool) {\\n    uint256 rowToDelete = _userIndex[account];\\n    address keyToMove = _userList[_userList.length - 1];\\n    _userList[rowToDelete] = keyToMove;\\n    _userIndex[keyToMove] = rowToDelete;\\n    _userList.pop();\\n\\n    emit removedFromBlocklist(account, msg.sender);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Removes many addresses from the blocklist at once\\n   * @param accounts[] The list of addresses to remove\\n   * @dev Fails if at least one of the addresses was not blocklisted\\n   */\\n  function batchRemoveFromBlocklist(address[] calldata accounts) external onlyOwner {\\n    uint256 accountLength = accounts.length;\\n    for (uint256 i; i < accountLength;) {\\n      require(_removeFromBlocklist(accounts[i]));\\n      unchecked { ++i; }\\n    }\\n  }\\n\\n  /**\\n   * @notice Removes an address from the blocklist\\n   * @param account The address to remove\\n   * @dev Fails if the address was not blocklisted\\n   * @return true if the operation succeeded\\n   */\\n  function removeFromBlocklist(address account) external onlyOwner returns (bool) {\\n    return _removeFromBlocklist(account);\\n  }\\n\\n  /**\\n   * @notice Consults whether an address is blocklisted\\n   * @param account The address to check\\n   * @return bool True if the address is blocklisted\\n   */\\n  function isBlocklisted(address account) public view returns (bool) {\\n    if (_userList.length == 0) return false;\\n\\n    // We don't want to throw when querying for an out-of-bounds index.\\n    // It can happen when the list has been shrunk after a deletion.\\n    if (_userIndex[account] >= _userList.length) return false;\\n\\n    return _userList[_userIndex[account]] == account;\\n  }\\n\\n  /**\\n   * @notice Fetches the list of all blocklisted addresses\\n   * @return array The list of currently blocklisted addresses\\n   */\\n  function getFullList() public view returns (address[] memory) {\\n    return _userList;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"addedToBlocklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"removedFromBlocklist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlocklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchAddToBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchRemoveFromBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlocklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlocklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Blocklist", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}