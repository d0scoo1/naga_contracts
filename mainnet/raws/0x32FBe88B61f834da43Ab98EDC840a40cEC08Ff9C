{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ApeClaimBonusManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.2;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC721Enumerable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport\\\"ApeClaimBonus.sol\\\";\\n\\ninterface IClaim {\\n\\tfunction claim() external;\\n}\\n\\ncontract ApeClaimBonusManager is Ownable {\\n\\tIGrape public constant GRAPE = IGrape(0x025C6da5BD0e6A5dd1350fda9e3B6a614B205a1F);\\n\\tIERC20 public constant APE = IERC20(0x4d224452801ACEd8B2F0aebE155379bb5D594381);\\n\\tIERC721Enumerable public constant ALPHA = IERC721Enumerable(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);\\n\\tIERC721Enumerable public constant BETA = IERC721Enumerable(0x60E4d786628Fea6478F785A6d7e704777c86a7c6);\\n\\tIERC721Enumerable public constant GAMMA = IERC721Enumerable(0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623);\\n\\n\\tuint256 constant ALPHA_SHARE = 10094 ether;\\n\\tuint256 constant BETA_SHARE = 2042 ether;\\n\\tuint256 constant GAMMA_SHARE = 856 ether;\\n\\n\\tuint256 constant A_B_COMMS = 45;\\n\\tuint256 constant G_COMMS = 45;\\n\\tuint256 constant OUR_COMMS = 10;\\n\\n\\tbool setup;\\n\\taddress public claimer;\\n\\tmapping(address => mapping(uint256 => address)) public assetToUser;\\n\\n\\tevent AlphaDeposited(address indexed user, uint256 tokenId);\\n\\tevent BetaDeposited(address indexed user, uint256 tokenId);\\n\\tevent GammaDeposited(address indexed user, uint256 tokenId);\\n\\n\\tevent AlphaWithdrawn(address indexed user, uint256 tokenId);\\n\\tevent BetaWithdrawn(address indexed user, uint256 tokenId);\\n\\tevent GammaWithdrawn(address indexed user, uint256 tokenId);\\n\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n\\n\\tfunction init(address _claimer) external onlyOwner {\\n\\t\\trequire(!setup);\\n\\t\\tsetup = true;\\n\\t\\tclaimer = _claimer;\\n\\t}\\n\\n\\tfunction fetchApe() external onlyOwner {\\n\\t\\tAPE.transfer(msg.sender, APE.balanceOf(address(this)));\\n\\t}\\n\\n\\t// In the case a user sends an asset directly to the contract...\\n\\tfunction rescueAsset(address _asset, uint256 _tokenId, address _recipient) external onlyOwner {\\n\\t\\trequire(assetToUser[_asset][_tokenId] == address(0), \\\"Can't steal\\\");\\n\\t\\tIERC721Enumerable(_asset).transferFrom(address(this), _recipient, _tokenId);\\n\\t}\\n\\n\\tfunction depositAlpha(uint256[] calldata _alphas) external {\\n\\t\\tuint256 gammaBalance = GAMMA.balanceOf(address(this));\\n\\t\\tuint256 toSwap = min(gammaBalance, _alphas.length);\\n\\n\\t\\tfor (uint256 i = 0; i < toSwap; i++) {\\n\\t\\t\\trequire(!GRAPE.alphaClaimed(_alphas[i]), \\\"Alpha already claimed\\\");\\n\\t\\t\\tALPHA.transferFrom(msg.sender, claimer, _alphas[i]);\\n\\t\\t\\tGAMMA.transferFrom(address(this), claimer, GAMMA.tokenOfOwnerByIndex(address(this), 0));\\n\\t\\t}\\n\\t\\tif (toSwap > 0)\\n\\t\\t\\tIClaim(claimer).claim();\\n\\t\\tfor (uint256 i = 0; i < toSwap; i++) {\\n\\t\\t\\tuint256 gammaTokenId = GAMMA.tokenOfOwnerByIndex(claimer, 0);\\n\\t\\t\\taddress gammaOwner = assetToUser[address(GAMMA)][gammaTokenId];\\n\\n\\t\\t\\tdelete assetToUser[address(GAMMA)][gammaTokenId];\\n\\t\\t\\tGAMMA.transferFrom(claimer, gammaOwner, gammaTokenId);\\n\\t\\t\\temit GammaWithdrawn(gammaOwner, gammaTokenId);\\n\\t\\t\\tAPE.transfer(gammaOwner, GAMMA_SHARE * G_COMMS / 100);\\n\\t\\t\\tALPHA.transferFrom(claimer, msg.sender, _alphas[i]);\\n\\t\\t}\\n\\t\\tfor (uint256 i = toSwap; i < _alphas.length; i++) {\\n\\t\\t\\trequire(!GRAPE.alphaClaimed(_alphas[i]), \\\"Alpha already claimed\\\");\\n\\t\\t\\tALPHA.transferFrom(msg.sender, address(this), _alphas[i]);\\n\\t\\t\\tassetToUser[address(ALPHA)][_alphas[i]] = msg.sender;\\n\\t\\t\\temit AlphaDeposited(msg.sender, _alphas[i]);\\n\\t\\t}\\n\\t\\tif (toSwap > 0)\\n\\t\\t\\tAPE.transfer(msg.sender, toSwap * (ALPHA_SHARE + GAMMA_SHARE * A_B_COMMS / 100));\\n\\t}\\n\\n\\tfunction depositBeta(uint256[] calldata _betas) external {\\n\\t\\tuint256 gammaBalance = GAMMA.balanceOf(address(this));\\n\\t\\tuint256 toSwap = min(gammaBalance, _betas.length);\\n\\n\\t\\tfor (uint256 i = 0; i < toSwap; i++) {\\n\\t\\t\\trequire(!GRAPE.betaClaimed(_betas[i]), \\\"Beta already claimed\\\");\\n\\t\\t\\tBETA.transferFrom(msg.sender, claimer, _betas[i]);\\n\\t\\t\\tGAMMA.transferFrom(address(this), claimer, GAMMA.tokenOfOwnerByIndex(address(this), 0));\\n\\t\\t}\\n\\t\\tif (toSwap > 0)\\n\\t\\t\\tIClaim(claimer).claim();\\n\\t\\tfor (uint256 i = 0; i < toSwap; i++) {\\n\\t\\t\\tuint256 gammaTokenId = GAMMA.tokenOfOwnerByIndex(claimer, 0);\\n\\t\\t\\taddress gammaOwner = assetToUser[address(GAMMA)][gammaTokenId];\\n\\n\\t\\t\\tdelete assetToUser[address(GAMMA)][gammaTokenId];\\n\\t\\t\\tGAMMA.transferFrom(claimer, gammaOwner, gammaTokenId);\\n\\t\\t\\temit GammaWithdrawn(gammaOwner, gammaTokenId);\\n\\t\\t\\tAPE.transfer(gammaOwner, GAMMA_SHARE * G_COMMS / 100);\\n\\t\\t\\tBETA.transferFrom(claimer, msg.sender, _betas[i]);\\n\\t\\t}\\n\\t\\tfor (uint256 i = toSwap; i < _betas.length; i++) {\\n\\t\\t\\trequire(!GRAPE.betaClaimed(_betas[i]), \\\"Beta already claimed\\\");\\n\\t\\t\\tBETA.transferFrom(msg.sender, address(this), _betas[i]);\\n\\t\\t\\tassetToUser[address(BETA)][_betas[i]] = msg.sender;\\n\\t\\t\\temit BetaDeposited(msg.sender, _betas[i]);\\n\\t\\t}\\n\\t\\tif (toSwap > 0)\\n\\t\\t\\tAPE.transfer(msg.sender, toSwap * (BETA_SHARE + GAMMA_SHARE * A_B_COMMS / 100));\\n\\t}\\n\\n\\tfunction depositGamma(uint256[] calldata _gammas) external {\\n\\t\\tuint256 alphaBalance = ALPHA.balanceOf(address(this));\\n\\t\\tuint256 betaBalance = BETA.balanceOf(address(this));\\n\\t\\tuint256 alphaToSwap = min(alphaBalance, _gammas.length);\\n\\t\\tuint256 betaToSwap = min(betaBalance, _gammas.length - alphaToSwap);\\n\\n\\t\\tfor (uint256 i = 0; i < alphaToSwap; i++) {\\n\\t\\t\\trequire(!GRAPE.gammaClaimed(_gammas[i]), \\\"Gamma already claimed\\\");\\n\\t\\t\\tGAMMA.transferFrom(msg.sender, claimer, _gammas[i]);\\n\\t\\t\\tALPHA.transferFrom(address(this), claimer, ALPHA.tokenOfOwnerByIndex(address(this), 0));\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < betaToSwap; i++) {\\n\\t\\t\\trequire(!GRAPE.gammaClaimed(_gammas[i + alphaToSwap]), \\\"Gamma already claimed\\\");\\n\\t\\t\\tGAMMA.transferFrom(msg.sender, claimer, _gammas[i + alphaToSwap]);\\n\\t\\t\\tBETA.transferFrom(address(this), claimer, BETA.tokenOfOwnerByIndex(address(this), 0));\\n\\t\\t}\\n\\t\\tif (alphaToSwap + betaToSwap > 0)\\n\\t\\t\\tIClaim(claimer).claim();\\n\\t\\tfor (uint256 i = 0; i < alphaToSwap; i++) {\\n\\t\\t\\tuint256 alphaTokenId = ALPHA.tokenOfOwnerByIndex(claimer, 0);\\n\\t\\t\\taddress alphaOwner = assetToUser[address(ALPHA)][alphaTokenId];\\n\\n\\t\\t\\tdelete assetToUser[address(ALPHA)][alphaTokenId];\\n\\t\\t\\tALPHA.transferFrom(claimer, alphaOwner, alphaTokenId);\\n\\t\\t\\temit AlphaWithdrawn(alphaOwner, alphaTokenId);\\n\\t\\t\\tAPE.transfer(alphaOwner, ALPHA_SHARE + GAMMA_SHARE * A_B_COMMS / 100);\\n\\t\\t\\tGAMMA.transferFrom(claimer, msg.sender, _gammas[i]);\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < betaToSwap; i++) {\\n\\t\\t\\tuint256 betaTokenId = BETA.tokenOfOwnerByIndex(claimer, 0);\\n\\t\\t\\taddress betaOwner = assetToUser[address(BETA)][betaTokenId];\\n\\n\\t\\t\\tdelete assetToUser[address(BETA)][betaTokenId];\\n\\t\\t\\tBETA.transferFrom(claimer, betaOwner, betaTokenId);\\n\\t\\t\\temit BetaWithdrawn(betaOwner, betaTokenId);\\n\\t\\t\\tAPE.transfer(betaOwner, BETA_SHARE + GAMMA_SHARE * A_B_COMMS / 100);\\n\\t\\t\\tGAMMA.transferFrom(claimer, msg.sender, _gammas[i + alphaToSwap]);\\n\\t\\t}\\n\\t\\tfor (uint256 i = alphaToSwap + betaToSwap; i < _gammas.length; i++) {\\n\\t\\t\\trequire(!GRAPE.gammaClaimed(_gammas[i]), \\\"Gamma already claimed\\\");\\n\\t\\t\\tassetToUser[address(GAMMA)][_gammas[i]] = msg.sender;\\n\\t\\t\\tGAMMA.transferFrom(msg.sender, address(this), _gammas[i]);\\n\\t\\t\\temit GammaDeposited(msg.sender, _gammas[i]);\\n\\t\\t}\\n\\t\\tif (alphaToSwap + betaToSwap > 0)\\n\\t\\t\\tAPE.transfer(msg.sender, (alphaToSwap + betaToSwap) * (GAMMA_SHARE * G_COMMS / 100));\\n\\t}\\n\\n\\tfunction withdrawAlpha(uint256[] calldata _alphas) external {\\n\\t\\tfor (uint256 i = 0; i < _alphas.length; i++) {\\n\\t\\t\\trequire(assetToUser[address(ALPHA)][_alphas[i]] == msg.sender, \\\"!owner\\\");\\n\\t\\t\\tdelete assetToUser[address(ALPHA)][_alphas[i]];\\n\\t\\t\\tALPHA.transferFrom(address(this), msg.sender, _alphas[i]);\\n\\t\\t\\temit AlphaWithdrawn(msg.sender, _alphas[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawBeta(uint256[] calldata _betas) external {\\n\\t\\tfor (uint256 i = 0; i < _betas.length; i++) {\\n\\t\\t\\trequire(assetToUser[address(BETA)][_betas[i]] == msg.sender, \\\"!owner\\\");\\n\\t\\t\\tdelete assetToUser[address(BETA)][_betas[i]];\\n\\t\\t\\tBETA.transferFrom(address(this), msg.sender, _betas[i]);\\n\\t\\t\\temit BetaWithdrawn(msg.sender, _betas[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawGamma(uint256[] calldata _gammas) external {\\n\\t\\tfor (uint256 i = 0; i < _gammas.length; i++) {\\n\\t\\t\\trequire(assetToUser[address(GAMMA)][_gammas[i]] == msg.sender, \\\"!owner\\\");\\n\\t\\t\\tdelete assetToUser[address(GAMMA)][_gammas[i]];\\n\\t\\t\\tGAMMA.transferFrom(address(this), msg.sender, _gammas[i]);\\n\\t\\t\\temit GammaWithdrawn(msg.sender, _gammas[i]);\\n\\t\\t}\\n\\t}\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"ApeClaimBonus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.2;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC721Enumerable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IGrape {\\n\\tfunction claimTokens() external;\\n\\tfunction alphaClaimed(uint256) external view returns(bool);\\n\\tfunction betaClaimed(uint256) external view returns(bool);\\n\\tfunction gammaClaimed(uint256) external view returns(bool);\\n}\\n\\ncontract ApeClaimBonus is Ownable {\\n\\n\\tIGrape public constant GRAPE = IGrape(0x025C6da5BD0e6A5dd1350fda9e3B6a614B205a1F);\\n\\tIERC20 public constant APE = IERC20(0x4d224452801ACEd8B2F0aebE155379bb5D594381);\\n\\tIERC721Enumerable public constant ALPHA = IERC721Enumerable(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);\\n\\tIERC721Enumerable public constant BETA = IERC721Enumerable(0x60E4d786628Fea6478F785A6d7e704777c86a7c6);\\n\\tIERC721Enumerable public constant GAMMA = IERC721Enumerable(0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623);\\n\\n\\taddress public manager;\\n\\n\\tconstructor(address _manager) {\\n\\t\\tmanager = _manager;\\n\\t\\tALPHA.setApprovalForAll(_manager, true);\\n\\t\\tBETA.setApprovalForAll(_manager, true);\\n\\t\\tGAMMA.setApprovalForAll(_manager, true);\\n\\t}\\n\\n    // In the case a user sends an asset directly to the contract...\\n\\tfunction rescueAsset(address _asset, uint256 _tokenId, address _recipient) external onlyOwner {\\n\\t\\tIERC721Enumerable(_asset).transferFrom(address(this), _recipient, _tokenId);\\n\\t}\\n\\n\\tfunction claim() external {\\n\\t\\trequire(msg.sender == manager);\\n\\t\\tGRAPE.claimTokens();\\n\\t\\tAPE.transfer(msg.sender, APE.balanceOf(address(this)));\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlphaDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlphaWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BetaDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BetaWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GammaDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GammaWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALPHA\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMMA\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRAPE\",\"outputs\":[{\"internalType\":\"contract IGrape\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_alphas\",\"type\":\"uint256[]\"}],\"name\":\"depositAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_betas\",\"type\":\"uint256[]\"}],\"name\":\"depositBeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_gammas\",\"type\":\"uint256[]\"}],\"name\":\"depositGamma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchApe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_alphas\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_betas\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_gammas\",\"type\":\"uint256[]\"}],\"name\":\"withdrawGamma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ApeClaimBonusManager", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}