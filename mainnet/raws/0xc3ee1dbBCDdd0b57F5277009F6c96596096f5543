{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LLCMinter.sol\": {\r\n      \"content\": \"//  ________  ___       ___  ___  ________  ________  ________  ________  _______\\n// |\\\\   ____\\\\|\\\\  \\\\     |\\\\  \\\\|\\\\  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\  ___ \\\\\\n// \\\\ \\\\  \\\\___|\\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\ /\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\   __/|\\n//  \\\\ \\\\  \\\\    \\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\  \\\\_|/__\\n//   \\\\ \\\\  \\\\____\\\\ \\\\  \\\\____\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\_|\\\\ \\\\\\n//    \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\_______\\\\\\n//     \\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|_______|\\n//\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/ILLC.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./LLCSalesData.sol\\\";\\n\\ncontract LLCMinter is Ownable, Pausable, ReentrancyGuard, LLCSalesData {\\n    /// @dev LLC NFT Contract address\\n    address public immutable LLC_ADDRESS;\\n\\n    constructor(address _llc) {\\n        require(_llc != address(0), \\\"Invalid LLC Contract Address\\\");\\n\\n        LLC_ADDRESS = _llc;\\n        _pause();\\n    }\\n\\n    // ----------------- EXTERNAL -----------------\\n\\n    /// @dev Set Minting Round configuration\\n    function setRoundConfiguration(LLCMintingRound calldata round) external onlyOwner {\\n        require(round.startTime > block.timestamp, \\\"Invalid round start time\\\");\\n        require(round.endTime > round.startTime, \\\"Invalid round end time\\\");\\n        require(round.merkleRoot.length > 0, \\\"Invalid merkle root\\\");\\n        require(round.participants > 0, \\\"Invalid number of participants\\\");\\n\\n        rounds.push(round);\\n\\n        emit NewSaleRound(round.mintingFee, round.startTime, round.endTime, round.merkleRoot);\\n    }\\n\\n    /// @dev Pause activity\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev Unpause activity\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @dev Withdraw funds from contract\\n    function withdraw(address _to) external onlyOwner {\\n        payable(_to).transfer(address(this).balance);\\n    }\\n\\n    /// @dev Mint LLC\\n    function mint(\\n        bytes32[] memory _proof,\\n        bytes32 leaf,\\n        uint256 _roundId\\n    ) external payable nonReentrant whenNotPaused onlyOngoingRound(_roundId) {\\n        require(!participants[_roundId][_msgSender()], \\\"Already participated\\\");\\n\\n        LLCMintingRound memory round = rounds[_roundId];\\n        require(MerkleProof.verify(_proof, round.merkleRoot, leaf), \\\"Sender not on whitelist\\\");\\n        require(msg.value == round.mintingFee, \\\"Invalid Price\\\");\\n\\n        // Mint LLC NFT\\n        getLLC().mint(_msgSender(), 1);\\n\\n        // Set participant\\n        participants[_roundId][_msgSender()] = true;\\n\\n        // Update sale round status\\n        LLCMintingRoundStatus storage status = roundStatus[_roundId];\\n        status.participants++;\\n        status.volume += msg.value;\\n\\n        emit NewParticipant(_roundId, _msgSender());\\n    }\\n\\n    // ----------------- VIEW -----------------\\n\\n    /// @dev Get LLC Contract Address\\n    function getLLC() public view returns (ILLC) {\\n        return ILLC(LLC_ADDRESS);\\n    }\\n\\n    /// @dev Get Next Round Id\\n    function getNextRoundId() public view returns (uint256) {\\n        return rounds.length;\\n    }\\n\\n    // ----------------- MODIFIER -----------------\\n\\n    modifier onlyOngoingRound(uint256 _roundId) {\\n        require(_roundId < getNextRoundId(), \\\"Invalid roundId\\\");\\n\\n        LLCMintingRound memory round = rounds[_roundId];\\n        require(round.startTime <= block.timestamp, \\\"Sale Round is not started yet\\\");\\n        require(round.endTime >= block.timestamp, \\\"Sale Round was ended\\\");\\n        require(round.participants > roundStatus[_roundId].participants, \\\"Sale was fulfilled\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILLC.sol\": {\r\n      \"content\": \"//  ________  ___       ___  ___  ________  ________  ________  ________  _______\\n// |\\\\   ____\\\\|\\\\  \\\\     |\\\\  \\\\|\\\\  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\  ___ \\\\\\n// \\\\ \\\\  \\\\___|\\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\ /\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\   __/|\\n//  \\\\ \\\\  \\\\    \\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\  \\\\_|/__\\n//   \\\\ \\\\  \\\\____\\\\ \\\\  \\\\____\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\_|\\\\ \\\\\\n//    \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\_______\\\\\\n//     \\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|_______|\\n//\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface ILLC {\\n    function mint(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LLCSalesData.sol\": {\r\n      \"content\": \"//  ________  ___       ___  ___  ________  ________  ________  ________  _______\\n// |\\\\   ____\\\\|\\\\  \\\\     |\\\\  \\\\|\\\\  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\  ___ \\\\\\n// \\\\ \\\\  \\\\___|\\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\ /\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\   __/|\\n//  \\\\ \\\\  \\\\    \\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\  \\\\_|/__\\n//   \\\\ \\\\  \\\\____\\\\ \\\\  \\\\____\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\_|\\\\ \\\\\\n//    \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\_______\\\\\\n//     \\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|_______|\\n//\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract LLCSalesData {\\n    struct LLCMintingRound {\\n        uint256 mintingFee;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 participants;\\n        bytes32 merkleRoot;\\n    }\\n\\n    struct LLCMintingRoundStatus {\\n        uint256 volume;\\n        uint256 participants;\\n    }\\n\\n    /// @dev Minting rounds\\n    LLCMintingRound[] public rounds;\\n\\n    /// @dev Minting Round participants\\n    mapping(uint256 => mapping(address => bool)) public participants;\\n\\n    /// @dev Minting Round status\\n    mapping(uint256 => LLCMintingRoundStatus) public roundStatus;\\n\\n    event NewSaleRound(uint256 mintingFee, uint256 startTime, uint256 endTime, bytes32 merkleRoot);\\n    event NewParticipant(uint256 roundId, address who);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_llc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"NewParticipant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"NewSaleRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LLC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLLC\",\"outputs\":[{\"internalType\":\"contract ILLC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct LLCSalesData.LLCMintingRound\",\"name\":\"round\",\"type\":\"tuple\"}],\"name\":\"setRoundConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LLCMinter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000198d2b8ea1c60db49eaed720d890e7c7c0651f02", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}