{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BoredDogeClubSaleContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Represents NFT Smart Contract\\r\\n */\\r\\ncontract IBoredDogeClubERC721 {\\r\\n    /** \\r\\n     * @dev ERC-721 INTERFACE \\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\\r\\n\\r\\n    /** \\r\\n     * @dev CUSTOM INTERFACE \\r\\n     */\\r\\n    function mintTo(uint256 amount, address _to) external {}\\r\\n    function getNextTokenId() external view returns(uint256) {}\\r\\n    function exists(uint256 tokenId) external view returns(bool) {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title BoredDogeClubSaleContract.\\r\\n *\\r\\n * @notice This Smart Contract can be used to sell a fixed amount of NFTs where some of them are \\r\\n * sold to permissioned wallets and the others are sold to the general public.\\r\\n *\\r\\n * @dev The primary mode of verifying permissioned actions is through Merkle Proofs\\r\\n * which are generated off-chain.\\r\\n */\\r\\ncontract BoredDogeClubSaleContract is Ownable {\\r\\n\\r\\n    /** \\r\\n     * @notice The Smart Contract of the NFT being sold \\r\\n     * @dev ERC-721 Smart Contract \\r\\n     */\\r\\n    IBoredDogeClubERC721 public immutable boredDoge;\\r\\n\\r\\n    /**\\r\\n     * @dev Mutant Doge Address\\r\\n     */\\r\\n    address public MutantDoge;\\r\\n    \\r\\n    /** \\r\\n     * @dev MINT DATA \\r\\n     */\\r\\n    uint256 public totalSupply = 5000;\\r\\n    uint256 public maxSupplyPermissioned = 5000;\\r\\n    \\r\\n    uint256 public mintedPermissioned = 0;\\r\\n    uint256 public mintedOpen = 0;\\r\\n\\r\\n    uint256 public limitOpen = 5;\\r\\n\\r\\n    uint256 public pricePermissioned = 0.1 ether;\\r\\n    uint256 public priceOpen = 0.1 ether;\\r\\n\\r\\n    uint256 public startPermissioned = 1645632000;\\r\\n    uint256 public durationPermissioned = 365 days;\\r\\n    bool public isStartedOpen;\\r\\n    \\r\\n    mapping(address => mapping(uint256 => uint256)) public addressToMints;\\r\\n\\r\\n     /** \\r\\n      * @dev MERKLE ROOTS \\r\\n      *\\r\\n      * @dev Initial value is randomly generated from https://www.random.org/\\r\\n      */\\r\\n    bytes32 public merkleRoot = \\\"\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev DEVELOPER\\r\\n     */\\r\\n    address public immutable devAddress;\\r\\n    uint256 public immutable devShare;\\r\\n\\r\\n    /**\\r\\n     * @dev Claiming\\r\\n     */\\r\\n    uint256 public claimStart = 1645804800;\\r\\n    mapping(uint256 => uint256) public hasDogeClaimed; // 0 = false | 1 = true\\r\\n    mapping(uint256 => uint256) public dogeToTransferMethod; // 0 = none | 1 = minted | 2 = claimed\\r\\n\\r\\n    /**\\r\\n     * @dev Events\\r\\n     */\\r\\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\\r\\n    event Purchase(address indexed buyer, uint256 indexed amount, bool indexed permissioned);\\r\\n\\r\\n    event setTotalSupplyEvent(uint256 indexed maxSupply);\\r\\n    event setMaxSupplyPermissionedEvent(uint256 indexed maxSupply);    \\r\\n\\r\\n    event setLimitOpenEvent(uint256 indexed limit);\\r\\n    event setPricePermissionedEvent(uint256 indexed price);\\r\\n    event setPriceOpenEvent(uint256 indexed price);\\r\\n\\r\\n    event setStartTimePermissionedEvent(uint256 indexed startTime);\\r\\n    event setDurationPermissionedEvent(uint256 indexed duration);\\r\\n    event setIsStartedOpenEvent(bool indexed isStarted);\\r\\n\\r\\n    event setMerkleRootEvent(bytes32 indexed merkleRoot);\\r\\n    event WithdrawAllEvent(address indexed to, uint256 amount);\\r\\n\\r\\n    event Claim(address indexed claimer, uint256 indexed amount);    \\r\\n    event setClaimStartEvent(uint256 indexed time);\\r\\n\\r\\n    event setMutantDogeAddressEvent(address indexed mutant);\\r\\n\\r\\n    constructor(\\r\\n        address _boredDogeAddress\\r\\n    ) Ownable() {\\r\\n        boredDoge = IBoredDogeClubERC721(_boredDogeAddress);\\r\\n        devAddress = 0x841d534CAa0993c677f21abd8D96F5d7A584ad81;\\r\\n        devShare = 1;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev SALE\\r\\n     */\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the leftovers from raffle mint\\r\\n     * regarding the total supply.\\r\\n     */\\r\\n    function maxSupplyOpen() public view returns(uint256) {\\r\\n        return totalSupply - mintedPermissioned;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to buy one or more NFTs.\\r\\n     * @dev First the Merkle Proof is verified.\\r\\n     * Then the mint is verified with the data embedded in the Merkle Proof.\\r\\n     * Finally the NFTs are minted to the user's wallet.\\r\\n     *\\r\\n     * @param amount. The amount of NFTs to buy.\\r\\n     * @param mintMaxAmount. The max amount the user can mint.\\r\\n     * @param proof. The Merkle Proof of the user.\\r\\n     */\\r\\n    function buyPermissioned(uint256 amount, uint256 mintMaxAmount, bytes32[] calldata proof) \\r\\n        external \\r\\n        payable {\\r\\n\\r\\n        /// @dev Verifies Merkle Proof submitted by user.\\r\\n        /// @dev All mint data is embedded in the merkle proof.\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, mintMaxAmount));\\r\\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \\\"INVALID PROOF\\\");\\r\\n\\r\\n        /// @dev Verifies that user can perform permissioned mint based on the provided parameters.\\r\\n\\r\\n        require(address(boredDoge) != address(0), \\\"NFT SMART CONTRACT NOT SET\\\");\\r\\n        require(merkleRoot != \\\"\\\" && !isStartedOpen, \\\"PERMISSIONED SALE CLOSED\\\");\\r\\n       \\r\\n        require(amount > 0, \\\"HAVE TO BUY AT LEAST 1\\\");\\r\\n        require(addressToMints[msg.sender][1] + amount <= mintMaxAmount, \\\"MINT AMOUNT EXCEEDS MAX FOR USER\\\");\\r\\n        require(mintedPermissioned + amount <= maxSupplyPermissioned, \\\"MINT AMOUNT GOES OVER MAX SUPPLY\\\");\\r\\n        require(msg.value >= pricePermissioned * amount, \\\"ETHER SENT NOT CORRECT\\\");\\r\\n        \\r\\n        require(block.timestamp < startPermissioned + durationPermissioned, \\\"PERMISSIONED SALE IS CLOSED\\\");\\r\\n        require(block.timestamp >= startPermissioned, \\\"PERMISSIONED SALE HASN'T STARTED YET\\\");\\r\\n\\r\\n        /// @dev Updates contract variables and mints `amount` NFTs to users wallet\\r\\n\\r\\n        mintedPermissioned += amount;\\r\\n        addressToMints[msg.sender][1] += amount;\\r\\n\\r\\n        /// @dev Register that these Doges were minted\\r\\n        dogeToTransferMethod[boredDoge.getNextTokenId()] = 1;\\r\\n        boredDoge.mintTo(amount, msg.sender);\\r\\n\\r\\n        emit Purchase(msg.sender, amount, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to buy one or more NFTs.\\r\\n     *\\r\\n     * @param amount. The amount of NFTs to buy.\\r\\n     */\\r\\n    function buyOpen(uint256 amount) \\r\\n        external \\r\\n        payable {\\r\\n        \\r\\n        /// @dev Verifies that user can perform open mint based on the provided parameters.\\r\\n\\r\\n        require(address(boredDoge) != address(0), \\\"NFT SMART CONTRACT NOT SET\\\");\\r\\n        require(isStartedOpen, \\\"OPEN SALE CLOSED\\\");\\r\\n\\r\\n        require(amount > 0, \\\"HAVE TO BUY AT LEAST 1\\\");\\r\\n        require(addressToMints[msg.sender][2] + amount <= limitOpen, \\\"MINT AMOUNT EXCEEDS MAX FOR USER\\\");\\r\\n        require(mintedOpen + amount <= maxSupplyOpen(), \\\"MINT AMOUNT GOES OVER MAX SUPPLY\\\");\\r\\n        require(msg.value >= priceOpen * amount, \\\"ETHER SENT NOT CORRECT\\\");\\r\\n\\r\\n        /// @dev Updates contract variables and mints `amount` NFTs to users wallet\\r\\n        \\r\\n        mintedOpen += amount;\\r\\n        addressToMints[msg.sender][2] += amount;\\r\\n\\r\\n        /// @dev Register that these Doges were minted\\r\\n        dogeToTransferMethod[boredDoge.getNextTokenId()] = 1;\\r\\n        boredDoge.mintTo(amount, msg.sender);\\r\\n\\r\\n        emit Purchase(msg.sender, amount, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev CLAIMING\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev Method to check if a doge was minted or claimed.\\r\\n     * Method starts at dogeId and traverses lastDogeTransferStatus\\r\\n     * mapping until it finds a non zero status. If the status is 1\\r\\n     * the doge was minted. Otherwise it was claimed. A value will always \\r\\n     * be found as each mint or claim updates the mapping.\\r\\n     *\\r\\n     * @param dogeId. The id of the doge to query\\r\\n     */\\r\\n    function wasDogeMinted(uint256 dogeId) internal view returns(bool) {\\r\\n        if (!boredDoge.exists(dogeId))\\r\\n            return false;\\r\\n        \\r\\n        uint lastDogeTransferStatus;\\r\\n        for (uint i = dogeId; i >= 0; i--) {\\r\\n            if (dogeToTransferMethod[i] != 0) {\\r\\n                lastDogeTransferStatus = dogeToTransferMethod[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return lastDogeTransferStatus == 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim Bored Doge by providing your Bored Doge Ids\\r\\n     * @dev Mints amount of Bored Doges to sender as valid Bored Doge bought \\r\\n     * provided. Validity depends on ownership, not having claimed yet and\\r\\n     * whether the doges were minted.\\r\\n     *\\r\\n     * @param doges. The tokenIds of the doges.\\r\\n     */\\r\\n    function claimDoges(uint256[] calldata doges) external {\\r\\n        require(address(boredDoge) != address(0), \\\"DOGES NFT NOT SET\\\");\\r\\n        require(doges.length > 0, \\\"NO IDS SUPPLIED\\\");\\r\\n        require(block.timestamp >= claimStart, \\\"CANNOT CLAIM YET\\\");\\r\\n\\r\\n        /// @dev Check if sender is owner of all DOGEs and that they haven't claimed yet\\r\\n        /// @dev Update claim status of each DOGE\\r\\n        for (uint256 i = 0; i < doges.length; i++) {\\r\\n            uint256 DOGEId = doges[i];\\r\\n            require(IERC721( address(boredDoge) ).ownerOf(DOGEId) == msg.sender, \\\"NOT OWNER OF DOGE\\\");\\r\\n            require(hasDogeClaimed[DOGEId] == 0, \\\"DOGE HAS ALREADY CLAIMED DOGE\\\");\\r\\n            require(wasDogeMinted(DOGEId), \\\"DOGE WAS NOT MINTED\\\");\\r\\n            hasDogeClaimed[DOGEId] = 1;\\r\\n        }\\r\\n\\r\\n        /// @dev Register that these Doges were claimed\\r\\n        dogeToTransferMethod[boredDoge.getNextTokenId()] = 2;\\r\\n        boredDoge.mintTo(doges.length, msg.sender);\\r\\n        emit Claim(msg.sender, doges.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View which of your Bored Doges can still their Bored Doges\\r\\n     * @dev Given an array of Bored Doges ids returns a subset of ids that\\r\\n     * can still claim a Bored Doge. Used off chain to provide input of Bored Doges method.\\r\\n     *\\r\\n     * @param doges. The tokenIds of the doges.\\r\\n     */\\r\\n    function getStillClaimableDogesFromIds(uint256[] calldata doges) external view returns (uint256[] memory) {\\r\\n        require(doges.length > 0, \\\"NO IDS SUPPLIED\\\");\\r\\n\\r\\n        uint256 length = doges.length;\\r\\n        uint256[] memory notClaimedDoges = new uint256[](length);\\r\\n        uint256 counter;\\r\\n\\r\\n        /// @dev Check if sender is owner of all doges and that they haven't claimed yet\\r\\n        /// @dev Update claim status of each doge\\r\\n        for (uint256 i = 0; i < doges.length; i++) {\\r\\n            uint256 dogeId = doges[i];          \\r\\n            if (hasDogeClaimed[dogeId] == 0 && wasDogeMinted(dogeId)) {\\r\\n                notClaimedDoges[counter] = dogeId;\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return notClaimedDoges;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev OWNER ONLY \\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Change the maximum supply of NFTs that are for sale in permissioned sale.\\r\\n     *\\r\\n     * @param newMaxSupply. The new max supply.\\r\\n     */\\r\\n    function setMaxSupplyPermissioned(uint256 newMaxSupply) external onlyOwner {\\r\\n        maxSupplyPermissioned = newMaxSupply;\\r\\n        emit setMaxSupplyPermissionedEvent(newMaxSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the total supply of NFTs that are for sale.\\r\\n     *\\r\\n     * @param newTotalSupply. The new total supply.\\r\\n     */\\r\\n    function setTotalSupply(uint256 newTotalSupply) external onlyOwner {\\r\\n        totalSupply = newTotalSupply;\\r\\n        emit setTotalSupplyEvent(newTotalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the limit of NFTs per wallet in open sale.\\r\\n     *\\r\\n     * @param newLimitOpen. The new max supply.\\r\\n     */\\r\\n    function setLimitOpen(uint256 newLimitOpen) external onlyOwner {\\r\\n        limitOpen = newLimitOpen;\\r\\n        emit setLimitOpenEvent(newLimitOpen);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the price of NFTs that are for sale in open sale.\\r\\n     *\\r\\n     * @param newPricePermissioned. The new max supply.\\r\\n     */\\r\\n    function setPricePermissioned(uint256 newPricePermissioned) external onlyOwner {\\r\\n        pricePermissioned = newPricePermissioned;\\r\\n        emit setPriceOpenEvent(newPricePermissioned);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the price of NFTs that are for sale in open sale.\\r\\n     *\\r\\n     * @param newPriceOpen. The new max supply.\\r\\n     */\\r\\n    function setPriceOpen(uint256 newPriceOpen) external onlyOwner {\\r\\n        priceOpen = newPriceOpen;\\r\\n        emit setPriceOpenEvent(newPriceOpen);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the startTime of the permissioned sale.\\r\\n     *\\r\\n     * @param startTime. The new start time.\\r\\n     */\\r\\n    function setStartTimePermissioned(uint256 startTime) external onlyOwner {\\r\\n        startPermissioned = startTime;\\r\\n        emit setStartTimePermissionedEvent(startTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the duration of the permissioned sale.\\r\\n     *\\r\\n     * @param duration. The new duration.\\r\\n     */\\r\\n    function setDurationPermissioned(uint256 duration) external onlyOwner {\\r\\n        durationPermissioned = duration;\\r\\n        emit setDurationPermissionedEvent(duration);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n     * @notice Change the startTime of the open sale.\\r\\n     *\\r\\n     * @param newIsStarted. The new public sale status.\\r\\n     */\\r\\n    function setIsStartedOpen(bool newIsStarted) external onlyOwner {\\r\\n        isStartedOpen = newIsStarted;\\r\\n        emit setIsStartedOpenEvent(newIsStarted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the merkleRoot of the sale.\\r\\n     *\\r\\n     * @param newRoot. The new merkleRoot.\\r\\n     */\\r\\n    function setMerkleRoot(bytes32 newRoot) external onlyOwner {\\r\\n        merkleRoot = newRoot;\\r\\n        emit setMerkleRootEvent(newRoot);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set's the new start time for claiming\\r\\n     *\\r\\n     * @param newClaimStart. The new claim start time.\\r\\n     */\\r\\n    function setClaimStart(uint256 newClaimStart) external onlyOwner {\\r\\n        claimStart = newClaimStart;\\r\\n        emit setClaimStartEvent(newClaimStart);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set's the address for the future mutant doge collection\\r\\n     *\\r\\n     * @param _mutant. The address of mutant doge\\r\\n     */\\r\\n    function setMutantDogeAddress(address _mutant) external onlyOwner {\\r\\n        MutantDoge = _mutant;\\r\\n        emit setMutantDogeAddressEvent(_mutant);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev FINANCE\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to withdraw funds generated from sale.\\r\\n     *\\r\\n     * @param _to. The address to send the funds to.\\r\\n     */\\r\\n    function withdrawAll(address _to) external onlyOwner {\\r\\n        require(_to != address(0), \\\"CANNOT WITHDRAW TO ZERO ADDRESS\\\");\\r\\n\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n\\r\\n        require(contractBalance > 0, \\\"NO ETHER TO WITHDRAW\\\");\\r\\n\\r\\n        uint256 developerCut = contractBalance * devShare / 100;\\r\\n        uint remaining = contractBalance - developerCut;\\r\\n\\r\\n        payable(devAddress).transfer(developerCut);\\r\\n        payable(_to).transfer(remaining);\\r\\n\\r\\n        emit WithdrawAllEvent(_to, remaining);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function for receiving Ether\\r\\n     */\\r\\n    receive() external payable {\\r\\n        emit ReceivedEther(msg.sender, msg.value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boredDogeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"permissioned\",\"type\":\"bool\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setClaimStartEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setDurationPermissionedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"}],\"name\":\"setIsStartedOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setLimitOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPermissionedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mutant\",\"type\":\"address\"}],\"name\":\"setMutantDogeAddressEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPriceOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPricePermissionedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTimePermissionedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupplyEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MutantDoge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boredDoge\",\"outputs\":[{\"internalType\":\"contract IBoredDogeClubERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyOpen\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyPermissioned\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"doges\",\"type\":\"uint256[]\"}],\"name\":\"claimDoges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dogeToTransferMethod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"doges\",\"type\":\"uint256[]\"}],\"name\":\"getStillClaimableDogesFromIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasDogeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStartedOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClaimStart\",\"type\":\"uint256\"}],\"name\":\"setClaimStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setDurationPermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newIsStarted\",\"type\":\"bool\"}],\"name\":\"setIsStartedOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimitOpen\",\"type\":\"uint256\"}],\"name\":\"setLimitOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mutant\",\"type\":\"address\"}],\"name\":\"setMutantDogeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceOpen\",\"type\":\"uint256\"}],\"name\":\"setPriceOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPricePermissioned\",\"type\":\"uint256\"}],\"name\":\"setPricePermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTimePermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BoredDogeClubSaleContract", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000004a4ac9c153c9deb8d98d4203c7d7756cdbefee1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}