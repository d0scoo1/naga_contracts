{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract WithdrawFairly {\r\n    error Unauthorized();\r\n    error ZeroBalance();\r\n    error TransferFailed();\r\n\r\n    struct Part {\r\n        address wallet;\r\n        uint256 royaltiesPart;\r\n    }\r\n\r\n    Part[] public parts;\r\n    mapping(address => bool) public callers;\r\n\r\n    constructor(){\r\n        parts.push(Part(0xecB4278af1379c38Eab140063fFC426f05FEde28, 1000));\r\n        callers[0xecB4278af1379c38Eab140063fFC426f05FEde28] = true;\r\n        parts.push(Part(0xE1580cA711094CF2888716a54c5A892245653435, 2000));\r\n        callers[0xE1580cA711094CF2888716a54c5A892245653435] = true;\r\n        parts.push(Part(0x06DcBa9ef76B9C6a129Df78D55f99989905e5F96, 2800));\r\n        callers[0x06DcBa9ef76B9C6a129Df78D55f99989905e5F96] = true;\r\n        parts.push(Part(0x9d246cA915ea31be43B4eF151e473d6e8Bc892eF, 2172));\r\n        callers[0x9d246cA915ea31be43B4eF151e473d6e8Bc892eF] = true;\r\n        parts.push(Part(0x2af89f045fB0B17Ad218423Cff3744ee25a69845, 2028));\r\n        callers[0x2af89f045fB0B17Ad218423Cff3744ee25a69845] = true;\r\n    }\r\n\r\n    function shareETHRoyaltiesPart() external {\r\n        if (!callers[msg.sender])\r\n            revert Unauthorized();\r\n        \r\n        uint256 balance = address(this).balance;\r\n        \r\n        if (balance == 0)\r\n            revert ZeroBalance();\r\n\r\n        for (uint256 i; i < parts.length;){\r\n            if (parts[i].royaltiesPart > 0){\r\n                _withdraw(parts[i].wallet, balance * parts[i].royaltiesPart / 10000);\r\n            }\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n     function shareTokenRoyaltiesPart(address token) external {\r\n        if (!callers[msg.sender])\r\n            revert Unauthorized();\r\n\r\n        IERC20 tokenContract = IERC20(token);\r\n        \r\n        uint256 balance = tokenContract.balanceOf(address(this));\r\n        \r\n        if (balance == 0)\r\n            revert ZeroBalance();\r\n\r\n        for (uint256 i; i < parts.length;){\r\n            if (parts[i].royaltiesPart > 0){\r\n                if (!tokenContract.transfer(parts[i].wallet, balance * parts[i].royaltiesPart / 10000))\r\n                    revert TransferFailed();\r\n            }\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdraw(address _address, uint256 _amount) private {\r\n        (bool success, ) = _address.call{value: _amount}(\"\");\r\n        \r\n        if (!success)\r\n            revert TransferFailed();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareETHRoyaltiesPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"shareTokenRoyaltiesPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WithdrawFairly", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://707e6a73a5a0c376923ea29546d9f7c67b66aa539277182a402c6de961bde3ad"}]}