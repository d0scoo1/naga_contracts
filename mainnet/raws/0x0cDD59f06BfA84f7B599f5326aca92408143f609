{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/EVADQURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNNNNNNNNNNNNNNNNNNNNNNNNNNWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl'''''''''''''''''''''''''''lXMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .:lllllllllc. .:lllllllc. ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMWklxNMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNklkNMMMMMMMMMMMMMMMMMMMMMWklkNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOdl:'cXMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkdl;'.  .';xNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdoc;.. ..,:lxOKNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xoc,..  ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd,'...':ldk0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; 'ldkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:,....,:lxkOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxl:,.   .';ldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOkxoc,.. ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc,.. ..,dNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc;lXMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkdOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc  .':ok0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX0xl:'. ..;clxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKx'  .....,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,xO0xo:'...':ox0NWMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMWKOdl;'.',;xNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMMMN0xo; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMWX0xl:'...':xNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: 'dkkoc,.  .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo.  .  ..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKko:,.  .':cox0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:  .,cdOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWNKOkkkOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMWNNWWX0kxxxxxokXWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMNXNWWN0xxOKXXXNWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMWWXXWWNNXXXNXXNWWWWWWWWWWWWWWWWWWWWWWNNXNWWMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMWNXXXKXXXXNNNNNNNXKXNNNWWWWWWWWWWWWWWWWWWWWNXXXWMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMWWWNNK0OO0000KKKXXXNNNNXKXNWWMMMWNNNWNNNWWWWWWWWWWWNNNWMMMMMMMMMMMMMM\\n// WWWWWWWWWWWWNNNXK0OkkkkkkO000KKKKKKKXK0KXXNNKKKKKXWX0XWWWWWWWWNNNNNNNNWMMMMMMMMMMMM\\n// WWWWWWWWNNNNNXXX0kxxxkOOOOOOO000K0000kkOOOOOxxOkkkOkddO000KXNNNNXXXXNNNWWMMMMMMMMMM\\n// WMMWWWWWNNNXXXXKkdddxkO0000000OOO0KXK0kkxxxkkkOkdl:;,;:loodkO0KKKKXXXXNXNWMMMMMMMMM\\n// WWWWWWNNXKKKKK0kooodxO00KKKKXNXOdONMMNKOxddxkO0Oxl;,,,,;:clddxkO0000KKXXKXWMMMMMMMM\\n// KKKK0OO00OOOkkdcclloxk0KXNNXXXNNOx0WMWNXK0OkOKXXKkl;;:::clloddxxkkkkO00KKKXMMMMMMMM\\n// kkkkkxxxxxddol:;:c::cldk0NWWX0O0NKxkNWNWNKkldKWWWNXKOkxxddooooooodxkkOOOOO0NMMMMMMM\\n// lllllllcc::;,'.',,,''',:ldkOOxlcdOkldO00OOl''o0XNNNWWNKOxocc::cllooodxkkkkkXMMMMMMM\\n// ;;,,,,,''................'',,,...,:,':lc;;;,'',:codddol:;;,,;;::::ccclodddx0WMMMMMM\\n// '.....................................''....................',,;;;;;;;:cclo0WMMMMMM\\n// ................................................................'''''..,;:oXMMMMMMM\\n// .........................................................................;OWMMMMMMM\\n// .........................................................................oNMMMMMMMM\\n// ........................................................................lXMMMMMMMMM\\n// ..........''',,'......................................................'dNMMMMMMMMMM\\n// lldddddoooll:;'.....................................................'l0WMMMMMMMMMMM\\n// MMMMMMMMMMMMWXKOxol:,'......,;,''.................................,cOWMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMWNKOdc;'.....''..............................',:dXMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMWKx;.................'''''..........',,;:ccdXMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMM0:.............',,,,,,'''...'',;cok00OkkkONMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMKl'.............;lllllloodxkO0KXWMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMWKkoc,.......:xNWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0kkOOOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:::::::::::::::::::::::::::dNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .,;,;;,,;;;;;;;;;;,;;,;,. ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;KWWWWWWWWWWWWWWWWWWWWWX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: '0MMMMMMMMMMMMMMMMMMMMM0' ;XMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd  oWMMMMMMMMMMMMMMMMMMMWo  oWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX: .dNMMMMMMMMMMMMMMMMMNd. :XMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:  ;xXWMMMMMMMMMMMWXx;  cKMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk;. .;lddxkOOkxdl;. .;kNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o:'.         .':d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0OOkkkkO0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXdcokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.. .':lx0XWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xo:'.  .';ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0, .',.. .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKN0koc,...':lx0XWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMWXOxl:,,,'oNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMWNKOxo; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMWXOdl;'...':oOWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .coo:,.  .,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOd:.    .';lx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOl:'.  .,codkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXK00KXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoc,.........,:oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l'  .,:clooool:,.  .l0WMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl. .lkXWMMMMMMMMMWXkl' .lXMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .oXMMMMMMMMMMMMMMMMMXo. ,KMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc .kWMMMMMMMMMMMMMMMMMMMWk. :XMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. lWMMMMMMMMMMMMMMMMMMMMMWo .kMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMMx. dMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. oWMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; '0MMMMMMMMMMMMMMMMMMMMM0, ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO. 'kWMMMMMMMMMMMMMMMMMWO, .kMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0; .;xXWMMMMMMMMMMMWXk:. ,OWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx;. .;ldxxOOOOkdl;.  ,xNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o:'.         .':oONMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNK0Okxxxxk0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title EVADQURI\\n * @dev EVADQURI delegate token tokenURI rendering library.\\n * @author 0xAnimist (kanon.art) for EVADAO\\n */\\nlibrary EVADQURI {\\n\\n  function packSVG(uint256 _tokenId, uint256 _sourceTokenId, bool _valid) public pure returns(string memory) {\\n    string[9] memory parts;\\n    parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base {fill: rgb(40,40,40); font-family: \\\"Helvetica\\\", Arial, sans-serif;} .firstLevel { font-size: 14px;} .secondLevel {font-size: 8px; line-height: 10px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"WhiteSmoke\\\" /><text x=\\\"10\\\" y=\\\"25\\\" class=\\\"base firstLevel\\\">EVADQ token # ';\\n\\n    parts[1] = Strings.toString(_tokenId);\\n\\n    parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base secondLevel\\\">';\\n\\n    if(_valid){\\n      parts[3] = 'Redeemable for EVADAO token #: ';\\n\\n          parts[4] = Strings.toString(_sourceTokenId);\\n        }else{\\n          parts[3] = 'No underlying EVADAO token';\\n\\n          parts[4] = '';\\n        }\\n\\n        parts[5] = '</text></svg>';\\n\\n        return string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5]));\\n  }\\n\\n  function packName(uint256 _tokenId, bool _valid) public pure returns(string memory) {\\n    if(_valid){\\n      return string(abi.encodePacked('\\\"name\\\": \\\"EVADQ token #', Strings.toString(_tokenId), '\\\",'));\\n    }\\n    return string(abi.encodePacked('\\\"name\\\": \\\"INVALID EVADQ token #', Strings.toString(_tokenId), '\\\",'));\\n  }\\n\\n  function packDescription(uint256 _tokenId, uint256 _sourceTokenId, bool _valid) public pure returns(string memory) {\\n    string memory description;\\n    if(_valid){\\n      description = '\\\"description\\\": \\\"This token is set as the ERC721Delegable delegate of EVADAO NFT #';\\n    }else{\\n      description = '\\\"description\\\": \\\"This token was previously set as the ERC721Delegable delegate of EVADAO NFT #';\\n    }\\n    return string(abi.encodePacked(description, Strings.toString(_sourceTokenId), '.\\\",'));\\n  }\\n\\n\\n  function renderURI(\\n    string memory _name,\\n    string memory _description,\\n    string memory _svg\\n  ) public pure returns(string memory) {\\n    string memory metadata = string(abi.encodePacked(\\n      '{',\\n      _name,\\n      _description\\n    ));\\n\\n    string memory json = Base64.encode(bytes(string(abi.encodePacked(\\n      metadata,\\n      '\\\"image\\\": \\\"data:image/svg+xml;base64,',\\n      Base64.encode(bytes(_svg)),\\n      '\\\"}'))));\\n\\n    return string(abi.encodePacked('data:application/json;base64,', json));\\n  }\\n\\n\\n  //Address to string encodeing by k06a\\n  //see: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string\\n  function toString(address account) internal pure returns(string memory) {\\n    return toString(abi.encodePacked(account));\\n  }\\n\\n  function toString(bytes32 value) internal pure returns(string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes memory data) internal pure returns(string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    bytes memory str = new bytes(2 + data.length * 2);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n    for (uint i = 0; i < data.length; i++) {\\n        str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\\n        str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\n\\npragma solidity ^0.8.0;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n      uint256 len = data.length;\\n      if (len == 0) return \\\"\\\";\\n\\n      // multiply by 4/3 rounded up\\n      uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n      // Add some extra buffer at the end\\n      bytes memory result = new bytes(encodedLen + 32);\\n\\n      bytes memory table = TABLE;\\n\\n      assembly {\\n          let tablePtr := add(table, 1)\\n          let resultPtr := add(result, 32)\\n\\n          for {\\n              let i := 0\\n          } lt(i, len) {\\n\\n          } {\\n              i := add(i, 3)\\n              let input := and(mload(add(data, i)), 0xffffff)\\n\\n              let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n              out := shl(8, out)\\n              out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n              out := shl(8, out)\\n              out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n              out := shl(8, out)\\n              out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n              out := shl(224, out)\\n\\n              mstore(resultPtr, out)\\n\\n              resultPtr := add(resultPtr, 4)\\n          }\\n\\n          switch mod(len, 3)\\n          case 1 {\\n              mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n          }\\n          case 2 {\\n              mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n          }\\n\\n          mstore(result, encodedLen)\\n      }\\n\\n      return string(result);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sourceTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"packDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"packName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sourceTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"packSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"renderURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "EVADQURI", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}