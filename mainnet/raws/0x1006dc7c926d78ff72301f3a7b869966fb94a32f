{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract CryptoPot {\r\n\r\n    address public _creator;\r\n    address public _owner;\r\n    uint256 public _maxPlayers = 100;\r\n    uint256 public _price = 0.05 ether;\r\n    uint256 public _winnerPrice = 4.95 ether;\r\n    uint256 public _contestId = 1;\r\n    uint256 public _winnerBlock = 0;\r\n    uint256 public _coolPeriod = 1000;  //1000 blocks \r\n    bool    public _coolPeriodStarted = false;\r\n\r\n    mapping (uint256 => address) private _tokenId2address;\r\n    mapping (uint256 => uint256) private _tokenId2block;\r\n    mapping (uint256 => uint256) private _tokenId2time;\r\n    mapping (uint256 => bool)    private _tokenId2taken; \r\n\r\n    event Winner(uint256 contestId, uint256 tokenId);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _creator = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    function joinContest(uint256 tokenId) external payable {\r\n        require(msg.value >= _price, \"Ether sent is not correct\");\r\n        require(tokenId > 0 && tokenId <= _maxPlayers, \"token not valid\");\r\n        require(_tokenId2taken[tokenId] == false, \"token not available\");\r\n\r\n        if(_coolPeriodStarted) {  //new contest\r\n            require(block.number - _winnerBlock > _coolPeriod, \"cool period activated\");\r\n            _coolPeriodStarted = false;\r\n        }\r\n\r\n        _tokenId2address[tokenId] = msg.sender;\r\n        _tokenId2block[tokenId] = block.number;\r\n        _tokenId2time[tokenId] = block.timestamp;\r\n        _tokenId2taken[tokenId] = true;\r\n        \r\n        if(availableTokensCount() == 0) {\r\n            selectWinner();\r\n        }\r\n    } \r\n    function selectWinner() internal {\r\n        uint256 tempVal = 0;\r\n        for(uint256 i = 1; i <= _maxPlayers; ++i) {\r\n            tempVal += _tokenId2block[i];\r\n            tempVal += _tokenId2time[i];\r\n            _tokenId2taken[i] = false;   //reset\r\n        }\r\n        \r\n        uint256 winnerTokenId = 1 + (tempVal % _maxPlayers);\r\n        payable(_tokenId2address[winnerTokenId]).transfer(_winnerPrice);\r\n        emit Winner(_contestId, winnerTokenId);\r\n        _coolPeriodStarted = true;\r\n        _winnerBlock = block.number;\r\n        _contestId++;\r\n    }\r\n    function availableTokensCount() public view returns (uint256) {\r\n        uint256 count = 0;\r\n        for(uint256 i = 1; i <= _maxPlayers; ++i) {\r\n            if(_tokenId2taken[i] == false) {\r\n                ++count;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    function availableTokens() external view returns (string memory) {\r\n        string memory str;\r\n        for(uint256 i = 1; i <= _maxPlayers; ++i) {\r\n            if(_tokenId2taken[i] == false) {\r\n                str = string(abi.encodePacked(str, (bytes(str).length > 0 ? \",\" : \"\"), toString(i))); \r\n            }\r\n            if(bytes(str).length > 100) {\r\n                break;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    function setCoolPeriod(uint256 _newVal) external onlyOwner {\r\n        _coolPeriod = _newVal;\r\n    }\r\n    function setMaxPlayers(uint256 _newVal) external onlyOwner {\r\n        _maxPlayers = _newVal;\r\n    }\r\n    function setPrice(uint256 _newVal) external onlyOwner {\r\n        _price = _newVal;\r\n    }\r\n    function setWinnerPrice(uint256 _newVal) external onlyOwner {\r\n        _winnerPrice = _newVal;\r\n    }\r\n    function withdraw() external payable {\r\n        require(_coolPeriodStarted == true, \"game in progress\");\r\n        payable(_creator).transfer(address(this).balance);\r\n    }\r\n    function renounceOwnership() external onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_contestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_coolPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_coolPeriodStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_winnerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_winnerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"joinContest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setCoolPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setWinnerPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CryptoPot", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14a5bd5c9dbafeea04160ca36168236c93492e34ad3113b9029c4552a0da6896"}]}