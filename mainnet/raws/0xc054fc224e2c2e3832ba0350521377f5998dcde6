{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address address_) external view returns (uint256);\r\n    function transfer(address to_, uint256 amount_) external returns (bool);\r\n    function transferFrom(address from_, address to_, uint256 amount_) external;\r\n}\r\n\r\ncontract EmploymentManager { \r\n\r\n    // On-Chain Trustless Employment. Fun!\r\n    // Created by: 0xInuarashi || https://twitter.com/0xInuarashi || 0xInuarashi#1234\r\n\r\n    // Events\r\n    event AgreementCreated(address indexed employer_, address indexed benefactor_,\r\n        address indexed currency_, uint16 totalEpochs_, uint256 paymentPerEpoch_);\r\n    event EmployerSignedEpoch(address indexed employer_, address indexed benefactor_,\r\n        uint256 index_, uint16 employerEpoch_);\r\n    event BenefactorSignedEpoch(address indexed benefactor_, \r\n        address indexed employer_, uint256 index_, uint16 benefactorEpoch_,\r\n        address currency_, uint256 paymentPerEpoch_);\r\n    event EmployerWithdrewVoidAgreement(address indexed employer_, \r\n        address indexed benefactor_, uint256 index_, uint16 employerEpoch_,\r\n        uint16 benefactorEpoch_, address currency_, uint256 totalDeposit_,\r\n        uint256 totalPaid_, uint256 remainingBalance_);\r\n\r\n    // Structs\r\n    struct Agreement {\r\n        uint32 creationTimestamp; // 4 | 28\r\n        uint16 totalEpochs; // 2 | 26\r\n\r\n        address employer; // 20 | 6\r\n        uint32 employerSigned; // 4 | 2\r\n        uint16 employerEpoch; // 2 | 0\r\n\r\n        address benefactor; // 20 | 12\r\n        uint32 benefactorSigned; // 4 | 8\r\n        uint16 benefactorEpoch; // 2 | 6\r\n\r\n        address currency; // 20 | 12\r\n        \r\n        uint256 totalDeposit; // 32 | 0\r\n        uint256 totalPaid; // 32 | 0\r\n        uint256 paymentPerEpoch; // 32 | 0\r\n    }\r\n\r\n    // Constants\r\n    uint32 constant public epochTime = 28 days;\r\n    uint32 constant public cutoffTime = 20 days;\r\n\r\n    // Mappings\r\n    mapping(uint256 => Agreement) public indexToAgreement;\r\n\r\n    // Enumerable   \r\n    uint256 public indexToAgreementLength;\r\n\r\n    // Internal Functions\r\n    function _sendETH(address payable address_, uint256 amount_) internal {\r\n        (bool success, ) = payable(address_).call{value: amount_}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n    function _employerSign(uint256 index_) internal {\r\n        indexToAgreement[index_].employerSigned = uint32(block.timestamp);\r\n        indexToAgreement[index_].employerEpoch++;\r\n    }\r\n    function _benefactorSign(uint256 index_) internal {\r\n        indexToAgreement[index_].benefactorSigned = uint32(block.timestamp);\r\n        indexToAgreement[index_].benefactorEpoch++;\r\n    }\r\n\r\n    // Create Employment Agreement\r\n    function createEmploymentAgreement(address payable benefactor_, address currency_,\r\n    uint16 totalEpochs_, uint256 paymentPerEpoch_) external payable {\r\n\r\n        require(benefactor_ != address(0),\r\n            \"Benefactor cannot be 0x0!\");\r\n        \r\n        // Deposit Currency to the Contract\r\n        uint256 _totalPayment = uint256(totalEpochs_) * paymentPerEpoch_;\r\n\r\n        if (currency_ == address(0)) { \r\n            require(msg.value == _totalPayment,\r\n                \"Incorrect msg.value sent!\");\r\n        }\r\n        else {\r\n            require(IERC20(currency_).balanceOf(msg.sender) >= _totalPayment,\r\n                \"You don't own enough ERC20!\");\r\n\r\n            IERC20(currency_).transferFrom(msg.sender, address(this), _totalPayment);\r\n        }\r\n\r\n        // Create Agreement Struct\r\n        indexToAgreement[indexToAgreementLength] = Agreement(\r\n            uint32(block.timestamp),\r\n            totalEpochs_,\r\n\r\n            msg.sender,\r\n            0,\r\n            0,\r\n\r\n            benefactor_,\r\n            0,\r\n            0,\r\n\r\n            currency_,\r\n\r\n            _totalPayment,\r\n            0,\r\n            paymentPerEpoch_\r\n        );\r\n\r\n        // Increment the Agreement Length Tracker\r\n        indexToAgreementLength++;\r\n\r\n        // Emit Event\r\n        emit AgreementCreated(msg.sender, benefactor_, currency_, \r\n        totalEpochs_, paymentPerEpoch_);\r\n    }\r\n\r\n    function employerSignEpoch(uint256 index_) external {\r\n        \r\n        // Initialize Struct into Local Memory\r\n        Agreement memory _Agreement = indexToAgreement[index_];\r\n\r\n        // Sender Must be Employer\r\n        require(_Agreement.employer == msg.sender,\r\n            \"You are not the employer!\");\r\n        // Employer Epoch must be equal to Benefactor Epoch to sign\r\n        require(_Agreement.employerEpoch == _Agreement.benefactorEpoch,\r\n            \"Benefactor has not signed the last epoch yet!\");\r\n        // There must be remaining epochs\r\n        require(_Agreement.totalEpochs > _Agreement.employerEpoch,\r\n            \"No epochs remaining!\");\r\n        \r\n        // Calculate Cutoff Time\r\n        // Note: _nextSignStart is calculated from the creationTimestamp\r\n        // in order to keep epochs constant due to inefficiencies in signing time\r\n        uint32 _nextSignStart = _Agreement.creationTimestamp +\r\n            (_Agreement.employerEpoch * epochTime);\r\n        \r\n        // Time of Signing is within bounds\r\n        require( uint32(block.timestamp) >= _nextSignStart,\r\n            \"Next Epoch has not started yet!\");\r\n        // Time of Signing is not past the cutoff time (15 days)\r\n        require( uint32(block.timestamp) < (_nextSignStart + cutoffTime), \r\n            \"Exceeded cutoff time! Agreement Void!\");\r\n        \r\n        // If passes all checks, allow employer to sign.\r\n        _employerSign(index_);\r\n        \r\n        // Emit Event\r\n        emit EmployerSignedEpoch(msg.sender, _Agreement.benefactor, index_,\r\n        _Agreement.employerEpoch);\r\n    }\r\n\r\n    function benefactorSignAndClaimEpoch(uint256 index_) external {\r\n        \r\n        // Initialize Struct into Local Memory\r\n        Agreement memory _Agreement = indexToAgreement[index_];\r\n\r\n        // Sender Must be Benefactor\r\n        require(_Agreement.benefactor == msg.sender,\r\n            \"You are not the benefactor!\");\r\n        // Benefactor Epoch must be behind Employer Epoch\r\n        require(_Agreement.employerEpoch > _Agreement.benefactorEpoch,\r\n            \"Employer has not signed this epoch yet!\");\r\n\r\n        // Sign the Agreement\r\n        _benefactorSign(index_);\r\n\r\n        // Record the Payment\r\n        indexToAgreement[index_].totalPaid += _Agreement.paymentPerEpoch;\r\n\r\n        // Claim the Payment\r\n        if (_Agreement.currency == address(0)) {\r\n            // It is ETH\r\n            _sendETH(payable(msg.sender), _Agreement.paymentPerEpoch);\r\n        }\r\n        else {\r\n            // It is ERC20\r\n            IERC20(_Agreement.currency).transfer(msg.sender, _Agreement.paymentPerEpoch);\r\n        }\r\n\r\n        // Emit Event\r\n        emit BenefactorSignedEpoch(msg.sender, _Agreement.employer, index_,\r\n        _Agreement.benefactorEpoch, _Agreement.currency, _Agreement.paymentPerEpoch);\r\n    }\r\n\r\n    function employerWithdrawVoidAgreement(uint256 index_) external {\r\n\r\n        // Load Struct into Local Memory\r\n        Agreement memory _Agreement = indexToAgreement[index_];\r\n\r\n        // Sender Must be Employer\r\n        require(_Agreement.employer == msg.sender,\r\n            \"You are not the employer!\");\r\n        \r\n        // Calculate Cutoff Time\r\n        // Note: _nextSignStart is calculated from the creationTimestamp\r\n        // in order to keep epochs constant due to inefficiencies in signing time\r\n        uint32 _nextSignStart = _Agreement.creationTimestamp +\r\n            (_Agreement.employerEpoch * epochTime);\r\n        \r\n        // Time of Signing is past the cutoff time (15 days) from _nextSignStart\r\n        require( uint32(block.timestamp) > (_nextSignStart + cutoffTime), \r\n            \"Agreement is still valid!\");\r\n\r\n        // Calculate Remaining Balance\r\n        uint256 _totalPaid = _Agreement.totalPaid;\r\n        uint256 _remainingBalance = _Agreement.totalDeposit - _Agreement.totalPaid;\r\n\r\n        // Record the Payment\r\n        indexToAgreement[index_].totalPaid += _remainingBalance;\r\n\r\n        // Claim the Payment\r\n        if (_Agreement.currency == address(0)) {\r\n            // It is ETH\r\n            _sendETH(payable(msg.sender), _remainingBalance);\r\n        }\r\n        else {\r\n            // It is ERC20\r\n            IERC20(_Agreement.currency).transfer(msg.sender, _remainingBalance);\r\n        }\r\n\r\n        // Emit Event\r\n        emit EmployerWithdrewVoidAgreement(msg.sender, _Agreement.benefactor, index_,\r\n        _Agreement.employerEpoch, _Agreement.benefactorEpoch, _Agreement.currency,\r\n        _Agreement.totalDeposit, _totalPaid, _remainingBalance);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"totalEpochs_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentPerEpoch_\",\"type\":\"uint256\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"benefactorEpoch_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentPerEpoch_\",\"type\":\"uint256\"}],\"name\":\"BenefactorSignedEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"employerEpoch_\",\"type\":\"uint16\"}],\"name\":\"EmployerSignedEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"employer_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"employerEpoch_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"benefactorEpoch_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPaid_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance_\",\"type\":\"uint256\"}],\"name\":\"EmployerWithdrewVoidAgreement\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"benefactorSignAndClaimEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"benefactor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"totalEpochs_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentPerEpoch_\",\"type\":\"uint256\"}],\"name\":\"createEmploymentAgreement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutoffTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"employerSignEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"employerWithdrawVoidAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToAgreement\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"creationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"totalEpochs\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"employerSigned\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"employerEpoch\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"benefactorSigned\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"benefactorEpoch\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentPerEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexToAgreementLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EmploymentManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e693f495033e42906c0f9795c1edca2af9726e304d94c842d7df1f7b8faa71dd"}]}