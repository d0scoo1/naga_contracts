{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-06-29\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.10;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ncontract ETHflation is IERC20 {\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    address private lpPair;\r\n    address public marketingWallet;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    mapping (address => bool) private _isExcludedFromLimits;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _liquidityHolders;\r\n    mapping (address => bool) private _blacklist;\r\n\r\n    string constant private _name = \"ETHflation\";\r\n    string constant private _symbol = 'UP';\r\n    uint8 constant private _decimals = 18;\r\n\r\n    uint256 constant private _tTotal = 100000000 * 10 ** _decimals;\r\n\r\n   struct Fees {\r\n        uint16 buyFeeLP;\r\n        uint16 buyFeeMarketing;\r\n        uint16 sellFeeLP;\r\n        uint16 sellFeeMarketing;\r\n    }\r\n\r\n    Fees public _taxRates = Fees({\r\n        buyFeeLP: 1,\r\n        buyFeeMarketing:1,\r\n        sellFeeLP: 1,\r\n        sellFeeMarketing:1\r\n        });\r\n\r\n    IRouter02 public dexRouter;\r\n    \r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public secondPair;\r\n    \r\n    uint256 private _maxTxAmountBuy = (_tTotal * 1) / 100; // 1%\r\n    uint256 private _maxTxAmountSell = (_tTotal * 1) / 100; // 1%\r\n    uint256 private _maxWalletSize = (_tTotal * 2) / 100; // 2%\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Only Owner can call this function.\");\r\n        _;\r\n    }\r\n    \r\n    constructor () {\r\n        marketingWallet = 0x39313511DA05790E1dFA9850Fbf2fC813992AEC7;\r\n        _tOwned[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        _owner = msg.sender;\r\n\r\n        dexRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        secondPair = dexRouter.WETH(); \r\n        lpPair = IFactoryV2(dexRouter.factory()).createPair(secondPair, address(this)); \r\n\r\n        _isExcludedFromFees[_owner]=true;\r\n        _approve(_owner, address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function setMarketingWallet(address newMarketingAddress) public onlyOwner {\r\n        marketingWallet = newMarketingAddress;\r\n    }\r\n    function setNewFees(uint16 buyFeeLP,\r\n        uint16 buyFeeMarketing,\r\n        uint16 sellFeeLP,\r\n        uint16 sellFeeMarketing) public onlyOwner {\r\n            _taxRates.sellFeeMarketing = sellFeeMarketing;\r\n            require(buyFeeLP <= 5,\"Fee can never be more as 5%\");\r\n            require(buyFeeMarketing <= 5,\"Fee can never be more as 5%\");\r\n            require(sellFeeLP <= 5,\"Fee can not be about 5%\");\r\n            require(sellFeeMarketing <= 5,\"Fee can not be about 5%\");\r\n            _taxRates.sellFeeLP = sellFeeLP;\r\n            _taxRates.buyFeeMarketing = buyFeeMarketing;\r\n            _taxRates.buyFeeLP = buyFeeLP;    \r\n        }\r\n\r\n\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        \r\n        if(balanceOf(_owner) > 0) {\r\n            _transfer(_owner, newOwner, balanceOf(_owner));\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) { if (_tTotal == 0) { revert(); } return _tTotal; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return _owner; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setNewRouter(address newRouter) public onlyOwner {\r\n        IRouter02 _newRouter = IRouter02(newRouter);\r\n        address get_pair = IFactoryV2(_newRouter.factory()).getPair(secondPair,address(this));\r\n        if (get_pair == address(0)) {\r\n            lpPair = IFactoryV2(_newRouter.factory()).createPair(secondPair,address(this));\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    \r\n\r\n    function setBlacklistEnabled(address account, bool enabled) external onlyOwner {\r\n        _blacklist[account] = enabled;\r\n    }\r\n\r\n    function setBlacklistEnabledMultiple(address[] calldata accounts, bool enabled) external onlyOwner {\r\n        for(uint index=0;index<accounts.length;index++)_blacklist[accounts[index]] = enabled;\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _blacklist[account];\r\n    }\r\n\r\n\r\n\r\n    function setMaxTxPercents(uint256 percentBuy, uint256 percentSell) external onlyOwner {\r\n        require((_tTotal * percentBuy) / 1000 >= (_tTotal / 5000), \"must be above 0.5%\");\r\n        require((_tTotal * percentSell) / 1000 >= (_tTotal / 5000), \"must be above 0.5%\");\r\n        _maxTxAmountBuy = (_tTotal * percentBuy) / 1000;\r\n        _maxTxAmountSell = (_tTotal * percentSell) / 1000;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percent) external onlyOwner {\r\n        require((_tTotal * percent) / 1000 >= (_tTotal / 100), \"must be above 1%\");\r\n        _maxWalletSize = (_tTotal * percent) / 1000;\r\n    }\r\n\r\n\r\n    function setExcludedFromFees(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function setExcludedFromLimits(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromLimits[account] = enabled;\r\n    }\r\n\r\n    function isExcludedFromLimits(address account) public view returns (bool) {\r\n        return _isExcludedFromLimits[account];\r\n    }\r\n\r\n    function getMaxTXs() public view returns (uint256, uint256) {\r\n        return (_maxTxAmountBuy / (10**_decimals), _maxTxAmountSell / (10**_decimals));\r\n    }\r\n\r\n    function getMaxWallet() public view returns (uint256) {\r\n        return _maxWalletSize / (10**_decimals);\r\n    }\r\n\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != _owner\r\n            && to != _owner\r\n            && tx.origin != _owner\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && from != address(this);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_blacklist[from]==false, \"ERC20: address is blacklisted\");\r\n        require(_blacklist[to]==false, \"ERC20: address is blacklisted\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n\r\n\r\n        uint256 _fee = 0;\r\n        bool _hasCurrentLimits = _hasLimits(from, to);\r\n\r\n        if(!tradingEnabled && _hasCurrentLimits) {\r\n            revert(\"Trading not yet enabled!\");\r\n        }\r\n        if(from == lpPair){ // buy\r\n            if (!_isExcludedFromLimits[from] && !_isExcludedFromLimits[to] && _hasCurrentLimits) {\r\n                require(amount <= _maxTxAmountBuy, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n            if(!_isExcludedFromFees[from] && !_isExcludedFromFees[to]){\r\n                uint256 fee1 = (amount * _taxRates.buyFeeLP) / 100 ;\r\n                uint256 fee2 = (amount * _taxRates.buyFeeMarketing) / 100 ;       \r\n                _tOwned[lpPair] += fee1;\r\n                _tOwned[marketingWallet] += fee2;\r\n                _fee += fee1 + fee2;\r\n            }\r\n\r\n        } else if (to == lpPair) { // sell\r\n            if (!_isExcludedFromLimits[from] && !_isExcludedFromLimits[to] && _hasCurrentLimits) {\r\n                require(amount <= _maxTxAmountSell, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n\r\n            if(!_isExcludedFromFees[from] && !_isExcludedFromFees[to]){\r\n                uint256 fee1 = (amount * _taxRates.sellFeeLP) / 100 ;\r\n                uint256 fee2 = (amount * _taxRates.sellFeeMarketing) / 100 ;       \r\n                _tOwned[lpPair] += fee1;\r\n                _tOwned[marketingWallet] += fee2;\r\n                _fee += fee1 + fee2;\r\n            }\r\n\r\n\r\n        }\r\n        if(to != address(dexRouter) && !(lpPair == to) && _hasCurrentLimits) {\r\n            if (!_isExcludedFromLimits[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n            }\r\n        }\r\n        \r\n        if (!_hasLiqBeenAdded) {\r\n            if (!_hasCurrentLimits && to == lpPair) {\r\n                _liquidityHolders[from] = true;\r\n                _hasLiqBeenAdded = true;\r\n            }\r\n            if (!_hasLiqBeenAdded && _hasCurrentLimits) {\r\n                revert(\"Only owner can transfer at this time.\");\r\n            }\r\n        }\r\n\r\n\r\n        _tOwned[from] -= amount;\r\n        _tOwned[to] += amount - _fee;\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        \r\n        tradingEnabled = true;\r\n    }    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFeeLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyFeeMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFeeLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFeeMarketing\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTXs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabledMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentSell\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFeeLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyFeeMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFeeLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFeeMarketing\",\"type\":\"uint16\"}],\"name\":\"setNewFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHflation", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e0174bd97b01a2ed8a618f8f675ce32647140ca2c83ecf16250e555af9acea4"}]}