{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/CauldronUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable func-name-mixedcase\\npragma solidity ^0.8.10;\\n\\ncontract CauldronUtils {\\n    uint8 internal constant ACTION_REPAY = 2;\\n    uint8 internal constant ACTION_REMOVE_COLLATERAL = 4;\\n    uint8 internal constant ACTION_BORROW = 5;\\n    uint8 internal constant ACTION_GET_REPAY_SHARE = 6;\\n    uint8 internal constant ACTION_GET_REPAY_PART = 7;\\n    uint8 internal constant ACTION_ACCRUE = 8;\\n    uint8 internal constant ACTION_ADD_COLLATERAL = 10;\\n    uint8 internal constant ACTION_UPDATE_EXCHANGE_RATE = 11;\\n    uint8 internal constant ACTION_BENTO_DEPOSIT = 20;\\n    uint8 internal constant ACTION_BENTO_WITHDRAW = 21;\\n    uint8 internal constant ACTION_BENTO_TRANSFER = 22;\\n    uint8 internal constant ACTION_BENTO_TRANSFER_MULTIPLE = 23;\\n    uint8 internal constant ACTION_BENTO_SETAPPROVAL = 24;\\n    uint8 internal constant ACTION_CALL = 30;\\n\\n    struct ActionAddRepayRemoveBorrow {\\n        bool assigned;\\n        int256 share;\\n        address to;\\n        bool skim;\\n    }\\n\\n    struct ActionUpdateExchangeRate {\\n        bool assigned;\\n        bool mustUpdate;\\n        uint256 minRate;\\n        uint256 maxRate;\\n    }\\n\\n    struct CookAction {\\n        string name;\\n        uint8 action;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    function decodeCookWithSignature(bytes calldata rawData) public pure returns (CookAction[] memory cookActions) {\\n        return decodeCookData(rawData[4:]);\\n    }\\n\\n    function decodeCookData(bytes calldata data) public pure returns (CookAction[] memory cookActions) {\\n        (uint8[] memory actions, uint256[] memory values, bytes[] memory datas) = abi.decode(data, (uint8[], uint256[], bytes[]));\\n\\n        cookActions = new CookAction[](actions.length);\\n\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            uint8 action = actions[i];\\n            string memory name;\\n\\n            if (action == ACTION_ADD_COLLATERAL) {\\n                name = \\\"addCollateral\\\";\\n            } else if (action == ACTION_REPAY) {\\n                name = \\\"repay\\\";\\n            } else if (action == ACTION_REMOVE_COLLATERAL) {\\n                name = \\\"removeCollateral\\\";\\n            } else if (action == ACTION_BORROW) {\\n                name = \\\"borrow\\\";\\n            } else if (action == ACTION_UPDATE_EXCHANGE_RATE) {\\n                name = \\\"updateExchangeRate\\\";\\n            } else if (action == ACTION_BENTO_SETAPPROVAL) {\\n                name = \\\"bentoSetApproval\\\";\\n            } else if (action == ACTION_BENTO_DEPOSIT) {\\n                name = \\\"bentoDeposit\\\";\\n            } else if (action == ACTION_BENTO_WITHDRAW) {\\n                name = \\\"bentoWithdraw\\\";\\n            } else if (action == ACTION_BENTO_TRANSFER) {\\n                name = \\\"bentoTransfer\\\";\\n            } else if (action == ACTION_BENTO_TRANSFER_MULTIPLE) {\\n                name = \\\"bentoTransferMultiple\\\";\\n            } else if (action == ACTION_CALL) {\\n                name = \\\"call\\\";\\n            } else if (action == ACTION_GET_REPAY_SHARE) {\\n                name = \\\"getRepayShare\\\";\\n            } else if (action == ACTION_GET_REPAY_PART) {\\n                name = \\\"getRepayPart\\\";\\n            }\\n\\n            cookActions[i] = CookAction(name, action, values[i], datas[i]);\\n        }\\n    }\\n\\n    function decode_addCollateral(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            int256 share,\\n            address to,\\n            bool skim\\n        )\\n    {\\n        return abi.decode(data, (int256, address, bool));\\n    }\\n\\n    function decode_repay(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            int256 part,\\n            address to,\\n            bool skim\\n        )\\n    {\\n        return abi.decode(data, (int256, address, bool));\\n    }\\n\\n    function decode_removeCollateral(bytes calldata data) public pure returns (int256 share, address to) {\\n        return abi.decode(data, (int256, address));\\n    }\\n\\n    function decode_borrow(bytes calldata data) public pure returns (int256 amount, address to) {\\n        return abi.decode(data, (int256, address));\\n    }\\n\\n    function decode_updateExchangeRate(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            bool mustUpdate,\\n            uint256 minRate,\\n            uint256 maxRate\\n        )\\n    {\\n        return abi.decode(data, (bool, uint256, uint256));\\n    }\\n\\n    function decode_bentoSetApproval(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            address user,\\n            address masterContract,\\n            bool approved,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        )\\n    {\\n        return abi.decode(data, (address, address, bool, uint8, bytes32, bytes32));\\n    }\\n\\n    function decode_bentoDeposit(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            address token,\\n            address to,\\n            int256 amount,\\n            int256 share\\n        )\\n    {\\n        return abi.decode(data, (address, address, int256, int256));\\n    }\\n\\n    function decode_bentoWithdraw(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            address token,\\n            address to,\\n            int256 amount,\\n            int256 share\\n        )\\n    {\\n        return abi.decode(data, (address, address, int256, int256));\\n    }\\n\\n    function decode_bentoTransfer(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            address token,\\n            address to,\\n            int256 share\\n        )\\n    {\\n        return abi.decode(data, (address, address, int256));\\n    }\\n\\n    function decode_bentoTransferMultiple(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            address token,\\n            address[] memory tos,\\n            uint256[] memory shares\\n        )\\n    {\\n        return abi.decode(data, (address, address[], uint256[]));\\n    }\\n\\n    function decode_call(bytes calldata data)\\n        public\\n        pure\\n        returns (\\n            address callee,\\n            bytes memory callData,\\n            bool useValue1,\\n            bool useValue2,\\n            uint8 returnValues\\n        )\\n    {\\n        return abi.decode(data, (address, bytes, bool, bool, uint8));\\n    }\\n\\n    function decode_getRepayShare(bytes calldata data) public pure returns (int256 part) {\\n        return abi.decode(data, (int256));\\n    }\\n\\n    function decode_getRepayPart(bytes calldata data) public pure returns (int256 amount) {\\n        return abi.decode(data, (int256));\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeCookData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CauldronUtils.CookAction[]\",\"name\":\"cookActions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rawData\",\"type\":\"bytes\"}],\"name\":\"decodeCookWithSignature\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CauldronUtils.CookAction[]\",\"name\":\"cookActions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_addCollateral\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"share\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_bentoDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"share\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_bentoSetApproval\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_bentoTransfer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"share\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_bentoTransferMultiple\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_bentoWithdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"share\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_borrow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_call\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"useValue1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useValue2\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"returnValues\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_getRepayPart\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_getRepayShare\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"part\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_removeCollateral\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"share\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_repay\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"part\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decode_updateExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mustUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CauldronUtils", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}