{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"sources\": {\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IFinancialInstrument.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {IERC721} from \\\"IERC721.sol\\\";\\n\\ninterface IFinancialInstrument is IERC721 {\\n    function principal(uint256 instrumentId) external view returns (uint256);\\n\\n    function underlyingToken(uint256 instrumentId) external view returns (IERC20);\\n\\n    function recipient(uint256 instrumentId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IDebtInstrument.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IFinancialInstrument} from \\\"IFinancialInstrument.sol\\\";\\n\\ninterface IDebtInstrument is IFinancialInstrument {\\n    function endDate(uint256 instrumentId) external view returns (uint256);\\n\\n    function repay(uint256 instrumentId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"IBulletLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {IDebtInstrument} from \\\"IDebtInstrument.sol\\\";\\n\\nenum BulletLoanStatus {\\n    Issued,\\n    FullyRepaid,\\n    Defaulted,\\n    Resolved\\n}\\n\\ninterface IBulletLoans is IDebtInstrument {\\n    struct LoanMetadata {\\n        IERC20 underlyingToken;\\n        BulletLoanStatus status;\\n        uint256 principal;\\n        uint256 totalDebt;\\n        uint256 amountRepaid;\\n        uint256 duration;\\n        uint256 repaymentDate;\\n        address recipient;\\n    }\\n\\n    function loans(uint256 id)\\n        external\\n        view\\n        returns (\\n            IERC20,\\n            BulletLoanStatus,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function createLoan(\\n        IERC20 _underlyingToken,\\n        uint256 principal,\\n        uint256 totalDebt,\\n        uint256 duration,\\n        address recipient\\n    ) external returns (uint256);\\n\\n    function markLoanAsDefaulted(uint256 instrumentId) external;\\n\\n    function markLoanAsResolved(uint256 instrumentId) external;\\n\\n    function updateLoanParameters(\\n        uint256 instrumentId,\\n        uint256 newTotalDebt,\\n        uint256 newRepaymentDate\\n    ) external;\\n\\n    function updateLoanParameters(\\n        uint256 instrumentId,\\n        uint256 newTotalDebt,\\n        uint256 newRepaymentDate,\\n        bytes memory borrowerSignature\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC20WithDecimals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\ninterface IERC20WithDecimals is IERC20 {\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IProtocolConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IProtocolConfig {\\n    function protocolFee() external view returns (uint256);\\n\\n    function protocolAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IPortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20Upgradeable} from \\\"IERC20Upgradeable.sol\\\";\\nimport {IERC20WithDecimals} from \\\"IERC20WithDecimals.sol\\\";\\n\\ninterface IPortfolio is IERC20Upgradeable {\\n    function endDate() external view returns (uint256);\\n\\n    function underlyingToken() external view returns (IERC20WithDecimals);\\n\\n    function value() external view returns (uint256);\\n\\n    function deposit(uint256 amount, bytes memory metadata) external;\\n\\n    function withdraw(uint256 amount, bytes memory metadata) external returns (uint256 withdrawnAmount);\\n}\\n\"\r\n    },\r\n    \"ILenderVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ILenderVerifier {\\n    function isAllowed(\\n        address lender,\\n        uint256 amount,\\n        bytes memory signature\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IManagedPortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20WithDecimals} from \\\"IERC20WithDecimals.sol\\\";\\nimport {IProtocolConfig} from \\\"IProtocolConfig.sol\\\";\\nimport {IPortfolio} from \\\"IPortfolio.sol\\\";\\nimport {IBulletLoans} from \\\"IBulletLoans.sol\\\";\\nimport {ILenderVerifier} from \\\"ILenderVerifier.sol\\\";\\n\\nenum ManagedPortfolioStatus {\\n    Open,\\n    Frozen,\\n    Closed\\n}\\n\\ninterface IManagedPortfolio is IPortfolio {\\n    function initialize(\\n        string memory __name,\\n        string memory __symbol,\\n        address _manager,\\n        IERC20WithDecimals _underlyingToken,\\n        IBulletLoans _bulletLoans,\\n        IProtocolConfig _protocolConfig,\\n        ILenderVerifier _lenderVerifier,\\n        uint256 _duration,\\n        uint256 _maxSize,\\n        uint256 _managerFee\\n    ) external;\\n\\n    function managerFee() external view returns (uint256);\\n\\n    function maxSize() external view returns (uint256);\\n\\n    function createBulletLoan(\\n        uint256 loanDuration,\\n        address borrower,\\n        uint256 principalAmount,\\n        uint256 repaymentAmount\\n    ) external;\\n\\n    function setEndDate(uint256 newEndDate) external;\\n\\n    function markLoanAsDefaulted(uint256 instrumentId) external;\\n\\n    function getStatus() external view returns (ManagedPortfolioStatus);\\n\\n    function getOpenLoanIds() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"LoansReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {IBulletLoans, BulletLoanStatus} from \\\"IBulletLoans.sol\\\";\\nimport {IManagedPortfolio} from \\\"IManagedPortfolio.sol\\\";\\n\\nstruct LoanFrontendData {\\n    IERC20 token;\\n    BulletLoanStatus status;\\n    uint256 principal;\\n    uint256 totalDebt;\\n    uint256 amountRepaid;\\n    uint256 duration;\\n    uint256 repaymentDate;\\n    address recipient;\\n    uint256 loanId;\\n}\\n\\ncontract LoansReader {\\n    function getLoans(address bulletLoans, address portfolio) external view returns (LoanFrontendData[] memory) {\\n        uint256[] memory ids = IManagedPortfolio(portfolio).getOpenLoanIds();\\n        LoanFrontendData[] memory _loans = new LoanFrontendData[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            (\\n                IERC20 token,\\n                BulletLoanStatus status,\\n                uint256 principal,\\n                uint256 totalDebt,\\n                uint256 amountRepaid,\\n                uint256 duration,\\n                uint256 repaymentDate,\\n                address recipient\\n            ) = IBulletLoans(bulletLoans).loans(ids[i]);\\n            _loans[i] = LoanFrontendData(\\n                token,\\n                status,\\n                principal,\\n                totalDebt,\\n                amountRepaid,\\n                duration,\\n                repaymentDate,\\n                recipient,\\n                ids[i]\\n            );\\n        }\\n        return _loans;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bulletLoans\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"portfolio\",\"type\":\"address\"}],\"name\":\"getLoans\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum BulletLoanStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanFrontendData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LoansReader", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}