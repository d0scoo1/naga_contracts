{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dummyImplementations/mainnet/v2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract UserModule {\\n    /**\\n     * @dev User function to supply.\\n     * @param token_ address of token.\\n     * @param amount_ amount to supply.\\n     * @param to_ address to send vTokens to.\\n     * @return vtokenAmount_ amount of vTokens sent to the `to_` address passed\\n     */\\n    function supply(\\n        address token_,\\n        uint256 amount_,\\n        address to_\\n    ) external returns (uint256 vtokenAmount_) {}\\n\\n    /**\\n     * @dev User function to withdraw.\\n     * @param amount_ amount to withdraw.\\n     * @param to_ address to send tokens to.\\n     * @return vtokenAmount_ amount of vTokens burnt from caller\\n     */\\n    function withdraw(uint256 amount_, address to_)\\n        external\\n        returns (uint256 vtokenAmount_)\\n    {}\\n\\n    /**\\n     * @dev If ratio is below then this function will allow anyone to swap from steth -> weth.\\n     * @param amt_ amount of stEth to swap for weth.\\n     */\\n    function leverage(uint256 amt_) external {}\\n\\n    /**\\n     * @dev If ratio is above then this function will allow anyone to payback WETH and withdraw astETH to msg.sender at 1:1 ratio.\\n     * @param amt_ amount of weth to swap for steth.\\n     */\\n    function deleverage(uint256 amt_) external {}\\n\\n    event supplyLog(\\n        uint256 amount_,\\n        address indexed caller_,\\n        address indexed to_\\n    );\\n\\n    event withdrawLog(\\n        uint256 amount_,\\n        address indexed caller_,\\n        address indexed to_\\n    );\\n\\n    event leverageLog(uint256 amt_, uint256 transferAmt_);\\n\\n    event deleverageLog(uint256 amt_, uint256 transferAmt_);\\n}\\n\\ncontract RebalancerModule {\\n    /**\\n     * @dev low gas function just to collect profit.\\n     * @notice Collected the profit & leave it in the DSA itself to optimize further on gas.\\n     * @param isWeth what token to swap. WETH or stETH.\\n     * @param withdrawAmt_ need to borrow any weth amount or withdraw steth for swaps from Aave position.\\n     * @param amt_ amount to swap into base vault token.\\n     * @param unitAmt_ unit amount for swap.\\n     * @param oneInchData_ 1inch's data for the swaps.\\n     */\\n    function collectProfit(\\n        bool isWeth, // either weth or steth\\n        uint256 withdrawAmt_,\\n        uint256 amt_,\\n        uint256 unitAmt_,\\n        uint256 oneInchData_\\n    ) external {}\\n\\n    /**\\n     * @dev Rebalancer function to leverage and rebalance the position.\\n     */\\n    function rebalanceOne(\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        address[] memory vaults_, // leverage using other vaults\\n        uint256[] memory amts_,\\n        uint256 leverageAmt_,\\n        uint256 swapAmt_, // 1inch's swap amount\\n        uint256 tokenSupplyAmt_,\\n        uint256 tokenWithdrawAmt_,\\n        uint256 unitAmt_,\\n        bytes memory oneInchData_\\n    ) external {}\\n\\n    /**\\n     * @dev Rebalancer function for saving. To be run in times of making position less risky or to fill up the withdraw amount for users to exit\\n     */\\n    function rebalanceTwo(\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        uint256 saveAmt_,\\n        uint256 tokenSupplyAmt_,\\n        uint256 unitAmt_,\\n        bytes memory oneInchData_\\n    ) external {}\\n\\n    event collectProfitLog(\\n        bool isWeth,\\n        uint256 withdrawAmt_,\\n        uint256 amt_,\\n        uint256 unitAmt_\\n    );\\n\\n    event rebalanceOneLog(\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        address[] vaults_,\\n        uint256[] amts_,\\n        uint256 leverageAmt_,\\n        uint256 swapAmt_,\\n        uint256 tokenSupplyAmt_,\\n        uint256 tokenWithdrawAmt_,\\n        uint256 unitAmt_\\n    );\\n\\n    event rebalanceTwoLog(\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        uint256 saveAmt_,\\n        uint256 unitAmt_\\n    );\\n}\\n\\ncontract AdminModule {\\n    /**\\n     * @dev Update rebalancer.\\n     * @param rebalancer_ address of rebalancer.\\n     * @param isRebalancer_ true for setting the rebalancer, false for removing.\\n     */\\n    function updateRebalancer(address rebalancer_, bool isRebalancer_)\\n        external\\n    {}\\n\\n    /**\\n     * @dev Update all fees.\\n     * @param revenueFee_ new revenue fee.\\n     * @param withdrawalFee_ new withdrawal fee.\\n     * @param swapFee_ new swap fee or leverage fee.\\n     * @param deleverageFee_ new deleverage fee.\\n     */\\n    function updateFees(\\n        uint256 revenueFee_,\\n        uint256 withdrawalFee_,\\n        uint256 swapFee_,\\n        uint256 deleverageFee_\\n    ) external {}\\n\\n    /**\\n     * @dev Update ratios.\\n     * @param ratios_ new ratios.\\n     */\\n    function updateRatios(uint16[] memory ratios_) external {}\\n\\n    /**\\n     * @dev Change status.\\n     * @param status_ new status, function to pause all functionality of the contract, status = 2 -> pause, status = 1 -> resume.\\n     */\\n    function changeStatus(uint256 status_) external {}\\n\\n    /**\\n     * @dev function to initialize variables\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address rebalancer_,\\n        address token_,\\n        address atoken_,\\n        uint256 revenueFee_,\\n        uint256 withdrawalFee_,\\n        uint256 idealExcessAmt_,\\n        uint16[] memory ratios_,\\n        uint256 swapFee_,\\n        uint256 saveSlippage_,\\n        uint256 deleverageFee_\\n    ) external {}\\n\\n    event updateRebalancerLog(address auth_, bool isAuth_);\\n\\n    event changeStatusLog(uint256 status_);\\n\\n    event updateRatiosLog(\\n        uint16 maxLimit,\\n        uint16 maxLimitGap,\\n        uint16 minLimit,\\n        uint16 minLimitGap,\\n        uint16 stEthLimit,\\n        uint128 maxBorrowRate\\n    );\\n\\n    event updateFeesLog(\\n        uint256 revenueFee_,\\n        uint256 withdrawalFee_,\\n        uint256 swapFee_,\\n        uint256 deleverageFee_\\n    );\\n}\\n\\ncontract ReadModule {\\n    function isRebalancer(address accountAddr_) public view returns (bool) {}\\n\\n    /**\\n     * @dev Base token of the vault\\n     */\\n    function token() public view returns (address) {}\\n\\n    /**\\n     * @dev Minimum token limit used inside the functions\\n     */\\n    function tokenMinLimit() public view returns (uint256) {}\\n\\n    /**\\n     * @dev atoken of the base token of the vault\\n     */\\n    function atoken() public view returns (address) {}\\n\\n    /**\\n     * @dev DSA for this particular vault\\n     */\\n    function vaultDsa() public view returns (address) {}\\n\\n    struct Ratios {\\n        uint16 maxLimit; // Above this withdrawals are not allowed\\n        uint16 maxLimitGap;\\n        uint16 minLimit; // After leverage the ratio should be below minLimit & above minLimitGap\\n        uint16 minLimitGap;\\n        uint16 stEthLimit; // if 7500. Meaning stETH collateral covers 75% of the ETH debt. Excess ETH will be covered by token limit.\\n        // send borrow rate in 4 decimals from UI. In the smart contract it'll convert to 27 decimals which where is 100%\\n        uint128 maxBorrowRate; // maximum borrow rate above this leveraging should not happen\\n    }\\n\\n    /**\\n     * @dev Ratios to set particular limits on leveraging, saving and risks of the vault.\\n     */\\n    function ratios() public view returns (Ratios memory) {}\\n\\n    /**\\n     * @dev last stored revenue exchange price\\n     */\\n    function lastRevenueExchangePrice() public view returns (uint256) {}\\n\\n    /**\\n     * @dev cut to take from the profits\\n     */\\n    function revenueFee() public view returns (uint256) {}\\n\\n    /**\\n     * @dev base token revenue stored in the vault\\n     */\\n    function revenue() public view returns (uint256) {}\\n\\n    /**\\n     * @dev ETH revenue stored in the vault\\n     */\\n    function revenueEth() public view returns (uint256) {}\\n\\n    /**\\n     * @dev Withdrawl Fee of the vault\\n     */\\n    function withdrawalFee() public view returns (uint256) {}\\n\\n    /**\\n     * @dev extra eth/stETH amount to leave in the vault for easier swaps.\\n     */\\n    function idealExcessAmt() public view returns (uint256) {}\\n\\n    /**\\n     * @dev Fees of leverage swaps.\\n     */\\n    function swapFee() public view returns (uint256) {}\\n\\n    /**\\n     * @dev Max allowed slippage at the time of saving the vault\\n     */\\n    function saveSlippage() public view returns (uint256) {}\\n\\n    /**\\n     * @dev Fees of deleverage swaps.\\n     */\\n    function deleverageFee() public view returns (uint256) {}\\n}\\n\\ncontract HelperReadFunctions {\\n    /**\\n     * @dev Helper function to token balances of everywhere.\\n     */\\n    function getVaultBalances()\\n        public\\n        view\\n        returns (\\n            uint256 tokenCollateralAmt_,\\n            uint256 stethCollateralAmt_,\\n            uint256 wethDebtAmt_,\\n            uint256 tokenVaultBal_,\\n            uint256 tokenDSABal_,\\n            uint256 netTokenBal_\\n        )\\n    {}\\n\\n    // returns net eth. net stETH + ETH - net ETH debt.\\n    function getNewProfits() public view returns (uint256 profits_) {}\\n\\n    /**\\n     * @dev Helper function to get current exchange price and new revenue generated.\\n     */\\n    function getCurrentExchangePrice()\\n        public\\n        view\\n        returns (uint256 exchangePrice_, uint256 newTokenRevenue_)\\n    {}\\n}\\n\\ncontract ERC20Functions {\\n    function decimals() public view returns (uint8) {}\\n\\n    function totalSupply() external view returns (uint256) {}\\n\\n    function balanceOf(address account) external view returns (uint256) {}\\n\\n    function transfer(address to, uint256 amount) external returns (bool) {}\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256)\\n    {}\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {}\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool) {}\\n\\n    function name() external view returns (string memory) {}\\n\\n    function symbol() external view returns (string memory) {}\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ncontract VaultDummyImplementation is\\n    UserModule,\\n    RebalancerModule,\\n    ReadModule,\\n    HelperReadFunctions,\\n    ERC20Functions\\n{\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWeth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"}],\"name\":\"collectProfitLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferAmt_\",\"type\":\"uint256\"}],\"name\":\"deleverageLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferAmt_\",\"type\":\"uint256\"}],\"name\":\"leverageLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"vaults_\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amts_\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverageAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupplyAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenWithdrawAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"}],\"name\":\"rebalanceOneLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saveAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"}],\"name\":\"rebalanceTwoLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"supplyLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isWeth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneInchData_\",\"type\":\"uint256\"}],\"name\":\"collectProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"}],\"name\":\"deleverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleverageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangePrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenRevenue_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profits_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCollateralAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stethCollateralAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethDebtAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenVaultBal_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDSABal_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netTokenBal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idealExcessAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddr_\",\"type\":\"address\"}],\"name\":\"isRebalancer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRevenueExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"}],\"name\":\"leverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratios\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"maxLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxLimitGap\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minLimitGap\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stEthLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowRate\",\"type\":\"uint128\"}],\"internalType\":\"struct ReadModule.Ratios\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"vaults_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"leverageAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSupplyAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWithdrawAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData_\",\"type\":\"bytes\"}],\"name\":\"rebalanceOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saveAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSupplyAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData_\",\"type\":\"bytes\"}],\"name\":\"rebalanceTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vtokenAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMinLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultDsa\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vtokenAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VaultDummyImplementation", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}