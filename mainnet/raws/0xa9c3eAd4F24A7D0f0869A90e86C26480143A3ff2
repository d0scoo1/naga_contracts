{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/portal/CelestialCastle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../game/interfaces/Interfaces.sol\\\";\\n\\n/**\\n * @title Celestial Castle\\n * @notice Edited from EtherOrcsOfficial/etherOrcs-contracts.\\n */\\ncontract CelestialCastle is Ownable, IERC721Receiver {\\n  bool public isTravelEnabled;\\n  /// @notice Celestial portal contract.\\n  PortalLike public portal;\\n  /// @notice Freaks N Guilds token contract.\\n  IFnG public freaksNGuilds;\\n  /// @notice Freaks bucks token contract.\\n  IFBX public freaksBucks;\\n\\n  /// @notice Contract address to it's reflection.\\n  mapping(address => address) public reflection;\\n  /// @notice Original token id owner.\\n  mapping(uint256 => address) public ownerOf;\\n\\n  /// @notice Require that the sender is the portal for bridging operations.\\n  modifier onlyPortal() {\\n    require(msg.sender == address(portal), \\\"CelestialCastle: sender is not the portal\\\");\\n    _;\\n  }\\n\\n  /// @notice Initialize the contract.\\n  function initialize(\\n    address newPortal,\\n    address newFreaksNGuilds,\\n    address newFreaksBucks,\\n    bool newIsTravelEnabled\\n  ) external onlyOwner {\\n    portal = PortalLike(newPortal);\\n    freaksNGuilds = IFnG(newFreaksNGuilds);\\n    freaksBucks = IFBX(newFreaksBucks);\\n    isTravelEnabled = newIsTravelEnabled;\\n  }\\n\\n  /// @notice Travel tokens to L2.\\n  function travel(\\n    uint256[] calldata freakIds,\\n    uint256[] calldata celestialIds,\\n    uint256 fbxAmount\\n  ) external {\\n    require(isTravelEnabled, \\\"CelestialCastle: travel is disabled\\\");\\n    bytes[] memory calls = new bytes[](\\n      (freakIds.length > 0 ? 1 : 0) + (celestialIds.length > 0 ? 1 : 0) + (fbxAmount > 0 ? 1 : 0)\\n    );\\n    uint256 callsIndex = 0;\\n\\n    if (freakIds.length > 0) {\\n      Freak[] memory freaks = new Freak[](freakIds.length);\\n      for (uint256 i = 0; i < freakIds.length; i++) {\\n        require(ownerOf[freakIds[i]] == address(0), \\\"CelestialCastle: token already staked\\\");\\n        require(freaksNGuilds.isFreak(freakIds[i]), \\\"CelestialCastle: not a freak\\\");\\n        ownerOf[freakIds[i]] = msg.sender;\\n        freaks[i] = freaksNGuilds.getFreakAttributes(freakIds[i]);\\n        freaksNGuilds.transferFrom(msg.sender, address(this), freakIds[i]);\\n      }\\n      calls[callsIndex] = abi.encodeWithSelector(\\n        CelestialCastle.retrieveFreakIds.selector,\\n        reflection[address(freaksNGuilds)],\\n        msg.sender,\\n        freakIds,\\n        freaks\\n      );\\n      callsIndex++;\\n    }\\n\\n    if (celestialIds.length > 0) {\\n      Celestial[] memory celestials = new Celestial[](celestialIds.length);\\n      for (uint256 i = 0; i < celestialIds.length; i++) {\\n        require(ownerOf[celestialIds[i]] == address(0), \\\"CelestialCastle: token already staked\\\");\\n        require(!freaksNGuilds.isFreak(celestialIds[i]), \\\"CelestialCastle: not a celestial\\\");\\n        ownerOf[celestialIds[i]] = msg.sender;\\n        celestials[i] = freaksNGuilds.getCelestialAttributes(celestialIds[i]);\\n        freaksNGuilds.transferFrom(msg.sender, address(this), celestialIds[i]);\\n      }\\n      calls[callsIndex] = abi.encodeWithSelector(\\n        CelestialCastle.retrieveCelestialIds.selector,\\n        reflection[address(freaksNGuilds)],\\n        msg.sender,\\n        celestialIds,\\n        celestials\\n      );\\n      callsIndex++;\\n    }\\n\\n    if (fbxAmount > 0) {\\n      freaksBucks.burn(msg.sender, fbxAmount);\\n      calls[callsIndex] = abi.encodeWithSelector(\\n        CelestialCastle.retrieveBucks.selector,\\n        reflection[address(freaksBucks)],\\n        msg.sender,\\n        fbxAmount\\n      );\\n    }\\n\\n    portal.sendMessage(abi.encode(reflection[address(this)], calls));\\n  }\\n\\n  /// @notice Retrieve freaks from castle when bridging.\\n  function retrieveFreakIds(\\n    address fng,\\n    address owner,\\n    uint256[] calldata freakIds,\\n    Freak[] calldata freakAttributes\\n  ) external onlyPortal {\\n    for (uint256 i = 0; i < freakIds.length; i++) {\\n      delete ownerOf[freakIds[i]];\\n      IFnG(fng).transferFrom(address(this), owner, freakIds[i]);\\n      IFnG(fng).setFreakAttributes(freakIds[i], freakAttributes[i]);\\n    }\\n  }\\n\\n  /// @notice Retrieve celestials from castle when bridging.\\n  function retrieveCelestialIds(\\n    address fng,\\n    address owner,\\n    uint256[] calldata celestialIds,\\n    Celestial[] calldata celestialAttributes\\n  ) external onlyPortal {\\n    for (uint256 i = 0; i < celestialIds.length; i++) {\\n      delete ownerOf[celestialIds[i]];\\n      IFnG(fng).transferFrom(address(this), owner, celestialIds[i]);\\n      IFnG(fng).setCelestialAttributes(celestialIds[i], celestialAttributes[i]);\\n    }\\n  }\\n\\n  // function callFnG(bytes calldata data) external onlyPortal {\\n  //   (bool succ, ) = freaksNGuilds.call(data)\\n  // }\\n\\n  /// @notice Retrive freaks bucks to `owner` when bridging.\\n  function retrieveBucks(\\n    address fbx,\\n    address owner,\\n    uint256 value\\n  ) external onlyPortal {\\n    IFBX(fbx).mint(owner, value);\\n  }\\n\\n  /// @notice Set contract reflection address on L2.\\n  function setReflection(address key, address value) external onlyOwner {\\n    reflection[key] = value;\\n    reflection[value] = key;\\n  }\\n\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external pure override returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  function setIsTravelEnabled(bool newIsTravelEnabled) external onlyOwner {\\n    isTravelEnabled = newIsTravelEnabled;\\n  }\\n\\n      /// @notice Withdraw `amount` of ether to msg.sender.\\n  function withdraw(uint256 amount) external onlyOwner {\\n    payable(msg.sender).transfer(amount);\\n  }\\n\\n  /// @notice Withdraw `amount` of `token` to the sender.\\n  function withdrawERC20(IERC20 token, uint256 amount) external onlyOwner {\\n    token.transfer(msg.sender, amount);\\n  }\\n\\n  /// @notice Withdraw `tokenId` of `token` to the sender.\\n  function withdrawERC721(IERC721 token, uint256 tokenId) external onlyOwner {\\n    token.safeTransferFrom(address(this), msg.sender, tokenId);\\n  }\\n\\n  /// @notice Withdraw `tokenId` with amount of `value` from `token` to the sender.\\n  function withdrawERC1155(\\n    IERC1155 token,\\n    uint256 tokenId,\\n    uint256 value\\n  ) external onlyOwner {\\n    token.safeTransferFrom(address(this), msg.sender, tokenId, value, \\\"\\\");\\n  }\\n}\\n\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/game/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.11;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ninterface MetadataHandlerLike {\\n  function getCelestialTokenURI(uint256 id, Celestial memory character) external view returns (string memory);\\n\\n  function getFreakTokenURI(uint256 id, Freak memory character) external view returns (string memory);\\n}\\n\\ninterface InventoryCelestialsLike {\\n  function getAttributes(Celestial memory character, uint256 id) external pure returns (bytes memory);\\n\\n  function getImage(uint256 id) external view returns (bytes memory);\\n}\\n\\ninterface InventoryFreaksLike {\\n  function getAttributes(Freak memory character, uint256 id) external view returns (bytes memory);\\n\\n  function getImage(Freak memory character) external view returns (bytes memory);\\n}\\n\\ninterface IFnG {\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 id\\n  ) external;\\n\\n  function ownerOf(uint256 id) external returns (address owner);\\n\\n  function isFreak(uint256 tokenId) external view returns (bool);\\n\\n  function getSpecies(uint256 tokenId) external view returns (uint8);\\n\\n  function getFreakAttributes(uint256 tokenId) external view returns (Freak memory);\\n\\n  function setFreakAttributes(uint256 tokenId, Freak memory attributes) external;\\n\\n  function getCelestialAttributes(uint256 tokenId) external view returns (Celestial memory);\\n\\n  function setCelestialAttributes(uint256 tokenId, Celestial memory attributes) external;\\n}\\n\\ninterface IFBX {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(address from, uint256 amount) external;\\n}\\n\\ninterface ICKEY {\\n  function ownerOf(uint256 tokenId) external returns (address);\\n}\\n\\ninterface IVAULT {\\n  function depositsOf(address account) external view returns (uint256[] memory);\\n  function _depositedBlocks(address account, uint256 tokenId) external returns(uint256);\\n}\\n\\ninterface ERC20Like {\\n  function balanceOf(address from) external view returns (uint256 balance);\\n\\n  function burn(address from, uint256 amount) external;\\n\\n  function mint(address from, uint256 amount) external;\\n\\n  function transfer(address to, uint256 amount) external;\\n}\\n\\ninterface ERC1155Like {\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount\\n  ) external;\\n\\n  function burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) external;\\n}\\n\\ninterface ERC721Like {\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 id\\n  ) external;\\n\\n  function transfer(address to, uint256 id) external;\\n\\n  function ownerOf(uint256 id) external returns (address owner);\\n\\n  function mint(address to, uint256 tokenid) external;\\n}\\n\\ninterface PortalLike {\\n  function sendMessage(bytes calldata) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/game/interfaces/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nstruct Freak {\\n  uint8 species;\\n  uint8 body;\\n  uint8 armor;\\n  uint8 mainHand;\\n  uint8 offHand;\\n  uint8 power;\\n  uint8 health;\\n  uint8 criticalStrikeMod;\\n\\n}\\nstruct Celestial {\\n  uint8 healthMod;\\n  uint8 powMod;\\n  uint8 cPP;\\n  uint8 cLevel;\\n}\\n\\nstruct Layer {\\n  string name;\\n  string data;\\n}\\n\\nstruct LayerInput {\\n  string name;\\n  string data;\\n  uint8 layerIndex;\\n  uint8 itemIndex;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 512,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"freaksBucks\",\"outputs\":[{\"internalType\":\"contract IFBX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freaksNGuilds\",\"outputs\":[{\"internalType\":\"contract IFnG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPortal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFreaksNGuilds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFreaksBucks\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newIsTravelEnabled\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTravelEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portal\",\"outputs\":[{\"internalType\":\"contract PortalLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reflection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fbx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"retrieveBucks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fng\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"celestialIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"healthMod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"powMod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cPP\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct Celestial[]\",\"name\":\"celestialAttributes\",\"type\":\"tuple[]\"}],\"name\":\"retrieveCelestialIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fng\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"freakIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"species\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mainHand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"offHand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"health\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"criticalStrikeMod\",\"type\":\"uint8\"}],\"internalType\":\"struct Freak[]\",\"name\":\"freakAttributes\",\"type\":\"tuple[]\"}],\"name\":\"retrieveFreakIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newIsTravelEnabled\",\"type\":\"bool\"}],\"name\":\"setIsTravelEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"freakIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"celestialIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fbxAmount\",\"type\":\"uint256\"}],\"name\":\"travel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CelestialCastle", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "512", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}