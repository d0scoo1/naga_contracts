{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\n// ---------------------\r\n//     Phantom NFTs   //\r\n// ---------------------\r\n//  (by @pldespaigne)\r\n\r\n\r\npragma solidity ^0.8.11;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\nlibrary Strings {\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\ncontract PhantomNFT {\r\n\r\n    address payable public owner;\r\n    string public contractURI;\r\n    string public tokenUriPrefix;\r\n    string public tokenUriSuffix;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    mapping(uint256 => address) private tokenIdsToOwner;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _contractUri,\r\n        string memory _prefix,\r\n        string memory _suffix,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) {\r\n        owner = payable(msg.sender);\r\n        contractURI = _contractUri;\r\n        tokenUriPrefix = _prefix;\r\n        tokenUriSuffix = _suffix;\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setContractUri(string memory _contractUri) public onlyOwner {\r\n        contractURI = _contractUri;\r\n    }\r\n\r\n    function setPrefix(string memory _prefix) public onlyOwner {\r\n        tokenUriPrefix = _prefix;\r\n    }\r\n\r\n    function setSuffix(string memory _suffix) public onlyOwner {\r\n        tokenUriSuffix = _suffix;\r\n    }\r\n\r\n    function setOwner(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function withdraw() public {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function mint(address _to, uint256 _tokenId) public payable {\r\n        tokenIdsToOwner[_tokenId] = _to;\r\n        emit Transfer(tokenIdsToOwner[_tokenId], _to, _tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n        string memory strId = Strings.toString(_tokenId); // convert uint256 to a string\r\n        return string(abi.encodePacked(tokenUriPrefix, strId, tokenUriSuffix));\r\n    }\r\n\r\n    // Required to get listed on open sea\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address) {\r\n        return tokenIdsToOwner[_tokenId];\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n        return\r\n            interfaceId == 0x5b5e139f || // type(IERC721Metadata).interfaceId || // 0x5b5e139f\r\n            interfaceId == 0x80ac58cd || // type(IERC721).interfaceId || // 0x80ac58cd\r\n            interfaceId == 0x01ffc9a7 // type(IERC165).interfaceId // 0x01ffc9a7\r\n        ;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_suffix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"}],\"name\":\"setContractUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_prefix\",\"type\":\"string\"}],\"name\":\"setPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_suffix\",\"type\":\"string\"}],\"name\":\"setSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PhantomNFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000004668747470733a2f2f6575726f70652d77657374312d73796e7468657469632d706963747572652e636c6f756466756e6374696f6e732e6e65742f6765744d657461646174612f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5068616e746f6d204e46547300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004704e4654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9852e7755a5cd760567ef9b8e25376b8a72e86dd158b075e80d16a9f0bf4d9f2"}]}