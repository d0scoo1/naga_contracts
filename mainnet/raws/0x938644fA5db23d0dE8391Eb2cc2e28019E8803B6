{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/P2Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./interface/IP2Controller.sol\\\";\\r\\nimport \\\"./interface/IOracle.sol\\\";\\r\\nimport \\\"./interface/IXNFT.sol\\\";\\r\\nimport \\\"./P2ControllerStorage.sol\\\";\\r\\nimport \\\"./Exponential.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract P2Controller is P2ControllerStorage, Exponential,  Initializable{\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function initialize(ILiquidityMining _liquidityMining) external initializer {\\r\\n        admin = msg.sender;\\r\\n        liquidityMining = _liquidityMining;\\r\\n    }\\r\\n\\r\\n    function mintAllowed(address xToken, address minter, uint256 mintAmount) external view whenNotPaused(xToken, 1){\\r\\n        require(poolStates[xToken].isListed, \\\"token not listed\\\");\\r\\n\\r\\n        uint256 supplyCap = poolStates[xToken].supplyCap;\\r\\n\\r\\n        if (supplyCap != 0) {\\r\\n            uint256 _totalSupply = IXToken(xToken).totalSupply();\\r\\n            uint256 _exchangeRate = IXToken(xToken).exchangeRateStored();\\r\\n            \\r\\n            uint256 totalUnderlyingSupply = mulScalarTruncate(_exchangeRate, _totalSupply);\\r\\n            uint nextTotalUnderlyingSupply = totalUnderlyingSupply.add(mintAmount);\\r\\n            require(nextTotalUnderlyingSupply < supplyCap, \\\"market supply cap reached\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintVerify(address xToken, address account) external whenNotPaused(xToken, 1){\\r\\n        updateSupplyVerify(xToken, account, true);\\r\\n    }\\r\\n\\r\\n    function redeemAllowed(address xToken, address redeemer, uint256 redeemTokens, uint256 redeemAmount) external view whenNotPaused(xToken, 2){\\r\\n        require(poolStates[xToken].isListed, \\\"token not listed\\\");\\r\\n    }\\r\\n\\r\\n    function redeemVerify(address xToken, address redeemer) external whenNotPaused(xToken, 2){\\r\\n        updateSupplyVerify(xToken, redeemer, false);\\r\\n    } \\r\\n\\r\\n    function orderAllowed(uint256 orderId, address borrower) internal view returns(address){\\r\\n        (address _collection , , address _pledger) = xNFT.getOrderDetail(orderId);\\r\\n\\r\\n        require((_collection != address(0) && _pledger != address(0)), \\\"order not exist\\\");\\r\\n        require(_pledger == borrower, \\\"borrower don't hold the order\\\");\\r\\n\\r\\n        bool isLiquidated = xNFT.isOrderLiquidated(orderId);\\r\\n        require(!isLiquidated, \\\"order has been liquidated\\\");\\r\\n        return _collection;\\r\\n    }\\r\\n\\r\\n    function borrowAllowed(address xToken, uint256 orderId, address borrower, uint256 borrowAmount) external whenNotPaused(xToken, 3){\\r\\n        require(poolStates[xToken].isListed, \\\"token not listed\\\");\\r\\n\\r\\n        orderAllowed(orderId, borrower);\\r\\n\\r\\n        (address _collection , , ) = xNFT.getOrderDetail(orderId);\\r\\n\\r\\n        CollateralState storage _collateralState = collateralStates[_collection];\\r\\n        require(_collateralState.isListed, \\\"collection not exist\\\");\\r\\n        require(_collateralState.supportPools[xToken] || _collateralState.isSupportAllPools, \\\"collection don't support this pool\\\");\\r\\n\\r\\n        address _lastXToken = orderDebtStates[orderId];\\r\\n        require(_lastXToken == address(0) || _lastXToken == xToken, \\\"only support borrowing of one xToken\\\");\\r\\n\\r\\n        (uint256 _price, bool valid) = oracle.getPrice(_collection, IXToken(xToken).underlying());\\r\\n        require(_price > 0 && valid, \\\"price is not valid\\\");\\r\\n\\r\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\r\\n        if (poolStates[xToken].borrowCap != 0) {\\r\\n            require(IXToken(xToken).totalBorrows().add(borrowAmount) < poolStates[xToken].borrowCap, \\\"pool borrow cap reached\\\");\\r\\n        }\\r\\n\\r\\n        uint256 _maxBorrow = mulScalarTruncate(_price, _collateralState.collateralFactor);\\r\\n        uint256 _mayBorrowed = borrowAmount;\\r\\n        if (_lastXToken != address(0)){\\r\\n            _mayBorrowed = IXToken(_lastXToken).borrowBalanceStored(orderId).add(borrowAmount);  \\r\\n        }\\r\\n        require(_mayBorrowed <= _maxBorrow, \\\"borrow amount exceed\\\");\\r\\n\\r\\n        if (_lastXToken == address(0)){\\r\\n            orderDebtStates[orderId] = xToken;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function borrowVerify(uint256 orderId, address xToken, address borrower) external whenNotPaused(xToken, 3){\\r\\n        require(orderDebtStates[orderId] == xToken , \\\"collateral debt invalid\\\");\\r\\n        uint256 _borrowBalance = IXToken(xToken).borrowBalanceCurrent(orderId);\\r\\n        updateBorrowVerify(orderId, xToken, borrower, _borrowBalance, true);\\r\\n    }\\r\\n\\r\\n    function repayBorrowAllowed(address xToken, uint256 orderId, address borrower, address payer, uint256 repayAmount) external view whenNotPaused(xToken, 4){\\r\\n        require(poolStates[xToken].isListed, \\\"token not listed\\\");\\r\\n\\r\\n        address _collection = orderAllowed(orderId, borrower);\\r\\n\\r\\n        require(orderDebtStates[orderId] == xToken , \\\"collateral debt invalid\\\");\\r\\n    }\\r\\n\\r\\n    function repayBorrowVerify(address xToken, uint256 orderId, address borrower, address payer, uint256 repayAmount) external whenNotPaused(xToken, 4){\\r\\n        require(orderDebtStates[orderId] == xToken , \\\"collateral debt invalid\\\");\\r\\n        uint256 _borrowBalance = IXToken(xToken).borrowBalanceCurrent(orderId);\\r\\n\\r\\n        updateBorrowVerify(orderId, xToken, borrower, _borrowBalance, false);\\r\\n\\r\\n        if (_borrowBalance == 0) {\\r\\n            delete orderDebtStates[orderId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function repayBorrowAndClaimVerify(address xToken, uint256 orderId) external whenNotPaused(xToken, 4){\\r\\n        require(orderDebtStates[orderId] == address(0), \\\"address invalid\\\");\\r\\n        xNFT.notifyRepayBorrow(orderId);\\r\\n    }\\r\\n\\r\\n    function liquidateBorrowAllowed(address xToken, uint256 orderId, address borrower, address liquidator) external view whenNotPaused(xToken, 5){\\r\\n        require(poolStates[xToken].isListed, \\\"token not listed\\\");\\r\\n\\r\\n        orderAllowed(orderId, borrower);\\r\\n\\r\\n        (address _collection , , ) = xNFT.getOrderDetail(orderId);\\r\\n\\r\\n        require(orderDebtStates[orderId] == xToken , \\\"collateral debt invalid\\\");\\r\\n\\r\\n        (uint256 _price, bool valid) = oracle.getPrice(_collection, IXToken(xToken).underlying());\\r\\n        require(_price > 0 && valid, \\\"price is not valid\\\");\\r\\n\\r\\n        uint256 _borrowBalance = IXToken(xToken).borrowBalanceStored(orderId);\\r\\n        uint256 _liquidateBalance = mulScalarTruncate(_price, collateralStates[_collection].liquidateFactor);\\r\\n\\r\\n        require(_borrowBalance > _liquidateBalance, \\\"order don't exceed borrow balance\\\");\\r\\n    } \\r\\n\\r\\n    function liquidateBorrowVerify(address xToken, uint256 orderId, address borrower, address liquidator, uint256 repayAmount)external whenNotPaused(xToken, 5){\\r\\n        orderAllowed(orderId, borrower);\\r\\n\\r\\n        (bool _valid, address _liquidator, uint256 _liquidatedPrice) = IXToken(xToken).orderLiquidated(orderId);\\r\\n\\r\\n        if (_valid && _liquidator != address(0)){\\r\\n            xNFT.notifyOrderLiquidated(xToken, orderId, _liquidator, _liquidatedPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferAllowed(address xToken, address src, address dst, uint256 transferTokens) external view{\\r\\n        require(poolStates[xToken].isListed, \\\"token not listed\\\");\\r\\n    }\\r\\n\\r\\n    function transferVerify(address xToken, address src, address dst) external{\\r\\n        updateSupplyVerify(xToken, src, false);\\r\\n        updateSupplyVerify(xToken, dst, true);\\r\\n    }\\r\\n\\r\\n    function getOrderBorrowBalanceCurrent(uint256 orderId) external returns(uint256){\\r\\n        address _xToken = orderDebtStates[orderId];\\r\\n        if (_xToken == address(0)){\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 _borrowBalance = IXToken(_xToken).borrowBalanceCurrent(orderId);\\r\\n        return _borrowBalance;\\r\\n    }\\r\\n\\r\\n    function getCollateralStateSupportPools(address collection, address xToken) external view returns(bool){\\r\\n        return collateralStates[collection].supportPools[xToken];\\r\\n    }\\r\\n\\r\\n    function updateSupplyVerify(address xToken, address account, bool isDeposit) internal{\\r\\n        uint256 balance = IXToken(xToken).balanceOf(account);\\r\\n        if(address(liquidityMining) != address(0)){\\r\\n            liquidityMining.updateSupply(xToken, balance, account, isDeposit);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateBorrowVerify(uint256 orderId, address xToken, address account, uint256 borrowBalance, bool isDeposit) internal{\\r\\n        address collection = orderAllowed(orderId, account);\\r\\n        if(address(liquidityMining) != address(0)){\\r\\n            liquidityMining.updateBorrow(xToken, collection, borrowBalance, account, orderId, isDeposit);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //================== admin funtion ==================\\r\\n\\r\\n    function addPool(address xToken, uint256 _borrowCap, uint256 _supplyCap) external onlyAdmin{\\r\\n        require(!poolStates[xToken].isListed, \\\"pool has added\\\");\\r\\n        poolStates[xToken] = PoolState(\\r\\n            true,\\r\\n            _borrowCap,\\r\\n            _supplyCap\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addCollateral(address _collection, uint256 _collateralFactor, uint256 _liquidateFactor, address[] calldata _pools) external onlyAdmin{\\r\\n        require(!collateralStates[_collection].isListed, \\\"collection has added\\\");\\r\\n        require(_collateralFactor <= COLLATERAL_FACTOR_MAX, \\\"_collateralFactor is greater than COLLATERAL_FACTOR_MAX\\\");\\r\\n        require(_liquidateFactor <= LIQUIDATE_FACTOR_MAX, \\\" _liquidateFactor is greater than LIQUIDATE_FACTOR_MAX\\\");\\r\\n        \\r\\n        collateralStates[_collection].isListed = true;\\r\\n        collateralStates[_collection].collateralFactor = _collateralFactor;\\r\\n        collateralStates[_collection].liquidateFactor = _liquidateFactor;\\r\\n\\r\\n        if (_pools.length == 0){\\r\\n            collateralStates[_collection].isSupportAllPools = true;\\r\\n        }else{\\r\\n            collateralStates[_collection].isSupportAllPools = false;\\r\\n\\r\\n            for (uint i = 0; i < _pools.length; i++){\\r\\n                collateralStates[_collection].supportPools[_pools[i]] = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setCollateralState(address _collection, uint256 _collateralFactor, uint256 _liquidateFactor) external onlyAdmin {\\r\\n        require(collateralStates[_collection].isListed, \\\"collection has not added\\\");\\r\\n        require(_collateralFactor <= COLLATERAL_FACTOR_MAX, \\\"_collateralFactor is greater than COLLATERAL_FACTOR_MAX\\\");\\r\\n        require(_liquidateFactor <= LIQUIDATE_FACTOR_MAX, \\\" _liquidateFactor is greater than LIQUIDATE_FACTOR_MAX\\\");\\r\\n        collateralStates[_collection].collateralFactor = _collateralFactor;\\r\\n        collateralStates[_collection].liquidateFactor = _liquidateFactor;\\r\\n    }\\r\\n\\r\\n    function setCollateralSupportPools(address _collection, address[] calldata _pools) external onlyAdmin{\\r\\n        require(collateralStates[_collection].isListed, \\\"collection has not added\\\");\\r\\n        \\r\\n        if (_pools.length == 0){\\r\\n            collateralStates[_collection].isSupportAllPools = true;\\r\\n        }else{\\r\\n            collateralStates[_collection].isSupportAllPools = false;\\r\\n\\r\\n            for (uint i = 0; i < _pools.length; i++){\\r\\n                collateralStates[_collection].supportPools[_pools[i]] = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOracle(address _oracle) external onlyAdmin{\\r\\n        oracle = IOracle(_oracle);\\r\\n    }\\r\\n\\r\\n    function setXNFT(address _xNFT) external onlyAdmin{\\r\\n        xNFT = IXNFT(_xNFT);\\r\\n    }\\r\\n\\r\\n    function setLiquidityMining(ILiquidityMining _liquidityMining) external onlyAdmin{\\r\\n        liquidityMining = _liquidityMining;\\r\\n    }\\r\\n\\r\\n    function setPendingAdmin(address newPendingAdmin) external onlyAdmin{\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n    }\\r\\n\\r\\n    function acceptAdmin() external{\\r\\n        require(msg.sender == pendingAdmin, \\\"only pending admin could accept\\\");\\r\\n        admin = pendingAdmin;\\r\\n        pendingAdmin = address(0);\\r\\n    }\\r\\n\\r\\n    // 1 mint, 2 redeem, 3 borrow, 4 repayborrow, 5 liquidity\\r\\n    function setPause(address xToken, uint256 index, bool isPause) external onlyAdmin{\\r\\n        xTokenPausedMap[xToken][index] = isPause;\\r\\n    }\\r\\n\\r\\n    //================== admin funtion ==================\\r\\n    modifier onlyAdmin(){\\r\\n        require(msg.sender == admin, \\\"admin auth\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotPaused(address xToken, uint256 index) {\\r\\n        require(!xTokenPausedMap[xToken][index], \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IP2Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IP2Controller {\\r\\n\\r\\n    function mintAllowed(address xToken, address minter, uint256 mintAmount) external;\\r\\n\\r\\n    function mintVerify(address xToken, address account) external;\\r\\n\\r\\n    function redeemAllowed(address xToken, address redeemer, uint256 redeemTokens, uint256 redeemAmount) external;\\r\\n\\r\\n    function redeemVerify(address xToken, address redeemer) external;\\r\\n    \\r\\n    function borrowAllowed(address xToken, uint256 orderId, address borrower, uint256 borrowAmount) external;\\r\\n\\r\\n    function borrowVerify(uint256 orderId, address xToken, address borrower) external;\\r\\n\\r\\n    function repayBorrowAllowed(address xToken, uint256 orderId, address borrower, address payer, uint256 repayAmount) external;\\r\\n\\r\\n    function repayBorrowVerify(address xToken, uint256 orderId, address borrower, address payer, uint256 repayAmount) external;\\r\\n\\r\\n    function repayBorrowAndClaimVerify(address xToken, uint256 orderId) external;\\r\\n\\r\\n    function liquidateBorrowAllowed(address xToken, uint256 orderId, address borrower, address liquidator) external;\\r\\n\\r\\n    function liquidateBorrowVerify(address xToken, uint256 orderId, address borrower, address liquidator, uint256 repayAmount)external;\\r\\n    \\r\\n    function transferAllowed(address xToken, address src, address dst, uint256 transferTokens) external;\\r\\n\\r\\n    function transferVerify(address xToken, address src, address dst) external;\\r\\n\\r\\n    function getOrderBorrowBalanceCurrent(uint256 orderId) external returns(uint256);\\r\\n\\r\\n    // admin function\\r\\n\\r\\n    function addPool(address xToken, uint256 _borrowCap, uint256 _supplyCap) external;\\r\\n\\r\\n    function addCollateral(address _collection, uint256 _collateralFactor, uint256 _liquidateFactor, address[] calldata _pools) external;\\r\\n\\r\\n    function setPriceOracle(address _oracle) external;\\r\\n\\r\\n    function setXNFT(address _xNFT) external;\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/interface/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IOracle {\\r\\n    function getPrice(address collection, address denotedToken) external view returns (uint256, bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IXNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IXNFT {\\r\\n\\r\\n    function pledge(address collection, uint256 tokenId, uint256 nftType) external;\\r\\n    function pledge721(address _collection, uint256 _tokenId) external;\\r\\n    function pledge1155(address _collection, uint256 _tokenId) external;\\r\\n    function getOrderDetail(uint256 orderId) external view returns(address collection, uint256 tokenId, address pledger);\\r\\n    function isOrderLiquidated(uint256 orderId) external view returns(bool);\\r\\n    function withdrawNFT(uint256 orderId) external;\\r\\n\\r\\n\\r\\n    // onlyController\\r\\n    function notifyOrderLiquidated(address xToken, uint256 orderId, address liquidator, uint256 liquidatedPrice) external;\\r\\n    function notifyRepayBorrow(uint256 orderId) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/P2ControllerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./interface/IXToken.sol\\\";\\r\\nimport \\\"./interface/IXNFT.sol\\\";\\r\\nimport \\\"./interface/IOracle.sol\\\";\\r\\nimport \\\"./interface/ILiquidityMining.sol\\\";\\r\\n\\r\\ncontract P2ControllerStorage{\\r\\n\\r\\n    address public admin;\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    struct PoolState{\\r\\n        bool isListed;\\r\\n        uint256 borrowCap;\\r\\n        uint256 supplyCap;\\r\\n    }\\r\\n    // xToken => poolState\\r\\n    mapping(address => PoolState) public poolStates;\\r\\n\\r\\n    struct CollateralState{\\r\\n        bool isListed;\\r\\n        uint256 collateralFactor;\\r\\n        uint256 liquidateFactor;\\r\\n        bool isSupportAllPools;\\r\\n        mapping(address => bool) supportPools;\\r\\n        // the speical NFT could or not borrow\\r\\n        // mapping(uint256 => bool) blackList;\\r\\n    }\\r\\n    //nft address => state\\r\\n    mapping(address => CollateralState) public collateralStates;\\r\\n\\r\\n    // orderId => xToken\\r\\n    mapping(uint256 => address) public orderDebtStates;\\r\\n\\r\\n    IXNFT public xNFT;\\r\\n    IOracle public oracle;\\r\\n    ILiquidityMining public liquidityMining;\\r\\n\\r\\n    uint256 internal constant COLLATERAL_FACTOR_MAX = 1e18;\\r\\n    uint256 internal constant LIQUIDATE_FACTOR_MAX = 1e18;\\r\\n\\r\\n    mapping(address => mapping(uint256 => bool)) public xTokenPausedMap;\\r\\n}\"\r\n    },\r\n    \"contracts/Exponential.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./library/SafeMath.sol\\\";\\r\\n\\r\\ncontract Exponential {\\r\\n    uint256 constant expScale = 1e18;\\r\\n    uint256 constant halfExpScale = expScale / 2;\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function getExp(uint256 num, uint256 denom)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256 rational)\\r\\n    {\\r\\n        rational = num.mul(expScale).div(denom);\\r\\n    }\\r\\n\\r\\n    function getDiv(uint256 num, uint256 denom)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256 rational)\\r\\n    {\\r\\n        rational = num.mul(expScale).div(denom);\\r\\n    }\\r\\n\\r\\n    function addExp(uint256 a, uint256 b) public pure returns (uint256 result) {\\r\\n        result = a.add(b);\\r\\n    }\\r\\n\\r\\n    function subExp(uint256 a, uint256 b) public pure returns (uint256 result) {\\r\\n        result = a.sub(b);\\r\\n    }\\r\\n\\r\\n    function mulExp(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        uint256 doubleScaledProduct = a.mul(b);\\r\\n\\r\\n        uint256 doubleScaledProductWithHalfScale = halfExpScale.add(\\r\\n            doubleScaledProduct\\r\\n        );\\r\\n\\r\\n        return doubleScaledProductWithHalfScale.div(expScale);\\r\\n    }\\r\\n\\r\\n    function divExp(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return getDiv(a, b);\\r\\n    }\\r\\n\\r\\n    function mulExp3(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 c\\r\\n    ) external pure returns (uint256) {\\r\\n        return mulExp(mulExp(a, b), c);\\r\\n    }\\r\\n\\r\\n    function mulScalar(uint256 a, uint256 scalar)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256 scaled)\\r\\n    {\\r\\n        scaled = a.mul(scalar);\\r\\n    }\\r\\n\\r\\n    function mulScalarTruncate(uint256 a, uint256 scalar)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 product = mulScalar(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    function mulScalarTruncateAddUInt(\\r\\n        uint256 a,\\r\\n        uint256 scalar,\\r\\n        uint256 addend\\r\\n    ) external pure returns (uint256) {\\r\\n        uint256 product = mulScalar(a, scalar);\\r\\n        return truncate(product).add(addend);\\r\\n    }\\r\\n\\r\\n    function divScalarByExpTruncate(uint256 scalar, uint256 divisor)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 fraction = divScalarByExp(scalar, divisor);\\r\\n        return truncate(fraction);\\r\\n    }\\r\\n\\r\\n    function divScalarByExp(uint256 scalar, uint256 divisor)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 numerator = expScale.mul(scalar);\\r\\n        return getExp(numerator, divisor);\\r\\n    }\\r\\n\\r\\n    function divScalar(uint256 a, uint256 scalar)\\r\\n        external\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return a.div(scalar);\\r\\n    }\\r\\n\\r\\n    function truncate(uint256 exp) public pure returns (uint256) {\\r\\n        return exp.div(expScale);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IXToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IInterestRateModel.sol\\\";\\r\\n\\r\\ninterface IXToken is IERC20 {\\r\\n\\r\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\r\\n\\r\\n    function mint(uint256 amount) external payable;\\r\\n    function redeem(uint256 redeemTokens) external;\\r\\n    function redeemUnderlying(uint256 redeemAmounts) external;\\r\\n\\r\\n    function borrow(uint256 orderId, address payable borrower, uint256 borrowAmount) external;\\r\\n    function repayBorrow(uint256 orderId, address borrower, uint256 repayAmount) external payable;\\r\\n    function liquidateBorrow(uint256 orderId, address borrower) external payable;\\r\\n\\r\\n    function orderLiquidated(uint256 orderId) external view returns(bool, address, uint256); \\r\\n\\r\\n    function accrueInterest() external;\\r\\n\\r\\n    function borrowBalanceCurrent(uint256 orderId) external returns (uint256);\\r\\n    function borrowBalanceStored(uint256 orderId) external view returns (uint256);\\r\\n\\r\\n    function exchangeRateCurrent() external returns (uint256);\\r\\n    function exchangeRateStored() external view returns (uint256);\\r\\n\\r\\n    function underlying() external view returns(address);\\r\\n    function totalBorrows() external view returns(uint256);\\r\\n    function totalCash() external view returns (uint256);\\r\\n    function totalReserves() external view returns (uint256);\\r\\n\\r\\n    /**admin function **/\\r\\n    function setPendingAdmin(address payable newPendingAdmin) external;\\r\\n    function acceptAdmin() external;\\r\\n    function setReserveFactor(uint256 newReserveFactor) external;\\r\\n    function reduceReserves(uint256 reduceAmount) external;\\r\\n    function setInterestRateModel(IInterestRateModel newInterestRateModel) external;\\r\\n    function setTransferEthGasCost(uint256 _transferEthGasCost) external;\\r\\n\\r\\n    /**event */\\r\\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\r\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\r\\n    event Borrow(uint256 orderId, address borrower, uint256 borrowAmount, uint256 orderBorrows, uint256 totalBorrows);\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/interface/ILiquidityMining.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\r\\n\\r\\ninterface ILiquidityMining {\\r\\n\\r\\n    function updateBorrow(address xToken, address collection, uint256 amount, address account, uint256 orderId, bool isDeposit) external; \\r\\n\\r\\n    function updateSupply(address xToken, uint256 amount, address account, bool isDeposit) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IInterestRateModel {\\r\\n\\r\\n    function blocksPerYear() external view returns (uint256); \\r\\n\\r\\n    function isInterestRateModel() external returns(bool);\\r\\n\\r\\n    function getBorrowRate(\\r\\n        uint256 cash, \\r\\n        uint256 borrows, \\r\\n        uint256 reserves) external view returns (uint256);\\r\\n\\r\\n    function getSupplyRate(\\r\\n        uint256 cash, \\r\\n        uint256 borrows, \\r\\n        uint256 reserves, \\r\\n        uint256 reserveFactor) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/library/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a < b) {\\r\\n            return b - a;\\r\\n        }\\r\\n        return a - b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidateFactor\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"addExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supplyCap\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralStates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidateFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupportAllPools\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"divExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"}],\"name\":\"divScalar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"divScalarByExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"divScalarByExpTruncate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"}],\"name\":\"getCollateralStateSupportPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom\",\"type\":\"uint256\"}],\"name\":\"getDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rational\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom\",\"type\":\"uint256\"}],\"name\":\"getExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rational\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderBorrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityMining\",\"name\":\"_liquidityMining\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"contract ILiquidityMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"mulExp3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"}],\"name\":\"mulScalar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scaled\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"}],\"name\":\"mulScalarTruncate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addend\",\"type\":\"uint256\"}],\"name\":\"mulScalarTruncateAddUInt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderDebtStates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolStates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAndClaimVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidateFactor\",\"type\":\"uint256\"}],\"name\":\"setCollateralState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"setCollateralSupportPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityMining\",\"name\":\"_liquidityMining\",\"type\":\"address\"}],\"name\":\"setLiquidityMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xNFT\",\"type\":\"address\"}],\"name\":\"setXNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"subExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exp\",\"type\":\"uint256\"}],\"name\":\"truncate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xNFT\",\"outputs\":[{\"internalType\":\"contract IXNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xTokenPausedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "P2Controller", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}