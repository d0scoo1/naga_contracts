{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/NFTOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {INFTOracle} from \\\"../interfaces/INFTOracle.sol\\\";\\nimport {BlockContext} from \\\"../utils/BlockContext.sol\\\";\\n\\ncontract NFTOracle is INFTOracle, Initializable, OwnableUpgradeable, BlockContext {\\n  modifier onlyAdmin() {\\n    require(_msgSender() == priceFeedAdmin, \\\"NFTOracle: !admin\\\");\\n    _;\\n  }\\n\\n  event AssetAdded(address indexed asset);\\n  event AssetRemoved(address indexed asset);\\n  event FeedAdminUpdated(address indexed admin);\\n  event SetAssetData(address indexed asset, uint256 price, uint256 timestamp, uint256 roundId);\\n  event SetAssetTwapPrice(address indexed asset, uint256 price, uint256 timestamp);\\n\\n  struct NFTPriceData {\\n    uint256 roundId;\\n    uint256 price;\\n    uint256 timestamp;\\n  }\\n\\n  struct NFTPriceFeed {\\n    bool registered;\\n    NFTPriceData[] nftPriceData;\\n  }\\n\\n  address public priceFeedAdmin;\\n\\n  // key is nft contract address\\n  mapping(address => NFTPriceFeed) public nftPriceFeedMap;\\n  address[] public nftPriceFeedKeys;\\n\\n  // data validity check parameters\\n  uint256 private constant DECIMAL_PRECISION = 10**18;\\n  // Maximum deviation allowed between two consecutive oracle prices. 18-digit precision.\\n  uint256 public maxPriceDeviation; // 20%,18-digit precision.\\n  // The maximum allowed deviation between two consecutive oracle prices within a certain time frame. 18-bit precision.\\n  uint256 public maxPriceDeviationWithTime; // 10%\\n  uint256 public timeIntervalWithPrice; // 30 minutes\\n  uint256 public minUpdateTime; // 10 minutes\\n\\n  mapping(address => bool) public nftPaused;\\n\\n  modifier whenNotPaused(address _nftContract) {\\n    _whenNotPaused(_nftContract);\\n    _;\\n  }\\n\\n  uint256 public twapInterval;\\n  mapping(address => uint256) public twapPriceMap;\\n\\n  function _whenNotPaused(address _nftContract) internal view {\\n    bool _paused = nftPaused[_nftContract];\\n    require(!_paused, \\\"NFTOracle: nft price feed paused\\\");\\n  }\\n\\n  function initialize(\\n    address _admin,\\n    uint256 _maxPriceDeviation,\\n    uint256 _maxPriceDeviationWithTime,\\n    uint256 _timeIntervalWithPrice,\\n    uint256 _minUpdateTime,\\n    uint256 _twapInterval\\n  ) public initializer {\\n    __Ownable_init();\\n    priceFeedAdmin = _admin;\\n    maxPriceDeviation = _maxPriceDeviation;\\n    maxPriceDeviationWithTime = _maxPriceDeviationWithTime;\\n    timeIntervalWithPrice = _timeIntervalWithPrice;\\n    minUpdateTime = _minUpdateTime;\\n    twapInterval = _twapInterval;\\n  }\\n\\n  function setPriceFeedAdmin(address _admin) external onlyOwner {\\n    priceFeedAdmin = _admin;\\n    emit FeedAdminUpdated(_admin);\\n  }\\n\\n  function setAssets(address[] calldata _nftContracts) external onlyOwner {\\n    for (uint256 i = 0; i < _nftContracts.length; i++) {\\n      _addAsset(_nftContracts[i]);\\n    }\\n  }\\n\\n  function addAsset(address _nftContract) external onlyOwner {\\n    _addAsset(_nftContract);\\n  }\\n\\n  function _addAsset(address _nftContract) internal {\\n    requireKeyExisted(_nftContract, false);\\n    nftPriceFeedMap[_nftContract].registered = true;\\n    nftPriceFeedKeys.push(_nftContract);\\n    emit AssetAdded(_nftContract);\\n  }\\n\\n  function removeAsset(address _nftContract) external onlyOwner {\\n    requireKeyExisted(_nftContract, true);\\n    delete nftPriceFeedMap[_nftContract];\\n\\n    uint256 length = nftPriceFeedKeys.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      if (nftPriceFeedKeys[i] == _nftContract) {\\n        nftPriceFeedKeys[i] = nftPriceFeedKeys[length - 1];\\n        nftPriceFeedKeys.pop();\\n        break;\\n      }\\n    }\\n    emit AssetRemoved(_nftContract);\\n  }\\n\\n  function setAssetData(address _nftContract, uint256 _price) external override onlyAdmin whenNotPaused(_nftContract) {\\n    requireKeyExisted(_nftContract, true);\\n    uint256 _timestamp = _blockTimestamp();\\n    require(_timestamp > getLatestTimestamp(_nftContract), \\\"NFTOracle: incorrect timestamp\\\");\\n    require(_price > 0, \\\"NFTOracle: price can not be 0\\\");\\n    bool dataValidity = checkValidityOfPrice(_nftContract, _price, _timestamp);\\n    require(dataValidity, \\\"NFTOracle: invalid price data\\\");\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    NFTPriceData memory data = NFTPriceData({price: _price, timestamp: _timestamp, roundId: len});\\n    nftPriceFeedMap[_nftContract].nftPriceData.push(data);\\n\\n    uint256 twapPrice = calculateTwapPrice(_nftContract);\\n    twapPriceMap[_nftContract] = twapPrice;\\n\\n    emit SetAssetData(_nftContract, _price, _timestamp, len);\\n    emit SetAssetTwapPrice(_nftContract, twapPrice, _timestamp);\\n  }\\n\\n  function getAssetPrice(address _nftContract) external view override returns (uint256) {\\n    require(isExistedKey(_nftContract), \\\"NFTOracle: key not existed\\\");\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    require(len > 0, \\\"NFTOracle: no price data\\\");\\n    uint256 twapPrice = twapPriceMap[_nftContract];\\n    if (twapPrice == 0) {\\n      return nftPriceFeedMap[_nftContract].nftPriceData[len - 1].price;\\n    } else {\\n      return twapPrice;\\n    }\\n  }\\n\\n  function getLatestTimestamp(address _nftContract) public view override returns (uint256) {\\n    require(isExistedKey(_nftContract), \\\"NFTOracle: key not existed\\\");\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    if (len == 0) {\\n      return 0;\\n    }\\n    return nftPriceFeedMap[_nftContract].nftPriceData[len - 1].timestamp;\\n  }\\n\\n  function calculateTwapPrice(address _nftContract) public view returns (uint256) {\\n    require(isExistedKey(_nftContract), \\\"NFTOracle: key not existed\\\");\\n    require(twapInterval != 0, \\\"NFTOracle: interval can't be 0\\\");\\n\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    require(len > 0, \\\"NFTOracle: Not enough history\\\");\\n    uint256 round = len - 1;\\n    NFTPriceData memory priceRecord = nftPriceFeedMap[_nftContract].nftPriceData[round];\\n    uint256 latestTimestamp = priceRecord.timestamp;\\n    uint256 baseTimestamp = _blockTimestamp() - twapInterval;\\n    // if latest updated timestamp is earlier than target timestamp, return the latest price.\\n    if (latestTimestamp < baseTimestamp || round == 0) {\\n      return priceRecord.price;\\n    }\\n\\n    // rounds are like snapshots, latestRound means the latest price snapshot. follow chainlink naming\\n    uint256 cumulativeTime = _blockTimestamp() - latestTimestamp;\\n    uint256 previousTimestamp = latestTimestamp;\\n    uint256 weightedPrice = priceRecord.price * cumulativeTime;\\n    while (true) {\\n      if (round == 0) {\\n        // if cumulative time is less than requested interval, return current twap price\\n        return weightedPrice / cumulativeTime;\\n      }\\n\\n      round = round - 1;\\n      // get current round timestamp and price\\n      priceRecord = nftPriceFeedMap[_nftContract].nftPriceData[round];\\n      uint256 currentTimestamp = priceRecord.timestamp;\\n      uint256 price = priceRecord.price;\\n\\n      // check if current round timestamp is earlier than target timestamp\\n      if (currentTimestamp <= baseTimestamp) {\\n        // weighted time period will be (target timestamp - previous timestamp). For example,\\n        // now is 1000, twapInterval is 100, then target timestamp is 900. If timestamp of current round is 970,\\n        // and timestamp of NEXT round is 880, then the weighted time period will be (970 - 900) = 70,\\n        // instead of (970 - 880)\\n        weightedPrice = weightedPrice + (price * (previousTimestamp - baseTimestamp));\\n        break;\\n      }\\n\\n      uint256 timeFraction = previousTimestamp - currentTimestamp;\\n      weightedPrice = weightedPrice + price * timeFraction;\\n      cumulativeTime = cumulativeTime + timeFraction;\\n      previousTimestamp = currentTimestamp;\\n    }\\n    return weightedPrice / twapInterval;\\n  }\\n\\n  function getPreviousPrice(address _nftContract, uint256 _numOfRoundBack) public view override returns (uint256) {\\n    require(isExistedKey(_nftContract), \\\"NFTOracle: key not existed\\\");\\n\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    require(len > 0 && _numOfRoundBack < len, \\\"NFTOracle: Not enough history\\\");\\n    return nftPriceFeedMap[_nftContract].nftPriceData[len - _numOfRoundBack - 1].price;\\n  }\\n\\n  function getPreviousTimestamp(address _nftContract, uint256 _numOfRoundBack) public view override returns (uint256) {\\n    require(isExistedKey(_nftContract), \\\"NFTOracle: key not existed\\\");\\n\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    require(len > 0 && _numOfRoundBack < len, \\\"NFTOracle: Not enough history\\\");\\n    return nftPriceFeedMap[_nftContract].nftPriceData[len - _numOfRoundBack - 1].timestamp;\\n  }\\n\\n  function getPriceFeedLength(address _nftContract) public view returns (uint256 length) {\\n    return nftPriceFeedMap[_nftContract].nftPriceData.length;\\n  }\\n\\n  function getLatestRoundId(address _nftContract) public view returns (uint256) {\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    if (len == 0) {\\n      return 0;\\n    }\\n    return nftPriceFeedMap[_nftContract].nftPriceData[len - 1].roundId;\\n  }\\n\\n  function isExistedKey(address _nftContract) private view returns (bool) {\\n    return nftPriceFeedMap[_nftContract].registered;\\n  }\\n\\n  function requireKeyExisted(address _key, bool _existed) private view {\\n    if (_existed) {\\n      require(isExistedKey(_key), \\\"NFTOracle: key not existed\\\");\\n    } else {\\n      require(!isExistedKey(_key), \\\"NFTOracle: key existed\\\");\\n    }\\n  }\\n\\n  function checkValidityOfPrice(\\n    address _nftContract,\\n    uint256 _price,\\n    uint256 _timestamp\\n  ) private view returns (bool) {\\n    uint256 len = getPriceFeedLength(_nftContract);\\n    if (len > 0) {\\n      uint256 price = nftPriceFeedMap[_nftContract].nftPriceData[len - 1].price;\\n      if (_price == price) {\\n        return true;\\n      }\\n      uint256 timestamp = nftPriceFeedMap[_nftContract].nftPriceData[len - 1].timestamp;\\n      uint256 percentDeviation;\\n      if (_price > price) {\\n        percentDeviation = ((_price - price) * DECIMAL_PRECISION) / price;\\n      } else {\\n        percentDeviation = ((price - _price) * DECIMAL_PRECISION) / price;\\n      }\\n      uint256 timeDeviation = _timestamp - timestamp;\\n      if (percentDeviation > maxPriceDeviation) {\\n        return false;\\n      } else if (timeDeviation < minUpdateTime) {\\n        return false;\\n      } else if ((percentDeviation > maxPriceDeviationWithTime) && (timeDeviation < timeIntervalWithPrice)) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function setDataValidityParameters(\\n    uint256 _maxPriceDeviation,\\n    uint256 _maxPriceDeviationWithTime,\\n    uint256 _timeIntervalWithPrice,\\n    uint256 _minUpdateTime\\n  ) external onlyOwner {\\n    maxPriceDeviation = _maxPriceDeviation;\\n    maxPriceDeviationWithTime = _maxPriceDeviationWithTime;\\n    timeIntervalWithPrice = _timeIntervalWithPrice;\\n    minUpdateTime = _minUpdateTime;\\n  }\\n\\n  function setPause(address _nftContract, bool val) external override onlyOwner {\\n    nftPaused[_nftContract] = val;\\n  }\\n\\n  function setTwapInterval(uint256 _twapInterval) external override onlyOwner {\\n    twapInterval = _twapInterval;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/************\\n@title INFTOracle interface\\n@notice Interface for NFT price oracle.*/\\ninterface INFTOracle {\\n  /* CAUTION: Price uint is ETH based (WEI, 18 decimals) */\\n  // get asset price\\n  function getAssetPrice(address _nftContract) external view returns (uint256);\\n\\n  // get latest timestamp\\n  function getLatestTimestamp(address _nftContract) external view returns (uint256);\\n\\n  // get previous price with _back rounds\\n  function getPreviousPrice(address _nftContract, uint256 _numOfRoundBack) external view returns (uint256);\\n\\n  // get previous timestamp with _back rounds\\n  function getPreviousTimestamp(address _nftContract, uint256 _numOfRoundBack) external view returns (uint256);\\n\\n  function setAssetData(address _nftContract, uint256 _price) external;\\n\\n  function setPause(address _nftContract, bool val) external;\\n\\n  function setTwapInterval(uint256 _twapInterval) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/BlockContext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n// wrap block.xxx functions for testing\\n// only support timestamp and number so far\\nabstract contract BlockContext {\\n  //\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4 add state variables below \u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4\u25e5\u25e4//\\n\\n  //\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3 add state variables above \u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3\u25e2\u25e3//\\n  uint256[50] private __gap;\\n\\n  function _blockTimestamp() internal view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function _blockNumber() internal view virtual returns (uint256) {\\n    return block.number;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"FeedAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"SetAssetData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetAssetTwapPrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"calculateTwapPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"getLatestRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numOfRoundBack\",\"type\":\"uint256\"}],\"name\":\"getPreviousPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numOfRoundBack\",\"type\":\"uint256\"}],\"name\":\"getPreviousTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"getPriceFeedLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceDeviation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceDeviationWithTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeIntervalWithPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_twapInterval\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceDeviationWithTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftPriceFeedKeys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftPriceFeedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setAssetData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftContracts\",\"type\":\"address[]\"}],\"name\":\"setAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceDeviation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceDeviationWithTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeIntervalWithPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUpdateTime\",\"type\":\"uint256\"}],\"name\":\"setDataValidityParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setPriceFeedAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_twapInterval\",\"type\":\"uint256\"}],\"name\":\"setTwapInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeIntervalWithPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"twapPriceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTOracle", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}