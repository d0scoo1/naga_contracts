{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGuard {\r\n    event Guarded(string reason);\r\n\r\n    function check() external view returns (bool);\r\n\r\n    function getProtecActions()\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory targets,\r\n            bytes[] memory datas,\r\n            uint256[] memory values\r\n        );\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Permissions Read interface\r\n/// @author Fei Protocol\r\ninterface IPermissionsRead {\r\n    // ----------- Getters -----------\r\n\r\n    function isBurner(address _address) external view returns (bool);\r\n\r\n    function isMinter(address _address) external view returns (bool);\r\n\r\n    function isGovernor(address _address) external view returns (bool);\r\n\r\n    function isGuardian(address _address) external view returns (bool);\r\n\r\n    function isPCVController(address _address) external view returns (bool);\r\n}\r\n\r\n/// @title Permissions interface\r\n/// @author Fei Protocol\r\ninterface IPermissions is IAccessControl, IPermissionsRead {\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function createRole(bytes32 role, bytes32 adminRole) external;\r\n\r\n    function grantMinter(address minter) external;\r\n\r\n    function grantBurner(address burner) external;\r\n\r\n    function grantPCVController(address pcvController) external;\r\n\r\n    function grantGovernor(address governor) external;\r\n\r\n    function grantGuardian(address guardian) external;\r\n\r\n    function revokeMinter(address minter) external;\r\n\r\n    function revokeBurner(address burner) external;\r\n\r\n    function revokePCVController(address pcvController) external;\r\n\r\n    function revokeGovernor(address governor) external;\r\n\r\n    function revokeGuardian(address guardian) external;\r\n\r\n    // ----------- Revoker only state changing api -----------\r\n\r\n    function revokeOverride(bytes32 role, address account) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function GUARDIAN_ROLE() external view returns (bytes32);\r\n\r\n    function GOVERN_ROLE() external view returns (bytes32);\r\n\r\n    function BURNER_ROLE() external view returns (bytes32);\r\n\r\n    function MINTER_ROLE() external view returns (bytes32);\r\n\r\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/// @title FEI stablecoin interface\r\n/// @author Fei Protocol\r\ninterface IFei is IERC20 {\r\n    // ----------- Events -----------\r\n\r\n    event Minting(address indexed _to, address indexed _minter, uint256 _amount);\r\n\r\n    event Burning(address indexed _to, address indexed _burner, uint256 _amount);\r\n\r\n    event IncentiveContractUpdate(address indexed _incentivized, address indexed _incentiveContract);\r\n\r\n    // ----------- State changing api -----------\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    // ----------- Burner only state changing api -----------\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    // ----------- Minter only state changing api -----------\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setIncentiveContract(address account, address incentive) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function incentiveContract(address account) external view returns (address);\r\n}\r\n\r\n/// @title Core Interface\r\n/// @author Fei Protocol\r\ninterface ICore is IPermissions {\r\n    // ----------- Events -----------\r\n\r\n    event FeiUpdate(address indexed _fei);\r\n    event TribeUpdate(address indexed _tribe);\r\n    event GenesisGroupUpdate(address indexed _genesisGroup);\r\n    event TribeAllocation(address indexed _to, uint256 _amount);\r\n    event GenesisPeriodComplete(uint256 _timestamp);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function init() external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setFei(address token) external;\r\n\r\n    function setTribe(address token) external;\r\n\r\n    function allocateTribe(address to, uint256 amount) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n}\r\n\r\n/// @title CoreRef interface\r\n/// @author Fei Protocol\r\ninterface ICoreRef {\r\n    // ----------- Events -----------\r\n\r\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\r\n\r\n    event ContractAdminRoleUpdate(bytes32 indexed oldContractAdminRole, bytes32 indexed newContractAdminRole);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\r\n\r\n    // ----------- Governor or Guardian only state changing api -----------\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function core() external view returns (ICore);\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n\r\n    function feiBalance() external view returns (uint256);\r\n\r\n    function tribeBalance() external view returns (uint256);\r\n\r\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function isContractAdmin(address admin) external view returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/// @title A Reference to Core\r\n/// @author Fei Protocol\r\n/// @notice defines some modifiers and utilities around interacting with Core\r\nabstract contract CoreRef is ICoreRef, Pausable {\r\n    ICore private immutable _core;\r\n    IFei private immutable _fei;\r\n    IERC20 private immutable _tribe;\r\n\r\n    /// @notice a role used with a subset of governor permissions for this contract only\r\n    bytes32 public override CONTRACT_ADMIN_ROLE;\r\n\r\n    constructor(address coreAddress) {\r\n        _core = ICore(coreAddress);\r\n\r\n        _fei = ICore(coreAddress).fei();\r\n        _tribe = ICore(coreAddress).tribe();\r\n\r\n        _setContractAdminRole(ICore(coreAddress).GOVERN_ROLE());\r\n    }\r\n\r\n    function _initialize(address) internal {} // no-op for backward compatibility\r\n\r\n    modifier ifMinterSelf() {\r\n        if (_core.isMinter(address(this))) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(_core.isMinter(msg.sender), \"CoreRef: Caller is not a minter\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        require(_core.isBurner(msg.sender), \"CoreRef: Caller is not a burner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPCVController() {\r\n        require(_core.isPCVController(msg.sender), \"CoreRef: Caller is not a PCV controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernorOrAdmin() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || isContractAdmin(msg.sender),\r\n            \"CoreRef: Caller is not a governor or contract admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(_core.isGovernor(msg.sender), \"CoreRef: Caller is not a governor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardianOrGovernor() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\r\n            \"CoreRef: Caller is not a guardian or governor\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isGovernorOrGuardianOrAdmin() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender) || isContractAdmin(msg.sender),\r\n            \"CoreRef: Caller is not governor or guardian or admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Named onlyTribeRole to prevent collision with OZ onlyRole modifier\r\n    modifier onlyTribeRole(bytes32 role) {\r\n        require(_core.hasRole(role, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    // Modifiers to allow any combination of roles\r\n    modifier hasAnyOfTwoRoles(bytes32 role1, bytes32 role2) {\r\n        require(_core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfThreeRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender) || _core.hasRole(role3, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfFourRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        bytes32 role4\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) ||\r\n                _core.hasRole(role2, msg.sender) ||\r\n                _core.hasRole(role3, msg.sender) ||\r\n                _core.hasRole(role4, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfFiveRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        bytes32 role4,\r\n        bytes32 role5\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) ||\r\n                _core.hasRole(role2, msg.sender) ||\r\n                _core.hasRole(role3, msg.sender) ||\r\n                _core.hasRole(role4, msg.sender) ||\r\n                _core.hasRole(role5, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfSixRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        bytes32 role4,\r\n        bytes32 role5,\r\n        bytes32 role6\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) ||\r\n                _core.hasRole(role2, msg.sender) ||\r\n                _core.hasRole(role3, msg.sender) ||\r\n                _core.hasRole(role4, msg.sender) ||\r\n                _core.hasRole(role5, msg.sender) ||\r\n                _core.hasRole(role6, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyFei() {\r\n        require(msg.sender == address(_fei), \"CoreRef: Caller is not FEI\");\r\n        _;\r\n    }\r\n\r\n    /// @notice sets a new admin role for this contract\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external override onlyGovernor {\r\n        _setContractAdminRole(newContractAdminRole);\r\n    }\r\n\r\n    /// @notice returns whether a given address has the admin role for this contract\r\n    function isContractAdmin(address _admin) public view override returns (bool) {\r\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\r\n    }\r\n\r\n    /// @notice set pausable methods to paused\r\n    function pause() public override onlyGuardianOrGovernor {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice set pausable methods to unpaused\r\n    function unpause() public override onlyGuardianOrGovernor {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice address of the Core contract referenced\r\n    /// @return ICore implementation address\r\n    function core() public view override returns (ICore) {\r\n        return _core;\r\n    }\r\n\r\n    /// @notice address of the Fei contract referenced by Core\r\n    /// @return IFei implementation address\r\n    function fei() public view override returns (IFei) {\r\n        return _fei;\r\n    }\r\n\r\n    /// @notice address of the Tribe contract referenced by Core\r\n    /// @return IERC20 implementation address\r\n    function tribe() public view override returns (IERC20) {\r\n        return _tribe;\r\n    }\r\n\r\n    /// @notice fei balance of contract\r\n    /// @return fei amount held\r\n    function feiBalance() public view override returns (uint256) {\r\n        return _fei.balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice tribe balance of contract\r\n    /// @return tribe amount held\r\n    function tribeBalance() public view override returns (uint256) {\r\n        return _tribe.balanceOf(address(this));\r\n    }\r\n\r\n    function _burnFeiHeld() internal {\r\n        _fei.burn(feiBalance());\r\n    }\r\n\r\n    function _mintFei(address to, uint256 amount) internal virtual {\r\n        if (amount != 0) {\r\n            _fei.mint(to, amount);\r\n        }\r\n    }\r\n\r\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\r\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\r\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\r\n        emit ContractAdminRoleUpdate(oldContractAdminRole, newContractAdminRole);\r\n    }\r\n}\r\n\r\n/// @title a PCV Deposit interface for only balance getters\r\n/// @author Fei Protocol\r\ninterface IPCVDepositBalances {\r\n    // ----------- Getters -----------\r\n\r\n    /// @notice gets the effective balance of \"balanceReportedIn\" token if the deposit were fully withdrawn\r\n    function balance() external view returns (uint256);\r\n\r\n    /// @notice gets the token address in which this deposit returns its balance\r\n    function balanceReportedIn() external view returns (address);\r\n\r\n    /// @notice gets the resistant token balance and protocol owned fei of this deposit\r\n    function resistantBalanceAndFei() external view returns (uint256, uint256);\r\n}\r\n\r\n/// @title a PCV Deposit interface\r\n/// @author Fei Protocol\r\ninterface IPCVDeposit is IPCVDepositBalances {\r\n    // ----------- Events -----------\r\n    event Deposit(address indexed _from, uint256 _amount);\r\n\r\n    event Withdrawal(address indexed _caller, address indexed _to, uint256 _amount);\r\n\r\n    event WithdrawERC20(address indexed _caller, address indexed _token, address indexed _to, uint256 _amount);\r\n\r\n    event WithdrawETH(address indexed _caller, address indexed _to, uint256 _amount);\r\n\r\n    // ----------- State changing api -----------\r\n\r\n    function deposit() external;\r\n\r\n    // ----------- PCV Controller only state changing api -----------\r\n\r\n    function withdraw(address to, uint256 amount) external;\r\n\r\n    function withdrawERC20(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function withdrawETH(address payable to, uint256 amount) external;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/// @title abstract contract for withdrawing ERC-20 tokens using a PCV Controller\r\n/// @author Fei Protocol\r\nabstract contract PCVDeposit is IPCVDeposit, CoreRef {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice withdraw ERC20 from the contract\r\n    /// @param token address of the ERC20 to send\r\n    /// @param to address destination of the ERC20\r\n    /// @param amount quantity of ERC20 to send\r\n    function withdrawERC20(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override onlyPCVController {\r\n        _withdrawERC20(token, to, amount);\r\n    }\r\n\r\n    function _withdrawERC20(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(token).safeTransfer(to, amount);\r\n        emit WithdrawERC20(msg.sender, token, to, amount);\r\n    }\r\n\r\n    /// @notice withdraw ETH from the contract\r\n    /// @param to address to send ETH\r\n    /// @param amountOut amount of ETH to send\r\n    function withdrawETH(address payable to, uint256 amountOut) external virtual override onlyPCVController {\r\n        Address.sendValue(to, amountOut);\r\n        emit WithdrawETH(msg.sender, to, amountOut);\r\n    }\r\n\r\n    function balance() public view virtual override returns (uint256);\r\n\r\n    function balanceReportedIn() public view virtual override returns (address);\r\n\r\n    function resistantBalanceAndFei() public view virtual override returns (uint256, uint256) {\r\n        uint256 tokenBalance = balance();\r\n        return (tokenBalance, balanceReportedIn() == address(fei()) ? tokenBalance : 0);\r\n    }\r\n}\r\n\r\ninterface CToken {\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function isCToken() external view returns (bool);\r\n\r\n    function isCEther() external view returns (bool);\r\n}\r\n\r\n/// @title base class for a Compound PCV Deposit\r\n/// @author Fei Protocol\r\nabstract contract CompoundPCVDepositBase is PCVDeposit {\r\n    CToken public cToken;\r\n\r\n    uint256 private constant EXCHANGE_RATE_SCALE = 1e18;\r\n\r\n    /// @notice Compound PCV Deposit constructor\r\n    /// @param _core Fei Core for reference\r\n    /// @param _cToken Compound cToken to deposit\r\n    constructor(address _core, address _cToken) CoreRef(_core) {\r\n        cToken = CToken(_cToken);\r\n        require(cToken.isCToken(), \"CompoundPCVDeposit: Not a cToken\");\r\n    }\r\n\r\n    /// @notice withdraw tokens from the PCV allocation\r\n    /// @param amountUnderlying of tokens withdrawn\r\n    /// @param to the address to send PCV to\r\n    function withdraw(address to, uint256 amountUnderlying) external override onlyPCVController whenNotPaused {\r\n        require(cToken.redeemUnderlying(amountUnderlying) == 0, \"CompoundPCVDeposit: redeem error\");\r\n        _transferUnderlying(to, amountUnderlying);\r\n        emit Withdrawal(msg.sender, to, amountUnderlying);\r\n    }\r\n\r\n    /// @notice returns total balance of PCV in the Deposit excluding the FEI\r\n    /// @dev returns stale values from Compound if the market hasn't been updated\r\n    function balance() public view override returns (uint256) {\r\n        uint256 exchangeRate = cToken.exchangeRateStored();\r\n        return (cToken.balanceOf(address(this)) * exchangeRate) / EXCHANGE_RATE_SCALE;\r\n    }\r\n\r\n    function _transferUnderlying(address to, uint256 amount) internal virtual;\r\n}\r\n\r\ninterface CErc20 {\r\n    function mint(uint256 amount) external returns (uint256);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\n/// @title ERC-20 implementation for a Compound PCV Deposit\r\n/// @author Fei Protocol\r\ncontract ERC20CompoundPCVDeposit is CompoundPCVDepositBase {\r\n    /// @notice the token underlying the cToken\r\n    IERC20 public token;\r\n\r\n    /// @notice Compound ERC20 PCV Deposit constructor\r\n    /// @param _core Fei Core for reference\r\n    /// @param _cToken Compound cToken to deposit\r\n    constructor(address _core, address _cToken) CompoundPCVDepositBase(_core, _cToken) {\r\n        token = IERC20(CErc20(_cToken).underlying());\r\n    }\r\n\r\n    /// @notice deposit ERC-20 tokens to Compound\r\n    function deposit() external override whenNotPaused {\r\n        uint256 amount = token.balanceOf(address(this));\r\n\r\n        token.approve(address(cToken), amount);\r\n\r\n        // Compound returns non-zero when there is an error\r\n        require(CErc20(address(cToken)).mint(amount) == 0, \"ERC20CompoundPCVDeposit: deposit error\");\r\n\r\n        emit Deposit(msg.sender, amount);\r\n    }\r\n\r\n    function _transferUnderlying(address to, uint256 amount) internal override {\r\n        SafeERC20.safeTransfer(token, to, amount);\r\n    }\r\n\r\n    /// @notice display the related token of the balance reported\r\n    function balanceReportedIn() public view override returns (address) {\r\n        return address(token);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/// @title IPCVGuardian\r\n/// @notice an interface for defining how the PCVGuardian functions\r\n/// @dev any implementation of this contract should be granted the roles of Guardian and PCVController in order to work correctly\r\ninterface IPCVGuardian {\r\n    // ---------- Events ----------\r\n    event SafeAddressAdded(address indexed safeAddress);\r\n\r\n    event SafeAddressRemoved(address indexed safeAddress);\r\n\r\n    event PCVGuardianWithdrawal(address indexed pcvDeposit, address indexed destination, uint256 amount);\r\n\r\n    event PCVGuardianETHWithdrawal(address indexed pcvDeposit, address indexed destination, uint256 amount);\r\n\r\n    event PCVGuardianERC20Withdrawal(\r\n        address indexed pcvDeposit,\r\n        address indexed destination,\r\n        address indexed token,\r\n        uint256 amount\r\n    );\r\n\r\n    // ---------- Read-Only API ----------\r\n\r\n    /// @notice returns true if the the provided address is a valid destination to withdraw funds to\r\n    /// @param pcvDeposit the address to check\r\n    function isSafeAddress(address pcvDeposit) external view returns (bool);\r\n\r\n    /// @notice returns all safe addresses\r\n    function getSafeAddresses() external view returns (address[] memory);\r\n\r\n    // ---------- Governor-Only State-Changing API ----------\r\n\r\n    /// @notice governor-only method to set an address as \"safe\" to withdraw funds to\r\n    /// @param pcvDeposit the address to set as safe\r\n    function setSafeAddress(address pcvDeposit) external;\r\n\r\n    /// @notice batch version of setSafeAddress\r\n    /// @param safeAddresses the addresses to set as safe, as calldata\r\n    function setSafeAddresses(address[] calldata safeAddresses) external;\r\n\r\n    // ---------- Governor-or-Guardian-Only State-Changing API ----------\r\n\r\n    /// @notice governor-or-guardian-only method to un-set an address as \"safe\" to withdraw funds to\r\n    /// @param pcvDeposit the address to un-set as safe\r\n    function unsetSafeAddress(address pcvDeposit) external;\r\n\r\n    /// @notice batch version of unsetSafeAddresses\r\n    /// @param safeAddresses the addresses to un-set as safe\r\n    function unsetSafeAddresses(address[] calldata safeAddresses) external;\r\n\r\n    /// @notice governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it\r\n    /// @param pcvDeposit the address of the pcv deposit contract\r\n    /// @param safeAddress the destination address to withdraw to\r\n    /// @param amount the amount to withdraw\r\n    /// @param pauseAfter if true, the pcv contract will be paused after the withdraw\r\n    /// @param depositAfter if true, attempts to deposit to the target PCV deposit\r\n    function withdrawToSafeAddress(\r\n        address pcvDeposit,\r\n        address safeAddress,\r\n        uint256 amount,\r\n        bool pauseAfter,\r\n        bool depositAfter\r\n    ) external;\r\n\r\n    /// @notice governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it\r\n    /// @param pcvDeposit the address of the pcv deposit contract\r\n    /// @param safeAddress the destination address to withdraw to\r\n    /// @param amount the amount of tokens to withdraw\r\n    /// @param pauseAfter if true, the pcv contract will be paused after the withdraw\r\n    /// @param depositAfter if true, attempts to deposit to the target PCV deposit\r\n    function withdrawETHToSafeAddress(\r\n        address pcvDeposit,\r\n        address payable safeAddress,\r\n        uint256 amount,\r\n        bool pauseAfter,\r\n        bool depositAfter\r\n    ) external;\r\n\r\n    /// @notice governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it\r\n    /// @param pcvDeposit the deposit to pull funds from\r\n    /// @param safeAddress the destination address to withdraw to\r\n    /// @param token the token to withdraw\r\n    /// @param amount the amount of funds to withdraw\r\n    /// @param pauseAfter whether to pause the pcv after withdrawing\r\n    /// @param depositAfter if true, attempts to deposit to the target PCV deposit\r\n    function withdrawERC20ToSafeAddress(\r\n        address pcvDeposit,\r\n        address safeAddress,\r\n        address token,\r\n        uint256 amount,\r\n        bool pauseAfter,\r\n        bool depositAfter\r\n    ) external;\r\n}\r\n\r\n/// @title PauseableLib\r\n/// @notice PauseableLib is a library that can be used to pause and unpause contracts, amont other utilities.\r\n/// @dev This library should only be used on contracts that implement CoreRef.\r\nlibrary CoreRefPauseableLib {\r\n    function _requireUnpaused(address _pausableCoreRefAddress) internal view {\r\n        require(\r\n            !CoreRef(_pausableCoreRefAddress).paused(),\r\n            \"PausableLib: Address is paused but required to not be paused.\"\r\n        );\r\n    }\r\n\r\n    function _requirePaused(address _pausableCoreRefAddress) internal view {\r\n        require(\r\n            CoreRef(_pausableCoreRefAddress).paused(),\r\n            \"PausableLib: Address is not paused but required to be paused.\"\r\n        );\r\n    }\r\n\r\n    function _ensureUnpaused(address _pausableCoreRefAddress) internal {\r\n        if (CoreRef(_pausableCoreRefAddress).paused()) {\r\n            CoreRef(_pausableCoreRefAddress).unpause();\r\n        }\r\n    }\r\n\r\n    function _ensurePaused(address _pausableCoreRefAddress) internal {\r\n        if (!CoreRef(_pausableCoreRefAddress).paused()) {\r\n            CoreRef(_pausableCoreRefAddress).pause();\r\n        }\r\n    }\r\n\r\n    function _pause(address _pauseableCoreRefAddress) internal {\r\n        CoreRef(_pauseableCoreRefAddress).pause();\r\n    }\r\n\r\n    function _unpause(address _pauseableCoreRefAddress) internal {\r\n        CoreRef(_pauseableCoreRefAddress).unpause();\r\n    }\r\n}\r\n\r\n/**\r\n @title Tribe DAO ACL Roles\r\n @notice Holds a complete list of all roles which can be held by contracts inside Tribe DAO.\r\n         Roles are broken up into 3 categories:\r\n         * Major Roles - the most powerful roles in the Tribe DAO which should be carefully managed.\r\n         * Admin Roles - roles with management capability over critical functionality. Should only be held by automated or optimistic mechanisms\r\n         * Minor Roles - operational roles. May be held or managed by shorter optimistic timelocks or trusted multisigs.\r\n */\r\nlibrary TribeRoles {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                 Major Roles\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice the ultimate role of Tribe. Controls all other roles and protocol functionality.\r\n    bytes32 internal constant GOVERNOR = keccak256(\"GOVERN_ROLE\");\r\n\r\n    /// @notice the protector role of Tribe. Admin of pause, veto, revoke, and minor roles\r\n    bytes32 internal constant GUARDIAN = keccak256(\"GUARDIAN_ROLE\");\r\n\r\n    /// @notice the role which can arbitrarily move PCV in any size from any contract\r\n    bytes32 internal constant PCV_CONTROLLER = keccak256(\"PCV_CONTROLLER_ROLE\");\r\n\r\n    /// @notice can mint FEI arbitrarily\r\n    bytes32 internal constant MINTER = keccak256(\"MINTER_ROLE\");\r\n\r\n    /// @notice Manages lower level - Admin and Minor - roles. Able to grant and revoke these\r\n    bytes32 internal constant ROLE_ADMIN = keccak256(\"ROLE_ADMIN\");\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                                 Admin Roles\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice has access to all admin functionality on pods\r\n    bytes32 internal constant POD_ADMIN = keccak256(\"POD_ADMIN\");\r\n\r\n    /// @notice capable of granting and revoking other TribeRoles from having veto power over a pod\r\n    bytes32 internal constant POD_VETO_ADMIN = keccak256(\"POD_VETO_ADMIN\");\r\n\r\n    /// @notice can manage the majority of Tribe protocol parameters\r\n    bytes32 internal constant PARAMETER_ADMIN = keccak256(\"PARAMETER_ADMIN\");\r\n\r\n    /// @notice manages the Collateralization Oracle as well as other protocol oracles.\r\n    bytes32 internal constant ORACLE_ADMIN = keccak256(\"ORACLE_ADMIN_ROLE\");\r\n\r\n    /// @notice manages TribalChief incentives and related functionality.\r\n    bytes32 internal constant TRIBAL_CHIEF_ADMIN = keccak256(\"TRIBAL_CHIEF_ADMIN_ROLE\");\r\n\r\n    /// @notice admin of the Tokemak PCV deposits\r\n    bytes32 internal constant TOKEMAK_DEPOSIT_ADMIN_ROLE = keccak256(\"TOKEMAK_DEPOSIT_ADMIN_ROLE\");\r\n\r\n    /// @notice admin of PCVGuardian\r\n    bytes32 internal constant PCV_GUARDIAN_ADMIN = keccak256(\"PCV_GUARDIAN_ADMIN_ROLE\");\r\n\r\n    /// @notice admin of the Fuse protocol\r\n    bytes32 internal constant FUSE_ADMIN = keccak256(\"FUSE_ADMIN\");\r\n\r\n    /// @notice admin of minting Fei for specific scoped contracts\r\n    bytes32 internal constant FEI_MINT_ADMIN = keccak256(\"FEI_MINT_ADMIN\");\r\n\r\n    /// @notice capable of admin functionality on PCVDeposits\r\n    bytes32 internal constant PCV_MINOR_PARAM_ROLE = keccak256(\"PCV_MINOR_PARAM_ROLE\");\r\n\r\n    /// @notice capable of setting FEI Minters within global rate limits and caps\r\n    bytes32 internal constant RATE_LIMITED_MINTER_ADMIN = keccak256(\"RATE_LIMITED_MINTER_ADMIN\");\r\n\r\n    /// @notice manages meta-governance actions, like voting & delegating.\r\n    /// Also used to vote for gauge weights & similar liquid governance things.\r\n    bytes32 internal constant METAGOVERNANCE_VOTE_ADMIN = keccak256(\"METAGOVERNANCE_VOTE_ADMIN\");\r\n\r\n    /// @notice allows to manage locking of vote-escrowed tokens, and staking/unstaking\r\n    /// governance tokens from a pre-defined contract in order to eventually allow voting.\r\n    /// Examples: ANGLE <> veANGLE, AAVE <> stkAAVE, CVX <> vlCVX, CRV > cvxCRV.\r\n    bytes32 internal constant METAGOVERNANCE_TOKEN_STAKING = keccak256(\"METAGOVERNANCE_TOKEN_STAKING\");\r\n\r\n    /// @notice manages whitelisting of gauges where the protocol's tokens can be staked\r\n    bytes32 internal constant METAGOVERNANCE_GAUGE_ADMIN = keccak256(\"METAGOVERNANCE_GAUGE_ADMIN\");\r\n\r\n    /// @notice capable of performing swaps on Balancer LBP Swapper\r\n    bytes32 internal constant SWAP_ADMIN_ROLE = keccak256(\"SWAP_ADMIN_ROLE\");\r\n\r\n    /// @notice capable of setting properties on Balancer BasePool utility wrapper\r\n    bytes32 internal constant BALANCER_MANAGER_ADMIN_ROLE = keccak256(\"BALANCER_MANAGER_ADMIN_ROLE\");\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                                 Minor Roles\r\n    //////////////////////////////////////////////////////////////*/\r\n    bytes32 internal constant POD_METADATA_REGISTER_ROLE = keccak256(\"POD_METADATA_REGISTER_ROLE\");\r\n\r\n    /// @notice capable of engaging with Votium for voting incentives.\r\n    bytes32 internal constant VOTIUM_ADMIN_ROLE = keccak256(\"VOTIUM_ADMIN_ROLE\");\r\n\r\n    /// @notice capable of adding an address to multi rate limited\r\n    bytes32 internal constant ADD_MINTER_ROLE = keccak256(\"ADD_MINTER_ROLE\");\r\n\r\n    /// @notice capable of changing PCV Deposit and Global Rate Limited Minter in the PSM\r\n    bytes32 internal constant PSM_ADMIN_ROLE = keccak256(\"PSM_ADMIN_ROLE\");\r\n\r\n    /// @notice capable of moving PCV between safe addresses on the PCVGuardian\r\n    bytes32 internal constant PCV_SAFE_MOVER_ROLE = keccak256(\"PCV_SAFE_MOVER_ROLE\");\r\n}\r\n\r\ncontract PCVGuardian is IPCVGuardian, CoreRef {\r\n    using CoreRefPauseableLib for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    // If an address is in this set, it's a safe address to withdraw to\r\n    EnumerableSet.AddressSet private safeAddresses;\r\n\r\n    constructor(address _core, address[] memory _safeAddresses) CoreRef(_core) {\r\n        for (uint256 i = 0; i < _safeAddresses.length; i++) {\r\n            _setSafeAddress(_safeAddresses[i]);\r\n        }\r\n    }\r\n\r\n    // ---------- Read-Only API ----------\r\n\r\n    /// @notice returns true if the the provided address is a valid destination to withdraw funds to\r\n    /// @param pcvDeposit the address to check\r\n    function isSafeAddress(address pcvDeposit) public view override returns (bool) {\r\n        return safeAddresses.contains(pcvDeposit);\r\n    }\r\n\r\n    /// @notice returns all safe addresses\r\n    function getSafeAddresses() public view override returns (address[] memory) {\r\n        return safeAddresses.values();\r\n    }\r\n\r\n    // ---------- GOVERNOR-or-PCV_GUARDIAN_ADMIN-Only State-Changing API ----------\r\n\r\n    /// @notice governor-only method to set an address as \"safe\" to withdraw funds to\r\n    /// @param pcvDeposit the address to set as safe\r\n    function setSafeAddress(address pcvDeposit)\r\n        external\r\n        override\r\n        hasAnyOfTwoRoles(TribeRoles.GOVERNOR, TribeRoles.PCV_GUARDIAN_ADMIN)\r\n    {\r\n        _setSafeAddress(pcvDeposit);\r\n    }\r\n\r\n    /// @notice batch version of setSafeAddress\r\n    /// @param _safeAddresses the addresses to set as safe, as calldata\r\n    function setSafeAddresses(address[] calldata _safeAddresses)\r\n        external\r\n        override\r\n        hasAnyOfTwoRoles(TribeRoles.GOVERNOR, TribeRoles.PCV_GUARDIAN_ADMIN)\r\n    {\r\n        require(_safeAddresses.length != 0, \"empty\");\r\n        for (uint256 i = 0; i < _safeAddresses.length; i++) {\r\n            _setSafeAddress(_safeAddresses[i]);\r\n        }\r\n    }\r\n\r\n    // ---------- GOVERNOR-or-PCV_GUARDIAN_ADMIN-Or-GUARDIAN-Only State-Changing API ----------\r\n\r\n    /// @notice governor-or-guardian-only method to un-set an address as \"safe\" to withdraw funds to\r\n    /// @param pcvDeposit the address to un-set as safe\r\n    function unsetSafeAddress(address pcvDeposit)\r\n        external\r\n        override\r\n        hasAnyOfThreeRoles(TribeRoles.GOVERNOR, TribeRoles.GUARDIAN, TribeRoles.PCV_GUARDIAN_ADMIN)\r\n    {\r\n        _unsetSafeAddress(pcvDeposit);\r\n    }\r\n\r\n    /// @notice batch version of unsetSafeAddresses\r\n    /// @param _safeAddresses the addresses to un-set as safe\r\n    function unsetSafeAddresses(address[] calldata _safeAddresses)\r\n        external\r\n        override\r\n        hasAnyOfThreeRoles(TribeRoles.GOVERNOR, TribeRoles.GUARDIAN, TribeRoles.PCV_GUARDIAN_ADMIN)\r\n    {\r\n        require(_safeAddresses.length != 0, \"empty\");\r\n        for (uint256 i = 0; i < _safeAddresses.length; i++) {\r\n            _unsetSafeAddress(_safeAddresses[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it\r\n    /// @param pcvDeposit the address of the pcv deposit contract\r\n    /// @param safeAddress the destination address to withdraw to\r\n    /// @param amount the amount to withdraw\r\n    /// @param pauseAfter if true, the pcv contract will be paused after the withdraw\r\n    /// @param depositAfter if true, attempts to deposit to the target PCV deposit\r\n    function withdrawToSafeAddress(\r\n        address pcvDeposit,\r\n        address safeAddress,\r\n        uint256 amount,\r\n        bool pauseAfter,\r\n        bool depositAfter\r\n    ) external override hasAnyOfThreeRoles(TribeRoles.GOVERNOR, TribeRoles.PCV_SAFE_MOVER_ROLE, TribeRoles.GUARDIAN) {\r\n        require(isSafeAddress(safeAddress), \"Provided address is not a safe address!\");\r\n\r\n        pcvDeposit._ensureUnpaused();\r\n\r\n        IPCVDeposit(pcvDeposit).withdraw(safeAddress, amount);\r\n\r\n        if (pauseAfter) {\r\n            pcvDeposit._pause();\r\n        }\r\n\r\n        if (depositAfter) {\r\n            IPCVDeposit(safeAddress).deposit();\r\n        }\r\n\r\n        emit PCVGuardianWithdrawal(pcvDeposit, safeAddress, amount);\r\n    }\r\n\r\n    /// @notice governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it\r\n    /// @param pcvDeposit the address of the pcv deposit contract\r\n    /// @param safeAddress the destination address to withdraw to\r\n    /// @param amount the amount of tokens to withdraw\r\n    /// @param pauseAfter if true, the pcv contract will be paused after the withdraw\r\n    /// @param depositAfter if true, attempts to deposit to the target PCV deposit\r\n    function withdrawETHToSafeAddress(\r\n        address pcvDeposit,\r\n        address payable safeAddress,\r\n        uint256 amount,\r\n        bool pauseAfter,\r\n        bool depositAfter\r\n    ) external override hasAnyOfThreeRoles(TribeRoles.GOVERNOR, TribeRoles.PCV_SAFE_MOVER_ROLE, TribeRoles.GUARDIAN) {\r\n        require(isSafeAddress(safeAddress), \"Provided address is not a safe address!\");\r\n\r\n        pcvDeposit._ensureUnpaused();\r\n\r\n        IPCVDeposit(pcvDeposit).withdrawETH(safeAddress, amount);\r\n\r\n        if (pauseAfter) {\r\n            pcvDeposit._pause();\r\n        }\r\n\r\n        if (depositAfter) {\r\n            IPCVDeposit(safeAddress).deposit();\r\n        }\r\n\r\n        emit PCVGuardianETHWithdrawal(pcvDeposit, safeAddress, amount);\r\n    }\r\n\r\n    /// @notice governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it\r\n    /// @param pcvDeposit the deposit to pull funds from\r\n    /// @param safeAddress the destination address to withdraw to\r\n    /// @param amount the amount of funds to withdraw\r\n    /// @param pauseAfter whether to pause the pcv after withdrawing\r\n    /// @param depositAfter if true, attempts to deposit to the target PCV deposit\r\n    function withdrawERC20ToSafeAddress(\r\n        address pcvDeposit,\r\n        address safeAddress,\r\n        address token,\r\n        uint256 amount,\r\n        bool pauseAfter,\r\n        bool depositAfter\r\n    ) external override hasAnyOfThreeRoles(TribeRoles.GOVERNOR, TribeRoles.PCV_SAFE_MOVER_ROLE, TribeRoles.GUARDIAN) {\r\n        require(isSafeAddress(safeAddress), \"Provided address is not a safe address!\");\r\n\r\n        pcvDeposit._ensureUnpaused();\r\n\r\n        IPCVDeposit(pcvDeposit).withdrawERC20(token, safeAddress, amount);\r\n\r\n        if (pauseAfter) {\r\n            pcvDeposit._pause();\r\n        }\r\n\r\n        if (depositAfter) {\r\n            IPCVDeposit(safeAddress).deposit();\r\n        }\r\n\r\n        emit PCVGuardianERC20Withdrawal(pcvDeposit, safeAddress, token, amount);\r\n    }\r\n\r\n    // ---------- Internal Functions ----------\r\n\r\n    function _setSafeAddress(address anAddress) internal {\r\n        require(safeAddresses.add(anAddress), \"set\");\r\n        emit SafeAddressAdded(anAddress);\r\n    }\r\n\r\n    function _unsetSafeAddress(address anAddress) internal {\r\n        require(safeAddresses.remove(anAddress), \"unset\");\r\n        emit SafeAddressRemoved(anAddress);\r\n    }\r\n}\r\n\r\ncontract FuseWithdrawalGuard is IGuard, CoreRef {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct WithdrawInfo {\r\n        address destination;\r\n        address underlying;\r\n        uint96 liquidityToLeave;\r\n    }\r\n\r\n    /// @notice map the destination and minimum liquidity for each pcv deposit\r\n    mapping(address => WithdrawInfo) public withdrawInfos;\r\n\r\n    EnumerableSet.AddressSet private fuseDeposits;\r\n\r\n    /// @notice the PCV mover contract exposed to guardian role\r\n    PCVGuardian public constant pcvGuardian = PCVGuardian(0x02435948F84d7465FB71dE45ABa6098Fc6eC2993);\r\n\r\n    /// @notice the minimum amount of underlying which can be withdrawn from a cToken that registers in the guard.\r\n    /// i.e. if the min is 100 FEI but the amount in the contract is 1 FEI, the amountToWithdraw will return 0 and the check will fail\r\n    /// @dev added to prevent dust from bricking the contract\r\n    uint256 public constant MIN_WITHDRAW = 100e18;\r\n\r\n    constructor(\r\n        address core,\r\n        address[] memory deposits,\r\n        address[] memory destinations,\r\n        address[] memory underlyings,\r\n        uint96[] memory liquidityToLeaveList\r\n    ) CoreRef(core) {\r\n        uint256 len = deposits.length;\r\n        require(len == destinations.length && len == liquidityToLeaveList.length && len == underlyings.length);\r\n        for (uint256 i = 0; i < len; ) {\r\n            fuseDeposits.add(deposits[i]);\r\n            withdrawInfos[deposits[i]] = WithdrawInfo({\r\n                destination: destinations[i],\r\n                underlying: underlyings[i],\r\n                liquidityToLeave: liquidityToLeaveList[i]\r\n            });\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice setter for the Fuse deposit destination and minimum liquidity\r\n    function setWithdrawInfo(address deposit, WithdrawInfo calldata withdrawInfo)\r\n        public\r\n        hasAnyOfThreeRoles(TribeRoles.GUARDIAN, TribeRoles.GOVERNOR, TribeRoles.PCV_SAFE_MOVER_ROLE)\r\n    {\r\n        withdrawInfos[deposit] = withdrawInfo;\r\n    }\r\n\r\n    /// @notice check if contract can be called. If any deposit has a nonzero withdraw amount available, then return true.\r\n    function check() external view override returns (bool) {\r\n        for (uint256 i = 0; i < fuseDeposits.length(); ) {\r\n            if (getAmountToWithdraw(ERC20CompoundPCVDeposit(fuseDeposits.at(i))) > 0) return true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice return the amount that can be withdrawn from a deposit after leaving min liquidity\r\n    function getAmountToWithdraw(ERC20CompoundPCVDeposit deposit) public view returns (uint256) {\r\n        // can't read underlying directly because some of the PCV deposits use an old abi\r\n        IERC20 underlying = IERC20(withdrawInfos[address(deposit)].underlying);\r\n        // Reserves of underlying left in the cToken are considered withdrawable liquidity\r\n        uint256 liquidity = underlying.balanceOf(address(deposit.cToken()));\r\n        uint256 liquidityToLeave = withdrawInfos[address(deposit)].liquidityToLeave;\r\n        if (liquidity <= liquidityToLeave) {\r\n            return 0;\r\n        }\r\n        // take away min liquidity when calculating how much to withdraw.\r\n        liquidity -= liquidityToLeave;\r\n\r\n        // max withdraw is the pcv deposit balance\r\n        uint256 withdrawAmount = deposit.balance();\r\n        if (withdrawAmount > liquidity) {\r\n            withdrawAmount = liquidity;\r\n        }\r\n        return withdrawAmount > MIN_WITHDRAW ? withdrawAmount : 0;\r\n    }\r\n\r\n    /// @notice return the first element which can be withdrawn from with the appropriate calldata encoding tha max withdraw amount.\r\n    /// @dev it only returns one element for simplicity. Unlikely multiple will be withdrawable simulteneously after the first pass, and pruning empty entries from a sparse array is an inefficient and inelegant algorithm in solidity.\r\n    function getProtecActions()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            address[] memory targets,\r\n            bytes[] memory datas,\r\n            uint256[] memory values\r\n        )\r\n    {\r\n        for (uint256 i = 0; i < fuseDeposits.length(); ) {\r\n            uint256 amount = getAmountToWithdraw(ERC20CompoundPCVDeposit(fuseDeposits.at(i)));\r\n            if (amount > 0) {\r\n                targets = new address[](1);\r\n                targets[0] = address(pcvGuardian);\r\n                datas = new bytes[](1);\r\n                datas[0] = abi.encodeWithSelector(\r\n                    PCVGuardian.withdrawToSafeAddress.selector,\r\n                    fuseDeposits.at(i),\r\n                    withdrawInfos[fuseDeposits.at(i)].destination,\r\n                    amount,\r\n                    false,\r\n                    false\r\n                );\r\n                values = new uint256[](1);\r\n                return (targets, datas, values);\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"deposits\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"liquidityToLeaveList\",\"type\":\"uint96[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldContractAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"ContractAdminRoleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Guarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fei\",\"outputs\":[{\"internalType\":\"contract IFei\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20CompoundPCVDeposit\",\"name\":\"deposit\",\"type\":\"address\"}],\"name\":\"getAmountToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtecActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isContractAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcvGuardian\",\"outputs\":[{\"internalType\":\"contract PCVGuardian\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"setContractAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deposit\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"liquidityToLeave\",\"type\":\"uint96\"}],\"internalType\":\"struct FuseWithdrawalGuard.WithdrawInfo\",\"name\":\"withdrawInfo\",\"type\":\"tuple\"}],\"name\":\"setWithdrawInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribe\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"liquidityToLeave\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FuseWithdrawalGuard", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000037349d9cc523d28e6abfc03fc5f44879bc8bffd90000000000000000000000009cc46ab5a714f7cd24c59f33c5769039b5872491000000000000000000000000f846ee6e8ee9a6fbf51c7c65105cabc041c048ad00000000000000000000000076dfcf06e7d7b8248094dc319b284fb244f0630900000000000000000000000002101960b3b317839254a17ba54a811a087cb3a00000000000000000000000007cebab7b4b4399343f6d0d36b550ee097f60d7fe0000000000000000000000001434f99edb2bd03decccfe21288767b8324b74030000000000000000000000005a8cb4556e5d5935af06beab8292905f48131479000000000000000000000000b51f09b6f103d697dc5d64dc904ad6a2dad399870000000000000000000000002c47fef515d2c70f2427706999e158533f7cf090000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc20000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc2000000000000000000000000b0e731f036adfdec12da77c15aab0f90e8e45a0e0000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc20000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc20000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc20000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc20000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc20000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc20000000000000000000000002a188f9eb761f70ecea083ba6c2a40145078dfc2000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000005f98805a4e8be255a32880fdec7f6728c6568ba0000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000028722178a6a119600000000000000000000000000000000000000000000000000d8d726b7177a80000000000000000000000000000000000000000000000000000d8d726b7177a80000000000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e67cf0ca1f7475c179a4c4e3c6282ab59a4bd8c57f01952e9db7ed150673910e"}]}