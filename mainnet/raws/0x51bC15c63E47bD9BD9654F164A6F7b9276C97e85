{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"HarvestResolverV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.10;\\n\\nimport \\\"Ownable.sol\\\";\\nimport {IResolverV2} from \\\"IResolverV2.sol\\\";\\nimport {IVaultMK2} from \\\"IVaultMK2.sol\\\";\\nimport {IStrategyAPI} from \\\"IStrategyAPI.sol\\\";\\nimport {IVaultAPI} from \\\"IVaultAPI.sol\\\";\\n\\n//  ________  ________  ________\\n//  |\\\\   ____\\\\|\\\\   __  \\\\|\\\\   __  \\\\\\n//  \\\\ \\\\  \\\\___|\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\\\n//   \\\\ \\\\  \\\\  __\\\\ \\\\   _  _\\\\ \\\\  \\\\\\\\\\\\  \\\\\\n//    \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\\\\\\\\\  \\\\\\n//     \\\\ \\\\_______\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\_______\\\\\\n//      \\\\|_______|\\\\|__|\\\\|__|\\\\|_______|\\n\\n// gro protocol: https://github.com/groLabs\\n\\n// Primary Author(s)\\n// Farhaan Ali: https://github.com/farhaan-ali\\n\\n// Reviewer(s) / Contributor(s)\\n// Kristian Domanski: https://github.com/kristian-gro\\n\\n/// @title Gelato Harvest Resolver\\n/// @notice To work with Gelato Ops to automate strategy harvests\\ncontract HarvestResolverV2 is IResolverV2, Ownable {\\n    /*///////////////////////////////////////////////////////////////\\n                    Storage Variables/Types/Modifier(s)\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice Struct holding relevant strategy params\\n    struct strategyParams {\\n        uint256 gasUsed;\\n        bool canHarvest;\\n        address _address;\\n        uint256 acceptableLoss;\\n    }\\n    /// @notice address for DAI Vault\\n    address public immutable DAIVAULT;\\n    /// @notice address for USDC Vault\\n    address public immutable USDCVAULT;\\n    /// @notice address for USDT Vault\\n    address public immutable USDTVAULT;\\n    /// @notice Nested mapping of (strategy index => strategy params)\\n    mapping(address => mapping(uint256 => strategyParams)) public strategyInfo;\\n    /// @notice max base fee we accept for a harvest\\n    uint256 public maxBaseFee;\\n    /// @notice modifier to check vault address passed is a gro vault\\n    modifier onlyGroVault(address vaultAddress) {\\n        require(\\n            vaultAddress == DAIVAULT ||\\n                vaultAddress == USDCVAULT ||\\n                vaultAddress == USDTVAULT,\\n            \\\"!Gro vault\\\"\\n        );\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Constructor\\n    //////////////////////////////////////////////////////////////*/\\n    constructor(\\n        address _daiVault,\\n        address _usdcVault,\\n        address _usdtVault\\n    ) {\\n        DAIVAULT = _daiVault;\\n        USDCVAULT = _usdcVault;\\n        USDTVAULT = _usdtVault;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Setters\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice set the strategy params\\n    /// @param vaultAddress address for the vault associated with the strategy\\n    /// @param strategyIndex index of the strategy\\n    /// @param gasUsed gas used for harvesting the strategy\\n    /// @param canHarvest if harvesting via gelato is enabled for strategy\\n    /// @param strategyAddress address of strategy\\n    /// @param acceptableLoss accepted loss in which a harvest can still take place\\n\\n    function setStrategyInfo(\\n        address vaultAddress,\\n        uint256 strategyIndex,\\n        uint256 gasUsed,\\n        bool canHarvest,\\n        address strategyAddress,\\n        uint256 acceptableLoss\\n    ) external onlyOwner onlyGroVault(vaultAddress) {\\n        strategyParams memory params = strategyParams(\\n            gasUsed,\\n            canHarvest,\\n            strategyAddress,\\n            acceptableLoss\\n        );\\n\\n        strategyInfo[vaultAddress][strategyIndex] = params;\\n    }\\n\\n    /// @notice Maximum basefee allowed for harvests\\n    /// @param _maxBaseFee maximum allowed basefee in gwei (send in order of 1e9)\\n    function setMaxBaseFee(uint256 _maxBaseFee) external onlyOwner {\\n        maxBaseFee = _maxBaseFee;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Harvest Check Logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice To allow the gelato network to check if a gro vault can be harvested\\n    /// @param _vaultAddress address of the gro vault\\n    /// @return canExec if a harvest should occur and execPayload calldata to run harvest\\n    function harvestChecker(address _vaultAddress)\\n        external\\n        view\\n        override\\n        onlyGroVault(_vaultAddress)\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        uint256 vaultStrategyLength = IVaultMK2(_vaultAddress)\\n            .getStrategiesLength();\\n\\n        for (uint256 i = 0; i < vaultStrategyLength; i++) {\\n            strategyParams memory params = strategyInfo[_vaultAddress][i];\\n            if (block.basefee >= maxBaseFee) {\\n                continue;\\n            }\\n\\n            if (!params.canHarvest) {\\n                continue;\\n            }\\n\\n            if (!_canHarvestWithLoss(params._address, params.acceptableLoss)) {\\n                continue;\\n            }\\n\\n            if (_investTrigger(_vaultAddress)) {\\n                continue;\\n            }\\n\\n            uint256 callCost = block.basefee * params.gasUsed;\\n\\n            if (IVaultMK2(_vaultAddress).strategyHarvestTrigger(i, callCost)) {\\n                canExec = true;\\n                execPayload = abi.encodeWithSelector(\\n                    IVaultMK2.strategyHarvest.selector,\\n                    uint256(i)\\n                );\\n            }\\n\\n            if (canExec) break;\\n        }\\n    }\\n\\n    /// @notice To allow the gelato network to check if a gro vault needs assets invested\\n    /// @param _vaultAddress address of the gro vault\\n    /// @return canExec if a invest action should occur and execPayload calldata to run invest\\n    function investChecker(address _vaultAddress)\\n        external\\n        view\\n        override\\n        onlyGroVault(_vaultAddress)\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        if (_investTrigger(_vaultAddress)) {\\n            canExec = true;\\n            execPayload = abi.encodeWithSelector(IVaultMK2.invest.selector);\\n        }\\n    }\\n\\n    /// @notice Internal check if the vault needs to invest prior to the harvest\\n    /// @param _vaultAddress address of the gro vault\\n    /// @return needs_investment bool that indicating if the vault needs to invest assets\\n    ///     before harvesting\\n    function _investTrigger(address _vaultAddress)\\n        private\\n        view\\n        returns (bool needs_investment)\\n    {\\n        if (IVaultMK2(_vaultAddress).investTrigger()) return true;\\n        else return false;\\n    }\\n\\n    /// @notice Internal check to ensure that we would want to realize a loss through harvest\\n    /// @param _strategyAddress address of vault strategy\\n    /// @param _acceptableLoss max loss amount we would want to realized\\n    /// @return needs_harvest bool that indicated if the strategy needs to be harveted or not\\n    /// @dev This should only be applicable to strategies that run against AMMs or similar\\n    ///     contracts that are expected to produce temporary flucations in values that are\\n    ///     expected to recover after some time - this in order to prevent realising gains\\n    ///     and losses multiple times during drop and recover phases.\\n    function _canHarvestWithLoss(\\n        address _strategyAddress,\\n        uint256 _acceptableLoss\\n    ) private view returns (bool needs_harvest) {\\n        IStrategyAPI strategyAPI = IStrategyAPI(_strategyAddress);\\n        uint256 total = strategyAPI.estimatedTotalAssets();\\n        address vault = strategyAPI.vault();\\n        uint256 totalDebt = IVaultAPI(vault)\\n            .strategies(_strategyAddress)\\n            .totalDebt;\\n\\n        if (total > totalDebt - _acceptableLoss) return true;\\n\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IResolverV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IResolverV2 {\\n    function harvestChecker(address vaultAddress)\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload);\\n\\n    function investChecker(address vaultAddress)\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload);\\n}\\n\"\r\n    },\r\n    \"IVaultMK2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\n\\npragma solidity 0.8.10;\\n\\ninterface IVaultMK2 {\\n    function getStrategiesLength() external view returns (uint256);\\n\\n    function strategyHarvestTrigger(uint256 index, uint256 callCost) external view returns (bool);\\n\\n    function strategyHarvest(uint256 index) external returns (bool);\\n\\n    function investTrigger() external view returns (bool);\\n\\n    function invest() external;\\n}\\n\"\r\n    },\r\n    \"IStrategyAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\n\\npragma solidity 0.8.10;\\n\\ninterface IStrategyAPI {\\n    function vault() external view returns (address);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IVaultAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\n\\npragma solidity 0.8.10;\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 minDebtPerHarvest;\\n    uint256 maxDebtPerHarvest;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n}\\n\\ninterface IVaultAPI {\\n    function strategies(address _strategy)\\n        external\\n        view\\n        returns (StrategyParams memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"HarvestResolverV2.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAIVAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCVAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTVAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"harvestChecker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"investChecker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBaseFee\",\"type\":\"uint256\"}],\"name\":\"setMaxBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canHarvest\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"acceptableLoss\",\"type\":\"uint256\"}],\"name\":\"setStrategyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canHarvest\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"acceptableLoss\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HarvestResolverV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000277947d84a2ec370a636683799351acef97fec600000000000000000000000009b2688da7d80641f6e46a76889ea7f8b597717240000000000000000000000006419cb544878e8c4faa5eaf22d59d4a96e5f12fa", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}