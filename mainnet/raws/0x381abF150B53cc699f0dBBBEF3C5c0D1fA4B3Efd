{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/bridges/lido/LidoBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv2\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICurvePool} from \\\"./interfaces/ICurvePool.sol\\\";\\nimport {ILido} from \\\"./interfaces/ILido.sol\\\";\\nimport {IWstETH} from \\\"./interfaces/IWstETH.sol\\\";\\nimport {IDefiBridge} from \\\"../../interfaces/IDefiBridge.sol\\\";\\nimport {IRollupProcessor} from \\\"../../interfaces/IRollupProcessor.sol\\\";\\n\\nimport {AztecTypes} from \\\"../../aztec/AztecTypes.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract LidoBridge is IDefiBridge {\\n    using SafeERC20 for ILido;\\n    using SafeERC20 for IWstETH;\\n\\n    error InvalidConfiguration();\\n    error InvalidCaller();\\n    error InvalidInput();\\n    error InvalidOutput();\\n    error InvalidWrapReturnValue();\\n    error InvalidUnwrapReturnValue();\\n    error AsyncDisabled();\\n\\n    address public immutable ROLLUP_PROCESSOR;\\n    address public immutable REFERRAL;\\n\\n    ILido public constant LIDO = ILido(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n    IWstETH public constant WRAPPED_STETH = IWstETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\\n    ICurvePool public constant CURVE_POOL = ICurvePool(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022);\\n\\n    int128 private constant CURVE_ETH_INDEX = 0;\\n    int128 private constant CURVE_STETH_INDEX = 1;\\n\\n    // The amount of dust to leave in the contract\\n    uint256 private constant DUST = 1;\\n\\n    constructor(address _rollupProcessor, address _referral) {\\n        if (CURVE_POOL.coins(uint256(uint128(CURVE_STETH_INDEX))) != address(LIDO)) {\\n            revert InvalidConfiguration();\\n        }\\n\\n        ROLLUP_PROCESSOR = _rollupProcessor;\\n        REFERRAL = _referral;\\n\\n        // As the contract is not supposed to hold any funds, we can pre-approve\\n        LIDO.safeIncreaseAllowance(address(WRAPPED_STETH), type(uint256).max);\\n        LIDO.safeIncreaseAllowance(address(CURVE_POOL), type(uint256).max);\\n        WRAPPED_STETH.safeIncreaseAllowance(ROLLUP_PROCESSOR, type(uint256).max);\\n    }\\n\\n    receive() external payable {}\\n\\n    function convert(\\n        AztecTypes.AztecAsset calldata inputAssetA,\\n        AztecTypes.AztecAsset calldata,\\n        AztecTypes.AztecAsset calldata outputAssetA,\\n        AztecTypes.AztecAsset calldata,\\n        uint256 inputValue,\\n        uint256 interactionNonce,\\n        uint64,\\n        address\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 outputValueA,\\n            uint256,\\n            bool isAsync\\n        )\\n    {\\n        if (msg.sender != ROLLUP_PROCESSOR) {\\n            revert InvalidCaller();\\n        }\\n\\n        bool isETHInput = inputAssetA.assetType == AztecTypes.AztecAssetType.ETH;\\n        bool isWstETHInput = inputAssetA.assetType == AztecTypes.AztecAssetType.ERC20 &&\\n            inputAssetA.erc20Address == address(WRAPPED_STETH);\\n\\n        if (!(isETHInput || isWstETHInput)) {\\n            revert InvalidInput();\\n        }\\n\\n        isAsync = false;\\n        outputValueA = isETHInput\\n            ? wrapETH(inputValue, outputAssetA)\\n            : unwrapETH(inputValue, outputAssetA, interactionNonce);\\n    }\\n\\n    /**\\n        Convert ETH -> wstETH\\n     */\\n    function wrapETH(uint256 inputValue, AztecTypes.AztecAsset calldata outputAsset)\\n        private\\n        returns (uint256 outputValue)\\n    {\\n        if (\\n            outputAsset.assetType != AztecTypes.AztecAssetType.ERC20 ||\\n            outputAsset.erc20Address != address(WRAPPED_STETH)\\n        ) {\\n            revert InvalidOutput();\\n        }\\n\\n        // deposit into lido (return value is shares NOT stETH)\\n        LIDO.submit{value: inputValue}(REFERRAL);\\n\\n        // Leave `DUST` in the stEth balance to save gas on future runs\\n        uint256 outputStETHBalance = LIDO.balanceOf(address(this)) - DUST;\\n\\n        // Lido balance can be <=2 wei off, 1 from the submit where our shares is computed rounding down,\\n        // and then again when the balance is computed from the shares, rounding down again.\\n        if (outputStETHBalance + 2 + DUST < inputValue) {\\n            revert InvalidWrapReturnValue();\\n        }\\n\\n        // since stETH is a rebase token, lets wrap it to wstETH before sending it back to the rollupProcessor.\\n        // Again, leave `DUST` in the wstEth balance to save gas on future runs\\n        outputValue = WRAPPED_STETH.wrap(outputStETHBalance) - DUST;\\n    }\\n\\n    /**\\n        Convert wstETH to ETH\\n     */\\n    function unwrapETH(\\n        uint256 inputValue,\\n        AztecTypes.AztecAsset calldata outputAsset,\\n        uint256 interactionNonce\\n    ) private returns (uint256 outputValue) {\\n        if (outputAsset.assetType != AztecTypes.AztecAssetType.ETH) {\\n            revert InvalidOutput();\\n        }\\n\\n        // Convert wstETH to stETH so we can exchange it on curve\\n        uint256 stETH = WRAPPED_STETH.unwrap(inputValue);\\n\\n        // Exchange stETH to ETH via curve\\n        uint256 dy = CURVE_POOL.exchange(CURVE_STETH_INDEX, CURVE_ETH_INDEX, stETH, 0);\\n\\n        outputValue = address(this).balance;\\n        if (outputValue < dy) {\\n            revert InvalidUnwrapReturnValue();\\n        }\\n\\n        // Send ETH to rollup processor\\n        IRollupProcessor(ROLLUP_PROCESSOR).receiveEthFromBridge{value: outputValue}(interactionNonce);\\n    }\\n\\n    function finalise(\\n        AztecTypes.AztecAsset calldata,\\n        AztecTypes.AztecAsset calldata,\\n        AztecTypes.AztecAsset calldata,\\n        AztecTypes.AztecAsset calldata,\\n        uint256,\\n        uint64\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        revert AsyncDisabled();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/bridges/lido/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv2\\npragma solidity >=0.8.4;\\n\\ninterface ICurvePool {\\n    function coins(uint256) external view returns (address);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/bridges/lido/interfaces/ILido.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv2\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILido is IERC20 {\\n    function submit(address _referral) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/bridges/lido/interfaces/IWstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv2\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWstETH is IERC20 {\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n\\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\\n\\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDefiBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-only\\n// Copyright 2022 Spilsbury Holdings Ltd\\npragma solidity >=0.8.4;\\n\\nimport {AztecTypes} from \\\"../aztec/AztecTypes.sol\\\";\\n\\ninterface IDefiBridge {\\n    /**\\n     * Input cases:\\n     * Case1: 1 real input.\\n     * Case2: 1 virtual asset input.\\n     * Case3: 1 real 1 virtual input.\\n     *\\n     * Output cases:\\n     * Case1: 1 real\\n     * Case2: 2 real\\n     * Case3: 1 real 1 virtual\\n     * Case4: 1 virtual\\n     *\\n     * Example use cases with asset mappings\\n     * 1 1: Swapping.\\n     * 1 2: Swapping with incentives (2nd output reward token).\\n     * 1 3: Borrowing. Lock up collateral, get back loan asset and virtual position asset.\\n     * 1 4: Opening lending position OR Purchasing NFT. Input real asset, get back virtual asset representing NFT or position.\\n     * 2 1: Selling NFT. Input the virtual asset, get back a real asset.\\n     * 2 2: Closing a lending position. Get back original asset and reward asset.\\n     * 2 3: Claiming fees from an open position.\\n     * 2 4: Voting on a 1 4 case.\\n     * 3 1: Repaying a borrow. Return loan plus interest. Get collateral back.\\n     * 3 2: Repaying a borrow. Return loan plus interest. Get collateral plus reward token. (AAVE)\\n     * 3 3: Partial loan repayment.\\n     * 3 4: DAO voting stuff.\\n     */\\n\\n    // @dev This function is called from the RollupProcessor.sol contract via the DefiBridgeProxy. It receives the aggregate sum of all users funds for the input assets.\\n    // @param AztecAsset inputAssetA a struct detailing the first input asset, this will always be set\\n    // @param AztecAsset inputAssetB an optional struct detailing the second input asset, this is used for repaying borrows and should be virtual\\n    // @param AztecAsset outputAssetA a struct detailing the first output asset, this will always be set\\n    // @param AztecAsset outputAssetB a struct detailing an optional second output asset\\n    // @param uint256 inputValue, the total amount input, if there are two input assets, equal amounts of both assets will have been input\\n    // @param uint256 interactionNonce a globally unique identifier for this DeFi interaction. This is used as the assetId if one of the output assets is virtual\\n    // @param uint64 auxData other data to be passed into the bridge contract (slippage / nftID etc)\\n    // @return uint256 outputValueA the amount of outputAssetA returned from this interaction, should be 0 if async\\n    // @return uint256 outputValueB the amount of outputAssetB returned from this interaction, should be 0 if async or bridge only returns 1 asset.\\n    // @return bool isAsync a flag to toggle if this bridge interaction will return assets at a later date after some third party contract has interacted with it via finalise()\\n    function convert(\\n        AztecTypes.AztecAsset calldata inputAssetA,\\n        AztecTypes.AztecAsset calldata inputAssetB,\\n        AztecTypes.AztecAsset calldata outputAssetA,\\n        AztecTypes.AztecAsset calldata outputAssetB,\\n        uint256 inputValue,\\n        uint256 interactionNonce,\\n        uint64 auxData,\\n        address rollupBeneficiary\\n    )\\n        external\\n        payable\\n        virtual\\n        returns (\\n            uint256 outputValueA,\\n            uint256 outputValueB,\\n            bool isAsync\\n        );\\n\\n    // @dev This function is called from the RollupProcessor.sol contract via the DefiBridgeProxy. It receives the aggregate sum of all users funds for the input assets.\\n    // @param AztecAsset inputAssetA a struct detailing the first input asset, this will always be set\\n    // @param AztecAsset inputAssetB an optional struct detailing the second input asset, this is used for repaying borrows and should be virtual\\n    // @param AztecAsset outputAssetA a struct detailing the first output asset, this will always be set\\n    // @param AztecAsset outputAssetB a struct detailing an optional second output asset\\n    // @param uint256 interactionNonce\\n    // @param uint64 auxData other data to be passed into the bridge contract (slippage / nftID etc)\\n    // @return uint256 outputValueA the return value of output asset A\\n    // @return uint256 outputValueB optional return value of output asset B\\n    // @dev this function should have a modifier on it to ensure it can only be called by the Rollup Contract\\n    function finalise(\\n        AztecTypes.AztecAsset calldata inputAssetA,\\n        AztecTypes.AztecAsset calldata inputAssetB,\\n        AztecTypes.AztecAsset calldata outputAssetA,\\n        AztecTypes.AztecAsset calldata outputAssetB,\\n        uint256 interactionNonce,\\n        uint64 auxData\\n    )\\n        external\\n        payable\\n        virtual\\n        returns (\\n            uint256 outputValueA,\\n            uint256 outputValueB,\\n            bool interactionComplete\\n        );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRollupProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-only\\n// Copyright 2022 Spilsbury Holdings Ltd\\npragma solidity >=0.8.4;\\n\\ninterface IRollupProcessor {\\n    function defiBridgeProxy() external view returns (address);\\n\\n    function processRollup(\\n        bytes calldata proofData,\\n        bytes calldata signatures,\\n        bytes calldata offchainTxData\\n    ) external;\\n\\n    function depositPendingFunds(\\n        uint256 assetId,\\n        uint256 amount,\\n        address owner,\\n        bytes32 proofHash\\n    ) external payable;\\n\\n    function depositPendingFundsPermit(\\n        uint256 assetId,\\n        uint256 amount,\\n        address owner,\\n        bytes32 proofHash,\\n        address spender,\\n        uint256 permitApprovalAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function receiveEthFromBridge(uint256 interactionNonce) external payable;\\n\\n    function setRollupProvider(address provderAddress, bool valid) external;\\n\\n    function approveProof(bytes32 _proofHash) external;\\n\\n    function pause() external;\\n\\n    function setDefiBridgeProxy(address feeDistributorAddress) external;\\n\\n    function setVerifier(address verifierAddress) external;\\n\\n    function setSupportedAsset(\\n        address linkedToken,\\n        bool supportsPermit,\\n        uint256 gasLimit\\n    ) external;\\n\\n    function setAssetPermitSupport(uint256 assetId, bool supportsPermit) external;\\n\\n    function setSupportedBridge(address linkedBridge, uint256 gasLimit) external;\\n\\n    function getSupportedAsset(uint256 assetId) external view returns (address);\\n\\n    function getSupportedAssets() external view returns (address[] memory);\\n\\n    function getSupportedBridge(uint256 bridgeAddressId) external view returns (address);\\n\\n    function getBridgeGasLimit(uint256 bridgeAddressId) external view returns (uint256);\\n\\n    function getSupportedBridges() external view returns (address[] memory);\\n\\n    function getAssetPermitSupport(uint256 assetId) external view returns (bool);\\n\\n    function getEscapeHatchStatus() external view returns (bool, uint256);\\n\\n    function getUserPendingDeposit(uint256 assetId, address userAddress) external view returns (uint256);\\n\\n    function processAsyncDefiInteraction(uint256 interactionNonce) external returns (bool);\\n\\n    function getDefiInteractionBlockNumber(uint256 interactionNonce) external view returns (uint256);\\n\\n    event DefiBridgeProcessed(\\n        uint256 indexed bridgeId,\\n        uint256 indexed nonce,\\n        uint256 totalInputValue,\\n        uint256 totalOutputValueA,\\n        uint256 totalOutputValueB,\\n        bool result\\n    );\\n    event AsyncDefiBridgeProcessed(\\n        uint256 indexed bridgeId,\\n        uint256 indexed nonce,\\n        uint256 totalInputValue,\\n        uint256 totalOutputValueA,\\n        uint256 totalOutputValueB,\\n        bool result\\n    );\\n}\\n\"\r\n    },\r\n    \"src/aztec/AztecTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-only\\n// Copyright 2020 Spilsbury Holdings Ltd\\n\\npragma solidity >=0.6.10 <=0.8.10;\\npragma experimental ABIEncoderV2;\\n\\nlibrary AztecTypes {\\n    enum AztecAssetType {\\n        NOT_USED,\\n        ETH,\\n        ERC20,\\n        VIRTUAL\\n    }\\n\\n    struct AztecAsset {\\n        uint256 id;\\n        address erc20Address;\\n        AztecAssetType assetType;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AsyncDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnwrapReturnValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWrapReturnValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CURVE_POOL\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIDO\",\"outputs\":[{\"internalType\":\"contract ILido\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLLUP_PROCESSOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_STETH\",\"outputs\":[{\"internalType\":\"contract IWstETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"inputAssetA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"outputAssetA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inputValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interactionNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputValueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAsync\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum AztecTypes.AztecAssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct AztecTypes.AztecAsset\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"finalise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LidoBridge", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ff1f2b4adb9df6fc8eafecdcbf96a2b351680455000000000000000000000000a57ec00bdba2904da1244db6fd770e0874f22e42", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}