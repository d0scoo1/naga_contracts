{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @sheepdex/core/contracts/interfaces/IOperContract.sol\r\n//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity =0.7.6;\r\n\r\ninterface IOperContract {\r\n    function operator() external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: @sheepdex/core/contracts/interfaces/ISwapDirector.sol\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\ninterface ISwapDirector is IOperContract {\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @sheepdex/core/contracts/lib/Operatable.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\n// seperate owner and operator, operator is for daily devops, only owner can update operator\r\ncontract Operatable is Ownable {\r\n    address public operator;\r\n\r\n    event SetOperator(address indexed oldOperator, address indexed newOperator);\r\n\r\n    constructor(){\r\n        operator = msg.sender;\r\n        emit SetOperator(address(0), operator);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, 'not operator');\r\n        _;\r\n    }\r\n\r\n    function setOperator(address newOperator) public onlyOwner {\r\n        require(newOperator != address(0), 'bad new operator');\r\n        address oldOperator = operator;\r\n        operator = newOperator;\r\n        emit SetOperator(oldOperator, newOperator);\r\n    }\r\n}\r\n\r\n// File: @sheepdex/core/contracts/lib/CheckOper.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\n\r\n// seperate owner and operator, operator is for daily devops, only owner can update operator\r\ncontract CheckOper is IOperContract {\r\n    Operatable public operatable;\r\n\r\n    event SetOperatorContract(address indexed oldOperator, address indexed newOperator);\r\n\r\n    constructor(address _oper){\r\n        operatable = Operatable(_oper);\r\n        emit SetOperatorContract(address(0), _oper);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operatable.operator() == msg.sender, 'not operator');\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(operatable.owner() == msg.sender, 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function operator() public view override returns (address) {\r\n        return operatable.operator();\r\n    }\r\n\r\n    function owner() public view override returns (address) {\r\n        return operatable.owner();\r\n    }\r\n\r\n    function setOperContract(address _oper) public onlyOwner {\r\n        require(_oper != address(0), 'bad new operator');\r\n        address oldOperator = _oper;\r\n        operatable = Operatable(_oper);\r\n        emit SetOperatorContract(oldOperator, _oper);\r\n    }\r\n}\r\n\r\n// File: @sheepdex/core/contracts/SwapDirector.sol\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\n\r\ncontract SwapDirector is ISwapDirector, CheckOper {\r\n    mapping(uint24 => int24) private _feeAmountTickSpacing;\r\n\r\n    constructor(address _operatorMsg) CheckOper(_operatorMsg) {\r\n        _feeAmountTickSpacing[500] = 10;\r\n        _feeAmountTickSpacing[1000] = 20;\r\n        _feeAmountTickSpacing[1500] = 30;\r\n        _feeAmountTickSpacing[2000] = 40;\r\n        _feeAmountTickSpacing[3000] = 60;\r\n        _feeAmountTickSpacing[4000] = 80;\r\n        _feeAmountTickSpacing[5000] = 100;\r\n        _feeAmountTickSpacing[10000] = 200;\r\n    }\r\n\r\n    function feeAmountTickSpacing(uint24 fee) public view override returns (int24) {\r\n        return _feeAmountTickSpacing[fee];\r\n    }\r\n\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) public onlyOperator {\r\n        require(fee < 1000000);\r\n        require(tickSpacing > 0 && tickSpacing < 16384);\r\n        require(_feeAmountTickSpacing[fee] == 0);\r\n        _feeAmountTickSpacing[fee] = tickSpacing;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorMsg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"SetOperatorContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatable\",\"outputs\":[{\"internalType\":\"contract Operatable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oper\",\"type\":\"address\"}],\"name\":\"setOperContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapDirector", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000038e5fcd4b81f645d8f0a294efc88685f88880a9b", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3feef8e3b0639ea59f6e6ca79727526cc35d5514c3d7a52e1bfaee8eb648f43d"}]}