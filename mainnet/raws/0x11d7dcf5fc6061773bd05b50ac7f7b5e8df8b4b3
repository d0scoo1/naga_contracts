{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.8.7;\r\npragma abicoder v2;\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\ninterface INonfungiblePositionManager {\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return fee The fee associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\ncontract MalTokenStakerHelper {\r\n    address public constant MAL_token  = address(0x6619078Bdd8324E01E9a8D4b3d761b050E5ECF06);\r\n    address public constant WETH_token = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public constant UNI_staker = address(0x1f98407aaB862CdDeF78Ed252D6f557aA5b0f00d);\r\n    INonfungiblePositionManager public constant manager = INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\r\n\r\n    function isValidTokenId(uint256 tokenId) public view returns(bool result) {\r\n        (\r\n            ,\r\n            ,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            ,\r\n            ,\r\n            uint128 liquidity,\r\n            ,\r\n            ,\r\n            ,\r\n        ) = manager.positions(tokenId);\r\n        if (token0 != MAL_token) return false;\r\n        if (token1 != WETH_token) return false;\r\n        if (fee != 3000) return false;\r\n        if (liquidity == 0) return false;\r\n        return true;\r\n    }\r\n\r\n    function findValidPositions(address owner, uint256 minPosition, uint256 maxPosition) public view returns (uint256[] memory validTokenIds) {\r\n        uint256 ownerTokens = manager.balanceOf(owner);\r\n        maxPosition = (maxPosition > 0 && ownerTokens < maxPosition) ? ownerTokens : maxPosition;\r\n        uint256[] memory buf = new uint256[](maxPosition - minPosition);\r\n        uint256 tokensFound = 0;\r\n        for(uint256 index = minPosition; index < maxPosition; ++index) {\r\n            uint256 tokenId = manager.tokenOfOwnerByIndex(owner, index);\r\n            if (isValidTokenId(tokenId)) {\r\n                buf[index - minPosition] = tokenId;\r\n                tokensFound += 1;\r\n            }\r\n        }\r\n        validTokenIds = new uint256[](tokensFound);\r\n        uint256 tokenPosition = 0;\r\n        for(uint256 index = minPosition; index < maxPosition; ++index) {\r\n            if (buf[index - minPosition] > 0) {\r\n                validTokenIds[tokenPosition] = buf[index - minPosition];\r\n                tokenPosition += 1;\r\n            }\r\n        }\r\n        return validTokenIds;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"MAL_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI_staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPosition\",\"type\":\"uint256\"}],\"name\":\"findValidPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"validTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isValidTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MalTokenStakerHelper", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9085ef38a785ffbbeea120e50d86ff23ff1bfe503783427863405ae7db7d5bef"}]}