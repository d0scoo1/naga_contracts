{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/testicle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ncontract NFTProxy {\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {}\\n\\n    function howManyBorp() public view virtual returns (uint256) {}\\n}\\n\\ncontract testicle {\\n\\n    address private constant borpacassoAddress =\\n        0x370108CF39555e561353B20ECF1eAae89bEb72ce;\\n    address private constant borpiAddress =\\n        0xeEABfab26ad5c650765b124C685A13800e52B9d2;\\n\\n    constructor() {\\n    }\\n\\n  function borpaInventory(address owner, bool borp, bool page)\\n        external\\n        view\\n        returns (uint256[] memory, uint256)\\n    {\\n        //false for Borpacasso, true for Borpi\\n        address nft;\\n        borp ? nft = borpiAddress : nft = borpacassoAddress;\\n\\n        NFTProxy sd = NFTProxy(nft);\\n        uint256 _loopThrough;\\n        uint256 _loopFrom;\\n\\n        if(!page){ //page0\\n            _loopFrom=1;\\n                _loopThrough = sd.howManyBorp()/2;\\n        }else{//page1\\n        _loopFrom=sd.howManyBorp()/2;\\n           _loopThrough = sd.howManyBorp();\\n        }\\n\\n        uint256 _balance = sd.balanceOf(owner);\\n        uint256[] memory _tokens = new uint256[](_balance);\\n        uint256 _index;        \\n\\n        for (uint256 i = _loopFrom; i < _loopThrough; i++) {            \\n            if (sd.ownerOf(i) == owner) {\\n                _tokens[_index] = i;\\n                _index++;\\n            }\\n        }\\n        return (_tokens, _index);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"page\",\"type\":\"bool\"}],\"name\":\"borpaInventory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "testicle", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}