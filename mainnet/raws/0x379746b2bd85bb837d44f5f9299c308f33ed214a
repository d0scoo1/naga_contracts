{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\nlibrary DssExecLib {\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    function vat()        public view returns (address) {}\r\n    function cat()        public view returns (address) {}\r\n    function pot()        public view returns (address) {}\r\n    function vow()        public view returns (address) {}\r\n    function end()        public view returns (address) {}\r\n    function reg()        public view returns (address) {}\r\n    function spotter()    public view returns (address) {}\r\n    function flipperMom() public view returns (address) {}\r\n    function flip(bytes32) public view returns (address) {}\r\n    function getChangelogAddress(bytes32) public view returns (address) {}\r\n    function setChangelogAddress(bytes32, address) public {}\r\n    function setChangelogVersion(string memory) public {}\r\n    function authorize(address, address) public {}\r\n    function deauthorize(address, address) public {}\r\n    function canCast(uint40, bool) public pure returns (bool) {}\r\n    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\r\n    function setContract(address, bytes32, address) public {}\r\n    function setContract(address, bytes32, bytes32, address) public {}\r\n    function setIlkStabilityFee(bytes32, uint256, bool) public {}\r\n    function setIlkLiquidationRatio(bytes32, uint256) public {}\r\n    function increaseGlobalDebtCeiling(uint256) public {}\r\n    function increaseIlkDebtCeiling(bytes32, uint256, bool) public {}\r\n    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\r\n    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\r\n    function addWritersToMedianWhitelist(address, address[] memory) public {}\r\n    function removeWritersFromMedianWhitelist(address, address[] memory) public {}\r\n    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\r\n    function addReaderToMedianWhitelist(address, address) public {}\r\n    function addReaderToOSMWhitelist(address, address) public {}\r\n    function removeReaderFromOSMWhitelist(address, address) public {}\r\n    function sendPaymentFromSurplusBuffer(address, uint256) public {}\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\r\n        require(eta <= uint40(-1));\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ClipAbstract.sol\r\n\r\n/// ClipAbstract.sol -- Clip Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\ninterface ClipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilk() external view returns (bytes32);\r\n    function vat() external view returns (address);\r\n    function dog() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function spotter() external view returns (address);\r\n    function calc() external view returns (address);\r\n    function buf() external view returns (uint256);\r\n    function tail() external view returns (uint256);\r\n    function cusp() external view returns (uint256);\r\n    function chip() external view returns (uint64);\r\n    function tip() external view returns (uint192);\r\n    function chost() external view returns (uint256);\r\n    function kicks() external view returns (uint256);\r\n    function active(uint256) external view returns (uint256);\r\n    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);\r\n    function stopped() external view returns (uint256);\r\n    function file(bytes32,uint256) external;\r\n    function file(bytes32,address) external;\r\n    function kick(uint256,uint256,address,address) external returns (uint256);\r\n    function redo(uint256,address) external;\r\n    function take(uint256,uint256,uint256,address,bytes calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (uint256[] memory);\r\n    function getStatus(uint256) external view returns (bool,uint256,uint256,uint256);\r\n    function upchost() external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ClipperMomAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/Clipper-mom/blob/master/src/ClipperMom.sol\r\ninterface ClipperMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function locked(address) external view returns (uint256);\r\n    function tolerance(address) external view returns (uint256);\r\n    function spotter() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setPriceTolerance(address, uint256) external;\r\n    function setBreaker(address, uint256, uint256) external;\r\n    function tripBreaker(address) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\n/* import {Fileable, ChainlogLike} from \"dss-exec-lib/DssExecLib.sol\"; */\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n/* import \"dss-interfaces/dss/ClipAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/ClipperMomAbstract.sol\"; */\r\n\r\nstruct Collateral {\r\n    bytes32 ilk;\r\n    address vat;\r\n    address vow;\r\n    address spotter;\r\n    address cat;\r\n    address dog;\r\n    address end;\r\n    address esm;\r\n    address flipperMom;\r\n    address clipperMom;\r\n    address ilkRegistry;\r\n    address pip;\r\n    address clipper;\r\n    address flipper;\r\n    address calc;\r\n    uint256 hole;\r\n    uint256 chop;\r\n    uint256 buf;\r\n    uint256 tail;\r\n    uint256 cusp;\r\n    uint256 chip;\r\n    uint256 tip;\r\n    uint256 cut;\r\n    uint256 step;\r\n    uint256 tolerance;\r\n    bytes32 clipKey;\r\n    bytes32 calcKey;\r\n    bytes32 flipKey;\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/582fa1231a30fa88093fa3385b973c66033ee1cd/governance/votes/Executive%20vote%20-%20June%204%2C%202021.md -q -O - 2> /dev/null)\"\r\n    string public constant description =\r\n        \"2021-06-04 MakerDAO Executive Spell | Hash: 0x6e8b30cd8c6e2ccb2b567345cc0fda23b143a1243b585d4af40a5b67eff1f3e6\";\r\n\r\n    // Turn off office hours\r\n    function officeHours() public override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n    uint256 constant RAD = 10**45;\r\n\r\n    address constant MCD_CLIP_USDC_A              = 0x046b1A5718da6A226D912cFd306BA19980772908;\r\n    address constant MCD_CLIP_CALC_USDC_A         = 0x0FCa4ba0B80123b5d22dD3C8BF595F3E561d594D;\r\n    address constant MCD_CLIP_USDC_B              = 0x5590F23358Fe17361d7E4E4f91219145D8cCfCb3;\r\n    address constant MCD_CLIP_CALC_USDC_B         = 0xD6FE411284b92d309F79e502Dd905D7A3b02F561;\r\n    address constant MCD_CLIP_TUSD_A              = 0x0F6f88f8A4b918584E3539182793a0C276097f44;\r\n    address constant MCD_CLIP_CALC_TUSD_A         = 0x059acdf311E38aAF77139638228d393Ff27639bF;\r\n    address constant MCD_CLIP_USDT_A              = 0xFC9D6Dd08BEE324A5A8B557d2854B9c36c2AeC5d;\r\n    address constant MCD_CLIP_CALC_USDT_A         = 0x1Cf3DE6D570291CDB88229E70037d1705d5be748;\r\n    address constant MCD_CLIP_PAXUSD_A            = 0xBCb396Cd139D1116BD89562B49b9D1d6c25378B0;\r\n    address constant MCD_CLIP_CALC_PAXUSD_A       = 0xAB98De83840b8367046383D2Adef9959E130923e;\r\n    address constant MCD_CLIP_GUSD_A              = 0xa47D68b9dB0A0361284fA04BA40623fcBd1a263E;\r\n    address constant MCD_CLIP_CALC_GUSD_A         = 0xF7e80359Cb9C4E6D178E6689eD8A6A6f91060747;\r\n    address constant MCD_CLIP_PSM_USDC_A          = 0x66609b4799fd7cE12BA799AD01094aBD13d5014D;\r\n    address constant MCD_CLIP_CALC_PSM_USDC_A     = 0xbeE028b5Fa9eb0aDAC5eeF7E5B13383172b91A4E;\r\n    address constant MCD_CLIP_UNIV2DAIUSDC_A      = 0x9B3310708af333f6F379FA42a5d09CBAA10ab309;\r\n    address constant MCD_CLIP_CALC_UNIV2DAIUSDC_A = 0xbEF2ab2aA5CC780A03bccf22AD3320c8CF35af6A;\r\n\r\n    address constant RWF_001_MULSTISIG  = 0x9e1585d9CA64243CE43D42f7dD7333190F66Ca09;\r\n    uint256 constant RWF_001_EXPENSE    = 40_000;\r\n    address constant RISK_001_MULSTISIG = 0xd98ef20520048a35EdA9A202137847A62120d2d9;\r\n    uint256 constant RISK_001_EXPENSE   = 100_500;\r\n    address constant GOV_001_MULSTISIG  = 0x01D26f8c5cC009868A4BF66E268c17B057fF7A73;\r\n    uint256 constant GOV_001_EXPENSE    = 80_000;\r\n    address constant PE_001_MULSTISIG   = 0xe2c16c308b843eD02B09156388Cb240cEd58C01c;\r\n    uint256 constant PE_001_EXPENSE     = 510_000;\r\n    address constant GRO_001_MULSTISIG  = 0x7800C137A645c07132886539217ce192b9F0528e;\r\n    uint256 constant GRO_001_EXPENSE    = 126_117;\r\n    address constant MKT_001_MULSTISIG  = 0xDCAF2C84e1154c8DdD3203880e5db965bfF09B60;\r\n    uint256 constant MKT_001_EXPENSE    = 44_375;\r\n    address constant SES_001_MULSTISIG  = 0x87AcDD9208f73bFc9207e1f6F0fDE906bcA95cc6;\r\n    uint256 constant SES_001_EXPENSE    = 642_135;\r\n\r\n    function flipperToClipper(Collateral memory col) internal {\r\n        // Check constructor values of Clipper\r\n        require(ClipAbstract(col.clipper).vat() == col.vat, \"DssSpell/clip-wrong-vat\");\r\n        require(ClipAbstract(col.clipper).spotter() == col.spotter, \"DssSpell/clip-wrong-spotter\");\r\n        require(ClipAbstract(col.clipper).dog() == col.dog, \"DssSpell/clip-wrong-dog\");\r\n        require(ClipAbstract(col.clipper).ilk() == col.ilk, \"DssSpell/clip-wrong-ilk\");\r\n        // Set CLIP for the ilk in the DOG\r\n        DssExecLib.setContract(col.dog, col.ilk, \"clip\", col.clipper);\r\n        // Set VOW in the CLIP\r\n        DssExecLib.setContract(col.clipper, \"vow\", col.vow);\r\n        // Set CALC in the CLIP\r\n        DssExecLib.setContract(col.clipper, \"calc\", col.calc);\r\n        // Authorize CLIP can access to VAT\r\n        DssExecLib.authorize(col.vat, col.clipper);\r\n        // Authorize CLIP can access to DOG\r\n        DssExecLib.authorize(col.dog, col.clipper);\r\n        // Authorize DOG can kick auctions on CLIP\r\n        DssExecLib.authorize(col.clipper, col.dog);\r\n        // Authorize the END to access the CLIP\r\n        DssExecLib.authorize(col.clipper, col.end);\r\n        // Authorize CLIPPERMOM can set the stopped flag in CLIP\r\n        // DssExecLib.authorize(col.clipper, col.clipperMom);\r\n        ClipAbstract(col.clipper).file(\"stopped\", 3);\r\n        // Authorize ESM to execute in Clipper\r\n        DssExecLib.authorize(col.clipper, col.esm);\r\n        if (col.pip != address(0)) {\r\n            // We are passing address(0) to those ilks that use a DSValue\r\n            // instead of an Osm or LPOracle. Meaning there is nothing to\r\n            // whilelist on them, the call would revert otherwise.\r\n\r\n            // Whitelist CLIP in the osm\r\n            DssExecLib.addReaderToOSMWhitelist(col.pip, col.clipper);\r\n            // Whitelist clipperMom in the osm\r\n            DssExecLib.addReaderToOSMWhitelist(col.pip, col.clipperMom);\r\n        }\r\n        // No more auctions kicked via the CAT:\r\n        DssExecLib.deauthorize(col.flipper, col.cat);\r\n        // No more circuit breaker for the FLIP:\r\n        DssExecLib.deauthorize(col.flipper, col.flipperMom);\r\n        // Set values\r\n        Fileable(col.dog).file(col.ilk, \"hole\", col.hole);\r\n        Fileable(col.dog).file(col.ilk, \"chop\", col.chop);\r\n        Fileable(col.clipper).file(\"buf\", col.buf);\r\n        Fileable(col.clipper).file(\"tail\", col.tail);\r\n        Fileable(col.clipper).file(\"cusp\", col.cusp);\r\n        Fileable(col.clipper).file(\"chip\", col.chip);\r\n        Fileable(col.clipper).file(\"tip\", col.tip);\r\n        Fileable(col.calc).file(\"cut\", col.cut);\r\n        Fileable(col.calc).file(\"step\", col.step);\r\n        ClipperMomAbstract(col.clipperMom).setPriceTolerance(col.clipper, col.tolerance);\r\n        // Update chost\r\n        ClipAbstract(col.clipper).upchost();\r\n        // Replace flip to clip in the ilk registry\r\n        DssExecLib.setContract(col.ilkRegistry, col.ilk, \"xlip\", col.clipper);\r\n        Fileable(col.ilkRegistry).file(col.ilk, \"class\", 1);\r\n        // Update Chainlog\r\n        DssExecLib.setChangelogAddress(col.clipKey, col.clipper);\r\n        DssExecLib.setChangelogAddress(col.calcKey, col.calc);\r\n        ChainlogLike(DssExecLib.LOG).removeAddress(col.flipKey);\r\n    }\r\n\r\n    function actions() public override {\r\n        address MCD_VAT         = DssExecLib.vat();\r\n        address MCD_CAT         = DssExecLib.cat();\r\n        address MCD_DOG         = DssExecLib.getChangelogAddress(\"MCD_DOG\");\r\n        address MCD_VOW         = DssExecLib.vow();\r\n        address MCD_SPOT        = DssExecLib.spotter();\r\n        address MCD_END         = DssExecLib.end();\r\n        address MCD_ESM         = DssExecLib.getChangelogAddress(\"MCD_ESM\");\r\n        address FLIPPER_MOM     = DssExecLib.getChangelogAddress(\"FLIPPER_MOM\");\r\n        address CLIPPER_MOM     = DssExecLib.getChangelogAddress(\"CLIPPER_MOM\");\r\n        address ILK_REGISTRY    = DssExecLib.getChangelogAddress(\"ILK_REGISTRY\");\r\n\r\n        // ----------------------------- Global Debt Ceiling ----------------------------\r\n        DssExecLib.increaseGlobalDebtCeiling(500_000_000);\r\n\r\n        // --------------------------------- PSM Fee Out --------------------------------\r\n        Fileable(DssExecLib.getChangelogAddress(\"MCD_PSM_USDC_A\")).file(\"tout\", 0);\r\n\r\n        // ----------------------------- Core Units Payments ----------------------------\r\n        DssExecLib.sendPaymentFromSurplusBuffer(RWF_001_MULSTISIG,  RWF_001_EXPENSE);\r\n        DssExecLib.sendPaymentFromSurplusBuffer(RISK_001_MULSTISIG, RISK_001_EXPENSE);\r\n        DssExecLib.sendPaymentFromSurplusBuffer(GOV_001_MULSTISIG,  GOV_001_EXPENSE);\r\n        DssExecLib.sendPaymentFromSurplusBuffer(PE_001_MULSTISIG,   PE_001_EXPENSE);\r\n        DssExecLib.sendPaymentFromSurplusBuffer(GRO_001_MULSTISIG,  GRO_001_EXPENSE);\r\n        DssExecLib.sendPaymentFromSurplusBuffer(MKT_001_MULSTISIG,  MKT_001_EXPENSE);\r\n        DssExecLib.sendPaymentFromSurplusBuffer(SES_001_MULSTISIG,  SES_001_EXPENSE);\r\n\r\n        // ----------------------------------- USDC-A -----------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"USDC-A\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: address(0), // DsValue (nothing to whitelist)\r\n            clipper: MCD_CLIP_USDC_A,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_USDC_A\"),\r\n            calc: MCD_CLIP_CALC_USDC_A,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_USDC_A\",\r\n            calcKey: \"MCD_CLIP_CALC_USDC_A\",\r\n            flipKey: \"MCD_FLIP_USDC_A\"\r\n        }));\r\n\r\n        // ----------------------------------- USDC-B -----------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"USDC-B\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: address(0), // DsValue (nothing to whitelist)\r\n            clipper: MCD_CLIP_USDC_B,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_USDC_B\"),\r\n            calc: MCD_CLIP_CALC_USDC_B,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_USDC_B\",\r\n            calcKey: \"MCD_CLIP_CALC_USDC_B\",\r\n            flipKey: \"MCD_FLIP_USDC_B\"\r\n        }));\r\n\r\n        // ----------------------------------- TUSD-A -----------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"TUSD-A\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: address(0), // DsValue (nothing to whitelist)\r\n            clipper: MCD_CLIP_TUSD_A,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_TUSD_A\"),\r\n            calc: MCD_CLIP_CALC_TUSD_A,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_TUSD_A\",\r\n            calcKey: \"MCD_CLIP_CALC_TUSD_A\",\r\n            flipKey: \"MCD_FLIP_TUSD_A\"\r\n        }));\r\n\r\n        // ----------------------------------- USDT-A -----------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"USDT-A\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: DssExecLib.getChangelogAddress(\"PIP_USDT\"),\r\n            clipper: MCD_CLIP_USDT_A,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_USDT_A\"),\r\n            calc: MCD_CLIP_CALC_USDT_A,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_USDT_A\",\r\n            calcKey: \"MCD_CLIP_CALC_USDT_A\",\r\n            flipKey: \"MCD_FLIP_USDT_A\"\r\n        }));\r\n\r\n        // ---------------------------------- PAXUSD-A ---------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"PAXUSD-A\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: address(0), // DsValue (nothing to whitelist)\r\n            clipper: MCD_CLIP_PAXUSD_A,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_PAXUSD_A\"),\r\n            calc: MCD_CLIP_CALC_PAXUSD_A,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_PAXUSD_A\",\r\n            calcKey: \"MCD_CLIP_CALC_PAXUSD_A\",\r\n            flipKey: \"MCD_FLIP_PAXUSD_A\"\r\n        }));\r\n\r\n        // ----------------------------------- GUSD-A -----------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"GUSD-A\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: address(0), // DsValue (nothing to whitelist)\r\n            clipper: MCD_CLIP_GUSD_A,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_GUSD_A\"),\r\n            calc: MCD_CLIP_CALC_GUSD_A,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_GUSD_A\",\r\n            calcKey: \"MCD_CLIP_CALC_GUSD_A\",\r\n            flipKey: \"MCD_FLIP_GUSD_A\"\r\n        }));\r\n\r\n        // ----------------------------------- PSM-USDC-A -----------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"PSM-USDC-A\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: address(0), // DsValue (nothing to whitelist)\r\n            clipper: MCD_CLIP_PSM_USDC_A,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_PSM_USDC_A\"),\r\n            calc: MCD_CLIP_CALC_PSM_USDC_A,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_PSM_USDC_A\",\r\n            calcKey: \"MCD_CLIP_CALC_PSM_USDC_A\",\r\n            flipKey: \"MCD_FLIP_PSM_USDC_A\"\r\n        }));\r\n\r\n        // ----------------------------------- UNIV2DAIUSDC-A -----------------------------------\r\n        flipperToClipper(Collateral({\r\n            ilk: \"UNIV2DAIUSDC-A\",\r\n            vat: MCD_VAT,\r\n            vow: MCD_VOW,\r\n            spotter: MCD_SPOT,\r\n            cat: MCD_CAT,\r\n            dog: MCD_DOG,\r\n            end: MCD_END,\r\n            esm: MCD_ESM,\r\n            flipperMom: FLIPPER_MOM,\r\n            clipperMom: CLIPPER_MOM,\r\n            ilkRegistry: ILK_REGISTRY,\r\n            pip: DssExecLib.getChangelogAddress(\"PIP_UNIV2DAIUSDC\"),\r\n            clipper: MCD_CLIP_UNIV2DAIUSDC_A,\r\n            flipper: DssExecLib.getChangelogAddress(\"MCD_FLIP_UNIV2DAIUSDC_A\"),\r\n            calc: MCD_CLIP_CALC_UNIV2DAIUSDC_A,\r\n            hole: 0,\r\n            chop: 113 * WAD / 100,\r\n            buf: 105 * RAY / 100,\r\n            tail: 220 minutes,\r\n            cusp: 90 * RAY / 100,\r\n            chip: 1 * WAD / 1000,\r\n            tip: 300 * RAD,\r\n            cut: 999 * RAY / 1000,\r\n            step: 120 seconds,\r\n            tolerance: 95 * RAY / 100,\r\n            clipKey: \"MCD_CLIP_UNIV2DAIUSDC_A\",\r\n            calcKey: \"MCD_CLIP_CALC_UNIV2DAIUSDC_A\",\r\n            flipKey: \"MCD_FLIP_UNIV2DAIUSDC_A\"\r\n        }));\r\n\r\n        // ------------------------- Update Chainlog -------------------------\r\n\r\n        DssExecLib.setChangelogVersion(\"1.9.0\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction internal action_ = new DssSpellAction();\r\n    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:c061edfc9c38912e0ad4f3922aa84ee11fb03347", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://04a7d58a4d6dc6faed6a708376eb40cef673af99e31e4d39e8798da006c0f324"}]}