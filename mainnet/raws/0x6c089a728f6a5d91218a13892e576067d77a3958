{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n     Klee Claim for V2\r\n\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory  errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory  errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapRouter02 is IUniswapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract kleeClaim {\r\n\r\n\r\n    address owner;\r\n    mapping(address => bool) banned;\r\n    mapping (address => uint256) public _balances;\r\n    \r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n     \r\n        banned[0x7E47B50B95d16e1b5A80586eeDDbb3c561907611]= true;\r\n        banned[0xC64e0Ca5A7C46e3B418c643C4F7AA6711261AffC]= true;\r\n        banned[0xA41000C7faF8dc1626cc332A1F5E98C9466691A5]= true;\r\n        banned[0xE5B8ff1ca1c3Ef2ac704783d6473Ee5a9BE7e02d]= true;\r\n        banned[0x0c93C1860C5BacF7015701e80CdC4c4CDEbC39c2]= true;\r\n        banned[0x6f47d53b62D1f28C49CE939D1f5655f81F8A48E1]= true;\r\n        banned[0xf67d4d639448Cd37b0f5ca3CED04433963f625fD]= true;\r\n        banned[0x983FCB1345BE0143FCAD9ed4E52284067F342a9C]= true;\r\n        banned[0xB20bF6D7f60059dd5dE46F3F0F32665a259ea6C0]= true;\r\n        banned[0xd68b57e44B6bD4b2512fC75E489eba671A8E449f]= true;\r\n        banned[0x4768c3CD39723178A039dd3fc6EA1470Bae7c385]= true;\r\n        banned[0xD9ce9aEC92f3dA9Bf4875023F19fA4F68742a401]= true;\r\n        banned[0xd585B5906264795D7F3e9a2cc6969bA849Bb9bB8]= true;\r\n        banned[0x0203eDf96D47925ed319188e2B150A7abAA068c5]= true;\r\n        banned[0xE23baA92776419fA239CbB92Ad5Db3945b0A6260]= true;\r\n        banned[0x12a2b0Ca9DEbf08E3a2b0C68184b2d7c7DDF4dC2]= true;\r\n        banned[0x57c96e36230a558b34eF4585B3bD4D27FffceACA]= true;\r\n        banned[0x174Ae5a36f5dd7591615E96f158614723a4D8E4E]= true;\r\n        banned[0x0B1D479D57D9Faa62Efb29762d0EE9B0Ef4B323b]= true;\r\n        banned[0x93b0fE68222B5fdC711BF7f82809Ab6D38c85C1f]= true;\r\n        banned[0x2B0362f2C5e49CDDc0B72353661bce783Ce5973E]= true;\r\n        banned[0xd94A906f40002E68974Fb75c2f30303ab57a91Ce]= true;\r\n        banned[0x04450499a50b117E3deC3F44cFc46318781Da5eF]= true;\r\n        banned[0xb79f2924A0d805082A0e1C131D1bDc73dBE1ADee]= true;\r\n        banned[0x0000000000D9455CC7EB92D06E00582A982f68fe]= true;\r\n        banned[0x5f62593C70069AbB35dFe2B63db969e8906609d6]= true;\r\n        banned[0xA929F030458Be505749Fc8eC8C3941225D6d1532]= true;\r\n        banned[0x30998E68E9f2A532131F69811fBB88870aa0389F]= true;\r\n        banned[0x9b19858616Abba3525c99A2B09B1C0F2F02d0179]= true;\r\n        banned[0x731Ea79A1B2B90683507Da2aaB498bd8fF8f7ff1]= true;\r\n        banned[0xfeCd0eF07223D35a79BaAD451b31A4Ad73Fa72e4]= true;\r\n        banned[0x308e78BF7848863bF75A1EB93bbD2B64Da7DA2c5]= true;\r\n        banned[0x00000000003b3cc22aF3aE1EAc0440BcEe416B40]= true;\r\n        banned[0x82B771E9F2F9B92B4B8f4EBDA4aeB60d3040d6Dc]= true;\r\n        banned[0xE8c060F8052E07423f71D445277c61AC5138A2e5]= true;\r\n        banned[0x6a06A7f368dd9c57DE34B0F725709E8939b9BeC1]= true;\r\n        banned[0x931b23DaC01EF88BE746d752252D831464a3834C]= true;\r\n        banned[0x2Cfcbd233268C302996c767347eb45bec36FB08D]= true;\r\n        banned[0x220bdA5c8994804Ac96ebe4DF184d25e5c2196D4]= true;\r\n        banned[0x19801f0647f12DdBbB265f3BAF5bdFE6386bD2B7]= true;\r\n        banned[0x05B5952da949F25368a5473D3D59B5aC73FaD486]= true;\r\n        banned[0x3Ed75618518B9D015d37A151b7a61dc1E79Ab49B]= true;\r\n        banned[0xC1dfd16259C2530e57aEa8A2cF106db5671616B0]= true;\r\n        banned[0xA268C06B5AA8B5C1EFCc0389F7b255DaE3Fa9323]= true;\r\n        banned[0xe0a9efE32985cC306255b395a1bd06D21ccEAd42]= true;\r\n        banned[0x9522B04D51983f669Bea38A5C6871e98a12E895f]= true;\r\n        banned[0x29a7f67A3F990ECbC9cFa2A94422CC644f396c80]= true;\r\n        banned[0x081D6316E9832700F7f1C4e3Eb26Fd8a047c86f6]= true;\r\n        banned[0x65463d202179AE0f2Aaa0FF58BEe3096Dcc78A5a]= true;\r\n        banned[0xFE52607e1482Fe634Fd82Ca82d74f12990d3dcBd]= true;\r\n        banned[0x07888c3C5D25fa74AE04A9EaD1fB1cF0E7743689]= true;\r\n        banned[0x0B741b593b891A12116372e78838a7E031884db0]= true;\r\n        banned[0x0B3DE409a3CC76C68d4d49d280D8A03a74Ad8383]= true;\r\n        banned[0xDFC43D46410cd1f3872ac2761adf6878f23c87a8]= true;\r\n        banned[0xE7C7611b8e053b7F1b315c6Aa9Abad0Abc008891]= true;\r\n        banned[0xb307F5Bb82efB174B190fe5c850c59ef8b2Ec936]= true;\r\n        banned[0xD13B2e65eCb2fAE93169BF91432864A5Da5FCA8C]= true;\r\n        banned[0x9c22cebB76ed68d241e2515D3fC0B0500C7Cb4b7]= true;\r\n        banned[0x2D7fd3D6aC1f67CB3012b40028Bee5f5A7b9e19A]= true;\r\n        banned[0xCe584ef141129d78641B490433CaE2fC1AC5bE05]= true;\r\n        banned[0xCe41DEd99eb6dE32Ef7eD76d5D2F9DfF0778c81F]= true;\r\n        banned[0x870727673AF0B5c68D1b940DEa139752d96bBC60]= true;\r\n        banned[0x57aE5a6837f6e0d0EEB9814b6eA42Ad165fd9C0e]= true;\r\n        banned[0xF570b31E75740f24a6cb89801F7170859AF86E91]= true;\r\n        banned[0x3F4Ad062F4D567dEb7fEeb48CdeCFEeDaeb81829]= true;\r\n        banned[0xC4b4F657f7423D0535c9C77d709e605FE59C1758]= true;\r\n        banned[0xaeB8f8C0b2f228eD7EB43e2301C50a6B35113b22]= true;\r\n        banned[0x5a5C953805ff7E26986eFE92814BF3b07B049F3a]= true;\r\n        banned[0x8BF1C20eCB5ad8d51f23C1AAc4D334A50dC36F0E]= true;\r\n        banned[0xe033480D7d808f41573C321c5Ab3f4100aF15CFA]= true;\r\n        banned[0x9D109CE0592a3c55E169fAC849D304B37fEfbFd3]= true;\r\n        banned[0x3B94f4585fFF1662bC001663f276CFDd33A032BD]= true;\r\n        banned[0x96Da549f4464947759704b719Cd0D57b5b3aA345]= true;\r\n        banned[0x4eBd211696ecD8D8b907c0f9F243ea926A19b636]= true;\r\n        banned[0x79ed0B975A095914a69cb97a3fc2e5432408f601]= true;\r\n        banned[0xc9a5ec9e1A950794Bf69B34d07947EB2E9664bfc]= true;\r\n        banned[0xE0a616C3659bE29567E08819772e6905307AdF21]= true;\r\n        banned[0x2045862499229570D8Ca1548dAE6087eFAb57F0E]= true;\r\n        banned[0x5961cDbBe665C8094BFBC9D888B21B82378f981a]= true;\r\n        banned[0xD1f9Cf2753a5A442d8DD47DE6142b4E9B6F4b1A5]= true;\r\n        banned[0xAC1C51c08621fc84E10E9D246642d1C69833d810]= true;\r\n        banned[0xc066A76701fD2Bc6b6c052F51d71B63275525B9c]= true;\r\n        banned[0x865D8cce369dDE678943Ab58d02445911725099A]= true;\r\n        banned[0x40dFfa04c2f49ec6e5aF0A11Ed30731065ceC0De]= true;\r\n        banned[0xC88b5277Cda867dB35f4D118A60C74d0eE11138C]= true;\r\n        banned[0x02b7FAF716019f98d78e7a06F9606ef5522673bB]= true;\r\n        banned[0x4d944a25bC871D6C6EE08baEf0b7dA0b08E6b7b3]= true;\r\n        banned[0x08D0B9AA7121f5B70f1109eBD4b04b18A6322FC7]= true;\r\n        banned[0x277ccfaB0C990705ED6e59F8E2A589a61679ffEd]= true;\r\n        banned[0xaf048Bc3e1EEb3EF5a4345E1a497274B1177B8c5]= true;\r\n        banned[0x66E70f6812a1567681127ca56d46Cb51AceCA316]= true;\r\n        banned[0x1c68E43890FEf21cd43f764150fff4121773e22d]= true;\r\n        banned[0x54d6A53E6133C3a1B6B4C467e2344529e1D495B9]= true;\r\n        banned[0xdd62fC4fF41801B0A65955ccAA35B46abC735D80]= true;\r\n        banned[0x84061a7F23F558a3552617bC204C435BC4a9d0DA]= true;\r\n        banned[0x9Bde1CECB101BE673B07383e0244821cc6b4F222]= true;\r\n        banned[0xcab12a4dC4D36f91C794d89b02db6457D2777f69]= true;\r\n        banned[0xc0FA1e4667Bc585b52371B4194b7ADB555359CdA]= true;\r\n        banned[0x4d21509DF723f9d09364012798b6dc777Fc717cc]= true;\r\n        banned[0xE5B8ff1ca1c3Ef2ac704783d6473Ee5a9BE7e02d]= true;\r\n        banned[0xE356fe28B7B6B015a3b2BB4419dBdF2777d7420B]= true;\r\n}\r\n\r\n\r\n\r\n    IERC20 klee = IERC20(0x382f0160c24f5c515A19f155BAc14d479433A407);\r\n    IERC20 newKlee = IERC20(0xA67E9F021B9d208F7e3365B2A155E3C55B27de71);\r\n\r\n    bool locked;\r\n    bool open;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n  modifier safe() {\r\n        require(!locked, \"reentrant\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n   bool public claim_enable;\r\n    mapping(address => bool) public claimed;\r\n     address[] public claimed_list;\r\n\r\n\r\n      function MIGRATION_control_claim(bool booly) public onlyOwner {\r\n        claim_enable = booly;\r\n    }\r\n\r\n  function MIGRATION_approve_v1() public safe {\r\n        \r\n        uint to_give = klee.balanceOf(msg.sender);\r\n        require(to_give > 0, \"No tokens to transfer\");\r\n        require(klee.allowance(msg.sender, address(this)) <= to_give, \"Already enough allowance\");\r\n        klee.approve(address(this), to_give*10);\r\n    }\r\n   \r\n\r\n     function claim_v2() public safe {\r\n       uint to_give = klee.balanceOf(msg.sender);\r\n        require(_balances[address(this)] >= to_give, \"Not enough tokens!\");\r\n        require(!claimed[msg.sender], \"go away\");\r\n        newKlee.transfer(msg.sender, to_give);\r\n        claimed[msg.sender] = true;\r\n        claimed_list.push(msg.sender);\r\n    }\r\n\r\n    function MIGRATION_allowance_on_v1(address addy) public view onlyOwner returns (uint allowed, uint balance) {\r\n        return (klee.allowance(addy, address(this)), klee.balanceOf(addy));\r\n    }\r\n\r\n\r\n   function MIGRATION_has_claimed(address addy) public view returns(bool has_it) {\r\n        return(claimed[addy]);\r\n    }\r\n\r\n\r\n    function set_address(address addy) public onlyOwner {\r\n        newKlee = IERC20(addy);\r\n    }\r\n\r\n    function ban(address addy) public onlyOwner {\r\n        banned[addy] = true;\r\n    }\r\n\r\n    \r\n    function unban(address addy) public onlyOwner {\r\n        banned[addy] = false;\r\n    }\r\n\r\n    function open_claim(bool booly) public onlyOwner {\r\n        open = booly;\r\n    }\r\n\r\n\r\n    function retire(address addy) public onlyOwner {\r\n        IERC20 tkn = IERC20(addy);\r\n        tkn.transfer(msg.sender, tkn.balanceOf(address(this)));\r\n    }\r\n\r\n      function rescueTokens(address addy) public onlyOwner {\r\n        IERC20 token = IERC20(addy);\r\n        uint256 ourBalance = token.balanceOf(address(this));\r\n        require(ourBalance>0, \"No tokens in our balance\");\r\n        token.transfer(msg.sender, ourBalance);\r\n    }\r\n\r\n\r\n    \r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"MIGRATION_allowance_on_v1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_approve_v1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"MIGRATION_control_claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"MIGRATION_has_claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"has_it\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"ban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_enable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_v2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"open_claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"set_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"unban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "kleeClaim", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d96939f6a1f9ba48cc6f8e2e74220fc419a08b831e158ac85982c55ce0a253b2"}]}